/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32g0xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32g0xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include<stdio.h>
#include<string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
ADC_HandleTypeDef hadc1;
UART_HandleTypeDef huart1;
TIM_HandleTypeDef htim6;
uint64_t sum = 0;
uint16_t adc = 0;
uint64_t av = 0;
uint64_t arr[60];
uint8_t one_sec = 0;
char msg[100];
uint16_t time1;
uint16_t time2;
uint16_t final_time;
uint8_t count=0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/

/* USER CODE BEGIN EV */

/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M0+ Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVC_IRQn 0 */

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32G0xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32g0xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if(HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin)==1){
			HAL_ADC_Start(&hadc1);
			HAL_UART_Transmit(&huart1, "Button Pressed\r\n", sizeof("Button Pressed\r\n"), HAL_MAX_DELAY);
			while(1)
			{
				while(one_sec < 60)
				{

					time1 =__HAL_TIM_GET_COUNTER(&htim6); //timer is running at
					final_time=0;

					while(final_time<1000) //if one sec complete
					{
						HAL_ADC_Start(&hadc1);
						HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
						adc = HAL_ADC_GetValue(&hadc1); //one sample/ms
						sum = sum+adc;
						time2 =__HAL_TIM_GET_COUNTER(&htim6);
						count++;
						//HAL_Delay(1000);
						//sprintf(msg,"sum=%d\r\n",sum);
						//HAL_UART_Transmit(&huart1, (uint8_t*)msg , strlen(msg), HAL_MAX_DELAY);
					}
					sprintf(msg,"count=%d\r\n",count);
					HAL_UART_Transmit(&huart1, (uint8_t*)msg , strlen(msg), HAL_MAX_DELAY);
					sprintf(msg,"sum=%d\r\n",sum);
					HAL_UART_Transmit(&huart1, (uint8_t*)msg , strlen(msg), HAL_MAX_DELAY);
					av = sum/1000; //1000 samples/sec
					sprintf(msg,"av=%d\r\n",av);
					HAL_UART_Transmit(&huart1, (uint8_t*)msg , strlen(msg), HAL_MAX_DELAY);
					arr[one_sec]=av;
					one_sec++;
					sum = 0;
					count = 0;
					sprintf(msg,"%d sec\r\n",one_sec);
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
				}

				one_sec = 0;
				HAL_UART_Transmit(&huart1, "one min complete\r\n", sizeof("one min complete\r\n"), HAL_MAX_DELAY);

				for(int i=0; i<60; i++)
				{
					uint16_t a = arr[i];
					sprintf(msg,"%d\r\n",a);
					HAL_UART_Transmit(&huart1, (uint8_t*)msg , strlen(msg), HAL_MAX_DELAY);
				}
			}


		}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
