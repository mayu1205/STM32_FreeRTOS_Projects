
pressure_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800478c  0800478c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004794  08004794  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800479c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  0800480c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  0800480c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb3d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002044  00000000  00000000  0002fbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00031c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  00032748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017934  00000000  00000000  000331a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec7d  00000000  00000000  0004aadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097605  00000000  00000000  00059759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0d5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb0  00000000  00000000  000f0db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800465c 	.word	0x0800465c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800465c 	.word	0x0800465c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 fa58 	bl	8000928 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 fa53 	bl	8000928 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__aeabi_fmul>:
 80005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ee:	4657      	mov	r7, sl
 80005f0:	464e      	mov	r6, r9
 80005f2:	4645      	mov	r5, r8
 80005f4:	46de      	mov	lr, fp
 80005f6:	0244      	lsls	r4, r0, #9
 80005f8:	b5e0      	push	{r5, r6, r7, lr}
 80005fa:	0045      	lsls	r5, r0, #1
 80005fc:	1c0f      	adds	r7, r1, #0
 80005fe:	0a64      	lsrs	r4, r4, #9
 8000600:	0e2d      	lsrs	r5, r5, #24
 8000602:	0fc6      	lsrs	r6, r0, #31
 8000604:	2d00      	cmp	r5, #0
 8000606:	d047      	beq.n	8000698 <__aeabi_fmul+0xac>
 8000608:	2dff      	cmp	r5, #255	; 0xff
 800060a:	d04d      	beq.n	80006a8 <__aeabi_fmul+0xbc>
 800060c:	2300      	movs	r3, #0
 800060e:	2080      	movs	r0, #128	; 0x80
 8000610:	469a      	mov	sl, r3
 8000612:	469b      	mov	fp, r3
 8000614:	00e4      	lsls	r4, r4, #3
 8000616:	04c0      	lsls	r0, r0, #19
 8000618:	4304      	orrs	r4, r0
 800061a:	3d7f      	subs	r5, #127	; 0x7f
 800061c:	0278      	lsls	r0, r7, #9
 800061e:	0a43      	lsrs	r3, r0, #9
 8000620:	4699      	mov	r9, r3
 8000622:	007a      	lsls	r2, r7, #1
 8000624:	0ffb      	lsrs	r3, r7, #31
 8000626:	4698      	mov	r8, r3
 8000628:	0e12      	lsrs	r2, r2, #24
 800062a:	464b      	mov	r3, r9
 800062c:	d044      	beq.n	80006b8 <__aeabi_fmul+0xcc>
 800062e:	2aff      	cmp	r2, #255	; 0xff
 8000630:	d011      	beq.n	8000656 <__aeabi_fmul+0x6a>
 8000632:	00d8      	lsls	r0, r3, #3
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	04db      	lsls	r3, r3, #19
 8000638:	4303      	orrs	r3, r0
 800063a:	4699      	mov	r9, r3
 800063c:	2000      	movs	r0, #0
 800063e:	3a7f      	subs	r2, #127	; 0x7f
 8000640:	18ad      	adds	r5, r5, r2
 8000642:	4647      	mov	r7, r8
 8000644:	4653      	mov	r3, sl
 8000646:	4077      	eors	r7, r6
 8000648:	1c69      	adds	r1, r5, #1
 800064a:	2b0f      	cmp	r3, #15
 800064c:	d83f      	bhi.n	80006ce <__aeabi_fmul+0xe2>
 800064e:	4a72      	ldr	r2, [pc, #456]	; (8000818 <__aeabi_fmul+0x22c>)
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	58d3      	ldr	r3, [r2, r3]
 8000654:	469f      	mov	pc, r3
 8000656:	35ff      	adds	r5, #255	; 0xff
 8000658:	2b00      	cmp	r3, #0
 800065a:	d000      	beq.n	800065e <__aeabi_fmul+0x72>
 800065c:	e079      	b.n	8000752 <__aeabi_fmul+0x166>
 800065e:	4652      	mov	r2, sl
 8000660:	2302      	movs	r3, #2
 8000662:	431a      	orrs	r2, r3
 8000664:	4692      	mov	sl, r2
 8000666:	2002      	movs	r0, #2
 8000668:	e7eb      	b.n	8000642 <__aeabi_fmul+0x56>
 800066a:	4647      	mov	r7, r8
 800066c:	464c      	mov	r4, r9
 800066e:	4683      	mov	fp, r0
 8000670:	465b      	mov	r3, fp
 8000672:	2b02      	cmp	r3, #2
 8000674:	d028      	beq.n	80006c8 <__aeabi_fmul+0xdc>
 8000676:	2b03      	cmp	r3, #3
 8000678:	d100      	bne.n	800067c <__aeabi_fmul+0x90>
 800067a:	e0c6      	b.n	800080a <__aeabi_fmul+0x21e>
 800067c:	2b01      	cmp	r3, #1
 800067e:	d14f      	bne.n	8000720 <__aeabi_fmul+0x134>
 8000680:	2000      	movs	r0, #0
 8000682:	2400      	movs	r4, #0
 8000684:	05c0      	lsls	r0, r0, #23
 8000686:	07ff      	lsls	r7, r7, #31
 8000688:	4320      	orrs	r0, r4
 800068a:	4338      	orrs	r0, r7
 800068c:	bcf0      	pop	{r4, r5, r6, r7}
 800068e:	46bb      	mov	fp, r7
 8000690:	46b2      	mov	sl, r6
 8000692:	46a9      	mov	r9, r5
 8000694:	46a0      	mov	r8, r4
 8000696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000698:	2c00      	cmp	r4, #0
 800069a:	d171      	bne.n	8000780 <__aeabi_fmul+0x194>
 800069c:	2304      	movs	r3, #4
 800069e:	469a      	mov	sl, r3
 80006a0:	3b03      	subs	r3, #3
 80006a2:	2500      	movs	r5, #0
 80006a4:	469b      	mov	fp, r3
 80006a6:	e7b9      	b.n	800061c <__aeabi_fmul+0x30>
 80006a8:	2c00      	cmp	r4, #0
 80006aa:	d163      	bne.n	8000774 <__aeabi_fmul+0x188>
 80006ac:	2308      	movs	r3, #8
 80006ae:	469a      	mov	sl, r3
 80006b0:	3b06      	subs	r3, #6
 80006b2:	25ff      	movs	r5, #255	; 0xff
 80006b4:	469b      	mov	fp, r3
 80006b6:	e7b1      	b.n	800061c <__aeabi_fmul+0x30>
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d150      	bne.n	800075e <__aeabi_fmul+0x172>
 80006bc:	4652      	mov	r2, sl
 80006be:	3301      	adds	r3, #1
 80006c0:	431a      	orrs	r2, r3
 80006c2:	4692      	mov	sl, r2
 80006c4:	2001      	movs	r0, #1
 80006c6:	e7bc      	b.n	8000642 <__aeabi_fmul+0x56>
 80006c8:	20ff      	movs	r0, #255	; 0xff
 80006ca:	2400      	movs	r4, #0
 80006cc:	e7da      	b.n	8000684 <__aeabi_fmul+0x98>
 80006ce:	4648      	mov	r0, r9
 80006d0:	0c26      	lsrs	r6, r4, #16
 80006d2:	0424      	lsls	r4, r4, #16
 80006d4:	0c22      	lsrs	r2, r4, #16
 80006d6:	0404      	lsls	r4, r0, #16
 80006d8:	0c24      	lsrs	r4, r4, #16
 80006da:	464b      	mov	r3, r9
 80006dc:	0020      	movs	r0, r4
 80006de:	0c1b      	lsrs	r3, r3, #16
 80006e0:	4350      	muls	r0, r2
 80006e2:	4374      	muls	r4, r6
 80006e4:	435a      	muls	r2, r3
 80006e6:	435e      	muls	r6, r3
 80006e8:	1912      	adds	r2, r2, r4
 80006ea:	0c03      	lsrs	r3, r0, #16
 80006ec:	189b      	adds	r3, r3, r2
 80006ee:	429c      	cmp	r4, r3
 80006f0:	d903      	bls.n	80006fa <__aeabi_fmul+0x10e>
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	0252      	lsls	r2, r2, #9
 80006f6:	4694      	mov	ip, r2
 80006f8:	4466      	add	r6, ip
 80006fa:	0400      	lsls	r0, r0, #16
 80006fc:	041a      	lsls	r2, r3, #16
 80006fe:	0c00      	lsrs	r0, r0, #16
 8000700:	1812      	adds	r2, r2, r0
 8000702:	0194      	lsls	r4, r2, #6
 8000704:	1e60      	subs	r0, r4, #1
 8000706:	4184      	sbcs	r4, r0
 8000708:	0c1b      	lsrs	r3, r3, #16
 800070a:	0e92      	lsrs	r2, r2, #26
 800070c:	199b      	adds	r3, r3, r6
 800070e:	4314      	orrs	r4, r2
 8000710:	019b      	lsls	r3, r3, #6
 8000712:	431c      	orrs	r4, r3
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	d572      	bpl.n	80007fe <__aeabi_fmul+0x212>
 8000718:	2001      	movs	r0, #1
 800071a:	0863      	lsrs	r3, r4, #1
 800071c:	4004      	ands	r4, r0
 800071e:	431c      	orrs	r4, r3
 8000720:	0008      	movs	r0, r1
 8000722:	307f      	adds	r0, #127	; 0x7f
 8000724:	2800      	cmp	r0, #0
 8000726:	dd3c      	ble.n	80007a2 <__aeabi_fmul+0x1b6>
 8000728:	0763      	lsls	r3, r4, #29
 800072a:	d004      	beq.n	8000736 <__aeabi_fmul+0x14a>
 800072c:	230f      	movs	r3, #15
 800072e:	4023      	ands	r3, r4
 8000730:	2b04      	cmp	r3, #4
 8000732:	d000      	beq.n	8000736 <__aeabi_fmul+0x14a>
 8000734:	3404      	adds	r4, #4
 8000736:	0123      	lsls	r3, r4, #4
 8000738:	d503      	bpl.n	8000742 <__aeabi_fmul+0x156>
 800073a:	3180      	adds	r1, #128	; 0x80
 800073c:	0008      	movs	r0, r1
 800073e:	4b37      	ldr	r3, [pc, #220]	; (800081c <__aeabi_fmul+0x230>)
 8000740:	401c      	ands	r4, r3
 8000742:	28fe      	cmp	r0, #254	; 0xfe
 8000744:	dcc0      	bgt.n	80006c8 <__aeabi_fmul+0xdc>
 8000746:	01a4      	lsls	r4, r4, #6
 8000748:	0a64      	lsrs	r4, r4, #9
 800074a:	b2c0      	uxtb	r0, r0
 800074c:	e79a      	b.n	8000684 <__aeabi_fmul+0x98>
 800074e:	0037      	movs	r7, r6
 8000750:	e78e      	b.n	8000670 <__aeabi_fmul+0x84>
 8000752:	4652      	mov	r2, sl
 8000754:	2303      	movs	r3, #3
 8000756:	431a      	orrs	r2, r3
 8000758:	4692      	mov	sl, r2
 800075a:	2003      	movs	r0, #3
 800075c:	e771      	b.n	8000642 <__aeabi_fmul+0x56>
 800075e:	4648      	mov	r0, r9
 8000760:	f000 f8c4 	bl	80008ec <__clzsi2>
 8000764:	464a      	mov	r2, r9
 8000766:	1f43      	subs	r3, r0, #5
 8000768:	409a      	lsls	r2, r3
 800076a:	1a2d      	subs	r5, r5, r0
 800076c:	4691      	mov	r9, r2
 800076e:	2000      	movs	r0, #0
 8000770:	3d76      	subs	r5, #118	; 0x76
 8000772:	e766      	b.n	8000642 <__aeabi_fmul+0x56>
 8000774:	230c      	movs	r3, #12
 8000776:	469a      	mov	sl, r3
 8000778:	3b09      	subs	r3, #9
 800077a:	25ff      	movs	r5, #255	; 0xff
 800077c:	469b      	mov	fp, r3
 800077e:	e74d      	b.n	800061c <__aeabi_fmul+0x30>
 8000780:	0020      	movs	r0, r4
 8000782:	f000 f8b3 	bl	80008ec <__clzsi2>
 8000786:	2576      	movs	r5, #118	; 0x76
 8000788:	1f43      	subs	r3, r0, #5
 800078a:	409c      	lsls	r4, r3
 800078c:	2300      	movs	r3, #0
 800078e:	426d      	negs	r5, r5
 8000790:	469a      	mov	sl, r3
 8000792:	469b      	mov	fp, r3
 8000794:	1a2d      	subs	r5, r5, r0
 8000796:	e741      	b.n	800061c <__aeabi_fmul+0x30>
 8000798:	2480      	movs	r4, #128	; 0x80
 800079a:	2700      	movs	r7, #0
 800079c:	20ff      	movs	r0, #255	; 0xff
 800079e:	03e4      	lsls	r4, r4, #15
 80007a0:	e770      	b.n	8000684 <__aeabi_fmul+0x98>
 80007a2:	2301      	movs	r3, #1
 80007a4:	1a1b      	subs	r3, r3, r0
 80007a6:	2b1b      	cmp	r3, #27
 80007a8:	dd00      	ble.n	80007ac <__aeabi_fmul+0x1c0>
 80007aa:	e769      	b.n	8000680 <__aeabi_fmul+0x94>
 80007ac:	319e      	adds	r1, #158	; 0x9e
 80007ae:	0020      	movs	r0, r4
 80007b0:	408c      	lsls	r4, r1
 80007b2:	40d8      	lsrs	r0, r3
 80007b4:	1e63      	subs	r3, r4, #1
 80007b6:	419c      	sbcs	r4, r3
 80007b8:	4304      	orrs	r4, r0
 80007ba:	0763      	lsls	r3, r4, #29
 80007bc:	d004      	beq.n	80007c8 <__aeabi_fmul+0x1dc>
 80007be:	230f      	movs	r3, #15
 80007c0:	4023      	ands	r3, r4
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d000      	beq.n	80007c8 <__aeabi_fmul+0x1dc>
 80007c6:	3404      	adds	r4, #4
 80007c8:	0163      	lsls	r3, r4, #5
 80007ca:	d51a      	bpl.n	8000802 <__aeabi_fmul+0x216>
 80007cc:	2001      	movs	r0, #1
 80007ce:	2400      	movs	r4, #0
 80007d0:	e758      	b.n	8000684 <__aeabi_fmul+0x98>
 80007d2:	2080      	movs	r0, #128	; 0x80
 80007d4:	03c0      	lsls	r0, r0, #15
 80007d6:	4204      	tst	r4, r0
 80007d8:	d009      	beq.n	80007ee <__aeabi_fmul+0x202>
 80007da:	464b      	mov	r3, r9
 80007dc:	4203      	tst	r3, r0
 80007de:	d106      	bne.n	80007ee <__aeabi_fmul+0x202>
 80007e0:	464c      	mov	r4, r9
 80007e2:	4304      	orrs	r4, r0
 80007e4:	0264      	lsls	r4, r4, #9
 80007e6:	4647      	mov	r7, r8
 80007e8:	20ff      	movs	r0, #255	; 0xff
 80007ea:	0a64      	lsrs	r4, r4, #9
 80007ec:	e74a      	b.n	8000684 <__aeabi_fmul+0x98>
 80007ee:	2080      	movs	r0, #128	; 0x80
 80007f0:	03c0      	lsls	r0, r0, #15
 80007f2:	4304      	orrs	r4, r0
 80007f4:	0264      	lsls	r4, r4, #9
 80007f6:	0037      	movs	r7, r6
 80007f8:	20ff      	movs	r0, #255	; 0xff
 80007fa:	0a64      	lsrs	r4, r4, #9
 80007fc:	e742      	b.n	8000684 <__aeabi_fmul+0x98>
 80007fe:	0029      	movs	r1, r5
 8000800:	e78e      	b.n	8000720 <__aeabi_fmul+0x134>
 8000802:	01a4      	lsls	r4, r4, #6
 8000804:	2000      	movs	r0, #0
 8000806:	0a64      	lsrs	r4, r4, #9
 8000808:	e73c      	b.n	8000684 <__aeabi_fmul+0x98>
 800080a:	2080      	movs	r0, #128	; 0x80
 800080c:	03c0      	lsls	r0, r0, #15
 800080e:	4304      	orrs	r4, r0
 8000810:	0264      	lsls	r4, r4, #9
 8000812:	20ff      	movs	r0, #255	; 0xff
 8000814:	0a64      	lsrs	r4, r4, #9
 8000816:	e735      	b.n	8000684 <__aeabi_fmul+0x98>
 8000818:	08004690 	.word	0x08004690
 800081c:	f7ffffff 	.word	0xf7ffffff

08000820 <__aeabi_f2iz>:
 8000820:	0241      	lsls	r1, r0, #9
 8000822:	0042      	lsls	r2, r0, #1
 8000824:	0fc3      	lsrs	r3, r0, #31
 8000826:	0a49      	lsrs	r1, r1, #9
 8000828:	2000      	movs	r0, #0
 800082a:	0e12      	lsrs	r2, r2, #24
 800082c:	2a7e      	cmp	r2, #126	; 0x7e
 800082e:	d903      	bls.n	8000838 <__aeabi_f2iz+0x18>
 8000830:	2a9d      	cmp	r2, #157	; 0x9d
 8000832:	d902      	bls.n	800083a <__aeabi_f2iz+0x1a>
 8000834:	4a09      	ldr	r2, [pc, #36]	; (800085c <__aeabi_f2iz+0x3c>)
 8000836:	1898      	adds	r0, r3, r2
 8000838:	4770      	bx	lr
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	0400      	lsls	r0, r0, #16
 800083e:	4301      	orrs	r1, r0
 8000840:	2a95      	cmp	r2, #149	; 0x95
 8000842:	dc07      	bgt.n	8000854 <__aeabi_f2iz+0x34>
 8000844:	2096      	movs	r0, #150	; 0x96
 8000846:	1a82      	subs	r2, r0, r2
 8000848:	40d1      	lsrs	r1, r2
 800084a:	4248      	negs	r0, r1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f3      	bne.n	8000838 <__aeabi_f2iz+0x18>
 8000850:	0008      	movs	r0, r1
 8000852:	e7f1      	b.n	8000838 <__aeabi_f2iz+0x18>
 8000854:	3a96      	subs	r2, #150	; 0x96
 8000856:	4091      	lsls	r1, r2
 8000858:	e7f7      	b.n	800084a <__aeabi_f2iz+0x2a>
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	7fffffff 	.word	0x7fffffff

08000860 <__aeabi_i2f>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	2800      	cmp	r0, #0
 8000864:	d013      	beq.n	800088e <__aeabi_i2f+0x2e>
 8000866:	17c3      	asrs	r3, r0, #31
 8000868:	18c5      	adds	r5, r0, r3
 800086a:	405d      	eors	r5, r3
 800086c:	0fc4      	lsrs	r4, r0, #31
 800086e:	0028      	movs	r0, r5
 8000870:	f000 f83c 	bl	80008ec <__clzsi2>
 8000874:	239e      	movs	r3, #158	; 0x9e
 8000876:	0001      	movs	r1, r0
 8000878:	1a1b      	subs	r3, r3, r0
 800087a:	2b96      	cmp	r3, #150	; 0x96
 800087c:	dc0f      	bgt.n	800089e <__aeabi_i2f+0x3e>
 800087e:	2808      	cmp	r0, #8
 8000880:	dd01      	ble.n	8000886 <__aeabi_i2f+0x26>
 8000882:	3908      	subs	r1, #8
 8000884:	408d      	lsls	r5, r1
 8000886:	026d      	lsls	r5, r5, #9
 8000888:	0a6d      	lsrs	r5, r5, #9
 800088a:	b2d8      	uxtb	r0, r3
 800088c:	e002      	b.n	8000894 <__aeabi_i2f+0x34>
 800088e:	2400      	movs	r4, #0
 8000890:	2000      	movs	r0, #0
 8000892:	2500      	movs	r5, #0
 8000894:	05c0      	lsls	r0, r0, #23
 8000896:	4328      	orrs	r0, r5
 8000898:	07e4      	lsls	r4, r4, #31
 800089a:	4320      	orrs	r0, r4
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	2b99      	cmp	r3, #153	; 0x99
 80008a0:	dd0b      	ble.n	80008ba <__aeabi_i2f+0x5a>
 80008a2:	2205      	movs	r2, #5
 80008a4:	002e      	movs	r6, r5
 80008a6:	1a12      	subs	r2, r2, r0
 80008a8:	40d6      	lsrs	r6, r2
 80008aa:	0002      	movs	r2, r0
 80008ac:	321b      	adds	r2, #27
 80008ae:	4095      	lsls	r5, r2
 80008b0:	0028      	movs	r0, r5
 80008b2:	1e45      	subs	r5, r0, #1
 80008b4:	41a8      	sbcs	r0, r5
 80008b6:	0035      	movs	r5, r6
 80008b8:	4305      	orrs	r5, r0
 80008ba:	2905      	cmp	r1, #5
 80008bc:	dd01      	ble.n	80008c2 <__aeabi_i2f+0x62>
 80008be:	1f4a      	subs	r2, r1, #5
 80008c0:	4095      	lsls	r5, r2
 80008c2:	002a      	movs	r2, r5
 80008c4:	4e08      	ldr	r6, [pc, #32]	; (80008e8 <__aeabi_i2f+0x88>)
 80008c6:	4032      	ands	r2, r6
 80008c8:	0768      	lsls	r0, r5, #29
 80008ca:	d009      	beq.n	80008e0 <__aeabi_i2f+0x80>
 80008cc:	200f      	movs	r0, #15
 80008ce:	4028      	ands	r0, r5
 80008d0:	2804      	cmp	r0, #4
 80008d2:	d005      	beq.n	80008e0 <__aeabi_i2f+0x80>
 80008d4:	3204      	adds	r2, #4
 80008d6:	0150      	lsls	r0, r2, #5
 80008d8:	d502      	bpl.n	80008e0 <__aeabi_i2f+0x80>
 80008da:	239f      	movs	r3, #159	; 0x9f
 80008dc:	4032      	ands	r2, r6
 80008de:	1a5b      	subs	r3, r3, r1
 80008e0:	0192      	lsls	r2, r2, #6
 80008e2:	0a55      	lsrs	r5, r2, #9
 80008e4:	b2d8      	uxtb	r0, r3
 80008e6:	e7d5      	b.n	8000894 <__aeabi_i2f+0x34>
 80008e8:	fbffffff 	.word	0xfbffffff

080008ec <__clzsi2>:
 80008ec:	211c      	movs	r1, #28
 80008ee:	2301      	movs	r3, #1
 80008f0:	041b      	lsls	r3, r3, #16
 80008f2:	4298      	cmp	r0, r3
 80008f4:	d301      	bcc.n	80008fa <__clzsi2+0xe>
 80008f6:	0c00      	lsrs	r0, r0, #16
 80008f8:	3910      	subs	r1, #16
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	4298      	cmp	r0, r3
 80008fe:	d301      	bcc.n	8000904 <__clzsi2+0x18>
 8000900:	0a00      	lsrs	r0, r0, #8
 8000902:	3908      	subs	r1, #8
 8000904:	091b      	lsrs	r3, r3, #4
 8000906:	4298      	cmp	r0, r3
 8000908:	d301      	bcc.n	800090e <__clzsi2+0x22>
 800090a:	0900      	lsrs	r0, r0, #4
 800090c:	3904      	subs	r1, #4
 800090e:	a202      	add	r2, pc, #8	; (adr r2, 8000918 <__clzsi2+0x2c>)
 8000910:	5c10      	ldrb	r0, [r2, r0]
 8000912:	1840      	adds	r0, r0, r1
 8000914:	4770      	bx	lr
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	02020304 	.word	0x02020304
 800091c:	01010101 	.word	0x01010101
	...

08000928 <__clzdi2>:
 8000928:	b510      	push	{r4, lr}
 800092a:	2900      	cmp	r1, #0
 800092c:	d103      	bne.n	8000936 <__clzdi2+0xe>
 800092e:	f7ff ffdd 	bl	80008ec <__clzsi2>
 8000932:	3020      	adds	r0, #32
 8000934:	e002      	b.n	800093c <__clzdi2+0x14>
 8000936:	1c08      	adds	r0, r1, #0
 8000938:	f7ff ffd8 	bl	80008ec <__clzsi2>
 800093c:	bd10      	pop	{r4, pc}
 800093e:	46c0      	nop			; (mov r8, r8)

08000940 <BMP280_Read_Temperature_Pressure>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void BMP280_Read_Temperature_Pressure(float* temperature, float* pressure) {
 8000940:	b5b0      	push	{r4, r5, r7, lr}
 8000942:	b098      	sub	sp, #96	; 0x60
 8000944:	af04      	add	r7, sp, #16
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
    uint8_t data[6]; // Data buffer for reading sensor values
    // Read temperature and pressure data
    if (HAL_I2C_Mem_Read(&hi2c2, BMP280_I2C_ADDRESS << 1, 0xF7, 1, data, 6, HAL_MAX_DELAY) != HAL_OK) {
 800094a:	483a      	ldr	r0, [pc, #232]	; (8000a34 <BMP280_Read_Temperature_Pressure+0xf4>)
 800094c:	2301      	movs	r3, #1
 800094e:	425b      	negs	r3, r3
 8000950:	9302      	str	r3, [sp, #8]
 8000952:	2306      	movs	r3, #6
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	233c      	movs	r3, #60	; 0x3c
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2301      	movs	r3, #1
 800095e:	22f7      	movs	r2, #247	; 0xf7
 8000960:	21ec      	movs	r1, #236	; 0xec
 8000962:	f000 ffe9 	bl	8001938 <HAL_I2C_Mem_Read>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <BMP280_Read_Temperature_Pressure+0x2e>
        Error_Handler();
 800096a:	f000 f9e9 	bl	8000d40 <Error_Handler>
    }

    // Process raw data to get temperature and pressure
    int32_t raw_temp = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4);
 800096e:	213c      	movs	r1, #60	; 0x3c
 8000970:	187b      	adds	r3, r7, r1
 8000972:	78db      	ldrb	r3, [r3, #3]
 8000974:	031a      	lsls	r2, r3, #12
 8000976:	187b      	adds	r3, r7, r1
 8000978:	791b      	ldrb	r3, [r3, #4]
 800097a:	011b      	lsls	r3, r3, #4
 800097c:	4313      	orrs	r3, r2
 800097e:	187a      	adds	r2, r7, r1
 8000980:	7952      	ldrb	r2, [r2, #5]
 8000982:	0912      	lsrs	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	4313      	orrs	r3, r2
 8000988:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t raw_pressure = (data[0] << 12) | (data[1] << 4) | (data[2] >> 4);
 800098a:	187b      	adds	r3, r7, r1
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	031a      	lsls	r2, r3, #12
 8000990:	187b      	adds	r3, r7, r1
 8000992:	785b      	ldrb	r3, [r3, #1]
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	4313      	orrs	r3, r2
 8000998:	187a      	adds	r2, r7, r1
 800099a:	7892      	ldrb	r2, [r2, #2]
 800099c:	0912      	lsrs	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	4313      	orrs	r3, r2
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48

    // Conversion formulas (see BMP280 datasheet)
    *temperature = 0.01f * raw_temp; // degrees Celsius
 80009a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80009a6:	f7ff ff5b 	bl	8000860 <__aeabi_i2f>
 80009aa:	1c03      	adds	r3, r0, #0
 80009ac:	4922      	ldr	r1, [pc, #136]	; (8000a38 <BMP280_Read_Temperature_Pressure+0xf8>)
 80009ae:	1c18      	adds	r0, r3, #0
 80009b0:	f7ff fe1c 	bl	80005ec <__aeabi_fmul>
 80009b4:	1c03      	adds	r3, r0, #0
 80009b6:	1c1a      	adds	r2, r3, #0
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	601a      	str	r2, [r3, #0]
    *pressure = 0.25f * raw_pressure; // Pa (Pascals)
 80009bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80009be:	f7ff ff4f 	bl	8000860 <__aeabi_i2f>
 80009c2:	1c03      	adds	r3, r0, #0
 80009c4:	21fa      	movs	r1, #250	; 0xfa
 80009c6:	0589      	lsls	r1, r1, #22
 80009c8:	1c18      	adds	r0, r3, #0
 80009ca:	f7ff fe0f 	bl	80005ec <__aeabi_fmul>
 80009ce:	1c03      	adds	r3, r0, #0
 80009d0:	1c1a      	adds	r2, r3, #0
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	601a      	str	r2, [r3, #0]

    // Send temperature over UART
    char msg[50];
    int temperature_integer = (int)(*temperature * 100); // Assuming 2 decimal places
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4918      	ldr	r1, [pc, #96]	; (8000a3c <BMP280_Read_Temperature_Pressure+0xfc>)
 80009dc:	1c18      	adds	r0, r3, #0
 80009de:	f7ff fe05 	bl	80005ec <__aeabi_fmul>
 80009e2:	1c03      	adds	r3, r0, #0
 80009e4:	1c18      	adds	r0, r3, #0
 80009e6:	f7ff ff1b 	bl	8000820 <__aeabi_f2iz>
 80009ea:	0003      	movs	r3, r0
 80009ec:	647b      	str	r3, [r7, #68]	; 0x44
    sprintf(msg, "Temperature: %d.%02d C\r\n", temperature_integer / 100, temperature_integer % 100);
 80009ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009f0:	2164      	movs	r1, #100	; 0x64
 80009f2:	0018      	movs	r0, r3
 80009f4:	f7ff fc22 	bl	800023c <__divsi3>
 80009f8:	0003      	movs	r3, r0
 80009fa:	001c      	movs	r4, r3
 80009fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009fe:	2164      	movs	r1, #100	; 0x64
 8000a00:	0018      	movs	r0, r3
 8000a02:	f7ff fd01 	bl	8000408 <__aeabi_idivmod>
 8000a06:	000b      	movs	r3, r1
 8000a08:	490d      	ldr	r1, [pc, #52]	; (8000a40 <BMP280_Read_Temperature_Pressure+0x100>)
 8000a0a:	2508      	movs	r5, #8
 8000a0c:	1978      	adds	r0, r7, r5
 8000a0e:	0022      	movs	r2, r4
 8000a10:	f003 f9fe 	bl	8003e10 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8000a14:	002c      	movs	r4, r5
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff fb73 	bl	8000104 <strlen>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	1939      	adds	r1, r7, r4
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <BMP280_Read_Temperature_Pressure+0x104>)
 8000a26:	2364      	movs	r3, #100	; 0x64
 8000a28:	f002 fb58 	bl	80030dc <HAL_UART_Transmit>
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b014      	add	sp, #80	; 0x50
 8000a32:	bdb0      	pop	{r4, r5, r7, pc}
 8000a34:	20000098 	.word	0x20000098
 8000a38:	3c23d70a 	.word	0x3c23d70a
 8000a3c:	42c80000 	.word	0x42c80000
 8000a40:	08004674 	.word	0x08004674
 8000a44:	200000e4 	.word	0x200000e4

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f000 fab9 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a52:	f000 f82b 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a56:	f000 f917 	bl	8000c88 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000a5a:	f000 f887 	bl	8000b6c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000a5e:	f000 f8c5 	bl	8000bec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t ctrl_meas = 0x27;
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	2227      	movs	r2, #39	; 0x27
 8000a66:	701a      	strb	r2, [r3, #0]
  if (HAL_I2C_Mem_Write(&hi2c2, BMP280_I2C_ADDRESS << 1, 0xF4, 1, &ctrl_meas, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000a68:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <main+0x60>)
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	2301      	movs	r3, #1
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	22f4      	movs	r2, #244	; 0xf4
 8000a7c:	21ec      	movs	r1, #236	; 0xec
 8000a7e:	f000 fe2d 	bl	80016dc <HAL_I2C_Mem_Write>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <main+0x42>
	  Error_Handler();
 8000a86:	f000 f95b 	bl	8000d40 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Read temperature and pressure data
	  BMP280_Read_Temperature_Pressure(&temperature, &pressure);
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	18fa      	adds	r2, r7, r3
 8000a8e:	230c      	movs	r3, #12
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ff53 	bl	8000940 <BMP280_Read_Temperature_Pressure>
	  // Delay for some time before the next reading
	  HAL_Delay(1000); // Delay for 1 second (adjust as needed)
 8000a9a:	23fa      	movs	r3, #250	; 0xfa
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fb16 	bl	80010d0 <HAL_Delay>
	  BMP280_Read_Temperature_Pressure(&temperature, &pressure);
 8000aa4:	e7f1      	b.n	8000a8a <main+0x42>
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	20000098 	.word	0x20000098

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b0a1      	sub	sp, #132	; 0x84
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	2448      	movs	r4, #72	; 0x48
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	2338      	movs	r3, #56	; 0x38
 8000aba:	001a      	movs	r2, r3
 8000abc:	2100      	movs	r1, #0
 8000abe:	f003 f99f 	bl	8003e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac2:	2338      	movs	r3, #56	; 0x38
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2310      	movs	r3, #16
 8000aca:	001a      	movs	r2, r3
 8000acc:	2100      	movs	r1, #0
 8000ace:	f003 f997 	bl	8003e00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	2334      	movs	r3, #52	; 0x34
 8000ad8:	001a      	movs	r2, r3
 8000ada:	2100      	movs	r1, #0
 8000adc:	f003 f990 	bl	8003e00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 fbdb 	bl	80022a0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2202      	movs	r2, #2
 8000aee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	0052      	lsls	r2, r2, #1
 8000af6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2240      	movs	r2, #64	; 0x40
 8000b02:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 fc13 	bl	8002338 <HAL_RCC_OscConfig>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b16:	f000 f913 	bl	8000d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	2138      	movs	r1, #56	; 0x38
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2207      	movs	r2, #7
 8000b20:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2100      	movs	r1, #0
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f001 ff17 	bl	800296c <HAL_RCC_ClockConfig>
 8000b3e:	1e03      	subs	r3, r0, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b42:	f000 f8fd 	bl	8000d40 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2202      	movs	r2, #2
 8000b4a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	0018      	movs	r0, r3
 8000b56:	f002 f8b3 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	1e03      	subs	r3, r0, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b5e:	f000 f8ef 	bl	8000d40 <Error_Handler>
  }
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b021      	add	sp, #132	; 0x84
 8000b68:	bd90      	pop	{r4, r7, pc}
	...

08000b6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000b72:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <MX_I2C2_Init+0x78>)
 8000b74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <MX_I2C2_Init+0x7c>)
 8000b7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 fd01 	bl	80015b0 <HAL_I2C_Init>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bb2:	f000 f8c5 	bl	8000d40 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fad8 	bl	8002170 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bc4:	f000 f8bc 	bl	8000d40 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <MX_I2C2_Init+0x74>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 fb1b 	bl	8002208 <HAL_I2CEx_ConfigDigitalFilter>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bd6:	f000 f8b3 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000098 	.word	0x20000098
 8000be4:	40005800 	.word	0x40005800
 8000be8:	00303d5b 	.word	0x00303d5b

08000bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000bf2:	4a24      	ldr	r2, [pc, #144]	; (8000c84 <MX_USART2_UART_Init+0x98>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bf6:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000bf8:	22e1      	movs	r2, #225	; 0xe1
 8000bfa:	0252      	lsls	r2, r2, #9
 8000bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f002 f9fa 	bl	8003030 <HAL_UART_Init>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c40:	f000 f87e 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f002 ffcf 	bl	8003bec <HAL_UARTEx_SetTxFifoThreshold>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c52:	f000 f875 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f003 f806 	bl	8003c6c <HAL_UARTEx_SetRxFifoThreshold>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c64:	f000 f86c 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f002 ff84 	bl	8003b78 <HAL_UARTEx_DisableFifoMode>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c74:	f000 f864 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	200000e4 	.word	0x200000e4
 8000c84:	40004400 	.word	0x40004400

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b08b      	sub	sp, #44	; 0x2c
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	2414      	movs	r4, #20
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	0018      	movs	r0, r3
 8000c94:	2314      	movs	r3, #20
 8000c96:	001a      	movs	r2, r3
 8000c98:	2100      	movs	r1, #0
 8000c9a:	f003 f8b1 	bl	8003e00 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8000caa:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cae:	2204      	movs	r2, #4
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb6:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cec:	2102      	movs	r1, #2
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000cfe:	23a0      	movs	r3, #160	; 0xa0
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	2200      	movs	r2, #0
 8000d04:	2120      	movs	r1, #32
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 fc34 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000d0c:	0021      	movs	r1, r4
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2220      	movs	r2, #32
 8000d12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2201      	movs	r2, #1
 8000d18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2202      	movs	r2, #2
 8000d24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d26:	187a      	adds	r2, r7, r1
 8000d28:	23a0      	movs	r3, #160	; 0xa0
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 fabc 	bl	80012ac <HAL_GPIO_Init>

}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b00b      	add	sp, #44	; 0x2c
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	40021000 	.word	0x40021000

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	2201      	movs	r2, #1
 8000d64:	4013      	ands	r3, r2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0549      	lsls	r1, r1, #21
 8000d74:	430a      	orrs	r2, r1
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	055b      	lsls	r3, r3, #21
 8000d80:	4013      	ands	r3, r2
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000d86:	23c0      	movs	r3, #192	; 0xc0
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 f9c4 	bl	8001118 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b08b      	sub	sp, #44	; 0x2c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	2414      	movs	r4, #20
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	0018      	movs	r0, r3
 8000daa:	2314      	movs	r3, #20
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f003 f826 	bl	8003e00 <memset>
  if(hi2c->Instance==I2C2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <HAL_I2C_MspInit+0x8c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d130      	bne.n	8000e20 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_I2C_MspInit+0x90>)
 8000dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_I2C_MspInit+0x90>)
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_I2C_MspInit+0x90>)
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	2202      	movs	r2, #2
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	22c0      	movs	r2, #192	; 0xc0
 8000dda:	01d2      	lsls	r2, r2, #7
 8000ddc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dde:	0021      	movs	r1, r4
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2212      	movs	r2, #18
 8000de4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2206      	movs	r2, #6
 8000df6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <HAL_I2C_MspInit+0x94>)
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0010      	movs	r0, r2
 8000e00:	f000 fa54 	bl	80012ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_I2C_MspInit+0x90>)
 8000e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_I2C_MspInit+0x90>)
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	03c9      	lsls	r1, r1, #15
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_I2C_MspInit+0x90>)
 8000e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	03db      	lsls	r3, r3, #15
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b00b      	add	sp, #44	; 0x2c
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	50000400 	.word	0x50000400

08000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b08b      	sub	sp, #44	; 0x2c
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	2414      	movs	r4, #20
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	0018      	movs	r0, r3
 8000e42:	2314      	movs	r3, #20
 8000e44:	001a      	movs	r2, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	f002 ffda 	bl	8003e00 <memset>
  if(huart->Instance==USART2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <HAL_UART_MspInit+0x8c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d130      	bne.n	8000eb8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_UART_MspInit+0x90>)
 8000e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <HAL_UART_MspInit+0x90>)
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	0289      	lsls	r1, r1, #10
 8000e60:	430a      	orrs	r2, r1
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_UART_MspInit+0x90>)
 8000e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	029b      	lsls	r3, r3, #10
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_UART_MspInit+0x90>)
 8000e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <HAL_UART_MspInit+0x90>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_UART_MspInit+0x90>)
 8000e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e82:	2201      	movs	r2, #1
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000e8a:	0021      	movs	r1, r4
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2202      	movs	r2, #2
 8000e96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	187a      	adds	r2, r7, r1
 8000eac:	23a0      	movs	r3, #160	; 0xa0
 8000eae:	05db      	lsls	r3, r3, #23
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 f9fa 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b00b      	add	sp, #44	; 0x2c
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 f8d4 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	18d3      	adds	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f002 ff40 	bl	8003dac <__errno>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	425b      	negs	r3, r3
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	18d2      	adds	r2, r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <_sbrk+0x64>)
 8000f48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b006      	add	sp, #24
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20009000 	.word	0x20009000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	2000008c 	.word	0x2000008c
 8000f60:	20000188 	.word	0x20000188

08000f64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f74:	f7ff fff6 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	; (8000fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <LoopForever+0xe>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	; (8000fbc <LoopForever+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f9e:	f002 ff0b 	bl	8003db8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fa2:	f7ff fd51 	bl	8000a48 <main>

08000fa6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fa6:	e7fe      	b.n	8000fa6 <LoopForever>
  ldr   r0, =_estack
 8000fa8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fb4:	0800479c 	.word	0x0800479c
  ldr r2, =_sbss
 8000fb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fbc:	20000188 	.word	0x20000188

08000fc0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_COMP_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_Init+0x3c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_Init+0x3c>)
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	0049      	lsls	r1, r1, #1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f810 	bl	8001004 <HAL_InitTick>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e001      	b.n	8000ff4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff feac 	bl	8000d4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781b      	ldrb	r3, [r3, #0]
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40022000 	.word	0x40022000

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800100c:	230f      	movs	r3, #15
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_InitTick+0x88>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d02b      	beq.n	8001074 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <HAL_InitTick+0x8c>)
 800101e:	681c      	ldr	r4, [r3, #0]
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_InitTick+0x88>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	0019      	movs	r1, r3
 8001026:	23fa      	movs	r3, #250	; 0xfa
 8001028:	0098      	lsls	r0, r3, #2
 800102a:	f7ff f87d 	bl	8000128 <__udivsi3>
 800102e:	0003      	movs	r3, r0
 8001030:	0019      	movs	r1, r3
 8001032:	0020      	movs	r0, r4
 8001034:	f7ff f878 	bl	8000128 <__udivsi3>
 8001038:	0003      	movs	r3, r0
 800103a:	0018      	movs	r0, r3
 800103c:	f000 f929 	bl	8001292 <HAL_SYSTICK_Config>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d112      	bne.n	800106a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d80a      	bhi.n	8001060 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	2200      	movs	r2, #0
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f908 	bl	8001268 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_InitTick+0x90>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e00d      	b.n	800107c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001060:	230f      	movs	r3, #15
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e008      	b.n	800107c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800106a:	230f      	movs	r3, #15
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e003      	b.n	800107c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001074:	230f      	movs	r3, #15
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800107c:	230f      	movs	r3, #15
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	781b      	ldrb	r3, [r3, #0]
}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b005      	add	sp, #20
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	20000008 	.word	0x20000008
 8001090:	20000000 	.word	0x20000000
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_IncTick+0x1c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	001a      	movs	r2, r3
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x20>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	18d2      	adds	r2, r2, r3
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_IncTick+0x20>)
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000174 	.word	0x20000174

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <HAL_GetTick+0x10>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	20000174 	.word	0x20000174

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff fff0 	bl	80010bc <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3301      	adds	r3, #1
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	001a      	movs	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	189b      	adds	r3, r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	f7ff ffe0 	bl	80010bc <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b004      	add	sp, #16
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	20000008 	.word	0x20000008

08001118 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001126:	4013      	ands	r3, r2
 8001128:	0019      	movs	r1, r3
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	40010000 	.word	0x40010000
 8001140:	fffff9ff 	.word	0xfffff9ff

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	0002      	movs	r2, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b7f      	cmp	r3, #127	; 0x7f
 8001158:	d828      	bhi.n	80011ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115a:	4a2f      	ldr	r2, [pc, #188]	; (8001218 <__NVIC_SetPriority+0xd4>)
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b25b      	sxtb	r3, r3
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	33c0      	adds	r3, #192	; 0xc0
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	589b      	ldr	r3, [r3, r2]
 800116a:	1dfa      	adds	r2, r7, #7
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	0011      	movs	r1, r2
 8001170:	2203      	movs	r2, #3
 8001172:	400a      	ands	r2, r1
 8001174:	00d2      	lsls	r2, r2, #3
 8001176:	21ff      	movs	r1, #255	; 0xff
 8001178:	4091      	lsls	r1, r2
 800117a:	000a      	movs	r2, r1
 800117c:	43d2      	mvns	r2, r2
 800117e:	401a      	ands	r2, r3
 8001180:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	019b      	lsls	r3, r3, #6
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	401a      	ands	r2, r3
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	0018      	movs	r0, r3
 8001190:	2303      	movs	r3, #3
 8001192:	4003      	ands	r3, r0
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001198:	481f      	ldr	r0, [pc, #124]	; (8001218 <__NVIC_SetPriority+0xd4>)
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	430a      	orrs	r2, r1
 80011a4:	33c0      	adds	r3, #192	; 0xc0
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011aa:	e031      	b.n	8001210 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <__NVIC_SetPriority+0xd8>)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	0019      	movs	r1, r3
 80011b4:	230f      	movs	r3, #15
 80011b6:	400b      	ands	r3, r1
 80011b8:	3b08      	subs	r3, #8
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3306      	adds	r3, #6
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	3304      	adds	r3, #4
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1dfa      	adds	r2, r7, #7
 80011c8:	7812      	ldrb	r2, [r2, #0]
 80011ca:	0011      	movs	r1, r2
 80011cc:	2203      	movs	r2, #3
 80011ce:	400a      	ands	r2, r1
 80011d0:	00d2      	lsls	r2, r2, #3
 80011d2:	21ff      	movs	r1, #255	; 0xff
 80011d4:	4091      	lsls	r1, r2
 80011d6:	000a      	movs	r2, r1
 80011d8:	43d2      	mvns	r2, r2
 80011da:	401a      	ands	r2, r3
 80011dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	019b      	lsls	r3, r3, #6
 80011e2:	22ff      	movs	r2, #255	; 0xff
 80011e4:	401a      	ands	r2, r3
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	0018      	movs	r0, r3
 80011ec:	2303      	movs	r3, #3
 80011ee:	4003      	ands	r3, r0
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <__NVIC_SetPriority+0xd8>)
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	001c      	movs	r4, r3
 80011fc:	230f      	movs	r3, #15
 80011fe:	4023      	ands	r3, r4
 8001200:	3b08      	subs	r3, #8
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	430a      	orrs	r2, r1
 8001206:	3306      	adds	r3, #6
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	18c3      	adds	r3, r0, r3
 800120c:	3304      	adds	r3, #4
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b003      	add	sp, #12
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	1e5a      	subs	r2, r3, #1
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	045b      	lsls	r3, r3, #17
 8001230:	429a      	cmp	r2, r3
 8001232:	d301      	bcc.n	8001238 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001234:	2301      	movs	r3, #1
 8001236:	e010      	b.n	800125a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <SysTick_Config+0x44>)
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	3a01      	subs	r2, #1
 800123e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001240:	2301      	movs	r3, #1
 8001242:	425b      	negs	r3, r3
 8001244:	2103      	movs	r1, #3
 8001246:	0018      	movs	r0, r3
 8001248:	f7ff ff7c 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x44>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x44>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	b002      	add	sp, #8
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	210f      	movs	r1, #15
 8001274:	187b      	adds	r3, r7, r1
 8001276:	1c02      	adds	r2, r0, #0
 8001278:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	187b      	adds	r3, r7, r1
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b25b      	sxtb	r3, r3
 8001282:	0011      	movs	r1, r2
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b004      	add	sp, #16
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff ffbf 	bl	8001220 <SysTick_Config>
 80012a2:	0003      	movs	r3, r0
}
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	e147      	b.n	800154c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2101      	movs	r1, #1
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4091      	lsls	r1, r2
 80012c6:	000a      	movs	r2, r1
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d100      	bne.n	80012d4 <HAL_GPIO_Init+0x28>
 80012d2:	e138      	b.n	8001546 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2203      	movs	r2, #3
 80012da:	4013      	ands	r3, r2
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d005      	beq.n	80012ec <HAL_GPIO_Init+0x40>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2203      	movs	r2, #3
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d130      	bne.n	800134e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	409a      	lsls	r2, r3
 80012fa:	0013      	movs	r3, r2
 80012fc:	43da      	mvns	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	409a      	lsls	r2, r3
 800130e:	0013      	movs	r3, r2
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001322:	2201      	movs	r2, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	2201      	movs	r2, #1
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	4013      	ands	r3, r2
 8001356:	2b03      	cmp	r3, #3
 8001358:	d017      	beq.n	800138a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	43da      	mvns	r2, r3
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2203      	movs	r2, #3
 8001390:	4013      	ands	r3, r2
 8001392:	2b02      	cmp	r3, #2
 8001394:	d123      	bne.n	80013de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3208      	adds	r2, #8
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	58d3      	ldr	r3, [r2, r3]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2207      	movs	r2, #7
 80013a8:	4013      	ands	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	409a      	lsls	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	43da      	mvns	r2, r3
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691a      	ldr	r2, [r3, #16]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2107      	movs	r1, #7
 80013c2:	400b      	ands	r3, r1
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	409a      	lsls	r2, r3
 80013c8:	0013      	movs	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	0092      	lsls	r2, r2, #2
 80013da:	6939      	ldr	r1, [r7, #16]
 80013dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	43da      	mvns	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2203      	movs	r2, #3
 80013fc:	401a      	ands	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	409a      	lsls	r2, r3
 8001404:	0013      	movs	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	23c0      	movs	r3, #192	; 0xc0
 8001418:	029b      	lsls	r3, r3, #10
 800141a:	4013      	ands	r3, r2
 800141c:	d100      	bne.n	8001420 <HAL_GPIO_Init+0x174>
 800141e:	e092      	b.n	8001546 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001420:	4a50      	ldr	r2, [pc, #320]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3318      	adds	r3, #24
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	589b      	ldr	r3, [r3, r2]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2203      	movs	r2, #3
 8001432:	4013      	ands	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	220f      	movs	r2, #15
 8001438:	409a      	lsls	r2, r3
 800143a:	0013      	movs	r3, r2
 800143c:	43da      	mvns	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	23a0      	movs	r3, #160	; 0xa0
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	429a      	cmp	r2, r3
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_Init+0x1ca>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a45      	ldr	r2, [pc, #276]	; (8001568 <HAL_GPIO_Init+0x2bc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00d      	beq.n	8001472 <HAL_GPIO_Init+0x1c6>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a44      	ldr	r2, [pc, #272]	; (800156c <HAL_GPIO_Init+0x2c0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d007      	beq.n	800146e <HAL_GPIO_Init+0x1c2>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a43      	ldr	r2, [pc, #268]	; (8001570 <HAL_GPIO_Init+0x2c4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_GPIO_Init+0x1be>
 8001466:	2303      	movs	r3, #3
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x1cc>
 800146a:	2305      	movs	r3, #5
 800146c:	e004      	b.n	8001478 <HAL_GPIO_Init+0x1cc>
 800146e:	2302      	movs	r3, #2
 8001470:	e002      	b.n	8001478 <HAL_GPIO_Init+0x1cc>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x1cc>
 8001476:	2300      	movs	r3, #0
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	2103      	movs	r1, #3
 800147c:	400a      	ands	r2, r1
 800147e:	00d2      	lsls	r2, r2, #3
 8001480:	4093      	lsls	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001488:	4936      	ldr	r1, [pc, #216]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3318      	adds	r3, #24
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001496:	4b33      	ldr	r3, [pc, #204]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	035b      	lsls	r3, r3, #13
 80014ae:	4013      	ands	r3, r2
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43da      	mvns	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	039b      	lsls	r3, r3, #14
 80014d8:	4013      	ands	r3, r2
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 80014ec:	2384      	movs	r3, #132	; 0x84
 80014ee:	58d3      	ldr	r3, [r2, r3]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43da      	mvns	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	029b      	lsls	r3, r3, #10
 8001504:	4013      	ands	r3, r2
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001510:	4914      	ldr	r1, [pc, #80]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 8001512:	2284      	movs	r2, #132	; 0x84
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	58d3      	ldr	r3, [r2, r3]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43da      	mvns	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	4013      	ands	r3, r2
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800153e:	4909      	ldr	r1, [pc, #36]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	40da      	lsrs	r2, r3
 8001554:	1e13      	subs	r3, r2, #0
 8001556:	d000      	beq.n	800155a <HAL_GPIO_Init+0x2ae>
 8001558:	e6b0      	b.n	80012bc <HAL_GPIO_Init+0x10>
  }
}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b006      	add	sp, #24
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021800 	.word	0x40021800
 8001568:	50000400 	.word	0x50000400
 800156c:	50000800 	.word	0x50000800
 8001570:	50000c00 	.word	0x50000c00

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	0008      	movs	r0, r1
 800157e:	0011      	movs	r1, r2
 8001580:	1cbb      	adds	r3, r7, #2
 8001582:	1c02      	adds	r2, r0, #0
 8001584:	801a      	strh	r2, [r3, #0]
 8001586:	1c7b      	adds	r3, r7, #1
 8001588:	1c0a      	adds	r2, r1, #0
 800158a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800158c:	1c7b      	adds	r3, r7, #1
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001594:	1cbb      	adds	r3, r7, #2
 8001596:	881a      	ldrh	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800159e:	1cbb      	adds	r3, r7, #2
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b002      	add	sp, #8
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e082      	b.n	80016c8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2241      	movs	r2, #65	; 0x41
 80015c6:	5c9b      	ldrb	r3, [r3, r2]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d107      	bne.n	80015de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2240      	movs	r2, #64	; 0x40
 80015d2:	2100      	movs	r1, #0
 80015d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff fbdf 	bl	8000d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2241      	movs	r2, #65	; 0x41
 80015e2:	2124      	movs	r1, #36	; 0x24
 80015e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	438a      	bics	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4934      	ldr	r1, [pc, #208]	; (80016d0 <HAL_I2C_Init+0x120>)
 8001600:	400a      	ands	r2, r1
 8001602:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4931      	ldr	r1, [pc, #196]	; (80016d4 <HAL_I2C_Init+0x124>)
 8001610:	400a      	ands	r2, r1
 8001612:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d108      	bne.n	800162e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	0209      	lsls	r1, r1, #8
 8001628:	430a      	orrs	r2, r1
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	e007      	b.n	800163e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2184      	movs	r1, #132	; 0x84
 8001638:	0209      	lsls	r1, r1, #8
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d104      	bne.n	8001650 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	491f      	ldr	r1, [pc, #124]	; (80016d8 <HAL_I2C_Init+0x128>)
 800165c:	430a      	orrs	r2, r1
 800165e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	491a      	ldr	r1, [pc, #104]	; (80016d4 <HAL_I2C_Init+0x124>)
 800166c:	400a      	ands	r2, r1
 800166e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	431a      	orrs	r2, r3
 800167a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69d9      	ldr	r1, [r3, #28]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1a      	ldr	r2, [r3, #32]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2241      	movs	r2, #65	; 0x41
 80016b4:	2120      	movs	r1, #32
 80016b6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2242      	movs	r2, #66	; 0x42
 80016c2:	2100      	movs	r1, #0
 80016c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	f0ffffff 	.word	0xf0ffffff
 80016d4:	ffff7fff 	.word	0xffff7fff
 80016d8:	02008000 	.word	0x02008000

080016dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	000c      	movs	r4, r1
 80016e6:	0010      	movs	r0, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	230a      	movs	r3, #10
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	1c22      	adds	r2, r4, #0
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	2308      	movs	r3, #8
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	1c02      	adds	r2, r0, #0
 80016f8:	801a      	strh	r2, [r3, #0]
 80016fa:	1dbb      	adds	r3, r7, #6
 80016fc:	1c0a      	adds	r2, r1, #0
 80016fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2241      	movs	r2, #65	; 0x41
 8001704:	5c9b      	ldrb	r3, [r3, r2]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b20      	cmp	r3, #32
 800170a:	d000      	beq.n	800170e <HAL_I2C_Mem_Write+0x32>
 800170c:	e10c      	b.n	8001928 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_I2C_Mem_Write+0x42>
 8001714:	232c      	movs	r3, #44	; 0x2c
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0ff      	b.n	800192a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2240      	movs	r2, #64	; 0x40
 800172e:	5c9b      	ldrb	r3, [r3, r2]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_I2C_Mem_Write+0x5c>
 8001734:	2302      	movs	r3, #2
 8001736:	e0f8      	b.n	800192a <HAL_I2C_Mem_Write+0x24e>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2240      	movs	r2, #64	; 0x40
 800173c:	2101      	movs	r1, #1
 800173e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001740:	f7ff fcbc 	bl	80010bc <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	0219      	lsls	r1, r3, #8
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2319      	movs	r3, #25
 8001754:	2201      	movs	r2, #1
 8001756:	f000 fb0b 	bl	8001d70 <I2C_WaitOnFlagUntilTimeout>
 800175a:	1e03      	subs	r3, r0, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0e3      	b.n	800192a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2241      	movs	r2, #65	; 0x41
 8001766:	2121      	movs	r1, #33	; 0x21
 8001768:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2242      	movs	r2, #66	; 0x42
 800176e:	2140      	movs	r1, #64	; 0x40
 8001770:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	222c      	movs	r2, #44	; 0x2c
 8001782:	18ba      	adds	r2, r7, r2
 8001784:	8812      	ldrh	r2, [r2, #0]
 8001786:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800178e:	1dbb      	adds	r3, r7, #6
 8001790:	881c      	ldrh	r4, [r3, #0]
 8001792:	2308      	movs	r3, #8
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	881a      	ldrh	r2, [r3, #0]
 8001798:	230a      	movs	r3, #10
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	8819      	ldrh	r1, [r3, #0]
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	0023      	movs	r3, r4
 80017aa:	f000 f9f9 	bl	8001ba0 <I2C_RequestMemoryWrite>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d005      	beq.n	80017be <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2240      	movs	r2, #64	; 0x40
 80017b6:	2100      	movs	r1, #0
 80017b8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e0b5      	b.n	800192a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2bff      	cmp	r3, #255	; 0xff
 80017c6:	d911      	bls.n	80017ec <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	22ff      	movs	r2, #255	; 0xff
 80017cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	045c      	lsls	r4, r3, #17
 80017d8:	230a      	movs	r3, #10
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	8819      	ldrh	r1, [r3, #0]
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	2300      	movs	r3, #0
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	0023      	movs	r3, r4
 80017e6:	f000 fc89 	bl	80020fc <I2C_TransferConfig>
 80017ea:	e012      	b.n	8001812 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	049c      	lsls	r4, r3, #18
 8001800:	230a      	movs	r3, #10
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	8819      	ldrh	r1, [r3, #0]
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	2300      	movs	r3, #0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	0023      	movs	r3, r4
 800180e:	f000 fc75 	bl	80020fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	0018      	movs	r0, r3
 800181a:	f000 fae8 	bl	8001dee <I2C_WaitOnTXISFlagUntilTimeout>
 800181e:	1e03      	subs	r3, r0, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e081      	b.n	800192a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d03a      	beq.n	80018d6 <HAL_I2C_Mem_Write+0x1fa>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	d136      	bne.n	80018d6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	0013      	movs	r3, r2
 8001872:	2200      	movs	r2, #0
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	f000 fa7b 	bl	8001d70 <I2C_WaitOnFlagUntilTimeout>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e053      	b.n	800192a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	2bff      	cmp	r3, #255	; 0xff
 800188a:	d911      	bls.n	80018b0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	22ff      	movs	r2, #255	; 0xff
 8001890:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	b2da      	uxtb	r2, r3
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	045c      	lsls	r4, r3, #17
 800189c:	230a      	movs	r3, #10
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	8819      	ldrh	r1, [r3, #0]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	2300      	movs	r3, #0
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	0023      	movs	r3, r4
 80018aa:	f000 fc27 	bl	80020fc <I2C_TransferConfig>
 80018ae:	e012      	b.n	80018d6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	049c      	lsls	r4, r3, #18
 80018c4:	230a      	movs	r3, #10
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	8819      	ldrh	r1, [r3, #0]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	2300      	movs	r3, #0
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	0023      	movs	r3, r4
 80018d2:	f000 fc13 	bl	80020fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d198      	bne.n	8001812 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	0018      	movs	r0, r3
 80018e8:	f000 fac0 	bl	8001e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80018ec:	1e03      	subs	r3, r0, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e01a      	b.n	800192a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2220      	movs	r2, #32
 80018fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	490b      	ldr	r1, [pc, #44]	; (8001934 <HAL_I2C_Mem_Write+0x258>)
 8001908:	400a      	ands	r2, r1
 800190a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2241      	movs	r2, #65	; 0x41
 8001910:	2120      	movs	r1, #32
 8001912:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2242      	movs	r2, #66	; 0x42
 8001918:	2100      	movs	r1, #0
 800191a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	2100      	movs	r1, #0
 8001922:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	e000      	b.n	800192a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001928:	2302      	movs	r3, #2
  }
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b007      	add	sp, #28
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	fe00e800 	.word	0xfe00e800

08001938 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af02      	add	r7, sp, #8
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	000c      	movs	r4, r1
 8001942:	0010      	movs	r0, r2
 8001944:	0019      	movs	r1, r3
 8001946:	230a      	movs	r3, #10
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	1c22      	adds	r2, r4, #0
 800194c:	801a      	strh	r2, [r3, #0]
 800194e:	2308      	movs	r3, #8
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	1c02      	adds	r2, r0, #0
 8001954:	801a      	strh	r2, [r3, #0]
 8001956:	1dbb      	adds	r3, r7, #6
 8001958:	1c0a      	adds	r2, r1, #0
 800195a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2241      	movs	r2, #65	; 0x41
 8001960:	5c9b      	ldrb	r3, [r3, r2]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b20      	cmp	r3, #32
 8001966:	d000      	beq.n	800196a <HAL_I2C_Mem_Read+0x32>
 8001968:	e110      	b.n	8001b8c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <HAL_I2C_Mem_Read+0x42>
 8001970:	232c      	movs	r3, #44	; 0x2c
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e103      	b.n	8001b8e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2240      	movs	r2, #64	; 0x40
 800198a:	5c9b      	ldrb	r3, [r3, r2]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_I2C_Mem_Read+0x5c>
 8001990:	2302      	movs	r3, #2
 8001992:	e0fc      	b.n	8001b8e <HAL_I2C_Mem_Read+0x256>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2240      	movs	r2, #64	; 0x40
 8001998:	2101      	movs	r1, #1
 800199a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800199c:	f7ff fb8e 	bl	80010bc <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	0219      	lsls	r1, r3, #8
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2319      	movs	r3, #25
 80019b0:	2201      	movs	r2, #1
 80019b2:	f000 f9dd 	bl	8001d70 <I2C_WaitOnFlagUntilTimeout>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0e7      	b.n	8001b8e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2241      	movs	r2, #65	; 0x41
 80019c2:	2122      	movs	r1, #34	; 0x22
 80019c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2242      	movs	r2, #66	; 0x42
 80019ca:	2140      	movs	r1, #64	; 0x40
 80019cc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	222c      	movs	r2, #44	; 0x2c
 80019de:	18ba      	adds	r2, r7, r2
 80019e0:	8812      	ldrh	r2, [r2, #0]
 80019e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019ea:	1dbb      	adds	r3, r7, #6
 80019ec:	881c      	ldrh	r4, [r3, #0]
 80019ee:	2308      	movs	r3, #8
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	881a      	ldrh	r2, [r3, #0]
 80019f4:	230a      	movs	r3, #10
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	8819      	ldrh	r1, [r3, #0]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	0023      	movs	r3, r4
 8001a06:	f000 f92f 	bl	8001c68 <I2C_RequestMemoryRead>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2240      	movs	r2, #64	; 0x40
 8001a12:	2100      	movs	r1, #0
 8001a14:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e0b9      	b.n	8001b8e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	2bff      	cmp	r3, #255	; 0xff
 8001a22:	d911      	bls.n	8001a48 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	22ff      	movs	r2, #255	; 0xff
 8001a28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	045c      	lsls	r4, r3, #17
 8001a34:	230a      	movs	r3, #10
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	8819      	ldrh	r1, [r3, #0]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <HAL_I2C_Mem_Read+0x260>)
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	0023      	movs	r3, r4
 8001a42:	f000 fb5b 	bl	80020fc <I2C_TransferConfig>
 8001a46:	e012      	b.n	8001a6e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	049c      	lsls	r4, r3, #18
 8001a5c:	230a      	movs	r3, #10
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	8819      	ldrh	r1, [r3, #0]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <HAL_I2C_Mem_Read+0x260>)
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	0023      	movs	r3, r4
 8001a6a:	f000 fb47 	bl	80020fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	0013      	movs	r3, r2
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	f000 f978 	bl	8001d70 <I2C_WaitOnFlagUntilTimeout>
 8001a80:	1e03      	subs	r3, r0, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e082      	b.n	8001b8e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d03a      	beq.n	8001b3a <HAL_I2C_Mem_Read+0x202>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d136      	bne.n	8001b3a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	f000 f949 	bl	8001d70 <I2C_WaitOnFlagUntilTimeout>
 8001ade:	1e03      	subs	r3, r0, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e053      	b.n	8001b8e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2bff      	cmp	r3, #255	; 0xff
 8001aee:	d911      	bls.n	8001b14 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	22ff      	movs	r2, #255	; 0xff
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	045c      	lsls	r4, r3, #17
 8001b00:	230a      	movs	r3, #10
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	8819      	ldrh	r1, [r3, #0]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	0023      	movs	r3, r4
 8001b0e:	f000 faf5 	bl	80020fc <I2C_TransferConfig>
 8001b12:	e012      	b.n	8001b3a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	049c      	lsls	r4, r3, #18
 8001b28:	230a      	movs	r3, #10
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	8819      	ldrh	r1, [r3, #0]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	0023      	movs	r3, r4
 8001b36:	f000 fae1 	bl	80020fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d194      	bne.n	8001a6e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 f98e 	bl	8001e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b50:	1e03      	subs	r3, r0, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e01a      	b.n	8001b8e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	490c      	ldr	r1, [pc, #48]	; (8001b9c <HAL_I2C_Mem_Read+0x264>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2241      	movs	r2, #65	; 0x41
 8001b74:	2120      	movs	r1, #32
 8001b76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2242      	movs	r2, #66	; 0x42
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	2100      	movs	r1, #0
 8001b86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e000      	b.n	8001b8e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001b8c:	2302      	movs	r3, #2
  }
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b007      	add	sp, #28
 8001b94:	bd90      	pop	{r4, r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	80002400 	.word	0x80002400
 8001b9c:	fe00e800 	.word	0xfe00e800

08001ba0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	000c      	movs	r4, r1
 8001baa:	0010      	movs	r0, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	250a      	movs	r5, #10
 8001bb0:	197b      	adds	r3, r7, r5
 8001bb2:	1c22      	adds	r2, r4, #0
 8001bb4:	801a      	strh	r2, [r3, #0]
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	1c02      	adds	r2, r0, #0
 8001bbc:	801a      	strh	r2, [r3, #0]
 8001bbe:	1dbb      	adds	r3, r7, #6
 8001bc0:	1c0a      	adds	r2, r1, #0
 8001bc2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bc4:	1dbb      	adds	r3, r7, #6
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	045c      	lsls	r4, r3, #17
 8001bce:	197b      	adds	r3, r7, r5
 8001bd0:	8819      	ldrh	r1, [r3, #0]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <I2C_RequestMemoryWrite+0xc4>)
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	0023      	movs	r3, r4
 8001bda:	f000 fa8f 	bl	80020fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be0:	6a39      	ldr	r1, [r7, #32]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 f902 	bl	8001dee <I2C_WaitOnTXISFlagUntilTimeout>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e033      	b.n	8001c5a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bf2:	1dbb      	adds	r3, r7, #6
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d107      	bne.n	8001c0a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
 8001c08:	e019      	b.n	8001c3e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1e:	6a39      	ldr	r1, [r7, #32]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 f8e3 	bl	8001dee <I2C_WaitOnTXISFlagUntilTimeout>
 8001c28:	1e03      	subs	r3, r0, #0
 8001c2a:	d001      	beq.n	8001c30 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e014      	b.n	8001c5a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c30:	2308      	movs	r3, #8
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c3e:	6a3a      	ldr	r2, [r7, #32]
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	0013      	movs	r3, r2
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	f000 f890 	bl	8001d70 <I2C_WaitOnFlagUntilTimeout>
 8001c50:	1e03      	subs	r3, r0, #0
 8001c52:	d001      	beq.n	8001c58 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b004      	add	sp, #16
 8001c60:	bdb0      	pop	{r4, r5, r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	80002000 	.word	0x80002000

08001c68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	000c      	movs	r4, r1
 8001c72:	0010      	movs	r0, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	250a      	movs	r5, #10
 8001c78:	197b      	adds	r3, r7, r5
 8001c7a:	1c22      	adds	r2, r4, #0
 8001c7c:	801a      	strh	r2, [r3, #0]
 8001c7e:	2308      	movs	r3, #8
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	1c02      	adds	r2, r0, #0
 8001c84:	801a      	strh	r2, [r3, #0]
 8001c86:	1dbb      	adds	r3, r7, #6
 8001c88:	1c0a      	adds	r2, r1, #0
 8001c8a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c8c:	1dbb      	adds	r3, r7, #6
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	197b      	adds	r3, r7, r5
 8001c94:	8819      	ldrh	r1, [r3, #0]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <I2C_RequestMemoryRead+0xc0>)
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f000 fa2d 	bl	80020fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 f8a0 	bl	8001dee <I2C_WaitOnTXISFlagUntilTimeout>
 8001cae:	1e03      	subs	r3, r0, #0
 8001cb0:	d001      	beq.n	8001cb6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e033      	b.n	8001d1e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cb6:	1dbb      	adds	r3, r7, #6
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cbe:	2308      	movs	r3, #8
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
 8001ccc:	e019      	b.n	8001d02 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cce:	2308      	movs	r3, #8
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce2:	6a39      	ldr	r1, [r7, #32]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 f881 	bl	8001dee <I2C_WaitOnTXISFlagUntilTimeout>
 8001cec:	1e03      	subs	r3, r0, #0
 8001cee:	d001      	beq.n	8001cf4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e014      	b.n	8001d1e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d02:	6a3a      	ldr	r2, [r7, #32]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2140      	movs	r1, #64	; 0x40
 8001d10:	f000 f82e 	bl	8001d70 <I2C_WaitOnFlagUntilTimeout>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d001      	beq.n	8001d1c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b004      	add	sp, #16
 8001d24:	bdb0      	pop	{r4, r5, r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	80002000 	.word	0x80002000

08001d2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d103      	bne.n	8001d4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2200      	movs	r2, #0
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2201      	movs	r2, #1
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d007      	beq.n	8001d68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	619a      	str	r2, [r3, #24]
  }
}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	1dfb      	adds	r3, r7, #7
 8001d7e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d80:	e021      	b.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	d01e      	beq.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d88:	f7ff f998 	bl	80010bc <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d302      	bcc.n	8001d9e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d113      	bne.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	2220      	movs	r2, #32
 8001da4:	431a      	orrs	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2241      	movs	r2, #65	; 0x41
 8001dae:	2120      	movs	r1, #32
 8001db0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2242      	movs	r2, #66	; 0x42
 8001db6:	2100      	movs	r1, #0
 8001db8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2240      	movs	r2, #64	; 0x40
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	425a      	negs	r2, r3
 8001dd6:	4153      	adcs	r3, r2
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	001a      	movs	r2, r3
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d0ce      	beq.n	8001d82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b004      	add	sp, #16
 8001dec:	bd80      	pop	{r7, pc}

08001dee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dfa:	e02b      	b.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 f86e 	bl	8001ee4 <I2C_IsErrorOccurred>
 8001e08:	1e03      	subs	r3, r0, #0
 8001e0a:	d001      	beq.n	8001e10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e029      	b.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3301      	adds	r3, #1
 8001e14:	d01e      	beq.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e16:	f7ff f951 	bl	80010bc <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d302      	bcc.n	8001e2c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d113      	bne.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	2220      	movs	r2, #32
 8001e32:	431a      	orrs	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2241      	movs	r2, #65	; 0x41
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2242      	movs	r2, #66	; 0x42
 8001e44:	2100      	movs	r1, #0
 8001e46:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2240      	movs	r2, #64	; 0x40
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e007      	b.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d1cc      	bne.n	8001dfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b004      	add	sp, #16
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e78:	e028      	b.n	8001ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f000 f82f 	bl	8001ee4 <I2C_IsErrorOccurred>
 8001e86:	1e03      	subs	r3, r0, #0
 8001e88:	d001      	beq.n	8001e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e026      	b.n	8001edc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8e:	f7ff f915 	bl	80010bc <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d302      	bcc.n	8001ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d113      	bne.n	8001ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2241      	movs	r2, #65	; 0x41
 8001eb4:	2120      	movs	r1, #32
 8001eb6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2242      	movs	r2, #66	; 0x42
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2240      	movs	r2, #64	; 0x40
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e007      	b.n	8001edc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d1cf      	bne.n	8001e7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b08b      	sub	sp, #44	; 0x2c
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef0:	2327      	movs	r3, #39	; 0x27
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d100      	bne.n	8001f12 <I2C_IsErrorOccurred+0x2e>
 8001f10:	e08e      	b.n	8002030 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2210      	movs	r2, #16
 8001f18:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f1a:	e06c      	b.n	8001ff6 <I2C_IsErrorOccurred+0x112>
 8001f1c:	2427      	movs	r4, #39	; 0x27
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	193a      	adds	r2, r7, r4
 8001f22:	7812      	ldrb	r2, [r2, #0]
 8001f24:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	d064      	beq.n	8001ff6 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f2c:	f7ff f8c6 	bl	80010bc <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d306      	bcc.n	8001f4a <I2C_IsErrorOccurred+0x66>
 8001f3c:	193b      	adds	r3, r7, r4
 8001f3e:	193a      	adds	r2, r7, r4
 8001f40:	7812      	ldrb	r2, [r2, #0]
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d155      	bne.n	8001ff6 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	01db      	lsls	r3, r3, #7
 8001f54:	4013      	ands	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f58:	2013      	movs	r0, #19
 8001f5a:	183b      	adds	r3, r7, r0
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	2142      	movs	r1, #66	; 0x42
 8001f60:	5c52      	ldrb	r2, [r2, r1]
 8001f62:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	401a      	ands	r2, r3
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d137      	bne.n	8001fe8 <I2C_IsErrorOccurred+0x104>
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	01db      	lsls	r3, r3, #7
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d032      	beq.n	8001fe8 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8001f82:	183b      	adds	r3, r7, r0
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d02e      	beq.n	8001fe8 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	01c9      	lsls	r1, r1, #7
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f9c:	f7ff f88e 	bl	80010bc <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa4:	e020      	b.n	8001fe8 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001fa6:	f7ff f889 	bl	80010bc <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2027      	movs	r0, #39	; 0x27
 8001fb2:	183a      	adds	r2, r7, r0
 8001fb4:	1839      	adds	r1, r7, r0
 8001fb6:	7809      	ldrb	r1, [r1, #0]
 8001fb8:	7011      	strb	r1, [r2, #0]
 8001fba:	2b19      	cmp	r3, #25
 8001fbc:	d914      	bls.n	8001fe8 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2241      	movs	r2, #65	; 0x41
 8001fce:	2120      	movs	r1, #32
 8001fd0:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2242      	movs	r2, #66	; 0x42
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8001fe2:	183b      	adds	r3, r7, r0
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d1d7      	bne.n	8001fa6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b20      	cmp	r3, #32
 8002002:	d004      	beq.n	800200e <I2C_IsErrorOccurred+0x12a>
 8002004:	2327      	movs	r3, #39	; 0x27
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d086      	beq.n	8001f1c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800200e:	2327      	movs	r3, #39	; 0x27
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2220      	movs	r2, #32
 800201e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	2204      	movs	r2, #4
 8002024:	4313      	orrs	r3, r2
 8002026:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002028:	2327      	movs	r3, #39	; 0x27
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4013      	ands	r3, r2
 8002040:	d00c      	beq.n	800205c <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	2201      	movs	r2, #1
 8002046:	4313      	orrs	r3, r2
 8002048:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	0052      	lsls	r2, r2, #1
 8002052:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002054:	2327      	movs	r3, #39	; 0x27
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4013      	ands	r3, r2
 8002064:	d00c      	beq.n	8002080 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	2208      	movs	r2, #8
 800206a:	4313      	orrs	r3, r2
 800206c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	00d2      	lsls	r2, r2, #3
 8002076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002078:	2327      	movs	r3, #39	; 0x27
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4013      	ands	r3, r2
 8002088:	d00c      	beq.n	80020a4 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	2202      	movs	r2, #2
 800208e:	4313      	orrs	r3, r2
 8002090:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800209c:	2327      	movs	r3, #39	; 0x27
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80020a4:	2327      	movs	r3, #39	; 0x27
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01d      	beq.n	80020ea <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff fe3b 	bl	8001d2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	490d      	ldr	r1, [pc, #52]	; (80020f8 <I2C_IsErrorOccurred+0x214>)
 80020c2:	400a      	ands	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2241      	movs	r2, #65	; 0x41
 80020d6:	2120      	movs	r1, #32
 80020d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2242      	movs	r2, #66	; 0x42
 80020de:	2100      	movs	r1, #0
 80020e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	2100      	movs	r1, #0
 80020e8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80020ea:	2327      	movs	r3, #39	; 0x27
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	781b      	ldrb	r3, [r3, #0]
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b00b      	add	sp, #44	; 0x2c
 80020f6:	bd90      	pop	{r4, r7, pc}
 80020f8:	fe00e800 	.word	0xfe00e800

080020fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	0008      	movs	r0, r1
 8002106:	0011      	movs	r1, r2
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	240a      	movs	r4, #10
 800210c:	193b      	adds	r3, r7, r4
 800210e:	1c02      	adds	r2, r0, #0
 8002110:	801a      	strh	r2, [r3, #0]
 8002112:	2009      	movs	r0, #9
 8002114:	183b      	adds	r3, r7, r0
 8002116:	1c0a      	adds	r2, r1, #0
 8002118:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800211a:	193b      	adds	r3, r7, r4
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	059b      	lsls	r3, r3, #22
 8002120:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002122:	183b      	adds	r3, r7, r0
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	0419      	lsls	r1, r3, #16
 8002128:	23ff      	movs	r3, #255	; 0xff
 800212a:	041b      	lsls	r3, r3, #16
 800212c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800212e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	4313      	orrs	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002146:	0d51      	lsrs	r1, r2, #21
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	00d2      	lsls	r2, r2, #3
 800214c:	400a      	ands	r2, r1
 800214e:	4907      	ldr	r1, [pc, #28]	; (800216c <I2C_TransferConfig+0x70>)
 8002150:	430a      	orrs	r2, r1
 8002152:	43d2      	mvns	r2, r2
 8002154:	401a      	ands	r2, r3
 8002156:	0011      	movs	r1, r2
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b007      	add	sp, #28
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	03ff63ff 	.word	0x03ff63ff

08002170 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2241      	movs	r2, #65	; 0x41
 800217e:	5c9b      	ldrb	r3, [r3, r2]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b20      	cmp	r3, #32
 8002184:	d138      	bne.n	80021f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2240      	movs	r2, #64	; 0x40
 800218a:	5c9b      	ldrb	r3, [r3, r2]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002190:	2302      	movs	r3, #2
 8002192:	e032      	b.n	80021fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	2101      	movs	r1, #1
 800219a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2241      	movs	r2, #65	; 0x41
 80021a0:	2124      	movs	r1, #36	; 0x24
 80021a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2101      	movs	r1, #1
 80021b0:	438a      	bics	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4911      	ldr	r1, [pc, #68]	; (8002204 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2101      	movs	r1, #1
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2241      	movs	r2, #65	; 0x41
 80021e8:	2120      	movs	r1, #32
 80021ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2240      	movs	r2, #64	; 0x40
 80021f0:	2100      	movs	r1, #0
 80021f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e000      	b.n	80021fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021f8:	2302      	movs	r3, #2
  }
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	ffffefff 	.word	0xffffefff

08002208 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2241      	movs	r2, #65	; 0x41
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b20      	cmp	r3, #32
 800221c:	d139      	bne.n	8002292 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2240      	movs	r2, #64	; 0x40
 8002222:	5c9b      	ldrb	r3, [r3, r2]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002228:	2302      	movs	r3, #2
 800222a:	e033      	b.n	8002294 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2240      	movs	r2, #64	; 0x40
 8002230:	2101      	movs	r1, #1
 8002232:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2241      	movs	r2, #65	; 0x41
 8002238:	2124      	movs	r1, #36	; 0x24
 800223a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2101      	movs	r1, #1
 8002248:	438a      	bics	r2, r1
 800224a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a11      	ldr	r2, [pc, #68]	; (800229c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002258:	4013      	ands	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2101      	movs	r1, #1
 800227a:	430a      	orrs	r2, r1
 800227c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2241      	movs	r2, #65	; 0x41
 8002282:	2120      	movs	r1, #32
 8002284:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2240      	movs	r2, #64	; 0x40
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002292:	2302      	movs	r3, #2
  }
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b004      	add	sp, #16
 800229a:	bd80      	pop	{r7, pc}
 800229c:	fffff0ff 	.word	0xfffff0ff

080022a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a19      	ldr	r2, [pc, #100]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d11f      	bne.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	0013      	movs	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	189b      	adds	r3, r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4912      	ldr	r1, [pc, #72]	; (800231c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7fd ff28 	bl	8000128 <__udivsi3>
 80022d8:	0003      	movs	r3, r0
 80022da:	3301      	adds	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022de:	e008      	b.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e001      	b.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e009      	b.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	401a      	ands	r2, r3
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	429a      	cmp	r2, r3
 8002302:	d0ed      	beq.n	80022e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b004      	add	sp, #16
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40007000 	.word	0x40007000
 8002314:	fffff9ff 	.word	0xfffff9ff
 8002318:	20000000 	.word	0x20000000
 800231c:	000f4240 	.word	0x000f4240

08002320 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	23e0      	movs	r3, #224	; 0xe0
 800232a:	01db      	lsls	r3, r3, #7
 800232c:	4013      	ands	r3, r2
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000

08002338 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e2fe      	b.n	8002948 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	4013      	ands	r3, r2
 8002352:	d100      	bne.n	8002356 <HAL_RCC_OscConfig+0x1e>
 8002354:	e07c      	b.n	8002450 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4bc3      	ldr	r3, [pc, #780]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2238      	movs	r2, #56	; 0x38
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002360:	4bc0      	ldr	r3, [pc, #768]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2203      	movs	r2, #3
 8002366:	4013      	ands	r3, r2
 8002368:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b10      	cmp	r3, #16
 800236e:	d102      	bne.n	8002376 <HAL_RCC_OscConfig+0x3e>
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d002      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b08      	cmp	r3, #8
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4bb9      	ldr	r3, [pc, #740]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	029b      	lsls	r3, r3, #10
 8002384:	4013      	ands	r3, r2
 8002386:	d062      	beq.n	800244e <HAL_RCC_OscConfig+0x116>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d15e      	bne.n	800244e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e2d9      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	025b      	lsls	r3, r3, #9
 800239c:	429a      	cmp	r2, r3
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_OscConfig+0x78>
 80023a0:	4bb0      	ldr	r3, [pc, #704]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4baf      	ldr	r3, [pc, #700]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	0249      	lsls	r1, r1, #9
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e020      	b.n	80023f2 <HAL_RCC_OscConfig+0xba>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	23a0      	movs	r3, #160	; 0xa0
 80023b6:	02db      	lsls	r3, r3, #11
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d10e      	bne.n	80023da <HAL_RCC_OscConfig+0xa2>
 80023bc:	4ba9      	ldr	r3, [pc, #676]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4ba8      	ldr	r3, [pc, #672]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	02c9      	lsls	r1, r1, #11
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	4ba6      	ldr	r3, [pc, #664]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4ba5      	ldr	r3, [pc, #660]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80023d0:	2180      	movs	r1, #128	; 0x80
 80023d2:	0249      	lsls	r1, r1, #9
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	e00b      	b.n	80023f2 <HAL_RCC_OscConfig+0xba>
 80023da:	4ba2      	ldr	r3, [pc, #648]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4ba1      	ldr	r3, [pc, #644]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80023e0:	49a1      	ldr	r1, [pc, #644]	; (8002668 <HAL_RCC_OscConfig+0x330>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	4b9f      	ldr	r3, [pc, #636]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b9e      	ldr	r3, [pc, #632]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	499f      	ldr	r1, [pc, #636]	; (800266c <HAL_RCC_OscConfig+0x334>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d014      	beq.n	8002424 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe fe5f 	bl	80010bc <HAL_GetTick>
 80023fe:	0003      	movs	r3, r0
 8002400:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7fe fe5a 	bl	80010bc <HAL_GetTick>
 8002408:	0002      	movs	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e298      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002416:	4b93      	ldr	r3, [pc, #588]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	029b      	lsls	r3, r3, #10
 800241e:	4013      	ands	r3, r2
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0xcc>
 8002422:	e015      	b.n	8002450 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe fe4a 	bl	80010bc <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242e:	f7fe fe45 	bl	80010bc <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b64      	cmp	r3, #100	; 0x64
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e283      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002440:	4b88      	ldr	r3, [pc, #544]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	029b      	lsls	r3, r3, #10
 8002448:	4013      	ands	r3, r2
 800244a:	d1f0      	bne.n	800242e <HAL_RCC_OscConfig+0xf6>
 800244c:	e000      	b.n	8002450 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2202      	movs	r2, #2
 8002456:	4013      	ands	r3, r2
 8002458:	d100      	bne.n	800245c <HAL_RCC_OscConfig+0x124>
 800245a:	e099      	b.n	8002590 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800245c:	4b81      	ldr	r3, [pc, #516]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2238      	movs	r2, #56	; 0x38
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002466:	4b7f      	ldr	r3, [pc, #508]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2203      	movs	r2, #3
 800246c:	4013      	ands	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b10      	cmp	r3, #16
 8002474:	d102      	bne.n	800247c <HAL_RCC_OscConfig+0x144>
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d002      	beq.n	8002482 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d135      	bne.n	80024ee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002482:	4b78      	ldr	r3, [pc, #480]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4013      	ands	r3, r2
 800248c:	d005      	beq.n	800249a <HAL_RCC_OscConfig+0x162>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e256      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249a:	4b72      	ldr	r3, [pc, #456]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4a74      	ldr	r2, [pc, #464]	; (8002670 <HAL_RCC_OscConfig+0x338>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	0019      	movs	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	021a      	lsls	r2, r3, #8
 80024aa:	4b6e      	ldr	r3, [pc, #440]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80024ac:	430a      	orrs	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024b6:	4b6b      	ldr	r3, [pc, #428]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a6e      	ldr	r2, [pc, #440]	; (8002674 <HAL_RCC_OscConfig+0x33c>)
 80024bc:	4013      	ands	r3, r2
 80024be:	0019      	movs	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	4b67      	ldr	r3, [pc, #412]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80024ca:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0adb      	lsrs	r3, r3, #11
 80024d0:	2207      	movs	r2, #7
 80024d2:	4013      	ands	r3, r2
 80024d4:	4a68      	ldr	r2, [pc, #416]	; (8002678 <HAL_RCC_OscConfig+0x340>)
 80024d6:	40da      	lsrs	r2, r3
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x344>)
 80024da:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024dc:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x348>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7fe fd8f 	bl	8001004 <HAL_InitTick>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d051      	beq.n	800258e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e22c      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d030      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024f6:	4b5b      	ldr	r3, [pc, #364]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a5e      	ldr	r2, [pc, #376]	; (8002674 <HAL_RCC_OscConfig+0x33c>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	4b57      	ldr	r3, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800250a:	4b56      	ldr	r3, [pc, #344]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b55      	ldr	r3, [pc, #340]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002510:	2180      	movs	r1, #128	; 0x80
 8002512:	0049      	lsls	r1, r1, #1
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fdd0 	bl	80010bc <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002522:	f7fe fdcb 	bl	80010bc <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e209      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002534:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4013      	ands	r3, r2
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b48      	ldr	r3, [pc, #288]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <HAL_RCC_OscConfig+0x338>)
 8002546:	4013      	ands	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	021a      	lsls	r2, r3, #8
 8002550:	4b44      	ldr	r3, [pc, #272]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	e01b      	b.n	8002590 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002558:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b41      	ldr	r3, [pc, #260]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 800255e:	4949      	ldr	r1, [pc, #292]	; (8002684 <HAL_RCC_OscConfig+0x34c>)
 8002560:	400a      	ands	r2, r1
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fdaa 	bl	80010bc <HAL_GetTick>
 8002568:	0003      	movs	r3, r0
 800256a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256e:	f7fe fda5 	bl	80010bc <HAL_GetTick>
 8002572:	0002      	movs	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1e3      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002580:	4b38      	ldr	r3, [pc, #224]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4013      	ands	r3, r2
 800258a:	d1f0      	bne.n	800256e <HAL_RCC_OscConfig+0x236>
 800258c:	e000      	b.n	8002590 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2208      	movs	r2, #8
 8002596:	4013      	ands	r3, r2
 8002598:	d047      	beq.n	800262a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800259a:	4b32      	ldr	r3, [pc, #200]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2238      	movs	r2, #56	; 0x38
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b18      	cmp	r3, #24
 80025a4:	d10a      	bne.n	80025bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025a6:	4b2f      	ldr	r3, [pc, #188]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	d03c      	beq.n	800262a <HAL_RCC_OscConfig+0x2f2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d138      	bne.n	800262a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e1c5      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d019      	beq.n	80025f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80025c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025c8:	4b26      	ldr	r3, [pc, #152]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	430a      	orrs	r2, r1
 80025ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fd74 	bl	80010bc <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025da:	f7fe fd6f 	bl	80010bc <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e1ad      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80025ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f0:	2202      	movs	r2, #2
 80025f2:	4013      	ands	r3, r2
 80025f4:	d0f1      	beq.n	80025da <HAL_RCC_OscConfig+0x2a2>
 80025f6:	e018      	b.n	800262a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80025fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 80025fe:	2101      	movs	r1, #1
 8002600:	438a      	bics	r2, r1
 8002602:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fd5a 	bl	80010bc <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260e:	f7fe fd55 	bl	80010bc <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e193      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002624:	2202      	movs	r2, #2
 8002626:	4013      	ands	r3, r2
 8002628:	d1f1      	bne.n	800260e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2204      	movs	r2, #4
 8002630:	4013      	ands	r3, r2
 8002632:	d100      	bne.n	8002636 <HAL_RCC_OscConfig+0x2fe>
 8002634:	e0c6      	b.n	80027c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	231f      	movs	r3, #31
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2238      	movs	r2, #56	; 0x38
 8002644:	4013      	ands	r3, r2
 8002646:	2b20      	cmp	r3, #32
 8002648:	d11e      	bne.n	8002688 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_OscConfig+0x32c>)
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d100      	bne.n	8002656 <HAL_RCC_OscConfig+0x31e>
 8002654:	e0b6      	b.n	80027c4 <HAL_RCC_OscConfig+0x48c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d000      	beq.n	8002660 <HAL_RCC_OscConfig+0x328>
 800265e:	e0b1      	b.n	80027c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e171      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
 8002664:	40021000 	.word	0x40021000
 8002668:	fffeffff 	.word	0xfffeffff
 800266c:	fffbffff 	.word	0xfffbffff
 8002670:	ffff80ff 	.word	0xffff80ff
 8002674:	ffffc7ff 	.word	0xffffc7ff
 8002678:	00f42400 	.word	0x00f42400
 800267c:	20000000 	.word	0x20000000
 8002680:	20000004 	.word	0x20000004
 8002684:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002688:	4bb1      	ldr	r3, [pc, #708]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 800268a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	055b      	lsls	r3, r3, #21
 8002690:	4013      	ands	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_RCC_OscConfig+0x360>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x362>
 8002698:	2300      	movs	r3, #0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d011      	beq.n	80026c2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4bac      	ldr	r3, [pc, #688]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80026a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026a2:	4bab      	ldr	r3, [pc, #684]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	0549      	lsls	r1, r1, #21
 80026a8:	430a      	orrs	r2, r1
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80026ac:	4ba8      	ldr	r3, [pc, #672]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80026ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	055b      	lsls	r3, r3, #21
 80026b4:	4013      	ands	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80026ba:	231f      	movs	r3, #31
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c2:	4ba4      	ldr	r3, [pc, #656]	; (8002954 <HAL_RCC_OscConfig+0x61c>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	d11a      	bne.n	8002704 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ce:	4ba1      	ldr	r3, [pc, #644]	; (8002954 <HAL_RCC_OscConfig+0x61c>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4ba0      	ldr	r3, [pc, #640]	; (8002954 <HAL_RCC_OscConfig+0x61c>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0049      	lsls	r1, r1, #1
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fcee 	bl	80010bc <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e6:	f7fe fce9 	bl	80010bc <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e127      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f8:	4b96      	ldr	r3, [pc, #600]	; (8002954 <HAL_RCC_OscConfig+0x61c>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4013      	ands	r3, r2
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x3e2>
 800270c:	4b90      	ldr	r3, [pc, #576]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 800270e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002710:	4b8f      	ldr	r3, [pc, #572]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002712:	2101      	movs	r1, #1
 8002714:	430a      	orrs	r2, r1
 8002716:	65da      	str	r2, [r3, #92]	; 0x5c
 8002718:	e01c      	b.n	8002754 <HAL_RCC_OscConfig+0x41c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b05      	cmp	r3, #5
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x404>
 8002722:	4b8b      	ldr	r3, [pc, #556]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002724:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002726:	4b8a      	ldr	r3, [pc, #552]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002728:	2104      	movs	r1, #4
 800272a:	430a      	orrs	r2, r1
 800272c:	65da      	str	r2, [r3, #92]	; 0x5c
 800272e:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002730:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002732:	4b87      	ldr	r3, [pc, #540]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002734:	2101      	movs	r1, #1
 8002736:	430a      	orrs	r2, r1
 8002738:	65da      	str	r2, [r3, #92]	; 0x5c
 800273a:	e00b      	b.n	8002754 <HAL_RCC_OscConfig+0x41c>
 800273c:	4b84      	ldr	r3, [pc, #528]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 800273e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002740:	4b83      	ldr	r3, [pc, #524]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002742:	2101      	movs	r1, #1
 8002744:	438a      	bics	r2, r1
 8002746:	65da      	str	r2, [r3, #92]	; 0x5c
 8002748:	4b81      	ldr	r3, [pc, #516]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 800274a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800274c:	4b80      	ldr	r3, [pc, #512]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 800274e:	2104      	movs	r1, #4
 8002750:	438a      	bics	r2, r1
 8002752:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d014      	beq.n	8002786 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fcae 	bl	80010bc <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002764:	e009      	b.n	800277a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe fca9 	bl	80010bc <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	4a79      	ldr	r2, [pc, #484]	; (8002958 <HAL_RCC_OscConfig+0x620>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e0e6      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277a:	4b75      	ldr	r3, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	2202      	movs	r2, #2
 8002780:	4013      	ands	r3, r2
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x42e>
 8002784:	e013      	b.n	80027ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe fc99 	bl	80010bc <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800278e:	e009      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fc94 	bl	80010bc <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	4a6f      	ldr	r2, [pc, #444]	; (8002958 <HAL_RCC_OscConfig+0x620>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0d1      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a4:	4b6a      	ldr	r3, [pc, #424]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	2202      	movs	r2, #2
 80027aa:	4013      	ands	r3, r2
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027ae:	231f      	movs	r3, #31
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027b8:	4b65      	ldr	r3, [pc, #404]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80027ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80027be:	4967      	ldr	r1, [pc, #412]	; (800295c <HAL_RCC_OscConfig+0x624>)
 80027c0:	400a      	ands	r2, r1
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d100      	bne.n	80027ce <HAL_RCC_OscConfig+0x496>
 80027cc:	e0bb      	b.n	8002946 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ce:	4b60      	ldr	r3, [pc, #384]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2238      	movs	r2, #56	; 0x38
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d100      	bne.n	80027dc <HAL_RCC_OscConfig+0x4a4>
 80027da:	e07b      	b.n	80028d4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d156      	bne.n	8002892 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e4:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80027ea:	495d      	ldr	r1, [pc, #372]	; (8002960 <HAL_RCC_OscConfig+0x628>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7fe fc64 	bl	80010bc <HAL_GetTick>
 80027f4:	0003      	movs	r3, r0
 80027f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe fc5f 	bl	80010bc <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e09d      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	049b      	lsls	r3, r3, #18
 8002814:	4013      	ands	r3, r2
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002818:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a51      	ldr	r2, [pc, #324]	; (8002964 <HAL_RCC_OscConfig+0x62c>)
 800281e:	4013      	ands	r3, r2
 8002820:	0019      	movs	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002844:	431a      	orrs	r2, r3
 8002846:	4b42      	ldr	r3, [pc, #264]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284c:	4b40      	ldr	r3, [pc, #256]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	0449      	lsls	r1, r1, #17
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	4b3c      	ldr	r3, [pc, #240]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	0549      	lsls	r1, r1, #21
 8002864:	430a      	orrs	r2, r1
 8002866:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fc28 	bl	80010bc <HAL_GetTick>
 800286c:	0003      	movs	r3, r0
 800286e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002872:	f7fe fc23 	bl	80010bc <HAL_GetTick>
 8002876:	0002      	movs	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e061      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002884:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	049b      	lsls	r3, r3, #18
 800288c:	4013      	ands	r3, r2
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x53a>
 8002890:	e059      	b.n	8002946 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 8002898:	4931      	ldr	r1, [pc, #196]	; (8002960 <HAL_RCC_OscConfig+0x628>)
 800289a:	400a      	ands	r2, r1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe fc0d 	bl	80010bc <HAL_GetTick>
 80028a2:	0003      	movs	r3, r0
 80028a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fc08 	bl	80010bc <HAL_GetTick>
 80028ac:	0002      	movs	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e046      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ba:	4b25      	ldr	r3, [pc, #148]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	049b      	lsls	r3, r3, #18
 80028c2:	4013      	ands	r3, r2
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80028c6:	4b22      	ldr	r3, [pc, #136]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80028cc:	4926      	ldr	r1, [pc, #152]	; (8002968 <HAL_RCC_OscConfig+0x630>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	e038      	b.n	8002946 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e033      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x618>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2203      	movs	r2, #3
 80028ea:	401a      	ands	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d126      	bne.n	8002942 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2270      	movs	r2, #112	; 0x70
 80028f8:	401a      	ands	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d11f      	bne.n	8002942 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	23fe      	movs	r3, #254	; 0xfe
 8002906:	01db      	lsls	r3, r3, #7
 8002908:	401a      	ands	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d116      	bne.n	8002942 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	23f8      	movs	r3, #248	; 0xf8
 8002918:	039b      	lsls	r3, r3, #14
 800291a:	401a      	ands	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d10e      	bne.n	8002942 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	23e0      	movs	r3, #224	; 0xe0
 8002928:	051b      	lsls	r3, r3, #20
 800292a:	401a      	ands	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	0f5b      	lsrs	r3, r3, #29
 8002938:	075a      	lsls	r2, r3, #29
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d001      	beq.n	8002946 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	0018      	movs	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	b008      	add	sp, #32
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	40007000 	.word	0x40007000
 8002958:	00001388 	.word	0x00001388
 800295c:	efffffff 	.word	0xefffffff
 8002960:	feffffff 	.word	0xfeffffff
 8002964:	11c1808c 	.word	0x11c1808c
 8002968:	eefefffc 	.word	0xeefefffc

0800296c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0e9      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002980:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2207      	movs	r2, #7
 8002986:	4013      	ands	r3, r2
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d91e      	bls.n	80029cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b73      	ldr	r3, [pc, #460]	; (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2207      	movs	r2, #7
 8002994:	4393      	bics	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	4b70      	ldr	r3, [pc, #448]	; (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029a0:	f7fe fb8c 	bl	80010bc <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029a8:	e009      	b.n	80029be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029aa:	f7fe fb87 	bl	80010bc <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	4a6a      	ldr	r2, [pc, #424]	; (8002b60 <HAL_RCC_ClockConfig+0x1f4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0ca      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029be:	4b67      	ldr	r3, [pc, #412]	; (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2207      	movs	r2, #7
 80029c4:	4013      	ands	r3, r2
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1ee      	bne.n	80029aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2202      	movs	r2, #2
 80029d2:	4013      	ands	r3, r2
 80029d4:	d015      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2204      	movs	r2, #4
 80029dc:	4013      	ands	r3, r2
 80029de:	d006      	beq.n	80029ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029e0:	4b60      	ldr	r3, [pc, #384]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4b5f      	ldr	r3, [pc, #380]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 80029e6:	21e0      	movs	r1, #224	; 0xe0
 80029e8:	01c9      	lsls	r1, r1, #7
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ee:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4a5d      	ldr	r2, [pc, #372]	; (8002b68 <HAL_RCC_ClockConfig+0x1fc>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2201      	movs	r2, #1
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d057      	beq.n	8002abc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a14:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	029b      	lsls	r3, r3, #10
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d12b      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e097      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2c:	4b4d      	ldr	r3, [pc, #308]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	049b      	lsls	r3, r3, #18
 8002a34:	4013      	ands	r3, r2
 8002a36:	d11f      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e08b      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a44:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d113      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e07f      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a5c:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a60:	2202      	movs	r2, #2
 8002a62:	4013      	ands	r3, r2
 8002a64:	d108      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e074      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6a:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e06d      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a78:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	4393      	bics	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fb16 	bl	80010bc <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a94:	e009      	b.n	8002aaa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a96:	f7fe fb11 	bl	80010bc <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	4a2f      	ldr	r2, [pc, #188]	; (8002b60 <HAL_RCC_ClockConfig+0x1f4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e054      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2238      	movs	r2, #56	; 0x38
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1ec      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d21e      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2207      	movs	r2, #7
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002adc:	f7fe faee 	bl	80010bc <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ae4:	e009      	b.n	8002afa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae6:	f7fe fae9 	bl	80010bc <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_RCC_ClockConfig+0x1f4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e02c      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2207      	movs	r2, #7
 8002b00:	4013      	ands	r3, r2
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <HAL_RCC_ClockConfig+0x200>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b26:	f000 f829 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002b2a:	0001      	movs	r1, r0
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	220f      	movs	r2, #15
 8002b34:	401a      	ands	r2, r3
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_RCC_ClockConfig+0x204>)
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	58d3      	ldr	r3, [r2, r3]
 8002b3c:	221f      	movs	r2, #31
 8002b3e:	4013      	ands	r3, r2
 8002b40:	000a      	movs	r2, r1
 8002b42:	40da      	lsrs	r2, r3
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_ClockConfig+0x208>)
 8002b46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_ClockConfig+0x20c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7fe fa59 	bl	8001004 <HAL_InitTick>
 8002b52:	0003      	movs	r3, r0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40022000 	.word	0x40022000
 8002b60:	00001388 	.word	0x00001388
 8002b64:	40021000 	.word	0x40021000
 8002b68:	fffff0ff 	.word	0xfffff0ff
 8002b6c:	ffff8fff 	.word	0xffff8fff
 8002b70:	080046d0 	.word	0x080046d0
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000004 	.word	0x20000004

08002b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b82:	4b3c      	ldr	r3, [pc, #240]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2238      	movs	r2, #56	; 0x38
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d10f      	bne.n	8002bac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b8c:	4b39      	ldr	r3, [pc, #228]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0adb      	lsrs	r3, r3, #11
 8002b92:	2207      	movs	r2, #7
 8002b94:	4013      	ands	r3, r2
 8002b96:	2201      	movs	r2, #1
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	0013      	movs	r3, r2
 8002b9c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b9e:	6839      	ldr	r1, [r7, #0]
 8002ba0:	4835      	ldr	r0, [pc, #212]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ba2:	f7fd fac1 	bl	8000128 <__udivsi3>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	e05d      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bac:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2238      	movs	r2, #56	; 0x38
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bb8:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x100>)
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	e054      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bbe:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2238      	movs	r2, #56	; 0x38
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d138      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002bca:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	2207      	movs	r2, #7
 8002bdc:	4013      	ands	r3, r2
 8002bde:	3301      	adds	r3, #1
 8002be0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d10d      	bne.n	8002c04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	4824      	ldr	r0, [pc, #144]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x100>)
 8002bec:	f7fd fa9c 	bl	8000128 <__udivsi3>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	227f      	movs	r2, #127	; 0x7f
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	434b      	muls	r3, r1
 8002c00:	617b      	str	r3, [r7, #20]
        break;
 8002c02:	e00d      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	481c      	ldr	r0, [pc, #112]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c08:	f7fd fa8e 	bl	8000128 <__udivsi3>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	0019      	movs	r1, r3
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	227f      	movs	r2, #127	; 0x7f
 8002c18:	4013      	ands	r3, r2
 8002c1a:	434b      	muls	r3, r1
 8002c1c:	617b      	str	r3, [r7, #20]
        break;
 8002c1e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	0f5b      	lsrs	r3, r3, #29
 8002c26:	2207      	movs	r2, #7
 8002c28:	4013      	ands	r3, r2
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	6978      	ldr	r0, [r7, #20]
 8002c32:	f7fd fa79 	bl	8000128 <__udivsi3>
 8002c36:	0003      	movs	r3, r0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	e015      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2238      	movs	r2, #56	; 0x38
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d103      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2238      	movs	r2, #56	; 0x38
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b18      	cmp	r3, #24
 8002c5a:	d103      	bne.n	8002c64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c5c:	23fa      	movs	r3, #250	; 0xfa
 8002c5e:	01db      	lsls	r3, r3, #7
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	e001      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c68:	693b      	ldr	r3, [r7, #16]
}
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b006      	add	sp, #24
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	40021000 	.word	0x40021000
 8002c78:	00f42400 	.word	0x00f42400
 8002c7c:	007a1200 	.word	0x007a1200

08002c80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c84:	4b02      	ldr	r3, [pc, #8]	; (8002c90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	20000000 	.word	0x20000000

08002c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c94:	b5b0      	push	{r4, r5, r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c98:	f7ff fff2 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002c9c:	0004      	movs	r4, r0
 8002c9e:	f7ff fb3f 	bl	8002320 <LL_RCC_GetAPB1Prescaler>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	0b1a      	lsrs	r2, r3, #12
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ca8:	0092      	lsls	r2, r2, #2
 8002caa:	58d3      	ldr	r3, [r2, r3]
 8002cac:	221f      	movs	r2, #31
 8002cae:	4013      	ands	r3, r2
 8002cb0:	40dc      	lsrs	r4, r3
 8002cb2:	0023      	movs	r3, r4
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	08004710 	.word	0x08004710

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002cc8:	2313      	movs	r3, #19
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd0:	2312      	movs	r3, #18
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	029b      	lsls	r3, r3, #10
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d100      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ce4:	e0a3      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce6:	2011      	movs	r0, #17
 8002ce8:	183b      	adds	r3, r7, r0
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4bc3      	ldr	r3, [pc, #780]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	055b      	lsls	r3, r3, #21
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d110      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4bc0      	ldr	r3, [pc, #768]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cfe:	4bbf      	ldr	r3, [pc, #764]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	0549      	lsls	r1, r1, #21
 8002d04:	430a      	orrs	r2, r1
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d08:	4bbc      	ldr	r3, [pc, #752]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	055b      	lsls	r3, r3, #21
 8002d10:	4013      	ands	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d16:	183b      	adds	r3, r7, r0
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1c:	4bb8      	ldr	r3, [pc, #736]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4bb7      	ldr	r3, [pc, #732]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d22:	2180      	movs	r1, #128	; 0x80
 8002d24:	0049      	lsls	r1, r1, #1
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe f9c7 	bl	80010bc <HAL_GetTick>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d32:	e00b      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d34:	f7fe f9c2 	bl	80010bc <HAL_GetTick>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d904      	bls.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002d42:	2313      	movs	r3, #19
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2203      	movs	r2, #3
 8002d48:	701a      	strb	r2, [r3, #0]
        break;
 8002d4a:	e005      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4c:	4bac      	ldr	r3, [pc, #688]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	d0ed      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002d58:	2313      	movs	r3, #19
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d154      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d62:	4ba6      	ldr	r3, [pc, #664]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d66:	23c0      	movs	r3, #192	; 0xc0
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d019      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d014      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d7e:	4b9f      	ldr	r3, [pc, #636]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	4aa0      	ldr	r2, [pc, #640]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d88:	4b9c      	ldr	r3, [pc, #624]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d8c:	4b9b      	ldr	r3, [pc, #620]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d8e:	2180      	movs	r1, #128	; 0x80
 8002d90:	0249      	lsls	r1, r1, #9
 8002d92:	430a      	orrs	r2, r1
 8002d94:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d96:	4b99      	ldr	r3, [pc, #612]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d9a:	4b98      	ldr	r3, [pc, #608]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d9c:	499a      	ldr	r1, [pc, #616]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002d9e:	400a      	ands	r2, r1
 8002da0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002da2:	4b96      	ldr	r3, [pc, #600]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2201      	movs	r2, #1
 8002dac:	4013      	ands	r3, r2
 8002dae:	d016      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe f984 	bl	80010bc <HAL_GetTick>
 8002db4:	0003      	movs	r3, r0
 8002db6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	e00c      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe f97f 	bl	80010bc <HAL_GetTick>
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	4a91      	ldr	r2, [pc, #580]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d904      	bls.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002dca:	2313      	movs	r3, #19
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	2203      	movs	r2, #3
 8002dd0:	701a      	strb	r2, [r3, #0]
            break;
 8002dd2:	e004      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd4:	4b89      	ldr	r3, [pc, #548]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	2202      	movs	r2, #2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d0ed      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002dde:	2313      	movs	r3, #19
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de8:	4b84      	ldr	r3, [pc, #528]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	4a85      	ldr	r2, [pc, #532]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df6:	4b81      	ldr	r3, [pc, #516]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dfc:	e00c      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dfe:	2312      	movs	r3, #18
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	2213      	movs	r2, #19
 8002e04:	18ba      	adds	r2, r7, r2
 8002e06:	7812      	ldrb	r2, [r2, #0]
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e005      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0c:	2312      	movs	r3, #18
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2213      	movs	r2, #19
 8002e12:	18ba      	adds	r2, r7, r2
 8002e14:	7812      	ldrb	r2, [r2, #0]
 8002e16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e18:	2311      	movs	r3, #17
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d105      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e22:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e26:	4b75      	ldr	r3, [pc, #468]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e28:	4979      	ldr	r1, [pc, #484]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2201      	movs	r2, #1
 8002e34:	4013      	ands	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e38:	4b70      	ldr	r3, [pc, #448]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	4393      	bics	r3, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2202      	movs	r2, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	d009      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e56:	4b69      	ldr	r3, [pc, #420]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	4b65      	ldr	r3, [pc, #404]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e66:	430a      	orrs	r2, r1
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2210      	movs	r2, #16
 8002e70:	4013      	ands	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e74:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	4a66      	ldr	r2, [pc, #408]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	4b5e      	ldr	r3, [pc, #376]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	2380      	movs	r3, #128	; 0x80
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4013      	ands	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e94:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e98:	4a5f      	ldr	r2, [pc, #380]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d009      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eb4:	4b51      	ldr	r3, [pc, #324]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	4a58      	ldr	r2, [pc, #352]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	4b4e      	ldr	r3, [pc, #312]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	4b46      	ldr	r3, [pc, #280]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	01db      	lsls	r3, r3, #7
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d015      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ef2:	4b42      	ldr	r3, [pc, #264]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	0899      	lsrs	r1, r3, #2
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	05db      	lsls	r3, r3, #23
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f10:	4b3a      	ldr	r3, [pc, #232]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	0249      	lsls	r1, r1, #9
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	031b      	lsls	r3, r3, #12
 8002f26:	4013      	ands	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f2a:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	4393      	bics	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f38:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	039b      	lsls	r3, r3, #14
 8002f46:	4013      	ands	r3, r2
 8002f48:	d016      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	4a35      	ldr	r2, [pc, #212]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	03db      	lsls	r3, r3, #15
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d106      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f70:	2180      	movs	r1, #128	; 0x80
 8002f72:	0449      	lsls	r1, r1, #17
 8002f74:	430a      	orrs	r2, r1
 8002f76:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	03db      	lsls	r3, r3, #15
 8002f80:	4013      	ands	r3, r2
 8002f82:	d016      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	4a27      	ldr	r2, [pc, #156]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f94:	430a      	orrs	r2, r1
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	045b      	lsls	r3, r3, #17
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002fa4:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	0449      	lsls	r1, r1, #17
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d016      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	4a1a      	ldr	r2, [pc, #104]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	01db      	lsls	r3, r3, #7
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d106      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	0249      	lsls	r1, r1, #9
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002fec:	2312      	movs	r3, #18
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	781b      	ldrb	r3, [r3, #0]
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b006      	add	sp, #24
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
 8003004:	fffffcff 	.word	0xfffffcff
 8003008:	fffeffff 	.word	0xfffeffff
 800300c:	00001388 	.word	0x00001388
 8003010:	efffffff 	.word	0xefffffff
 8003014:	fffff3ff 	.word	0xfffff3ff
 8003018:	fff3ffff 	.word	0xfff3ffff
 800301c:	ffcfffff 	.word	0xffcfffff
 8003020:	ffffcfff 	.word	0xffffcfff
 8003024:	ffbfffff 	.word	0xffbfffff
 8003028:	feffffff 	.word	0xfeffffff
 800302c:	ffff3fff 	.word	0xffff3fff

08003030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e046      	b.n	80030d0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2284      	movs	r2, #132	; 0x84
 8003046:	589b      	ldr	r3, [r3, r2]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2280      	movs	r2, #128	; 0x80
 8003050:	2100      	movs	r1, #0
 8003052:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f7fd feec 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2284      	movs	r2, #132	; 0x84
 8003060:	2124      	movs	r1, #36	; 0x24
 8003062:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2101      	movs	r1, #1
 8003070:	438a      	bics	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	0018      	movs	r0, r3
 8003078:	f000 f8dc 	bl	8003234 <UART_SetConfig>
 800307c:	0003      	movs	r3, r0
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e024      	b.n	80030d0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f000 fbab 	bl	80037ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	490d      	ldr	r1, [pc, #52]	; (80030d8 <HAL_UART_Init+0xa8>)
 80030a2:	400a      	ands	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	212a      	movs	r1, #42	; 0x2a
 80030b2:	438a      	bics	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2101      	movs	r1, #1
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f000 fc43 	bl	8003954 <UART_CheckIdleState>
 80030ce:	0003      	movs	r3, r0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	ffffb7ff 	.word	0xffffb7ff

080030dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	1dbb      	adds	r3, r7, #6
 80030ea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2284      	movs	r2, #132	; 0x84
 80030f0:	589b      	ldr	r3, [r3, r2]
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d000      	beq.n	80030f8 <HAL_UART_Transmit+0x1c>
 80030f6:	e097      	b.n	8003228 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_Transmit+0x2a>
 80030fe:	1dbb      	adds	r3, r7, #6
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e08f      	b.n	800322a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	015b      	lsls	r3, r3, #5
 8003112:	429a      	cmp	r2, r3
 8003114:	d109      	bne.n	800312a <HAL_UART_Transmit+0x4e>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2201      	movs	r2, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d001      	beq.n	800312a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07f      	b.n	800322a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	5c9b      	ldrb	r3, [r3, r2]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_UART_Transmit+0x5c>
 8003134:	2302      	movs	r3, #2
 8003136:	e078      	b.n	800322a <HAL_UART_Transmit+0x14e>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2280      	movs	r2, #128	; 0x80
 800313c:	2101      	movs	r1, #1
 800313e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	228c      	movs	r2, #140	; 0x8c
 8003144:	2100      	movs	r1, #0
 8003146:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2284      	movs	r2, #132	; 0x84
 800314c:	2121      	movs	r1, #33	; 0x21
 800314e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003150:	f7fd ffb4 	bl	80010bc <HAL_GetTick>
 8003154:	0003      	movs	r3, r0
 8003156:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1dba      	adds	r2, r7, #6
 800315c:	2154      	movs	r1, #84	; 0x54
 800315e:	8812      	ldrh	r2, [r2, #0]
 8003160:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1dba      	adds	r2, r7, #6
 8003166:	2156      	movs	r1, #86	; 0x56
 8003168:	8812      	ldrh	r2, [r2, #0]
 800316a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	015b      	lsls	r3, r3, #5
 8003174:	429a      	cmp	r2, r3
 8003176:	d108      	bne.n	800318a <HAL_UART_Transmit+0xae>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	e003      	b.n	8003192 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	2100      	movs	r1, #0
 8003198:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800319a:	e02c      	b.n	80031f6 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	0013      	movs	r3, r2
 80031a6:	2200      	movs	r2, #0
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	f000 fc1d 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 80031ae:	1e03      	subs	r3, r0, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e039      	b.n	800322a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	001a      	movs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	05d2      	lsls	r2, r2, #23
 80031c8:	0dd2      	lsrs	r2, r2, #23
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	3302      	adds	r3, #2
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	e007      	b.n	80031e4 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2256      	movs	r2, #86	; 0x56
 80031e8:	5a9b      	ldrh	r3, [r3, r2]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b299      	uxth	r1, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2256      	movs	r2, #86	; 0x56
 80031f4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2256      	movs	r2, #86	; 0x56
 80031fa:	5a9b      	ldrh	r3, [r3, r2]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1cc      	bne.n	800319c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	0013      	movs	r3, r2
 800320c:	2200      	movs	r2, #0
 800320e:	2140      	movs	r1, #64	; 0x40
 8003210:	f000 fbea 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d001      	beq.n	800321c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e006      	b.n	800322a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2284      	movs	r2, #132	; 0x84
 8003220:	2120      	movs	r1, #32
 8003222:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b008      	add	sp, #32
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003234:	b5b0      	push	{r4, r5, r7, lr}
 8003236:	b090      	sub	sp, #64	; 0x40
 8003238:	af00      	add	r7, sp, #0
 800323a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800323c:	231a      	movs	r3, #26
 800323e:	2220      	movs	r2, #32
 8003240:	4694      	mov	ip, r2
 8003242:	44bc      	add	ip, r7
 8003244:	4463      	add	r3, ip
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	431a      	orrs	r2, r3
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	431a      	orrs	r2, r3
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4313      	orrs	r3, r2
 8003260:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4ab9      	ldr	r2, [pc, #740]	; (8003550 <UART_SetConfig+0x31c>)
 800326a:	4013      	ands	r3, r2
 800326c:	0019      	movs	r1, r3
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003274:	430b      	orrs	r3, r1
 8003276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4ab5      	ldr	r2, [pc, #724]	; (8003554 <UART_SetConfig+0x320>)
 8003280:	4013      	ands	r3, r2
 8003282:	0018      	movs	r0, r3
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	68d9      	ldr	r1, [r3, #12]
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	0003      	movs	r3, r0
 800328e:	430b      	orrs	r3, r1
 8003290:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4aae      	ldr	r2, [pc, #696]	; (8003558 <UART_SetConfig+0x324>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d004      	beq.n	80032ac <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032a8:	4313      	orrs	r3, r2
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4aaa      	ldr	r2, [pc, #680]	; (800355c <UART_SetConfig+0x328>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	0019      	movs	r1, r3
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032be:	430b      	orrs	r3, r1
 80032c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	220f      	movs	r2, #15
 80032ca:	4393      	bics	r3, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	0003      	movs	r3, r0
 80032d8:	430b      	orrs	r3, r1
 80032da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a9f      	ldr	r2, [pc, #636]	; (8003560 <UART_SetConfig+0x32c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d136      	bne.n	8003354 <UART_SetConfig+0x120>
 80032e6:	4b9f      	ldr	r3, [pc, #636]	; (8003564 <UART_SetConfig+0x330>)
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	2203      	movs	r2, #3
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d020      	beq.n	8003334 <UART_SetConfig+0x100>
 80032f2:	d827      	bhi.n	8003344 <UART_SetConfig+0x110>
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d00d      	beq.n	8003314 <UART_SetConfig+0xe0>
 80032f8:	d824      	bhi.n	8003344 <UART_SetConfig+0x110>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <UART_SetConfig+0xd0>
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d010      	beq.n	8003324 <UART_SetConfig+0xf0>
 8003302:	e01f      	b.n	8003344 <UART_SetConfig+0x110>
 8003304:	231b      	movs	r3, #27
 8003306:	2220      	movs	r2, #32
 8003308:	4694      	mov	ip, r2
 800330a:	44bc      	add	ip, r7
 800330c:	4463      	add	r3, ip
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e0c5      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003314:	231b      	movs	r3, #27
 8003316:	2220      	movs	r2, #32
 8003318:	4694      	mov	ip, r2
 800331a:	44bc      	add	ip, r7
 800331c:	4463      	add	r3, ip
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e0bd      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003324:	231b      	movs	r3, #27
 8003326:	2220      	movs	r2, #32
 8003328:	4694      	mov	ip, r2
 800332a:	44bc      	add	ip, r7
 800332c:	4463      	add	r3, ip
 800332e:	2204      	movs	r2, #4
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e0b5      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003334:	231b      	movs	r3, #27
 8003336:	2220      	movs	r2, #32
 8003338:	4694      	mov	ip, r2
 800333a:	44bc      	add	ip, r7
 800333c:	4463      	add	r3, ip
 800333e:	2208      	movs	r2, #8
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e0ad      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003344:	231b      	movs	r3, #27
 8003346:	2220      	movs	r2, #32
 8003348:	4694      	mov	ip, r2
 800334a:	44bc      	add	ip, r7
 800334c:	4463      	add	r3, ip
 800334e:	2210      	movs	r2, #16
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e0a5      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a83      	ldr	r2, [pc, #524]	; (8003568 <UART_SetConfig+0x334>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d136      	bne.n	80033cc <UART_SetConfig+0x198>
 800335e:	4b81      	ldr	r3, [pc, #516]	; (8003564 <UART_SetConfig+0x330>)
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	220c      	movs	r2, #12
 8003364:	4013      	ands	r3, r2
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d020      	beq.n	80033ac <UART_SetConfig+0x178>
 800336a:	d827      	bhi.n	80033bc <UART_SetConfig+0x188>
 800336c:	2b08      	cmp	r3, #8
 800336e:	d00d      	beq.n	800338c <UART_SetConfig+0x158>
 8003370:	d824      	bhi.n	80033bc <UART_SetConfig+0x188>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <UART_SetConfig+0x148>
 8003376:	2b04      	cmp	r3, #4
 8003378:	d010      	beq.n	800339c <UART_SetConfig+0x168>
 800337a:	e01f      	b.n	80033bc <UART_SetConfig+0x188>
 800337c:	231b      	movs	r3, #27
 800337e:	2220      	movs	r2, #32
 8003380:	4694      	mov	ip, r2
 8003382:	44bc      	add	ip, r7
 8003384:	4463      	add	r3, ip
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e089      	b.n	80034a0 <UART_SetConfig+0x26c>
 800338c:	231b      	movs	r3, #27
 800338e:	2220      	movs	r2, #32
 8003390:	4694      	mov	ip, r2
 8003392:	44bc      	add	ip, r7
 8003394:	4463      	add	r3, ip
 8003396:	2202      	movs	r2, #2
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e081      	b.n	80034a0 <UART_SetConfig+0x26c>
 800339c:	231b      	movs	r3, #27
 800339e:	2220      	movs	r2, #32
 80033a0:	4694      	mov	ip, r2
 80033a2:	44bc      	add	ip, r7
 80033a4:	4463      	add	r3, ip
 80033a6:	2204      	movs	r2, #4
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e079      	b.n	80034a0 <UART_SetConfig+0x26c>
 80033ac:	231b      	movs	r3, #27
 80033ae:	2220      	movs	r2, #32
 80033b0:	4694      	mov	ip, r2
 80033b2:	44bc      	add	ip, r7
 80033b4:	4463      	add	r3, ip
 80033b6:	2208      	movs	r2, #8
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e071      	b.n	80034a0 <UART_SetConfig+0x26c>
 80033bc:	231b      	movs	r3, #27
 80033be:	2220      	movs	r2, #32
 80033c0:	4694      	mov	ip, r2
 80033c2:	44bc      	add	ip, r7
 80033c4:	4463      	add	r3, ip
 80033c6:	2210      	movs	r2, #16
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	e069      	b.n	80034a0 <UART_SetConfig+0x26c>
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a66      	ldr	r2, [pc, #408]	; (800356c <UART_SetConfig+0x338>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d107      	bne.n	80033e6 <UART_SetConfig+0x1b2>
 80033d6:	231b      	movs	r3, #27
 80033d8:	2220      	movs	r2, #32
 80033da:	4694      	mov	ip, r2
 80033dc:	44bc      	add	ip, r7
 80033de:	4463      	add	r3, ip
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	e05c      	b.n	80034a0 <UART_SetConfig+0x26c>
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a61      	ldr	r2, [pc, #388]	; (8003570 <UART_SetConfig+0x33c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d107      	bne.n	8003400 <UART_SetConfig+0x1cc>
 80033f0:	231b      	movs	r3, #27
 80033f2:	2220      	movs	r2, #32
 80033f4:	4694      	mov	ip, r2
 80033f6:	44bc      	add	ip, r7
 80033f8:	4463      	add	r3, ip
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
 80033fe:	e04f      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a54      	ldr	r2, [pc, #336]	; (8003558 <UART_SetConfig+0x324>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d143      	bne.n	8003492 <UART_SetConfig+0x25e>
 800340a:	4b56      	ldr	r3, [pc, #344]	; (8003564 <UART_SetConfig+0x330>)
 800340c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800340e:	23c0      	movs	r3, #192	; 0xc0
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	4013      	ands	r3, r2
 8003414:	22c0      	movs	r2, #192	; 0xc0
 8003416:	0112      	lsls	r2, r2, #4
 8003418:	4293      	cmp	r3, r2
 800341a:	d02a      	beq.n	8003472 <UART_SetConfig+0x23e>
 800341c:	22c0      	movs	r2, #192	; 0xc0
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	4293      	cmp	r3, r2
 8003422:	d82e      	bhi.n	8003482 <UART_SetConfig+0x24e>
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	0112      	lsls	r2, r2, #4
 8003428:	4293      	cmp	r3, r2
 800342a:	d012      	beq.n	8003452 <UART_SetConfig+0x21e>
 800342c:	2280      	movs	r2, #128	; 0x80
 800342e:	0112      	lsls	r2, r2, #4
 8003430:	4293      	cmp	r3, r2
 8003432:	d826      	bhi.n	8003482 <UART_SetConfig+0x24e>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <UART_SetConfig+0x20e>
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	00d2      	lsls	r2, r2, #3
 800343c:	4293      	cmp	r3, r2
 800343e:	d010      	beq.n	8003462 <UART_SetConfig+0x22e>
 8003440:	e01f      	b.n	8003482 <UART_SetConfig+0x24e>
 8003442:	231b      	movs	r3, #27
 8003444:	2220      	movs	r2, #32
 8003446:	4694      	mov	ip, r2
 8003448:	44bc      	add	ip, r7
 800344a:	4463      	add	r3, ip
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	e026      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003452:	231b      	movs	r3, #27
 8003454:	2220      	movs	r2, #32
 8003456:	4694      	mov	ip, r2
 8003458:	44bc      	add	ip, r7
 800345a:	4463      	add	r3, ip
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e01e      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003462:	231b      	movs	r3, #27
 8003464:	2220      	movs	r2, #32
 8003466:	4694      	mov	ip, r2
 8003468:	44bc      	add	ip, r7
 800346a:	4463      	add	r3, ip
 800346c:	2204      	movs	r2, #4
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	e016      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003472:	231b      	movs	r3, #27
 8003474:	2220      	movs	r2, #32
 8003476:	4694      	mov	ip, r2
 8003478:	44bc      	add	ip, r7
 800347a:	4463      	add	r3, ip
 800347c:	2208      	movs	r2, #8
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e00e      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003482:	231b      	movs	r3, #27
 8003484:	2220      	movs	r2, #32
 8003486:	4694      	mov	ip, r2
 8003488:	44bc      	add	ip, r7
 800348a:	4463      	add	r3, ip
 800348c:	2210      	movs	r2, #16
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e006      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003492:	231b      	movs	r3, #27
 8003494:	2220      	movs	r2, #32
 8003496:	4694      	mov	ip, r2
 8003498:	44bc      	add	ip, r7
 800349a:	4463      	add	r3, ip
 800349c:	2210      	movs	r2, #16
 800349e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a2c      	ldr	r2, [pc, #176]	; (8003558 <UART_SetConfig+0x324>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d000      	beq.n	80034ac <UART_SetConfig+0x278>
 80034aa:	e0ad      	b.n	8003608 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034ac:	231b      	movs	r3, #27
 80034ae:	2220      	movs	r2, #32
 80034b0:	4694      	mov	ip, r2
 80034b2:	44bc      	add	ip, r7
 80034b4:	4463      	add	r3, ip
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d015      	beq.n	80034e8 <UART_SetConfig+0x2b4>
 80034bc:	dc18      	bgt.n	80034f0 <UART_SetConfig+0x2bc>
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d00d      	beq.n	80034de <UART_SetConfig+0x2aa>
 80034c2:	dc15      	bgt.n	80034f0 <UART_SetConfig+0x2bc>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <UART_SetConfig+0x29a>
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d005      	beq.n	80034d8 <UART_SetConfig+0x2a4>
 80034cc:	e010      	b.n	80034f0 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ce:	f7ff fbe1 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 80034d2:	0003      	movs	r3, r0
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034d6:	e015      	b.n	8003504 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d8:	4b26      	ldr	r3, [pc, #152]	; (8003574 <UART_SetConfig+0x340>)
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034dc:	e012      	b.n	8003504 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034de:	f7ff fb4d 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 80034e2:	0003      	movs	r3, r0
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034e6:	e00d      	b.n	8003504 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034ee:	e009      	b.n	8003504 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034f4:	231a      	movs	r3, #26
 80034f6:	2220      	movs	r2, #32
 80034f8:	4694      	mov	ip, r2
 80034fa:	44bc      	add	ip, r7
 80034fc:	4463      	add	r3, ip
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
        break;
 8003502:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003506:	2b00      	cmp	r3, #0
 8003508:	d100      	bne.n	800350c <UART_SetConfig+0x2d8>
 800350a:	e153      	b.n	80037b4 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <UART_SetConfig+0x344>)
 8003512:	0052      	lsls	r2, r2, #1
 8003514:	5ad3      	ldrh	r3, [r2, r3]
 8003516:	0019      	movs	r1, r3
 8003518:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800351a:	f7fc fe05 	bl	8000128 <__udivsi3>
 800351e:	0003      	movs	r3, r0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	0013      	movs	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	189b      	adds	r3, r3, r2
 800352c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800352e:	429a      	cmp	r2, r3
 8003530:	d305      	bcc.n	800353e <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353a:	429a      	cmp	r2, r3
 800353c:	d91e      	bls.n	800357c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800353e:	231a      	movs	r3, #26
 8003540:	2220      	movs	r2, #32
 8003542:	4694      	mov	ip, r2
 8003544:	44bc      	add	ip, r7
 8003546:	4463      	add	r3, ip
 8003548:	2201      	movs	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	e132      	b.n	80037b4 <UART_SetConfig+0x580>
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	cfff69f3 	.word	0xcfff69f3
 8003554:	ffffcfff 	.word	0xffffcfff
 8003558:	40008000 	.word	0x40008000
 800355c:	11fff4ff 	.word	0x11fff4ff
 8003560:	40013800 	.word	0x40013800
 8003564:	40021000 	.word	0x40021000
 8003568:	40004400 	.word	0x40004400
 800356c:	40004800 	.word	0x40004800
 8003570:	40004c00 	.word	0x40004c00
 8003574:	00f42400 	.word	0x00f42400
 8003578:	08004730 	.word	0x08004730
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003588:	4b96      	ldr	r3, [pc, #600]	; (80037e4 <UART_SetConfig+0x5b0>)
 800358a:	0052      	lsls	r2, r2, #1
 800358c:	5ad3      	ldrh	r3, [r2, r3]
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	69b8      	ldr	r0, [r7, #24]
 800359a:	69f9      	ldr	r1, [r7, #28]
 800359c:	f7fc ff3a 	bl	8000414 <__aeabi_uldivmod>
 80035a0:	0002      	movs	r2, r0
 80035a2:	000b      	movs	r3, r1
 80035a4:	0e11      	lsrs	r1, r2, #24
 80035a6:	021d      	lsls	r5, r3, #8
 80035a8:	430d      	orrs	r5, r1
 80035aa:	0214      	lsls	r4, r2, #8
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68b8      	ldr	r0, [r7, #8]
 80035ba:	68f9      	ldr	r1, [r7, #12]
 80035bc:	1900      	adds	r0, r0, r4
 80035be:	4169      	adcs	r1, r5
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f7fc ff21 	bl	8000414 <__aeabi_uldivmod>
 80035d2:	0002      	movs	r2, r0
 80035d4:	000b      	movs	r3, r1
 80035d6:	0013      	movs	r3, r2
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035dc:	23c0      	movs	r3, #192	; 0xc0
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d309      	bcc.n	80035f8 <UART_SetConfig+0x3c4>
 80035e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	035b      	lsls	r3, r3, #13
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d204      	bcs.n	80035f8 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	e0dd      	b.n	80037b4 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 80035f8:	231a      	movs	r3, #26
 80035fa:	2220      	movs	r2, #32
 80035fc:	4694      	mov	ip, r2
 80035fe:	44bc      	add	ip, r7
 8003600:	4463      	add	r3, ip
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	e0d5      	b.n	80037b4 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	429a      	cmp	r2, r3
 8003612:	d000      	beq.n	8003616 <UART_SetConfig+0x3e2>
 8003614:	e073      	b.n	80036fe <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003616:	231b      	movs	r3, #27
 8003618:	2220      	movs	r2, #32
 800361a:	4694      	mov	ip, r2
 800361c:	44bc      	add	ip, r7
 800361e:	4463      	add	r3, ip
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b08      	cmp	r3, #8
 8003624:	d015      	beq.n	8003652 <UART_SetConfig+0x41e>
 8003626:	dc18      	bgt.n	800365a <UART_SetConfig+0x426>
 8003628:	2b04      	cmp	r3, #4
 800362a:	d00d      	beq.n	8003648 <UART_SetConfig+0x414>
 800362c:	dc15      	bgt.n	800365a <UART_SetConfig+0x426>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <UART_SetConfig+0x404>
 8003632:	2b02      	cmp	r3, #2
 8003634:	d005      	beq.n	8003642 <UART_SetConfig+0x40e>
 8003636:	e010      	b.n	800365a <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003638:	f7ff fb2c 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 800363c:	0003      	movs	r3, r0
 800363e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003640:	e015      	b.n	800366e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003642:	4b69      	ldr	r3, [pc, #420]	; (80037e8 <UART_SetConfig+0x5b4>)
 8003644:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003646:	e012      	b.n	800366e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003648:	f7ff fa98 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 800364c:	0003      	movs	r3, r0
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003650:	e00d      	b.n	800366e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003658:	e009      	b.n	800366e <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800365e:	231a      	movs	r3, #26
 8003660:	2220      	movs	r2, #32
 8003662:	4694      	mov	ip, r2
 8003664:	44bc      	add	ip, r7
 8003666:	4463      	add	r3, ip
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
        break;
 800366c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	2b00      	cmp	r3, #0
 8003672:	d100      	bne.n	8003676 <UART_SetConfig+0x442>
 8003674:	e09e      	b.n	80037b4 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800367a:	4b5a      	ldr	r3, [pc, #360]	; (80037e4 <UART_SetConfig+0x5b0>)
 800367c:	0052      	lsls	r2, r2, #1
 800367e:	5ad3      	ldrh	r3, [r2, r3]
 8003680:	0019      	movs	r1, r3
 8003682:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003684:	f7fc fd50 	bl	8000128 <__udivsi3>
 8003688:	0003      	movs	r3, r0
 800368a:	005a      	lsls	r2, r3, #1
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	18d2      	adds	r2, r2, r3
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	0019      	movs	r1, r3
 800369a:	0010      	movs	r0, r2
 800369c:	f7fc fd44 	bl	8000128 <__udivsi3>
 80036a0:	0003      	movs	r3, r0
 80036a2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	d921      	bls.n	80036ee <UART_SetConfig+0x4ba>
 80036aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	025b      	lsls	r3, r3, #9
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d21c      	bcs.n	80036ee <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	200e      	movs	r0, #14
 80036ba:	2420      	movs	r4, #32
 80036bc:	193b      	adds	r3, r7, r4
 80036be:	181b      	adds	r3, r3, r0
 80036c0:	210f      	movs	r1, #15
 80036c2:	438a      	bics	r2, r1
 80036c4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2207      	movs	r2, #7
 80036ce:	4013      	ands	r3, r2
 80036d0:	b299      	uxth	r1, r3
 80036d2:	193b      	adds	r3, r7, r4
 80036d4:	181b      	adds	r3, r3, r0
 80036d6:	193a      	adds	r2, r7, r4
 80036d8:	1812      	adds	r2, r2, r0
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	193a      	adds	r2, r7, r4
 80036e6:	1812      	adds	r2, r2, r0
 80036e8:	8812      	ldrh	r2, [r2, #0]
 80036ea:	60da      	str	r2, [r3, #12]
 80036ec:	e062      	b.n	80037b4 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 80036ee:	231a      	movs	r3, #26
 80036f0:	2220      	movs	r2, #32
 80036f2:	4694      	mov	ip, r2
 80036f4:	44bc      	add	ip, r7
 80036f6:	4463      	add	r3, ip
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e05a      	b.n	80037b4 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036fe:	231b      	movs	r3, #27
 8003700:	2220      	movs	r2, #32
 8003702:	4694      	mov	ip, r2
 8003704:	44bc      	add	ip, r7
 8003706:	4463      	add	r3, ip
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b08      	cmp	r3, #8
 800370c:	d015      	beq.n	800373a <UART_SetConfig+0x506>
 800370e:	dc18      	bgt.n	8003742 <UART_SetConfig+0x50e>
 8003710:	2b04      	cmp	r3, #4
 8003712:	d00d      	beq.n	8003730 <UART_SetConfig+0x4fc>
 8003714:	dc15      	bgt.n	8003742 <UART_SetConfig+0x50e>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <UART_SetConfig+0x4ec>
 800371a:	2b02      	cmp	r3, #2
 800371c:	d005      	beq.n	800372a <UART_SetConfig+0x4f6>
 800371e:	e010      	b.n	8003742 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7ff fab8 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 8003724:	0003      	movs	r3, r0
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003728:	e015      	b.n	8003756 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800372a:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <UART_SetConfig+0x5b4>)
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800372e:	e012      	b.n	8003756 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003730:	f7ff fa24 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8003734:	0003      	movs	r3, r0
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003738:	e00d      	b.n	8003756 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003740:	e009      	b.n	8003756 <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003746:	231a      	movs	r3, #26
 8003748:	2220      	movs	r2, #32
 800374a:	4694      	mov	ip, r2
 800374c:	44bc      	add	ip, r7
 800374e:	4463      	add	r3, ip
 8003750:	2201      	movs	r2, #1
 8003752:	701a      	strb	r2, [r3, #0]
        break;
 8003754:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02b      	beq.n	80037b4 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003760:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <UART_SetConfig+0x5b0>)
 8003762:	0052      	lsls	r2, r2, #1
 8003764:	5ad3      	ldrh	r3, [r2, r3]
 8003766:	0019      	movs	r1, r3
 8003768:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800376a:	f7fc fcdd 	bl	8000128 <__udivsi3>
 800376e:	0003      	movs	r3, r0
 8003770:	001a      	movs	r2, r3
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	18d2      	adds	r2, r2, r3
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	0019      	movs	r1, r3
 8003780:	0010      	movs	r0, r2
 8003782:	f7fc fcd1 	bl	8000128 <__udivsi3>
 8003786:	0003      	movs	r3, r0
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	2b0f      	cmp	r3, #15
 800378e:	d90a      	bls.n	80037a6 <UART_SetConfig+0x572>
 8003790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	025b      	lsls	r3, r3, #9
 8003796:	429a      	cmp	r2, r3
 8003798:	d205      	bcs.n	80037a6 <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	b29a      	uxth	r2, r3
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60da      	str	r2, [r3, #12]
 80037a4:	e006      	b.n	80037b4 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 80037a6:	231a      	movs	r3, #26
 80037a8:	2220      	movs	r2, #32
 80037aa:	4694      	mov	ip, r2
 80037ac:	44bc      	add	ip, r7
 80037ae:	4463      	add	r3, ip
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	226a      	movs	r2, #106	; 0x6a
 80037b8:	2101      	movs	r1, #1
 80037ba:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	2268      	movs	r2, #104	; 0x68
 80037c0:	2101      	movs	r1, #1
 80037c2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	2200      	movs	r2, #0
 80037c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	2200      	movs	r2, #0
 80037ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80037d0:	231a      	movs	r3, #26
 80037d2:	2220      	movs	r2, #32
 80037d4:	4694      	mov	ip, r2
 80037d6:	44bc      	add	ip, r7
 80037d8:	4463      	add	r3, ip
 80037da:	781b      	ldrb	r3, [r3, #0]
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b010      	add	sp, #64	; 0x40
 80037e2:	bdb0      	pop	{r4, r5, r7, pc}
 80037e4:	08004730 	.word	0x08004730
 80037e8:	00f42400 	.word	0x00f42400

080037ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	2201      	movs	r2, #1
 80037fa:	4013      	ands	r3, r2
 80037fc:	d00b      	beq.n	8003816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a4a      	ldr	r2, [pc, #296]	; (8003930 <UART_AdvFeatureConfig+0x144>)
 8003806:	4013      	ands	r3, r2
 8003808:	0019      	movs	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	2202      	movs	r2, #2
 800381c:	4013      	ands	r3, r2
 800381e:	d00b      	beq.n	8003838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4a43      	ldr	r2, [pc, #268]	; (8003934 <UART_AdvFeatureConfig+0x148>)
 8003828:	4013      	ands	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	2204      	movs	r2, #4
 800383e:	4013      	ands	r3, r2
 8003840:	d00b      	beq.n	800385a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4a3b      	ldr	r2, [pc, #236]	; (8003938 <UART_AdvFeatureConfig+0x14c>)
 800384a:	4013      	ands	r3, r2
 800384c:	0019      	movs	r1, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	2208      	movs	r2, #8
 8003860:	4013      	ands	r3, r2
 8003862:	d00b      	beq.n	800387c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4a34      	ldr	r2, [pc, #208]	; (800393c <UART_AdvFeatureConfig+0x150>)
 800386c:	4013      	ands	r3, r2
 800386e:	0019      	movs	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	2210      	movs	r2, #16
 8003882:	4013      	ands	r3, r2
 8003884:	d00b      	beq.n	800389e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <UART_AdvFeatureConfig+0x154>)
 800388e:	4013      	ands	r3, r2
 8003890:	0019      	movs	r1, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	2220      	movs	r2, #32
 80038a4:	4013      	ands	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	4a25      	ldr	r2, [pc, #148]	; (8003944 <UART_AdvFeatureConfig+0x158>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	0019      	movs	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	2240      	movs	r2, #64	; 0x40
 80038c6:	4013      	ands	r3, r2
 80038c8:	d01d      	beq.n	8003906 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <UART_AdvFeatureConfig+0x15c>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	035b      	lsls	r3, r3, #13
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d10b      	bne.n	8003906 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4a15      	ldr	r2, [pc, #84]	; (800394c <UART_AdvFeatureConfig+0x160>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	0019      	movs	r1, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2280      	movs	r2, #128	; 0x80
 800390c:	4013      	ands	r3, r2
 800390e:	d00b      	beq.n	8003928 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <UART_AdvFeatureConfig+0x164>)
 8003918:	4013      	ands	r3, r2
 800391a:	0019      	movs	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}
 8003930:	fffdffff 	.word	0xfffdffff
 8003934:	fffeffff 	.word	0xfffeffff
 8003938:	fffbffff 	.word	0xfffbffff
 800393c:	ffff7fff 	.word	0xffff7fff
 8003940:	ffffefff 	.word	0xffffefff
 8003944:	ffffdfff 	.word	0xffffdfff
 8003948:	ffefffff 	.word	0xffefffff
 800394c:	ff9fffff 	.word	0xff9fffff
 8003950:	fff7ffff 	.word	0xfff7ffff

08003954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af02      	add	r7, sp, #8
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	228c      	movs	r2, #140	; 0x8c
 8003960:	2100      	movs	r1, #0
 8003962:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003964:	f7fd fbaa 	bl	80010bc <HAL_GetTick>
 8003968:	0003      	movs	r3, r0
 800396a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2208      	movs	r2, #8
 8003974:	4013      	ands	r3, r2
 8003976:	2b08      	cmp	r3, #8
 8003978:	d10c      	bne.n	8003994 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2280      	movs	r2, #128	; 0x80
 800397e:	0391      	lsls	r1, r2, #14
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <UART_CheckIdleState+0x90>)
 8003984:	9200      	str	r2, [sp, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	f000 f82e 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 800398c:	1e03      	subs	r3, r0, #0
 800398e:	d001      	beq.n	8003994 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e023      	b.n	80039dc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2204      	movs	r2, #4
 800399c:	4013      	ands	r3, r2
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d10c      	bne.n	80039bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	03d1      	lsls	r1, r2, #15
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <UART_CheckIdleState+0x90>)
 80039ac:	9200      	str	r2, [sp, #0]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f000 f81a 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 80039b4:	1e03      	subs	r3, r0, #0
 80039b6:	d001      	beq.n	80039bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e00f      	b.n	80039dc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2284      	movs	r2, #132	; 0x84
 80039c0:	2120      	movs	r1, #32
 80039c2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2288      	movs	r2, #136	; 0x88
 80039c8:	2120      	movs	r1, #32
 80039ca:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	2100      	movs	r1, #0
 80039d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b004      	add	sp, #16
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	01ffffff 	.word	0x01ffffff

080039e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b094      	sub	sp, #80	; 0x50
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f8:	e0a7      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039fc:	3301      	adds	r3, #1
 80039fe:	d100      	bne.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a00:	e0a3      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7fd fb5b 	bl	80010bc <HAL_GetTick>
 8003a06:	0002      	movs	r2, r0
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d13f      	bne.n	8003a98 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a18:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a20:	647b      	str	r3, [r7, #68]	; 0x44
 8003a22:	2301      	movs	r3, #1
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	494e      	ldr	r1, [pc, #312]	; (8003b74 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a40:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	f383 8810 	msr	PRIMASK, r3
}
 8003a48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a52:	643b      	str	r3, [r7, #64]	; 0x40
 8003a54:	2301      	movs	r3, #1
 8003a56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5a:	f383 8810 	msr	PRIMASK, r3
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	438a      	bics	r2, r1
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a76:	f383 8810 	msr	PRIMASK, r3
}
 8003a7a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2284      	movs	r2, #132	; 0x84
 8003a80:	2120      	movs	r1, #32
 8003a82:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2288      	movs	r2, #136	; 0x88
 8003a88:	2120      	movs	r1, #32
 8003a8a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2280      	movs	r2, #128	; 0x80
 8003a90:	2100      	movs	r1, #0
 8003a92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e069      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d052      	beq.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	401a      	ands	r2, r3
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d148      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	0112      	lsls	r2, r2, #4
 8003ac0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ac8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4924      	ldr	r1, [pc, #144]	; (8003b74 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f383 8810 	msr	PRIMASK, r3
}
 8003af2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af4:	f3ef 8310 	mrs	r3, PRIMASK
 8003af8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003afa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003afe:	2301      	movs	r3, #1
 8003b00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	f383 8810 	msr	PRIMASK, r3
}
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	438a      	bics	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]
 8003b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	f383 8810 	msr	PRIMASK, r3
}
 8003b24:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2284      	movs	r2, #132	; 0x84
 8003b2a:	2120      	movs	r1, #32
 8003b2c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2288      	movs	r2, #136	; 0x88
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	228c      	movs	r2, #140	; 0x8c
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2280      	movs	r2, #128	; 0x80
 8003b42:	2100      	movs	r1, #0
 8003b44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e010      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4013      	ands	r3, r2
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	425a      	negs	r2, r3
 8003b5a:	4153      	adcs	r3, r2
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	001a      	movs	r2, r3
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d100      	bne.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x182>
 8003b68:	e747      	b.n	80039fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b014      	add	sp, #80	; 0x50
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	fffffe5f 	.word	0xfffffe5f

08003b78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	5c9b      	ldrb	r3, [r3, r2]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_UARTEx_DisableFifoMode+0x16>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e027      	b.n	8003bde <HAL_UARTEx_DisableFifoMode+0x66>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	2101      	movs	r1, #1
 8003b94:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2284      	movs	r2, #132	; 0x84
 8003b9a:	2124      	movs	r1, #36	; 0x24
 8003b9c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	438a      	bics	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2284      	movs	r2, #132	; 0x84
 8003bd0:	2120      	movs	r1, #32
 8003bd2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2280      	movs	r2, #128	; 0x80
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b004      	add	sp, #16
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	dfffffff 	.word	0xdfffffff

08003bec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2280      	movs	r2, #128	; 0x80
 8003bfa:	5c9b      	ldrb	r3, [r3, r2]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e02e      	b.n	8003c62 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	2101      	movs	r1, #1
 8003c0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2284      	movs	r2, #132	; 0x84
 8003c10:	2124      	movs	r1, #36	; 0x24
 8003c12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2101      	movs	r1, #1
 8003c28:	438a      	bics	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	08d9      	lsrs	r1, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 f854 	bl	8003cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2284      	movs	r2, #132	; 0x84
 8003c54:	2120      	movs	r1, #32
 8003c56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2280      	movs	r2, #128	; 0x80
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	0018      	movs	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b004      	add	sp, #16
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2280      	movs	r2, #128	; 0x80
 8003c7a:	5c9b      	ldrb	r3, [r3, r2]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e02f      	b.n	8003ce4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	2101      	movs	r1, #1
 8003c8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2284      	movs	r2, #132	; 0x84
 8003c90:	2124      	movs	r1, #36	; 0x24
 8003c92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	438a      	bics	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 f813 	bl	8003cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2284      	movs	r2, #132	; 0x84
 8003cd6:	2120      	movs	r1, #32
 8003cd8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	2100      	movs	r1, #0
 8003ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b004      	add	sp, #16
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	f1ffffff 	.word	0xf1ffffff

08003cf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d108      	bne.n	8003d12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	226a      	movs	r2, #106	; 0x6a
 8003d04:	2101      	movs	r1, #1
 8003d06:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2268      	movs	r2, #104	; 0x68
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d10:	e043      	b.n	8003d9a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d12:	260f      	movs	r6, #15
 8003d14:	19bb      	adds	r3, r7, r6
 8003d16:	2208      	movs	r2, #8
 8003d18:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d1a:	200e      	movs	r0, #14
 8003d1c:	183b      	adds	r3, r7, r0
 8003d1e:	2208      	movs	r2, #8
 8003d20:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	0e5b      	lsrs	r3, r3, #25
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	240d      	movs	r4, #13
 8003d2e:	193b      	adds	r3, r7, r4
 8003d30:	2107      	movs	r1, #7
 8003d32:	400a      	ands	r2, r1
 8003d34:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	0f5b      	lsrs	r3, r3, #29
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	250c      	movs	r5, #12
 8003d42:	197b      	adds	r3, r7, r5
 8003d44:	2107      	movs	r1, #7
 8003d46:	400a      	ands	r2, r1
 8003d48:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d4a:	183b      	adds	r3, r7, r0
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	197a      	adds	r2, r7, r5
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	4914      	ldr	r1, [pc, #80]	; (8003da4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003d54:	5c8a      	ldrb	r2, [r1, r2]
 8003d56:	435a      	muls	r2, r3
 8003d58:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d5a:	197b      	adds	r3, r7, r5
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003d60:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d62:	0019      	movs	r1, r3
 8003d64:	f7fc fa6a 	bl	800023c <__divsi3>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	b299      	uxth	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	226a      	movs	r2, #106	; 0x6a
 8003d70:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d72:	19bb      	adds	r3, r7, r6
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	193a      	adds	r2, r7, r4
 8003d78:	7812      	ldrb	r2, [r2, #0]
 8003d7a:	490a      	ldr	r1, [pc, #40]	; (8003da4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003d7c:	5c8a      	ldrb	r2, [r1, r2]
 8003d7e:	435a      	muls	r2, r3
 8003d80:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003d88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d8a:	0019      	movs	r1, r3
 8003d8c:	f7fc fa56 	bl	800023c <__divsi3>
 8003d90:	0003      	movs	r3, r0
 8003d92:	b299      	uxth	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2268      	movs	r2, #104	; 0x68
 8003d98:	5299      	strh	r1, [r3, r2]
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b005      	add	sp, #20
 8003da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	08004748 	.word	0x08004748
 8003da8:	08004750 	.word	0x08004750

08003dac <__errno>:
 8003dac:	4b01      	ldr	r3, [pc, #4]	; (8003db4 <__errno+0x8>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	4770      	bx	lr
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	2000000c 	.word	0x2000000c

08003db8 <__libc_init_array>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	2600      	movs	r6, #0
 8003dbc:	4d0c      	ldr	r5, [pc, #48]	; (8003df0 <__libc_init_array+0x38>)
 8003dbe:	4c0d      	ldr	r4, [pc, #52]	; (8003df4 <__libc_init_array+0x3c>)
 8003dc0:	1b64      	subs	r4, r4, r5
 8003dc2:	10a4      	asrs	r4, r4, #2
 8003dc4:	42a6      	cmp	r6, r4
 8003dc6:	d109      	bne.n	8003ddc <__libc_init_array+0x24>
 8003dc8:	2600      	movs	r6, #0
 8003dca:	f000 fc47 	bl	800465c <_init>
 8003dce:	4d0a      	ldr	r5, [pc, #40]	; (8003df8 <__libc_init_array+0x40>)
 8003dd0:	4c0a      	ldr	r4, [pc, #40]	; (8003dfc <__libc_init_array+0x44>)
 8003dd2:	1b64      	subs	r4, r4, r5
 8003dd4:	10a4      	asrs	r4, r4, #2
 8003dd6:	42a6      	cmp	r6, r4
 8003dd8:	d105      	bne.n	8003de6 <__libc_init_array+0x2e>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	00b3      	lsls	r3, r6, #2
 8003dde:	58eb      	ldr	r3, [r5, r3]
 8003de0:	4798      	blx	r3
 8003de2:	3601      	adds	r6, #1
 8003de4:	e7ee      	b.n	8003dc4 <__libc_init_array+0xc>
 8003de6:	00b3      	lsls	r3, r6, #2
 8003de8:	58eb      	ldr	r3, [r5, r3]
 8003dea:	4798      	blx	r3
 8003dec:	3601      	adds	r6, #1
 8003dee:	e7f2      	b.n	8003dd6 <__libc_init_array+0x1e>
 8003df0:	08004794 	.word	0x08004794
 8003df4:	08004794 	.word	0x08004794
 8003df8:	08004794 	.word	0x08004794
 8003dfc:	08004798 	.word	0x08004798

08003e00 <memset>:
 8003e00:	0003      	movs	r3, r0
 8003e02:	1882      	adds	r2, r0, r2
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d100      	bne.n	8003e0a <memset+0xa>
 8003e08:	4770      	bx	lr
 8003e0a:	7019      	strb	r1, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	e7f9      	b.n	8003e04 <memset+0x4>

08003e10 <siprintf>:
 8003e10:	b40e      	push	{r1, r2, r3}
 8003e12:	b500      	push	{lr}
 8003e14:	490b      	ldr	r1, [pc, #44]	; (8003e44 <siprintf+0x34>)
 8003e16:	b09c      	sub	sp, #112	; 0x70
 8003e18:	ab1d      	add	r3, sp, #116	; 0x74
 8003e1a:	9002      	str	r0, [sp, #8]
 8003e1c:	9006      	str	r0, [sp, #24]
 8003e1e:	9107      	str	r1, [sp, #28]
 8003e20:	9104      	str	r1, [sp, #16]
 8003e22:	4809      	ldr	r0, [pc, #36]	; (8003e48 <siprintf+0x38>)
 8003e24:	4909      	ldr	r1, [pc, #36]	; (8003e4c <siprintf+0x3c>)
 8003e26:	cb04      	ldmia	r3!, {r2}
 8003e28:	9105      	str	r1, [sp, #20]
 8003e2a:	6800      	ldr	r0, [r0, #0]
 8003e2c:	a902      	add	r1, sp, #8
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	f000 f870 	bl	8003f14 <_svfiprintf_r>
 8003e34:	2300      	movs	r3, #0
 8003e36:	9a02      	ldr	r2, [sp, #8]
 8003e38:	7013      	strb	r3, [r2, #0]
 8003e3a:	b01c      	add	sp, #112	; 0x70
 8003e3c:	bc08      	pop	{r3}
 8003e3e:	b003      	add	sp, #12
 8003e40:	4718      	bx	r3
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	7fffffff 	.word	0x7fffffff
 8003e48:	2000000c 	.word	0x2000000c
 8003e4c:	ffff0208 	.word	0xffff0208

08003e50 <__ssputs_r>:
 8003e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e52:	688e      	ldr	r6, [r1, #8]
 8003e54:	b085      	sub	sp, #20
 8003e56:	0007      	movs	r7, r0
 8003e58:	000c      	movs	r4, r1
 8003e5a:	9203      	str	r2, [sp, #12]
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	429e      	cmp	r6, r3
 8003e60:	d83c      	bhi.n	8003edc <__ssputs_r+0x8c>
 8003e62:	2390      	movs	r3, #144	; 0x90
 8003e64:	898a      	ldrh	r2, [r1, #12]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	421a      	tst	r2, r3
 8003e6a:	d034      	beq.n	8003ed6 <__ssputs_r+0x86>
 8003e6c:	2503      	movs	r5, #3
 8003e6e:	6909      	ldr	r1, [r1, #16]
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	1a5b      	subs	r3, r3, r1
 8003e74:	9302      	str	r3, [sp, #8]
 8003e76:	6963      	ldr	r3, [r4, #20]
 8003e78:	9802      	ldr	r0, [sp, #8]
 8003e7a:	435d      	muls	r5, r3
 8003e7c:	0feb      	lsrs	r3, r5, #31
 8003e7e:	195d      	adds	r5, r3, r5
 8003e80:	9b01      	ldr	r3, [sp, #4]
 8003e82:	106d      	asrs	r5, r5, #1
 8003e84:	3301      	adds	r3, #1
 8003e86:	181b      	adds	r3, r3, r0
 8003e88:	42ab      	cmp	r3, r5
 8003e8a:	d900      	bls.n	8003e8e <__ssputs_r+0x3e>
 8003e8c:	001d      	movs	r5, r3
 8003e8e:	0553      	lsls	r3, r2, #21
 8003e90:	d532      	bpl.n	8003ef8 <__ssputs_r+0xa8>
 8003e92:	0029      	movs	r1, r5
 8003e94:	0038      	movs	r0, r7
 8003e96:	f000 fb31 	bl	80044fc <_malloc_r>
 8003e9a:	1e06      	subs	r6, r0, #0
 8003e9c:	d109      	bne.n	8003eb2 <__ssputs_r+0x62>
 8003e9e:	230c      	movs	r3, #12
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	2340      	movs	r3, #64	; 0x40
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	89a2      	ldrh	r2, [r4, #12]
 8003ea8:	4240      	negs	r0, r0
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	81a3      	strh	r3, [r4, #12]
 8003eae:	b005      	add	sp, #20
 8003eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb2:	9a02      	ldr	r2, [sp, #8]
 8003eb4:	6921      	ldr	r1, [r4, #16]
 8003eb6:	f000 faba 	bl	800442e <memcpy>
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <__ssputs_r+0xc0>)
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	81a3      	strh	r3, [r4, #12]
 8003ec6:	9b02      	ldr	r3, [sp, #8]
 8003ec8:	6126      	str	r6, [r4, #16]
 8003eca:	18f6      	adds	r6, r6, r3
 8003ecc:	6026      	str	r6, [r4, #0]
 8003ece:	6165      	str	r5, [r4, #20]
 8003ed0:	9e01      	ldr	r6, [sp, #4]
 8003ed2:	1aed      	subs	r5, r5, r3
 8003ed4:	60a5      	str	r5, [r4, #8]
 8003ed6:	9b01      	ldr	r3, [sp, #4]
 8003ed8:	429e      	cmp	r6, r3
 8003eda:	d900      	bls.n	8003ede <__ssputs_r+0x8e>
 8003edc:	9e01      	ldr	r6, [sp, #4]
 8003ede:	0032      	movs	r2, r6
 8003ee0:	9903      	ldr	r1, [sp, #12]
 8003ee2:	6820      	ldr	r0, [r4, #0]
 8003ee4:	f000 faac 	bl	8004440 <memmove>
 8003ee8:	68a3      	ldr	r3, [r4, #8]
 8003eea:	2000      	movs	r0, #0
 8003eec:	1b9b      	subs	r3, r3, r6
 8003eee:	60a3      	str	r3, [r4, #8]
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	199e      	adds	r6, r3, r6
 8003ef4:	6026      	str	r6, [r4, #0]
 8003ef6:	e7da      	b.n	8003eae <__ssputs_r+0x5e>
 8003ef8:	002a      	movs	r2, r5
 8003efa:	0038      	movs	r0, r7
 8003efc:	f000 fb5c 	bl	80045b8 <_realloc_r>
 8003f00:	1e06      	subs	r6, r0, #0
 8003f02:	d1e0      	bne.n	8003ec6 <__ssputs_r+0x76>
 8003f04:	0038      	movs	r0, r7
 8003f06:	6921      	ldr	r1, [r4, #16]
 8003f08:	f000 faae 	bl	8004468 <_free_r>
 8003f0c:	e7c7      	b.n	8003e9e <__ssputs_r+0x4e>
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	fffffb7f 	.word	0xfffffb7f

08003f14 <_svfiprintf_r>:
 8003f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f16:	b0a1      	sub	sp, #132	; 0x84
 8003f18:	9003      	str	r0, [sp, #12]
 8003f1a:	001d      	movs	r5, r3
 8003f1c:	898b      	ldrh	r3, [r1, #12]
 8003f1e:	000f      	movs	r7, r1
 8003f20:	0016      	movs	r6, r2
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	d511      	bpl.n	8003f4a <_svfiprintf_r+0x36>
 8003f26:	690b      	ldr	r3, [r1, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10e      	bne.n	8003f4a <_svfiprintf_r+0x36>
 8003f2c:	2140      	movs	r1, #64	; 0x40
 8003f2e:	f000 fae5 	bl	80044fc <_malloc_r>
 8003f32:	6038      	str	r0, [r7, #0]
 8003f34:	6138      	str	r0, [r7, #16]
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d105      	bne.n	8003f46 <_svfiprintf_r+0x32>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	9a03      	ldr	r2, [sp, #12]
 8003f3e:	3801      	subs	r0, #1
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	b021      	add	sp, #132	; 0x84
 8003f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f46:	2340      	movs	r3, #64	; 0x40
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	ac08      	add	r4, sp, #32
 8003f4e:	6163      	str	r3, [r4, #20]
 8003f50:	3320      	adds	r3, #32
 8003f52:	7663      	strb	r3, [r4, #25]
 8003f54:	3310      	adds	r3, #16
 8003f56:	76a3      	strb	r3, [r4, #26]
 8003f58:	9507      	str	r5, [sp, #28]
 8003f5a:	0035      	movs	r5, r6
 8003f5c:	782b      	ldrb	r3, [r5, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <_svfiprintf_r+0x52>
 8003f62:	2b25      	cmp	r3, #37	; 0x25
 8003f64:	d147      	bne.n	8003ff6 <_svfiprintf_r+0xe2>
 8003f66:	1bab      	subs	r3, r5, r6
 8003f68:	9305      	str	r3, [sp, #20]
 8003f6a:	42b5      	cmp	r5, r6
 8003f6c:	d00c      	beq.n	8003f88 <_svfiprintf_r+0x74>
 8003f6e:	0032      	movs	r2, r6
 8003f70:	0039      	movs	r1, r7
 8003f72:	9803      	ldr	r0, [sp, #12]
 8003f74:	f7ff ff6c 	bl	8003e50 <__ssputs_r>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d100      	bne.n	8003f7e <_svfiprintf_r+0x6a>
 8003f7c:	e0ae      	b.n	80040dc <_svfiprintf_r+0x1c8>
 8003f7e:	6962      	ldr	r2, [r4, #20]
 8003f80:	9b05      	ldr	r3, [sp, #20]
 8003f82:	4694      	mov	ip, r2
 8003f84:	4463      	add	r3, ip
 8003f86:	6163      	str	r3, [r4, #20]
 8003f88:	782b      	ldrb	r3, [r5, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d100      	bne.n	8003f90 <_svfiprintf_r+0x7c>
 8003f8e:	e0a5      	b.n	80040dc <_svfiprintf_r+0x1c8>
 8003f90:	2201      	movs	r2, #1
 8003f92:	2300      	movs	r3, #0
 8003f94:	4252      	negs	r2, r2
 8003f96:	6062      	str	r2, [r4, #4]
 8003f98:	a904      	add	r1, sp, #16
 8003f9a:	3254      	adds	r2, #84	; 0x54
 8003f9c:	1852      	adds	r2, r2, r1
 8003f9e:	1c6e      	adds	r6, r5, #1
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	60e3      	str	r3, [r4, #12]
 8003fa4:	60a3      	str	r3, [r4, #8]
 8003fa6:	7013      	strb	r3, [r2, #0]
 8003fa8:	65a3      	str	r3, [r4, #88]	; 0x58
 8003faa:	2205      	movs	r2, #5
 8003fac:	7831      	ldrb	r1, [r6, #0]
 8003fae:	4854      	ldr	r0, [pc, #336]	; (8004100 <_svfiprintf_r+0x1ec>)
 8003fb0:	f000 fa32 	bl	8004418 <memchr>
 8003fb4:	1c75      	adds	r5, r6, #1
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	d11f      	bne.n	8003ffa <_svfiprintf_r+0xe6>
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	06d3      	lsls	r3, r2, #27
 8003fbe:	d504      	bpl.n	8003fca <_svfiprintf_r+0xb6>
 8003fc0:	2353      	movs	r3, #83	; 0x53
 8003fc2:	a904      	add	r1, sp, #16
 8003fc4:	185b      	adds	r3, r3, r1
 8003fc6:	2120      	movs	r1, #32
 8003fc8:	7019      	strb	r1, [r3, #0]
 8003fca:	0713      	lsls	r3, r2, #28
 8003fcc:	d504      	bpl.n	8003fd8 <_svfiprintf_r+0xc4>
 8003fce:	2353      	movs	r3, #83	; 0x53
 8003fd0:	a904      	add	r1, sp, #16
 8003fd2:	185b      	adds	r3, r3, r1
 8003fd4:	212b      	movs	r1, #43	; 0x2b
 8003fd6:	7019      	strb	r1, [r3, #0]
 8003fd8:	7833      	ldrb	r3, [r6, #0]
 8003fda:	2b2a      	cmp	r3, #42	; 0x2a
 8003fdc:	d016      	beq.n	800400c <_svfiprintf_r+0xf8>
 8003fde:	0035      	movs	r5, r6
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	200a      	movs	r0, #10
 8003fe4:	68e3      	ldr	r3, [r4, #12]
 8003fe6:	782a      	ldrb	r2, [r5, #0]
 8003fe8:	1c6e      	adds	r6, r5, #1
 8003fea:	3a30      	subs	r2, #48	; 0x30
 8003fec:	2a09      	cmp	r2, #9
 8003fee:	d94e      	bls.n	800408e <_svfiprintf_r+0x17a>
 8003ff0:	2900      	cmp	r1, #0
 8003ff2:	d111      	bne.n	8004018 <_svfiprintf_r+0x104>
 8003ff4:	e017      	b.n	8004026 <_svfiprintf_r+0x112>
 8003ff6:	3501      	adds	r5, #1
 8003ff8:	e7b0      	b.n	8003f5c <_svfiprintf_r+0x48>
 8003ffa:	4b41      	ldr	r3, [pc, #260]	; (8004100 <_svfiprintf_r+0x1ec>)
 8003ffc:	6822      	ldr	r2, [r4, #0]
 8003ffe:	1ac0      	subs	r0, r0, r3
 8004000:	2301      	movs	r3, #1
 8004002:	4083      	lsls	r3, r0
 8004004:	4313      	orrs	r3, r2
 8004006:	002e      	movs	r6, r5
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	e7ce      	b.n	8003faa <_svfiprintf_r+0x96>
 800400c:	9b07      	ldr	r3, [sp, #28]
 800400e:	1d19      	adds	r1, r3, #4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	9107      	str	r1, [sp, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	db01      	blt.n	800401c <_svfiprintf_r+0x108>
 8004018:	930b      	str	r3, [sp, #44]	; 0x2c
 800401a:	e004      	b.n	8004026 <_svfiprintf_r+0x112>
 800401c:	425b      	negs	r3, r3
 800401e:	60e3      	str	r3, [r4, #12]
 8004020:	2302      	movs	r3, #2
 8004022:	4313      	orrs	r3, r2
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	782b      	ldrb	r3, [r5, #0]
 8004028:	2b2e      	cmp	r3, #46	; 0x2e
 800402a:	d10a      	bne.n	8004042 <_svfiprintf_r+0x12e>
 800402c:	786b      	ldrb	r3, [r5, #1]
 800402e:	2b2a      	cmp	r3, #42	; 0x2a
 8004030:	d135      	bne.n	800409e <_svfiprintf_r+0x18a>
 8004032:	9b07      	ldr	r3, [sp, #28]
 8004034:	3502      	adds	r5, #2
 8004036:	1d1a      	adds	r2, r3, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	9207      	str	r2, [sp, #28]
 800403c:	2b00      	cmp	r3, #0
 800403e:	db2b      	blt.n	8004098 <_svfiprintf_r+0x184>
 8004040:	9309      	str	r3, [sp, #36]	; 0x24
 8004042:	4e30      	ldr	r6, [pc, #192]	; (8004104 <_svfiprintf_r+0x1f0>)
 8004044:	2203      	movs	r2, #3
 8004046:	0030      	movs	r0, r6
 8004048:	7829      	ldrb	r1, [r5, #0]
 800404a:	f000 f9e5 	bl	8004418 <memchr>
 800404e:	2800      	cmp	r0, #0
 8004050:	d006      	beq.n	8004060 <_svfiprintf_r+0x14c>
 8004052:	2340      	movs	r3, #64	; 0x40
 8004054:	1b80      	subs	r0, r0, r6
 8004056:	4083      	lsls	r3, r0
 8004058:	6822      	ldr	r2, [r4, #0]
 800405a:	3501      	adds	r5, #1
 800405c:	4313      	orrs	r3, r2
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	7829      	ldrb	r1, [r5, #0]
 8004062:	2206      	movs	r2, #6
 8004064:	4828      	ldr	r0, [pc, #160]	; (8004108 <_svfiprintf_r+0x1f4>)
 8004066:	1c6e      	adds	r6, r5, #1
 8004068:	7621      	strb	r1, [r4, #24]
 800406a:	f000 f9d5 	bl	8004418 <memchr>
 800406e:	2800      	cmp	r0, #0
 8004070:	d03c      	beq.n	80040ec <_svfiprintf_r+0x1d8>
 8004072:	4b26      	ldr	r3, [pc, #152]	; (800410c <_svfiprintf_r+0x1f8>)
 8004074:	2b00      	cmp	r3, #0
 8004076:	d125      	bne.n	80040c4 <_svfiprintf_r+0x1b0>
 8004078:	2207      	movs	r2, #7
 800407a:	9b07      	ldr	r3, [sp, #28]
 800407c:	3307      	adds	r3, #7
 800407e:	4393      	bics	r3, r2
 8004080:	3308      	adds	r3, #8
 8004082:	9307      	str	r3, [sp, #28]
 8004084:	6963      	ldr	r3, [r4, #20]
 8004086:	9a04      	ldr	r2, [sp, #16]
 8004088:	189b      	adds	r3, r3, r2
 800408a:	6163      	str	r3, [r4, #20]
 800408c:	e765      	b.n	8003f5a <_svfiprintf_r+0x46>
 800408e:	4343      	muls	r3, r0
 8004090:	0035      	movs	r5, r6
 8004092:	2101      	movs	r1, #1
 8004094:	189b      	adds	r3, r3, r2
 8004096:	e7a6      	b.n	8003fe6 <_svfiprintf_r+0xd2>
 8004098:	2301      	movs	r3, #1
 800409a:	425b      	negs	r3, r3
 800409c:	e7d0      	b.n	8004040 <_svfiprintf_r+0x12c>
 800409e:	2300      	movs	r3, #0
 80040a0:	200a      	movs	r0, #10
 80040a2:	001a      	movs	r2, r3
 80040a4:	3501      	adds	r5, #1
 80040a6:	6063      	str	r3, [r4, #4]
 80040a8:	7829      	ldrb	r1, [r5, #0]
 80040aa:	1c6e      	adds	r6, r5, #1
 80040ac:	3930      	subs	r1, #48	; 0x30
 80040ae:	2909      	cmp	r1, #9
 80040b0:	d903      	bls.n	80040ba <_svfiprintf_r+0x1a6>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0c5      	beq.n	8004042 <_svfiprintf_r+0x12e>
 80040b6:	9209      	str	r2, [sp, #36]	; 0x24
 80040b8:	e7c3      	b.n	8004042 <_svfiprintf_r+0x12e>
 80040ba:	4342      	muls	r2, r0
 80040bc:	0035      	movs	r5, r6
 80040be:	2301      	movs	r3, #1
 80040c0:	1852      	adds	r2, r2, r1
 80040c2:	e7f1      	b.n	80040a8 <_svfiprintf_r+0x194>
 80040c4:	ab07      	add	r3, sp, #28
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	003a      	movs	r2, r7
 80040ca:	0021      	movs	r1, r4
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <_svfiprintf_r+0x1fc>)
 80040ce:	9803      	ldr	r0, [sp, #12]
 80040d0:	e000      	b.n	80040d4 <_svfiprintf_r+0x1c0>
 80040d2:	bf00      	nop
 80040d4:	9004      	str	r0, [sp, #16]
 80040d6:	9b04      	ldr	r3, [sp, #16]
 80040d8:	3301      	adds	r3, #1
 80040da:	d1d3      	bne.n	8004084 <_svfiprintf_r+0x170>
 80040dc:	89bb      	ldrh	r3, [r7, #12]
 80040de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80040e0:	065b      	lsls	r3, r3, #25
 80040e2:	d400      	bmi.n	80040e6 <_svfiprintf_r+0x1d2>
 80040e4:	e72d      	b.n	8003f42 <_svfiprintf_r+0x2e>
 80040e6:	2001      	movs	r0, #1
 80040e8:	4240      	negs	r0, r0
 80040ea:	e72a      	b.n	8003f42 <_svfiprintf_r+0x2e>
 80040ec:	ab07      	add	r3, sp, #28
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	003a      	movs	r2, r7
 80040f2:	0021      	movs	r1, r4
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <_svfiprintf_r+0x1fc>)
 80040f6:	9803      	ldr	r0, [sp, #12]
 80040f8:	f000 f87c 	bl	80041f4 <_printf_i>
 80040fc:	e7ea      	b.n	80040d4 <_svfiprintf_r+0x1c0>
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	08004758 	.word	0x08004758
 8004104:	0800475e 	.word	0x0800475e
 8004108:	08004762 	.word	0x08004762
 800410c:	00000000 	.word	0x00000000
 8004110:	08003e51 	.word	0x08003e51

08004114 <_printf_common>:
 8004114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004116:	0015      	movs	r5, r2
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	688a      	ldr	r2, [r1, #8]
 800411c:	690b      	ldr	r3, [r1, #16]
 800411e:	000c      	movs	r4, r1
 8004120:	9000      	str	r0, [sp, #0]
 8004122:	4293      	cmp	r3, r2
 8004124:	da00      	bge.n	8004128 <_printf_common+0x14>
 8004126:	0013      	movs	r3, r2
 8004128:	0022      	movs	r2, r4
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	3243      	adds	r2, #67	; 0x43
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	2a00      	cmp	r2, #0
 8004132:	d001      	beq.n	8004138 <_printf_common+0x24>
 8004134:	3301      	adds	r3, #1
 8004136:	602b      	str	r3, [r5, #0]
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	069b      	lsls	r3, r3, #26
 800413c:	d502      	bpl.n	8004144 <_printf_common+0x30>
 800413e:	682b      	ldr	r3, [r5, #0]
 8004140:	3302      	adds	r3, #2
 8004142:	602b      	str	r3, [r5, #0]
 8004144:	6822      	ldr	r2, [r4, #0]
 8004146:	2306      	movs	r3, #6
 8004148:	0017      	movs	r7, r2
 800414a:	401f      	ands	r7, r3
 800414c:	421a      	tst	r2, r3
 800414e:	d027      	beq.n	80041a0 <_printf_common+0x8c>
 8004150:	0023      	movs	r3, r4
 8004152:	3343      	adds	r3, #67	; 0x43
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	1e5a      	subs	r2, r3, #1
 8004158:	4193      	sbcs	r3, r2
 800415a:	6822      	ldr	r2, [r4, #0]
 800415c:	0692      	lsls	r2, r2, #26
 800415e:	d430      	bmi.n	80041c2 <_printf_common+0xae>
 8004160:	0022      	movs	r2, r4
 8004162:	9901      	ldr	r1, [sp, #4]
 8004164:	9800      	ldr	r0, [sp, #0]
 8004166:	9e08      	ldr	r6, [sp, #32]
 8004168:	3243      	adds	r2, #67	; 0x43
 800416a:	47b0      	blx	r6
 800416c:	1c43      	adds	r3, r0, #1
 800416e:	d025      	beq.n	80041bc <_printf_common+0xa8>
 8004170:	2306      	movs	r3, #6
 8004172:	6820      	ldr	r0, [r4, #0]
 8004174:	682a      	ldr	r2, [r5, #0]
 8004176:	68e1      	ldr	r1, [r4, #12]
 8004178:	2500      	movs	r5, #0
 800417a:	4003      	ands	r3, r0
 800417c:	2b04      	cmp	r3, #4
 800417e:	d103      	bne.n	8004188 <_printf_common+0x74>
 8004180:	1a8d      	subs	r5, r1, r2
 8004182:	43eb      	mvns	r3, r5
 8004184:	17db      	asrs	r3, r3, #31
 8004186:	401d      	ands	r5, r3
 8004188:	68a3      	ldr	r3, [r4, #8]
 800418a:	6922      	ldr	r2, [r4, #16]
 800418c:	4293      	cmp	r3, r2
 800418e:	dd01      	ble.n	8004194 <_printf_common+0x80>
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	18ed      	adds	r5, r5, r3
 8004194:	2700      	movs	r7, #0
 8004196:	42bd      	cmp	r5, r7
 8004198:	d120      	bne.n	80041dc <_printf_common+0xc8>
 800419a:	2000      	movs	r0, #0
 800419c:	e010      	b.n	80041c0 <_printf_common+0xac>
 800419e:	3701      	adds	r7, #1
 80041a0:	68e3      	ldr	r3, [r4, #12]
 80041a2:	682a      	ldr	r2, [r5, #0]
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	42bb      	cmp	r3, r7
 80041a8:	ddd2      	ble.n	8004150 <_printf_common+0x3c>
 80041aa:	0022      	movs	r2, r4
 80041ac:	2301      	movs	r3, #1
 80041ae:	9901      	ldr	r1, [sp, #4]
 80041b0:	9800      	ldr	r0, [sp, #0]
 80041b2:	9e08      	ldr	r6, [sp, #32]
 80041b4:	3219      	adds	r2, #25
 80041b6:	47b0      	blx	r6
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d1f0      	bne.n	800419e <_printf_common+0x8a>
 80041bc:	2001      	movs	r0, #1
 80041be:	4240      	negs	r0, r0
 80041c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041c2:	2030      	movs	r0, #48	; 0x30
 80041c4:	18e1      	adds	r1, r4, r3
 80041c6:	3143      	adds	r1, #67	; 0x43
 80041c8:	7008      	strb	r0, [r1, #0]
 80041ca:	0021      	movs	r1, r4
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	3145      	adds	r1, #69	; 0x45
 80041d0:	7809      	ldrb	r1, [r1, #0]
 80041d2:	18a2      	adds	r2, r4, r2
 80041d4:	3243      	adds	r2, #67	; 0x43
 80041d6:	3302      	adds	r3, #2
 80041d8:	7011      	strb	r1, [r2, #0]
 80041da:	e7c1      	b.n	8004160 <_printf_common+0x4c>
 80041dc:	0022      	movs	r2, r4
 80041de:	2301      	movs	r3, #1
 80041e0:	9901      	ldr	r1, [sp, #4]
 80041e2:	9800      	ldr	r0, [sp, #0]
 80041e4:	9e08      	ldr	r6, [sp, #32]
 80041e6:	321a      	adds	r2, #26
 80041e8:	47b0      	blx	r6
 80041ea:	1c43      	adds	r3, r0, #1
 80041ec:	d0e6      	beq.n	80041bc <_printf_common+0xa8>
 80041ee:	3701      	adds	r7, #1
 80041f0:	e7d1      	b.n	8004196 <_printf_common+0x82>
	...

080041f4 <_printf_i>:
 80041f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f6:	b08b      	sub	sp, #44	; 0x2c
 80041f8:	9206      	str	r2, [sp, #24]
 80041fa:	000a      	movs	r2, r1
 80041fc:	3243      	adds	r2, #67	; 0x43
 80041fe:	9307      	str	r3, [sp, #28]
 8004200:	9005      	str	r0, [sp, #20]
 8004202:	9204      	str	r2, [sp, #16]
 8004204:	7e0a      	ldrb	r2, [r1, #24]
 8004206:	000c      	movs	r4, r1
 8004208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800420a:	2a78      	cmp	r2, #120	; 0x78
 800420c:	d806      	bhi.n	800421c <_printf_i+0x28>
 800420e:	2a62      	cmp	r2, #98	; 0x62
 8004210:	d808      	bhi.n	8004224 <_printf_i+0x30>
 8004212:	2a00      	cmp	r2, #0
 8004214:	d100      	bne.n	8004218 <_printf_i+0x24>
 8004216:	e0c0      	b.n	800439a <_printf_i+0x1a6>
 8004218:	2a58      	cmp	r2, #88	; 0x58
 800421a:	d052      	beq.n	80042c2 <_printf_i+0xce>
 800421c:	0026      	movs	r6, r4
 800421e:	3642      	adds	r6, #66	; 0x42
 8004220:	7032      	strb	r2, [r6, #0]
 8004222:	e022      	b.n	800426a <_printf_i+0x76>
 8004224:	0010      	movs	r0, r2
 8004226:	3863      	subs	r0, #99	; 0x63
 8004228:	2815      	cmp	r0, #21
 800422a:	d8f7      	bhi.n	800421c <_printf_i+0x28>
 800422c:	f7fb ff72 	bl	8000114 <__gnu_thumb1_case_shi>
 8004230:	001f0016 	.word	0x001f0016
 8004234:	fff6fff6 	.word	0xfff6fff6
 8004238:	fff6fff6 	.word	0xfff6fff6
 800423c:	fff6001f 	.word	0xfff6001f
 8004240:	fff6fff6 	.word	0xfff6fff6
 8004244:	00a8fff6 	.word	0x00a8fff6
 8004248:	009a0036 	.word	0x009a0036
 800424c:	fff6fff6 	.word	0xfff6fff6
 8004250:	fff600b9 	.word	0xfff600b9
 8004254:	fff60036 	.word	0xfff60036
 8004258:	009efff6 	.word	0x009efff6
 800425c:	0026      	movs	r6, r4
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	3642      	adds	r6, #66	; 0x42
 8004262:	1d11      	adds	r1, r2, #4
 8004264:	6019      	str	r1, [r3, #0]
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	7033      	strb	r3, [r6, #0]
 800426a:	2301      	movs	r3, #1
 800426c:	e0a7      	b.n	80043be <_printf_i+0x1ca>
 800426e:	6808      	ldr	r0, [r1, #0]
 8004270:	6819      	ldr	r1, [r3, #0]
 8004272:	1d0a      	adds	r2, r1, #4
 8004274:	0605      	lsls	r5, r0, #24
 8004276:	d50b      	bpl.n	8004290 <_printf_i+0x9c>
 8004278:	680d      	ldr	r5, [r1, #0]
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	2d00      	cmp	r5, #0
 800427e:	da03      	bge.n	8004288 <_printf_i+0x94>
 8004280:	232d      	movs	r3, #45	; 0x2d
 8004282:	9a04      	ldr	r2, [sp, #16]
 8004284:	426d      	negs	r5, r5
 8004286:	7013      	strb	r3, [r2, #0]
 8004288:	4b61      	ldr	r3, [pc, #388]	; (8004410 <_printf_i+0x21c>)
 800428a:	270a      	movs	r7, #10
 800428c:	9303      	str	r3, [sp, #12]
 800428e:	e032      	b.n	80042f6 <_printf_i+0x102>
 8004290:	680d      	ldr	r5, [r1, #0]
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	0641      	lsls	r1, r0, #25
 8004296:	d5f1      	bpl.n	800427c <_printf_i+0x88>
 8004298:	b22d      	sxth	r5, r5
 800429a:	e7ef      	b.n	800427c <_printf_i+0x88>
 800429c:	680d      	ldr	r5, [r1, #0]
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	1d08      	adds	r0, r1, #4
 80042a2:	6018      	str	r0, [r3, #0]
 80042a4:	062e      	lsls	r6, r5, #24
 80042a6:	d501      	bpl.n	80042ac <_printf_i+0xb8>
 80042a8:	680d      	ldr	r5, [r1, #0]
 80042aa:	e003      	b.n	80042b4 <_printf_i+0xc0>
 80042ac:	066d      	lsls	r5, r5, #25
 80042ae:	d5fb      	bpl.n	80042a8 <_printf_i+0xb4>
 80042b0:	680d      	ldr	r5, [r1, #0]
 80042b2:	b2ad      	uxth	r5, r5
 80042b4:	4b56      	ldr	r3, [pc, #344]	; (8004410 <_printf_i+0x21c>)
 80042b6:	270a      	movs	r7, #10
 80042b8:	9303      	str	r3, [sp, #12]
 80042ba:	2a6f      	cmp	r2, #111	; 0x6f
 80042bc:	d117      	bne.n	80042ee <_printf_i+0xfa>
 80042be:	2708      	movs	r7, #8
 80042c0:	e015      	b.n	80042ee <_printf_i+0xfa>
 80042c2:	3145      	adds	r1, #69	; 0x45
 80042c4:	700a      	strb	r2, [r1, #0]
 80042c6:	4a52      	ldr	r2, [pc, #328]	; (8004410 <_printf_i+0x21c>)
 80042c8:	9203      	str	r2, [sp, #12]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	6821      	ldr	r1, [r4, #0]
 80042ce:	ca20      	ldmia	r2!, {r5}
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	0608      	lsls	r0, r1, #24
 80042d4:	d550      	bpl.n	8004378 <_printf_i+0x184>
 80042d6:	07cb      	lsls	r3, r1, #31
 80042d8:	d502      	bpl.n	80042e0 <_printf_i+0xec>
 80042da:	2320      	movs	r3, #32
 80042dc:	4319      	orrs	r1, r3
 80042de:	6021      	str	r1, [r4, #0]
 80042e0:	2710      	movs	r7, #16
 80042e2:	2d00      	cmp	r5, #0
 80042e4:	d103      	bne.n	80042ee <_printf_i+0xfa>
 80042e6:	2320      	movs	r3, #32
 80042e8:	6822      	ldr	r2, [r4, #0]
 80042ea:	439a      	bics	r2, r3
 80042ec:	6022      	str	r2, [r4, #0]
 80042ee:	0023      	movs	r3, r4
 80042f0:	2200      	movs	r2, #0
 80042f2:	3343      	adds	r3, #67	; 0x43
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	6863      	ldr	r3, [r4, #4]
 80042f8:	60a3      	str	r3, [r4, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	db03      	blt.n	8004306 <_printf_i+0x112>
 80042fe:	2204      	movs	r2, #4
 8004300:	6821      	ldr	r1, [r4, #0]
 8004302:	4391      	bics	r1, r2
 8004304:	6021      	str	r1, [r4, #0]
 8004306:	2d00      	cmp	r5, #0
 8004308:	d102      	bne.n	8004310 <_printf_i+0x11c>
 800430a:	9e04      	ldr	r6, [sp, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <_printf_i+0x136>
 8004310:	9e04      	ldr	r6, [sp, #16]
 8004312:	0028      	movs	r0, r5
 8004314:	0039      	movs	r1, r7
 8004316:	f7fb ff8d 	bl	8000234 <__aeabi_uidivmod>
 800431a:	9b03      	ldr	r3, [sp, #12]
 800431c:	3e01      	subs	r6, #1
 800431e:	5c5b      	ldrb	r3, [r3, r1]
 8004320:	7033      	strb	r3, [r6, #0]
 8004322:	002b      	movs	r3, r5
 8004324:	0005      	movs	r5, r0
 8004326:	429f      	cmp	r7, r3
 8004328:	d9f3      	bls.n	8004312 <_printf_i+0x11e>
 800432a:	2f08      	cmp	r7, #8
 800432c:	d109      	bne.n	8004342 <_printf_i+0x14e>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	07db      	lsls	r3, r3, #31
 8004332:	d506      	bpl.n	8004342 <_printf_i+0x14e>
 8004334:	6863      	ldr	r3, [r4, #4]
 8004336:	6922      	ldr	r2, [r4, #16]
 8004338:	4293      	cmp	r3, r2
 800433a:	dc02      	bgt.n	8004342 <_printf_i+0x14e>
 800433c:	2330      	movs	r3, #48	; 0x30
 800433e:	3e01      	subs	r6, #1
 8004340:	7033      	strb	r3, [r6, #0]
 8004342:	9b04      	ldr	r3, [sp, #16]
 8004344:	1b9b      	subs	r3, r3, r6
 8004346:	6123      	str	r3, [r4, #16]
 8004348:	9b07      	ldr	r3, [sp, #28]
 800434a:	0021      	movs	r1, r4
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	9805      	ldr	r0, [sp, #20]
 8004350:	9b06      	ldr	r3, [sp, #24]
 8004352:	aa09      	add	r2, sp, #36	; 0x24
 8004354:	f7ff fede 	bl	8004114 <_printf_common>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d135      	bne.n	80043c8 <_printf_i+0x1d4>
 800435c:	2001      	movs	r0, #1
 800435e:	4240      	negs	r0, r0
 8004360:	b00b      	add	sp, #44	; 0x2c
 8004362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004364:	2220      	movs	r2, #32
 8004366:	6809      	ldr	r1, [r1, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	6022      	str	r2, [r4, #0]
 800436c:	0022      	movs	r2, r4
 800436e:	2178      	movs	r1, #120	; 0x78
 8004370:	3245      	adds	r2, #69	; 0x45
 8004372:	7011      	strb	r1, [r2, #0]
 8004374:	4a27      	ldr	r2, [pc, #156]	; (8004414 <_printf_i+0x220>)
 8004376:	e7a7      	b.n	80042c8 <_printf_i+0xd4>
 8004378:	0648      	lsls	r0, r1, #25
 800437a:	d5ac      	bpl.n	80042d6 <_printf_i+0xe2>
 800437c:	b2ad      	uxth	r5, r5
 800437e:	e7aa      	b.n	80042d6 <_printf_i+0xe2>
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	680d      	ldr	r5, [r1, #0]
 8004384:	1d10      	adds	r0, r2, #4
 8004386:	6949      	ldr	r1, [r1, #20]
 8004388:	6018      	str	r0, [r3, #0]
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	062e      	lsls	r6, r5, #24
 800438e:	d501      	bpl.n	8004394 <_printf_i+0x1a0>
 8004390:	6019      	str	r1, [r3, #0]
 8004392:	e002      	b.n	800439a <_printf_i+0x1a6>
 8004394:	066d      	lsls	r5, r5, #25
 8004396:	d5fb      	bpl.n	8004390 <_printf_i+0x19c>
 8004398:	8019      	strh	r1, [r3, #0]
 800439a:	2300      	movs	r3, #0
 800439c:	9e04      	ldr	r6, [sp, #16]
 800439e:	6123      	str	r3, [r4, #16]
 80043a0:	e7d2      	b.n	8004348 <_printf_i+0x154>
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	1d11      	adds	r1, r2, #4
 80043a6:	6019      	str	r1, [r3, #0]
 80043a8:	6816      	ldr	r6, [r2, #0]
 80043aa:	2100      	movs	r1, #0
 80043ac:	0030      	movs	r0, r6
 80043ae:	6862      	ldr	r2, [r4, #4]
 80043b0:	f000 f832 	bl	8004418 <memchr>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d001      	beq.n	80043bc <_printf_i+0x1c8>
 80043b8:	1b80      	subs	r0, r0, r6
 80043ba:	6060      	str	r0, [r4, #4]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	6123      	str	r3, [r4, #16]
 80043c0:	2300      	movs	r3, #0
 80043c2:	9a04      	ldr	r2, [sp, #16]
 80043c4:	7013      	strb	r3, [r2, #0]
 80043c6:	e7bf      	b.n	8004348 <_printf_i+0x154>
 80043c8:	6923      	ldr	r3, [r4, #16]
 80043ca:	0032      	movs	r2, r6
 80043cc:	9906      	ldr	r1, [sp, #24]
 80043ce:	9805      	ldr	r0, [sp, #20]
 80043d0:	9d07      	ldr	r5, [sp, #28]
 80043d2:	47a8      	blx	r5
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d0c1      	beq.n	800435c <_printf_i+0x168>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	079b      	lsls	r3, r3, #30
 80043dc:	d415      	bmi.n	800440a <_printf_i+0x216>
 80043de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e0:	68e0      	ldr	r0, [r4, #12]
 80043e2:	4298      	cmp	r0, r3
 80043e4:	dabc      	bge.n	8004360 <_printf_i+0x16c>
 80043e6:	0018      	movs	r0, r3
 80043e8:	e7ba      	b.n	8004360 <_printf_i+0x16c>
 80043ea:	0022      	movs	r2, r4
 80043ec:	2301      	movs	r3, #1
 80043ee:	9906      	ldr	r1, [sp, #24]
 80043f0:	9805      	ldr	r0, [sp, #20]
 80043f2:	9e07      	ldr	r6, [sp, #28]
 80043f4:	3219      	adds	r2, #25
 80043f6:	47b0      	blx	r6
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d0af      	beq.n	800435c <_printf_i+0x168>
 80043fc:	3501      	adds	r5, #1
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	42ab      	cmp	r3, r5
 8004406:	dcf0      	bgt.n	80043ea <_printf_i+0x1f6>
 8004408:	e7e9      	b.n	80043de <_printf_i+0x1ea>
 800440a:	2500      	movs	r5, #0
 800440c:	e7f7      	b.n	80043fe <_printf_i+0x20a>
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	08004769 	.word	0x08004769
 8004414:	0800477a 	.word	0x0800477a

08004418 <memchr>:
 8004418:	b2c9      	uxtb	r1, r1
 800441a:	1882      	adds	r2, r0, r2
 800441c:	4290      	cmp	r0, r2
 800441e:	d101      	bne.n	8004424 <memchr+0xc>
 8004420:	2000      	movs	r0, #0
 8004422:	4770      	bx	lr
 8004424:	7803      	ldrb	r3, [r0, #0]
 8004426:	428b      	cmp	r3, r1
 8004428:	d0fb      	beq.n	8004422 <memchr+0xa>
 800442a:	3001      	adds	r0, #1
 800442c:	e7f6      	b.n	800441c <memchr+0x4>

0800442e <memcpy>:
 800442e:	2300      	movs	r3, #0
 8004430:	b510      	push	{r4, lr}
 8004432:	429a      	cmp	r2, r3
 8004434:	d100      	bne.n	8004438 <memcpy+0xa>
 8004436:	bd10      	pop	{r4, pc}
 8004438:	5ccc      	ldrb	r4, [r1, r3]
 800443a:	54c4      	strb	r4, [r0, r3]
 800443c:	3301      	adds	r3, #1
 800443e:	e7f8      	b.n	8004432 <memcpy+0x4>

08004440 <memmove>:
 8004440:	b510      	push	{r4, lr}
 8004442:	4288      	cmp	r0, r1
 8004444:	d902      	bls.n	800444c <memmove+0xc>
 8004446:	188b      	adds	r3, r1, r2
 8004448:	4298      	cmp	r0, r3
 800444a:	d303      	bcc.n	8004454 <memmove+0x14>
 800444c:	2300      	movs	r3, #0
 800444e:	e007      	b.n	8004460 <memmove+0x20>
 8004450:	5c8b      	ldrb	r3, [r1, r2]
 8004452:	5483      	strb	r3, [r0, r2]
 8004454:	3a01      	subs	r2, #1
 8004456:	d2fb      	bcs.n	8004450 <memmove+0x10>
 8004458:	bd10      	pop	{r4, pc}
 800445a:	5ccc      	ldrb	r4, [r1, r3]
 800445c:	54c4      	strb	r4, [r0, r3]
 800445e:	3301      	adds	r3, #1
 8004460:	429a      	cmp	r2, r3
 8004462:	d1fa      	bne.n	800445a <memmove+0x1a>
 8004464:	e7f8      	b.n	8004458 <memmove+0x18>
	...

08004468 <_free_r>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	0005      	movs	r5, r0
 800446c:	2900      	cmp	r1, #0
 800446e:	d010      	beq.n	8004492 <_free_r+0x2a>
 8004470:	1f0c      	subs	r4, r1, #4
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	da00      	bge.n	800447a <_free_r+0x12>
 8004478:	18e4      	adds	r4, r4, r3
 800447a:	0028      	movs	r0, r5
 800447c:	f000 f8d4 	bl	8004628 <__malloc_lock>
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <_free_r+0x90>)
 8004482:	6813      	ldr	r3, [r2, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <_free_r+0x2c>
 8004488:	6063      	str	r3, [r4, #4]
 800448a:	6014      	str	r4, [r2, #0]
 800448c:	0028      	movs	r0, r5
 800448e:	f000 f8d3 	bl	8004638 <__malloc_unlock>
 8004492:	bd70      	pop	{r4, r5, r6, pc}
 8004494:	42a3      	cmp	r3, r4
 8004496:	d908      	bls.n	80044aa <_free_r+0x42>
 8004498:	6821      	ldr	r1, [r4, #0]
 800449a:	1860      	adds	r0, r4, r1
 800449c:	4283      	cmp	r3, r0
 800449e:	d1f3      	bne.n	8004488 <_free_r+0x20>
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	1841      	adds	r1, r0, r1
 80044a6:	6021      	str	r1, [r4, #0]
 80044a8:	e7ee      	b.n	8004488 <_free_r+0x20>
 80044aa:	001a      	movs	r2, r3
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <_free_r+0x4e>
 80044b2:	42a3      	cmp	r3, r4
 80044b4:	d9f9      	bls.n	80044aa <_free_r+0x42>
 80044b6:	6811      	ldr	r1, [r2, #0]
 80044b8:	1850      	adds	r0, r2, r1
 80044ba:	42a0      	cmp	r0, r4
 80044bc:	d10b      	bne.n	80044d6 <_free_r+0x6e>
 80044be:	6820      	ldr	r0, [r4, #0]
 80044c0:	1809      	adds	r1, r1, r0
 80044c2:	1850      	adds	r0, r2, r1
 80044c4:	6011      	str	r1, [r2, #0]
 80044c6:	4283      	cmp	r3, r0
 80044c8:	d1e0      	bne.n	800448c <_free_r+0x24>
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	1841      	adds	r1, r0, r1
 80044d0:	6011      	str	r1, [r2, #0]
 80044d2:	6053      	str	r3, [r2, #4]
 80044d4:	e7da      	b.n	800448c <_free_r+0x24>
 80044d6:	42a0      	cmp	r0, r4
 80044d8:	d902      	bls.n	80044e0 <_free_r+0x78>
 80044da:	230c      	movs	r3, #12
 80044dc:	602b      	str	r3, [r5, #0]
 80044de:	e7d5      	b.n	800448c <_free_r+0x24>
 80044e0:	6821      	ldr	r1, [r4, #0]
 80044e2:	1860      	adds	r0, r4, r1
 80044e4:	4283      	cmp	r3, r0
 80044e6:	d103      	bne.n	80044f0 <_free_r+0x88>
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	1841      	adds	r1, r0, r1
 80044ee:	6021      	str	r1, [r4, #0]
 80044f0:	6063      	str	r3, [r4, #4]
 80044f2:	6054      	str	r4, [r2, #4]
 80044f4:	e7ca      	b.n	800448c <_free_r+0x24>
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	20000090 	.word	0x20000090

080044fc <_malloc_r>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	2303      	movs	r3, #3
 8004500:	1ccd      	adds	r5, r1, #3
 8004502:	439d      	bics	r5, r3
 8004504:	3508      	adds	r5, #8
 8004506:	0006      	movs	r6, r0
 8004508:	2d0c      	cmp	r5, #12
 800450a:	d21f      	bcs.n	800454c <_malloc_r+0x50>
 800450c:	250c      	movs	r5, #12
 800450e:	42a9      	cmp	r1, r5
 8004510:	d81e      	bhi.n	8004550 <_malloc_r+0x54>
 8004512:	0030      	movs	r0, r6
 8004514:	f000 f888 	bl	8004628 <__malloc_lock>
 8004518:	4925      	ldr	r1, [pc, #148]	; (80045b0 <_malloc_r+0xb4>)
 800451a:	680a      	ldr	r2, [r1, #0]
 800451c:	0014      	movs	r4, r2
 800451e:	2c00      	cmp	r4, #0
 8004520:	d11a      	bne.n	8004558 <_malloc_r+0x5c>
 8004522:	4f24      	ldr	r7, [pc, #144]	; (80045b4 <_malloc_r+0xb8>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <_malloc_r+0x38>
 800452a:	0021      	movs	r1, r4
 800452c:	0030      	movs	r0, r6
 800452e:	f000 f869 	bl	8004604 <_sbrk_r>
 8004532:	6038      	str	r0, [r7, #0]
 8004534:	0029      	movs	r1, r5
 8004536:	0030      	movs	r0, r6
 8004538:	f000 f864 	bl	8004604 <_sbrk_r>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d12b      	bne.n	8004598 <_malloc_r+0x9c>
 8004540:	230c      	movs	r3, #12
 8004542:	0030      	movs	r0, r6
 8004544:	6033      	str	r3, [r6, #0]
 8004546:	f000 f877 	bl	8004638 <__malloc_unlock>
 800454a:	e003      	b.n	8004554 <_malloc_r+0x58>
 800454c:	2d00      	cmp	r5, #0
 800454e:	dade      	bge.n	800450e <_malloc_r+0x12>
 8004550:	230c      	movs	r3, #12
 8004552:	6033      	str	r3, [r6, #0]
 8004554:	2000      	movs	r0, #0
 8004556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	1b5b      	subs	r3, r3, r5
 800455c:	d419      	bmi.n	8004592 <_malloc_r+0x96>
 800455e:	2b0b      	cmp	r3, #11
 8004560:	d903      	bls.n	800456a <_malloc_r+0x6e>
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	18e4      	adds	r4, r4, r3
 8004566:	6025      	str	r5, [r4, #0]
 8004568:	e003      	b.n	8004572 <_malloc_r+0x76>
 800456a:	6863      	ldr	r3, [r4, #4]
 800456c:	42a2      	cmp	r2, r4
 800456e:	d10e      	bne.n	800458e <_malloc_r+0x92>
 8004570:	600b      	str	r3, [r1, #0]
 8004572:	0030      	movs	r0, r6
 8004574:	f000 f860 	bl	8004638 <__malloc_unlock>
 8004578:	0020      	movs	r0, r4
 800457a:	2207      	movs	r2, #7
 800457c:	300b      	adds	r0, #11
 800457e:	1d23      	adds	r3, r4, #4
 8004580:	4390      	bics	r0, r2
 8004582:	1ac2      	subs	r2, r0, r3
 8004584:	4298      	cmp	r0, r3
 8004586:	d0e6      	beq.n	8004556 <_malloc_r+0x5a>
 8004588:	1a1b      	subs	r3, r3, r0
 800458a:	50a3      	str	r3, [r4, r2]
 800458c:	e7e3      	b.n	8004556 <_malloc_r+0x5a>
 800458e:	6053      	str	r3, [r2, #4]
 8004590:	e7ef      	b.n	8004572 <_malloc_r+0x76>
 8004592:	0022      	movs	r2, r4
 8004594:	6864      	ldr	r4, [r4, #4]
 8004596:	e7c2      	b.n	800451e <_malloc_r+0x22>
 8004598:	2303      	movs	r3, #3
 800459a:	1cc4      	adds	r4, r0, #3
 800459c:	439c      	bics	r4, r3
 800459e:	42a0      	cmp	r0, r4
 80045a0:	d0e1      	beq.n	8004566 <_malloc_r+0x6a>
 80045a2:	1a21      	subs	r1, r4, r0
 80045a4:	0030      	movs	r0, r6
 80045a6:	f000 f82d 	bl	8004604 <_sbrk_r>
 80045aa:	1c43      	adds	r3, r0, #1
 80045ac:	d1db      	bne.n	8004566 <_malloc_r+0x6a>
 80045ae:	e7c7      	b.n	8004540 <_malloc_r+0x44>
 80045b0:	20000090 	.word	0x20000090
 80045b4:	20000094 	.word	0x20000094

080045b8 <_realloc_r>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	0007      	movs	r7, r0
 80045bc:	000d      	movs	r5, r1
 80045be:	0016      	movs	r6, r2
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d105      	bne.n	80045d0 <_realloc_r+0x18>
 80045c4:	0011      	movs	r1, r2
 80045c6:	f7ff ff99 	bl	80044fc <_malloc_r>
 80045ca:	0004      	movs	r4, r0
 80045cc:	0020      	movs	r0, r4
 80045ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d0:	2a00      	cmp	r2, #0
 80045d2:	d103      	bne.n	80045dc <_realloc_r+0x24>
 80045d4:	f7ff ff48 	bl	8004468 <_free_r>
 80045d8:	0034      	movs	r4, r6
 80045da:	e7f7      	b.n	80045cc <_realloc_r+0x14>
 80045dc:	f000 f834 	bl	8004648 <_malloc_usable_size_r>
 80045e0:	002c      	movs	r4, r5
 80045e2:	42b0      	cmp	r0, r6
 80045e4:	d2f2      	bcs.n	80045cc <_realloc_r+0x14>
 80045e6:	0031      	movs	r1, r6
 80045e8:	0038      	movs	r0, r7
 80045ea:	f7ff ff87 	bl	80044fc <_malloc_r>
 80045ee:	1e04      	subs	r4, r0, #0
 80045f0:	d0ec      	beq.n	80045cc <_realloc_r+0x14>
 80045f2:	0029      	movs	r1, r5
 80045f4:	0032      	movs	r2, r6
 80045f6:	f7ff ff1a 	bl	800442e <memcpy>
 80045fa:	0029      	movs	r1, r5
 80045fc:	0038      	movs	r0, r7
 80045fe:	f7ff ff33 	bl	8004468 <_free_r>
 8004602:	e7e3      	b.n	80045cc <_realloc_r+0x14>

08004604 <_sbrk_r>:
 8004604:	2300      	movs	r3, #0
 8004606:	b570      	push	{r4, r5, r6, lr}
 8004608:	4d06      	ldr	r5, [pc, #24]	; (8004624 <_sbrk_r+0x20>)
 800460a:	0004      	movs	r4, r0
 800460c:	0008      	movs	r0, r1
 800460e:	602b      	str	r3, [r5, #0]
 8004610:	f7fc fc72 	bl	8000ef8 <_sbrk>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d103      	bne.n	8004620 <_sbrk_r+0x1c>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d000      	beq.n	8004620 <_sbrk_r+0x1c>
 800461e:	6023      	str	r3, [r4, #0]
 8004620:	bd70      	pop	{r4, r5, r6, pc}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	20000178 	.word	0x20000178

08004628 <__malloc_lock>:
 8004628:	b510      	push	{r4, lr}
 800462a:	4802      	ldr	r0, [pc, #8]	; (8004634 <__malloc_lock+0xc>)
 800462c:	f000 f814 	bl	8004658 <__retarget_lock_acquire_recursive>
 8004630:	bd10      	pop	{r4, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	20000180 	.word	0x20000180

08004638 <__malloc_unlock>:
 8004638:	b510      	push	{r4, lr}
 800463a:	4802      	ldr	r0, [pc, #8]	; (8004644 <__malloc_unlock+0xc>)
 800463c:	f000 f80d 	bl	800465a <__retarget_lock_release_recursive>
 8004640:	bd10      	pop	{r4, pc}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	20000180 	.word	0x20000180

08004648 <_malloc_usable_size_r>:
 8004648:	1f0b      	subs	r3, r1, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	1f18      	subs	r0, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	da01      	bge.n	8004656 <_malloc_usable_size_r+0xe>
 8004652:	580b      	ldr	r3, [r1, r0]
 8004654:	18c0      	adds	r0, r0, r3
 8004656:	4770      	bx	lr

08004658 <__retarget_lock_acquire_recursive>:
 8004658:	4770      	bx	lr

0800465a <__retarget_lock_release_recursive>:
 800465a:	4770      	bx	lr

0800465c <_init>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr

08004668 <_fini>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr
