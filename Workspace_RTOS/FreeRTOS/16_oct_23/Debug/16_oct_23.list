
16_oct_23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036cc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003788  08003788  00013788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800387c  0800387c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800387c  0800387c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800387c  0800387c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  080038f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080038f4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae25  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d47  00000000  00000000  0002aebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0002cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018622  00000000  00000000  0002dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af1e  00000000  00000000  000462d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094d48  00000000  00000000  000511f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5f38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000259c  00000000  00000000  000e5f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003770 	.word	0x08003770

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08003770 	.word	0x08003770

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b08b      	sub	sp, #44	; 0x2c
 8000234:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000236:	f000 fac1 	bl	80007bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023a:	f000 f851 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023e:	f000 f8ef 	bl	8000420 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000242:	f000 f8ad 	bl	80003a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t data_write[10] = "Hello";
 8000246:	240c      	movs	r4, #12
 8000248:	1939      	adds	r1, r7, r4
 800024a:	4a22      	ldr	r2, [pc, #136]	; (80002d4 <main+0xa4>)
 800024c:	000b      	movs	r3, r1
 800024e:	6810      	ldr	r0, [r2, #0]
 8000250:	6018      	str	r0, [r3, #0]
 8000252:	8892      	ldrh	r2, [r2, #4]
 8000254:	809a      	strh	r2, [r3, #4]
 8000256:	2306      	movs	r3, #6
 8000258:	18cb      	adds	r3, r1, r3
 800025a:	2204      	movs	r2, #4
 800025c:	2100      	movs	r1, #0
 800025e:	0018      	movs	r0, r3
 8000260:	f002 fae0 	bl	8002824 <memset>
	uint8_t data_read[10] = {0};
 8000264:	003b      	movs	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	3304      	adds	r3, #4
 800026c:	2206      	movs	r2, #6
 800026e:	2100      	movs	r1, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f002 fad7 	bl	8002824 <memset>

	if (HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, data_write, sizeof(data_write), 500) != HAL_OK)
 8000276:	4818      	ldr	r0, [pc, #96]	; (80002d8 <main+0xa8>)
 8000278:	23fa      	movs	r3, #250	; 0xfa
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	9302      	str	r3, [sp, #8]
 800027e:	230a      	movs	r3, #10
 8000280:	9301      	str	r3, [sp, #4]
 8000282:	193b      	adds	r3, r7, r4
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2308      	movs	r3, #8
 8000288:	2200      	movs	r2, #0
 800028a:	21a0      	movs	r1, #160	; 0xa0
 800028c:	f000 fe22 	bl	8000ed4 <HAL_I2C_Mem_Write>
 8000290:	1e03      	subs	r3, r0, #0
 8000292:	d001      	beq.n	8000298 <main+0x68>
	{
	  Error_Handler();
 8000294:	f000 f936 	bl	8000504 <Error_Handler>
	}
	HAL_Delay(1000);
 8000298:	23fa      	movs	r3, #250	; 0xfa
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fb13 	bl	80008c8 <HAL_Delay>
	if (HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, data_read, sizeof(data_read), 500) != HAL_OK)
 80002a2:	480d      	ldr	r0, [pc, #52]	; (80002d8 <main+0xa8>)
 80002a4:	23fa      	movs	r3, #250	; 0xfa
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	9302      	str	r3, [sp, #8]
 80002aa:	230a      	movs	r3, #10
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	003b      	movs	r3, r7
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2308      	movs	r3, #8
 80002b4:	2200      	movs	r2, #0
 80002b6:	21a0      	movs	r1, #160	; 0xa0
 80002b8:	f000 ff3a 	bl	8001130 <HAL_I2C_Mem_Read>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <main+0x94>
	{
	  Error_Handler();
 80002c0:	f000 f920 	bl	8000504 <Error_Handler>
	}
    printf("Data read: %s\n", data_read);
 80002c4:	003a      	movs	r2, r7
 80002c6:	4b05      	ldr	r3, [pc, #20]	; (80002dc <main+0xac>)
 80002c8:	0011      	movs	r1, r2
 80002ca:	0018      	movs	r0, r3
 80002cc:	f002 fab2 	bl	8002834 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <main+0xa0>
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	08003798 	.word	0x08003798
 80002d8:	20000098 	.word	0x20000098
 80002dc:	08003788 	.word	0x08003788

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b0a1      	sub	sp, #132	; 0x84
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	2448      	movs	r4, #72	; 0x48
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	0018      	movs	r0, r3
 80002ec:	2338      	movs	r3, #56	; 0x38
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f002 fa97 	bl	8002824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	2338      	movs	r3, #56	; 0x38
 80002f8:	18fb      	adds	r3, r7, r3
 80002fa:	0018      	movs	r0, r3
 80002fc:	2310      	movs	r3, #16
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f002 fa8f 	bl	8002824 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	0018      	movs	r0, r3
 800030a:	2334      	movs	r3, #52	; 0x34
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f002 fa88 	bl	8002824 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fbbd 	bl	8001a98 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800031e:	193b      	adds	r3, r7, r4
 8000320:	2202      	movs	r2, #2
 8000322:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000324:	193b      	adds	r3, r7, r4
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	0052      	lsls	r2, r2, #1
 800032a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800032c:	193b      	adds	r3, r7, r4
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000332:	193b      	adds	r3, r7, r4
 8000334:	2240      	movs	r2, #64	; 0x40
 8000336:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	193b      	adds	r3, r7, r4
 8000340:	0018      	movs	r0, r3
 8000342:	f001 fbe9 	bl	8001b18 <HAL_RCC_OscConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800034a:	f000 f8db 	bl	8000504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	2138      	movs	r1, #56	; 0x38
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2207      	movs	r2, #7
 8000354:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2100      	movs	r1, #0
 800036c:	0018      	movs	r0, r3
 800036e:	f001 feed 	bl	800214c <HAL_RCC_ClockConfig>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000376:	f000 f8c5 	bl	8000504 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2220      	movs	r2, #32
 800037e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	0018      	movs	r0, r3
 800038a:	f002 f869 	bl	8002460 <HAL_RCCEx_PeriphCLKConfig>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000392:	f000 f8b7 	bl	8000504 <Error_Handler>
  }
}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	b021      	add	sp, #132	; 0x84
 800039c:	bd90      	pop	{r4, r7, pc}
	...

080003a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <MX_I2C1_Init+0x74>)
 80003a6:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <MX_I2C1_Init+0x78>)
 80003a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ac:	4a1b      	ldr	r2, [pc, #108]	; (800041c <MX_I2C1_Init+0x7c>)
 80003ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_I2C1_Init+0x74>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_I2C1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_I2C1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_I2C1_Init+0x74>)
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 fce3 	bl	8000da8 <HAL_I2C_Init>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003e6:	f000 f88d 	bl	8000504 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ec:	2100      	movs	r1, #0
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 faba 	bl	8001968 <HAL_I2CEx_ConfigAnalogFilter>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f8:	f000 f884 	bl	8000504 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <MX_I2C1_Init+0x74>)
 80003fe:	2100      	movs	r1, #0
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fafd 	bl	8001a00 <HAL_I2CEx_ConfigDigitalFilter>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800040a:	f000 f87b 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000098 	.word	0x20000098
 8000418:	40005400 	.word	0x40005400
 800041c:	00303d5b 	.word	0x00303d5b

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b08b      	sub	sp, #44	; 0x2c
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	2414      	movs	r4, #20
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	2314      	movs	r3, #20
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f002 f9f7 	bl	8002824 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000436:	4b32      	ldr	r3, [pc, #200]	; (8000500 <MX_GPIO_Init+0xe0>)
 8000438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800043a:	4b31      	ldr	r3, [pc, #196]	; (8000500 <MX_GPIO_Init+0xe0>)
 800043c:	2104      	movs	r1, #4
 800043e:	430a      	orrs	r2, r1
 8000440:	635a      	str	r2, [r3, #52]	; 0x34
 8000442:	4b2f      	ldr	r3, [pc, #188]	; (8000500 <MX_GPIO_Init+0xe0>)
 8000444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000446:	2204      	movs	r2, #4
 8000448:	4013      	ands	r3, r2
 800044a:	613b      	str	r3, [r7, #16]
 800044c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044e:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <MX_GPIO_Init+0xe0>)
 8000450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000452:	4b2b      	ldr	r3, [pc, #172]	; (8000500 <MX_GPIO_Init+0xe0>)
 8000454:	2120      	movs	r1, #32
 8000456:	430a      	orrs	r2, r1
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
 800045a:	4b29      	ldr	r3, [pc, #164]	; (8000500 <MX_GPIO_Init+0xe0>)
 800045c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800045e:	2220      	movs	r2, #32
 8000460:	4013      	ands	r3, r2
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <MX_GPIO_Init+0xe0>)
 8000468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800046a:	4b25      	ldr	r3, [pc, #148]	; (8000500 <MX_GPIO_Init+0xe0>)
 800046c:	2101      	movs	r1, #1
 800046e:	430a      	orrs	r2, r1
 8000470:	635a      	str	r2, [r3, #52]	; 0x34
 8000472:	4b23      	ldr	r3, [pc, #140]	; (8000500 <MX_GPIO_Init+0xe0>)
 8000474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000476:	2201      	movs	r2, #1
 8000478:	4013      	ands	r3, r2
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b20      	ldr	r3, [pc, #128]	; (8000500 <MX_GPIO_Init+0xe0>)
 8000480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000482:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <MX_GPIO_Init+0xe0>)
 8000484:	2102      	movs	r1, #2
 8000486:	430a      	orrs	r2, r1
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
 800048a:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <MX_GPIO_Init+0xe0>)
 800048c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800048e:	2202      	movs	r2, #2
 8000490:	4013      	ands	r3, r2
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000496:	23a0      	movs	r3, #160	; 0xa0
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	2200      	movs	r2, #0
 800049c:	2120      	movs	r1, #32
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 fc64 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	220c      	movs	r2, #12
 80004a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2202      	movs	r2, #2
 80004ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2201      	movs	r2, #1
 80004c0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c2:	193a      	adds	r2, r7, r4
 80004c4:	23a0      	movs	r3, #160	; 0xa0
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 faea 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80004d0:	0021      	movs	r1, r4
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2220      	movs	r2, #32
 80004d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2202      	movs	r2, #2
 80004e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80004ea:	187a      	adds	r2, r7, r1
 80004ec:	23a0      	movs	r3, #160	; 0xa0
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fad6 	bl	8000aa4 <HAL_GPIO_Init>

}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b00b      	add	sp, #44	; 0x2c
 80004fe:	bd90      	pop	{r4, r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_MspInit+0x4c>)
 8000518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <HAL_MspInit+0x4c>)
 800051c:	2101      	movs	r1, #1
 800051e:	430a      	orrs	r2, r1
 8000520:	641a      	str	r2, [r3, #64]	; 0x40
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_MspInit+0x4c>)
 8000524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_MspInit+0x4c>)
 8000530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_MspInit+0x4c>)
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	0549      	lsls	r1, r1, #21
 8000538:	430a      	orrs	r2, r1
 800053a:	63da      	str	r2, [r3, #60]	; 0x3c
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <HAL_MspInit+0x4c>)
 800053e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	055b      	lsls	r3, r3, #21
 8000544:	4013      	ands	r3, r2
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800054a:	23c0      	movs	r3, #192	; 0xc0
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	0018      	movs	r0, r3
 8000550:	f000 f9de 	bl	8000910 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b002      	add	sp, #8
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000

08000560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b08b      	sub	sp, #44	; 0x2c
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	2414      	movs	r4, #20
 800056a:	193b      	adds	r3, r7, r4
 800056c:	0018      	movs	r0, r3
 800056e:	2314      	movs	r3, #20
 8000570:	001a      	movs	r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	f002 f956 	bl	8002824 <memset>
  if(hi2c->Instance==I2C1)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <HAL_I2C_MspInit+0x8c>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d130      	bne.n	80005e4 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <HAL_I2C_MspInit+0x90>)
 8000584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <HAL_I2C_MspInit+0x90>)
 8000588:	2102      	movs	r1, #2
 800058a:	430a      	orrs	r2, r1
 800058c:	635a      	str	r2, [r3, #52]	; 0x34
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <HAL_I2C_MspInit+0x90>)
 8000590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000592:	2202      	movs	r2, #2
 8000594:	4013      	ands	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	22c0      	movs	r2, #192	; 0xc0
 800059e:	0092      	lsls	r2, r2, #2
 80005a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005a2:	0021      	movs	r1, r4
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2212      	movs	r2, #18
 80005a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2201      	movs	r2, #1
 80005ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2203      	movs	r2, #3
 80005b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2206      	movs	r2, #6
 80005ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <HAL_I2C_MspInit+0x94>)
 80005c0:	0019      	movs	r1, r3
 80005c2:	0010      	movs	r0, r2
 80005c4:	f000 fa6e 	bl	8000aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_I2C_MspInit+0x90>)
 80005ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_I2C_MspInit+0x90>)
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	0389      	lsls	r1, r1, #14
 80005d2:	430a      	orrs	r2, r1
 80005d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_I2C_MspInit+0x90>)
 80005d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	039b      	lsls	r3, r3, #14
 80005de:	4013      	ands	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b00b      	add	sp, #44	; 0x2c
 80005ea:	bd90      	pop	{r4, r7, pc}
 80005ec:	40005400 	.word	0x40005400
 80005f0:	40021000 	.word	0x40021000
 80005f4:	50000400 	.word	0x50000400

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061c:	f000 f938 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b086      	sub	sp, #24
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	e00a      	b.n	800064e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000638:	e000      	b.n	800063c <_read+0x16>
 800063a:	bf00      	nop
 800063c:	0001      	movs	r1, r0
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	1c5a      	adds	r2, r3, #1
 8000642:	60ba      	str	r2, [r7, #8]
 8000644:	b2ca      	uxtb	r2, r1
 8000646:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	429a      	cmp	r2, r3
 8000654:	dbf0      	blt.n	8000638 <_read+0x12>
	}

return len;
 8000656:	687b      	ldr	r3, [r7, #4]
}
 8000658:	0018      	movs	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	b006      	add	sp, #24
 800065e:	bd80      	pop	{r7, pc}

08000660 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	e009      	b.n	8000686 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	60ba      	str	r2, [r7, #8]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	0018      	movs	r0, r3
 800067c:	e000      	b.n	8000680 <_write+0x20>
 800067e:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	3301      	adds	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	dbf1      	blt.n	8000672 <_write+0x12>
	}
	return len;
 800068e:	687b      	ldr	r3, [r7, #4]
}
 8000690:	0018      	movs	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	b006      	add	sp, #24
 8000696:	bd80      	pop	{r7, pc}

08000698 <_close>:

int _close(int file)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	return -1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	425b      	negs	r3, r3
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	0192      	lsls	r2, r2, #6
 80006bc:	605a      	str	r2, [r3, #4]
	return 0;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b002      	add	sp, #8
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <_isatty>:

int _isatty(int file)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	return 1;
 80006d0:	2301      	movs	r3, #1
}
 80006d2:	0018      	movs	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}

080006da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
	return 0;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	0018      	movs	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b004      	add	sp, #16
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <_sbrk+0x5c>)
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <_sbrk+0x60>)
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <_sbrk+0x64>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <_sbrk+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	18d3      	adds	r3, r2, r3
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	429a      	cmp	r2, r3
 800071e:	d207      	bcs.n	8000730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000720:	f002 f856 	bl	80027d0 <__errno>
 8000724:	0003      	movs	r3, r0
 8000726:	220c      	movs	r2, #12
 8000728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072a:	2301      	movs	r3, #1
 800072c:	425b      	negs	r3, r3
 800072e:	e009      	b.n	8000744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <_sbrk+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <_sbrk+0x64>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	18d2      	adds	r2, r2, r3
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <_sbrk+0x64>)
 8000740:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b006      	add	sp, #24
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20009000 	.word	0x20009000
 8000750:	00000400 	.word	0x00000400
 8000754:	2000008c 	.word	0x2000008c
 8000758:	200000f8 	.word	0x200000f8

0800075c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800076a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800076c:	f7ff fff6 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	; (80007a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <LoopForever+0xe>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	; (80007b4 <LoopForever+0x16>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000796:	f002 f821 	bl	80027dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800079a:	f7ff fd49 	bl	8000230 <main>

0800079e <LoopForever>:

LoopForever:
  b LoopForever
 800079e:	e7fe      	b.n	800079e <LoopForever>
  ldr   r0, =_estack
 80007a0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007ac:	08003884 	.word	0x08003884
  ldr r2, =_sbss
 80007b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007b4:	200000f8 	.word	0x200000f8

080007b8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC1_COMP_IRQHandler>
	...

080007bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <HAL_Init+0x3c>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_Init+0x3c>)
 80007ce:	2180      	movs	r1, #128	; 0x80
 80007d0:	0049      	lsls	r1, r1, #1
 80007d2:	430a      	orrs	r2, r1
 80007d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f810 	bl	80007fc <HAL_InitTick>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d003      	beq.n	80007e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e001      	b.n	80007ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f7ff fe92 	bl	8000510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40022000 	.word	0x40022000

080007fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000804:	230f      	movs	r3, #15
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <HAL_InitTick+0x88>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d02b      	beq.n	800086c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <HAL_InitTick+0x8c>)
 8000816:	681c      	ldr	r4, [r3, #0]
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_InitTick+0x88>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	0019      	movs	r1, r3
 800081e:	23fa      	movs	r3, #250	; 0xfa
 8000820:	0098      	lsls	r0, r3, #2
 8000822:	f7ff fc79 	bl	8000118 <__udivsi3>
 8000826:	0003      	movs	r3, r0
 8000828:	0019      	movs	r1, r3
 800082a:	0020      	movs	r0, r4
 800082c:	f7ff fc74 	bl	8000118 <__udivsi3>
 8000830:	0003      	movs	r3, r0
 8000832:	0018      	movs	r0, r3
 8000834:	f000 f929 	bl	8000a8a <HAL_SYSTICK_Config>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d112      	bne.n	8000862 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b03      	cmp	r3, #3
 8000840:	d80a      	bhi.n	8000858 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	2200      	movs	r2, #0
 800084a:	0018      	movs	r0, r3
 800084c:	f000 f908 	bl	8000a60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_InitTick+0x90>)
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	e00d      	b.n	8000874 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000858:	230f      	movs	r3, #15
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
 8000860:	e008      	b.n	8000874 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000862:	230f      	movs	r3, #15
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e003      	b.n	8000874 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800086c:	230f      	movs	r3, #15
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000874:	230f      	movs	r3, #15
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	781b      	ldrb	r3, [r3, #0]
}
 800087a:	0018      	movs	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	b005      	add	sp, #20
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	20000008 	.word	0x20000008
 8000888:	20000000 	.word	0x20000000
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x1c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	001a      	movs	r2, r3
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_IncTick+0x20>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	18d2      	adds	r2, r2, r3
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <HAL_IncTick+0x20>)
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	20000008 	.word	0x20000008
 80008b0:	200000e4 	.word	0x200000e4

080008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <HAL_GetTick+0x10>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	200000e4 	.word	0x200000e4

080008c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff fff0 	bl	80008b4 <HAL_GetTick>
 80008d4:	0003      	movs	r3, r0
 80008d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	3301      	adds	r3, #1
 80008e0:	d005      	beq.n	80008ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_Delay+0x44>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	001a      	movs	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	189b      	adds	r3, r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	f7ff ffe0 	bl	80008b4 <HAL_GetTick>
 80008f4:	0002      	movs	r2, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8f7      	bhi.n	80008f0 <HAL_Delay+0x28>
  {
  }
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b004      	add	sp, #16
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	20000008 	.word	0x20000008

08000910 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800091e:	4013      	ands	r3, r2
 8000920:	0019      	movs	r1, r3
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	430a      	orrs	r2, r1
 8000928:	601a      	str	r2, [r3, #0]
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40010000 	.word	0x40010000
 8000938:	fffff9ff 	.word	0xfffff9ff

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	0002      	movs	r2, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b7f      	cmp	r3, #127	; 0x7f
 8000950:	d828      	bhi.n	80009a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <__NVIC_SetPriority+0xd4>)
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b25b      	sxtb	r3, r3
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	33c0      	adds	r3, #192	; 0xc0
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	589b      	ldr	r3, [r3, r2]
 8000962:	1dfa      	adds	r2, r7, #7
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	0011      	movs	r1, r2
 8000968:	2203      	movs	r2, #3
 800096a:	400a      	ands	r2, r1
 800096c:	00d2      	lsls	r2, r2, #3
 800096e:	21ff      	movs	r1, #255	; 0xff
 8000970:	4091      	lsls	r1, r2
 8000972:	000a      	movs	r2, r1
 8000974:	43d2      	mvns	r2, r2
 8000976:	401a      	ands	r2, r3
 8000978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	22ff      	movs	r2, #255	; 0xff
 8000980:	401a      	ands	r2, r3
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	0018      	movs	r0, r3
 8000988:	2303      	movs	r3, #3
 800098a:	4003      	ands	r3, r0
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000990:	481f      	ldr	r0, [pc, #124]	; (8000a10 <__NVIC_SetPriority+0xd4>)
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b25b      	sxtb	r3, r3
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	430a      	orrs	r2, r1
 800099c:	33c0      	adds	r3, #192	; 0xc0
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009a2:	e031      	b.n	8000a08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a4:	4a1b      	ldr	r2, [pc, #108]	; (8000a14 <__NVIC_SetPriority+0xd8>)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	0019      	movs	r1, r3
 80009ac:	230f      	movs	r3, #15
 80009ae:	400b      	ands	r3, r1
 80009b0:	3b08      	subs	r3, #8
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	3306      	adds	r3, #6
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	18d3      	adds	r3, r2, r3
 80009ba:	3304      	adds	r3, #4
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1dfa      	adds	r2, r7, #7
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	0011      	movs	r1, r2
 80009c4:	2203      	movs	r2, #3
 80009c6:	400a      	ands	r2, r1
 80009c8:	00d2      	lsls	r2, r2, #3
 80009ca:	21ff      	movs	r1, #255	; 0xff
 80009cc:	4091      	lsls	r1, r2
 80009ce:	000a      	movs	r2, r1
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	401a      	ands	r2, r3
 80009d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	22ff      	movs	r2, #255	; 0xff
 80009dc:	401a      	ands	r2, r3
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0018      	movs	r0, r3
 80009e4:	2303      	movs	r3, #3
 80009e6:	4003      	ands	r3, r0
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <__NVIC_SetPriority+0xd8>)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	001c      	movs	r4, r3
 80009f4:	230f      	movs	r3, #15
 80009f6:	4023      	ands	r3, r4
 80009f8:	3b08      	subs	r3, #8
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	430a      	orrs	r2, r1
 80009fe:	3306      	adds	r3, #6
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	18c3      	adds	r3, r0, r3
 8000a04:	3304      	adds	r3, #4
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	1e5a      	subs	r2, r3, #1
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	045b      	lsls	r3, r3, #17
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d301      	bcc.n	8000a30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e010      	b.n	8000a52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <SysTick_Config+0x44>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	3a01      	subs	r2, #1
 8000a36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a38:	2301      	movs	r3, #1
 8000a3a:	425b      	negs	r3, r3
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff ff7c 	bl	800093c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SysTick_Config+0x44>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Config+0x44>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	0018      	movs	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	1c02      	adds	r2, r0, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ff5d 	bl	800093c <__NVIC_SetPriority>
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b004      	add	sp, #16
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ffbf 	bl	8000a18 <SysTick_Config>
 8000a9a:	0003      	movs	r3, r0
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab2:	e147      	b.n	8000d44 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2101      	movs	r1, #1
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d100      	bne.n	8000acc <HAL_GPIO_Init+0x28>
 8000aca:	e138      	b.n	8000d3e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d005      	beq.n	8000ae4 <HAL_GPIO_Init+0x40>
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2203      	movs	r2, #3
 8000ade:	4013      	ands	r3, r2
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d130      	bne.n	8000b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	2203      	movs	r2, #3
 8000af0:	409a      	lsls	r2, r3
 8000af2:	0013      	movs	r3, r2
 8000af4:	43da      	mvns	r2, r3
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	409a      	lsls	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	43da      	mvns	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	091b      	lsrs	r3, r3, #4
 8000b30:	2201      	movs	r2, #1
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d017      	beq.n	8000b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	43da      	mvns	r2, r3
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2203      	movs	r2, #3
 8000b88:	4013      	ands	r3, r2
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d123      	bne.n	8000bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	08da      	lsrs	r2, r3, #3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3208      	adds	r2, #8
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	58d3      	ldr	r3, [r2, r3]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	0013      	movs	r3, r2
 8000baa:	43da      	mvns	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	691a      	ldr	r2, [r3, #16]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2107      	movs	r1, #7
 8000bba:	400b      	ands	r3, r1
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	08da      	lsrs	r2, r3, #3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3208      	adds	r2, #8
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	6939      	ldr	r1, [r7, #16]
 8000bd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	23c0      	movs	r3, #192	; 0xc0
 8000c10:	029b      	lsls	r3, r3, #10
 8000c12:	4013      	ands	r3, r2
 8000c14:	d100      	bne.n	8000c18 <HAL_GPIO_Init+0x174>
 8000c16:	e092      	b.n	8000d3e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c18:	4a50      	ldr	r2, [pc, #320]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	3318      	adds	r3, #24
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	589b      	ldr	r3, [r3, r2]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	2203      	movs	r2, #3
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	220f      	movs	r2, #15
 8000c30:	409a      	lsls	r2, r3
 8000c32:	0013      	movs	r3, r2
 8000c34:	43da      	mvns	r2, r3
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	23a0      	movs	r3, #160	; 0xa0
 8000c40:	05db      	lsls	r3, r3, #23
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d013      	beq.n	8000c6e <HAL_GPIO_Init+0x1ca>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a45      	ldr	r2, [pc, #276]	; (8000d60 <HAL_GPIO_Init+0x2bc>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d00d      	beq.n	8000c6a <HAL_GPIO_Init+0x1c6>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a44      	ldr	r2, [pc, #272]	; (8000d64 <HAL_GPIO_Init+0x2c0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d007      	beq.n	8000c66 <HAL_GPIO_Init+0x1c2>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a43      	ldr	r2, [pc, #268]	; (8000d68 <HAL_GPIO_Init+0x2c4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_GPIO_Init+0x1be>
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e006      	b.n	8000c70 <HAL_GPIO_Init+0x1cc>
 8000c62:	2305      	movs	r3, #5
 8000c64:	e004      	b.n	8000c70 <HAL_GPIO_Init+0x1cc>
 8000c66:	2302      	movs	r3, #2
 8000c68:	e002      	b.n	8000c70 <HAL_GPIO_Init+0x1cc>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <HAL_GPIO_Init+0x1cc>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	2103      	movs	r1, #3
 8000c74:	400a      	ands	r2, r1
 8000c76:	00d2      	lsls	r2, r2, #3
 8000c78:	4093      	lsls	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000c80:	4936      	ldr	r1, [pc, #216]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	3318      	adds	r3, #24
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c8e:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43da      	mvns	r2, r3
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	035b      	lsls	r3, r3, #13
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	43da      	mvns	r2, r3
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	039b      	lsls	r3, r3, #14
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ce2:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000ce4:	2384      	movs	r3, #132	; 0x84
 8000ce6:	58d3      	ldr	r3, [r2, r3]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	029b      	lsls	r3, r3, #10
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d08:	4914      	ldr	r1, [pc, #80]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000d0a:	2284      	movs	r2, #132	; 0x84
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	58d3      	ldr	r3, [r2, r3]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	025b      	lsls	r3, r3, #9
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d36:	4909      	ldr	r1, [pc, #36]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	40da      	lsrs	r2, r3
 8000d4c:	1e13      	subs	r3, r2, #0
 8000d4e:	d000      	beq.n	8000d52 <HAL_GPIO_Init+0x2ae>
 8000d50:	e6b0      	b.n	8000ab4 <HAL_GPIO_Init+0x10>
  }
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b006      	add	sp, #24
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40021800 	.word	0x40021800
 8000d60:	50000400 	.word	0x50000400
 8000d64:	50000800 	.word	0x50000800
 8000d68:	50000c00 	.word	0x50000c00

08000d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	0008      	movs	r0, r1
 8000d76:	0011      	movs	r1, r2
 8000d78:	1cbb      	adds	r3, r7, #2
 8000d7a:	1c02      	adds	r2, r0, #0
 8000d7c:	801a      	strh	r2, [r3, #0]
 8000d7e:	1c7b      	adds	r3, r7, #1
 8000d80:	1c0a      	adds	r2, r1, #0
 8000d82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d84:	1c7b      	adds	r3, r7, #1
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d004      	beq.n	8000d96 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d8c:	1cbb      	adds	r3, r7, #2
 8000d8e:	881a      	ldrh	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d94:	e003      	b.n	8000d9e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d96:	1cbb      	adds	r3, r7, #2
 8000d98:	881a      	ldrh	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e082      	b.n	8000ec0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2241      	movs	r2, #65	; 0x41
 8000dbe:	5c9b      	ldrb	r3, [r3, r2]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2240      	movs	r2, #64	; 0x40
 8000dca:	2100      	movs	r1, #0
 8000dcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff fbc5 	bl	8000560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2241      	movs	r2, #65	; 0x41
 8000dda:	2124      	movs	r1, #36	; 0x24
 8000ddc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	438a      	bics	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4934      	ldr	r1, [pc, #208]	; (8000ec8 <HAL_I2C_Init+0x120>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4931      	ldr	r1, [pc, #196]	; (8000ecc <HAL_I2C_Init+0x124>)
 8000e08:	400a      	ands	r2, r1
 8000e0a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d108      	bne.n	8000e26 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	0209      	lsls	r1, r1, #8
 8000e20:	430a      	orrs	r2, r1
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	e007      	b.n	8000e36 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2184      	movs	r1, #132	; 0x84
 8000e30:	0209      	lsls	r1, r1, #8
 8000e32:	430a      	orrs	r2, r1
 8000e34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d104      	bne.n	8000e48 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	491f      	ldr	r1, [pc, #124]	; (8000ed0 <HAL_I2C_Init+0x128>)
 8000e54:	430a      	orrs	r2, r1
 8000e56:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	491a      	ldr	r1, [pc, #104]	; (8000ecc <HAL_I2C_Init+0x124>)
 8000e64:	400a      	ands	r2, r1
 8000e66:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	431a      	orrs	r2, r3
 8000e72:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69d9      	ldr	r1, [r3, #28]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a1a      	ldr	r2, [r3, #32]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2241      	movs	r2, #65	; 0x41
 8000eac:	2120      	movs	r1, #32
 8000eae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2242      	movs	r2, #66	; 0x42
 8000eba:	2100      	movs	r1, #0
 8000ebc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	f0ffffff 	.word	0xf0ffffff
 8000ecc:	ffff7fff 	.word	0xffff7fff
 8000ed0:	02008000 	.word	0x02008000

08000ed4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	000c      	movs	r4, r1
 8000ede:	0010      	movs	r0, r2
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	1c22      	adds	r2, r4, #0
 8000ee8:	801a      	strh	r2, [r3, #0]
 8000eea:	2308      	movs	r3, #8
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	1c02      	adds	r2, r0, #0
 8000ef0:	801a      	strh	r2, [r3, #0]
 8000ef2:	1dbb      	adds	r3, r7, #6
 8000ef4:	1c0a      	adds	r2, r1, #0
 8000ef6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2241      	movs	r2, #65	; 0x41
 8000efc:	5c9b      	ldrb	r3, [r3, r2]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b20      	cmp	r3, #32
 8000f02:	d000      	beq.n	8000f06 <HAL_I2C_Mem_Write+0x32>
 8000f04:	e10c      	b.n	8001120 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d004      	beq.n	8000f16 <HAL_I2C_Mem_Write+0x42>
 8000f0c:	232c      	movs	r3, #44	; 0x2c
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d105      	bne.n	8000f22 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e0ff      	b.n	8001122 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2240      	movs	r2, #64	; 0x40
 8000f26:	5c9b      	ldrb	r3, [r3, r2]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d101      	bne.n	8000f30 <HAL_I2C_Mem_Write+0x5c>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e0f8      	b.n	8001122 <HAL_I2C_Mem_Write+0x24e>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2240      	movs	r2, #64	; 0x40
 8000f34:	2101      	movs	r1, #1
 8000f36:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f38:	f7ff fcbc 	bl	80008b4 <HAL_GetTick>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	0219      	lsls	r1, r3, #8
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2319      	movs	r3, #25
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f000 fb0b 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e0e3      	b.n	8001122 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2241      	movs	r2, #65	; 0x41
 8000f5e:	2121      	movs	r1, #33	; 0x21
 8000f60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2242      	movs	r2, #66	; 0x42
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	222c      	movs	r2, #44	; 0x2c
 8000f7a:	18ba      	adds	r2, r7, r2
 8000f7c:	8812      	ldrh	r2, [r2, #0]
 8000f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f86:	1dbb      	adds	r3, r7, #6
 8000f88:	881c      	ldrh	r4, [r3, #0]
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	230a      	movs	r3, #10
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	8819      	ldrh	r1, [r3, #0]
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	0023      	movs	r3, r4
 8000fa2:	f000 f9f9 	bl	8001398 <I2C_RequestMemoryWrite>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d005      	beq.n	8000fb6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2240      	movs	r2, #64	; 0x40
 8000fae:	2100      	movs	r1, #0
 8000fb0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0b5      	b.n	8001122 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	2bff      	cmp	r3, #255	; 0xff
 8000fbe:	d911      	bls.n	8000fe4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	22ff      	movs	r2, #255	; 0xff
 8000fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	045c      	lsls	r4, r3, #17
 8000fd0:	230a      	movs	r3, #10
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	8819      	ldrh	r1, [r3, #0]
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	0023      	movs	r3, r4
 8000fde:	f000 fc89 	bl	80018f4 <I2C_TransferConfig>
 8000fe2:	e012      	b.n	800100a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	049c      	lsls	r4, r3, #18
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	8819      	ldrh	r1, [r3, #0]
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	2300      	movs	r3, #0
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	0023      	movs	r3, r4
 8001006:	f000 fc75 	bl	80018f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	0018      	movs	r0, r3
 8001012:	f000 fae8 	bl	80015e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001016:	1e03      	subs	r3, r0, #0
 8001018:	d001      	beq.n	800101e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e081      	b.n	8001122 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001038:	b29b      	uxth	r3, r3
 800103a:	3b01      	subs	r3, #1
 800103c:	b29a      	uxth	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001046:	3b01      	subs	r3, #1
 8001048:	b29a      	uxth	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001052:	b29b      	uxth	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d03a      	beq.n	80010ce <HAL_I2C_Mem_Write+0x1fa>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800105c:	2b00      	cmp	r3, #0
 800105e:	d136      	bne.n	80010ce <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	0013      	movs	r3, r2
 800106a:	2200      	movs	r2, #0
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	f000 fa7b 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 8001072:	1e03      	subs	r3, r0, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e053      	b.n	8001122 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800107e:	b29b      	uxth	r3, r3
 8001080:	2bff      	cmp	r3, #255	; 0xff
 8001082:	d911      	bls.n	80010a8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	22ff      	movs	r2, #255	; 0xff
 8001088:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800108e:	b2da      	uxtb	r2, r3
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	045c      	lsls	r4, r3, #17
 8001094:	230a      	movs	r3, #10
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	8819      	ldrh	r1, [r3, #0]
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	2300      	movs	r3, #0
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	0023      	movs	r3, r4
 80010a2:	f000 fc27 	bl	80018f4 <I2C_TransferConfig>
 80010a6:	e012      	b.n	80010ce <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	049c      	lsls	r4, r3, #18
 80010bc:	230a      	movs	r3, #10
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	8819      	ldrh	r1, [r3, #0]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	2300      	movs	r3, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	0023      	movs	r3, r4
 80010ca:	f000 fc13 	bl	80018f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d198      	bne.n	800100a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 fac0 	bl	8001664 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d001      	beq.n	80010ec <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e01a      	b.n	8001122 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2220      	movs	r2, #32
 80010f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	490b      	ldr	r1, [pc, #44]	; (800112c <HAL_I2C_Mem_Write+0x258>)
 8001100:	400a      	ands	r2, r1
 8001102:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2241      	movs	r2, #65	; 0x41
 8001108:	2120      	movs	r1, #32
 800110a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2242      	movs	r2, #66	; 0x42
 8001110:	2100      	movs	r1, #0
 8001112:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2240      	movs	r2, #64	; 0x40
 8001118:	2100      	movs	r1, #0
 800111a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	e000      	b.n	8001122 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001120:	2302      	movs	r3, #2
  }
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b007      	add	sp, #28
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	fe00e800 	.word	0xfe00e800

08001130 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af02      	add	r7, sp, #8
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	000c      	movs	r4, r1
 800113a:	0010      	movs	r0, r2
 800113c:	0019      	movs	r1, r3
 800113e:	230a      	movs	r3, #10
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	1c22      	adds	r2, r4, #0
 8001144:	801a      	strh	r2, [r3, #0]
 8001146:	2308      	movs	r3, #8
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	1c02      	adds	r2, r0, #0
 800114c:	801a      	strh	r2, [r3, #0]
 800114e:	1dbb      	adds	r3, r7, #6
 8001150:	1c0a      	adds	r2, r1, #0
 8001152:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2241      	movs	r2, #65	; 0x41
 8001158:	5c9b      	ldrb	r3, [r3, r2]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b20      	cmp	r3, #32
 800115e:	d000      	beq.n	8001162 <HAL_I2C_Mem_Read+0x32>
 8001160:	e110      	b.n	8001384 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <HAL_I2C_Mem_Read+0x42>
 8001168:	232c      	movs	r3, #44	; 0x2c
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d105      	bne.n	800117e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e103      	b.n	8001386 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2240      	movs	r2, #64	; 0x40
 8001182:	5c9b      	ldrb	r3, [r3, r2]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_I2C_Mem_Read+0x5c>
 8001188:	2302      	movs	r3, #2
 800118a:	e0fc      	b.n	8001386 <HAL_I2C_Mem_Read+0x256>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	2101      	movs	r1, #1
 8001192:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001194:	f7ff fb8e 	bl	80008b4 <HAL_GetTick>
 8001198:	0003      	movs	r3, r0
 800119a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	0219      	lsls	r1, r3, #8
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2319      	movs	r3, #25
 80011a8:	2201      	movs	r2, #1
 80011aa:	f000 f9dd 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 80011ae:	1e03      	subs	r3, r0, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e0e7      	b.n	8001386 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2241      	movs	r2, #65	; 0x41
 80011ba:	2122      	movs	r1, #34	; 0x22
 80011bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2242      	movs	r2, #66	; 0x42
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	222c      	movs	r2, #44	; 0x2c
 80011d6:	18ba      	adds	r2, r7, r2
 80011d8:	8812      	ldrh	r2, [r2, #0]
 80011da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011e2:	1dbb      	adds	r3, r7, #6
 80011e4:	881c      	ldrh	r4, [r3, #0]
 80011e6:	2308      	movs	r3, #8
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	881a      	ldrh	r2, [r3, #0]
 80011ec:	230a      	movs	r3, #10
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	8819      	ldrh	r1, [r3, #0]
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	0023      	movs	r3, r4
 80011fe:	f000 f92f 	bl	8001460 <I2C_RequestMemoryRead>
 8001202:	1e03      	subs	r3, r0, #0
 8001204:	d005      	beq.n	8001212 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2240      	movs	r2, #64	; 0x40
 800120a:	2100      	movs	r1, #0
 800120c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0b9      	b.n	8001386 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001216:	b29b      	uxth	r3, r3
 8001218:	2bff      	cmp	r3, #255	; 0xff
 800121a:	d911      	bls.n	8001240 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001226:	b2da      	uxtb	r2, r3
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	045c      	lsls	r4, r3, #17
 800122c:	230a      	movs	r3, #10
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	8819      	ldrh	r1, [r3, #0]
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	4b56      	ldr	r3, [pc, #344]	; (8001390 <HAL_I2C_Mem_Read+0x260>)
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	0023      	movs	r3, r4
 800123a:	f000 fb5b 	bl	80018f4 <I2C_TransferConfig>
 800123e:	e012      	b.n	8001266 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001244:	b29a      	uxth	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124e:	b2da      	uxtb	r2, r3
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	049c      	lsls	r4, r3, #18
 8001254:	230a      	movs	r3, #10
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	8819      	ldrh	r1, [r3, #0]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <HAL_I2C_Mem_Read+0x260>)
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	0023      	movs	r3, r4
 8001262:	f000 fb47 	bl	80018f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	0013      	movs	r3, r2
 8001270:	2200      	movs	r2, #0
 8001272:	2104      	movs	r1, #4
 8001274:	f000 f978 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e082      	b.n	8001386 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129c:	3b01      	subs	r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d03a      	beq.n	8001332 <HAL_I2C_Mem_Read+0x202>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d136      	bne.n	8001332 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	0013      	movs	r3, r2
 80012ce:	2200      	movs	r2, #0
 80012d0:	2180      	movs	r1, #128	; 0x80
 80012d2:	f000 f949 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e053      	b.n	8001386 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	2bff      	cmp	r3, #255	; 0xff
 80012e6:	d911      	bls.n	800130c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	22ff      	movs	r2, #255	; 0xff
 80012ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	045c      	lsls	r4, r3, #17
 80012f8:	230a      	movs	r3, #10
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	8819      	ldrh	r1, [r3, #0]
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	2300      	movs	r3, #0
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	0023      	movs	r3, r4
 8001306:	f000 faf5 	bl	80018f4 <I2C_TransferConfig>
 800130a:	e012      	b.n	8001332 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131a:	b2da      	uxtb	r2, r3
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	049c      	lsls	r4, r3, #18
 8001320:	230a      	movs	r3, #10
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	8819      	ldrh	r1, [r3, #0]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	2300      	movs	r3, #0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	0023      	movs	r3, r4
 800132e:	f000 fae1 	bl	80018f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001336:	b29b      	uxth	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d194      	bne.n	8001266 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	0018      	movs	r0, r3
 8001344:	f000 f98e 	bl	8001664 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d001      	beq.n	8001350 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e01a      	b.n	8001386 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2220      	movs	r2, #32
 8001356:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	490c      	ldr	r1, [pc, #48]	; (8001394 <HAL_I2C_Mem_Read+0x264>)
 8001364:	400a      	ands	r2, r1
 8001366:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2241      	movs	r2, #65	; 0x41
 800136c:	2120      	movs	r1, #32
 800136e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2242      	movs	r2, #66	; 0x42
 8001374:	2100      	movs	r1, #0
 8001376:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2240      	movs	r2, #64	; 0x40
 800137c:	2100      	movs	r1, #0
 800137e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	e000      	b.n	8001386 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001384:	2302      	movs	r3, #2
  }
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b007      	add	sp, #28
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	80002400 	.word	0x80002400
 8001394:	fe00e800 	.word	0xfe00e800

08001398 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af02      	add	r7, sp, #8
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	000c      	movs	r4, r1
 80013a2:	0010      	movs	r0, r2
 80013a4:	0019      	movs	r1, r3
 80013a6:	250a      	movs	r5, #10
 80013a8:	197b      	adds	r3, r7, r5
 80013aa:	1c22      	adds	r2, r4, #0
 80013ac:	801a      	strh	r2, [r3, #0]
 80013ae:	2308      	movs	r3, #8
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	1c02      	adds	r2, r0, #0
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	1dbb      	adds	r3, r7, #6
 80013b8:	1c0a      	adds	r2, r1, #0
 80013ba:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013bc:	1dbb      	adds	r3, r7, #6
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	045c      	lsls	r4, r3, #17
 80013c6:	197b      	adds	r3, r7, r5
 80013c8:	8819      	ldrh	r1, [r3, #0]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <I2C_RequestMemoryWrite+0xc4>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	0023      	movs	r3, r4
 80013d2:	f000 fa8f 	bl	80018f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d8:	6a39      	ldr	r1, [r7, #32]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	0018      	movs	r0, r3
 80013de:	f000 f902 	bl	80015e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80013e2:	1e03      	subs	r3, r0, #0
 80013e4:	d001      	beq.n	80013ea <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e033      	b.n	8001452 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013ea:	1dbb      	adds	r3, r7, #6
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d107      	bne.n	8001402 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013f2:	2308      	movs	r3, #8
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
 8001400:	e019      	b.n	8001436 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001402:	2308      	movs	r3, #8
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	b29b      	uxth	r3, r3
 800140c:	b2da      	uxtb	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001416:	6a39      	ldr	r1, [r7, #32]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	0018      	movs	r0, r3
 800141c:	f000 f8e3 	bl	80015e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001420:	1e03      	subs	r3, r0, #0
 8001422:	d001      	beq.n	8001428 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e014      	b.n	8001452 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001428:	2308      	movs	r3, #8
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001436:	6a3a      	ldr	r2, [r7, #32]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	0013      	movs	r3, r2
 8001440:	2200      	movs	r2, #0
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	f000 f890 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 8001448:	1e03      	subs	r3, r0, #0
 800144a:	d001      	beq.n	8001450 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b004      	add	sp, #16
 8001458:	bdb0      	pop	{r4, r5, r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	80002000 	.word	0x80002000

08001460 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af02      	add	r7, sp, #8
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	000c      	movs	r4, r1
 800146a:	0010      	movs	r0, r2
 800146c:	0019      	movs	r1, r3
 800146e:	250a      	movs	r5, #10
 8001470:	197b      	adds	r3, r7, r5
 8001472:	1c22      	adds	r2, r4, #0
 8001474:	801a      	strh	r2, [r3, #0]
 8001476:	2308      	movs	r3, #8
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	1c02      	adds	r2, r0, #0
 800147c:	801a      	strh	r2, [r3, #0]
 800147e:	1dbb      	adds	r3, r7, #6
 8001480:	1c0a      	adds	r2, r1, #0
 8001482:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001484:	1dbb      	adds	r3, r7, #6
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	197b      	adds	r3, r7, r5
 800148c:	8819      	ldrh	r1, [r3, #0]
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <I2C_RequestMemoryRead+0xc0>)
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2300      	movs	r3, #0
 8001496:	f000 fa2d 	bl	80018f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800149a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149c:	6a39      	ldr	r1, [r7, #32]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 f8a0 	bl	80015e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d001      	beq.n	80014ae <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e033      	b.n	8001516 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014ae:	1dbb      	adds	r3, r7, #6
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014b6:	2308      	movs	r3, #8
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
 80014c4:	e019      	b.n	80014fa <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014c6:	2308      	movs	r3, #8
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	6a39      	ldr	r1, [r7, #32]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 f881 	bl	80015e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d001      	beq.n	80014ec <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e014      	b.n	8001516 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014ec:	2308      	movs	r3, #8
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80014fa:	6a3a      	ldr	r2, [r7, #32]
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	0013      	movs	r3, r2
 8001504:	2200      	movs	r2, #0
 8001506:	2140      	movs	r1, #64	; 0x40
 8001508:	f000 f82e 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 800150c:	1e03      	subs	r3, r0, #0
 800150e:	d001      	beq.n	8001514 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bdb0      	pop	{r4, r5, r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	80002000 	.word	0x80002000

08001524 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	2b02      	cmp	r3, #2
 8001538:	d103      	bne.n	8001542 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2201      	movs	r2, #1
 800154a:	4013      	ands	r3, r2
 800154c:	2b01      	cmp	r3, #1
 800154e:	d007      	beq.n	8001560 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	619a      	str	r2, [r3, #24]
  }
}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b002      	add	sp, #8
 8001566:	bd80      	pop	{r7, pc}

08001568 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	1dfb      	adds	r3, r7, #7
 8001576:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001578:	e021      	b.n	80015be <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	d01e      	beq.n	80015be <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001580:	f7ff f998 	bl	80008b4 <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d302      	bcc.n	8001596 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d113      	bne.n	80015be <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	2220      	movs	r2, #32
 800159c:	431a      	orrs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2241      	movs	r2, #65	; 0x41
 80015a6:	2120      	movs	r1, #32
 80015a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2242      	movs	r2, #66	; 0x42
 80015ae:	2100      	movs	r1, #0
 80015b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2240      	movs	r2, #64	; 0x40
 80015b6:	2100      	movs	r1, #0
 80015b8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	4013      	ands	r3, r2
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	425a      	negs	r2, r3
 80015ce:	4153      	adcs	r3, r2
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	001a      	movs	r2, r3
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d0ce      	beq.n	800157a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b004      	add	sp, #16
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015f2:	e02b      	b.n	800164c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	68b9      	ldr	r1, [r7, #8]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	0018      	movs	r0, r3
 80015fc:	f000 f86e 	bl	80016dc <I2C_IsErrorOccurred>
 8001600:	1e03      	subs	r3, r0, #0
 8001602:	d001      	beq.n	8001608 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e029      	b.n	800165c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3301      	adds	r3, #1
 800160c:	d01e      	beq.n	800164c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800160e:	f7ff f951 	bl	80008b4 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	429a      	cmp	r2, r3
 800161c:	d302      	bcc.n	8001624 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d113      	bne.n	800164c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	2220      	movs	r2, #32
 800162a:	431a      	orrs	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2241      	movs	r2, #65	; 0x41
 8001634:	2120      	movs	r1, #32
 8001636:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2242      	movs	r2, #66	; 0x42
 800163c:	2100      	movs	r1, #0
 800163e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	2100      	movs	r1, #0
 8001646:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e007      	b.n	800165c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2202      	movs	r2, #2
 8001654:	4013      	ands	r3, r2
 8001656:	2b02      	cmp	r3, #2
 8001658:	d1cc      	bne.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b004      	add	sp, #16
 8001662:	bd80      	pop	{r7, pc}

08001664 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001670:	e028      	b.n	80016c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	0018      	movs	r0, r3
 800167a:	f000 f82f 	bl	80016dc <I2C_IsErrorOccurred>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d001      	beq.n	8001686 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e026      	b.n	80016d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001686:	f7ff f915 	bl	80008b4 <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	429a      	cmp	r2, r3
 8001694:	d302      	bcc.n	800169c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d113      	bne.n	80016c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	2220      	movs	r2, #32
 80016a2:	431a      	orrs	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2241      	movs	r2, #65	; 0x41
 80016ac:	2120      	movs	r1, #32
 80016ae:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2242      	movs	r2, #66	; 0x42
 80016b4:	2100      	movs	r1, #0
 80016b6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2240      	movs	r2, #64	; 0x40
 80016bc:	2100      	movs	r1, #0
 80016be:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e007      	b.n	80016d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2220      	movs	r2, #32
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d1cf      	bne.n	8001672 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	0018      	movs	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b004      	add	sp, #16
 80016da:	bd80      	pop	{r7, pc}

080016dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b08b      	sub	sp, #44	; 0x2c
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e8:	2327      	movs	r3, #39	; 0x27
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2210      	movs	r2, #16
 8001704:	4013      	ands	r3, r2
 8001706:	d100      	bne.n	800170a <I2C_IsErrorOccurred+0x2e>
 8001708:	e08e      	b.n	8001828 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2210      	movs	r2, #16
 8001710:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001712:	e06c      	b.n	80017ee <I2C_IsErrorOccurred+0x112>
 8001714:	2427      	movs	r4, #39	; 0x27
 8001716:	193b      	adds	r3, r7, r4
 8001718:	193a      	adds	r2, r7, r4
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3301      	adds	r3, #1
 8001722:	d064      	beq.n	80017ee <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001724:	f7ff f8c6 	bl	80008b4 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	429a      	cmp	r2, r3
 8001732:	d306      	bcc.n	8001742 <I2C_IsErrorOccurred+0x66>
 8001734:	193b      	adds	r3, r7, r4
 8001736:	193a      	adds	r2, r7, r4
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d155      	bne.n	80017ee <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	01db      	lsls	r3, r3, #7
 800174c:	4013      	ands	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001750:	2013      	movs	r0, #19
 8001752:	183b      	adds	r3, r7, r0
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	2142      	movs	r1, #66	; 0x42
 8001758:	5c52      	ldrb	r2, [r2, r1]
 800175a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	401a      	ands	r2, r3
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	429a      	cmp	r2, r3
 800176e:	d137      	bne.n	80017e0 <I2C_IsErrorOccurred+0x104>
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	01db      	lsls	r3, r3, #7
 8001776:	429a      	cmp	r2, r3
 8001778:	d032      	beq.n	80017e0 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 800177a:	183b      	adds	r3, r7, r0
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b20      	cmp	r3, #32
 8001780:	d02e      	beq.n	80017e0 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	01c9      	lsls	r1, r1, #7
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001794:	f7ff f88e 	bl	80008b4 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800179c:	e020      	b.n	80017e0 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800179e:	f7ff f889 	bl	80008b4 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2027      	movs	r0, #39	; 0x27
 80017aa:	183a      	adds	r2, r7, r0
 80017ac:	1839      	adds	r1, r7, r0
 80017ae:	7809      	ldrb	r1, [r1, #0]
 80017b0:	7011      	strb	r1, [r2, #0]
 80017b2:	2b19      	cmp	r3, #25
 80017b4:	d914      	bls.n	80017e0 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	2220      	movs	r2, #32
 80017bc:	431a      	orrs	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2241      	movs	r2, #65	; 0x41
 80017c6:	2120      	movs	r1, #32
 80017c8:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2242      	movs	r2, #66	; 0x42
 80017ce:	2100      	movs	r1, #0
 80017d0:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	2100      	movs	r1, #0
 80017d8:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 80017da:	183b      	adds	r3, r7, r0
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2220      	movs	r2, #32
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	d1d7      	bne.n	800179e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2220      	movs	r2, #32
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d004      	beq.n	8001806 <I2C_IsErrorOccurred+0x12a>
 80017fc:	2327      	movs	r3, #39	; 0x27
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d086      	beq.n	8001714 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001806:	2327      	movs	r3, #39	; 0x27
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d103      	bne.n	8001818 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2220      	movs	r2, #32
 8001816:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	2204      	movs	r2, #4
 800181c:	4313      	orrs	r3, r2
 800181e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001820:	2327      	movs	r3, #39	; 0x27
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4013      	ands	r3, r2
 8001838:	d00c      	beq.n	8001854 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	2201      	movs	r2, #1
 800183e:	4313      	orrs	r3, r2
 8001840:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	0052      	lsls	r2, r2, #1
 800184a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800184c:	2327      	movs	r3, #39	; 0x27
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4013      	ands	r3, r2
 800185c:	d00c      	beq.n	8001878 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	2208      	movs	r2, #8
 8001862:	4313      	orrs	r3, r2
 8001864:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	00d2      	lsls	r2, r2, #3
 800186e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001870:	2327      	movs	r3, #39	; 0x27
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d00c      	beq.n	800189c <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	2202      	movs	r2, #2
 8001886:	4313      	orrs	r3, r2
 8001888:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001894:	2327      	movs	r3, #39	; 0x27
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800189c:	2327      	movs	r3, #39	; 0x27
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01d      	beq.n	80018e2 <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff fe3b 	bl	8001524 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	490d      	ldr	r1, [pc, #52]	; (80018f0 <I2C_IsErrorOccurred+0x214>)
 80018ba:	400a      	ands	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2241      	movs	r2, #65	; 0x41
 80018ce:	2120      	movs	r1, #32
 80018d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2242      	movs	r2, #66	; 0x42
 80018d6:	2100      	movs	r1, #0
 80018d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2240      	movs	r2, #64	; 0x40
 80018de:	2100      	movs	r1, #0
 80018e0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80018e2:	2327      	movs	r3, #39	; 0x27
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	781b      	ldrb	r3, [r3, #0]
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b00b      	add	sp, #44	; 0x2c
 80018ee:	bd90      	pop	{r4, r7, pc}
 80018f0:	fe00e800 	.word	0xfe00e800

080018f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	0008      	movs	r0, r1
 80018fe:	0011      	movs	r1, r2
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	240a      	movs	r4, #10
 8001904:	193b      	adds	r3, r7, r4
 8001906:	1c02      	adds	r2, r0, #0
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	2009      	movs	r0, #9
 800190c:	183b      	adds	r3, r7, r0
 800190e:	1c0a      	adds	r2, r1, #0
 8001910:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001912:	193b      	adds	r3, r7, r4
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	059b      	lsls	r3, r3, #22
 8001918:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800191a:	183b      	adds	r3, r7, r0
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	0419      	lsls	r1, r3, #16
 8001920:	23ff      	movs	r3, #255	; 0xff
 8001922:	041b      	lsls	r3, r3, #16
 8001924:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001926:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800192c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192e:	4313      	orrs	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800193e:	0d51      	lsrs	r1, r2, #21
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	00d2      	lsls	r2, r2, #3
 8001944:	400a      	ands	r2, r1
 8001946:	4907      	ldr	r1, [pc, #28]	; (8001964 <I2C_TransferConfig+0x70>)
 8001948:	430a      	orrs	r2, r1
 800194a:	43d2      	mvns	r2, r2
 800194c:	401a      	ands	r2, r3
 800194e:	0011      	movs	r1, r2
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	b007      	add	sp, #28
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	03ff63ff 	.word	0x03ff63ff

08001968 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2241      	movs	r2, #65	; 0x41
 8001976:	5c9b      	ldrb	r3, [r3, r2]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b20      	cmp	r3, #32
 800197c:	d138      	bne.n	80019f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2240      	movs	r2, #64	; 0x40
 8001982:	5c9b      	ldrb	r3, [r3, r2]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001988:	2302      	movs	r3, #2
 800198a:	e032      	b.n	80019f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2240      	movs	r2, #64	; 0x40
 8001990:	2101      	movs	r1, #1
 8001992:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2241      	movs	r2, #65	; 0x41
 8001998:	2124      	movs	r1, #36	; 0x24
 800199a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2101      	movs	r1, #1
 80019a8:	438a      	bics	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4911      	ldr	r1, [pc, #68]	; (80019fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2101      	movs	r1, #1
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2241      	movs	r2, #65	; 0x41
 80019e0:	2120      	movs	r1, #32
 80019e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2240      	movs	r2, #64	; 0x40
 80019e8:	2100      	movs	r1, #0
 80019ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e000      	b.n	80019f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
  }
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b002      	add	sp, #8
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	ffffefff 	.word	0xffffefff

08001a00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2241      	movs	r2, #65	; 0x41
 8001a0e:	5c9b      	ldrb	r3, [r3, r2]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	d139      	bne.n	8001a8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2240      	movs	r2, #64	; 0x40
 8001a1a:	5c9b      	ldrb	r3, [r3, r2]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e033      	b.n	8001a8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	2101      	movs	r1, #1
 8001a2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2241      	movs	r2, #65	; 0x41
 8001a30:	2124      	movs	r1, #36	; 0x24
 8001a32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2101      	movs	r1, #1
 8001a40:	438a      	bics	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2241      	movs	r2, #65	; 0x41
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2240      	movs	r2, #64	; 0x40
 8001a82:	2100      	movs	r1, #0
 8001a84:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a8a:	2302      	movs	r3, #2
  }
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b004      	add	sp, #16
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	fffff0ff 	.word	0xfffff0ff

08001a98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d11f      	bne.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	0013      	movs	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	189b      	adds	r3, r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4912      	ldr	r1, [pc, #72]	; (8001b14 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7fe fb24 	bl	8000118 <__udivsi3>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ad6:	e008      	b.n	8001aea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e001      	b.n	8001aea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e009      	b.n	8001afe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	401a      	ands	r2, r3
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d0ed      	beq.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b004      	add	sp, #16
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	fffff9ff 	.word	0xfffff9ff
 8001b10:	20000000 	.word	0x20000000
 8001b14:	000f4240 	.word	0x000f4240

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e2fe      	b.n	8002128 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	d100      	bne.n	8001b36 <HAL_RCC_OscConfig+0x1e>
 8001b34:	e07c      	b.n	8001c30 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b36:	4bc3      	ldr	r3, [pc, #780]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2238      	movs	r2, #56	; 0x38
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b40:	4bc0      	ldr	r3, [pc, #768]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2203      	movs	r2, #3
 8001b46:	4013      	ands	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	2b10      	cmp	r3, #16
 8001b4e:	d102      	bne.n	8001b56 <HAL_RCC_OscConfig+0x3e>
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d002      	beq.n	8001b5c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d10b      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	4bb9      	ldr	r3, [pc, #740]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	029b      	lsls	r3, r3, #10
 8001b64:	4013      	ands	r3, r2
 8001b66:	d062      	beq.n	8001c2e <HAL_RCC_OscConfig+0x116>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d15e      	bne.n	8001c2e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e2d9      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	025b      	lsls	r3, r3, #9
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_OscConfig+0x78>
 8001b80:	4bb0      	ldr	r3, [pc, #704]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4baf      	ldr	r3, [pc, #700]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	0249      	lsls	r1, r1, #9
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e020      	b.n	8001bd2 <HAL_RCC_OscConfig+0xba>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	23a0      	movs	r3, #160	; 0xa0
 8001b96:	02db      	lsls	r3, r3, #11
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d10e      	bne.n	8001bba <HAL_RCC_OscConfig+0xa2>
 8001b9c:	4ba9      	ldr	r3, [pc, #676]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4ba8      	ldr	r3, [pc, #672]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	02c9      	lsls	r1, r1, #11
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	4ba6      	ldr	r3, [pc, #664]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4ba5      	ldr	r3, [pc, #660]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	0249      	lsls	r1, r1, #9
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e00b      	b.n	8001bd2 <HAL_RCC_OscConfig+0xba>
 8001bba:	4ba2      	ldr	r3, [pc, #648]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4ba1      	ldr	r3, [pc, #644]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001bc0:	49a1      	ldr	r1, [pc, #644]	; (8001e48 <HAL_RCC_OscConfig+0x330>)
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	4b9f      	ldr	r3, [pc, #636]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b9e      	ldr	r3, [pc, #632]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	499f      	ldr	r1, [pc, #636]	; (8001e4c <HAL_RCC_OscConfig+0x334>)
 8001bce:	400a      	ands	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d014      	beq.n	8001c04 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7fe fe6b 	bl	80008b4 <HAL_GetTick>
 8001bde:	0003      	movs	r3, r0
 8001be0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7fe fe66 	bl	80008b4 <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e298      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf6:	4b93      	ldr	r3, [pc, #588]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	029b      	lsls	r3, r3, #10
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0xcc>
 8001c02:	e015      	b.n	8001c30 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7fe fe56 	bl	80008b4 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0e:	f7fe fe51 	bl	80008b4 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b64      	cmp	r3, #100	; 0x64
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e283      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c20:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	029b      	lsls	r3, r3, #10
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0xf6>
 8001c2c:	e000      	b.n	8001c30 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2202      	movs	r2, #2
 8001c36:	4013      	ands	r3, r2
 8001c38:	d100      	bne.n	8001c3c <HAL_RCC_OscConfig+0x124>
 8001c3a:	e099      	b.n	8001d70 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3c:	4b81      	ldr	r3, [pc, #516]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2238      	movs	r2, #56	; 0x38
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c46:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d102      	bne.n	8001c5c <HAL_RCC_OscConfig+0x144>
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d002      	beq.n	8001c62 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d135      	bne.n	8001cce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c62:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x162>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e256      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7a:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a74      	ldr	r2, [pc, #464]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	021a      	lsls	r2, r3, #8
 8001c8a:	4b6e      	ldr	r3, [pc, #440]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d112      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c96:	4b6b      	ldr	r3, [pc, #428]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	; (8001e54 <HAL_RCC_OscConfig+0x33c>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001caa:	4b66      	ldr	r3, [pc, #408]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0adb      	lsrs	r3, r3, #11
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	4a68      	ldr	r2, [pc, #416]	; (8001e58 <HAL_RCC_OscConfig+0x340>)
 8001cb6:	40da      	lsrs	r2, r3
 8001cb8:	4b68      	ldr	r3, [pc, #416]	; (8001e5c <HAL_RCC_OscConfig+0x344>)
 8001cba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cbc:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <HAL_RCC_OscConfig+0x348>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7fe fd9b 	bl	80007fc <HAL_InitTick>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d051      	beq.n	8001d6e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e22c      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d030      	beq.n	8001d38 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cd6:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a5e      	ldr	r2, [pc, #376]	; (8001e54 <HAL_RCC_OscConfig+0x33c>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	4b57      	ldr	r3, [pc, #348]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001cea:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4b55      	ldr	r3, [pc, #340]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001cf0:	2180      	movs	r1, #128	; 0x80
 8001cf2:	0049      	lsls	r1, r1, #1
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7fe fddc 	bl	80008b4 <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d02:	f7fe fdd7 	bl	80008b4 <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e209      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4a4a      	ldr	r2, [pc, #296]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	0019      	movs	r1, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	021a      	lsls	r2, r3, #8
 8001d30:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	e01b      	b.n	8001d70 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001d3e:	4949      	ldr	r1, [pc, #292]	; (8001e64 <HAL_RCC_OscConfig+0x34c>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7fe fdb6 	bl	80008b4 <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7fe fdb1 	bl	80008b4 <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e1e3      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d60:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x236>
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d6e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2208      	movs	r2, #8
 8001d76:	4013      	ands	r3, r2
 8001d78:	d047      	beq.n	8001e0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d7a:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2238      	movs	r2, #56	; 0x38
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b18      	cmp	r3, #24
 8001d84:	d10a      	bne.n	8001d9c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001d86:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d03c      	beq.n	8001e0a <HAL_RCC_OscConfig+0x2f2>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d138      	bne.n	8001e0a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e1c5      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d019      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001da6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001da8:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001daa:	2101      	movs	r1, #1
 8001dac:	430a      	orrs	r2, r1
 8001dae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7fe fd80 	bl	80008b4 <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dba:	f7fe fd7b 	bl	80008b4 <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e1ad      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d0f1      	beq.n	8001dba <HAL_RCC_OscConfig+0x2a2>
 8001dd6:	e018      	b.n	8001e0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001dda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7fe fd66 	bl	80008b4 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dee:	f7fe fd61 	bl	80008b4 <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e193      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e04:	2202      	movs	r2, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	d1f1      	bne.n	8001dee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	4013      	ands	r3, r2
 8001e12:	d100      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2fe>
 8001e14:	e0c6      	b.n	8001fa4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	231f      	movs	r3, #31
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2238      	movs	r2, #56	; 0x38
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d11e      	bne.n	8001e68 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_OscConfig+0x32c>)
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	d100      	bne.n	8001e36 <HAL_RCC_OscConfig+0x31e>
 8001e34:	e0b6      	b.n	8001fa4 <HAL_RCC_OscConfig+0x48c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d000      	beq.n	8001e40 <HAL_RCC_OscConfig+0x328>
 8001e3e:	e0b1      	b.n	8001fa4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e171      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	fffeffff 	.word	0xfffeffff
 8001e4c:	fffbffff 	.word	0xfffbffff
 8001e50:	ffff80ff 	.word	0xffff80ff
 8001e54:	ffffc7ff 	.word	0xffffc7ff
 8001e58:	00f42400 	.word	0x00f42400
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000004 	.word	0x20000004
 8001e64:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e68:	4bb1      	ldr	r3, [pc, #708]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	055b      	lsls	r3, r3, #21
 8001e70:	4013      	ands	r3, r2
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_OscConfig+0x360>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x362>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d011      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4bac      	ldr	r3, [pc, #688]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e82:	4bab      	ldr	r3, [pc, #684]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	0549      	lsls	r1, r1, #21
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e8c:	4ba8      	ldr	r3, [pc, #672]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	055b      	lsls	r3, r3, #21
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001e9a:	231f      	movs	r3, #31
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea2:	4ba4      	ldr	r3, [pc, #656]	; (8002134 <HAL_RCC_OscConfig+0x61c>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d11a      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eae:	4ba1      	ldr	r3, [pc, #644]	; (8002134 <HAL_RCC_OscConfig+0x61c>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4ba0      	ldr	r3, [pc, #640]	; (8002134 <HAL_RCC_OscConfig+0x61c>)
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	0049      	lsls	r1, r1, #1
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fcfa 	bl	80008b4 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7fe fcf5 	bl	80008b4 <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e127      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed8:	4b96      	ldr	r3, [pc, #600]	; (8002134 <HAL_RCC_OscConfig+0x61c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x3e2>
 8001eec:	4b90      	ldr	r3, [pc, #576]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001eee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ef0:	4b8f      	ldr	r3, [pc, #572]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ef8:	e01c      	b.n	8001f34 <HAL_RCC_OscConfig+0x41c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x404>
 8001f02:	4b8b      	ldr	r3, [pc, #556]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f06:	4b8a      	ldr	r3, [pc, #552]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f08:	2104      	movs	r1, #4
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f0e:	4b88      	ldr	r3, [pc, #544]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f12:	4b87      	ldr	r3, [pc, #540]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	430a      	orrs	r2, r1
 8001f18:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0x41c>
 8001f1c:	4b84      	ldr	r3, [pc, #528]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f20:	4b83      	ldr	r3, [pc, #524]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	438a      	bics	r2, r1
 8001f26:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f28:	4b81      	ldr	r3, [pc, #516]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f2c:	4b80      	ldr	r3, [pc, #512]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f2e:	2104      	movs	r1, #4
 8001f30:	438a      	bics	r2, r1
 8001f32:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d014      	beq.n	8001f66 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fcba 	bl	80008b4 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f44:	e009      	b.n	8001f5a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fcb5 	bl	80008b4 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	4a79      	ldr	r2, [pc, #484]	; (8002138 <HAL_RCC_OscConfig+0x620>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0e6      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5a:	4b75      	ldr	r3, [pc, #468]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4013      	ands	r3, r2
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x42e>
 8001f64:	e013      	b.n	8001f8e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe fca5 	bl	80008b4 <HAL_GetTick>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f6e:	e009      	b.n	8001f84 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7fe fca0 	bl	80008b4 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	4a6f      	ldr	r2, [pc, #444]	; (8002138 <HAL_RCC_OscConfig+0x620>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e0d1      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f84:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	2202      	movs	r2, #2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f8e:	231f      	movs	r3, #31
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f98:	4b65      	ldr	r3, [pc, #404]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f9c:	4b64      	ldr	r3, [pc, #400]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001f9e:	4967      	ldr	r1, [pc, #412]	; (800213c <HAL_RCC_OscConfig+0x624>)
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d100      	bne.n	8001fae <HAL_RCC_OscConfig+0x496>
 8001fac:	e0bb      	b.n	8002126 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fae:	4b60      	ldr	r3, [pc, #384]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2238      	movs	r2, #56	; 0x38
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d100      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4a4>
 8001fba:	e07b      	b.n	80020b4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d156      	bne.n	8002072 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b5a      	ldr	r3, [pc, #360]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001fca:	495d      	ldr	r1, [pc, #372]	; (8002140 <HAL_RCC_OscConfig+0x628>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fc70 	bl	80008b4 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7fe fc6b 	bl	80008b4 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e09d      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	049b      	lsls	r3, r3, #18
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff8:	4b4d      	ldr	r3, [pc, #308]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_RCC_OscConfig+0x62c>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1a      	ldr	r2, [r3, #32]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002024:	431a      	orrs	r2, r3
 8002026:	4b42      	ldr	r3, [pc, #264]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8002028:	430a      	orrs	r2, r1
 800202a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800202c:	4b40      	ldr	r3, [pc, #256]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	0449      	lsls	r1, r1, #17
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	4b3c      	ldr	r3, [pc, #240]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	0549      	lsls	r1, r1, #21
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7fe fc34 	bl	80008b4 <HAL_GetTick>
 800204c:	0003      	movs	r3, r0
 800204e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7fe fc2f 	bl	80008b4 <HAL_GetTick>
 8002056:	0002      	movs	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e061      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002064:	4b32      	ldr	r3, [pc, #200]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	049b      	lsls	r3, r3, #18
 800206c:	4013      	ands	r3, r2
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x53a>
 8002070:	e059      	b.n	8002126 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 8002078:	4931      	ldr	r1, [pc, #196]	; (8002140 <HAL_RCC_OscConfig+0x628>)
 800207a:	400a      	ands	r2, r1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe fc19 	bl	80008b4 <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7fe fc14 	bl	80008b4 <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e046      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800209a:	4b25      	ldr	r3, [pc, #148]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	049b      	lsls	r3, r3, #18
 80020a2:	4013      	ands	r3, r2
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 80020ac:	4926      	ldr	r1, [pc, #152]	; (8002148 <HAL_RCC_OscConfig+0x630>)
 80020ae:	400a      	ands	r2, r1
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	e038      	b.n	8002126 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e033      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_RCC_OscConfig+0x618>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2203      	movs	r2, #3
 80020ca:	401a      	ands	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d126      	bne.n	8002122 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2270      	movs	r2, #112	; 0x70
 80020d8:	401a      	ands	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d11f      	bne.n	8002122 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	23fe      	movs	r3, #254	; 0xfe
 80020e6:	01db      	lsls	r3, r3, #7
 80020e8:	401a      	ands	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d116      	bne.n	8002122 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	23f8      	movs	r3, #248	; 0xf8
 80020f8:	039b      	lsls	r3, r3, #14
 80020fa:	401a      	ands	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d10e      	bne.n	8002122 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	23e0      	movs	r3, #224	; 0xe0
 8002108:	051b      	lsls	r3, r3, #20
 800210a:	401a      	ands	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	0f5b      	lsrs	r3, r3, #29
 8002118:	075a      	lsls	r2, r3, #29
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b008      	add	sp, #32
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	40007000 	.word	0x40007000
 8002138:	00001388 	.word	0x00001388
 800213c:	efffffff 	.word	0xefffffff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	11c1808c 	.word	0x11c1808c
 8002148:	eefefffc 	.word	0xeefefffc

0800214c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0e9      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002160:	4b76      	ldr	r3, [pc, #472]	; (800233c <HAL_RCC_ClockConfig+0x1f0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2207      	movs	r2, #7
 8002166:	4013      	ands	r3, r2
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d91e      	bls.n	80021ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b73      	ldr	r3, [pc, #460]	; (800233c <HAL_RCC_ClockConfig+0x1f0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2207      	movs	r2, #7
 8002174:	4393      	bics	r3, r2
 8002176:	0019      	movs	r1, r3
 8002178:	4b70      	ldr	r3, [pc, #448]	; (800233c <HAL_RCC_ClockConfig+0x1f0>)
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002180:	f7fe fb98 	bl	80008b4 <HAL_GetTick>
 8002184:	0003      	movs	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002188:	e009      	b.n	800219e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218a:	f7fe fb93 	bl	80008b4 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	4a6a      	ldr	r2, [pc, #424]	; (8002340 <HAL_RCC_ClockConfig+0x1f4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0ca      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <HAL_RCC_ClockConfig+0x1f0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2207      	movs	r2, #7
 80021a4:	4013      	ands	r3, r2
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1ee      	bne.n	800218a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d015      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2204      	movs	r2, #4
 80021bc:	4013      	ands	r3, r2
 80021be:	d006      	beq.n	80021ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021c0:	4b60      	ldr	r3, [pc, #384]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 80021c6:	21e0      	movs	r1, #224	; 0xe0
 80021c8:	01c9      	lsls	r1, r1, #7
 80021ca:	430a      	orrs	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ce:	4b5d      	ldr	r3, [pc, #372]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4a5d      	ldr	r2, [pc, #372]	; (8002348 <HAL_RCC_ClockConfig+0x1fc>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	d057      	beq.n	800229c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f4:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	029b      	lsls	r3, r3, #10
 80021fc:	4013      	ands	r3, r2
 80021fe:	d12b      	bne.n	8002258 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e097      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d107      	bne.n	800221c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220c:	4b4d      	ldr	r3, [pc, #308]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	049b      	lsls	r3, r3, #18
 8002214:	4013      	ands	r3, r2
 8002216:	d11f      	bne.n	8002258 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e08b      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002224:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4013      	ands	r3, r2
 800222e:	d113      	bne.n	8002258 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e07f      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d106      	bne.n	800224a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800223c:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 800223e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002240:	2202      	movs	r2, #2
 8002242:	4013      	ands	r3, r2
 8002244:	d108      	bne.n	8002258 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e074      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224a:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e06d      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002258:	4b3a      	ldr	r3, [pc, #232]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2207      	movs	r2, #7
 800225e:	4393      	bics	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4b37      	ldr	r3, [pc, #220]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 8002268:	430a      	orrs	r2, r1
 800226a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226c:	f7fe fb22 	bl	80008b4 <HAL_GetTick>
 8002270:	0003      	movs	r3, r0
 8002272:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002274:	e009      	b.n	800228a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002276:	f7fe fb1d 	bl	80008b4 <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	4a2f      	ldr	r2, [pc, #188]	; (8002340 <HAL_RCC_ClockConfig+0x1f4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e054      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2238      	movs	r2, #56	; 0x38
 8002290:	401a      	ands	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	429a      	cmp	r2, r3
 800229a:	d1ec      	bne.n	8002276 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800229c:	4b27      	ldr	r3, [pc, #156]	; (800233c <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2207      	movs	r2, #7
 80022a2:	4013      	ands	r3, r2
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d21e      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_ClockConfig+0x1f0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2207      	movs	r2, #7
 80022b0:	4393      	bics	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022bc:	f7fe fafa 	bl	80008b4 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022c4:	e009      	b.n	80022da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c6:	f7fe faf5 	bl	80008b4 <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	4a1b      	ldr	r2, [pc, #108]	; (8002340 <HAL_RCC_ClockConfig+0x1f4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e02c      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_RCC_ClockConfig+0x1f0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2207      	movs	r2, #7
 80022e0:	4013      	ands	r3, r2
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1ee      	bne.n	80022c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2204      	movs	r2, #4
 80022ee:	4013      	ands	r3, r2
 80022f0:	d009      	beq.n	8002306 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <HAL_RCC_ClockConfig+0x200>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 8002302:	430a      	orrs	r2, r1
 8002304:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002306:	f000 f829 	bl	800235c <HAL_RCC_GetSysClockFreq>
 800230a:	0001      	movs	r1, r0
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_RCC_ClockConfig+0x1f8>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	220f      	movs	r2, #15
 8002314:	401a      	ands	r2, r3
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_RCC_ClockConfig+0x204>)
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	58d3      	ldr	r3, [r2, r3]
 800231c:	221f      	movs	r2, #31
 800231e:	4013      	ands	r3, r2
 8002320:	000a      	movs	r2, r1
 8002322:	40da      	lsrs	r2, r3
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_ClockConfig+0x208>)
 8002326:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_ClockConfig+0x20c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0018      	movs	r0, r3
 800232e:	f7fe fa65 	bl	80007fc <HAL_InitTick>
 8002332:	0003      	movs	r3, r0
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b004      	add	sp, #16
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40022000 	.word	0x40022000
 8002340:	00001388 	.word	0x00001388
 8002344:	40021000 	.word	0x40021000
 8002348:	fffff0ff 	.word	0xfffff0ff
 800234c:	ffff8fff 	.word	0xffff8fff
 8002350:	080037a4 	.word	0x080037a4
 8002354:	20000000 	.word	0x20000000
 8002358:	20000004 	.word	0x20000004

0800235c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002362:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2238      	movs	r2, #56	; 0x38
 8002368:	4013      	ands	r3, r2
 800236a:	d10f      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800236c:	4b39      	ldr	r3, [pc, #228]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0adb      	lsrs	r3, r3, #11
 8002372:	2207      	movs	r2, #7
 8002374:	4013      	ands	r3, r2
 8002376:	2201      	movs	r2, #1
 8002378:	409a      	lsls	r2, r3
 800237a:	0013      	movs	r3, r2
 800237c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800237e:	6839      	ldr	r1, [r7, #0]
 8002380:	4835      	ldr	r0, [pc, #212]	; (8002458 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002382:	f7fd fec9 	bl	8000118 <__udivsi3>
 8002386:	0003      	movs	r3, r0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	e05d      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800238c:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf8>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2238      	movs	r2, #56	; 0x38
 8002392:	4013      	ands	r3, r2
 8002394:	2b08      	cmp	r3, #8
 8002396:	d102      	bne.n	800239e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002398:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_RCC_GetSysClockFreq+0x100>)
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	e054      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800239e:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2238      	movs	r2, #56	; 0x38
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d138      	bne.n	800241c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80023aa:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2203      	movs	r2, #3
 80023b0:	4013      	ands	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023b4:	4b27      	ldr	r3, [pc, #156]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	2207      	movs	r2, #7
 80023bc:	4013      	ands	r3, r2
 80023be:	3301      	adds	r3, #1
 80023c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d10d      	bne.n	80023e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	4824      	ldr	r0, [pc, #144]	; (800245c <HAL_RCC_GetSysClockFreq+0x100>)
 80023cc:	f7fd fea4 	bl	8000118 <__udivsi3>
 80023d0:	0003      	movs	r3, r0
 80023d2:	0019      	movs	r1, r3
 80023d4:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	227f      	movs	r2, #127	; 0x7f
 80023dc:	4013      	ands	r3, r2
 80023de:	434b      	muls	r3, r1
 80023e0:	617b      	str	r3, [r7, #20]
        break;
 80023e2:	e00d      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	481c      	ldr	r0, [pc, #112]	; (8002458 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023e8:	f7fd fe96 	bl	8000118 <__udivsi3>
 80023ec:	0003      	movs	r3, r0
 80023ee:	0019      	movs	r1, r3
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	227f      	movs	r2, #127	; 0x7f
 80023f8:	4013      	ands	r3, r2
 80023fa:	434b      	muls	r3, r1
 80023fc:	617b      	str	r3, [r7, #20]
        break;
 80023fe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0f5b      	lsrs	r3, r3, #29
 8002406:	2207      	movs	r2, #7
 8002408:	4013      	ands	r3, r2
 800240a:	3301      	adds	r3, #1
 800240c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	6978      	ldr	r0, [r7, #20]
 8002412:	f7fd fe81 	bl	8000118 <__udivsi3>
 8002416:	0003      	movs	r3, r0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	e015      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf8>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2238      	movs	r2, #56	; 0x38
 8002422:	4013      	ands	r3, r2
 8002424:	2b20      	cmp	r3, #32
 8002426:	d103      	bne.n	8002430 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2238      	movs	r2, #56	; 0x38
 8002436:	4013      	ands	r3, r2
 8002438:	2b18      	cmp	r3, #24
 800243a:	d103      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800243c:	23fa      	movs	r3, #250	; 0xfa
 800243e:	01db      	lsls	r3, r3, #7
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e001      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002448:	693b      	ldr	r3, [r7, #16]
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b006      	add	sp, #24
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	40021000 	.word	0x40021000
 8002458:	00f42400 	.word	0x00f42400
 800245c:	007a1200 	.word	0x007a1200

08002460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002468:	2313      	movs	r3, #19
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002470:	2312      	movs	r3, #18
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	029b      	lsls	r3, r3, #10
 8002480:	4013      	ands	r3, r2
 8002482:	d100      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002484:	e0a3      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2011      	movs	r0, #17
 8002488:	183b      	adds	r3, r7, r0
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4bc3      	ldr	r3, [pc, #780]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	055b      	lsls	r3, r3, #21
 8002496:	4013      	ands	r3, r2
 8002498:	d110      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4bc0      	ldr	r3, [pc, #768]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800249c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800249e:	4bbf      	ldr	r3, [pc, #764]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	0549      	lsls	r1, r1, #21
 80024a4:	430a      	orrs	r2, r1
 80024a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80024a8:	4bbc      	ldr	r3, [pc, #752]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	055b      	lsls	r3, r3, #21
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b6:	183b      	adds	r3, r7, r0
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024bc:	4bb8      	ldr	r3, [pc, #736]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4bb7      	ldr	r3, [pc, #732]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	0049      	lsls	r1, r1, #1
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024ca:	f7fe f9f3 	bl	80008b4 <HAL_GetTick>
 80024ce:	0003      	movs	r3, r0
 80024d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024d2:	e00b      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d4:	f7fe f9ee 	bl	80008b4 <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d904      	bls.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80024e2:	2313      	movs	r3, #19
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	2203      	movs	r2, #3
 80024e8:	701a      	strb	r2, [r3, #0]
        break;
 80024ea:	e005      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ec:	4bac      	ldr	r3, [pc, #688]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	d0ed      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80024f8:	2313      	movs	r3, #19
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d154      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002502:	4ba6      	ldr	r3, [pc, #664]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002504:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002506:	23c0      	movs	r3, #192	; 0xc0
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4013      	ands	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d019      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	429a      	cmp	r2, r3
 800251c:	d014      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800251e:	4b9f      	ldr	r3, [pc, #636]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	4aa0      	ldr	r2, [pc, #640]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002524:	4013      	ands	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002528:	4b9c      	ldr	r3, [pc, #624]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800252a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800252c:	4b9b      	ldr	r3, [pc, #620]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800252e:	2180      	movs	r1, #128	; 0x80
 8002530:	0249      	lsls	r1, r1, #9
 8002532:	430a      	orrs	r2, r1
 8002534:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002536:	4b99      	ldr	r3, [pc, #612]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002538:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800253a:	4b98      	ldr	r3, [pc, #608]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800253c:	499a      	ldr	r1, [pc, #616]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800253e:	400a      	ands	r2, r1
 8002540:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002542:	4b96      	ldr	r3, [pc, #600]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2201      	movs	r2, #1
 800254c:	4013      	ands	r3, r2
 800254e:	d016      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe f9b0 	bl	80008b4 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002558:	e00c      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7fe f9ab 	bl	80008b4 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	4a91      	ldr	r2, [pc, #580]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d904      	bls.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800256a:	2313      	movs	r3, #19
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2203      	movs	r2, #3
 8002570:	701a      	strb	r2, [r3, #0]
            break;
 8002572:	e004      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002574:	4b89      	ldr	r3, [pc, #548]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	2202      	movs	r2, #2
 800257a:	4013      	ands	r3, r2
 800257c:	d0ed      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800257e:	2313      	movs	r3, #19
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002588:	4b84      	ldr	r3, [pc, #528]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	4a85      	ldr	r2, [pc, #532]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002596:	4b81      	ldr	r3, [pc, #516]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002598:	430a      	orrs	r2, r1
 800259a:	65da      	str	r2, [r3, #92]	; 0x5c
 800259c:	e00c      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800259e:	2312      	movs	r3, #18
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2213      	movs	r2, #19
 80025a4:	18ba      	adds	r2, r7, r2
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	e005      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ac:	2312      	movs	r3, #18
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	2213      	movs	r2, #19
 80025b2:	18ba      	adds	r2, r7, r2
 80025b4:	7812      	ldrb	r2, [r2, #0]
 80025b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025b8:	2311      	movs	r3, #17
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c2:	4b76      	ldr	r3, [pc, #472]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025c6:	4b75      	ldr	r3, [pc, #468]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c8:	4979      	ldr	r1, [pc, #484]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80025ca:	400a      	ands	r2, r1
 80025cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2201      	movs	r2, #1
 80025d4:	4013      	ands	r3, r2
 80025d6:	d009      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025d8:	4b70      	ldr	r3, [pc, #448]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	2203      	movs	r2, #3
 80025de:	4393      	bics	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4b6d      	ldr	r3, [pc, #436]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e8:	430a      	orrs	r2, r1
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2202      	movs	r2, #2
 80025f2:	4013      	ands	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f6:	4b69      	ldr	r3, [pc, #420]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	220c      	movs	r2, #12
 80025fc:	4393      	bics	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b65      	ldr	r3, [pc, #404]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002606:	430a      	orrs	r2, r1
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2210      	movs	r2, #16
 8002610:	4013      	ands	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002614:	4b61      	ldr	r3, [pc, #388]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	4a66      	ldr	r2, [pc, #408]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	4b5e      	ldr	r3, [pc, #376]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002624:	430a      	orrs	r2, r1
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4013      	ands	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002634:	4b59      	ldr	r3, [pc, #356]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	4a5f      	ldr	r2, [pc, #380]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800263a:	4013      	ands	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	4b56      	ldr	r3, [pc, #344]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002644:	430a      	orrs	r2, r1
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4013      	ands	r3, r2
 8002652:	d009      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002654:	4b51      	ldr	r3, [pc, #324]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	4a58      	ldr	r2, [pc, #352]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800265a:	4013      	ands	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	4b4e      	ldr	r3, [pc, #312]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002664:	430a      	orrs	r2, r1
 8002666:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2220      	movs	r2, #32
 800266e:	4013      	ands	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002672:	4b4a      	ldr	r3, [pc, #296]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	4a52      	ldr	r2, [pc, #328]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002678:	4013      	ands	r3, r2
 800267a:	0019      	movs	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	4b46      	ldr	r3, [pc, #280]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002682:	430a      	orrs	r2, r1
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	01db      	lsls	r3, r3, #7
 800268e:	4013      	ands	r3, r2
 8002690:	d015      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002692:	4b42      	ldr	r3, [pc, #264]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	0899      	lsrs	r1, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1a      	ldr	r2, [r3, #32]
 800269e:	4b3f      	ldr	r3, [pc, #252]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a0:	430a      	orrs	r2, r1
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1a      	ldr	r2, [r3, #32]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	05db      	lsls	r3, r3, #23
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d106      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026b0:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	4b39      	ldr	r3, [pc, #228]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026b6:	2180      	movs	r1, #128	; 0x80
 80026b8:	0249      	lsls	r1, r1, #9
 80026ba:	430a      	orrs	r2, r1
 80026bc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	031b      	lsls	r3, r3, #12
 80026c6:	4013      	ands	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026ca:	4b34      	ldr	r3, [pc, #208]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	2240      	movs	r2, #64	; 0x40
 80026d0:	4393      	bics	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d8:	4b30      	ldr	r3, [pc, #192]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	039b      	lsls	r3, r3, #14
 80026e6:	4013      	ands	r3, r2
 80026e8:	d016      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f8:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026fa:	430a      	orrs	r2, r1
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	03db      	lsls	r3, r3, #15
 8002706:	429a      	cmp	r2, r3
 8002708:	d106      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002710:	2180      	movs	r1, #128	; 0x80
 8002712:	0449      	lsls	r1, r1, #17
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	03db      	lsls	r3, r3, #15
 8002720:	4013      	ands	r3, r2
 8002722:	d016      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	4a27      	ldr	r2, [pc, #156]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002732:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002734:	430a      	orrs	r2, r1
 8002736:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	045b      	lsls	r3, r3, #17
 8002740:	429a      	cmp	r2, r3
 8002742:	d106      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	0449      	lsls	r1, r1, #17
 800274e:	430a      	orrs	r2, r1
 8002750:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	4013      	ands	r3, r2
 800275c:	d016      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	4a1a      	ldr	r2, [pc, #104]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002764:	4013      	ands	r3, r2
 8002766:	0019      	movs	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800276e:	430a      	orrs	r2, r1
 8002770:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	01db      	lsls	r3, r3, #7
 800277a:	429a      	cmp	r2, r3
 800277c:	d106      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	0249      	lsls	r1, r1, #9
 8002788:	430a      	orrs	r2, r1
 800278a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800278c:	2312      	movs	r3, #18
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	781b      	ldrb	r3, [r3, #0]
}
 8002792:	0018      	movs	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	b006      	add	sp, #24
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	40021000 	.word	0x40021000
 80027a0:	40007000 	.word	0x40007000
 80027a4:	fffffcff 	.word	0xfffffcff
 80027a8:	fffeffff 	.word	0xfffeffff
 80027ac:	00001388 	.word	0x00001388
 80027b0:	efffffff 	.word	0xefffffff
 80027b4:	fffff3ff 	.word	0xfffff3ff
 80027b8:	fff3ffff 	.word	0xfff3ffff
 80027bc:	ffcfffff 	.word	0xffcfffff
 80027c0:	ffffcfff 	.word	0xffffcfff
 80027c4:	ffbfffff 	.word	0xffbfffff
 80027c8:	feffffff 	.word	0xfeffffff
 80027cc:	ffff3fff 	.word	0xffff3fff

080027d0 <__errno>:
 80027d0:	4b01      	ldr	r3, [pc, #4]	; (80027d8 <__errno+0x8>)
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	4770      	bx	lr
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	2000000c 	.word	0x2000000c

080027dc <__libc_init_array>:
 80027dc:	b570      	push	{r4, r5, r6, lr}
 80027de:	2600      	movs	r6, #0
 80027e0:	4d0c      	ldr	r5, [pc, #48]	; (8002814 <__libc_init_array+0x38>)
 80027e2:	4c0d      	ldr	r4, [pc, #52]	; (8002818 <__libc_init_array+0x3c>)
 80027e4:	1b64      	subs	r4, r4, r5
 80027e6:	10a4      	asrs	r4, r4, #2
 80027e8:	42a6      	cmp	r6, r4
 80027ea:	d109      	bne.n	8002800 <__libc_init_array+0x24>
 80027ec:	2600      	movs	r6, #0
 80027ee:	f000 ffbf 	bl	8003770 <_init>
 80027f2:	4d0a      	ldr	r5, [pc, #40]	; (800281c <__libc_init_array+0x40>)
 80027f4:	4c0a      	ldr	r4, [pc, #40]	; (8002820 <__libc_init_array+0x44>)
 80027f6:	1b64      	subs	r4, r4, r5
 80027f8:	10a4      	asrs	r4, r4, #2
 80027fa:	42a6      	cmp	r6, r4
 80027fc:	d105      	bne.n	800280a <__libc_init_array+0x2e>
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	00b3      	lsls	r3, r6, #2
 8002802:	58eb      	ldr	r3, [r5, r3]
 8002804:	4798      	blx	r3
 8002806:	3601      	adds	r6, #1
 8002808:	e7ee      	b.n	80027e8 <__libc_init_array+0xc>
 800280a:	00b3      	lsls	r3, r6, #2
 800280c:	58eb      	ldr	r3, [r5, r3]
 800280e:	4798      	blx	r3
 8002810:	3601      	adds	r6, #1
 8002812:	e7f2      	b.n	80027fa <__libc_init_array+0x1e>
 8002814:	0800387c 	.word	0x0800387c
 8002818:	0800387c 	.word	0x0800387c
 800281c:	0800387c 	.word	0x0800387c
 8002820:	08003880 	.word	0x08003880

08002824 <memset>:
 8002824:	0003      	movs	r3, r0
 8002826:	1882      	adds	r2, r0, r2
 8002828:	4293      	cmp	r3, r2
 800282a:	d100      	bne.n	800282e <memset+0xa>
 800282c:	4770      	bx	lr
 800282e:	7019      	strb	r1, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	e7f9      	b.n	8002828 <memset+0x4>

08002834 <iprintf>:
 8002834:	b40f      	push	{r0, r1, r2, r3}
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <iprintf+0x30>)
 8002838:	b513      	push	{r0, r1, r4, lr}
 800283a:	681c      	ldr	r4, [r3, #0]
 800283c:	2c00      	cmp	r4, #0
 800283e:	d005      	beq.n	800284c <iprintf+0x18>
 8002840:	69a3      	ldr	r3, [r4, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <iprintf+0x18>
 8002846:	0020      	movs	r0, r4
 8002848:	f000 f870 	bl	800292c <__sinit>
 800284c:	ab05      	add	r3, sp, #20
 800284e:	0020      	movs	r0, r4
 8002850:	9a04      	ldr	r2, [sp, #16]
 8002852:	68a1      	ldr	r1, [r4, #8]
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	f000 f993 	bl	8002b80 <_vfiprintf_r>
 800285a:	bc16      	pop	{r1, r2, r4}
 800285c:	bc08      	pop	{r3}
 800285e:	b004      	add	sp, #16
 8002860:	4718      	bx	r3
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	2000000c 	.word	0x2000000c

08002868 <std>:
 8002868:	2300      	movs	r3, #0
 800286a:	b510      	push	{r4, lr}
 800286c:	0004      	movs	r4, r0
 800286e:	6003      	str	r3, [r0, #0]
 8002870:	6043      	str	r3, [r0, #4]
 8002872:	6083      	str	r3, [r0, #8]
 8002874:	8181      	strh	r1, [r0, #12]
 8002876:	6643      	str	r3, [r0, #100]	; 0x64
 8002878:	0019      	movs	r1, r3
 800287a:	81c2      	strh	r2, [r0, #14]
 800287c:	6103      	str	r3, [r0, #16]
 800287e:	6143      	str	r3, [r0, #20]
 8002880:	6183      	str	r3, [r0, #24]
 8002882:	2208      	movs	r2, #8
 8002884:	305c      	adds	r0, #92	; 0x5c
 8002886:	f7ff ffcd 	bl	8002824 <memset>
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <std+0x38>)
 800288c:	6263      	str	r3, [r4, #36]	; 0x24
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <std+0x3c>)
 8002890:	6224      	str	r4, [r4, #32]
 8002892:	62a3      	str	r3, [r4, #40]	; 0x28
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <std+0x40>)
 8002896:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <std+0x44>)
 800289a:	6323      	str	r3, [r4, #48]	; 0x30
 800289c:	bd10      	pop	{r4, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	0800311d 	.word	0x0800311d
 80028a4:	08003145 	.word	0x08003145
 80028a8:	0800317d 	.word	0x0800317d
 80028ac:	080031a9 	.word	0x080031a9

080028b0 <_cleanup_r>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	4902      	ldr	r1, [pc, #8]	; (80028bc <_cleanup_r+0xc>)
 80028b4:	f000 f8ba 	bl	8002a2c <_fwalk_reent>
 80028b8:	bd10      	pop	{r4, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	080034b5 	.word	0x080034b5

080028c0 <__sfmoreglue>:
 80028c0:	b570      	push	{r4, r5, r6, lr}
 80028c2:	2568      	movs	r5, #104	; 0x68
 80028c4:	1e4a      	subs	r2, r1, #1
 80028c6:	4355      	muls	r5, r2
 80028c8:	000e      	movs	r6, r1
 80028ca:	0029      	movs	r1, r5
 80028cc:	3174      	adds	r1, #116	; 0x74
 80028ce:	f000 f8d1 	bl	8002a74 <_malloc_r>
 80028d2:	1e04      	subs	r4, r0, #0
 80028d4:	d008      	beq.n	80028e8 <__sfmoreglue+0x28>
 80028d6:	2100      	movs	r1, #0
 80028d8:	002a      	movs	r2, r5
 80028da:	6001      	str	r1, [r0, #0]
 80028dc:	6046      	str	r6, [r0, #4]
 80028de:	300c      	adds	r0, #12
 80028e0:	60a0      	str	r0, [r4, #8]
 80028e2:	3268      	adds	r2, #104	; 0x68
 80028e4:	f7ff ff9e 	bl	8002824 <memset>
 80028e8:	0020      	movs	r0, r4
 80028ea:	bd70      	pop	{r4, r5, r6, pc}

080028ec <__sfp_lock_acquire>:
 80028ec:	b510      	push	{r4, lr}
 80028ee:	4802      	ldr	r0, [pc, #8]	; (80028f8 <__sfp_lock_acquire+0xc>)
 80028f0:	f000 f8bd 	bl	8002a6e <__retarget_lock_acquire_recursive>
 80028f4:	bd10      	pop	{r4, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	200000f0 	.word	0x200000f0

080028fc <__sfp_lock_release>:
 80028fc:	b510      	push	{r4, lr}
 80028fe:	4802      	ldr	r0, [pc, #8]	; (8002908 <__sfp_lock_release+0xc>)
 8002900:	f000 f8b6 	bl	8002a70 <__retarget_lock_release_recursive>
 8002904:	bd10      	pop	{r4, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	200000f0 	.word	0x200000f0

0800290c <__sinit_lock_acquire>:
 800290c:	b510      	push	{r4, lr}
 800290e:	4802      	ldr	r0, [pc, #8]	; (8002918 <__sinit_lock_acquire+0xc>)
 8002910:	f000 f8ad 	bl	8002a6e <__retarget_lock_acquire_recursive>
 8002914:	bd10      	pop	{r4, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	200000eb 	.word	0x200000eb

0800291c <__sinit_lock_release>:
 800291c:	b510      	push	{r4, lr}
 800291e:	4802      	ldr	r0, [pc, #8]	; (8002928 <__sinit_lock_release+0xc>)
 8002920:	f000 f8a6 	bl	8002a70 <__retarget_lock_release_recursive>
 8002924:	bd10      	pop	{r4, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	200000eb 	.word	0x200000eb

0800292c <__sinit>:
 800292c:	b513      	push	{r0, r1, r4, lr}
 800292e:	0004      	movs	r4, r0
 8002930:	f7ff ffec 	bl	800290c <__sinit_lock_acquire>
 8002934:	69a3      	ldr	r3, [r4, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <__sinit+0x14>
 800293a:	f7ff ffef 	bl	800291c <__sinit_lock_release>
 800293e:	bd13      	pop	{r0, r1, r4, pc}
 8002940:	64a3      	str	r3, [r4, #72]	; 0x48
 8002942:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002944:	6523      	str	r3, [r4, #80]	; 0x50
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <__sinit+0x68>)
 8002948:	4a13      	ldr	r2, [pc, #76]	; (8002998 <__sinit+0x6c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	62a2      	str	r2, [r4, #40]	; 0x28
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	42a3      	cmp	r3, r4
 8002952:	d101      	bne.n	8002958 <__sinit+0x2c>
 8002954:	2301      	movs	r3, #1
 8002956:	61a3      	str	r3, [r4, #24]
 8002958:	0020      	movs	r0, r4
 800295a:	f000 f81f 	bl	800299c <__sfp>
 800295e:	6060      	str	r0, [r4, #4]
 8002960:	0020      	movs	r0, r4
 8002962:	f000 f81b 	bl	800299c <__sfp>
 8002966:	60a0      	str	r0, [r4, #8]
 8002968:	0020      	movs	r0, r4
 800296a:	f000 f817 	bl	800299c <__sfp>
 800296e:	2200      	movs	r2, #0
 8002970:	2104      	movs	r1, #4
 8002972:	60e0      	str	r0, [r4, #12]
 8002974:	6860      	ldr	r0, [r4, #4]
 8002976:	f7ff ff77 	bl	8002868 <std>
 800297a:	2201      	movs	r2, #1
 800297c:	2109      	movs	r1, #9
 800297e:	68a0      	ldr	r0, [r4, #8]
 8002980:	f7ff ff72 	bl	8002868 <std>
 8002984:	2202      	movs	r2, #2
 8002986:	2112      	movs	r1, #18
 8002988:	68e0      	ldr	r0, [r4, #12]
 800298a:	f7ff ff6d 	bl	8002868 <std>
 800298e:	2301      	movs	r3, #1
 8002990:	61a3      	str	r3, [r4, #24]
 8002992:	e7d2      	b.n	800293a <__sinit+0xe>
 8002994:	080037e4 	.word	0x080037e4
 8002998:	080028b1 	.word	0x080028b1

0800299c <__sfp>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	0007      	movs	r7, r0
 80029a0:	f7ff ffa4 	bl	80028ec <__sfp_lock_acquire>
 80029a4:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <__sfp+0x88>)
 80029a6:	681e      	ldr	r6, [r3, #0]
 80029a8:	69b3      	ldr	r3, [r6, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <__sfp+0x18>
 80029ae:	0030      	movs	r0, r6
 80029b0:	f7ff ffbc 	bl	800292c <__sinit>
 80029b4:	3648      	adds	r6, #72	; 0x48
 80029b6:	68b4      	ldr	r4, [r6, #8]
 80029b8:	6873      	ldr	r3, [r6, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	d504      	bpl.n	80029c8 <__sfp+0x2c>
 80029be:	6833      	ldr	r3, [r6, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d022      	beq.n	8002a0a <__sfp+0x6e>
 80029c4:	6836      	ldr	r6, [r6, #0]
 80029c6:	e7f6      	b.n	80029b6 <__sfp+0x1a>
 80029c8:	220c      	movs	r2, #12
 80029ca:	5ea5      	ldrsh	r5, [r4, r2]
 80029cc:	2d00      	cmp	r5, #0
 80029ce:	d11a      	bne.n	8002a06 <__sfp+0x6a>
 80029d0:	0020      	movs	r0, r4
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <__sfp+0x8c>)
 80029d4:	3058      	adds	r0, #88	; 0x58
 80029d6:	60e3      	str	r3, [r4, #12]
 80029d8:	6665      	str	r5, [r4, #100]	; 0x64
 80029da:	f000 f847 	bl	8002a6c <__retarget_lock_init_recursive>
 80029de:	f7ff ff8d 	bl	80028fc <__sfp_lock_release>
 80029e2:	0020      	movs	r0, r4
 80029e4:	2208      	movs	r2, #8
 80029e6:	0029      	movs	r1, r5
 80029e8:	6025      	str	r5, [r4, #0]
 80029ea:	60a5      	str	r5, [r4, #8]
 80029ec:	6065      	str	r5, [r4, #4]
 80029ee:	6125      	str	r5, [r4, #16]
 80029f0:	6165      	str	r5, [r4, #20]
 80029f2:	61a5      	str	r5, [r4, #24]
 80029f4:	305c      	adds	r0, #92	; 0x5c
 80029f6:	f7ff ff15 	bl	8002824 <memset>
 80029fa:	6365      	str	r5, [r4, #52]	; 0x34
 80029fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80029fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8002a00:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002a02:	0020      	movs	r0, r4
 8002a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a06:	3468      	adds	r4, #104	; 0x68
 8002a08:	e7d7      	b.n	80029ba <__sfp+0x1e>
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	0038      	movs	r0, r7
 8002a0e:	f7ff ff57 	bl	80028c0 <__sfmoreglue>
 8002a12:	1e04      	subs	r4, r0, #0
 8002a14:	6030      	str	r0, [r6, #0]
 8002a16:	d1d5      	bne.n	80029c4 <__sfp+0x28>
 8002a18:	f7ff ff70 	bl	80028fc <__sfp_lock_release>
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	e7ef      	b.n	8002a02 <__sfp+0x66>
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	080037e4 	.word	0x080037e4
 8002a28:	ffff0001 	.word	0xffff0001

08002a2c <_fwalk_reent>:
 8002a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a2e:	0004      	movs	r4, r0
 8002a30:	0006      	movs	r6, r0
 8002a32:	2700      	movs	r7, #0
 8002a34:	9101      	str	r1, [sp, #4]
 8002a36:	3448      	adds	r4, #72	; 0x48
 8002a38:	6863      	ldr	r3, [r4, #4]
 8002a3a:	68a5      	ldr	r5, [r4, #8]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	9b00      	ldr	r3, [sp, #0]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	d504      	bpl.n	8002a50 <_fwalk_reent+0x24>
 8002a46:	6824      	ldr	r4, [r4, #0]
 8002a48:	2c00      	cmp	r4, #0
 8002a4a:	d1f5      	bne.n	8002a38 <_fwalk_reent+0xc>
 8002a4c:	0038      	movs	r0, r7
 8002a4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a50:	89ab      	ldrh	r3, [r5, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d908      	bls.n	8002a68 <_fwalk_reent+0x3c>
 8002a56:	220e      	movs	r2, #14
 8002a58:	5eab      	ldrsh	r3, [r5, r2]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	d004      	beq.n	8002a68 <_fwalk_reent+0x3c>
 8002a5e:	0029      	movs	r1, r5
 8002a60:	0030      	movs	r0, r6
 8002a62:	9b01      	ldr	r3, [sp, #4]
 8002a64:	4798      	blx	r3
 8002a66:	4307      	orrs	r7, r0
 8002a68:	3568      	adds	r5, #104	; 0x68
 8002a6a:	e7e8      	b.n	8002a3e <_fwalk_reent+0x12>

08002a6c <__retarget_lock_init_recursive>:
 8002a6c:	4770      	bx	lr

08002a6e <__retarget_lock_acquire_recursive>:
 8002a6e:	4770      	bx	lr

08002a70 <__retarget_lock_release_recursive>:
 8002a70:	4770      	bx	lr
	...

08002a74 <_malloc_r>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	2303      	movs	r3, #3
 8002a78:	1ccd      	adds	r5, r1, #3
 8002a7a:	439d      	bics	r5, r3
 8002a7c:	3508      	adds	r5, #8
 8002a7e:	0006      	movs	r6, r0
 8002a80:	2d0c      	cmp	r5, #12
 8002a82:	d21f      	bcs.n	8002ac4 <_malloc_r+0x50>
 8002a84:	250c      	movs	r5, #12
 8002a86:	42a9      	cmp	r1, r5
 8002a88:	d81e      	bhi.n	8002ac8 <_malloc_r+0x54>
 8002a8a:	0030      	movs	r0, r6
 8002a8c:	f000 fdde 	bl	800364c <__malloc_lock>
 8002a90:	4925      	ldr	r1, [pc, #148]	; (8002b28 <_malloc_r+0xb4>)
 8002a92:	680a      	ldr	r2, [r1, #0]
 8002a94:	0014      	movs	r4, r2
 8002a96:	2c00      	cmp	r4, #0
 8002a98:	d11a      	bne.n	8002ad0 <_malloc_r+0x5c>
 8002a9a:	4f24      	ldr	r7, [pc, #144]	; (8002b2c <_malloc_r+0xb8>)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <_malloc_r+0x38>
 8002aa2:	0021      	movs	r1, r4
 8002aa4:	0030      	movs	r0, r6
 8002aa6:	f000 fb27 	bl	80030f8 <_sbrk_r>
 8002aaa:	6038      	str	r0, [r7, #0]
 8002aac:	0029      	movs	r1, r5
 8002aae:	0030      	movs	r0, r6
 8002ab0:	f000 fb22 	bl	80030f8 <_sbrk_r>
 8002ab4:	1c43      	adds	r3, r0, #1
 8002ab6:	d12b      	bne.n	8002b10 <_malloc_r+0x9c>
 8002ab8:	230c      	movs	r3, #12
 8002aba:	0030      	movs	r0, r6
 8002abc:	6033      	str	r3, [r6, #0]
 8002abe:	f000 fdcd 	bl	800365c <__malloc_unlock>
 8002ac2:	e003      	b.n	8002acc <_malloc_r+0x58>
 8002ac4:	2d00      	cmp	r5, #0
 8002ac6:	dade      	bge.n	8002a86 <_malloc_r+0x12>
 8002ac8:	230c      	movs	r3, #12
 8002aca:	6033      	str	r3, [r6, #0]
 8002acc:	2000      	movs	r0, #0
 8002ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	1b5b      	subs	r3, r3, r5
 8002ad4:	d419      	bmi.n	8002b0a <_malloc_r+0x96>
 8002ad6:	2b0b      	cmp	r3, #11
 8002ad8:	d903      	bls.n	8002ae2 <_malloc_r+0x6e>
 8002ada:	6023      	str	r3, [r4, #0]
 8002adc:	18e4      	adds	r4, r4, r3
 8002ade:	6025      	str	r5, [r4, #0]
 8002ae0:	e003      	b.n	8002aea <_malloc_r+0x76>
 8002ae2:	6863      	ldr	r3, [r4, #4]
 8002ae4:	42a2      	cmp	r2, r4
 8002ae6:	d10e      	bne.n	8002b06 <_malloc_r+0x92>
 8002ae8:	600b      	str	r3, [r1, #0]
 8002aea:	0030      	movs	r0, r6
 8002aec:	f000 fdb6 	bl	800365c <__malloc_unlock>
 8002af0:	0020      	movs	r0, r4
 8002af2:	2207      	movs	r2, #7
 8002af4:	300b      	adds	r0, #11
 8002af6:	1d23      	adds	r3, r4, #4
 8002af8:	4390      	bics	r0, r2
 8002afa:	1ac2      	subs	r2, r0, r3
 8002afc:	4298      	cmp	r0, r3
 8002afe:	d0e6      	beq.n	8002ace <_malloc_r+0x5a>
 8002b00:	1a1b      	subs	r3, r3, r0
 8002b02:	50a3      	str	r3, [r4, r2]
 8002b04:	e7e3      	b.n	8002ace <_malloc_r+0x5a>
 8002b06:	6053      	str	r3, [r2, #4]
 8002b08:	e7ef      	b.n	8002aea <_malloc_r+0x76>
 8002b0a:	0022      	movs	r2, r4
 8002b0c:	6864      	ldr	r4, [r4, #4]
 8002b0e:	e7c2      	b.n	8002a96 <_malloc_r+0x22>
 8002b10:	2303      	movs	r3, #3
 8002b12:	1cc4      	adds	r4, r0, #3
 8002b14:	439c      	bics	r4, r3
 8002b16:	42a0      	cmp	r0, r4
 8002b18:	d0e1      	beq.n	8002ade <_malloc_r+0x6a>
 8002b1a:	1a21      	subs	r1, r4, r0
 8002b1c:	0030      	movs	r0, r6
 8002b1e:	f000 faeb 	bl	80030f8 <_sbrk_r>
 8002b22:	1c43      	adds	r3, r0, #1
 8002b24:	d1db      	bne.n	8002ade <_malloc_r+0x6a>
 8002b26:	e7c7      	b.n	8002ab8 <_malloc_r+0x44>
 8002b28:	20000090 	.word	0x20000090
 8002b2c:	20000094 	.word	0x20000094

08002b30 <__sfputc_r>:
 8002b30:	6893      	ldr	r3, [r2, #8]
 8002b32:	b510      	push	{r4, lr}
 8002b34:	3b01      	subs	r3, #1
 8002b36:	6093      	str	r3, [r2, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da04      	bge.n	8002b46 <__sfputc_r+0x16>
 8002b3c:	6994      	ldr	r4, [r2, #24]
 8002b3e:	42a3      	cmp	r3, r4
 8002b40:	db07      	blt.n	8002b52 <__sfputc_r+0x22>
 8002b42:	290a      	cmp	r1, #10
 8002b44:	d005      	beq.n	8002b52 <__sfputc_r+0x22>
 8002b46:	6813      	ldr	r3, [r2, #0]
 8002b48:	1c58      	adds	r0, r3, #1
 8002b4a:	6010      	str	r0, [r2, #0]
 8002b4c:	7019      	strb	r1, [r3, #0]
 8002b4e:	0008      	movs	r0, r1
 8002b50:	bd10      	pop	{r4, pc}
 8002b52:	f000 fb2f 	bl	80031b4 <__swbuf_r>
 8002b56:	0001      	movs	r1, r0
 8002b58:	e7f9      	b.n	8002b4e <__sfputc_r+0x1e>

08002b5a <__sfputs_r>:
 8002b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5c:	0006      	movs	r6, r0
 8002b5e:	000f      	movs	r7, r1
 8002b60:	0014      	movs	r4, r2
 8002b62:	18d5      	adds	r5, r2, r3
 8002b64:	42ac      	cmp	r4, r5
 8002b66:	d101      	bne.n	8002b6c <__sfputs_r+0x12>
 8002b68:	2000      	movs	r0, #0
 8002b6a:	e007      	b.n	8002b7c <__sfputs_r+0x22>
 8002b6c:	7821      	ldrb	r1, [r4, #0]
 8002b6e:	003a      	movs	r2, r7
 8002b70:	0030      	movs	r0, r6
 8002b72:	f7ff ffdd 	bl	8002b30 <__sfputc_r>
 8002b76:	3401      	adds	r4, #1
 8002b78:	1c43      	adds	r3, r0, #1
 8002b7a:	d1f3      	bne.n	8002b64 <__sfputs_r+0xa>
 8002b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b80 <_vfiprintf_r>:
 8002b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b82:	b0a1      	sub	sp, #132	; 0x84
 8002b84:	0006      	movs	r6, r0
 8002b86:	000c      	movs	r4, r1
 8002b88:	001f      	movs	r7, r3
 8002b8a:	9203      	str	r2, [sp, #12]
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d004      	beq.n	8002b9a <_vfiprintf_r+0x1a>
 8002b90:	6983      	ldr	r3, [r0, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <_vfiprintf_r+0x1a>
 8002b96:	f7ff fec9 	bl	800292c <__sinit>
 8002b9a:	4b8e      	ldr	r3, [pc, #568]	; (8002dd4 <_vfiprintf_r+0x254>)
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	d11c      	bne.n	8002bda <_vfiprintf_r+0x5a>
 8002ba0:	6874      	ldr	r4, [r6, #4]
 8002ba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ba4:	07db      	lsls	r3, r3, #31
 8002ba6:	d405      	bmi.n	8002bb4 <_vfiprintf_r+0x34>
 8002ba8:	89a3      	ldrh	r3, [r4, #12]
 8002baa:	059b      	lsls	r3, r3, #22
 8002bac:	d402      	bmi.n	8002bb4 <_vfiprintf_r+0x34>
 8002bae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bb0:	f7ff ff5d 	bl	8002a6e <__retarget_lock_acquire_recursive>
 8002bb4:	89a3      	ldrh	r3, [r4, #12]
 8002bb6:	071b      	lsls	r3, r3, #28
 8002bb8:	d502      	bpl.n	8002bc0 <_vfiprintf_r+0x40>
 8002bba:	6923      	ldr	r3, [r4, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d11d      	bne.n	8002bfc <_vfiprintf_r+0x7c>
 8002bc0:	0021      	movs	r1, r4
 8002bc2:	0030      	movs	r0, r6
 8002bc4:	f000 fb60 	bl	8003288 <__swsetup_r>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d017      	beq.n	8002bfc <_vfiprintf_r+0x7c>
 8002bcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bce:	07db      	lsls	r3, r3, #31
 8002bd0:	d50d      	bpl.n	8002bee <_vfiprintf_r+0x6e>
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	4240      	negs	r0, r0
 8002bd6:	b021      	add	sp, #132	; 0x84
 8002bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bda:	4b7f      	ldr	r3, [pc, #508]	; (8002dd8 <_vfiprintf_r+0x258>)
 8002bdc:	429c      	cmp	r4, r3
 8002bde:	d101      	bne.n	8002be4 <_vfiprintf_r+0x64>
 8002be0:	68b4      	ldr	r4, [r6, #8]
 8002be2:	e7de      	b.n	8002ba2 <_vfiprintf_r+0x22>
 8002be4:	4b7d      	ldr	r3, [pc, #500]	; (8002ddc <_vfiprintf_r+0x25c>)
 8002be6:	429c      	cmp	r4, r3
 8002be8:	d1db      	bne.n	8002ba2 <_vfiprintf_r+0x22>
 8002bea:	68f4      	ldr	r4, [r6, #12]
 8002bec:	e7d9      	b.n	8002ba2 <_vfiprintf_r+0x22>
 8002bee:	89a3      	ldrh	r3, [r4, #12]
 8002bf0:	059b      	lsls	r3, r3, #22
 8002bf2:	d4ee      	bmi.n	8002bd2 <_vfiprintf_r+0x52>
 8002bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bf6:	f7ff ff3b 	bl	8002a70 <__retarget_lock_release_recursive>
 8002bfa:	e7ea      	b.n	8002bd2 <_vfiprintf_r+0x52>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	ad08      	add	r5, sp, #32
 8002c00:	616b      	str	r3, [r5, #20]
 8002c02:	3320      	adds	r3, #32
 8002c04:	766b      	strb	r3, [r5, #25]
 8002c06:	3310      	adds	r3, #16
 8002c08:	76ab      	strb	r3, [r5, #26]
 8002c0a:	9707      	str	r7, [sp, #28]
 8002c0c:	9f03      	ldr	r7, [sp, #12]
 8002c0e:	783b      	ldrb	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <_vfiprintf_r+0x98>
 8002c14:	2b25      	cmp	r3, #37	; 0x25
 8002c16:	d14e      	bne.n	8002cb6 <_vfiprintf_r+0x136>
 8002c18:	9b03      	ldr	r3, [sp, #12]
 8002c1a:	1afb      	subs	r3, r7, r3
 8002c1c:	9305      	str	r3, [sp, #20]
 8002c1e:	9b03      	ldr	r3, [sp, #12]
 8002c20:	429f      	cmp	r7, r3
 8002c22:	d00d      	beq.n	8002c40 <_vfiprintf_r+0xc0>
 8002c24:	9b05      	ldr	r3, [sp, #20]
 8002c26:	0021      	movs	r1, r4
 8002c28:	0030      	movs	r0, r6
 8002c2a:	9a03      	ldr	r2, [sp, #12]
 8002c2c:	f7ff ff95 	bl	8002b5a <__sfputs_r>
 8002c30:	1c43      	adds	r3, r0, #1
 8002c32:	d100      	bne.n	8002c36 <_vfiprintf_r+0xb6>
 8002c34:	e0b5      	b.n	8002da2 <_vfiprintf_r+0x222>
 8002c36:	696a      	ldr	r2, [r5, #20]
 8002c38:	9b05      	ldr	r3, [sp, #20]
 8002c3a:	4694      	mov	ip, r2
 8002c3c:	4463      	add	r3, ip
 8002c3e:	616b      	str	r3, [r5, #20]
 8002c40:	783b      	ldrb	r3, [r7, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d100      	bne.n	8002c48 <_vfiprintf_r+0xc8>
 8002c46:	e0ac      	b.n	8002da2 <_vfiprintf_r+0x222>
 8002c48:	2201      	movs	r2, #1
 8002c4a:	1c7b      	adds	r3, r7, #1
 8002c4c:	9303      	str	r3, [sp, #12]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	4252      	negs	r2, r2
 8002c52:	606a      	str	r2, [r5, #4]
 8002c54:	a904      	add	r1, sp, #16
 8002c56:	3254      	adds	r2, #84	; 0x54
 8002c58:	1852      	adds	r2, r2, r1
 8002c5a:	602b      	str	r3, [r5, #0]
 8002c5c:	60eb      	str	r3, [r5, #12]
 8002c5e:	60ab      	str	r3, [r5, #8]
 8002c60:	7013      	strb	r3, [r2, #0]
 8002c62:	65ab      	str	r3, [r5, #88]	; 0x58
 8002c64:	9b03      	ldr	r3, [sp, #12]
 8002c66:	2205      	movs	r2, #5
 8002c68:	7819      	ldrb	r1, [r3, #0]
 8002c6a:	485d      	ldr	r0, [pc, #372]	; (8002de0 <_vfiprintf_r+0x260>)
 8002c6c:	f000 fce2 	bl	8003634 <memchr>
 8002c70:	9b03      	ldr	r3, [sp, #12]
 8002c72:	1c5f      	adds	r7, r3, #1
 8002c74:	2800      	cmp	r0, #0
 8002c76:	d120      	bne.n	8002cba <_vfiprintf_r+0x13a>
 8002c78:	682a      	ldr	r2, [r5, #0]
 8002c7a:	06d3      	lsls	r3, r2, #27
 8002c7c:	d504      	bpl.n	8002c88 <_vfiprintf_r+0x108>
 8002c7e:	2353      	movs	r3, #83	; 0x53
 8002c80:	a904      	add	r1, sp, #16
 8002c82:	185b      	adds	r3, r3, r1
 8002c84:	2120      	movs	r1, #32
 8002c86:	7019      	strb	r1, [r3, #0]
 8002c88:	0713      	lsls	r3, r2, #28
 8002c8a:	d504      	bpl.n	8002c96 <_vfiprintf_r+0x116>
 8002c8c:	2353      	movs	r3, #83	; 0x53
 8002c8e:	a904      	add	r1, sp, #16
 8002c90:	185b      	adds	r3, r3, r1
 8002c92:	212b      	movs	r1, #43	; 0x2b
 8002c94:	7019      	strb	r1, [r3, #0]
 8002c96:	9b03      	ldr	r3, [sp, #12]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c9c:	d016      	beq.n	8002ccc <_vfiprintf_r+0x14c>
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	68eb      	ldr	r3, [r5, #12]
 8002ca2:	9f03      	ldr	r7, [sp, #12]
 8002ca4:	783a      	ldrb	r2, [r7, #0]
 8002ca6:	1c78      	adds	r0, r7, #1
 8002ca8:	3a30      	subs	r2, #48	; 0x30
 8002caa:	4684      	mov	ip, r0
 8002cac:	2a09      	cmp	r2, #9
 8002cae:	d94f      	bls.n	8002d50 <_vfiprintf_r+0x1d0>
 8002cb0:	2900      	cmp	r1, #0
 8002cb2:	d111      	bne.n	8002cd8 <_vfiprintf_r+0x158>
 8002cb4:	e017      	b.n	8002ce6 <_vfiprintf_r+0x166>
 8002cb6:	3701      	adds	r7, #1
 8002cb8:	e7a9      	b.n	8002c0e <_vfiprintf_r+0x8e>
 8002cba:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <_vfiprintf_r+0x260>)
 8002cbc:	682a      	ldr	r2, [r5, #0]
 8002cbe:	1ac0      	subs	r0, r0, r3
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	4083      	lsls	r3, r0
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	602b      	str	r3, [r5, #0]
 8002cc8:	9703      	str	r7, [sp, #12]
 8002cca:	e7cb      	b.n	8002c64 <_vfiprintf_r+0xe4>
 8002ccc:	9b07      	ldr	r3, [sp, #28]
 8002cce:	1d19      	adds	r1, r3, #4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	9107      	str	r1, [sp, #28]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db01      	blt.n	8002cdc <_vfiprintf_r+0x15c>
 8002cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cda:	e004      	b.n	8002ce6 <_vfiprintf_r+0x166>
 8002cdc:	425b      	negs	r3, r3
 8002cde:	60eb      	str	r3, [r5, #12]
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	602b      	str	r3, [r5, #0]
 8002ce6:	783b      	ldrb	r3, [r7, #0]
 8002ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8002cea:	d10a      	bne.n	8002d02 <_vfiprintf_r+0x182>
 8002cec:	787b      	ldrb	r3, [r7, #1]
 8002cee:	2b2a      	cmp	r3, #42	; 0x2a
 8002cf0:	d137      	bne.n	8002d62 <_vfiprintf_r+0x1e2>
 8002cf2:	9b07      	ldr	r3, [sp, #28]
 8002cf4:	3702      	adds	r7, #2
 8002cf6:	1d1a      	adds	r2, r3, #4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	9207      	str	r2, [sp, #28]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db2d      	blt.n	8002d5c <_vfiprintf_r+0x1dc>
 8002d00:	9309      	str	r3, [sp, #36]	; 0x24
 8002d02:	2203      	movs	r2, #3
 8002d04:	7839      	ldrb	r1, [r7, #0]
 8002d06:	4837      	ldr	r0, [pc, #220]	; (8002de4 <_vfiprintf_r+0x264>)
 8002d08:	f000 fc94 	bl	8003634 <memchr>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d007      	beq.n	8002d20 <_vfiprintf_r+0x1a0>
 8002d10:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <_vfiprintf_r+0x264>)
 8002d12:	682a      	ldr	r2, [r5, #0]
 8002d14:	1ac0      	subs	r0, r0, r3
 8002d16:	2340      	movs	r3, #64	; 0x40
 8002d18:	4083      	lsls	r3, r0
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	3701      	adds	r7, #1
 8002d1e:	602b      	str	r3, [r5, #0]
 8002d20:	7839      	ldrb	r1, [r7, #0]
 8002d22:	1c7b      	adds	r3, r7, #1
 8002d24:	2206      	movs	r2, #6
 8002d26:	4830      	ldr	r0, [pc, #192]	; (8002de8 <_vfiprintf_r+0x268>)
 8002d28:	9303      	str	r3, [sp, #12]
 8002d2a:	7629      	strb	r1, [r5, #24]
 8002d2c:	f000 fc82 	bl	8003634 <memchr>
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d045      	beq.n	8002dc0 <_vfiprintf_r+0x240>
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <_vfiprintf_r+0x26c>)
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d127      	bne.n	8002d8a <_vfiprintf_r+0x20a>
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	9b07      	ldr	r3, [sp, #28]
 8002d3e:	3307      	adds	r3, #7
 8002d40:	4393      	bics	r3, r2
 8002d42:	3308      	adds	r3, #8
 8002d44:	9307      	str	r3, [sp, #28]
 8002d46:	696b      	ldr	r3, [r5, #20]
 8002d48:	9a04      	ldr	r2, [sp, #16]
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	616b      	str	r3, [r5, #20]
 8002d4e:	e75d      	b.n	8002c0c <_vfiprintf_r+0x8c>
 8002d50:	210a      	movs	r1, #10
 8002d52:	434b      	muls	r3, r1
 8002d54:	4667      	mov	r7, ip
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	3909      	subs	r1, #9
 8002d5a:	e7a3      	b.n	8002ca4 <_vfiprintf_r+0x124>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	425b      	negs	r3, r3
 8002d60:	e7ce      	b.n	8002d00 <_vfiprintf_r+0x180>
 8002d62:	2300      	movs	r3, #0
 8002d64:	001a      	movs	r2, r3
 8002d66:	3701      	adds	r7, #1
 8002d68:	606b      	str	r3, [r5, #4]
 8002d6a:	7839      	ldrb	r1, [r7, #0]
 8002d6c:	1c78      	adds	r0, r7, #1
 8002d6e:	3930      	subs	r1, #48	; 0x30
 8002d70:	4684      	mov	ip, r0
 8002d72:	2909      	cmp	r1, #9
 8002d74:	d903      	bls.n	8002d7e <_vfiprintf_r+0x1fe>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0c3      	beq.n	8002d02 <_vfiprintf_r+0x182>
 8002d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8002d7c:	e7c1      	b.n	8002d02 <_vfiprintf_r+0x182>
 8002d7e:	230a      	movs	r3, #10
 8002d80:	435a      	muls	r2, r3
 8002d82:	4667      	mov	r7, ip
 8002d84:	1852      	adds	r2, r2, r1
 8002d86:	3b09      	subs	r3, #9
 8002d88:	e7ef      	b.n	8002d6a <_vfiprintf_r+0x1ea>
 8002d8a:	ab07      	add	r3, sp, #28
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	0022      	movs	r2, r4
 8002d90:	0029      	movs	r1, r5
 8002d92:	0030      	movs	r0, r6
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <_vfiprintf_r+0x270>)
 8002d96:	e000      	b.n	8002d9a <_vfiprintf_r+0x21a>
 8002d98:	bf00      	nop
 8002d9a:	9004      	str	r0, [sp, #16]
 8002d9c:	9b04      	ldr	r3, [sp, #16]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	d1d1      	bne.n	8002d46 <_vfiprintf_r+0x1c6>
 8002da2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002da4:	07db      	lsls	r3, r3, #31
 8002da6:	d405      	bmi.n	8002db4 <_vfiprintf_r+0x234>
 8002da8:	89a3      	ldrh	r3, [r4, #12]
 8002daa:	059b      	lsls	r3, r3, #22
 8002dac:	d402      	bmi.n	8002db4 <_vfiprintf_r+0x234>
 8002dae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002db0:	f7ff fe5e 	bl	8002a70 <__retarget_lock_release_recursive>
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	065b      	lsls	r3, r3, #25
 8002db8:	d500      	bpl.n	8002dbc <_vfiprintf_r+0x23c>
 8002dba:	e70a      	b.n	8002bd2 <_vfiprintf_r+0x52>
 8002dbc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002dbe:	e70a      	b.n	8002bd6 <_vfiprintf_r+0x56>
 8002dc0:	ab07      	add	r3, sp, #28
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	0022      	movs	r2, r4
 8002dc6:	0029      	movs	r1, r5
 8002dc8:	0030      	movs	r0, r6
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <_vfiprintf_r+0x270>)
 8002dcc:	f000 f882 	bl	8002ed4 <_printf_i>
 8002dd0:	e7e3      	b.n	8002d9a <_vfiprintf_r+0x21a>
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	08003808 	.word	0x08003808
 8002dd8:	08003828 	.word	0x08003828
 8002ddc:	080037e8 	.word	0x080037e8
 8002de0:	08003848 	.word	0x08003848
 8002de4:	0800384e 	.word	0x0800384e
 8002de8:	08003852 	.word	0x08003852
 8002dec:	00000000 	.word	0x00000000
 8002df0:	08002b5b 	.word	0x08002b5b

08002df4 <_printf_common>:
 8002df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002df6:	0015      	movs	r5, r2
 8002df8:	9301      	str	r3, [sp, #4]
 8002dfa:	688a      	ldr	r2, [r1, #8]
 8002dfc:	690b      	ldr	r3, [r1, #16]
 8002dfe:	000c      	movs	r4, r1
 8002e00:	9000      	str	r0, [sp, #0]
 8002e02:	4293      	cmp	r3, r2
 8002e04:	da00      	bge.n	8002e08 <_printf_common+0x14>
 8002e06:	0013      	movs	r3, r2
 8002e08:	0022      	movs	r2, r4
 8002e0a:	602b      	str	r3, [r5, #0]
 8002e0c:	3243      	adds	r2, #67	; 0x43
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	2a00      	cmp	r2, #0
 8002e12:	d001      	beq.n	8002e18 <_printf_common+0x24>
 8002e14:	3301      	adds	r3, #1
 8002e16:	602b      	str	r3, [r5, #0]
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	069b      	lsls	r3, r3, #26
 8002e1c:	d502      	bpl.n	8002e24 <_printf_common+0x30>
 8002e1e:	682b      	ldr	r3, [r5, #0]
 8002e20:	3302      	adds	r3, #2
 8002e22:	602b      	str	r3, [r5, #0]
 8002e24:	6822      	ldr	r2, [r4, #0]
 8002e26:	2306      	movs	r3, #6
 8002e28:	0017      	movs	r7, r2
 8002e2a:	401f      	ands	r7, r3
 8002e2c:	421a      	tst	r2, r3
 8002e2e:	d027      	beq.n	8002e80 <_printf_common+0x8c>
 8002e30:	0023      	movs	r3, r4
 8002e32:	3343      	adds	r3, #67	; 0x43
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	1e5a      	subs	r2, r3, #1
 8002e38:	4193      	sbcs	r3, r2
 8002e3a:	6822      	ldr	r2, [r4, #0]
 8002e3c:	0692      	lsls	r2, r2, #26
 8002e3e:	d430      	bmi.n	8002ea2 <_printf_common+0xae>
 8002e40:	0022      	movs	r2, r4
 8002e42:	9901      	ldr	r1, [sp, #4]
 8002e44:	9800      	ldr	r0, [sp, #0]
 8002e46:	9e08      	ldr	r6, [sp, #32]
 8002e48:	3243      	adds	r2, #67	; 0x43
 8002e4a:	47b0      	blx	r6
 8002e4c:	1c43      	adds	r3, r0, #1
 8002e4e:	d025      	beq.n	8002e9c <_printf_common+0xa8>
 8002e50:	2306      	movs	r3, #6
 8002e52:	6820      	ldr	r0, [r4, #0]
 8002e54:	682a      	ldr	r2, [r5, #0]
 8002e56:	68e1      	ldr	r1, [r4, #12]
 8002e58:	2500      	movs	r5, #0
 8002e5a:	4003      	ands	r3, r0
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d103      	bne.n	8002e68 <_printf_common+0x74>
 8002e60:	1a8d      	subs	r5, r1, r2
 8002e62:	43eb      	mvns	r3, r5
 8002e64:	17db      	asrs	r3, r3, #31
 8002e66:	401d      	ands	r5, r3
 8002e68:	68a3      	ldr	r3, [r4, #8]
 8002e6a:	6922      	ldr	r2, [r4, #16]
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	dd01      	ble.n	8002e74 <_printf_common+0x80>
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	18ed      	adds	r5, r5, r3
 8002e74:	2700      	movs	r7, #0
 8002e76:	42bd      	cmp	r5, r7
 8002e78:	d120      	bne.n	8002ebc <_printf_common+0xc8>
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	e010      	b.n	8002ea0 <_printf_common+0xac>
 8002e7e:	3701      	adds	r7, #1
 8002e80:	68e3      	ldr	r3, [r4, #12]
 8002e82:	682a      	ldr	r2, [r5, #0]
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	42bb      	cmp	r3, r7
 8002e88:	ddd2      	ble.n	8002e30 <_printf_common+0x3c>
 8002e8a:	0022      	movs	r2, r4
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	9901      	ldr	r1, [sp, #4]
 8002e90:	9800      	ldr	r0, [sp, #0]
 8002e92:	9e08      	ldr	r6, [sp, #32]
 8002e94:	3219      	adds	r2, #25
 8002e96:	47b0      	blx	r6
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d1f0      	bne.n	8002e7e <_printf_common+0x8a>
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	4240      	negs	r0, r0
 8002ea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ea2:	2030      	movs	r0, #48	; 0x30
 8002ea4:	18e1      	adds	r1, r4, r3
 8002ea6:	3143      	adds	r1, #67	; 0x43
 8002ea8:	7008      	strb	r0, [r1, #0]
 8002eaa:	0021      	movs	r1, r4
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	3145      	adds	r1, #69	; 0x45
 8002eb0:	7809      	ldrb	r1, [r1, #0]
 8002eb2:	18a2      	adds	r2, r4, r2
 8002eb4:	3243      	adds	r2, #67	; 0x43
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	7011      	strb	r1, [r2, #0]
 8002eba:	e7c1      	b.n	8002e40 <_printf_common+0x4c>
 8002ebc:	0022      	movs	r2, r4
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	9901      	ldr	r1, [sp, #4]
 8002ec2:	9800      	ldr	r0, [sp, #0]
 8002ec4:	9e08      	ldr	r6, [sp, #32]
 8002ec6:	321a      	adds	r2, #26
 8002ec8:	47b0      	blx	r6
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	d0e6      	beq.n	8002e9c <_printf_common+0xa8>
 8002ece:	3701      	adds	r7, #1
 8002ed0:	e7d1      	b.n	8002e76 <_printf_common+0x82>
	...

08002ed4 <_printf_i>:
 8002ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed6:	b08b      	sub	sp, #44	; 0x2c
 8002ed8:	9206      	str	r2, [sp, #24]
 8002eda:	000a      	movs	r2, r1
 8002edc:	3243      	adds	r2, #67	; 0x43
 8002ede:	9307      	str	r3, [sp, #28]
 8002ee0:	9005      	str	r0, [sp, #20]
 8002ee2:	9204      	str	r2, [sp, #16]
 8002ee4:	7e0a      	ldrb	r2, [r1, #24]
 8002ee6:	000c      	movs	r4, r1
 8002ee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002eea:	2a78      	cmp	r2, #120	; 0x78
 8002eec:	d806      	bhi.n	8002efc <_printf_i+0x28>
 8002eee:	2a62      	cmp	r2, #98	; 0x62
 8002ef0:	d808      	bhi.n	8002f04 <_printf_i+0x30>
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	d100      	bne.n	8002ef8 <_printf_i+0x24>
 8002ef6:	e0c0      	b.n	800307a <_printf_i+0x1a6>
 8002ef8:	2a58      	cmp	r2, #88	; 0x58
 8002efa:	d052      	beq.n	8002fa2 <_printf_i+0xce>
 8002efc:	0026      	movs	r6, r4
 8002efe:	3642      	adds	r6, #66	; 0x42
 8002f00:	7032      	strb	r2, [r6, #0]
 8002f02:	e022      	b.n	8002f4a <_printf_i+0x76>
 8002f04:	0010      	movs	r0, r2
 8002f06:	3863      	subs	r0, #99	; 0x63
 8002f08:	2815      	cmp	r0, #21
 8002f0a:	d8f7      	bhi.n	8002efc <_printf_i+0x28>
 8002f0c:	f7fd f8fa 	bl	8000104 <__gnu_thumb1_case_shi>
 8002f10:	001f0016 	.word	0x001f0016
 8002f14:	fff6fff6 	.word	0xfff6fff6
 8002f18:	fff6fff6 	.word	0xfff6fff6
 8002f1c:	fff6001f 	.word	0xfff6001f
 8002f20:	fff6fff6 	.word	0xfff6fff6
 8002f24:	00a8fff6 	.word	0x00a8fff6
 8002f28:	009a0036 	.word	0x009a0036
 8002f2c:	fff6fff6 	.word	0xfff6fff6
 8002f30:	fff600b9 	.word	0xfff600b9
 8002f34:	fff60036 	.word	0xfff60036
 8002f38:	009efff6 	.word	0x009efff6
 8002f3c:	0026      	movs	r6, r4
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	3642      	adds	r6, #66	; 0x42
 8002f42:	1d11      	adds	r1, r2, #4
 8002f44:	6019      	str	r1, [r3, #0]
 8002f46:	6813      	ldr	r3, [r2, #0]
 8002f48:	7033      	strb	r3, [r6, #0]
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0a7      	b.n	800309e <_printf_i+0x1ca>
 8002f4e:	6808      	ldr	r0, [r1, #0]
 8002f50:	6819      	ldr	r1, [r3, #0]
 8002f52:	1d0a      	adds	r2, r1, #4
 8002f54:	0605      	lsls	r5, r0, #24
 8002f56:	d50b      	bpl.n	8002f70 <_printf_i+0x9c>
 8002f58:	680d      	ldr	r5, [r1, #0]
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	2d00      	cmp	r5, #0
 8002f5e:	da03      	bge.n	8002f68 <_printf_i+0x94>
 8002f60:	232d      	movs	r3, #45	; 0x2d
 8002f62:	9a04      	ldr	r2, [sp, #16]
 8002f64:	426d      	negs	r5, r5
 8002f66:	7013      	strb	r3, [r2, #0]
 8002f68:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <_printf_i+0x21c>)
 8002f6a:	270a      	movs	r7, #10
 8002f6c:	9303      	str	r3, [sp, #12]
 8002f6e:	e032      	b.n	8002fd6 <_printf_i+0x102>
 8002f70:	680d      	ldr	r5, [r1, #0]
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	0641      	lsls	r1, r0, #25
 8002f76:	d5f1      	bpl.n	8002f5c <_printf_i+0x88>
 8002f78:	b22d      	sxth	r5, r5
 8002f7a:	e7ef      	b.n	8002f5c <_printf_i+0x88>
 8002f7c:	680d      	ldr	r5, [r1, #0]
 8002f7e:	6819      	ldr	r1, [r3, #0]
 8002f80:	1d08      	adds	r0, r1, #4
 8002f82:	6018      	str	r0, [r3, #0]
 8002f84:	062e      	lsls	r6, r5, #24
 8002f86:	d501      	bpl.n	8002f8c <_printf_i+0xb8>
 8002f88:	680d      	ldr	r5, [r1, #0]
 8002f8a:	e003      	b.n	8002f94 <_printf_i+0xc0>
 8002f8c:	066d      	lsls	r5, r5, #25
 8002f8e:	d5fb      	bpl.n	8002f88 <_printf_i+0xb4>
 8002f90:	680d      	ldr	r5, [r1, #0]
 8002f92:	b2ad      	uxth	r5, r5
 8002f94:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <_printf_i+0x21c>)
 8002f96:	270a      	movs	r7, #10
 8002f98:	9303      	str	r3, [sp, #12]
 8002f9a:	2a6f      	cmp	r2, #111	; 0x6f
 8002f9c:	d117      	bne.n	8002fce <_printf_i+0xfa>
 8002f9e:	2708      	movs	r7, #8
 8002fa0:	e015      	b.n	8002fce <_printf_i+0xfa>
 8002fa2:	3145      	adds	r1, #69	; 0x45
 8002fa4:	700a      	strb	r2, [r1, #0]
 8002fa6:	4a52      	ldr	r2, [pc, #328]	; (80030f0 <_printf_i+0x21c>)
 8002fa8:	9203      	str	r2, [sp, #12]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	6821      	ldr	r1, [r4, #0]
 8002fae:	ca20      	ldmia	r2!, {r5}
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	0608      	lsls	r0, r1, #24
 8002fb4:	d550      	bpl.n	8003058 <_printf_i+0x184>
 8002fb6:	07cb      	lsls	r3, r1, #31
 8002fb8:	d502      	bpl.n	8002fc0 <_printf_i+0xec>
 8002fba:	2320      	movs	r3, #32
 8002fbc:	4319      	orrs	r1, r3
 8002fbe:	6021      	str	r1, [r4, #0]
 8002fc0:	2710      	movs	r7, #16
 8002fc2:	2d00      	cmp	r5, #0
 8002fc4:	d103      	bne.n	8002fce <_printf_i+0xfa>
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	6822      	ldr	r2, [r4, #0]
 8002fca:	439a      	bics	r2, r3
 8002fcc:	6022      	str	r2, [r4, #0]
 8002fce:	0023      	movs	r3, r4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	3343      	adds	r3, #67	; 0x43
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	6863      	ldr	r3, [r4, #4]
 8002fd8:	60a3      	str	r3, [r4, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	db03      	blt.n	8002fe6 <_printf_i+0x112>
 8002fde:	2204      	movs	r2, #4
 8002fe0:	6821      	ldr	r1, [r4, #0]
 8002fe2:	4391      	bics	r1, r2
 8002fe4:	6021      	str	r1, [r4, #0]
 8002fe6:	2d00      	cmp	r5, #0
 8002fe8:	d102      	bne.n	8002ff0 <_printf_i+0x11c>
 8002fea:	9e04      	ldr	r6, [sp, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00c      	beq.n	800300a <_printf_i+0x136>
 8002ff0:	9e04      	ldr	r6, [sp, #16]
 8002ff2:	0028      	movs	r0, r5
 8002ff4:	0039      	movs	r1, r7
 8002ff6:	f7fd f915 	bl	8000224 <__aeabi_uidivmod>
 8002ffa:	9b03      	ldr	r3, [sp, #12]
 8002ffc:	3e01      	subs	r6, #1
 8002ffe:	5c5b      	ldrb	r3, [r3, r1]
 8003000:	7033      	strb	r3, [r6, #0]
 8003002:	002b      	movs	r3, r5
 8003004:	0005      	movs	r5, r0
 8003006:	429f      	cmp	r7, r3
 8003008:	d9f3      	bls.n	8002ff2 <_printf_i+0x11e>
 800300a:	2f08      	cmp	r7, #8
 800300c:	d109      	bne.n	8003022 <_printf_i+0x14e>
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	07db      	lsls	r3, r3, #31
 8003012:	d506      	bpl.n	8003022 <_printf_i+0x14e>
 8003014:	6863      	ldr	r3, [r4, #4]
 8003016:	6922      	ldr	r2, [r4, #16]
 8003018:	4293      	cmp	r3, r2
 800301a:	dc02      	bgt.n	8003022 <_printf_i+0x14e>
 800301c:	2330      	movs	r3, #48	; 0x30
 800301e:	3e01      	subs	r6, #1
 8003020:	7033      	strb	r3, [r6, #0]
 8003022:	9b04      	ldr	r3, [sp, #16]
 8003024:	1b9b      	subs	r3, r3, r6
 8003026:	6123      	str	r3, [r4, #16]
 8003028:	9b07      	ldr	r3, [sp, #28]
 800302a:	0021      	movs	r1, r4
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	9805      	ldr	r0, [sp, #20]
 8003030:	9b06      	ldr	r3, [sp, #24]
 8003032:	aa09      	add	r2, sp, #36	; 0x24
 8003034:	f7ff fede 	bl	8002df4 <_printf_common>
 8003038:	1c43      	adds	r3, r0, #1
 800303a:	d135      	bne.n	80030a8 <_printf_i+0x1d4>
 800303c:	2001      	movs	r0, #1
 800303e:	4240      	negs	r0, r0
 8003040:	b00b      	add	sp, #44	; 0x2c
 8003042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003044:	2220      	movs	r2, #32
 8003046:	6809      	ldr	r1, [r1, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	6022      	str	r2, [r4, #0]
 800304c:	0022      	movs	r2, r4
 800304e:	2178      	movs	r1, #120	; 0x78
 8003050:	3245      	adds	r2, #69	; 0x45
 8003052:	7011      	strb	r1, [r2, #0]
 8003054:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <_printf_i+0x220>)
 8003056:	e7a7      	b.n	8002fa8 <_printf_i+0xd4>
 8003058:	0648      	lsls	r0, r1, #25
 800305a:	d5ac      	bpl.n	8002fb6 <_printf_i+0xe2>
 800305c:	b2ad      	uxth	r5, r5
 800305e:	e7aa      	b.n	8002fb6 <_printf_i+0xe2>
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	680d      	ldr	r5, [r1, #0]
 8003064:	1d10      	adds	r0, r2, #4
 8003066:	6949      	ldr	r1, [r1, #20]
 8003068:	6018      	str	r0, [r3, #0]
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	062e      	lsls	r6, r5, #24
 800306e:	d501      	bpl.n	8003074 <_printf_i+0x1a0>
 8003070:	6019      	str	r1, [r3, #0]
 8003072:	e002      	b.n	800307a <_printf_i+0x1a6>
 8003074:	066d      	lsls	r5, r5, #25
 8003076:	d5fb      	bpl.n	8003070 <_printf_i+0x19c>
 8003078:	8019      	strh	r1, [r3, #0]
 800307a:	2300      	movs	r3, #0
 800307c:	9e04      	ldr	r6, [sp, #16]
 800307e:	6123      	str	r3, [r4, #16]
 8003080:	e7d2      	b.n	8003028 <_printf_i+0x154>
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	1d11      	adds	r1, r2, #4
 8003086:	6019      	str	r1, [r3, #0]
 8003088:	6816      	ldr	r6, [r2, #0]
 800308a:	2100      	movs	r1, #0
 800308c:	0030      	movs	r0, r6
 800308e:	6862      	ldr	r2, [r4, #4]
 8003090:	f000 fad0 	bl	8003634 <memchr>
 8003094:	2800      	cmp	r0, #0
 8003096:	d001      	beq.n	800309c <_printf_i+0x1c8>
 8003098:	1b80      	subs	r0, r0, r6
 800309a:	6060      	str	r0, [r4, #4]
 800309c:	6863      	ldr	r3, [r4, #4]
 800309e:	6123      	str	r3, [r4, #16]
 80030a0:	2300      	movs	r3, #0
 80030a2:	9a04      	ldr	r2, [sp, #16]
 80030a4:	7013      	strb	r3, [r2, #0]
 80030a6:	e7bf      	b.n	8003028 <_printf_i+0x154>
 80030a8:	6923      	ldr	r3, [r4, #16]
 80030aa:	0032      	movs	r2, r6
 80030ac:	9906      	ldr	r1, [sp, #24]
 80030ae:	9805      	ldr	r0, [sp, #20]
 80030b0:	9d07      	ldr	r5, [sp, #28]
 80030b2:	47a8      	blx	r5
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	d0c1      	beq.n	800303c <_printf_i+0x168>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	079b      	lsls	r3, r3, #30
 80030bc:	d415      	bmi.n	80030ea <_printf_i+0x216>
 80030be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030c0:	68e0      	ldr	r0, [r4, #12]
 80030c2:	4298      	cmp	r0, r3
 80030c4:	dabc      	bge.n	8003040 <_printf_i+0x16c>
 80030c6:	0018      	movs	r0, r3
 80030c8:	e7ba      	b.n	8003040 <_printf_i+0x16c>
 80030ca:	0022      	movs	r2, r4
 80030cc:	2301      	movs	r3, #1
 80030ce:	9906      	ldr	r1, [sp, #24]
 80030d0:	9805      	ldr	r0, [sp, #20]
 80030d2:	9e07      	ldr	r6, [sp, #28]
 80030d4:	3219      	adds	r2, #25
 80030d6:	47b0      	blx	r6
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	d0af      	beq.n	800303c <_printf_i+0x168>
 80030dc:	3501      	adds	r5, #1
 80030de:	68e3      	ldr	r3, [r4, #12]
 80030e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	42ab      	cmp	r3, r5
 80030e6:	dcf0      	bgt.n	80030ca <_printf_i+0x1f6>
 80030e8:	e7e9      	b.n	80030be <_printf_i+0x1ea>
 80030ea:	2500      	movs	r5, #0
 80030ec:	e7f7      	b.n	80030de <_printf_i+0x20a>
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	08003859 	.word	0x08003859
 80030f4:	0800386a 	.word	0x0800386a

080030f8 <_sbrk_r>:
 80030f8:	2300      	movs	r3, #0
 80030fa:	b570      	push	{r4, r5, r6, lr}
 80030fc:	4d06      	ldr	r5, [pc, #24]	; (8003118 <_sbrk_r+0x20>)
 80030fe:	0004      	movs	r4, r0
 8003100:	0008      	movs	r0, r1
 8003102:	602b      	str	r3, [r5, #0]
 8003104:	f7fd faf4 	bl	80006f0 <_sbrk>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d103      	bne.n	8003114 <_sbrk_r+0x1c>
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d000      	beq.n	8003114 <_sbrk_r+0x1c>
 8003112:	6023      	str	r3, [r4, #0]
 8003114:	bd70      	pop	{r4, r5, r6, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	200000f4 	.word	0x200000f4

0800311c <__sread>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	000c      	movs	r4, r1
 8003120:	250e      	movs	r5, #14
 8003122:	5f49      	ldrsh	r1, [r1, r5]
 8003124:	f000 faec 	bl	8003700 <_read_r>
 8003128:	2800      	cmp	r0, #0
 800312a:	db03      	blt.n	8003134 <__sread+0x18>
 800312c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800312e:	181b      	adds	r3, r3, r0
 8003130:	6563      	str	r3, [r4, #84]	; 0x54
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	89a3      	ldrh	r3, [r4, #12]
 8003136:	4a02      	ldr	r2, [pc, #8]	; (8003140 <__sread+0x24>)
 8003138:	4013      	ands	r3, r2
 800313a:	81a3      	strh	r3, [r4, #12]
 800313c:	e7f9      	b.n	8003132 <__sread+0x16>
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	ffffefff 	.word	0xffffefff

08003144 <__swrite>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	001f      	movs	r7, r3
 8003148:	898b      	ldrh	r3, [r1, #12]
 800314a:	0005      	movs	r5, r0
 800314c:	000c      	movs	r4, r1
 800314e:	0016      	movs	r6, r2
 8003150:	05db      	lsls	r3, r3, #23
 8003152:	d505      	bpl.n	8003160 <__swrite+0x1c>
 8003154:	230e      	movs	r3, #14
 8003156:	5ec9      	ldrsh	r1, [r1, r3]
 8003158:	2200      	movs	r2, #0
 800315a:	2302      	movs	r3, #2
 800315c:	f000 f9ea 	bl	8003534 <_lseek_r>
 8003160:	89a3      	ldrh	r3, [r4, #12]
 8003162:	4a05      	ldr	r2, [pc, #20]	; (8003178 <__swrite+0x34>)
 8003164:	0028      	movs	r0, r5
 8003166:	4013      	ands	r3, r2
 8003168:	81a3      	strh	r3, [r4, #12]
 800316a:	0032      	movs	r2, r6
 800316c:	230e      	movs	r3, #14
 800316e:	5ee1      	ldrsh	r1, [r4, r3]
 8003170:	003b      	movs	r3, r7
 8003172:	f000 f875 	bl	8003260 <_write_r>
 8003176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003178:	ffffefff 	.word	0xffffefff

0800317c <__sseek>:
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	000c      	movs	r4, r1
 8003180:	250e      	movs	r5, #14
 8003182:	5f49      	ldrsh	r1, [r1, r5]
 8003184:	f000 f9d6 	bl	8003534 <_lseek_r>
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	1c42      	adds	r2, r0, #1
 800318c:	d103      	bne.n	8003196 <__sseek+0x1a>
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <__sseek+0x28>)
 8003190:	4013      	ands	r3, r2
 8003192:	81a3      	strh	r3, [r4, #12]
 8003194:	bd70      	pop	{r4, r5, r6, pc}
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	0152      	lsls	r2, r2, #5
 800319a:	4313      	orrs	r3, r2
 800319c:	81a3      	strh	r3, [r4, #12]
 800319e:	6560      	str	r0, [r4, #84]	; 0x54
 80031a0:	e7f8      	b.n	8003194 <__sseek+0x18>
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	ffffefff 	.word	0xffffefff

080031a8 <__sclose>:
 80031a8:	b510      	push	{r4, lr}
 80031aa:	230e      	movs	r3, #14
 80031ac:	5ec9      	ldrsh	r1, [r1, r3]
 80031ae:	f000 f8e3 	bl	8003378 <_close_r>
 80031b2:	bd10      	pop	{r4, pc}

080031b4 <__swbuf_r>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	0005      	movs	r5, r0
 80031b8:	000e      	movs	r6, r1
 80031ba:	0014      	movs	r4, r2
 80031bc:	2800      	cmp	r0, #0
 80031be:	d004      	beq.n	80031ca <__swbuf_r+0x16>
 80031c0:	6983      	ldr	r3, [r0, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <__swbuf_r+0x16>
 80031c6:	f7ff fbb1 	bl	800292c <__sinit>
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <__swbuf_r+0xa0>)
 80031cc:	429c      	cmp	r4, r3
 80031ce:	d12e      	bne.n	800322e <__swbuf_r+0x7a>
 80031d0:	686c      	ldr	r4, [r5, #4]
 80031d2:	69a3      	ldr	r3, [r4, #24]
 80031d4:	60a3      	str	r3, [r4, #8]
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	d532      	bpl.n	8003242 <__swbuf_r+0x8e>
 80031dc:	6923      	ldr	r3, [r4, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d02f      	beq.n	8003242 <__swbuf_r+0x8e>
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	6922      	ldr	r2, [r4, #16]
 80031e6:	b2f7      	uxtb	r7, r6
 80031e8:	1a98      	subs	r0, r3, r2
 80031ea:	6963      	ldr	r3, [r4, #20]
 80031ec:	b2f6      	uxtb	r6, r6
 80031ee:	4283      	cmp	r3, r0
 80031f0:	dc05      	bgt.n	80031fe <__swbuf_r+0x4a>
 80031f2:	0021      	movs	r1, r4
 80031f4:	0028      	movs	r0, r5
 80031f6:	f000 f95d 	bl	80034b4 <_fflush_r>
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d127      	bne.n	800324e <__swbuf_r+0x9a>
 80031fe:	68a3      	ldr	r3, [r4, #8]
 8003200:	3001      	adds	r0, #1
 8003202:	3b01      	subs	r3, #1
 8003204:	60a3      	str	r3, [r4, #8]
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	6022      	str	r2, [r4, #0]
 800320c:	701f      	strb	r7, [r3, #0]
 800320e:	6963      	ldr	r3, [r4, #20]
 8003210:	4283      	cmp	r3, r0
 8003212:	d004      	beq.n	800321e <__swbuf_r+0x6a>
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	07db      	lsls	r3, r3, #31
 8003218:	d507      	bpl.n	800322a <__swbuf_r+0x76>
 800321a:	2e0a      	cmp	r6, #10
 800321c:	d105      	bne.n	800322a <__swbuf_r+0x76>
 800321e:	0021      	movs	r1, r4
 8003220:	0028      	movs	r0, r5
 8003222:	f000 f947 	bl	80034b4 <_fflush_r>
 8003226:	2800      	cmp	r0, #0
 8003228:	d111      	bne.n	800324e <__swbuf_r+0x9a>
 800322a:	0030      	movs	r0, r6
 800322c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <__swbuf_r+0xa4>)
 8003230:	429c      	cmp	r4, r3
 8003232:	d101      	bne.n	8003238 <__swbuf_r+0x84>
 8003234:	68ac      	ldr	r4, [r5, #8]
 8003236:	e7cc      	b.n	80031d2 <__swbuf_r+0x1e>
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <__swbuf_r+0xa8>)
 800323a:	429c      	cmp	r4, r3
 800323c:	d1c9      	bne.n	80031d2 <__swbuf_r+0x1e>
 800323e:	68ec      	ldr	r4, [r5, #12]
 8003240:	e7c7      	b.n	80031d2 <__swbuf_r+0x1e>
 8003242:	0021      	movs	r1, r4
 8003244:	0028      	movs	r0, r5
 8003246:	f000 f81f 	bl	8003288 <__swsetup_r>
 800324a:	2800      	cmp	r0, #0
 800324c:	d0c9      	beq.n	80031e2 <__swbuf_r+0x2e>
 800324e:	2601      	movs	r6, #1
 8003250:	4276      	negs	r6, r6
 8003252:	e7ea      	b.n	800322a <__swbuf_r+0x76>
 8003254:	08003808 	.word	0x08003808
 8003258:	08003828 	.word	0x08003828
 800325c:	080037e8 	.word	0x080037e8

08003260 <_write_r>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	0004      	movs	r4, r0
 8003264:	0008      	movs	r0, r1
 8003266:	0011      	movs	r1, r2
 8003268:	001a      	movs	r2, r3
 800326a:	2300      	movs	r3, #0
 800326c:	4d05      	ldr	r5, [pc, #20]	; (8003284 <_write_r+0x24>)
 800326e:	602b      	str	r3, [r5, #0]
 8003270:	f7fd f9f6 	bl	8000660 <_write>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	d103      	bne.n	8003280 <_write_r+0x20>
 8003278:	682b      	ldr	r3, [r5, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d000      	beq.n	8003280 <_write_r+0x20>
 800327e:	6023      	str	r3, [r4, #0]
 8003280:	bd70      	pop	{r4, r5, r6, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	200000f4 	.word	0x200000f4

08003288 <__swsetup_r>:
 8003288:	4b37      	ldr	r3, [pc, #220]	; (8003368 <__swsetup_r+0xe0>)
 800328a:	b570      	push	{r4, r5, r6, lr}
 800328c:	681d      	ldr	r5, [r3, #0]
 800328e:	0006      	movs	r6, r0
 8003290:	000c      	movs	r4, r1
 8003292:	2d00      	cmp	r5, #0
 8003294:	d005      	beq.n	80032a2 <__swsetup_r+0x1a>
 8003296:	69ab      	ldr	r3, [r5, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <__swsetup_r+0x1a>
 800329c:	0028      	movs	r0, r5
 800329e:	f7ff fb45 	bl	800292c <__sinit>
 80032a2:	4b32      	ldr	r3, [pc, #200]	; (800336c <__swsetup_r+0xe4>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	d10f      	bne.n	80032c8 <__swsetup_r+0x40>
 80032a8:	686c      	ldr	r4, [r5, #4]
 80032aa:	230c      	movs	r3, #12
 80032ac:	5ee2      	ldrsh	r2, [r4, r3]
 80032ae:	b293      	uxth	r3, r2
 80032b0:	0711      	lsls	r1, r2, #28
 80032b2:	d42d      	bmi.n	8003310 <__swsetup_r+0x88>
 80032b4:	06d9      	lsls	r1, r3, #27
 80032b6:	d411      	bmi.n	80032dc <__swsetup_r+0x54>
 80032b8:	2309      	movs	r3, #9
 80032ba:	2001      	movs	r0, #1
 80032bc:	6033      	str	r3, [r6, #0]
 80032be:	3337      	adds	r3, #55	; 0x37
 80032c0:	4313      	orrs	r3, r2
 80032c2:	81a3      	strh	r3, [r4, #12]
 80032c4:	4240      	negs	r0, r0
 80032c6:	bd70      	pop	{r4, r5, r6, pc}
 80032c8:	4b29      	ldr	r3, [pc, #164]	; (8003370 <__swsetup_r+0xe8>)
 80032ca:	429c      	cmp	r4, r3
 80032cc:	d101      	bne.n	80032d2 <__swsetup_r+0x4a>
 80032ce:	68ac      	ldr	r4, [r5, #8]
 80032d0:	e7eb      	b.n	80032aa <__swsetup_r+0x22>
 80032d2:	4b28      	ldr	r3, [pc, #160]	; (8003374 <__swsetup_r+0xec>)
 80032d4:	429c      	cmp	r4, r3
 80032d6:	d1e8      	bne.n	80032aa <__swsetup_r+0x22>
 80032d8:	68ec      	ldr	r4, [r5, #12]
 80032da:	e7e6      	b.n	80032aa <__swsetup_r+0x22>
 80032dc:	075b      	lsls	r3, r3, #29
 80032de:	d513      	bpl.n	8003308 <__swsetup_r+0x80>
 80032e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032e2:	2900      	cmp	r1, #0
 80032e4:	d008      	beq.n	80032f8 <__swsetup_r+0x70>
 80032e6:	0023      	movs	r3, r4
 80032e8:	3344      	adds	r3, #68	; 0x44
 80032ea:	4299      	cmp	r1, r3
 80032ec:	d002      	beq.n	80032f4 <__swsetup_r+0x6c>
 80032ee:	0030      	movs	r0, r6
 80032f0:	f000 f9bc 	bl	800366c <_free_r>
 80032f4:	2300      	movs	r3, #0
 80032f6:	6363      	str	r3, [r4, #52]	; 0x34
 80032f8:	2224      	movs	r2, #36	; 0x24
 80032fa:	89a3      	ldrh	r3, [r4, #12]
 80032fc:	4393      	bics	r3, r2
 80032fe:	81a3      	strh	r3, [r4, #12]
 8003300:	2300      	movs	r3, #0
 8003302:	6063      	str	r3, [r4, #4]
 8003304:	6923      	ldr	r3, [r4, #16]
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	2308      	movs	r3, #8
 800330a:	89a2      	ldrh	r2, [r4, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	81a3      	strh	r3, [r4, #12]
 8003310:	6923      	ldr	r3, [r4, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <__swsetup_r+0xa6>
 8003316:	21a0      	movs	r1, #160	; 0xa0
 8003318:	2280      	movs	r2, #128	; 0x80
 800331a:	89a3      	ldrh	r3, [r4, #12]
 800331c:	0089      	lsls	r1, r1, #2
 800331e:	0092      	lsls	r2, r2, #2
 8003320:	400b      	ands	r3, r1
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <__swsetup_r+0xa6>
 8003326:	0021      	movs	r1, r4
 8003328:	0030      	movs	r0, r6
 800332a:	f000 f93f 	bl	80035ac <__smakebuf_r>
 800332e:	220c      	movs	r2, #12
 8003330:	5ea3      	ldrsh	r3, [r4, r2]
 8003332:	2001      	movs	r0, #1
 8003334:	001a      	movs	r2, r3
 8003336:	b299      	uxth	r1, r3
 8003338:	4002      	ands	r2, r0
 800333a:	4203      	tst	r3, r0
 800333c:	d00f      	beq.n	800335e <__swsetup_r+0xd6>
 800333e:	2200      	movs	r2, #0
 8003340:	60a2      	str	r2, [r4, #8]
 8003342:	6962      	ldr	r2, [r4, #20]
 8003344:	4252      	negs	r2, r2
 8003346:	61a2      	str	r2, [r4, #24]
 8003348:	2000      	movs	r0, #0
 800334a:	6922      	ldr	r2, [r4, #16]
 800334c:	4282      	cmp	r2, r0
 800334e:	d1ba      	bne.n	80032c6 <__swsetup_r+0x3e>
 8003350:	060a      	lsls	r2, r1, #24
 8003352:	d5b8      	bpl.n	80032c6 <__swsetup_r+0x3e>
 8003354:	2240      	movs	r2, #64	; 0x40
 8003356:	4313      	orrs	r3, r2
 8003358:	81a3      	strh	r3, [r4, #12]
 800335a:	3801      	subs	r0, #1
 800335c:	e7b3      	b.n	80032c6 <__swsetup_r+0x3e>
 800335e:	0788      	lsls	r0, r1, #30
 8003360:	d400      	bmi.n	8003364 <__swsetup_r+0xdc>
 8003362:	6962      	ldr	r2, [r4, #20]
 8003364:	60a2      	str	r2, [r4, #8]
 8003366:	e7ef      	b.n	8003348 <__swsetup_r+0xc0>
 8003368:	2000000c 	.word	0x2000000c
 800336c:	08003808 	.word	0x08003808
 8003370:	08003828 	.word	0x08003828
 8003374:	080037e8 	.word	0x080037e8

08003378 <_close_r>:
 8003378:	2300      	movs	r3, #0
 800337a:	b570      	push	{r4, r5, r6, lr}
 800337c:	4d06      	ldr	r5, [pc, #24]	; (8003398 <_close_r+0x20>)
 800337e:	0004      	movs	r4, r0
 8003380:	0008      	movs	r0, r1
 8003382:	602b      	str	r3, [r5, #0]
 8003384:	f7fd f988 	bl	8000698 <_close>
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	d103      	bne.n	8003394 <_close_r+0x1c>
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d000      	beq.n	8003394 <_close_r+0x1c>
 8003392:	6023      	str	r3, [r4, #0]
 8003394:	bd70      	pop	{r4, r5, r6, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	200000f4 	.word	0x200000f4

0800339c <__sflush_r>:
 800339c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800339e:	898b      	ldrh	r3, [r1, #12]
 80033a0:	0005      	movs	r5, r0
 80033a2:	000c      	movs	r4, r1
 80033a4:	071a      	lsls	r2, r3, #28
 80033a6:	d45f      	bmi.n	8003468 <__sflush_r+0xcc>
 80033a8:	684a      	ldr	r2, [r1, #4]
 80033aa:	2a00      	cmp	r2, #0
 80033ac:	dc04      	bgt.n	80033b8 <__sflush_r+0x1c>
 80033ae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80033b0:	2a00      	cmp	r2, #0
 80033b2:	dc01      	bgt.n	80033b8 <__sflush_r+0x1c>
 80033b4:	2000      	movs	r0, #0
 80033b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80033ba:	2f00      	cmp	r7, #0
 80033bc:	d0fa      	beq.n	80033b4 <__sflush_r+0x18>
 80033be:	2200      	movs	r2, #0
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	682e      	ldr	r6, [r5, #0]
 80033c4:	602a      	str	r2, [r5, #0]
 80033c6:	001a      	movs	r2, r3
 80033c8:	0149      	lsls	r1, r1, #5
 80033ca:	400a      	ands	r2, r1
 80033cc:	420b      	tst	r3, r1
 80033ce:	d034      	beq.n	800343a <__sflush_r+0x9e>
 80033d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	075b      	lsls	r3, r3, #29
 80033d6:	d506      	bpl.n	80033e6 <__sflush_r+0x4a>
 80033d8:	6863      	ldr	r3, [r4, #4]
 80033da:	1ac0      	subs	r0, r0, r3
 80033dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <__sflush_r+0x4a>
 80033e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033e4:	1ac0      	subs	r0, r0, r3
 80033e6:	0002      	movs	r2, r0
 80033e8:	6a21      	ldr	r1, [r4, #32]
 80033ea:	2300      	movs	r3, #0
 80033ec:	0028      	movs	r0, r5
 80033ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80033f0:	47b8      	blx	r7
 80033f2:	89a1      	ldrh	r1, [r4, #12]
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	d106      	bne.n	8003406 <__sflush_r+0x6a>
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	2b1d      	cmp	r3, #29
 80033fc:	d831      	bhi.n	8003462 <__sflush_r+0xc6>
 80033fe:	4a2c      	ldr	r2, [pc, #176]	; (80034b0 <__sflush_r+0x114>)
 8003400:	40da      	lsrs	r2, r3
 8003402:	07d3      	lsls	r3, r2, #31
 8003404:	d52d      	bpl.n	8003462 <__sflush_r+0xc6>
 8003406:	2300      	movs	r3, #0
 8003408:	6063      	str	r3, [r4, #4]
 800340a:	6923      	ldr	r3, [r4, #16]
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	04cb      	lsls	r3, r1, #19
 8003410:	d505      	bpl.n	800341e <__sflush_r+0x82>
 8003412:	1c43      	adds	r3, r0, #1
 8003414:	d102      	bne.n	800341c <__sflush_r+0x80>
 8003416:	682b      	ldr	r3, [r5, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d100      	bne.n	800341e <__sflush_r+0x82>
 800341c:	6560      	str	r0, [r4, #84]	; 0x54
 800341e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003420:	602e      	str	r6, [r5, #0]
 8003422:	2900      	cmp	r1, #0
 8003424:	d0c6      	beq.n	80033b4 <__sflush_r+0x18>
 8003426:	0023      	movs	r3, r4
 8003428:	3344      	adds	r3, #68	; 0x44
 800342a:	4299      	cmp	r1, r3
 800342c:	d002      	beq.n	8003434 <__sflush_r+0x98>
 800342e:	0028      	movs	r0, r5
 8003430:	f000 f91c 	bl	800366c <_free_r>
 8003434:	2000      	movs	r0, #0
 8003436:	6360      	str	r0, [r4, #52]	; 0x34
 8003438:	e7bd      	b.n	80033b6 <__sflush_r+0x1a>
 800343a:	2301      	movs	r3, #1
 800343c:	0028      	movs	r0, r5
 800343e:	6a21      	ldr	r1, [r4, #32]
 8003440:	47b8      	blx	r7
 8003442:	1c43      	adds	r3, r0, #1
 8003444:	d1c5      	bne.n	80033d2 <__sflush_r+0x36>
 8003446:	682b      	ldr	r3, [r5, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0c2      	beq.n	80033d2 <__sflush_r+0x36>
 800344c:	2b1d      	cmp	r3, #29
 800344e:	d001      	beq.n	8003454 <__sflush_r+0xb8>
 8003450:	2b16      	cmp	r3, #22
 8003452:	d101      	bne.n	8003458 <__sflush_r+0xbc>
 8003454:	602e      	str	r6, [r5, #0]
 8003456:	e7ad      	b.n	80033b4 <__sflush_r+0x18>
 8003458:	2340      	movs	r3, #64	; 0x40
 800345a:	89a2      	ldrh	r2, [r4, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	81a3      	strh	r3, [r4, #12]
 8003460:	e7a9      	b.n	80033b6 <__sflush_r+0x1a>
 8003462:	2340      	movs	r3, #64	; 0x40
 8003464:	430b      	orrs	r3, r1
 8003466:	e7fa      	b.n	800345e <__sflush_r+0xc2>
 8003468:	690f      	ldr	r7, [r1, #16]
 800346a:	2f00      	cmp	r7, #0
 800346c:	d0a2      	beq.n	80033b4 <__sflush_r+0x18>
 800346e:	680a      	ldr	r2, [r1, #0]
 8003470:	600f      	str	r7, [r1, #0]
 8003472:	1bd2      	subs	r2, r2, r7
 8003474:	9201      	str	r2, [sp, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	079b      	lsls	r3, r3, #30
 800347a:	d100      	bne.n	800347e <__sflush_r+0xe2>
 800347c:	694a      	ldr	r2, [r1, #20]
 800347e:	60a2      	str	r2, [r4, #8]
 8003480:	9b01      	ldr	r3, [sp, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	dc00      	bgt.n	8003488 <__sflush_r+0xec>
 8003486:	e795      	b.n	80033b4 <__sflush_r+0x18>
 8003488:	003a      	movs	r2, r7
 800348a:	0028      	movs	r0, r5
 800348c:	9b01      	ldr	r3, [sp, #4]
 800348e:	6a21      	ldr	r1, [r4, #32]
 8003490:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003492:	47b0      	blx	r6
 8003494:	2800      	cmp	r0, #0
 8003496:	dc06      	bgt.n	80034a6 <__sflush_r+0x10a>
 8003498:	2340      	movs	r3, #64	; 0x40
 800349a:	2001      	movs	r0, #1
 800349c:	89a2      	ldrh	r2, [r4, #12]
 800349e:	4240      	negs	r0, r0
 80034a0:	4313      	orrs	r3, r2
 80034a2:	81a3      	strh	r3, [r4, #12]
 80034a4:	e787      	b.n	80033b6 <__sflush_r+0x1a>
 80034a6:	9b01      	ldr	r3, [sp, #4]
 80034a8:	183f      	adds	r7, r7, r0
 80034aa:	1a1b      	subs	r3, r3, r0
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	e7e7      	b.n	8003480 <__sflush_r+0xe4>
 80034b0:	20400001 	.word	0x20400001

080034b4 <_fflush_r>:
 80034b4:	690b      	ldr	r3, [r1, #16]
 80034b6:	b570      	push	{r4, r5, r6, lr}
 80034b8:	0005      	movs	r5, r0
 80034ba:	000c      	movs	r4, r1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <_fflush_r+0x12>
 80034c0:	2500      	movs	r5, #0
 80034c2:	0028      	movs	r0, r5
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d004      	beq.n	80034d4 <_fflush_r+0x20>
 80034ca:	6983      	ldr	r3, [r0, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <_fflush_r+0x20>
 80034d0:	f7ff fa2c 	bl	800292c <__sinit>
 80034d4:	4b14      	ldr	r3, [pc, #80]	; (8003528 <_fflush_r+0x74>)
 80034d6:	429c      	cmp	r4, r3
 80034d8:	d11b      	bne.n	8003512 <_fflush_r+0x5e>
 80034da:	686c      	ldr	r4, [r5, #4]
 80034dc:	220c      	movs	r2, #12
 80034de:	5ea3      	ldrsh	r3, [r4, r2]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ed      	beq.n	80034c0 <_fflush_r+0xc>
 80034e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034e6:	07d2      	lsls	r2, r2, #31
 80034e8:	d404      	bmi.n	80034f4 <_fflush_r+0x40>
 80034ea:	059b      	lsls	r3, r3, #22
 80034ec:	d402      	bmi.n	80034f4 <_fflush_r+0x40>
 80034ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034f0:	f7ff fabd 	bl	8002a6e <__retarget_lock_acquire_recursive>
 80034f4:	0028      	movs	r0, r5
 80034f6:	0021      	movs	r1, r4
 80034f8:	f7ff ff50 	bl	800339c <__sflush_r>
 80034fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034fe:	0005      	movs	r5, r0
 8003500:	07db      	lsls	r3, r3, #31
 8003502:	d4de      	bmi.n	80034c2 <_fflush_r+0xe>
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	059b      	lsls	r3, r3, #22
 8003508:	d4db      	bmi.n	80034c2 <_fflush_r+0xe>
 800350a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800350c:	f7ff fab0 	bl	8002a70 <__retarget_lock_release_recursive>
 8003510:	e7d7      	b.n	80034c2 <_fflush_r+0xe>
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <_fflush_r+0x78>)
 8003514:	429c      	cmp	r4, r3
 8003516:	d101      	bne.n	800351c <_fflush_r+0x68>
 8003518:	68ac      	ldr	r4, [r5, #8]
 800351a:	e7df      	b.n	80034dc <_fflush_r+0x28>
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <_fflush_r+0x7c>)
 800351e:	429c      	cmp	r4, r3
 8003520:	d1dc      	bne.n	80034dc <_fflush_r+0x28>
 8003522:	68ec      	ldr	r4, [r5, #12]
 8003524:	e7da      	b.n	80034dc <_fflush_r+0x28>
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	08003808 	.word	0x08003808
 800352c:	08003828 	.word	0x08003828
 8003530:	080037e8 	.word	0x080037e8

08003534 <_lseek_r>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	0004      	movs	r4, r0
 8003538:	0008      	movs	r0, r1
 800353a:	0011      	movs	r1, r2
 800353c:	001a      	movs	r2, r3
 800353e:	2300      	movs	r3, #0
 8003540:	4d05      	ldr	r5, [pc, #20]	; (8003558 <_lseek_r+0x24>)
 8003542:	602b      	str	r3, [r5, #0]
 8003544:	f7fd f8c9 	bl	80006da <_lseek>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d103      	bne.n	8003554 <_lseek_r+0x20>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d000      	beq.n	8003554 <_lseek_r+0x20>
 8003552:	6023      	str	r3, [r4, #0]
 8003554:	bd70      	pop	{r4, r5, r6, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	200000f4 	.word	0x200000f4

0800355c <__swhatbuf_r>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	000e      	movs	r6, r1
 8003560:	001d      	movs	r5, r3
 8003562:	230e      	movs	r3, #14
 8003564:	5ec9      	ldrsh	r1, [r1, r3]
 8003566:	0014      	movs	r4, r2
 8003568:	b096      	sub	sp, #88	; 0x58
 800356a:	2900      	cmp	r1, #0
 800356c:	da07      	bge.n	800357e <__swhatbuf_r+0x22>
 800356e:	2300      	movs	r3, #0
 8003570:	602b      	str	r3, [r5, #0]
 8003572:	89b3      	ldrh	r3, [r6, #12]
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	d411      	bmi.n	800359c <__swhatbuf_r+0x40>
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	e00f      	b.n	800359e <__swhatbuf_r+0x42>
 800357e:	466a      	mov	r2, sp
 8003580:	f000 f8d2 	bl	8003728 <_fstat_r>
 8003584:	2800      	cmp	r0, #0
 8003586:	dbf2      	blt.n	800356e <__swhatbuf_r+0x12>
 8003588:	23f0      	movs	r3, #240	; 0xf0
 800358a:	9901      	ldr	r1, [sp, #4]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	4019      	ands	r1, r3
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <__swhatbuf_r+0x4c>)
 8003592:	18c9      	adds	r1, r1, r3
 8003594:	424b      	negs	r3, r1
 8003596:	4159      	adcs	r1, r3
 8003598:	6029      	str	r1, [r5, #0]
 800359a:	e7ed      	b.n	8003578 <__swhatbuf_r+0x1c>
 800359c:	2340      	movs	r3, #64	; 0x40
 800359e:	2000      	movs	r0, #0
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	b016      	add	sp, #88	; 0x58
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	ffffe000 	.word	0xffffe000

080035ac <__smakebuf_r>:
 80035ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035ae:	2602      	movs	r6, #2
 80035b0:	898b      	ldrh	r3, [r1, #12]
 80035b2:	0005      	movs	r5, r0
 80035b4:	000c      	movs	r4, r1
 80035b6:	4233      	tst	r3, r6
 80035b8:	d006      	beq.n	80035c8 <__smakebuf_r+0x1c>
 80035ba:	0023      	movs	r3, r4
 80035bc:	3347      	adds	r3, #71	; 0x47
 80035be:	6023      	str	r3, [r4, #0]
 80035c0:	6123      	str	r3, [r4, #16]
 80035c2:	2301      	movs	r3, #1
 80035c4:	6163      	str	r3, [r4, #20]
 80035c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80035c8:	466a      	mov	r2, sp
 80035ca:	ab01      	add	r3, sp, #4
 80035cc:	f7ff ffc6 	bl	800355c <__swhatbuf_r>
 80035d0:	9900      	ldr	r1, [sp, #0]
 80035d2:	0007      	movs	r7, r0
 80035d4:	0028      	movs	r0, r5
 80035d6:	f7ff fa4d 	bl	8002a74 <_malloc_r>
 80035da:	2800      	cmp	r0, #0
 80035dc:	d108      	bne.n	80035f0 <__smakebuf_r+0x44>
 80035de:	220c      	movs	r2, #12
 80035e0:	5ea3      	ldrsh	r3, [r4, r2]
 80035e2:	059a      	lsls	r2, r3, #22
 80035e4:	d4ef      	bmi.n	80035c6 <__smakebuf_r+0x1a>
 80035e6:	2203      	movs	r2, #3
 80035e8:	4393      	bics	r3, r2
 80035ea:	431e      	orrs	r6, r3
 80035ec:	81a6      	strh	r6, [r4, #12]
 80035ee:	e7e4      	b.n	80035ba <__smakebuf_r+0xe>
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <__smakebuf_r+0x84>)
 80035f2:	62ab      	str	r3, [r5, #40]	; 0x28
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	89a2      	ldrh	r2, [r4, #12]
 80035f8:	6020      	str	r0, [r4, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	81a3      	strh	r3, [r4, #12]
 80035fe:	9b00      	ldr	r3, [sp, #0]
 8003600:	6120      	str	r0, [r4, #16]
 8003602:	6163      	str	r3, [r4, #20]
 8003604:	9b01      	ldr	r3, [sp, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <__smakebuf_r+0x7a>
 800360a:	0028      	movs	r0, r5
 800360c:	230e      	movs	r3, #14
 800360e:	5ee1      	ldrsh	r1, [r4, r3]
 8003610:	f000 f89c 	bl	800374c <_isatty_r>
 8003614:	2800      	cmp	r0, #0
 8003616:	d006      	beq.n	8003626 <__smakebuf_r+0x7a>
 8003618:	2203      	movs	r2, #3
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	4393      	bics	r3, r2
 800361e:	001a      	movs	r2, r3
 8003620:	2301      	movs	r3, #1
 8003622:	4313      	orrs	r3, r2
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	89a0      	ldrh	r0, [r4, #12]
 8003628:	4307      	orrs	r7, r0
 800362a:	81a7      	strh	r7, [r4, #12]
 800362c:	e7cb      	b.n	80035c6 <__smakebuf_r+0x1a>
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	080028b1 	.word	0x080028b1

08003634 <memchr>:
 8003634:	b2c9      	uxtb	r1, r1
 8003636:	1882      	adds	r2, r0, r2
 8003638:	4290      	cmp	r0, r2
 800363a:	d101      	bne.n	8003640 <memchr+0xc>
 800363c:	2000      	movs	r0, #0
 800363e:	4770      	bx	lr
 8003640:	7803      	ldrb	r3, [r0, #0]
 8003642:	428b      	cmp	r3, r1
 8003644:	d0fb      	beq.n	800363e <memchr+0xa>
 8003646:	3001      	adds	r0, #1
 8003648:	e7f6      	b.n	8003638 <memchr+0x4>
	...

0800364c <__malloc_lock>:
 800364c:	b510      	push	{r4, lr}
 800364e:	4802      	ldr	r0, [pc, #8]	; (8003658 <__malloc_lock+0xc>)
 8003650:	f7ff fa0d 	bl	8002a6e <__retarget_lock_acquire_recursive>
 8003654:	bd10      	pop	{r4, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	200000ec 	.word	0x200000ec

0800365c <__malloc_unlock>:
 800365c:	b510      	push	{r4, lr}
 800365e:	4802      	ldr	r0, [pc, #8]	; (8003668 <__malloc_unlock+0xc>)
 8003660:	f7ff fa06 	bl	8002a70 <__retarget_lock_release_recursive>
 8003664:	bd10      	pop	{r4, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	200000ec 	.word	0x200000ec

0800366c <_free_r>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	0005      	movs	r5, r0
 8003670:	2900      	cmp	r1, #0
 8003672:	d010      	beq.n	8003696 <_free_r+0x2a>
 8003674:	1f0c      	subs	r4, r1, #4
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	da00      	bge.n	800367e <_free_r+0x12>
 800367c:	18e4      	adds	r4, r4, r3
 800367e:	0028      	movs	r0, r5
 8003680:	f7ff ffe4 	bl	800364c <__malloc_lock>
 8003684:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <_free_r+0x90>)
 8003686:	6813      	ldr	r3, [r2, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <_free_r+0x2c>
 800368c:	6063      	str	r3, [r4, #4]
 800368e:	6014      	str	r4, [r2, #0]
 8003690:	0028      	movs	r0, r5
 8003692:	f7ff ffe3 	bl	800365c <__malloc_unlock>
 8003696:	bd70      	pop	{r4, r5, r6, pc}
 8003698:	42a3      	cmp	r3, r4
 800369a:	d908      	bls.n	80036ae <_free_r+0x42>
 800369c:	6821      	ldr	r1, [r4, #0]
 800369e:	1860      	adds	r0, r4, r1
 80036a0:	4283      	cmp	r3, r0
 80036a2:	d1f3      	bne.n	800368c <_free_r+0x20>
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	1841      	adds	r1, r0, r1
 80036aa:	6021      	str	r1, [r4, #0]
 80036ac:	e7ee      	b.n	800368c <_free_r+0x20>
 80036ae:	001a      	movs	r2, r3
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <_free_r+0x4e>
 80036b6:	42a3      	cmp	r3, r4
 80036b8:	d9f9      	bls.n	80036ae <_free_r+0x42>
 80036ba:	6811      	ldr	r1, [r2, #0]
 80036bc:	1850      	adds	r0, r2, r1
 80036be:	42a0      	cmp	r0, r4
 80036c0:	d10b      	bne.n	80036da <_free_r+0x6e>
 80036c2:	6820      	ldr	r0, [r4, #0]
 80036c4:	1809      	adds	r1, r1, r0
 80036c6:	1850      	adds	r0, r2, r1
 80036c8:	6011      	str	r1, [r2, #0]
 80036ca:	4283      	cmp	r3, r0
 80036cc:	d1e0      	bne.n	8003690 <_free_r+0x24>
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	1841      	adds	r1, r0, r1
 80036d4:	6011      	str	r1, [r2, #0]
 80036d6:	6053      	str	r3, [r2, #4]
 80036d8:	e7da      	b.n	8003690 <_free_r+0x24>
 80036da:	42a0      	cmp	r0, r4
 80036dc:	d902      	bls.n	80036e4 <_free_r+0x78>
 80036de:	230c      	movs	r3, #12
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	e7d5      	b.n	8003690 <_free_r+0x24>
 80036e4:	6821      	ldr	r1, [r4, #0]
 80036e6:	1860      	adds	r0, r4, r1
 80036e8:	4283      	cmp	r3, r0
 80036ea:	d103      	bne.n	80036f4 <_free_r+0x88>
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	1841      	adds	r1, r0, r1
 80036f2:	6021      	str	r1, [r4, #0]
 80036f4:	6063      	str	r3, [r4, #4]
 80036f6:	6054      	str	r4, [r2, #4]
 80036f8:	e7ca      	b.n	8003690 <_free_r+0x24>
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	20000090 	.word	0x20000090

08003700 <_read_r>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	0004      	movs	r4, r0
 8003704:	0008      	movs	r0, r1
 8003706:	0011      	movs	r1, r2
 8003708:	001a      	movs	r2, r3
 800370a:	2300      	movs	r3, #0
 800370c:	4d05      	ldr	r5, [pc, #20]	; (8003724 <_read_r+0x24>)
 800370e:	602b      	str	r3, [r5, #0]
 8003710:	f7fc ff89 	bl	8000626 <_read>
 8003714:	1c43      	adds	r3, r0, #1
 8003716:	d103      	bne.n	8003720 <_read_r+0x20>
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d000      	beq.n	8003720 <_read_r+0x20>
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	bd70      	pop	{r4, r5, r6, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	200000f4 	.word	0x200000f4

08003728 <_fstat_r>:
 8003728:	2300      	movs	r3, #0
 800372a:	b570      	push	{r4, r5, r6, lr}
 800372c:	4d06      	ldr	r5, [pc, #24]	; (8003748 <_fstat_r+0x20>)
 800372e:	0004      	movs	r4, r0
 8003730:	0008      	movs	r0, r1
 8003732:	0011      	movs	r1, r2
 8003734:	602b      	str	r3, [r5, #0]
 8003736:	f7fc ffb9 	bl	80006ac <_fstat>
 800373a:	1c43      	adds	r3, r0, #1
 800373c:	d103      	bne.n	8003746 <_fstat_r+0x1e>
 800373e:	682b      	ldr	r3, [r5, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d000      	beq.n	8003746 <_fstat_r+0x1e>
 8003744:	6023      	str	r3, [r4, #0]
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	200000f4 	.word	0x200000f4

0800374c <_isatty_r>:
 800374c:	2300      	movs	r3, #0
 800374e:	b570      	push	{r4, r5, r6, lr}
 8003750:	4d06      	ldr	r5, [pc, #24]	; (800376c <_isatty_r+0x20>)
 8003752:	0004      	movs	r4, r0
 8003754:	0008      	movs	r0, r1
 8003756:	602b      	str	r3, [r5, #0]
 8003758:	f7fc ffb6 	bl	80006c8 <_isatty>
 800375c:	1c43      	adds	r3, r0, #1
 800375e:	d103      	bne.n	8003768 <_isatty_r+0x1c>
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d000      	beq.n	8003768 <_isatty_r+0x1c>
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	bd70      	pop	{r4, r5, r6, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	200000f4 	.word	0x200000f4

08003770 <_init>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003776:	bc08      	pop	{r3}
 8003778:	469e      	mov	lr, r3
 800377a:	4770      	bx	lr

0800377c <_fini>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003782:	bc08      	pop	{r3}
 8003784:	469e      	mov	lr, r3
 8003786:	4770      	bx	lr
