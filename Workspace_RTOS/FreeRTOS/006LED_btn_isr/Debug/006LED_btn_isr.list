
006LED_btn_isr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005640  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800583c  0800583c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005844  08005844  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800584c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ea4  20000014  08005860  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001eb8  08005860  00021eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ed8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003203  00000000  00000000  00039f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  0003d118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003e448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9b6  00000000  00000000  0003f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001662d  00000000  00000000  0005a006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa1ab  00000000  00000000  00070633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a7de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004548  00000000  00000000  0011a834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080056e8 	.word	0x080056e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080056e8 	.word	0x080056e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	1c08      	adds	r0, r1, #0
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fb39 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f835 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f8e1 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000632:	f000 f891 	bl	8000758 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(Taskfunc1,"Task-1",200,NULL,2,&task1_handle);
 8000636:	4911      	ldr	r1, [pc, #68]	; (800067c <main+0x5c>)
 8000638:	4811      	ldr	r0, [pc, #68]	; (8000680 <main+0x60>)
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <main+0x64>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2302      	movs	r3, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	22c8      	movs	r2, #200	; 0xc8
 8000646:	f003 f9d6 	bl	80039f6 <xTaskCreate>
 800064a:	0003      	movs	r3, r0
 800064c:	607b      	str	r3, [r7, #4]
  configASSERT(status = pdPASS);
 800064e:	2301      	movs	r3, #1
 8000650:	607b      	str	r3, [r7, #4]

  next_task_handle = task1_handle;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <main+0x64>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <main+0x68>)
 8000658:	601a      	str	r2, [r3, #0]

  status = xTaskCreate(Taskfunc2,"Task-2",200,NULL,1,&task2_handle);
 800065a:	490c      	ldr	r1, [pc, #48]	; (800068c <main+0x6c>)
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <main+0x70>)
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <main+0x74>)
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2301      	movs	r3, #1
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	22c8      	movs	r2, #200	; 0xc8
 800066a:	f003 f9c4 	bl	80039f6 <xTaskCreate>
 800066e:	0003      	movs	r3, r0
 8000670:	607b      	str	r3, [r7, #4]
  configASSERT(status = pdPASS);
 8000672:	2301      	movs	r3, #1
 8000674:	607b      	str	r3, [r7, #4]
  /*status = xTaskCreate(button_func,"Button Task",200,NULL,3,&button_task_handle);
  configASSERT(status = pdPASS);
*/


  vTaskStartScheduler();
 8000676:	f003 fb83 	bl	8003d80 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067a:	e7fe      	b.n	800067a <main+0x5a>
 800067c:	08005700 	.word	0x08005700
 8000680:	08000911 	.word	0x08000911
 8000684:	20001d8c 	.word	0x20001d8c
 8000688:	20000030 	.word	0x20000030
 800068c:	08005708 	.word	0x08005708
 8000690:	08000991 	.word	0x08000991
 8000694:	20001d90 	.word	0x20001d90

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b0a1      	sub	sp, #132	; 0x84
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	2448      	movs	r4, #72	; 0x48
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	2338      	movs	r3, #56	; 0x38
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f005 f814 	bl	80056d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ae:	2338      	movs	r3, #56	; 0x38
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	0018      	movs	r0, r3
 80006b4:	2310      	movs	r3, #16
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	f005 f80c 	bl	80056d6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	0018      	movs	r0, r3
 80006c2:	2334      	movs	r3, #52	; 0x34
 80006c4:	001a      	movs	r2, r3
 80006c6:	2100      	movs	r1, #0
 80006c8:	f005 f805 	bl	80056d6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fdbd 	bl	8001250 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2202      	movs	r2, #2
 80006da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	0052      	lsls	r2, r2, #1
 80006e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2240      	movs	r2, #64	; 0x40
 80006ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fdf5 	bl	80012e8 <HAL_RCC_OscConfig>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000702:	f000 f9a9 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	2138      	movs	r1, #56	; 0x38
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2207      	movs	r2, #7
 800070c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2100      	movs	r1, #0
 8000724:	0018      	movs	r0, r3
 8000726:	f001 f8f9 	bl	800191c <HAL_RCC_ClockConfig>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072e:	f000 f993 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2202      	movs	r2, #2
 8000736:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fabf 	bl	8001cc4 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800074a:	f000 f985 	bl	8000a58 <Error_Handler>
  }
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b021      	add	sp, #132	; 0x84
 8000754:	bd90      	pop	{r4, r7, pc}
	...

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_USART2_UART_Init+0x94>)
 800075e:	4a24      	ldr	r2, [pc, #144]	; (80007f0 <MX_USART2_UART_Init+0x98>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000764:	22e1      	movs	r2, #225	; 0xe1
 8000766:	0252      	lsls	r2, r2, #9
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_USART2_UART_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_USART2_UART_Init+0x94>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_USART2_UART_Init+0x94>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_USART2_UART_Init+0x94>)
 800079c:	2200      	movs	r2, #0
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_USART2_UART_Init+0x94>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 feec 	bl	8002580 <HAL_UART_Init>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007ac:	f000 f954 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x94>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 fcc1 	bl	800313c <HAL_UARTEx_SetTxFifoThreshold>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007be:	f000 f94b 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_USART2_UART_Init+0x94>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 fcf8 	bl	80031bc <HAL_UARTEx_SetRxFifoThreshold>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007d0:	f000 f942 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x94>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f002 fc76 	bl	80030c8 <HAL_UARTEx_DisableFifoMode>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007e0:	f000 f93a 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20001d98 	.word	0x20001d98
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b089      	sub	sp, #36	; 0x24
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	240c      	movs	r4, #12
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	0018      	movs	r0, r3
 8000800:	2314      	movs	r3, #20
 8000802:	001a      	movs	r2, r3
 8000804:	2100      	movs	r1, #0
 8000806:	f004 ff66 	bl	80056d6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b3f      	ldr	r3, [pc, #252]	; (8000908 <MX_GPIO_Init+0x114>)
 800080c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <MX_GPIO_Init+0x114>)
 8000810:	2104      	movs	r1, #4
 8000812:	430a      	orrs	r2, r1
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
 8000816:	4b3c      	ldr	r3, [pc, #240]	; (8000908 <MX_GPIO_Init+0x114>)
 8000818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081a:	2204      	movs	r2, #4
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000822:	4b39      	ldr	r3, [pc, #228]	; (8000908 <MX_GPIO_Init+0x114>)
 8000824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000826:	4b38      	ldr	r3, [pc, #224]	; (8000908 <MX_GPIO_Init+0x114>)
 8000828:	2120      	movs	r1, #32
 800082a:	430a      	orrs	r2, r1
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
 800082e:	4b36      	ldr	r3, [pc, #216]	; (8000908 <MX_GPIO_Init+0x114>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000832:	2220      	movs	r2, #32
 8000834:	4013      	ands	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b33      	ldr	r3, [pc, #204]	; (8000908 <MX_GPIO_Init+0x114>)
 800083c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_GPIO_Init+0x114>)
 8000840:	2101      	movs	r1, #1
 8000842:	430a      	orrs	r2, r1
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
 8000846:	4b30      	ldr	r3, [pc, #192]	; (8000908 <MX_GPIO_Init+0x114>)
 8000848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084a:	2201      	movs	r2, #1
 800084c:	4013      	ands	r3, r2
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|EX_LED_Pin, GPIO_PIN_RESET);
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2200      	movs	r2, #0
 8000858:	2160      	movs	r1, #96	; 0x60
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fc82 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	0192      	lsls	r2, r2, #6
 8000866:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2288      	movs	r2, #136	; 0x88
 800086c:	0352      	lsls	r2, r2, #13
 800086e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000876:	193b      	adds	r3, r7, r4
 8000878:	4a24      	ldr	r2, [pc, #144]	; (800090c <MX_GPIO_Init+0x118>)
 800087a:	0019      	movs	r1, r3
 800087c:	0010      	movs	r0, r2
 800087e:	f000 fb0d 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2201      	movs	r2, #1
 8000886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000894:	193a      	adds	r2, r7, r4
 8000896:	23a0      	movs	r3, #160	; 0xa0
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fafd 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2220      	movs	r2, #32
 80008a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2201      	movs	r2, #1
 80008ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2202      	movs	r2, #2
 80008b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008ba:	193a      	adds	r2, r7, r4
 80008bc:	23a0      	movs	r3, #160	; 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	0011      	movs	r1, r2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 faea 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_LED_Pin */
  GPIO_InitStruct.Pin = EX_LED_Pin;
 80008c8:	0021      	movs	r1, r4
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2240      	movs	r2, #64	; 0x40
 80008ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2201      	movs	r2, #1
 80008d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EX_LED_GPIO_Port, &GPIO_InitStruct);
 80008e2:	187a      	adds	r2, r7, r1
 80008e4:	23a0      	movs	r3, #160	; 0xa0
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fad6 	bl	8000e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2102      	movs	r1, #2
 80008f4:	2007      	movs	r0, #7
 80008f6:	f000 faab 	bl	8000e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008fa:	2007      	movs	r0, #7
 80008fc:	f000 fabd 	bl	8000e7a <HAL_NVIC_EnableIRQ>

}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b009      	add	sp, #36	; 0x24
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	50000800 	.word	0x50000800

08000910 <Taskfunc1>:

/* USER CODE BEGIN 4 */

static void Taskfunc1(void *parameters)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af02      	add	r7, sp, #8
 8000916:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(EX_LED_GPIO_Port, EX_LED_Pin);
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	2140      	movs	r1, #64	; 0x40
 800091e:	0018      	movs	r0, r3
 8000920:	f000 fc3d 	bl	800119e <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart2, "Hello from Task-1\r\n", sizeof("Hello from Task-1\r\n"), 1000);
 8000924:	23fa      	movs	r3, #250	; 0xfa
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4914      	ldr	r1, [pc, #80]	; (800097c <Taskfunc1+0x6c>)
 800092a:	4815      	ldr	r0, [pc, #84]	; (8000980 <Taskfunc1+0x70>)
 800092c:	2214      	movs	r2, #20
 800092e:	f001 fe7d 	bl	800262c <HAL_UART_Transmit>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000932:	23fa      	movs	r3, #250	; 0xfa
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2300      	movs	r3, #0
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2000      	movs	r0, #0
 8000940:	f003 ff20 	bl	8004784 <xTaskGenericNotifyWait>
 8000944:	0003      	movs	r3, r0
 8000946:	60fb      	str	r3, [r7, #12]

		if(status == pdTRUE)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d1e4      	bne.n	8000918 <Taskfunc1+0x8>
		{
			next_task_handle = task2_handle;
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <Taskfunc1+0x74>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <Taskfunc1+0x78>)
 8000954:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA,EX_LED_Pin,GPIO_PIN_SET);
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	2201      	movs	r2, #1
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fc00 	bl	8001164 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart2, "Task-1 Deleted\r\n", sizeof("Task-1 Deleted\r\n"), 1000);
 8000964:	23fa      	movs	r3, #250	; 0xfa
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4908      	ldr	r1, [pc, #32]	; (800098c <Taskfunc1+0x7c>)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <Taskfunc1+0x70>)
 800096c:	2211      	movs	r2, #17
 800096e:	f001 fe5d 	bl	800262c <HAL_UART_Transmit>
			vTaskDelete(NULL);
 8000972:	2000      	movs	r0, #0
 8000974:	f003 f99c 	bl	8003cb0 <vTaskDelete>
		HAL_GPIO_TogglePin(EX_LED_GPIO_Port, EX_LED_Pin);
 8000978:	e7ce      	b.n	8000918 <Taskfunc1+0x8>
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	08005710 	.word	0x08005710
 8000980:	20001d98 	.word	0x20001d98
 8000984:	20001d90 	.word	0x20001d90
 8000988:	20000030 	.word	0x20000030
 800098c:	08005724 	.word	0x08005724

08000990 <Taskfunc2>:
		}
	}
}

static void Taskfunc2(void *parameters)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af02      	add	r7, sp, #8
 8000996:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{

		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000998:	23a0      	movs	r3, #160	; 0xa0
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	2120      	movs	r1, #32
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fbfd 	bl	800119e <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart2, "Hello from Task-2\r\n", sizeof("Hello from Task-2\r\n"), 1000);
 80009a4:	23fa      	movs	r3, #250	; 0xfa
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4913      	ldr	r1, [pc, #76]	; (80009f8 <Taskfunc2+0x68>)
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <Taskfunc2+0x6c>)
 80009ac:	2214      	movs	r2, #20
 80009ae:	f001 fe3d 	bl	800262c <HAL_UART_Transmit>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80009b2:	23fa      	movs	r3, #250	; 0xfa
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2000      	movs	r0, #0
 80009c0:	f003 fee0 	bl	8004784 <xTaskGenericNotifyWait>
 80009c4:	0003      	movs	r3, r0
 80009c6:	60fb      	str	r3, [r7, #12]
		if(status == pdTRUE)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d1e4      	bne.n	8000998 <Taskfunc2+0x8>
		{
			next_task_handle = NULL;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <Taskfunc2+0x70>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA,LED_GREEN_Pin,GPIO_PIN_SET);
 80009d4:	23a0      	movs	r3, #160	; 0xa0
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	2201      	movs	r2, #1
 80009da:	2120      	movs	r1, #32
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fbc1 	bl	8001164 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart2, "Task-2 Deleted\r\n", sizeof("Task-2 Deleted\r\n"), 1000);
 80009e2:	23fa      	movs	r3, #250	; 0xfa
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4907      	ldr	r1, [pc, #28]	; (8000a04 <Taskfunc2+0x74>)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <Taskfunc2+0x6c>)
 80009ea:	2211      	movs	r2, #17
 80009ec:	f001 fe1e 	bl	800262c <HAL_UART_Transmit>
			vTaskDelete(NULL);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f003 f95d 	bl	8003cb0 <vTaskDelete>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009f6:	e7cf      	b.n	8000998 <Taskfunc2+0x8>
 80009f8:	08005738 	.word	0x08005738
 80009fc:	20001d98 	.word	0x20001d98
 8000a00:	20000030 	.word	0x20000030
 8000a04:	0800574c 	.word	0x0800574c

08000a08 <button_func>:
		}
	}
}

void button_func(void *parameters)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	6078      	str	r0, [r7, #4]
		}
		prev_read = btn_read;
		vTaskDelay(pdMS_TO_TICKS(10));
	}*/

	xTaskNotifyFromISR(next_task_handle,0,eNoAction,NULL);
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <button_func+0x28>)
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	2300      	movs	r3, #0
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	f003 ff2d 	bl	8004880 <xTaskGenericNotifyFromISR>

}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	20000030 	.word	0x20000030

08000a34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d101      	bne.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a46:	f000 f949 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	40001000 	.word	0x40001000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0549      	lsls	r1, r1, #21
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	055b      	lsls	r3, r3, #21
 8000a98:	4013      	ands	r3, r2
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a9e:	23c0      	movs	r3, #192	; 0xc0
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 f936 	bl	8000d14 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b08b      	sub	sp, #44	; 0x2c
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	2414      	movs	r4, #20
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	2314      	movs	r3, #20
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f004 fe05 	bl	80056d6 <memset>
  if(huart->Instance==USART2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <HAL_UART_MspInit+0x8c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d130      	bne.n	8000b38 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <HAL_UART_MspInit+0x90>)
 8000ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_MspInit+0x90>)
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0289      	lsls	r1, r1, #10
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_UART_MspInit+0x90>)
 8000ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	029b      	lsls	r3, r3, #10
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_UART_MspInit+0x90>)
 8000af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <HAL_UART_MspInit+0x90>)
 8000af8:	2101      	movs	r1, #1
 8000afa:	430a      	orrs	r2, r1
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_UART_MspInit+0x90>)
 8000b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b02:	2201      	movs	r2, #1
 8000b04:	4013      	ands	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b0a:	0021      	movs	r1, r4
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	220c      	movs	r2, #12
 8000b10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2202      	movs	r2, #2
 8000b16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2201      	movs	r2, #1
 8000b28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	187a      	adds	r2, r7, r1
 8000b2c:	23a0      	movs	r3, #160	; 0xa0
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 f9b2 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b00b      	add	sp, #44	; 0x2c
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority ,0);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	2011      	movs	r0, #17
 8000b60:	f000 f976 	bl	8000e50 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000b64:	2011      	movs	r0, #17
 8000b66:	f000 f988 	bl	8000e7a <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_InitTick+0xa4>)
 8000b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_InitTick+0xa4>)
 8000b70:	2110      	movs	r1, #16
 8000b72:	430a      	orrs	r2, r1
 8000b74:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_InitTick+0xa4>)
 8000b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b82:	230c      	movs	r3, #12
 8000b84:	18fa      	adds	r2, r7, r3
 8000b86:	2310      	movs	r3, #16
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 f86f 	bl	8001c70 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b92:	f001 f857 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8000b96:	0003      	movs	r3, r0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	4914      	ldr	r1, [pc, #80]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff fab2 	bl	8000108 <__udivsi3>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_InitTick+0xb0>)
 8000bae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <HAL_InitTick+0xb4>)
 8000bb4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bb8:	6a3a      	ldr	r2, [r7, #32]
 8000bba:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f001 fa32 	bl	8002034 <HAL_TIM_Base_Init>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d105      	bne.n	8000be0 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 fa8c 	bl	80020f4 <HAL_TIM_Base_Start_IT>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	e000      	b.n	8000be2 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b00a      	add	sp, #40	; 0x28
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	000f4240 	.word	0x000f4240
 8000bf4:	20001e28 	.word	0x20001e28
 8000bf8:	40001000 	.word	0x40001000
 8000bfc:	000003e7 	.word	0x000003e7

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	button_func();
 8000c10:	f7ff fefa 	bl	8000a08 <button_func>
	//xTaskNotifyFromISR(next_task_handle,0,eNoAction,NULL);
  /* USER CODE END EXTI4_15_IRQn 0 */
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	019b      	lsls	r3, r3, #6
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 fadb 	bl	80011d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f001 fabe 	bl	80021ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20001e28 	.word	0x20001e28

08000c3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c4c:	f7ff fff6 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c76:	f004 fd01 	bl	800567c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c7a:	f7ff fcd1 	bl	8000620 <main>

08000c7e <LoopForever>:

LoopForever:
  b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   r0, =_estack
 8000c80:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c8c:	0800584c 	.word	0x0800584c
  ldr r2, =_sbss
 8000c90:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c94:	20001eb8 	.word	0x20001eb8

08000c98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_COMP_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x3c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Init+0x3c>)
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0049      	lsls	r1, r1, #1
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f7ff ff46 	bl	8000b48 <HAL_InitTick>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fecc 	bl	8000a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	18d2      	adds	r2, r2, r3
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_IncTick+0x20>)
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20001e74 	.word	0x20001e74

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	20001e74 	.word	0x20001e74

08000d14 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	0019      	movs	r1, r3
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	fffff9ff 	.word	0xfffff9ff

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	0002      	movs	r2, r0
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b7f      	cmp	r3, #127	; 0x7f
 8000d52:	d809      	bhi.n	8000d68 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	001a      	movs	r2, r3
 8000d5a:	231f      	movs	r3, #31
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_EnableIRQ+0x30>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	4091      	lsls	r1, r2
 8000d64:	000a      	movs	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b7f      	cmp	r3, #127	; 0x7f
 8000d88:	d828      	bhi.n	8000ddc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d8a:	4a2f      	ldr	r2, [pc, #188]	; (8000e48 <__NVIC_SetPriority+0xd4>)
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	33c0      	adds	r3, #192	; 0xc0
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	589b      	ldr	r3, [r3, r2]
 8000d9a:	1dfa      	adds	r2, r7, #7
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	0011      	movs	r1, r2
 8000da0:	2203      	movs	r2, #3
 8000da2:	400a      	ands	r2, r1
 8000da4:	00d2      	lsls	r2, r2, #3
 8000da6:	21ff      	movs	r1, #255	; 0xff
 8000da8:	4091      	lsls	r1, r2
 8000daa:	000a      	movs	r2, r1
 8000dac:	43d2      	mvns	r2, r2
 8000dae:	401a      	ands	r2, r3
 8000db0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	019b      	lsls	r3, r3, #6
 8000db6:	22ff      	movs	r2, #255	; 0xff
 8000db8:	401a      	ands	r2, r3
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	4003      	ands	r3, r0
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc8:	481f      	ldr	r0, [pc, #124]	; (8000e48 <__NVIC_SetPriority+0xd4>)
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	33c0      	adds	r3, #192	; 0xc0
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dda:	e031      	b.n	8000e40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <__NVIC_SetPriority+0xd8>)
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	0019      	movs	r1, r3
 8000de4:	230f      	movs	r3, #15
 8000de6:	400b      	ands	r3, r1
 8000de8:	3b08      	subs	r3, #8
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3306      	adds	r3, #6
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	18d3      	adds	r3, r2, r3
 8000df2:	3304      	adds	r3, #4
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	1dfa      	adds	r2, r7, #7
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	400a      	ands	r2, r1
 8000e00:	00d2      	lsls	r2, r2, #3
 8000e02:	21ff      	movs	r1, #255	; 0xff
 8000e04:	4091      	lsls	r1, r2
 8000e06:	000a      	movs	r2, r1
 8000e08:	43d2      	mvns	r2, r2
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	019b      	lsls	r3, r3, #6
 8000e12:	22ff      	movs	r2, #255	; 0xff
 8000e14:	401a      	ands	r2, r3
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	4003      	ands	r3, r0
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e24:	4809      	ldr	r0, [pc, #36]	; (8000e4c <__NVIC_SetPriority+0xd8>)
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	001c      	movs	r4, r3
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	4023      	ands	r3, r4
 8000e30:	3b08      	subs	r3, #8
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	430a      	orrs	r2, r1
 8000e36:	3306      	adds	r3, #6
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	18c3      	adds	r3, r0, r3
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b003      	add	sp, #12
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	1c02      	adds	r2, r0, #0
 8000e60:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff ff81 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b004      	add	sp, #16
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	0002      	movs	r2, r0
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ff57 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e147      	b.n	800113c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d100      	bne.n	8000ec4 <HAL_GPIO_Init+0x28>
 8000ec2:	e138      	b.n	8001136 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <HAL_GPIO_Init+0x40>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d130      	bne.n	8000f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	43da      	mvns	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	409a      	lsls	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f12:	2201      	movs	r2, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	2201      	movs	r2, #1
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2203      	movs	r2, #3
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d017      	beq.n	8000f7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2203      	movs	r2, #3
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d123      	bne.n	8000fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	58d3      	ldr	r3, [r2, r3]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2207      	movs	r2, #7
 8000f98:	4013      	ands	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	6939      	ldr	r1, [r7, #16]
 8000fcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2203      	movs	r2, #3
 8000fec:	401a      	ands	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	23c0      	movs	r3, #192	; 0xc0
 8001008:	029b      	lsls	r3, r3, #10
 800100a:	4013      	ands	r3, r2
 800100c:	d100      	bne.n	8001010 <HAL_GPIO_Init+0x174>
 800100e:	e092      	b.n	8001136 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001010:	4a50      	ldr	r2, [pc, #320]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3318      	adds	r3, #24
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	589b      	ldr	r3, [r3, r2]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	220f      	movs	r2, #15
 8001028:	409a      	lsls	r2, r3
 800102a:	0013      	movs	r3, r2
 800102c:	43da      	mvns	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	23a0      	movs	r3, #160	; 0xa0
 8001038:	05db      	lsls	r3, r3, #23
 800103a:	429a      	cmp	r2, r3
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x1ca>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a45      	ldr	r2, [pc, #276]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x1c6>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a44      	ldr	r2, [pc, #272]	; (800115c <HAL_GPIO_Init+0x2c0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x1c2>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a43      	ldr	r2, [pc, #268]	; (8001160 <HAL_GPIO_Init+0x2c4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x1be>
 8001056:	2303      	movs	r3, #3
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x1cc>
 800105a:	2305      	movs	r3, #5
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x1cc>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x1cc>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x1cc>
 8001066:	2300      	movs	r3, #0
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	2103      	movs	r1, #3
 800106c:	400a      	ands	r2, r1
 800106e:	00d2      	lsls	r2, r2, #3
 8001070:	4093      	lsls	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001078:	4936      	ldr	r1, [pc, #216]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3318      	adds	r3, #24
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	035b      	lsls	r3, r3, #13
 800109e:	4013      	ands	r3, r2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43da      	mvns	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	039b      	lsls	r3, r3, #14
 80010c8:	4013      	ands	r3, r2
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 80010dc:	2384      	movs	r3, #132	; 0x84
 80010de:	58d3      	ldr	r3, [r2, r3]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43da      	mvns	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	4013      	ands	r3, r2
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001100:	4914      	ldr	r1, [pc, #80]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 8001102:	2284      	movs	r2, #132	; 0x84
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	58d3      	ldr	r3, [r2, r3]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	025b      	lsls	r3, r3, #9
 8001122:	4013      	ands	r3, r2
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800112e:	4909      	ldr	r1, [pc, #36]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	40da      	lsrs	r2, r3
 8001144:	1e13      	subs	r3, r2, #0
 8001146:	d000      	beq.n	800114a <HAL_GPIO_Init+0x2ae>
 8001148:	e6b0      	b.n	8000eac <HAL_GPIO_Init+0x10>
  }
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b006      	add	sp, #24
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021800 	.word	0x40021800
 8001158:	50000400 	.word	0x50000400
 800115c:	50000800 	.word	0x50000800
 8001160:	50000c00 	.word	0x50000c00

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	0008      	movs	r0, r1
 800116e:	0011      	movs	r1, r2
 8001170:	1cbb      	adds	r3, r7, #2
 8001172:	1c02      	adds	r2, r0, #0
 8001174:	801a      	strh	r2, [r3, #0]
 8001176:	1c7b      	adds	r3, r7, #1
 8001178:	1c0a      	adds	r2, r1, #0
 800117a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800117c:	1c7b      	adds	r3, r7, #1
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001184:	1cbb      	adds	r3, r7, #2
 8001186:	881a      	ldrh	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800118c:	e003      	b.n	8001196 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118e:	1cbb      	adds	r3, r7, #2
 8001190:	881a      	ldrh	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	000a      	movs	r2, r1
 80011a8:	1cbb      	adds	r3, r7, #2
 80011aa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b2:	1cbb      	adds	r3, r7, #2
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	041a      	lsls	r2, r3, #16
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	1cb9      	adds	r1, r7, #2
 80011c2:	8809      	ldrh	r1, [r1, #0]
 80011c4:	400b      	ands	r3, r1
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b004      	add	sp, #16
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	0002      	movs	r2, r0
 80011dc:	1dbb      	adds	r3, r7, #6
 80011de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	1dba      	adds	r2, r7, #6
 80011e6:	8812      	ldrh	r2, [r2, #0]
 80011e8:	4013      	ands	r3, r2
 80011ea:	d008      	beq.n	80011fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80011ee:	1dba      	adds	r2, r7, #6
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80011f4:	1dbb      	adds	r3, r7, #6
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	0018      	movs	r0, r3
 80011fa:	f000 f815 	bl	8001228 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	1dba      	adds	r2, r7, #6
 8001204:	8812      	ldrh	r2, [r2, #0]
 8001206:	4013      	ands	r3, r2
 8001208:	d008      	beq.n	800121c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800120c:	1dba      	adds	r2, r7, #6
 800120e:	8812      	ldrh	r2, [r2, #0]
 8001210:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001212:	1dbb      	adds	r3, r7, #6
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	0018      	movs	r0, r3
 8001218:	f000 f810 	bl	800123c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021800 	.word	0x40021800

08001228 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	0002      	movs	r2, r0
 8001230:	1dbb      	adds	r3, r7, #6
 8001232:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	0002      	movs	r2, r0
 8001244:	1dbb      	adds	r3, r7, #6
 8001246:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800125e:	4013      	ands	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	429a      	cmp	r2, r3
 8001272:	d11f      	bne.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	0013      	movs	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	189b      	adds	r3, r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4912      	ldr	r1, [pc, #72]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001282:	0018      	movs	r0, r3
 8001284:	f7fe ff40 	bl	8000108 <__udivsi3>
 8001288:	0003      	movs	r3, r0
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128e:	e008      	b.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3b01      	subs	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	e001      	b.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e009      	b.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	401a      	ands	r2, r3
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d0ed      	beq.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b004      	add	sp, #16
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	40007000 	.word	0x40007000
 80012c4:	fffff9ff 	.word	0xfffff9ff
 80012c8:	20000000 	.word	0x20000000
 80012cc:	000f4240 	.word	0x000f4240

080012d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	23e0      	movs	r3, #224	; 0xe0
 80012da:	01db      	lsls	r3, r3, #7
 80012dc:	4013      	ands	r3, r2
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e2fe      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	4013      	ands	r3, r2
 8001302:	d100      	bne.n	8001306 <HAL_RCC_OscConfig+0x1e>
 8001304:	e07c      	b.n	8001400 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001306:	4bc3      	ldr	r3, [pc, #780]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2238      	movs	r2, #56	; 0x38
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001310:	4bc0      	ldr	r3, [pc, #768]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2203      	movs	r2, #3
 8001316:	4013      	ands	r3, r2
 8001318:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b10      	cmp	r3, #16
 800131e:	d102      	bne.n	8001326 <HAL_RCC_OscConfig+0x3e>
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d002      	beq.n	800132c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b08      	cmp	r3, #8
 800132a:	d10b      	bne.n	8001344 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	4bb9      	ldr	r3, [pc, #740]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	029b      	lsls	r3, r3, #10
 8001334:	4013      	ands	r3, r2
 8001336:	d062      	beq.n	80013fe <HAL_RCC_OscConfig+0x116>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d15e      	bne.n	80013fe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e2d9      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	025b      	lsls	r3, r3, #9
 800134c:	429a      	cmp	r2, r3
 800134e:	d107      	bne.n	8001360 <HAL_RCC_OscConfig+0x78>
 8001350:	4bb0      	ldr	r3, [pc, #704]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4baf      	ldr	r3, [pc, #700]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	0249      	lsls	r1, r1, #9
 800135a:	430a      	orrs	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e020      	b.n	80013a2 <HAL_RCC_OscConfig+0xba>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	23a0      	movs	r3, #160	; 0xa0
 8001366:	02db      	lsls	r3, r3, #11
 8001368:	429a      	cmp	r2, r3
 800136a:	d10e      	bne.n	800138a <HAL_RCC_OscConfig+0xa2>
 800136c:	4ba9      	ldr	r3, [pc, #676]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4ba8      	ldr	r3, [pc, #672]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	02c9      	lsls	r1, r1, #11
 8001376:	430a      	orrs	r2, r1
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	4ba6      	ldr	r3, [pc, #664]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4ba5      	ldr	r3, [pc, #660]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001380:	2180      	movs	r1, #128	; 0x80
 8001382:	0249      	lsls	r1, r1, #9
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e00b      	b.n	80013a2 <HAL_RCC_OscConfig+0xba>
 800138a:	4ba2      	ldr	r3, [pc, #648]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4ba1      	ldr	r3, [pc, #644]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001390:	49a1      	ldr	r1, [pc, #644]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001392:	400a      	ands	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	4b9f      	ldr	r3, [pc, #636]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b9e      	ldr	r3, [pc, #632]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800139c:	499f      	ldr	r1, [pc, #636]	; (800161c <HAL_RCC_OscConfig+0x334>)
 800139e:	400a      	ands	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d014      	beq.n	80013d4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fca9 	bl	8000d00 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fca4 	bl	8000d00 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e298      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c6:	4b93      	ldr	r3, [pc, #588]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	029b      	lsls	r3, r3, #10
 80013ce:	4013      	ands	r3, r2
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xcc>
 80013d2:	e015      	b.n	8001400 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc94 	bl	8000d00 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013de:	f7ff fc8f 	bl	8000d00 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b64      	cmp	r3, #100	; 0x64
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e283      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f0:	4b88      	ldr	r3, [pc, #544]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	029b      	lsls	r3, r3, #10
 80013f8:	4013      	ands	r3, r2
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0xf6>
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2202      	movs	r2, #2
 8001406:	4013      	ands	r3, r2
 8001408:	d100      	bne.n	800140c <HAL_RCC_OscConfig+0x124>
 800140a:	e099      	b.n	8001540 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140c:	4b81      	ldr	r3, [pc, #516]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2238      	movs	r2, #56	; 0x38
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001416:	4b7f      	ldr	r3, [pc, #508]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2203      	movs	r2, #3
 800141c:	4013      	ands	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b10      	cmp	r3, #16
 8001424:	d102      	bne.n	800142c <HAL_RCC_OscConfig+0x144>
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d002      	beq.n	8001432 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d135      	bne.n	800149e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001432:	4b78      	ldr	r3, [pc, #480]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4013      	ands	r3, r2
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x162>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e256      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b72      	ldr	r3, [pc, #456]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a74      	ldr	r2, [pc, #464]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	021a      	lsls	r2, r3, #8
 800145a:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800145c:	430a      	orrs	r2, r1
 800145e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d112      	bne.n	800148c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001466:	4b6b      	ldr	r3, [pc, #428]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6e      	ldr	r2, [pc, #440]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800146c:	4013      	ands	r3, r2
 800146e:	0019      	movs	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	4b67      	ldr	r3, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800147a:	4b66      	ldr	r3, [pc, #408]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0adb      	lsrs	r3, r3, #11
 8001480:	2207      	movs	r2, #7
 8001482:	4013      	ands	r3, r2
 8001484:	4a68      	ldr	r2, [pc, #416]	; (8001628 <HAL_RCC_OscConfig+0x340>)
 8001486:	40da      	lsrs	r2, r3
 8001488:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_RCC_OscConfig+0x344>)
 800148a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x348>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff fb59 	bl	8000b48 <HAL_InitTick>
 8001496:	1e03      	subs	r3, r0, #0
 8001498:	d051      	beq.n	800153e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e22c      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d030      	beq.n	8001508 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014a6:	4b5b      	ldr	r3, [pc, #364]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	0019      	movs	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	4b57      	ldr	r3, [pc, #348]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014ba:	4b56      	ldr	r3, [pc, #344]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b55      	ldr	r3, [pc, #340]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	0049      	lsls	r1, r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fc1a 	bl	8000d00 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc15 	bl	8000d00 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e209      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e4:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4013      	ands	r3, r2
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f0:	4b48      	ldr	r3, [pc, #288]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a4a      	ldr	r2, [pc, #296]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	0019      	movs	r1, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	021a      	lsls	r2, r3, #8
 8001500:	4b44      	ldr	r3, [pc, #272]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001502:	430a      	orrs	r2, r1
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	e01b      	b.n	8001540 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001508:	4b42      	ldr	r3, [pc, #264]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800150e:	4949      	ldr	r1, [pc, #292]	; (8001634 <HAL_RCC_OscConfig+0x34c>)
 8001510:	400a      	ands	r2, r1
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fbf4 	bl	8000d00 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fbef 	bl	8000d00 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1e3      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4013      	ands	r3, r2
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x236>
 800153c:	e000      	b.n	8001540 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2208      	movs	r2, #8
 8001546:	4013      	ands	r3, r2
 8001548:	d047      	beq.n	80015da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800154a:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2238      	movs	r2, #56	; 0x38
 8001550:	4013      	ands	r3, r2
 8001552:	2b18      	cmp	r3, #24
 8001554:	d10a      	bne.n	800156c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001556:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d03c      	beq.n	80015da <HAL_RCC_OscConfig+0x2f2>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d138      	bne.n	80015da <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e1c5      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d019      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800157a:	2101      	movs	r1, #1
 800157c:	430a      	orrs	r2, r1
 800157e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fbbe 	bl	8000d00 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff fbb9 	bl	8000d00 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1ad      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a0:	2202      	movs	r2, #2
 80015a2:	4013      	ands	r3, r2
 80015a4:	d0f1      	beq.n	800158a <HAL_RCC_OscConfig+0x2a2>
 80015a6:	e018      	b.n	80015da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	438a      	bics	r2, r1
 80015b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fba4 	bl	8000d00 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015be:	f7ff fb9f 	bl	8000d00 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e193      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d4:	2202      	movs	r2, #2
 80015d6:	4013      	ands	r3, r2
 80015d8:	d1f1      	bne.n	80015be <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2204      	movs	r2, #4
 80015e0:	4013      	ands	r3, r2
 80015e2:	d100      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2fe>
 80015e4:	e0c6      	b.n	8001774 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	231f      	movs	r3, #31
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2238      	movs	r2, #56	; 0x38
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b20      	cmp	r3, #32
 80015f8:	d11e      	bne.n	8001638 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2202      	movs	r2, #2
 8001600:	4013      	ands	r3, r2
 8001602:	d100      	bne.n	8001606 <HAL_RCC_OscConfig+0x31e>
 8001604:	e0b6      	b.n	8001774 <HAL_RCC_OscConfig+0x48c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d000      	beq.n	8001610 <HAL_RCC_OscConfig+0x328>
 800160e:	e0b1      	b.n	8001774 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e171      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
 8001614:	40021000 	.word	0x40021000
 8001618:	fffeffff 	.word	0xfffeffff
 800161c:	fffbffff 	.word	0xfffbffff
 8001620:	ffff80ff 	.word	0xffff80ff
 8001624:	ffffc7ff 	.word	0xffffc7ff
 8001628:	00f42400 	.word	0x00f42400
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004
 8001634:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001638:	4bb1      	ldr	r3, [pc, #708]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 800163a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	055b      	lsls	r3, r3, #21
 8001640:	4013      	ands	r3, r2
 8001642:	d101      	bne.n	8001648 <HAL_RCC_OscConfig+0x360>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x362>
 8001648:	2300      	movs	r3, #0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d011      	beq.n	8001672 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4bac      	ldr	r3, [pc, #688]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001652:	4bab      	ldr	r3, [pc, #684]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0549      	lsls	r1, r1, #21
 8001658:	430a      	orrs	r2, r1
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
 800165c:	4ba8      	ldr	r3, [pc, #672]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 800165e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	055b      	lsls	r3, r3, #21
 8001664:	4013      	ands	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800166a:	231f      	movs	r3, #31
 800166c:	18fb      	adds	r3, r7, r3
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001672:	4ba4      	ldr	r3, [pc, #656]	; (8001904 <HAL_RCC_OscConfig+0x61c>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4013      	ands	r3, r2
 800167c:	d11a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800167e:	4ba1      	ldr	r3, [pc, #644]	; (8001904 <HAL_RCC_OscConfig+0x61c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4ba0      	ldr	r3, [pc, #640]	; (8001904 <HAL_RCC_OscConfig+0x61c>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	0049      	lsls	r1, r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800168c:	f7ff fb38 	bl	8000d00 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7ff fb33 	bl	8000d00 <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e127      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a8:	4b96      	ldr	r3, [pc, #600]	; (8001904 <HAL_RCC_OscConfig+0x61c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4013      	ands	r3, r2
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x3e2>
 80016bc:	4b90      	ldr	r3, [pc, #576]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80016be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016c0:	4b8f      	ldr	r3, [pc, #572]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016c8:	e01c      	b.n	8001704 <HAL_RCC_OscConfig+0x41c>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x404>
 80016d2:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80016d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d6:	4b8a      	ldr	r3, [pc, #552]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80016d8:	2104      	movs	r1, #4
 80016da:	430a      	orrs	r2, r1
 80016dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80016de:	4b88      	ldr	r3, [pc, #544]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80016e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016e2:	4b87      	ldr	r3, [pc, #540]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0x41c>
 80016ec:	4b84      	ldr	r3, [pc, #528]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80016ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f0:	4b83      	ldr	r3, [pc, #524]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	438a      	bics	r2, r1
 80016f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016f8:	4b81      	ldr	r3, [pc, #516]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80016fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016fc:	4b80      	ldr	r3, [pc, #512]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80016fe:	2104      	movs	r1, #4
 8001700:	438a      	bics	r2, r1
 8001702:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d014      	beq.n	8001736 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff faf8 	bl	8000d00 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001714:	e009      	b.n	800172a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff faf3 	bl	8000d00 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4a79      	ldr	r2, [pc, #484]	; (8001908 <HAL_RCC_OscConfig+0x620>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0e6      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172a:	4b75      	ldr	r3, [pc, #468]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 800172c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x42e>
 8001734:	e013      	b.n	800175e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff fae3 	bl	8000d00 <HAL_GetTick>
 800173a:	0003      	movs	r3, r0
 800173c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173e:	e009      	b.n	8001754 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff fade 	bl	8000d00 <HAL_GetTick>
 8001744:	0002      	movs	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4a6f      	ldr	r2, [pc, #444]	; (8001908 <HAL_RCC_OscConfig+0x620>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0d1      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001754:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800175e:	231f      	movs	r3, #31
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001768:	4b65      	ldr	r3, [pc, #404]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 800176a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800176c:	4b64      	ldr	r3, [pc, #400]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 800176e:	4967      	ldr	r1, [pc, #412]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001770:	400a      	ands	r2, r1
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d100      	bne.n	800177e <HAL_RCC_OscConfig+0x496>
 800177c:	e0bb      	b.n	80018f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177e:	4b60      	ldr	r3, [pc, #384]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2238      	movs	r2, #56	; 0x38
 8001784:	4013      	ands	r3, r2
 8001786:	2b10      	cmp	r3, #16
 8001788:	d100      	bne.n	800178c <HAL_RCC_OscConfig+0x4a4>
 800178a:	e07b      	b.n	8001884 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d156      	bne.n	8001842 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001794:	4b5a      	ldr	r3, [pc, #360]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 800179a:	495d      	ldr	r1, [pc, #372]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 800179c:	400a      	ands	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff faae 	bl	8000d00 <HAL_GetTick>
 80017a4:	0003      	movs	r3, r0
 80017a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017aa:	f7ff faa9 	bl	8000d00 <HAL_GetTick>
 80017ae:	0002      	movs	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e09d      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	049b      	lsls	r3, r3, #18
 80017c4:	4013      	ands	r3, r2
 80017c6:	d1f0      	bne.n	80017aa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c8:	4b4d      	ldr	r3, [pc, #308]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a51      	ldr	r2, [pc, #324]	; (8001914 <HAL_RCC_OscConfig+0x62c>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	0019      	movs	r1, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1a      	ldr	r2, [r3, #32]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f4:	431a      	orrs	r2, r3
 80017f6:	4b42      	ldr	r3, [pc, #264]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	4b40      	ldr	r3, [pc, #256]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	0449      	lsls	r1, r1, #17
 8001806:	430a      	orrs	r2, r1
 8001808:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	0549      	lsls	r1, r1, #21
 8001814:	430a      	orrs	r2, r1
 8001816:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fa72 	bl	8000d00 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001822:	f7ff fa6d 	bl	8000d00 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e061      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	049b      	lsls	r3, r3, #18
 800183c:	4013      	ands	r3, r2
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x53a>
 8001840:	e059      	b.n	80018f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001848:	4931      	ldr	r1, [pc, #196]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 800184a:	400a      	ands	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fa57 	bl	8000d00 <HAL_GetTick>
 8001852:	0003      	movs	r3, r0
 8001854:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff fa52 	bl	8000d00 <HAL_GetTick>
 800185c:	0002      	movs	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e046      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186a:	4b25      	ldr	r3, [pc, #148]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	049b      	lsls	r3, r3, #18
 8001872:	4013      	ands	r3, r2
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 800187c:	4926      	ldr	r1, [pc, #152]	; (8001918 <HAL_RCC_OscConfig+0x630>)
 800187e:	400a      	ands	r2, r1
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	e038      	b.n	80018f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e033      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_RCC_OscConfig+0x618>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2203      	movs	r2, #3
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d126      	bne.n	80018f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2270      	movs	r2, #112	; 0x70
 80018a8:	401a      	ands	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d11f      	bne.n	80018f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	23fe      	movs	r3, #254	; 0xfe
 80018b6:	01db      	lsls	r3, r3, #7
 80018b8:	401a      	ands	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d116      	bne.n	80018f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	23f8      	movs	r3, #248	; 0xf8
 80018c8:	039b      	lsls	r3, r3, #14
 80018ca:	401a      	ands	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d10e      	bne.n	80018f2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	23e0      	movs	r3, #224	; 0xe0
 80018d8:	051b      	lsls	r3, r3, #20
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	0f5b      	lsrs	r3, r3, #29
 80018e8:	075a      	lsls	r2, r3, #29
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b008      	add	sp, #32
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	40007000 	.word	0x40007000
 8001908:	00001388 	.word	0x00001388
 800190c:	efffffff 	.word	0xefffffff
 8001910:	feffffff 	.word	0xfeffffff
 8001914:	11c1808c 	.word	0x11c1808c
 8001918:	eefefffc 	.word	0xeefefffc

0800191c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0e9      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b76      	ldr	r3, [pc, #472]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2207      	movs	r2, #7
 8001936:	4013      	ands	r3, r2
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d91e      	bls.n	800197c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2207      	movs	r2, #7
 8001944:	4393      	bics	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	4b70      	ldr	r3, [pc, #448]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001950:	f7ff f9d6 	bl	8000d00 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001958:	e009      	b.n	800196e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195a:	f7ff f9d1 	bl	8000d00 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4a6a      	ldr	r2, [pc, #424]	; (8001b10 <HAL_RCC_ClockConfig+0x1f4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0ca      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2207      	movs	r2, #7
 8001974:	4013      	ands	r3, r2
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d1ee      	bne.n	800195a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d015      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2204      	movs	r2, #4
 800198c:	4013      	ands	r3, r2
 800198e:	d006      	beq.n	800199e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001990:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	4b5f      	ldr	r3, [pc, #380]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001996:	21e0      	movs	r1, #224	; 0xe0
 8001998:	01c9      	lsls	r1, r1, #7
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199e:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	4a5d      	ldr	r2, [pc, #372]	; (8001b18 <HAL_RCC_ClockConfig+0x1fc>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	0019      	movs	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 80019ae:	430a      	orrs	r2, r1
 80019b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4013      	ands	r3, r2
 80019ba:	d057      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c4:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	029b      	lsls	r3, r3, #10
 80019cc:	4013      	ands	r3, r2
 80019ce:	d12b      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e097      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d107      	bne.n	80019ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019dc:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	049b      	lsls	r3, r3, #18
 80019e4:	4013      	ands	r3, r2
 80019e6:	d11f      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e08b      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d107      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4013      	ands	r3, r2
 80019fe:	d113      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e07f      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e074      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e06d      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	4393      	bics	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a3c:	f7ff f960 	bl	8000d00 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a44:	e009      	b.n	8001a5a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a46:	f7ff f95b 	bl	8000d00 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	4a2f      	ldr	r2, [pc, #188]	; (8001b10 <HAL_RCC_ClockConfig+0x1f4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e054      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2238      	movs	r2, #56	; 0x38
 8001a60:	401a      	ands	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1ec      	bne.n	8001a46 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2207      	movs	r2, #7
 8001a72:	4013      	ands	r3, r2
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d21e      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2207      	movs	r2, #7
 8001a80:	4393      	bics	r3, r2
 8001a82:	0019      	movs	r1, r3
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f938 	bl	8000d00 <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a94:	e009      	b.n	8001aaa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a96:	f7ff f933 	bl	8000d00 <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <HAL_RCC_ClockConfig+0x1f4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e02c      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2207      	movs	r2, #7
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2204      	movs	r2, #4
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <HAL_RCC_ClockConfig+0x200>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ad6:	f000 f829 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001ada:	0001      	movs	r1, r0
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_RCC_ClockConfig+0x1f8>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_RCC_ClockConfig+0x204>)
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	58d3      	ldr	r3, [r2, r3]
 8001aec:	221f      	movs	r2, #31
 8001aee:	4013      	ands	r3, r2
 8001af0:	000a      	movs	r2, r1
 8001af2:	40da      	lsrs	r2, r3
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_ClockConfig+0x208>)
 8001af6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_ClockConfig+0x20c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff f823 	bl	8000b48 <HAL_InitTick>
 8001b02:	0003      	movs	r3, r0
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b004      	add	sp, #16
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	00001388 	.word	0x00001388
 8001b14:	40021000 	.word	0x40021000
 8001b18:	fffff0ff 	.word	0xfffff0ff
 8001b1c:	ffff8fff 	.word	0xffff8fff
 8001b20:	08005778 	.word	0x08005778
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b32:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2238      	movs	r2, #56	; 0x38
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d10f      	bne.n	8001b5c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0adb      	lsrs	r3, r3, #11
 8001b42:	2207      	movs	r2, #7
 8001b44:	4013      	ands	r3, r2
 8001b46:	2201      	movs	r2, #1
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b4e:	6839      	ldr	r1, [r7, #0]
 8001b50:	4835      	ldr	r0, [pc, #212]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b52:	f7fe fad9 	bl	8000108 <__udivsi3>
 8001b56:	0003      	movs	r3, r0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	e05d      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b5c:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2238      	movs	r2, #56	; 0x38
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d102      	bne.n	8001b6e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x100>)
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	e054      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2238      	movs	r2, #56	; 0x38
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d138      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d10d      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	4824      	ldr	r0, [pc, #144]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x100>)
 8001b9c:	f7fe fab4 	bl	8000108 <__udivsi3>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	227f      	movs	r2, #127	; 0x7f
 8001bac:	4013      	ands	r3, r2
 8001bae:	434b      	muls	r3, r1
 8001bb0:	617b      	str	r3, [r7, #20]
        break;
 8001bb2:	e00d      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	481c      	ldr	r0, [pc, #112]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bb8:	f7fe faa6 	bl	8000108 <__udivsi3>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	227f      	movs	r2, #127	; 0x7f
 8001bc8:	4013      	ands	r3, r2
 8001bca:	434b      	muls	r3, r1
 8001bcc:	617b      	str	r3, [r7, #20]
        break;
 8001bce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0f5b      	lsrs	r3, r3, #29
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	4013      	ands	r3, r2
 8001bda:	3301      	adds	r3, #1
 8001bdc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	6978      	ldr	r0, [r7, #20]
 8001be2:	f7fe fa91 	bl	8000108 <__udivsi3>
 8001be6:	0003      	movs	r3, r0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	e015      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2238      	movs	r2, #56	; 0x38
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d103      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2238      	movs	r2, #56	; 0x38
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b18      	cmp	r3, #24
 8001c0a:	d103      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c0c:	23fa      	movs	r3, #250	; 0xfa
 8001c0e:	01db      	lsls	r3, r3, #7
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	e001      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c18:	693b      	ldr	r3, [r7, #16]
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b006      	add	sp, #24
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40021000 	.word	0x40021000
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	007a1200 	.word	0x007a1200

08001c30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	20000000 	.word	0x20000000

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c48:	f7ff fff2 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c4c:	0004      	movs	r4, r0
 8001c4e:	f7ff fb3f 	bl	80012d0 <LL_RCC_GetAPB1Prescaler>
 8001c52:	0003      	movs	r3, r0
 8001c54:	0b1a      	lsrs	r2, r3, #12
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	58d3      	ldr	r3, [r2, r3]
 8001c5c:	221f      	movs	r2, #31
 8001c5e:	4013      	ands	r3, r2
 8001c60:	40dc      	lsrs	r4, r3
 8001c62:	0023      	movs	r3, r4
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	080057b8 	.word	0x080057b8

08001c70 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_RCC_GetClockConfig+0x4c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2207      	movs	r2, #7
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_GetClockConfig+0x4c>)
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	23f0      	movs	r3, #240	; 0xf0
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_RCC_GetClockConfig+0x4c>)
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	23e0      	movs	r3, #224	; 0xe0
 8001ca0:	01db      	lsls	r3, r3, #7
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetClockConfig+0x50>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2207      	movs	r2, #7
 8001cae:	401a      	ands	r2, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40022000 	.word	0x40022000

08001cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ccc:	2313      	movs	r3, #19
 8001cce:	18fb      	adds	r3, r7, r3
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	029b      	lsls	r3, r3, #10
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d100      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ce8:	e0a3      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cea:	2011      	movs	r0, #17
 8001cec:	183b      	adds	r3, r7, r0
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf2:	4bc3      	ldr	r3, [pc, #780]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	055b      	lsls	r3, r3, #21
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d110      	bne.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4bc0      	ldr	r3, [pc, #768]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d02:	4bbf      	ldr	r3, [pc, #764]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	0549      	lsls	r1, r1, #21
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d0c:	4bbc      	ldr	r3, [pc, #752]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	055b      	lsls	r3, r3, #21
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1a:	183b      	adds	r3, r7, r0
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d20:	4bb8      	ldr	r3, [pc, #736]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4bb7      	ldr	r3, [pc, #732]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	0049      	lsls	r1, r1, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d2e:	f7fe ffe7 	bl	8000d00 <HAL_GetTick>
 8001d32:	0003      	movs	r3, r0
 8001d34:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d36:	e00b      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d38:	f7fe ffe2 	bl	8000d00 <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d904      	bls.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d46:	2313      	movs	r3, #19
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	701a      	strb	r2, [r3, #0]
        break;
 8001d4e:	e005      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d50:	4bac      	ldr	r3, [pc, #688]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d0ed      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d5c:	2313      	movs	r3, #19
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d154      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d66:	4ba6      	ldr	r3, [pc, #664]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d6a:	23c0      	movs	r3, #192	; 0xc0
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d019      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d014      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d82:	4b9f      	ldr	r3, [pc, #636]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	4aa0      	ldr	r2, [pc, #640]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d8c:	4b9c      	ldr	r3, [pc, #624]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d90:	4b9b      	ldr	r3, [pc, #620]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	0249      	lsls	r1, r1, #9
 8001d96:	430a      	orrs	r2, r1
 8001d98:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d9a:	4b99      	ldr	r3, [pc, #612]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d9e:	4b98      	ldr	r3, [pc, #608]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da0:	499a      	ldr	r1, [pc, #616]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001da2:	400a      	ands	r2, r1
 8001da4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001da6:	4b96      	ldr	r3, [pc, #600]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4013      	ands	r3, r2
 8001db2:	d016      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7fe ffa4 	bl	8000d00 <HAL_GetTick>
 8001db8:	0003      	movs	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dbc:	e00c      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7fe ff9f 	bl	8000d00 <HAL_GetTick>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	4a91      	ldr	r2, [pc, #580]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d904      	bls.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001dce:	2313      	movs	r3, #19
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	701a      	strb	r2, [r3, #0]
            break;
 8001dd6:	e004      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd8:	4b89      	ldr	r3, [pc, #548]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2202      	movs	r2, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	d0ed      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001de2:	2313      	movs	r3, #19
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10a      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dec:	4b84      	ldr	r3, [pc, #528]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	4a85      	ldr	r2, [pc, #532]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e00:	e00c      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e02:	2312      	movs	r3, #18
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2213      	movs	r2, #19
 8001e08:	18ba      	adds	r2, r7, r2
 8001e0a:	7812      	ldrb	r2, [r2, #0]
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	e005      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e10:	2312      	movs	r3, #18
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	2213      	movs	r2, #19
 8001e16:	18ba      	adds	r2, r7, r2
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e1c:	2311      	movs	r3, #17
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d105      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b76      	ldr	r3, [pc, #472]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e2a:	4b75      	ldr	r3, [pc, #468]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e2c:	4979      	ldr	r1, [pc, #484]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2201      	movs	r2, #1
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d009      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e3c:	4b70      	ldr	r3, [pc, #448]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e40:	2203      	movs	r2, #3
 8001e42:	4393      	bics	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2202      	movs	r2, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d009      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e5a:	4b69      	ldr	r3, [pc, #420]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	220c      	movs	r2, #12
 8001e60:	4393      	bics	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	4b65      	ldr	r3, [pc, #404]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2210      	movs	r2, #16
 8001e74:	4013      	ands	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e78:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	4a66      	ldr	r2, [pc, #408]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e98:	4b59      	ldr	r3, [pc, #356]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	4a5f      	ldr	r2, [pc, #380]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	4b56      	ldr	r3, [pc, #344]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001eb8:	4b51      	ldr	r3, [pc, #324]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	4a58      	ldr	r2, [pc, #352]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	4b4e      	ldr	r3, [pc, #312]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d009      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ed6:	4b4a      	ldr	r3, [pc, #296]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	4b46      	ldr	r3, [pc, #280]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	01db      	lsls	r3, r3, #7
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d015      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ef6:	4b42      	ldr	r3, [pc, #264]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	0899      	lsrs	r1, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1a      	ldr	r2, [r3, #32]
 8001f02:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1a      	ldr	r2, [r3, #32]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	05db      	lsls	r3, r3, #23
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d106      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f14:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	4b39      	ldr	r3, [pc, #228]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f1a:	2180      	movs	r1, #128	; 0x80
 8001f1c:	0249      	lsls	r1, r1, #9
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	031b      	lsls	r3, r3, #12
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	2240      	movs	r2, #64	; 0x40
 8001f34:	4393      	bics	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	039b      	lsls	r3, r3, #14
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d016      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	4a35      	ldr	r2, [pc, #212]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	03db      	lsls	r3, r3, #15
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0449      	lsls	r1, r1, #17
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	03db      	lsls	r3, r3, #15
 8001f84:	4013      	ands	r3, r2
 8001f86:	d016      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	4a27      	ldr	r2, [pc, #156]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	045b      	lsls	r3, r3, #17
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	0449      	lsls	r1, r1, #17
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d016      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	01db      	lsls	r3, r3, #7
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d106      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	0249      	lsls	r1, r1, #9
 8001fec:	430a      	orrs	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001ff0:	2312      	movs	r3, #18
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	781b      	ldrb	r3, [r3, #0]
}
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b006      	add	sp, #24
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
 8002008:	fffffcff 	.word	0xfffffcff
 800200c:	fffeffff 	.word	0xfffeffff
 8002010:	00001388 	.word	0x00001388
 8002014:	efffffff 	.word	0xefffffff
 8002018:	fffff3ff 	.word	0xfffff3ff
 800201c:	fff3ffff 	.word	0xfff3ffff
 8002020:	ffcfffff 	.word	0xffcfffff
 8002024:	ffffcfff 	.word	0xffffcfff
 8002028:	ffbfffff 	.word	0xffbfffff
 800202c:	feffffff 	.word	0xfeffffff
 8002030:	ffff3fff 	.word	0xffff3fff

08002034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e04a      	b.n	80020dc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	223d      	movs	r2, #61	; 0x3d
 800204a:	5c9b      	ldrb	r3, [r3, r2]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d107      	bne.n	8002062 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	223c      	movs	r2, #60	; 0x3c
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f000 f841 	bl	80020e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	223d      	movs	r2, #61	; 0x3d
 8002066:	2102      	movs	r1, #2
 8002068:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	0019      	movs	r1, r3
 8002074:	0010      	movs	r0, r2
 8002076:	f000 f9eb 	bl	8002450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2248      	movs	r2, #72	; 0x48
 800207e:	2101      	movs	r1, #1
 8002080:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	223e      	movs	r2, #62	; 0x3e
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	223f      	movs	r2, #63	; 0x3f
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2240      	movs	r2, #64	; 0x40
 8002096:	2101      	movs	r1, #1
 8002098:	5499      	strb	r1, [r3, r2]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2241      	movs	r2, #65	; 0x41
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2242      	movs	r2, #66	; 0x42
 80020a6:	2101      	movs	r1, #1
 80020a8:	5499      	strb	r1, [r3, r2]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2243      	movs	r2, #67	; 0x43
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2244      	movs	r2, #68	; 0x44
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2245      	movs	r2, #69	; 0x45
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2246      	movs	r2, #70	; 0x46
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2247      	movs	r2, #71	; 0x47
 80020ce:	2101      	movs	r1, #1
 80020d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	223d      	movs	r2, #61	; 0x3d
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020ec:	46c0      	nop			; (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	223d      	movs	r2, #61	; 0x3d
 8002100:	5c9b      	ldrb	r3, [r3, r2]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d001      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e042      	b.n	8002192 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	223d      	movs	r2, #61	; 0x3d
 8002110:	2102      	movs	r1, #2
 8002112:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2101      	movs	r1, #1
 8002120:	430a      	orrs	r2, r1
 8002122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_TIM_Base_Start_IT+0xa8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00f      	beq.n	800214e <HAL_TIM_Base_Start_IT+0x5a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	05db      	lsls	r3, r3, #23
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <HAL_TIM_Base_Start_IT+0x5a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <HAL_TIM_Base_Start_IT+0xac>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d004      	beq.n	800214e <HAL_TIM_Base_Start_IT+0x5a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d116      	bne.n	800217c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002156:	4013      	ands	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b06      	cmp	r3, #6
 800215e:	d016      	beq.n	800218e <HAL_TIM_Base_Start_IT+0x9a>
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	025b      	lsls	r3, r3, #9
 8002166:	429a      	cmp	r2, r3
 8002168:	d011      	beq.n	800218e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2101      	movs	r1, #1
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217a:	e008      	b.n	800218e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e000      	b.n	8002190 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b004      	add	sp, #16
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40014000 	.word	0x40014000
 80021a8:	00010007 	.word	0x00010007

080021ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2202      	movs	r2, #2
 80021bc:	4013      	ands	r3, r2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d124      	bne.n	800220c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2202      	movs	r2, #2
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d11d      	bne.n	800220c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2203      	movs	r2, #3
 80021d6:	4252      	negs	r2, r2
 80021d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2203      	movs	r2, #3
 80021e8:	4013      	ands	r3, r2
 80021ea:	d004      	beq.n	80021f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 f916 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 80021f4:	e007      	b.n	8002206 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 f909 	bl	8002410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 f915 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2204      	movs	r2, #4
 8002214:	4013      	ands	r3, r2
 8002216:	2b04      	cmp	r3, #4
 8002218:	d125      	bne.n	8002266 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2204      	movs	r2, #4
 8002222:	4013      	ands	r3, r2
 8002224:	2b04      	cmp	r3, #4
 8002226:	d11e      	bne.n	8002266 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2205      	movs	r2, #5
 800222e:	4252      	negs	r2, r2
 8002230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2202      	movs	r2, #2
 8002236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	23c0      	movs	r3, #192	; 0xc0
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4013      	ands	r3, r2
 8002244:	d004      	beq.n	8002250 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0018      	movs	r0, r3
 800224a:	f000 f8e9 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 800224e:	e007      	b.n	8002260 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	0018      	movs	r0, r3
 8002254:	f000 f8dc 	bl	8002410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	0018      	movs	r0, r3
 800225c:	f000 f8e8 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2208      	movs	r2, #8
 800226e:	4013      	ands	r3, r2
 8002270:	2b08      	cmp	r3, #8
 8002272:	d124      	bne.n	80022be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2208      	movs	r2, #8
 800227c:	4013      	ands	r3, r2
 800227e:	2b08      	cmp	r3, #8
 8002280:	d11d      	bne.n	80022be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2209      	movs	r2, #9
 8002288:	4252      	negs	r2, r2
 800228a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2204      	movs	r2, #4
 8002290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2203      	movs	r2, #3
 800229a:	4013      	ands	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 f8bd 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 80022a6:	e007      	b.n	80022b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 f8b0 	bl	8002410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 f8bc 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2210      	movs	r2, #16
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b10      	cmp	r3, #16
 80022ca:	d125      	bne.n	8002318 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2210      	movs	r2, #16
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d11e      	bne.n	8002318 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2211      	movs	r2, #17
 80022e0:	4252      	negs	r2, r2
 80022e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2208      	movs	r2, #8
 80022e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	23c0      	movs	r3, #192	; 0xc0
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 f890 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 8002300:	e007      	b.n	8002312 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f000 f883 	bl	8002410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0018      	movs	r0, r3
 800230e:	f000 f88f 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2201      	movs	r2, #1
 8002320:	4013      	ands	r3, r2
 8002322:	2b01      	cmp	r3, #1
 8002324:	d10f      	bne.n	8002346 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	4013      	ands	r3, r2
 8002330:	2b01      	cmp	r3, #1
 8002332:	d108      	bne.n	8002346 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2202      	movs	r2, #2
 800233a:	4252      	negs	r2, r2
 800233c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0018      	movs	r0, r3
 8002342:	f7fe fb77 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	4013      	ands	r3, r2
 8002350:	2b80      	cmp	r3, #128	; 0x80
 8002352:	d10f      	bne.n	8002374 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2280      	movs	r2, #128	; 0x80
 800235c:	4013      	ands	r3, r2
 800235e:	2b80      	cmp	r3, #128	; 0x80
 8002360:	d108      	bne.n	8002374 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2281      	movs	r2, #129	; 0x81
 8002368:	4252      	negs	r2, r2
 800236a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0018      	movs	r0, r3
 8002370:	f000 f8f6 	bl	8002560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	401a      	ands	r2, r3
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	429a      	cmp	r2, r3
 8002386:	d10e      	bne.n	80023a6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	4013      	ands	r3, r2
 8002392:	2b80      	cmp	r3, #128	; 0x80
 8002394:	d107      	bne.n	80023a6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_TIM_IRQHandler+0x260>)
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 f8e5 	bl	8002570 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2240      	movs	r2, #64	; 0x40
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d10f      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	4013      	ands	r3, r2
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d108      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2241      	movs	r2, #65	; 0x41
 80023c8:	4252      	negs	r2, r2
 80023ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 f836 	bl	8002440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2220      	movs	r2, #32
 80023dc:	4013      	ands	r3, r2
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d10f      	bne.n	8002402 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d108      	bne.n	8002402 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2221      	movs	r2, #33	; 0x21
 80023f6:	4252      	negs	r2, r2
 80023f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 f8a7 	bl	8002550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	46bd      	mov	sp, r7
 8002406:	b002      	add	sp, #8
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	fffffeff 	.word	0xfffffeff

08002410 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b002      	add	sp, #8
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}

08002450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a34      	ldr	r2, [pc, #208]	; (8002534 <TIM_Base_SetConfig+0xe4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d008      	beq.n	800247a <TIM_Base_SetConfig+0x2a>
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	05db      	lsls	r3, r3, #23
 800246e:	429a      	cmp	r2, r3
 8002470:	d003      	beq.n	800247a <TIM_Base_SetConfig+0x2a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a30      	ldr	r2, [pc, #192]	; (8002538 <TIM_Base_SetConfig+0xe8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d108      	bne.n	800248c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2270      	movs	r2, #112	; 0x70
 800247e:	4393      	bics	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a29      	ldr	r2, [pc, #164]	; (8002534 <TIM_Base_SetConfig+0xe4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d018      	beq.n	80024c6 <TIM_Base_SetConfig+0x76>
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	05db      	lsls	r3, r3, #23
 800249a:	429a      	cmp	r2, r3
 800249c:	d013      	beq.n	80024c6 <TIM_Base_SetConfig+0x76>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a25      	ldr	r2, [pc, #148]	; (8002538 <TIM_Base_SetConfig+0xe8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00f      	beq.n	80024c6 <TIM_Base_SetConfig+0x76>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a24      	ldr	r2, [pc, #144]	; (800253c <TIM_Base_SetConfig+0xec>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00b      	beq.n	80024c6 <TIM_Base_SetConfig+0x76>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a23      	ldr	r2, [pc, #140]	; (8002540 <TIM_Base_SetConfig+0xf0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <TIM_Base_SetConfig+0x76>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a22      	ldr	r2, [pc, #136]	; (8002544 <TIM_Base_SetConfig+0xf4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d003      	beq.n	80024c6 <TIM_Base_SetConfig+0x76>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a21      	ldr	r2, [pc, #132]	; (8002548 <TIM_Base_SetConfig+0xf8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d108      	bne.n	80024d8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a20      	ldr	r2, [pc, #128]	; (800254c <TIM_Base_SetConfig+0xfc>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2280      	movs	r2, #128	; 0x80
 80024dc:	4393      	bics	r3, r2
 80024de:	001a      	movs	r2, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <TIM_Base_SetConfig+0xe4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00b      	beq.n	800251e <TIM_Base_SetConfig+0xce>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <TIM_Base_SetConfig+0xf0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <TIM_Base_SetConfig+0xce>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <TIM_Base_SetConfig+0xf4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <TIM_Base_SetConfig+0xce>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <TIM_Base_SetConfig+0xf8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d103      	bne.n	8002526 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	615a      	str	r2, [r3, #20]
}
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b004      	add	sp, #16
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40000400 	.word	0x40000400
 800253c:	40002000 	.word	0x40002000
 8002540:	40014000 	.word	0x40014000
 8002544:	40014400 	.word	0x40014400
 8002548:	40014800 	.word	0x40014800
 800254c:	fffffcff 	.word	0xfffffcff

08002550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e046      	b.n	8002620 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2284      	movs	r2, #132	; 0x84
 8002596:	589b      	ldr	r3, [r3, r2]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d107      	bne.n	80025ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	2100      	movs	r1, #0
 80025a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f7fe fa84 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2284      	movs	r2, #132	; 0x84
 80025b0:	2124      	movs	r1, #36	; 0x24
 80025b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2101      	movs	r1, #1
 80025c0:	438a      	bics	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 f8dc 	bl	8002784 <UART_SetConfig>
 80025cc:	0003      	movs	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e024      	b.n	8002620 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fbab 	bl	8002d3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	490d      	ldr	r1, [pc, #52]	; (8002628 <HAL_UART_Init+0xa8>)
 80025f2:	400a      	ands	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	212a      	movs	r1, #42	; 0x2a
 8002602:	438a      	bics	r2, r1
 8002604:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2101      	movs	r1, #1
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	f000 fc43 	bl	8002ea4 <UART_CheckIdleState>
 800261e:	0003      	movs	r3, r0
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}
 8002628:	ffffb7ff 	.word	0xffffb7ff

0800262c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	1dbb      	adds	r3, r7, #6
 800263a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2284      	movs	r2, #132	; 0x84
 8002640:	589b      	ldr	r3, [r3, r2]
 8002642:	2b20      	cmp	r3, #32
 8002644:	d000      	beq.n	8002648 <HAL_UART_Transmit+0x1c>
 8002646:	e097      	b.n	8002778 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_UART_Transmit+0x2a>
 800264e:	1dbb      	adds	r3, r7, #6
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e08f      	b.n	800277a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	015b      	lsls	r3, r3, #5
 8002662:	429a      	cmp	r2, r3
 8002664:	d109      	bne.n	800267a <HAL_UART_Transmit+0x4e>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	d001      	beq.n	800267a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e07f      	b.n	800277a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	5c9b      	ldrb	r3, [r3, r2]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_UART_Transmit+0x5c>
 8002684:	2302      	movs	r3, #2
 8002686:	e078      	b.n	800277a <HAL_UART_Transmit+0x14e>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	2101      	movs	r1, #1
 800268e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	228c      	movs	r2, #140	; 0x8c
 8002694:	2100      	movs	r1, #0
 8002696:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2284      	movs	r2, #132	; 0x84
 800269c:	2121      	movs	r1, #33	; 0x21
 800269e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026a0:	f7fe fb2e 	bl	8000d00 <HAL_GetTick>
 80026a4:	0003      	movs	r3, r0
 80026a6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1dba      	adds	r2, r7, #6
 80026ac:	2154      	movs	r1, #84	; 0x54
 80026ae:	8812      	ldrh	r2, [r2, #0]
 80026b0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1dba      	adds	r2, r7, #6
 80026b6:	2156      	movs	r1, #86	; 0x56
 80026b8:	8812      	ldrh	r2, [r2, #0]
 80026ba:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	015b      	lsls	r3, r3, #5
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d108      	bne.n	80026da <HAL_UART_Transmit+0xae>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d104      	bne.n	80026da <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	e003      	b.n	80026e2 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2280      	movs	r2, #128	; 0x80
 80026e6:	2100      	movs	r1, #0
 80026e8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80026ea:	e02c      	b.n	8002746 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	0013      	movs	r3, r2
 80026f6:	2200      	movs	r2, #0
 80026f8:	2180      	movs	r1, #128	; 0x80
 80026fa:	f000 fc1d 	bl	8002f38 <UART_WaitOnFlagUntilTimeout>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d001      	beq.n	8002706 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e039      	b.n	800277a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	001a      	movs	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	05d2      	lsls	r2, r2, #23
 8002718:	0dd2      	lsrs	r2, r2, #23
 800271a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	3302      	adds	r3, #2
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e007      	b.n	8002734 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	781a      	ldrb	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2256      	movs	r2, #86	; 0x56
 8002738:	5a9b      	ldrh	r3, [r3, r2]
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b299      	uxth	r1, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2256      	movs	r2, #86	; 0x56
 8002744:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2256      	movs	r2, #86	; 0x56
 800274a:	5a9b      	ldrh	r3, [r3, r2]
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1cc      	bne.n	80026ec <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	0013      	movs	r3, r2
 800275c:	2200      	movs	r2, #0
 800275e:	2140      	movs	r1, #64	; 0x40
 8002760:	f000 fbea 	bl	8002f38 <UART_WaitOnFlagUntilTimeout>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d001      	beq.n	800276c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e006      	b.n	800277a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2284      	movs	r2, #132	; 0x84
 8002770:	2120      	movs	r1, #32
 8002772:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b008      	add	sp, #32
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b090      	sub	sp, #64	; 0x40
 8002788:	af00      	add	r7, sp, #0
 800278a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800278c:	231a      	movs	r3, #26
 800278e:	2220      	movs	r2, #32
 8002790:	4694      	mov	ip, r2
 8002792:	44bc      	add	ip, r7
 8002794:	4463      	add	r3, ip
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4ab9      	ldr	r2, [pc, #740]	; (8002aa0 <UART_SetConfig+0x31c>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4ab5      	ldr	r2, [pc, #724]	; (8002aa4 <UART_SetConfig+0x320>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	0018      	movs	r0, r3
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	68d9      	ldr	r1, [r3, #12]
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	0003      	movs	r3, r0
 80027de:	430b      	orrs	r3, r1
 80027e0:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4aae      	ldr	r2, [pc, #696]	; (8002aa8 <UART_SetConfig+0x324>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027f8:	4313      	orrs	r3, r2
 80027fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4aaa      	ldr	r2, [pc, #680]	; (8002aac <UART_SetConfig+0x328>)
 8002804:	4013      	ands	r3, r2
 8002806:	0019      	movs	r1, r3
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800280e:	430b      	orrs	r3, r1
 8002810:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	220f      	movs	r2, #15
 800281a:	4393      	bics	r3, r2
 800281c:	0018      	movs	r0, r3
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	0003      	movs	r3, r0
 8002828:	430b      	orrs	r3, r1
 800282a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a9f      	ldr	r2, [pc, #636]	; (8002ab0 <UART_SetConfig+0x32c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d136      	bne.n	80028a4 <UART_SetConfig+0x120>
 8002836:	4b9f      	ldr	r3, [pc, #636]	; (8002ab4 <UART_SetConfig+0x330>)
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	2203      	movs	r2, #3
 800283c:	4013      	ands	r3, r2
 800283e:	2b03      	cmp	r3, #3
 8002840:	d020      	beq.n	8002884 <UART_SetConfig+0x100>
 8002842:	d827      	bhi.n	8002894 <UART_SetConfig+0x110>
 8002844:	2b02      	cmp	r3, #2
 8002846:	d00d      	beq.n	8002864 <UART_SetConfig+0xe0>
 8002848:	d824      	bhi.n	8002894 <UART_SetConfig+0x110>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <UART_SetConfig+0xd0>
 800284e:	2b01      	cmp	r3, #1
 8002850:	d010      	beq.n	8002874 <UART_SetConfig+0xf0>
 8002852:	e01f      	b.n	8002894 <UART_SetConfig+0x110>
 8002854:	231b      	movs	r3, #27
 8002856:	2220      	movs	r2, #32
 8002858:	4694      	mov	ip, r2
 800285a:	44bc      	add	ip, r7
 800285c:	4463      	add	r3, ip
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e0c5      	b.n	80029f0 <UART_SetConfig+0x26c>
 8002864:	231b      	movs	r3, #27
 8002866:	2220      	movs	r2, #32
 8002868:	4694      	mov	ip, r2
 800286a:	44bc      	add	ip, r7
 800286c:	4463      	add	r3, ip
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e0bd      	b.n	80029f0 <UART_SetConfig+0x26c>
 8002874:	231b      	movs	r3, #27
 8002876:	2220      	movs	r2, #32
 8002878:	4694      	mov	ip, r2
 800287a:	44bc      	add	ip, r7
 800287c:	4463      	add	r3, ip
 800287e:	2204      	movs	r2, #4
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e0b5      	b.n	80029f0 <UART_SetConfig+0x26c>
 8002884:	231b      	movs	r3, #27
 8002886:	2220      	movs	r2, #32
 8002888:	4694      	mov	ip, r2
 800288a:	44bc      	add	ip, r7
 800288c:	4463      	add	r3, ip
 800288e:	2208      	movs	r2, #8
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e0ad      	b.n	80029f0 <UART_SetConfig+0x26c>
 8002894:	231b      	movs	r3, #27
 8002896:	2220      	movs	r2, #32
 8002898:	4694      	mov	ip, r2
 800289a:	44bc      	add	ip, r7
 800289c:	4463      	add	r3, ip
 800289e:	2210      	movs	r2, #16
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e0a5      	b.n	80029f0 <UART_SetConfig+0x26c>
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a83      	ldr	r2, [pc, #524]	; (8002ab8 <UART_SetConfig+0x334>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d136      	bne.n	800291c <UART_SetConfig+0x198>
 80028ae:	4b81      	ldr	r3, [pc, #516]	; (8002ab4 <UART_SetConfig+0x330>)
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	220c      	movs	r2, #12
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d020      	beq.n	80028fc <UART_SetConfig+0x178>
 80028ba:	d827      	bhi.n	800290c <UART_SetConfig+0x188>
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d00d      	beq.n	80028dc <UART_SetConfig+0x158>
 80028c0:	d824      	bhi.n	800290c <UART_SetConfig+0x188>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <UART_SetConfig+0x148>
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d010      	beq.n	80028ec <UART_SetConfig+0x168>
 80028ca:	e01f      	b.n	800290c <UART_SetConfig+0x188>
 80028cc:	231b      	movs	r3, #27
 80028ce:	2220      	movs	r2, #32
 80028d0:	4694      	mov	ip, r2
 80028d2:	44bc      	add	ip, r7
 80028d4:	4463      	add	r3, ip
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e089      	b.n	80029f0 <UART_SetConfig+0x26c>
 80028dc:	231b      	movs	r3, #27
 80028de:	2220      	movs	r2, #32
 80028e0:	4694      	mov	ip, r2
 80028e2:	44bc      	add	ip, r7
 80028e4:	4463      	add	r3, ip
 80028e6:	2202      	movs	r2, #2
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e081      	b.n	80029f0 <UART_SetConfig+0x26c>
 80028ec:	231b      	movs	r3, #27
 80028ee:	2220      	movs	r2, #32
 80028f0:	4694      	mov	ip, r2
 80028f2:	44bc      	add	ip, r7
 80028f4:	4463      	add	r3, ip
 80028f6:	2204      	movs	r2, #4
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e079      	b.n	80029f0 <UART_SetConfig+0x26c>
 80028fc:	231b      	movs	r3, #27
 80028fe:	2220      	movs	r2, #32
 8002900:	4694      	mov	ip, r2
 8002902:	44bc      	add	ip, r7
 8002904:	4463      	add	r3, ip
 8002906:	2208      	movs	r2, #8
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	e071      	b.n	80029f0 <UART_SetConfig+0x26c>
 800290c:	231b      	movs	r3, #27
 800290e:	2220      	movs	r2, #32
 8002910:	4694      	mov	ip, r2
 8002912:	44bc      	add	ip, r7
 8002914:	4463      	add	r3, ip
 8002916:	2210      	movs	r2, #16
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e069      	b.n	80029f0 <UART_SetConfig+0x26c>
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a66      	ldr	r2, [pc, #408]	; (8002abc <UART_SetConfig+0x338>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d107      	bne.n	8002936 <UART_SetConfig+0x1b2>
 8002926:	231b      	movs	r3, #27
 8002928:	2220      	movs	r2, #32
 800292a:	4694      	mov	ip, r2
 800292c:	44bc      	add	ip, r7
 800292e:	4463      	add	r3, ip
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e05c      	b.n	80029f0 <UART_SetConfig+0x26c>
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a61      	ldr	r2, [pc, #388]	; (8002ac0 <UART_SetConfig+0x33c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d107      	bne.n	8002950 <UART_SetConfig+0x1cc>
 8002940:	231b      	movs	r3, #27
 8002942:	2220      	movs	r2, #32
 8002944:	4694      	mov	ip, r2
 8002946:	44bc      	add	ip, r7
 8002948:	4463      	add	r3, ip
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	e04f      	b.n	80029f0 <UART_SetConfig+0x26c>
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a54      	ldr	r2, [pc, #336]	; (8002aa8 <UART_SetConfig+0x324>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d143      	bne.n	80029e2 <UART_SetConfig+0x25e>
 800295a:	4b56      	ldr	r3, [pc, #344]	; (8002ab4 <UART_SetConfig+0x330>)
 800295c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800295e:	23c0      	movs	r3, #192	; 0xc0
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	4013      	ands	r3, r2
 8002964:	22c0      	movs	r2, #192	; 0xc0
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	4293      	cmp	r3, r2
 800296a:	d02a      	beq.n	80029c2 <UART_SetConfig+0x23e>
 800296c:	22c0      	movs	r2, #192	; 0xc0
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	4293      	cmp	r3, r2
 8002972:	d82e      	bhi.n	80029d2 <UART_SetConfig+0x24e>
 8002974:	2280      	movs	r2, #128	; 0x80
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	4293      	cmp	r3, r2
 800297a:	d012      	beq.n	80029a2 <UART_SetConfig+0x21e>
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	4293      	cmp	r3, r2
 8002982:	d826      	bhi.n	80029d2 <UART_SetConfig+0x24e>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <UART_SetConfig+0x20e>
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	00d2      	lsls	r2, r2, #3
 800298c:	4293      	cmp	r3, r2
 800298e:	d010      	beq.n	80029b2 <UART_SetConfig+0x22e>
 8002990:	e01f      	b.n	80029d2 <UART_SetConfig+0x24e>
 8002992:	231b      	movs	r3, #27
 8002994:	2220      	movs	r2, #32
 8002996:	4694      	mov	ip, r2
 8002998:	44bc      	add	ip, r7
 800299a:	4463      	add	r3, ip
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e026      	b.n	80029f0 <UART_SetConfig+0x26c>
 80029a2:	231b      	movs	r3, #27
 80029a4:	2220      	movs	r2, #32
 80029a6:	4694      	mov	ip, r2
 80029a8:	44bc      	add	ip, r7
 80029aa:	4463      	add	r3, ip
 80029ac:	2202      	movs	r2, #2
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e01e      	b.n	80029f0 <UART_SetConfig+0x26c>
 80029b2:	231b      	movs	r3, #27
 80029b4:	2220      	movs	r2, #32
 80029b6:	4694      	mov	ip, r2
 80029b8:	44bc      	add	ip, r7
 80029ba:	4463      	add	r3, ip
 80029bc:	2204      	movs	r2, #4
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e016      	b.n	80029f0 <UART_SetConfig+0x26c>
 80029c2:	231b      	movs	r3, #27
 80029c4:	2220      	movs	r2, #32
 80029c6:	4694      	mov	ip, r2
 80029c8:	44bc      	add	ip, r7
 80029ca:	4463      	add	r3, ip
 80029cc:	2208      	movs	r2, #8
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	e00e      	b.n	80029f0 <UART_SetConfig+0x26c>
 80029d2:	231b      	movs	r3, #27
 80029d4:	2220      	movs	r2, #32
 80029d6:	4694      	mov	ip, r2
 80029d8:	44bc      	add	ip, r7
 80029da:	4463      	add	r3, ip
 80029dc:	2210      	movs	r2, #16
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e006      	b.n	80029f0 <UART_SetConfig+0x26c>
 80029e2:	231b      	movs	r3, #27
 80029e4:	2220      	movs	r2, #32
 80029e6:	4694      	mov	ip, r2
 80029e8:	44bc      	add	ip, r7
 80029ea:	4463      	add	r3, ip
 80029ec:	2210      	movs	r2, #16
 80029ee:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <UART_SetConfig+0x324>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d000      	beq.n	80029fc <UART_SetConfig+0x278>
 80029fa:	e0ad      	b.n	8002b58 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029fc:	231b      	movs	r3, #27
 80029fe:	2220      	movs	r2, #32
 8002a00:	4694      	mov	ip, r2
 8002a02:	44bc      	add	ip, r7
 8002a04:	4463      	add	r3, ip
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d015      	beq.n	8002a38 <UART_SetConfig+0x2b4>
 8002a0c:	dc18      	bgt.n	8002a40 <UART_SetConfig+0x2bc>
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d00d      	beq.n	8002a2e <UART_SetConfig+0x2aa>
 8002a12:	dc15      	bgt.n	8002a40 <UART_SetConfig+0x2bc>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <UART_SetConfig+0x29a>
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d005      	beq.n	8002a28 <UART_SetConfig+0x2a4>
 8002a1c:	e010      	b.n	8002a40 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a1e:	f7ff f911 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8002a22:	0003      	movs	r3, r0
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a26:	e015      	b.n	8002a54 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a28:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <UART_SetConfig+0x340>)
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a2c:	e012      	b.n	8002a54 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a2e:	f7ff f87d 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8002a32:	0003      	movs	r3, r0
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a36:	e00d      	b.n	8002a54 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a3e:	e009      	b.n	8002a54 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002a44:	231a      	movs	r3, #26
 8002a46:	2220      	movs	r2, #32
 8002a48:	4694      	mov	ip, r2
 8002a4a:	44bc      	add	ip, r7
 8002a4c:	4463      	add	r3, ip
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
        break;
 8002a52:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d100      	bne.n	8002a5c <UART_SetConfig+0x2d8>
 8002a5a:	e153      	b.n	8002d04 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <UART_SetConfig+0x344>)
 8002a62:	0052      	lsls	r2, r2, #1
 8002a64:	5ad3      	ldrh	r3, [r2, r3]
 8002a66:	0019      	movs	r1, r3
 8002a68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a6a:	f7fd fb4d 	bl	8000108 <__udivsi3>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	0013      	movs	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	189b      	adds	r3, r3, r2
 8002a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d305      	bcc.n	8002a8e <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d91e      	bls.n	8002acc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002a8e:	231a      	movs	r3, #26
 8002a90:	2220      	movs	r2, #32
 8002a92:	4694      	mov	ip, r2
 8002a94:	44bc      	add	ip, r7
 8002a96:	4463      	add	r3, ip
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e132      	b.n	8002d04 <UART_SetConfig+0x580>
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	cfff69f3 	.word	0xcfff69f3
 8002aa4:	ffffcfff 	.word	0xffffcfff
 8002aa8:	40008000 	.word	0x40008000
 8002aac:	11fff4ff 	.word	0x11fff4ff
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40004400 	.word	0x40004400
 8002abc:	40004800 	.word	0x40004800
 8002ac0:	40004c00 	.word	0x40004c00
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	080057d8 	.word	0x080057d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad8:	4b96      	ldr	r3, [pc, #600]	; (8002d34 <UART_SetConfig+0x5b0>)
 8002ada:	0052      	lsls	r2, r2, #1
 8002adc:	5ad3      	ldrh	r3, [r2, r3]
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	69b8      	ldr	r0, [r7, #24]
 8002aea:	69f9      	ldr	r1, [r7, #28]
 8002aec:	f7fd fc82 	bl	80003f4 <__aeabi_uldivmod>
 8002af0:	0002      	movs	r2, r0
 8002af2:	000b      	movs	r3, r1
 8002af4:	0e11      	lsrs	r1, r2, #24
 8002af6:	021d      	lsls	r5, r3, #8
 8002af8:	430d      	orrs	r5, r1
 8002afa:	0214      	lsls	r4, r2, #8
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68b8      	ldr	r0, [r7, #8]
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	1900      	adds	r0, r0, r4
 8002b0e:	4169      	adcs	r1, r5
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f7fd fc69 	bl	80003f4 <__aeabi_uldivmod>
 8002b22:	0002      	movs	r2, r0
 8002b24:	000b      	movs	r3, r1
 8002b26:	0013      	movs	r3, r2
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b2c:	23c0      	movs	r3, #192	; 0xc0
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d309      	bcc.n	8002b48 <UART_SetConfig+0x3c4>
 8002b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	035b      	lsls	r3, r3, #13
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d204      	bcs.n	8002b48 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	e0dd      	b.n	8002d04 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8002b48:	231a      	movs	r3, #26
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	4694      	mov	ip, r2
 8002b4e:	44bc      	add	ip, r7
 8002b50:	4463      	add	r3, ip
 8002b52:	2201      	movs	r2, #1
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	e0d5      	b.n	8002d04 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d000      	beq.n	8002b66 <UART_SetConfig+0x3e2>
 8002b64:	e073      	b.n	8002c4e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8002b66:	231b      	movs	r3, #27
 8002b68:	2220      	movs	r2, #32
 8002b6a:	4694      	mov	ip, r2
 8002b6c:	44bc      	add	ip, r7
 8002b6e:	4463      	add	r3, ip
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d015      	beq.n	8002ba2 <UART_SetConfig+0x41e>
 8002b76:	dc18      	bgt.n	8002baa <UART_SetConfig+0x426>
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d00d      	beq.n	8002b98 <UART_SetConfig+0x414>
 8002b7c:	dc15      	bgt.n	8002baa <UART_SetConfig+0x426>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <UART_SetConfig+0x404>
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d005      	beq.n	8002b92 <UART_SetConfig+0x40e>
 8002b86:	e010      	b.n	8002baa <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b88:	f7ff f85c 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b90:	e015      	b.n	8002bbe <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b92:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <UART_SetConfig+0x5b4>)
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b96:	e012      	b.n	8002bbe <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b98:	f7fe ffc8 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ba0:	e00d      	b.n	8002bbe <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ba8:	e009      	b.n	8002bbe <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002bae:	231a      	movs	r3, #26
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	4694      	mov	ip, r2
 8002bb4:	44bc      	add	ip, r7
 8002bb6:	4463      	add	r3, ip
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
        break;
 8002bbc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d100      	bne.n	8002bc6 <UART_SetConfig+0x442>
 8002bc4:	e09e      	b.n	8002d04 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bca:	4b5a      	ldr	r3, [pc, #360]	; (8002d34 <UART_SetConfig+0x5b0>)
 8002bcc:	0052      	lsls	r2, r2, #1
 8002bce:	5ad3      	ldrh	r3, [r2, r3]
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bd4:	f7fd fa98 	bl	8000108 <__udivsi3>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	005a      	lsls	r2, r3, #1
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	18d2      	adds	r2, r2, r3
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0019      	movs	r1, r3
 8002bea:	0010      	movs	r0, r2
 8002bec:	f7fd fa8c 	bl	8000108 <__udivsi3>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	d921      	bls.n	8002c3e <UART_SetConfig+0x4ba>
 8002bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	025b      	lsls	r3, r3, #9
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d21c      	bcs.n	8002c3e <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	200e      	movs	r0, #14
 8002c0a:	2420      	movs	r4, #32
 8002c0c:	193b      	adds	r3, r7, r4
 8002c0e:	181b      	adds	r3, r3, r0
 8002c10:	210f      	movs	r1, #15
 8002c12:	438a      	bics	r2, r1
 8002c14:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2207      	movs	r2, #7
 8002c1e:	4013      	ands	r3, r2
 8002c20:	b299      	uxth	r1, r3
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	181b      	adds	r3, r3, r0
 8002c26:	193a      	adds	r2, r7, r4
 8002c28:	1812      	adds	r2, r2, r0
 8002c2a:	8812      	ldrh	r2, [r2, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	193a      	adds	r2, r7, r4
 8002c36:	1812      	adds	r2, r2, r0
 8002c38:	8812      	ldrh	r2, [r2, #0]
 8002c3a:	60da      	str	r2, [r3, #12]
 8002c3c:	e062      	b.n	8002d04 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8002c3e:	231a      	movs	r3, #26
 8002c40:	2220      	movs	r2, #32
 8002c42:	4694      	mov	ip, r2
 8002c44:	44bc      	add	ip, r7
 8002c46:	4463      	add	r3, ip
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	e05a      	b.n	8002d04 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c4e:	231b      	movs	r3, #27
 8002c50:	2220      	movs	r2, #32
 8002c52:	4694      	mov	ip, r2
 8002c54:	44bc      	add	ip, r7
 8002c56:	4463      	add	r3, ip
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d015      	beq.n	8002c8a <UART_SetConfig+0x506>
 8002c5e:	dc18      	bgt.n	8002c92 <UART_SetConfig+0x50e>
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d00d      	beq.n	8002c80 <UART_SetConfig+0x4fc>
 8002c64:	dc15      	bgt.n	8002c92 <UART_SetConfig+0x50e>
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <UART_SetConfig+0x4ec>
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d005      	beq.n	8002c7a <UART_SetConfig+0x4f6>
 8002c6e:	e010      	b.n	8002c92 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c70:	f7fe ffe8 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8002c74:	0003      	movs	r3, r0
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c78:	e015      	b.n	8002ca6 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <UART_SetConfig+0x5b4>)
 8002c7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c7e:	e012      	b.n	8002ca6 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c80:	f7fe ff54 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8002c84:	0003      	movs	r3, r0
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c88:	e00d      	b.n	8002ca6 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c90:	e009      	b.n	8002ca6 <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002c96:	231a      	movs	r3, #26
 8002c98:	2220      	movs	r2, #32
 8002c9a:	4694      	mov	ip, r2
 8002c9c:	44bc      	add	ip, r7
 8002c9e:	4463      	add	r3, ip
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
        break;
 8002ca4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d02b      	beq.n	8002d04 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb0:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <UART_SetConfig+0x5b0>)
 8002cb2:	0052      	lsls	r2, r2, #1
 8002cb4:	5ad3      	ldrh	r3, [r2, r3]
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cba:	f7fd fa25 	bl	8000108 <__udivsi3>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	18d2      	adds	r2, r2, r3
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0019      	movs	r1, r3
 8002cd0:	0010      	movs	r0, r2
 8002cd2:	f7fd fa19 	bl	8000108 <__udivsi3>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d90a      	bls.n	8002cf6 <UART_SetConfig+0x572>
 8002ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	025b      	lsls	r3, r3, #9
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d205      	bcs.n	8002cf6 <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60da      	str	r2, [r3, #12]
 8002cf4:	e006      	b.n	8002d04 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8002cf6:	231a      	movs	r3, #26
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	4694      	mov	ip, r2
 8002cfc:	44bc      	add	ip, r7
 8002cfe:	4463      	add	r3, ip
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	226a      	movs	r2, #106	; 0x6a
 8002d08:	2101      	movs	r1, #1
 8002d0a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	2268      	movs	r2, #104	; 0x68
 8002d10:	2101      	movs	r1, #1
 8002d12:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	2200      	movs	r2, #0
 8002d18:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002d20:	231a      	movs	r3, #26
 8002d22:	2220      	movs	r2, #32
 8002d24:	4694      	mov	ip, r2
 8002d26:	44bc      	add	ip, r7
 8002d28:	4463      	add	r3, ip
 8002d2a:	781b      	ldrb	r3, [r3, #0]
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b010      	add	sp, #64	; 0x40
 8002d32:	bdb0      	pop	{r4, r5, r7, pc}
 8002d34:	080057d8 	.word	0x080057d8
 8002d38:	00f42400 	.word	0x00f42400

08002d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d00b      	beq.n	8002d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a4a      	ldr	r2, [pc, #296]	; (8002e80 <UART_AdvFeatureConfig+0x144>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d00b      	beq.n	8002d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4a43      	ldr	r2, [pc, #268]	; (8002e84 <UART_AdvFeatureConfig+0x148>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d00b      	beq.n	8002daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a3b      	ldr	r2, [pc, #236]	; (8002e88 <UART_AdvFeatureConfig+0x14c>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	2208      	movs	r2, #8
 8002db0:	4013      	ands	r3, r2
 8002db2:	d00b      	beq.n	8002dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4a34      	ldr	r2, [pc, #208]	; (8002e8c <UART_AdvFeatureConfig+0x150>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d00b      	beq.n	8002dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <UART_AdvFeatureConfig+0x154>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	2220      	movs	r2, #32
 8002df4:	4013      	ands	r3, r2
 8002df6:	d00b      	beq.n	8002e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4a25      	ldr	r2, [pc, #148]	; (8002e94 <UART_AdvFeatureConfig+0x158>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	2240      	movs	r2, #64	; 0x40
 8002e16:	4013      	ands	r3, r2
 8002e18:	d01d      	beq.n	8002e56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <UART_AdvFeatureConfig+0x15c>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	035b      	lsls	r3, r3, #13
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d10b      	bne.n	8002e56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <UART_AdvFeatureConfig+0x160>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	2280      	movs	r2, #128	; 0x80
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d00b      	beq.n	8002e78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <UART_AdvFeatureConfig+0x164>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	605a      	str	r2, [r3, #4]
  }
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b002      	add	sp, #8
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	fffdffff 	.word	0xfffdffff
 8002e84:	fffeffff 	.word	0xfffeffff
 8002e88:	fffbffff 	.word	0xfffbffff
 8002e8c:	ffff7fff 	.word	0xffff7fff
 8002e90:	ffffefff 	.word	0xffffefff
 8002e94:	ffffdfff 	.word	0xffffdfff
 8002e98:	ffefffff 	.word	0xffefffff
 8002e9c:	ff9fffff 	.word	0xff9fffff
 8002ea0:	fff7ffff 	.word	0xfff7ffff

08002ea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	228c      	movs	r2, #140	; 0x8c
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002eb4:	f7fd ff24 	bl	8000d00 <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d10c      	bne.n	8002ee4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	0391      	lsls	r1, r2, #14
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <UART_CheckIdleState+0x90>)
 8002ed4:	9200      	str	r2, [sp, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f000 f82e 	bl	8002f38 <UART_WaitOnFlagUntilTimeout>
 8002edc:	1e03      	subs	r3, r0, #0
 8002ede:	d001      	beq.n	8002ee4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e023      	b.n	8002f2c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2204      	movs	r2, #4
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d10c      	bne.n	8002f0c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2280      	movs	r2, #128	; 0x80
 8002ef6:	03d1      	lsls	r1, r2, #15
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <UART_CheckIdleState+0x90>)
 8002efc:	9200      	str	r2, [sp, #0]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f000 f81a 	bl	8002f38 <UART_WaitOnFlagUntilTimeout>
 8002f04:	1e03      	subs	r3, r0, #0
 8002f06:	d001      	beq.n	8002f0c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e00f      	b.n	8002f2c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2284      	movs	r2, #132	; 0x84
 8002f10:	2120      	movs	r1, #32
 8002f12:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2288      	movs	r2, #136	; 0x88
 8002f18:	2120      	movs	r1, #32
 8002f1a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	2100      	movs	r1, #0
 8002f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b004      	add	sp, #16
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	01ffffff 	.word	0x01ffffff

08002f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b094      	sub	sp, #80	; 0x50
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	1dfb      	adds	r3, r7, #7
 8002f46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f48:	e0a7      	b.n	800309a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	d100      	bne.n	8002f52 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002f50:	e0a3      	b.n	800309a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	f7fd fed5 	bl	8000d00 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d13f      	bne.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f68:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002f70:	647b      	str	r3, [r7, #68]	; 0x44
 8002f72:	2301      	movs	r3, #1
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	f383 8810 	msr	PRIMASK, r3
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	494e      	ldr	r1, [pc, #312]	; (80030c4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	f383 8810 	msr	PRIMASK, r3
}
 8002f98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	f383 8810 	msr	PRIMASK, r3
}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc6:	f383 8810 	msr	PRIMASK, r3
}
 8002fca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2284      	movs	r2, #132	; 0x84
 8002fd0:	2120      	movs	r1, #32
 8002fd2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2288      	movs	r2, #136	; 0x88
 8002fd8:	2120      	movs	r1, #32
 8002fda:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e069      	b.n	80030bc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2204      	movs	r2, #4
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d052      	beq.n	800309a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	401a      	ands	r2, r3
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	429a      	cmp	r2, r3
 8003006:	d148      	bne.n	800309a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003012:	f3ef 8310 	mrs	r3, PRIMASK
 8003016:	613b      	str	r3, [r7, #16]
  return(result);
 8003018:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800301c:	2301      	movs	r3, #1
 800301e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f383 8810 	msr	PRIMASK, r3
}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4924      	ldr	r1, [pc, #144]	; (80030c4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003034:	400a      	ands	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f383 8810 	msr	PRIMASK, r3
}
 8003042:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003044:	f3ef 8310 	mrs	r3, PRIMASK
 8003048:	61fb      	str	r3, [r7, #28]
  return(result);
 800304a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304c:	64bb      	str	r3, [r7, #72]	; 0x48
 800304e:	2301      	movs	r3, #1
 8003050:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f383 8810 	msr	PRIMASK, r3
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	438a      	bics	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f383 8810 	msr	PRIMASK, r3
}
 8003074:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2284      	movs	r2, #132	; 0x84
 800307a:	2120      	movs	r1, #32
 800307c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2288      	movs	r2, #136	; 0x88
 8003082:	2120      	movs	r1, #32
 8003084:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	228c      	movs	r2, #140	; 0x8c
 800308a:	2120      	movs	r1, #32
 800308c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	2100      	movs	r1, #0
 8003094:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e010      	b.n	80030bc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	425a      	negs	r2, r3
 80030aa:	4153      	adcs	r3, r2
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	001a      	movs	r2, r3
 80030b0:	1dfb      	adds	r3, r7, #7
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d100      	bne.n	80030ba <UART_WaitOnFlagUntilTimeout+0x182>
 80030b8:	e747      	b.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b014      	add	sp, #80	; 0x50
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	fffffe5f 	.word	0xfffffe5f

080030c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2280      	movs	r2, #128	; 0x80
 80030d4:	5c9b      	ldrb	r3, [r3, r2]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_UARTEx_DisableFifoMode+0x16>
 80030da:	2302      	movs	r3, #2
 80030dc:	e027      	b.n	800312e <HAL_UARTEx_DisableFifoMode+0x66>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	2101      	movs	r1, #1
 80030e4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2284      	movs	r2, #132	; 0x84
 80030ea:	2124      	movs	r1, #36	; 0x24
 80030ec:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	438a      	bics	r2, r1
 8003104:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <HAL_UARTEx_DisableFifoMode+0x70>)
 800310a:	4013      	ands	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2284      	movs	r2, #132	; 0x84
 8003120:	2120      	movs	r1, #32
 8003122:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2280      	movs	r2, #128	; 0x80
 8003128:	2100      	movs	r1, #0
 800312a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	dfffffff 	.word	0xdfffffff

0800313c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2280      	movs	r2, #128	; 0x80
 800314a:	5c9b      	ldrb	r3, [r3, r2]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003150:	2302      	movs	r3, #2
 8003152:	e02e      	b.n	80031b2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	2101      	movs	r1, #1
 800315a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2284      	movs	r2, #132	; 0x84
 8003160:	2124      	movs	r1, #36	; 0x24
 8003162:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	438a      	bics	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	08d9      	lsrs	r1, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	0018      	movs	r0, r3
 8003194:	f000 f854 	bl	8003240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2284      	movs	r2, #132	; 0x84
 80031a4:	2120      	movs	r1, #32
 80031a6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	2100      	movs	r1, #0
 80031ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b004      	add	sp, #16
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	5c9b      	ldrb	r3, [r3, r2]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e02f      	b.n	8003234 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2280      	movs	r2, #128	; 0x80
 80031d8:	2101      	movs	r1, #1
 80031da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2284      	movs	r2, #132	; 0x84
 80031e0:	2124      	movs	r1, #36	; 0x24
 80031e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2101      	movs	r1, #1
 80031f8:	438a      	bics	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4a0e      	ldr	r2, [pc, #56]	; (800323c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003204:	4013      	ands	r3, r2
 8003206:	0019      	movs	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	0018      	movs	r0, r3
 8003216:	f000 f813 	bl	8003240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2284      	movs	r2, #132	; 0x84
 8003226:	2120      	movs	r1, #32
 8003228:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b004      	add	sp, #16
 800323a:	bd80      	pop	{r7, pc}
 800323c:	f1ffffff 	.word	0xf1ffffff

08003240 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800324c:	2b00      	cmp	r3, #0
 800324e:	d108      	bne.n	8003262 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	226a      	movs	r2, #106	; 0x6a
 8003254:	2101      	movs	r1, #1
 8003256:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2268      	movs	r2, #104	; 0x68
 800325c:	2101      	movs	r1, #1
 800325e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003260:	e043      	b.n	80032ea <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003262:	260f      	movs	r6, #15
 8003264:	19bb      	adds	r3, r7, r6
 8003266:	2208      	movs	r2, #8
 8003268:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800326a:	200e      	movs	r0, #14
 800326c:	183b      	adds	r3, r7, r0
 800326e:	2208      	movs	r2, #8
 8003270:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	0e5b      	lsrs	r3, r3, #25
 800327a:	b2da      	uxtb	r2, r3
 800327c:	240d      	movs	r4, #13
 800327e:	193b      	adds	r3, r7, r4
 8003280:	2107      	movs	r1, #7
 8003282:	400a      	ands	r2, r1
 8003284:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	0f5b      	lsrs	r3, r3, #29
 800328e:	b2da      	uxtb	r2, r3
 8003290:	250c      	movs	r5, #12
 8003292:	197b      	adds	r3, r7, r5
 8003294:	2107      	movs	r1, #7
 8003296:	400a      	ands	r2, r1
 8003298:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800329a:	183b      	adds	r3, r7, r0
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	197a      	adds	r2, r7, r5
 80032a0:	7812      	ldrb	r2, [r2, #0]
 80032a2:	4914      	ldr	r1, [pc, #80]	; (80032f4 <UARTEx_SetNbDataToProcess+0xb4>)
 80032a4:	5c8a      	ldrb	r2, [r1, r2]
 80032a6:	435a      	muls	r2, r3
 80032a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80032aa:	197b      	adds	r3, r7, r5
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <UARTEx_SetNbDataToProcess+0xb8>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80032b2:	0019      	movs	r1, r3
 80032b4:	f7fc ffb2 	bl	800021c <__divsi3>
 80032b8:	0003      	movs	r3, r0
 80032ba:	b299      	uxth	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	226a      	movs	r2, #106	; 0x6a
 80032c0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80032c2:	19bb      	adds	r3, r7, r6
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	193a      	adds	r2, r7, r4
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	490a      	ldr	r1, [pc, #40]	; (80032f4 <UARTEx_SetNbDataToProcess+0xb4>)
 80032cc:	5c8a      	ldrb	r2, [r1, r2]
 80032ce:	435a      	muls	r2, r3
 80032d0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80032d2:	193b      	adds	r3, r7, r4
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <UARTEx_SetNbDataToProcess+0xb8>)
 80032d8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80032da:	0019      	movs	r1, r3
 80032dc:	f7fc ff9e 	bl	800021c <__divsi3>
 80032e0:	0003      	movs	r3, r0
 80032e2:	b299      	uxth	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2268      	movs	r2, #104	; 0x68
 80032e8:	5299      	strh	r1, [r3, r2]
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b005      	add	sp, #20
 80032f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	080057f0 	.word	0x080057f0
 80032f8:	080057f8 	.word	0x080057f8

080032fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3308      	adds	r3, #8
 8003308:	001a      	movs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	4252      	negs	r2, r2
 8003314:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3308      	adds	r3, #8
 800331a:	001a      	movs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3308      	adds	r3, #8
 8003324:	001a      	movs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b002      	add	sp, #8
 8003336:	bd80      	pop	{r7, pc}

08003338 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}

0800334e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b004      	add	sp, #16
 8003390:	bd80      	pop	{r7, pc}

08003392 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3301      	adds	r3, #1
 80033a6:	d103      	bne.n	80033b0 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	e00c      	b.n	80033ca <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3308      	adds	r3, #8
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e002      	b.n	80033be <vListInsert+0x2c>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d2f6      	bcs.n	80033b8 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b004      	add	sp, #16
 80033fc:	bd80      	pop	{r7, pc}

080033fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6892      	ldr	r2, [r2, #8]
 8003414:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6852      	ldr	r2, [r2, #4]
 800341e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	d103      	bne.n	8003432 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1e5a      	subs	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b004      	add	sp, #16
 800344c:	bd80      	pop	{r7, pc}

0800344e <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800344e:	b5b0      	push	{r4, r5, r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003458:	2301      	movs	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <xQueueGenericReset+0x1c>
 8003466:	b672      	cpsid	i
 8003468:	e7fe      	b.n	8003468 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d100      	bne.n	8003472 <xQueueGenericReset+0x24>
 8003470:	e06a      	b.n	8003548 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003476:	2b00      	cmp	r3, #0
 8003478:	d066      	beq.n	8003548 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	2400      	movs	r4, #0
 8003484:	0c15      	lsrs	r5, r2, #16
 8003486:	0c19      	lsrs	r1, r3, #16
 8003488:	b2a8      	uxth	r0, r5
 800348a:	2800      	cmp	r0, #0
 800348c:	d104      	bne.n	8003498 <xQueueGenericReset+0x4a>
 800348e:	b288      	uxth	r0, r1
 8003490:	2800      	cmp	r0, #0
 8003492:	d013      	beq.n	80034bc <xQueueGenericReset+0x6e>
 8003494:	1c10      	adds	r0, r2, #0
 8003496:	e004      	b.n	80034a2 <xQueueGenericReset+0x54>
 8003498:	b289      	uxth	r1, r1
 800349a:	2900      	cmp	r1, #0
 800349c:	d10d      	bne.n	80034ba <xQueueGenericReset+0x6c>
 800349e:	1c29      	adds	r1, r5, #0
 80034a0:	1c18      	adds	r0, r3, #0
 80034a2:	b292      	uxth	r2, r2
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	435a      	muls	r2, r3
 80034a8:	b283      	uxth	r3, r0
 80034aa:	b289      	uxth	r1, r1
 80034ac:	434b      	muls	r3, r1
 80034ae:	0c12      	lsrs	r2, r2, #16
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	141b      	asrs	r3, r3, #16
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d000      	beq.n	80034bc <xQueueGenericReset+0x6e>
 80034ba:	2401      	movs	r4, #1
 80034bc:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80034be:	d143      	bne.n	8003548 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 80034c0:	f001 fe9e 	bl	8005200 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	434b      	muls	r3, r1
 80034d2:	18d2      	adds	r2, r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2200      	movs	r2, #0
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	1e59      	subs	r1, r3, #1
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	434b      	muls	r3, r1
 80034f6:	18d2      	adds	r2, r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2244      	movs	r2, #68	; 0x44
 8003500:	21ff      	movs	r1, #255	; 0xff
 8003502:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2245      	movs	r2, #69	; 0x45
 8003508:	21ff      	movs	r1, #255	; 0xff
 800350a:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10d      	bne.n	800352e <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d013      	beq.n	8003542 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3310      	adds	r3, #16
 800351e:	0018      	movs	r0, r3
 8003520:	f000 ff2a 	bl	8004378 <xTaskRemoveFromEventList>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d00c      	beq.n	8003542 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003528:	f001 fe5a 	bl	80051e0 <vPortYield>
 800352c:	e009      	b.n	8003542 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	3310      	adds	r3, #16
 8003532:	0018      	movs	r0, r3
 8003534:	f7ff fee2 	bl	80032fc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	3324      	adds	r3, #36	; 0x24
 800353c:	0018      	movs	r0, r3
 800353e:	f7ff fedd 	bl	80032fc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003542:	f001 fe6f 	bl	8005224 <vPortExitCritical>
 8003546:	e001      	b.n	800354c <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <xQueueGenericReset+0x108>
 8003552:	b672      	cpsid	i
 8003554:	e7fe      	b.n	8003554 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003556:	68fb      	ldr	r3, [r7, #12]
}
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b004      	add	sp, #16
 800355e:	bdb0      	pop	{r4, r5, r7, pc}

08003560 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003562:	b08b      	sub	sp, #44	; 0x2c
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	1dfb      	adds	r3, r7, #7
 800356c:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d047      	beq.n	8003608 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003578:	2000      	movs	r0, #0
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	0c19      	lsrs	r1, r3, #16
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1c1e      	adds	r6, r3, #0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	1c15      	adds	r5, r2, #0
 800358a:	b28a      	uxth	r2, r1
 800358c:	2a00      	cmp	r2, #0
 800358e:	d105      	bne.n	800359c <xQueueGenericCreate+0x3c>
 8003590:	b29a      	uxth	r2, r3
 8003592:	2a00      	cmp	r2, #0
 8003594:	d013      	beq.n	80035be <xQueueGenericCreate+0x5e>
 8003596:	1c19      	adds	r1, r3, #0
 8003598:	1c34      	adds	r4, r6, #0
 800359a:	e003      	b.n	80035a4 <xQueueGenericCreate+0x44>
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10c      	bne.n	80035bc <xQueueGenericCreate+0x5c>
 80035a2:	1c2c      	adds	r4, r5, #0
 80035a4:	b2b3      	uxth	r3, r6
 80035a6:	b2aa      	uxth	r2, r5
 80035a8:	435a      	muls	r2, r3
 80035aa:	b2a3      	uxth	r3, r4
 80035ac:	b289      	uxth	r1, r1
 80035ae:	434b      	muls	r3, r1
 80035b0:	0c12      	lsrs	r2, r2, #16
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	141b      	asrs	r3, r3, #16
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d000      	beq.n	80035be <xQueueGenericCreate+0x5e>
 80035bc:	2001      	movs	r0, #1
 80035be:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80035c0:	d122      	bne.n	8003608 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80035c8:	3351      	adds	r3, #81	; 0x51
 80035ca:	d81d      	bhi.n	8003608 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	4353      	muls	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	3350      	adds	r3, #80	; 0x50
 80035d8:	0018      	movs	r0, r3
 80035da:	f001 fea9 	bl	8005330 <pvPortMalloc>
 80035de:	0003      	movs	r3, r0
 80035e0:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d014      	beq.n	8003612 <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3350      	adds	r3, #80	; 0x50
 80035f0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035f2:	1dfb      	adds	r3, r7, #7
 80035f4:	781c      	ldrb	r4, [r3, #0]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	0023      	movs	r3, r4
 8003602:	f000 f80b 	bl	800361c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003606:	e004      	b.n	8003612 <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <xQueueGenericCreate+0xb2>
 800360e:	b672      	cpsid	i
 8003610:	e7fe      	b.n	8003610 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003612:	69fb      	ldr	r3, [r7, #28]
    }
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b009      	add	sp, #36	; 0x24
 800361a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800361c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	001a      	movs	r2, r3
 800362a:	1cfb      	adds	r3, r7, #3
 800362c:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e002      	b.n	8003642 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2101      	movs	r1, #1
 8003652:	0018      	movs	r0, r3
 8003654:	f7ff fefb 	bl	800344e <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1cfa      	adds	r2, r7, #3
 800365c:	214c      	movs	r1, #76	; 0x4c
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	b004      	add	sp, #16
 8003668:	bd80      	pop	{r7, pc}

0800366a <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b08a      	sub	sp, #40	; 0x28
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003676:	2300      	movs	r3, #0
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <xQueueReceive+0x1e>
 8003684:	b672      	cpsid	i
 8003686:	e7fe      	b.n	8003686 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <xQueueReceive+0x2c>
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <xQueueReceive+0x30>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <xQueueReceive+0x32>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <xQueueReceive+0x3a>
 80036a0:	b672      	cpsid	i
 80036a2:	e7fe      	b.n	80036a2 <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036a4:	f001 f852 	bl	800474c <xTaskGetSchedulerState>
 80036a8:	1e03      	subs	r3, r0, #0
 80036aa:	d102      	bne.n	80036b2 <xQueueReceive+0x48>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <xQueueReceive+0x4c>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <xQueueReceive+0x4e>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <xQueueReceive+0x56>
 80036bc:	b672      	cpsid	i
 80036be:	e7fe      	b.n	80036be <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80036c0:	f001 fd9e 	bl	8005200 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01a      	beq.n	8003706 <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	0011      	movs	r1, r2
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 f87c 	bl	80037d4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	1e5a      	subs	r2, r3, #1
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	3310      	adds	r3, #16
 80036f0:	0018      	movs	r0, r3
 80036f2:	f000 fe41 	bl	8004378 <xTaskRemoveFromEventList>
 80036f6:	1e03      	subs	r3, r0, #0
 80036f8:	d001      	beq.n	80036fe <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80036fa:	f001 fd71 	bl	80051e0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80036fe:	f001 fd91 	bl	8005224 <vPortExitCritical>
                return pdPASS;
 8003702:	2301      	movs	r3, #1
 8003704:	e062      	b.n	80037cc <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800370c:	f001 fd8a 	bl	8005224 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003710:	2300      	movs	r3, #0
 8003712:	e05b      	b.n	80037cc <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800371a:	2314      	movs	r3, #20
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	0018      	movs	r0, r3
 8003720:	f000 fef4 	bl	800450c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003728:	f001 fd7c 	bl	8005224 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800372c:	f000 fb68 	bl	8003e00 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003730:	f001 fd66 	bl	8005200 <vPortEnterCritical>
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	2244      	movs	r2, #68	; 0x44
 8003738:	5c9b      	ldrb	r3, [r3, r2]
 800373a:	b25b      	sxtb	r3, r3
 800373c:	3301      	adds	r3, #1
 800373e:	d103      	bne.n	8003748 <xQueueReceive+0xde>
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	2244      	movs	r2, #68	; 0x44
 8003744:	2100      	movs	r1, #0
 8003746:	5499      	strb	r1, [r3, r2]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	2245      	movs	r2, #69	; 0x45
 800374c:	5c9b      	ldrb	r3, [r3, r2]
 800374e:	b25b      	sxtb	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	d103      	bne.n	800375c <xQueueReceive+0xf2>
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2245      	movs	r2, #69	; 0x45
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]
 800375c:	f001 fd62 	bl	8005224 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003760:	1d3a      	adds	r2, r7, #4
 8003762:	2314      	movs	r3, #20
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	0011      	movs	r1, r2
 8003768:	0018      	movs	r0, r3
 800376a:	f000 fee3 	bl	8004534 <xTaskCheckForTimeOut>
 800376e:	1e03      	subs	r3, r0, #0
 8003770:	d11e      	bne.n	80037b0 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	0018      	movs	r0, r3
 8003776:	f000 f8b1 	bl	80038dc <prvIsQueueEmpty>
 800377a:	1e03      	subs	r3, r0, #0
 800377c:	d011      	beq.n	80037a2 <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	3324      	adds	r3, #36	; 0x24
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	0011      	movs	r1, r2
 8003786:	0018      	movs	r0, r3
 8003788:	f000 fd9a 	bl	80042c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	0018      	movs	r0, r3
 8003790:	f000 f846 	bl	8003820 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003794:	f000 fb40 	bl	8003e18 <xTaskResumeAll>
 8003798:	1e03      	subs	r3, r0, #0
 800379a:	d191      	bne.n	80036c0 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 800379c:	f001 fd20 	bl	80051e0 <vPortYield>
 80037a0:	e78e      	b.n	80036c0 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f000 f83b 	bl	8003820 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80037aa:	f000 fb35 	bl	8003e18 <xTaskResumeAll>
 80037ae:	e787      	b.n	80036c0 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 f834 	bl	8003820 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80037b8:	f000 fb2e 	bl	8003e18 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 f88c 	bl	80038dc <prvIsQueueEmpty>
 80037c4:	1e03      	subs	r3, r0, #0
 80037c6:	d100      	bne.n	80037ca <xQueueReceive+0x160>
 80037c8:	e77a      	b.n	80036c0 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80037ca:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b00a      	add	sp, #40	; 0x28
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	18d2      	adds	r2, r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d303      	bcc.n	8003808 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68d9      	ldr	r1, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	0018      	movs	r0, r3
 8003814:	f001 ff56 	bl	80056c4 <memcpy>
    }
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b002      	add	sp, #8
 800381e:	bd80      	pop	{r7, pc}

08003820 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003828:	f001 fcea 	bl	8005200 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800382c:	230f      	movs	r3, #15
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	2145      	movs	r1, #69	; 0x45
 8003834:	5c52      	ldrb	r2, [r2, r1]
 8003836:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003838:	e013      	b.n	8003862 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	2b00      	cmp	r3, #0
 8003840:	d016      	beq.n	8003870 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3324      	adds	r3, #36	; 0x24
 8003846:	0018      	movs	r0, r3
 8003848:	f000 fd96 	bl	8004378 <xTaskRemoveFromEventList>
 800384c:	1e03      	subs	r3, r0, #0
 800384e:	d001      	beq.n	8003854 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003850:	f000 fec4 	bl	80045dc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003854:	210f      	movs	r1, #15
 8003856:	187b      	adds	r3, r7, r1
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	3b01      	subs	r3, #1
 800385c:	b2da      	uxtb	r2, r3
 800385e:	187b      	adds	r3, r7, r1
 8003860:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003862:	230f      	movs	r3, #15
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b25b      	sxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	dce5      	bgt.n	800383a <prvUnlockQueue+0x1a>
 800386e:	e000      	b.n	8003872 <prvUnlockQueue+0x52>
                    break;
 8003870:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2245      	movs	r2, #69	; 0x45
 8003876:	21ff      	movs	r1, #255	; 0xff
 8003878:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 800387a:	f001 fcd3 	bl	8005224 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800387e:	f001 fcbf 	bl	8005200 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003882:	230e      	movs	r3, #14
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	2144      	movs	r1, #68	; 0x44
 800388a:	5c52      	ldrb	r2, [r2, r1]
 800388c:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800388e:	e013      	b.n	80038b8 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d016      	beq.n	80038c6 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3310      	adds	r3, #16
 800389c:	0018      	movs	r0, r3
 800389e:	f000 fd6b 	bl	8004378 <xTaskRemoveFromEventList>
 80038a2:	1e03      	subs	r3, r0, #0
 80038a4:	d001      	beq.n	80038aa <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 80038a6:	f000 fe99 	bl	80045dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80038aa:	210e      	movs	r1, #14
 80038ac:	187b      	adds	r3, r7, r1
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	187b      	adds	r3, r7, r1
 80038b6:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80038b8:	230e      	movs	r3, #14
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	b25b      	sxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	dce5      	bgt.n	8003890 <prvUnlockQueue+0x70>
 80038c4:	e000      	b.n	80038c8 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 80038c6:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2244      	movs	r2, #68	; 0x44
 80038cc:	21ff      	movs	r1, #255	; 0xff
 80038ce:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80038d0:	f001 fca8 	bl	8005224 <vPortExitCritical>
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b004      	add	sp, #16
 80038da:	bd80      	pop	{r7, pc}

080038dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80038e4:	f001 fc8c 	bl	8005200 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e001      	b.n	80038fa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80038fa:	f001 fc93 	bl	8005224 <vPortExitCritical>

    return xReturn;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b004      	add	sp, #16
 8003906:	bd80      	pop	{r7, pc}

08003908 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <vQueueAddToRegistry+0x18>
 800391c:	b672      	cpsid	i
 800391e:	e7fe      	b.n	800391e <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d025      	beq.n	8003972 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e01f      	b.n	800396c <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800392c:	4a17      	ldr	r2, [pc, #92]	; (800398c <vQueueAddToRegistry+0x84>)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	18d3      	adds	r3, r2, r3
 8003934:	3304      	adds	r3, #4
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	429a      	cmp	r2, r3
 800393c:	d105      	bne.n	800394a <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	00da      	lsls	r2, r3, #3
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <vQueueAddToRegistry+0x84>)
 8003944:	18d3      	adds	r3, r2, r3
 8003946:	60bb      	str	r3, [r7, #8]
                    break;
 8003948:	e013      	b.n	8003972 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <vQueueAddToRegistry+0x5e>
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <vQueueAddToRegistry+0x84>)
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	00d2      	lsls	r2, r2, #3
 8003956:	58d3      	ldr	r3, [r2, r3]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	00da      	lsls	r2, r3, #3
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <vQueueAddToRegistry+0x84>)
 8003962:	18d3      	adds	r3, r2, r3
 8003964:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3301      	adds	r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b07      	cmp	r3, #7
 8003970:	d9dc      	bls.n	800392c <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b004      	add	sp, #16
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20001e78 	.word	0x20001e78

08003990 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80039a0:	f001 fc2e 	bl	8005200 <vPortEnterCritical>
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2244      	movs	r2, #68	; 0x44
 80039a8:	5c9b      	ldrb	r3, [r3, r2]
 80039aa:	b25b      	sxtb	r3, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	d103      	bne.n	80039b8 <vQueueWaitForMessageRestricted+0x28>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2244      	movs	r2, #68	; 0x44
 80039b4:	2100      	movs	r1, #0
 80039b6:	5499      	strb	r1, [r3, r2]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2245      	movs	r2, #69	; 0x45
 80039bc:	5c9b      	ldrb	r3, [r3, r2]
 80039be:	b25b      	sxtb	r3, r3
 80039c0:	3301      	adds	r3, #1
 80039c2:	d103      	bne.n	80039cc <vQueueWaitForMessageRestricted+0x3c>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2245      	movs	r2, #69	; 0x45
 80039c8:	2100      	movs	r1, #0
 80039ca:	5499      	strb	r1, [r3, r2]
 80039cc:	f001 fc2a 	bl	8005224 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 fc8b 	bl	80042fc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7ff ff19 	bl	8003820 <prvUnlockQueue>
    }
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b006      	add	sp, #24
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80039f6:	b590      	push	{r4, r7, lr}
 80039f8:	b08d      	sub	sp, #52	; 0x34
 80039fa:	af04      	add	r7, sp, #16
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	1dbb      	adds	r3, r7, #6
 8003a04:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f001 fc8f 	bl	8005330 <pvPortMalloc>
 8003a12:	0003      	movs	r3, r0
 8003a14:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d016      	beq.n	8003a4a <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a1c:	2064      	movs	r0, #100	; 0x64
 8003a1e:	f001 fc87 	bl	8005330 <pvPortMalloc>
 8003a22:	0003      	movs	r3, r0
 8003a24:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d009      	beq.n	8003a40 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2264      	movs	r2, #100	; 0x64
 8003a30:	2100      	movs	r1, #0
 8003a32:	0018      	movs	r0, r3
 8003a34:	f001 fe4f 	bl	80056d6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3e:	e006      	b.n	8003a4e <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f001 fd1c 	bl	8005480 <vPortFree>
 8003a48:	e001      	b.n	8003a4e <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d016      	beq.n	8003a82 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a54:	1dbb      	adds	r3, r7, #6
 8003a56:	881a      	ldrh	r2, [r3, #0]
 8003a58:	683c      	ldr	r4, [r7, #0]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	9303      	str	r3, [sp, #12]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	9302      	str	r3, [sp, #8]
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	0023      	movs	r3, r4
 8003a70:	f000 f810 	bl	8003a94 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 f88c 	bl	8003b94 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	e002      	b.n	8003a88 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a82:	2301      	movs	r3, #1
 8003a84:	425b      	negs	r3, r3
 8003a86:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003a88:	69bb      	ldr	r3, [r7, #24]
    }
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b009      	add	sp, #36	; 0x24
 8003a90:	bd90      	pop	{r4, r7, pc}
	...

08003a94 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	001a      	movs	r2, r3
 8003aac:	21a5      	movs	r1, #165	; 0xa5
 8003aae:	f001 fe12 	bl	80056d6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4935      	ldr	r1, [pc, #212]	; (8003b90 <prvInitialiseNewTask+0xfc>)
 8003aba:	468c      	mov	ip, r1
 8003abc:	4463      	add	r3, ip
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	18d3      	adds	r3, r2, r3
 8003ac2:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2207      	movs	r2, #7
 8003ac8:	4393      	bics	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2207      	movs	r2, #7
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d001      	beq.n	8003ad8 <prvInitialiseNewTask+0x44>
 8003ad4:	b672      	cpsid	i
 8003ad6:	e7fe      	b.n	8003ad6 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01f      	beq.n	8003b1e <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e013      	b.n	8003b0c <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	7818      	ldrb	r0, [r3, #0]
 8003aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aee:	2134      	movs	r1, #52	; 0x34
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	18d3      	adds	r3, r2, r3
 8003af4:	185b      	adds	r3, r3, r1
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	18d3      	adds	r3, r2, r3
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b0f      	cmp	r3, #15
 8003b10:	d9e8      	bls.n	8003ae4 <prvInitialiseNewTask+0x50>
 8003b12:	e000      	b.n	8003b16 <prvInitialiseNewTask+0x82>
            {
                break;
 8003b14:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	2243      	movs	r2, #67	; 0x43
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	2b37      	cmp	r3, #55	; 0x37
 8003b22:	d901      	bls.n	8003b28 <prvInitialiseNewTask+0x94>
 8003b24:	b672      	cpsid	i
 8003b26:	e7fe      	b.n	8003b26 <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	2b37      	cmp	r3, #55	; 0x37
 8003b2c:	d901      	bls.n	8003b32 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b2e:	2337      	movs	r3, #55	; 0x37
 8003b30:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	6a3a      	ldr	r2, [r7, #32]
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	6a3a      	ldr	r2, [r7, #32]
 8003b3c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	3304      	adds	r3, #4
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7ff fbf8 	bl	8003338 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	3318      	adds	r3, #24
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7ff fbf3 	bl	8003338 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b56:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2238      	movs	r2, #56	; 0x38
 8003b5c:	1ad2      	subs	r2, r2, r3
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f001 faae 	bl	80050d0 <pxPortInitialiseStack>
 8003b74:	0002      	movs	r2, r0
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b84:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b006      	add	sp, #24
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	3fffffff 	.word	0x3fffffff

08003b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003b9c:	f001 fb30 	bl	8005200 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003ba0:	4b3d      	ldr	r3, [pc, #244]	; (8003c98 <prvAddNewTaskToReadyList+0x104>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <prvAddNewTaskToReadyList+0x104>)
 8003ba8:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8003baa:	4b3c      	ldr	r3, [pc, #240]	; (8003c9c <prvAddNewTaskToReadyList+0x108>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003bb2:	4b3a      	ldr	r3, [pc, #232]	; (8003c9c <prvAddNewTaskToReadyList+0x108>)
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bb8:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <prvAddNewTaskToReadyList+0x104>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d110      	bne.n	8003be2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003bc0:	f000 fd26 	bl	8004610 <prvInitialiseTaskLists>
 8003bc4:	e00d      	b.n	8003be2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <prvAddNewTaskToReadyList+0x10c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bce:	4b33      	ldr	r3, [pc, #204]	; (8003c9c <prvAddNewTaskToReadyList+0x108>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d802      	bhi.n	8003be2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003bdc:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <prvAddNewTaskToReadyList+0x108>)
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003be2:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <prvAddNewTaskToReadyList+0x110>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <prvAddNewTaskToReadyList+0x110>)
 8003bea:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bec:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <prvAddNewTaskToReadyList+0x110>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf8:	4b2b      	ldr	r3, [pc, #172]	; (8003ca8 <prvAddNewTaskToReadyList+0x114>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d903      	bls.n	8003c08 <prvAddNewTaskToReadyList+0x74>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c04:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <prvAddNewTaskToReadyList+0x114>)
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	4927      	ldr	r1, [pc, #156]	; (8003cac <prvAddNewTaskToReadyList+0x118>)
 8003c0e:	0013      	movs	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	18cb      	adds	r3, r1, r3
 8003c18:	3304      	adds	r3, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	60da      	str	r2, [r3, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	3204      	adds	r2, #4
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	1d1a      	adds	r2, r3, #4
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	609a      	str	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c42:	0013      	movs	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4a18      	ldr	r2, [pc, #96]	; (8003cac <prvAddNewTaskToReadyList+0x118>)
 8003c4c:	189a      	adds	r2, r3, r2
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	615a      	str	r2, [r3, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c56:	4915      	ldr	r1, [pc, #84]	; (8003cac <prvAddNewTaskToReadyList+0x118>)
 8003c58:	0013      	movs	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	189b      	adds	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	585b      	ldr	r3, [r3, r1]
 8003c62:	1c58      	adds	r0, r3, #1
 8003c64:	4911      	ldr	r1, [pc, #68]	; (8003cac <prvAddNewTaskToReadyList+0x118>)
 8003c66:	0013      	movs	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	189b      	adds	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003c70:	f001 fad8 	bl	8005224 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <prvAddNewTaskToReadyList+0x10c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <prvAddNewTaskToReadyList+0x108>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d201      	bcs.n	8003c8e <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003c8a:	f001 faa9 	bl	80051e0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b004      	add	sp, #16
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	20000508 	.word	0x20000508
 8003c9c:	20000034 	.word	0x20000034
 8003ca0:	20000514 	.word	0x20000514
 8003ca4:	20000524 	.word	0x20000524
 8003ca8:	20000510 	.word	0x20000510
 8003cac:	20000038 	.word	0x20000038

08003cb0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003cb8:	f001 faa2 	bl	8005200 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <vTaskDelete+0x18>
 8003cc2:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <vTaskDelete+0xb4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	e000      	b.n	8003cca <vTaskDelete+0x1a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff fb94 	bl	80033fe <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3318      	adds	r3, #24
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7ff fb8b 	bl	80033fe <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <vTaskDelete+0xb8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <vTaskDelete+0xb8>)
 8003cf0:	601a      	str	r2, [r3, #0]

            if( pxTCB == pxCurrentTCB )
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <vTaskDelete+0xb4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d10c      	bne.n	8003d16 <vTaskDelete+0x66>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <vTaskDelete+0xbc>)
 8003d02:	0011      	movs	r1, r2
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7ff fb22 	bl	800334e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003d0a:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <vTaskDelete+0xc0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <vTaskDelete+0xc0>)
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e006      	b.n	8003d24 <vTaskDelete+0x74>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <vTaskDelete+0xc4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	1e5a      	subs	r2, r3, #1
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <vTaskDelete+0xc4>)
 8003d1e:	601a      	str	r2, [r3, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003d20:	f000 fcfa 	bl	8004718 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003d24:	f001 fa7e 	bl	8005224 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8003d28:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <vTaskDelete+0xb4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d003      	beq.n	8003d3a <vTaskDelete+0x8a>
        {
            prvDeleteTCB( pxTCB );
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f000 fcdd 	bl	80046f4 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <vTaskDelete+0xc8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <vTaskDelete+0xac>
        {
            if( pxTCB == pxCurrentTCB )
 8003d42:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <vTaskDelete+0xb4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d107      	bne.n	8003d5c <vTaskDelete+0xac>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <vTaskDelete+0xcc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <vTaskDelete+0xa8>
 8003d54:	b672      	cpsid	i
 8003d56:	e7fe      	b.n	8003d56 <vTaskDelete+0xa6>
                portYIELD_WITHIN_API();
 8003d58:	f001 fa42 	bl	80051e0 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b004      	add	sp, #16
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000034 	.word	0x20000034
 8003d68:	20000524 	.word	0x20000524
 8003d6c:	200004dc 	.word	0x200004dc
 8003d70:	200004f0 	.word	0x200004f0
 8003d74:	20000508 	.word	0x20000508
 8003d78:	20000514 	.word	0x20000514
 8003d7c:	20000530 	.word	0x20000530

08003d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003d86:	4917      	ldr	r1, [pc, #92]	; (8003de4 <vTaskStartScheduler+0x64>)
 8003d88:	4817      	ldr	r0, [pc, #92]	; (8003de8 <vTaskStartScheduler+0x68>)
 8003d8a:	4b18      	ldr	r3, [pc, #96]	; (8003dec <vTaskStartScheduler+0x6c>)
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	2280      	movs	r2, #128	; 0x80
 8003d96:	f7ff fe2e 	bl	80039f6 <xTaskCreate>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d103      	bne.n	8003dac <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8003da4:	f000 ff12 	bl	8004bcc <xTimerCreateTimerTask>
 8003da8:	0003      	movs	r3, r0
 8003daa:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10d      	bne.n	8003dce <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8003db2:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003db4:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <vTaskStartScheduler+0x70>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	4252      	negs	r2, r2
 8003dba:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <vTaskStartScheduler+0x74>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <vTaskStartScheduler+0x78>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003dc8:	f001 f9e6 	bl	8005198 <xPortStartScheduler>
 8003dcc:	e004      	b.n	8003dd8 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <vTaskStartScheduler+0x58>
 8003dd4:	b672      	cpsid	i
 8003dd6:	e7fe      	b.n	8003dd6 <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003dd8:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <vTaskStartScheduler+0x7c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	08005760 	.word	0x08005760
 8003de8:	080045f1 	.word	0x080045f1
 8003dec:	2000052c 	.word	0x2000052c
 8003df0:	20000528 	.word	0x20000528
 8003df4:	20000514 	.word	0x20000514
 8003df8:	2000050c 	.word	0x2000050c
 8003dfc:	2000000c 	.word	0x2000000c

08003e00 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <vTaskSuspendAll+0x14>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	4b02      	ldr	r3, [pc, #8]	; (8003e14 <vTaskSuspendAll+0x14>)
 8003e0c:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000530 	.word	0x20000530

08003e18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003e26:	4b68      	ldr	r3, [pc, #416]	; (8003fc8 <xTaskResumeAll+0x1b0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <xTaskResumeAll+0x1a>
 8003e2e:	b672      	cpsid	i
 8003e30:	e7fe      	b.n	8003e30 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003e32:	f001 f9e5 	bl	8005200 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003e36:	4b64      	ldr	r3, [pc, #400]	; (8003fc8 <xTaskResumeAll+0x1b0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	1e5a      	subs	r2, r3, #1
 8003e3c:	4b62      	ldr	r3, [pc, #392]	; (8003fc8 <xTaskResumeAll+0x1b0>)
 8003e3e:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e40:	4b61      	ldr	r3, [pc, #388]	; (8003fc8 <xTaskResumeAll+0x1b0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d000      	beq.n	8003e4a <xTaskResumeAll+0x32>
 8003e48:	e0b7      	b.n	8003fba <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e4a:	4b60      	ldr	r3, [pc, #384]	; (8003fcc <xTaskResumeAll+0x1b4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d100      	bne.n	8003e54 <xTaskResumeAll+0x3c>
 8003e52:	e0b2      	b.n	8003fba <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e54:	e089      	b.n	8003f6a <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e56:	4b5e      	ldr	r3, [pc, #376]	; (8003fd0 <xTaskResumeAll+0x1b8>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	6a12      	ldr	r2, [r2, #32]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	69d2      	ldr	r2, [r2, #28]
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3318      	adds	r3, #24
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d103      	bne.n	8003e8c <xTaskResumeAll+0x74>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	6a1a      	ldr	r2, [r3, #32]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	1e5a      	subs	r2, r3, #1
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	68d2      	ldr	r2, [r2, #12]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	6892      	ldr	r2, [r2, #8]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d103      	bne.n	8003eca <xTaskResumeAll+0xb2>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	615a      	str	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	1e5a      	subs	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ede:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <xTaskResumeAll+0x1bc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d903      	bls.n	8003eee <xTaskResumeAll+0xd6>
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eea:	4b3a      	ldr	r3, [pc, #232]	; (8003fd4 <xTaskResumeAll+0x1bc>)
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef2:	4939      	ldr	r1, [pc, #228]	; (8003fd8 <xTaskResumeAll+0x1c0>)
 8003ef4:	0013      	movs	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	18cb      	adds	r3, r1, r3
 8003efe:	3304      	adds	r3, #4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	609a      	str	r2, [r3, #8]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	3204      	adds	r2, #4
 8003f1a:	605a      	str	r2, [r3, #4]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1d1a      	adds	r2, r3, #4
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	0013      	movs	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	189b      	adds	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4a29      	ldr	r2, [pc, #164]	; (8003fd8 <xTaskResumeAll+0x1c0>)
 8003f32:	189a      	adds	r2, r3, r2
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	615a      	str	r2, [r3, #20]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	4926      	ldr	r1, [pc, #152]	; (8003fd8 <xTaskResumeAll+0x1c0>)
 8003f3e:	0013      	movs	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	585b      	ldr	r3, [r3, r1]
 8003f48:	1c58      	adds	r0, r3, #1
 8003f4a:	4923      	ldr	r1, [pc, #140]	; (8003fd8 <xTaskResumeAll+0x1c0>)
 8003f4c:	0013      	movs	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	189b      	adds	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <xTaskResumeAll+0x1c4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8003f64:	4b1e      	ldr	r3, [pc, #120]	; (8003fe0 <xTaskResumeAll+0x1c8>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f6a:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <xTaskResumeAll+0x1b8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d000      	beq.n	8003f74 <xTaskResumeAll+0x15c>
 8003f72:	e770      	b.n	8003e56 <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003f7a:	f000 fbcd 	bl	8004718 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f7e:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <xTaskResumeAll+0x1cc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00f      	beq.n	8003faa <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003f8a:	f000 f83b 	bl	8004004 <xTaskIncrementTick>
 8003f8e:	1e03      	subs	r3, r0, #0
 8003f90:	d002      	beq.n	8003f98 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8003f92:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <xTaskResumeAll+0x1c8>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f2      	bne.n	8003f8a <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <xTaskResumeAll+0x1cc>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <xTaskResumeAll+0x1c8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003fb6:	f001 f913 	bl	80051e0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003fba:	f001 f933 	bl	8005224 <vPortExitCritical>

    return xAlreadyYielded;
 8003fbe:	693b      	ldr	r3, [r7, #16]
}
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b006      	add	sp, #24
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000530 	.word	0x20000530
 8003fcc:	20000508 	.word	0x20000508
 8003fd0:	200004c8 	.word	0x200004c8
 8003fd4:	20000510 	.word	0x20000510
 8003fd8:	20000038 	.word	0x20000038
 8003fdc:	20000034 	.word	0x20000034
 8003fe0:	2000051c 	.word	0x2000051c
 8003fe4:	20000518 	.word	0x20000518

08003fe8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <xTaskGetTickCount+0x18>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003ff4:	687b      	ldr	r3, [r7, #4]
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b002      	add	sp, #8
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	2000050c 	.word	0x2000050c

08004004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800400e:	4b78      	ldr	r3, [pc, #480]	; (80041f0 <xTaskIncrementTick+0x1ec>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d000      	beq.n	8004018 <xTaskIncrementTick+0x14>
 8004016:	e0e0      	b.n	80041da <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004018:	4b76      	ldr	r3, [pc, #472]	; (80041f4 <xTaskIncrementTick+0x1f0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004020:	4b74      	ldr	r3, [pc, #464]	; (80041f4 <xTaskIncrementTick+0x1f0>)
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d117      	bne.n	800405c <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 800402c:	4b72      	ldr	r3, [pc, #456]	; (80041f8 <xTaskIncrementTick+0x1f4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <xTaskIncrementTick+0x36>
 8004036:	b672      	cpsid	i
 8004038:	e7fe      	b.n	8004038 <xTaskIncrementTick+0x34>
 800403a:	4b6f      	ldr	r3, [pc, #444]	; (80041f8 <xTaskIncrementTick+0x1f4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	4b6e      	ldr	r3, [pc, #440]	; (80041fc <xTaskIncrementTick+0x1f8>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b6c      	ldr	r3, [pc, #432]	; (80041f8 <xTaskIncrementTick+0x1f4>)
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	4b6c      	ldr	r3, [pc, #432]	; (80041fc <xTaskIncrementTick+0x1f8>)
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	4b6c      	ldr	r3, [pc, #432]	; (8004200 <xTaskIncrementTick+0x1fc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	4b6a      	ldr	r3, [pc, #424]	; (8004200 <xTaskIncrementTick+0x1fc>)
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f000 fb5e 	bl	8004718 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800405c:	4b69      	ldr	r3, [pc, #420]	; (8004204 <xTaskIncrementTick+0x200>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	429a      	cmp	r2, r3
 8004064:	d200      	bcs.n	8004068 <xTaskIncrementTick+0x64>
 8004066:	e0a4      	b.n	80041b2 <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004068:	4b63      	ldr	r3, [pc, #396]	; (80041f8 <xTaskIncrementTick+0x1f4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d104      	bne.n	800407c <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004072:	4b64      	ldr	r3, [pc, #400]	; (8004204 <xTaskIncrementTick+0x200>)
 8004074:	2201      	movs	r2, #1
 8004076:	4252      	negs	r2, r2
 8004078:	601a      	str	r2, [r3, #0]
                    break;
 800407a:	e09a      	b.n	80041b2 <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800407c:	4b5e      	ldr	r3, [pc, #376]	; (80041f8 <xTaskIncrementTick+0x1f4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	429a      	cmp	r2, r3
 8004092:	d203      	bcs.n	800409c <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004094:	4b5b      	ldr	r3, [pc, #364]	; (8004204 <xTaskIncrementTick+0x200>)
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800409a:	e08a      	b.n	80041b2 <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	68d2      	ldr	r2, [r2, #12]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	6892      	ldr	r2, [r2, #8]
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	3304      	adds	r3, #4
 80040be:	429a      	cmp	r2, r3
 80040c0:	d103      	bne.n	80040ca <xTaskIncrementTick+0xc6>
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2200      	movs	r2, #0
 80040ce:	615a      	str	r2, [r3, #20]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	1e5a      	subs	r2, r3, #1
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d01e      	beq.n	8004120 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	6a12      	ldr	r2, [r2, #32]
 80040f0:	609a      	str	r2, [r3, #8]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	69d2      	ldr	r2, [r2, #28]
 80040fa:	605a      	str	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	3318      	adds	r3, #24
 8004104:	429a      	cmp	r2, r3
 8004106:	d103      	bne.n	8004110 <xTaskIncrementTick+0x10c>
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	6a1a      	ldr	r2, [r3, #32]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2200      	movs	r2, #0
 8004114:	629a      	str	r2, [r3, #40]	; 0x28
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	1e5a      	subs	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	4b38      	ldr	r3, [pc, #224]	; (8004208 <xTaskIncrementTick+0x204>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d903      	bls.n	8004134 <xTaskIncrementTick+0x130>
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004130:	4b35      	ldr	r3, [pc, #212]	; (8004208 <xTaskIncrementTick+0x204>)
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004138:	4934      	ldr	r1, [pc, #208]	; (800420c <xTaskIncrementTick+0x208>)
 800413a:	0013      	movs	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	189b      	adds	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	18cb      	adds	r3, r1, r3
 8004144:	3304      	adds	r3, #4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	60da      	str	r2, [r3, #12]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	3204      	adds	r2, #4
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1d1a      	adds	r2, r3, #4
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	609a      	str	r2, [r3, #8]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416e:	0013      	movs	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	189b      	adds	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4a25      	ldr	r2, [pc, #148]	; (800420c <xTaskIncrementTick+0x208>)
 8004178:	189a      	adds	r2, r3, r2
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	615a      	str	r2, [r3, #20]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004182:	4922      	ldr	r1, [pc, #136]	; (800420c <xTaskIncrementTick+0x208>)
 8004184:	0013      	movs	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	189b      	adds	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	585b      	ldr	r3, [r3, r1]
 800418e:	1c58      	adds	r0, r3, #1
 8004190:	491e      	ldr	r1, [pc, #120]	; (800420c <xTaskIncrementTick+0x208>)
 8004192:	0013      	movs	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	189b      	adds	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <xTaskIncrementTick+0x20c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d800      	bhi.n	80041ac <xTaskIncrementTick+0x1a8>
 80041aa:	e75d      	b.n	8004068 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 80041ac:	2301      	movs	r3, #1
 80041ae:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041b0:	e75a      	b.n	8004068 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <xTaskIncrementTick+0x20c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b8:	4914      	ldr	r1, [pc, #80]	; (800420c <xTaskIncrementTick+0x208>)
 80041ba:	0013      	movs	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	585b      	ldr	r3, [r3, r1]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d901      	bls.n	80041cc <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 80041c8:	2301      	movs	r3, #1
 80041ca:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <xTaskIncrementTick+0x210>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80041d4:	2301      	movs	r3, #1
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	e004      	b.n	80041e4 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <xTaskIncrementTick+0x214>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <xTaskIncrementTick+0x214>)
 80041e2:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80041e4:	69fb      	ldr	r3, [r7, #28]
}
 80041e6:	0018      	movs	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b008      	add	sp, #32
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	20000530 	.word	0x20000530
 80041f4:	2000050c 	.word	0x2000050c
 80041f8:	200004c0 	.word	0x200004c0
 80041fc:	200004c4 	.word	0x200004c4
 8004200:	20000520 	.word	0x20000520
 8004204:	20000528 	.word	0x20000528
 8004208:	20000510 	.word	0x20000510
 800420c:	20000038 	.word	0x20000038
 8004210:	20000034 	.word	0x20000034
 8004214:	2000051c 	.word	0x2000051c
 8004218:	20000518 	.word	0x20000518

0800421c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <vTaskSwitchContext+0x90>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800422a:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <vTaskSwitchContext+0x94>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004230:	e037      	b.n	80042a2 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8004232:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <vTaskSwitchContext+0x94>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004238:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <vTaskSwitchContext+0x98>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	e007      	b.n	8004250 <vTaskSwitchContext+0x34>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <vTaskSwitchContext+0x2e>
 8004246:	b672      	cpsid	i
 8004248:	e7fe      	b.n	8004248 <vTaskSwitchContext+0x2c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3b01      	subs	r3, #1
 800424e:	607b      	str	r3, [r7, #4]
 8004250:	4919      	ldr	r1, [pc, #100]	; (80042b8 <vTaskSwitchContext+0x9c>)
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	0013      	movs	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	189b      	adds	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	585b      	ldr	r3, [r3, r1]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0ee      	beq.n	8004240 <vTaskSwitchContext+0x24>
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	0013      	movs	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	189b      	adds	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <vTaskSwitchContext+0x9c>)
 800426e:	189b      	adds	r3, r3, r2
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	3308      	adds	r3, #8
 8004284:	429a      	cmp	r2, r3
 8004286:	d104      	bne.n	8004292 <vTaskSwitchContext+0x76>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <vTaskSwitchContext+0xa0>)
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <vTaskSwitchContext+0x98>)
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b002      	add	sp, #8
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	20000530 	.word	0x20000530
 80042b0:	2000051c 	.word	0x2000051c
 80042b4:	20000510 	.word	0x20000510
 80042b8:	20000038 	.word	0x20000038
 80042bc:	20000034 	.word	0x20000034

080042c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <vTaskPlaceOnEventList+0x14>
 80042d0:	b672      	cpsid	i
 80042d2:	e7fe      	b.n	80042d2 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042d4:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <vTaskPlaceOnEventList+0x38>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3318      	adds	r3, #24
 80042da:	001a      	movs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0011      	movs	r1, r2
 80042e0:	0018      	movs	r0, r3
 80042e2:	f7ff f856 	bl	8003392 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2101      	movs	r1, #1
 80042ea:	0018      	movs	r0, r3
 80042ec:	f000 fc00 	bl	8004af0 <prvAddCurrentTaskToDelayedList>
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b002      	add	sp, #8
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000034 	.word	0x20000034

080042fc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <vTaskPlaceOnEventListRestricted+0x16>
 800430e:	b672      	cpsid	i
 8004310:	e7fe      	b.n	8004310 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	4b16      	ldr	r3, [pc, #88]	; (8004374 <vTaskPlaceOnEventListRestricted+0x78>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	61da      	str	r2, [r3, #28]
 8004320:	4b14      	ldr	r3, [pc, #80]	; (8004374 <vTaskPlaceOnEventListRestricted+0x78>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	6892      	ldr	r2, [r2, #8]
 8004328:	621a      	str	r2, [r3, #32]
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <vTaskPlaceOnEventListRestricted+0x78>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	3218      	adds	r2, #24
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <vTaskPlaceOnEventListRestricted+0x78>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3318      	adds	r3, #24
 800433c:	001a      	movs	r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <vTaskPlaceOnEventListRestricted+0x78>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	629a      	str	r2, [r3, #40]	; 0x28
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 800435a:	2301      	movs	r3, #1
 800435c:	425b      	negs	r3, r3
 800435e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0011      	movs	r1, r2
 8004366:	0018      	movs	r0, r3
 8004368:	f000 fbc2 	bl	8004af0 <prvAddCurrentTaskToDelayedList>
    }
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b006      	add	sp, #24
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000034 	.word	0x20000034

08004378 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <xTaskRemoveFromEventList+0x1a>
 800438e:	b672      	cpsid	i
 8004390:	e7fe      	b.n	8004390 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	6a12      	ldr	r2, [r2, #32]
 80043a0:	609a      	str	r2, [r3, #8]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	69d2      	ldr	r2, [r2, #28]
 80043aa:	605a      	str	r2, [r3, #4]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	3318      	adds	r3, #24
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d103      	bne.n	80043c0 <xTaskRemoveFromEventList+0x48>
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	6a1a      	ldr	r2, [r3, #32]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	605a      	str	r2, [r3, #4]
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2200      	movs	r2, #0
 80043c4:	629a      	str	r2, [r3, #40]	; 0x28
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1e5a      	subs	r2, r3, #1
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043d0:	4b48      	ldr	r3, [pc, #288]	; (80044f4 <xTaskRemoveFromEventList+0x17c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d15d      	bne.n	8004494 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	68d2      	ldr	r2, [r2, #12]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	6892      	ldr	r2, [r2, #8]
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	3304      	adds	r3, #4
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d103      	bne.n	8004406 <xTaskRemoveFromEventList+0x8e>
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2200      	movs	r2, #0
 800440a:	615a      	str	r2, [r3, #20]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	1e5a      	subs	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441a:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <xTaskRemoveFromEventList+0x180>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d903      	bls.n	800442a <xTaskRemoveFromEventList+0xb2>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <xTaskRemoveFromEventList+0x180>)
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442e:	4933      	ldr	r1, [pc, #204]	; (80044fc <xTaskRemoveFromEventList+0x184>)
 8004430:	0013      	movs	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	189b      	adds	r3, r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	18cb      	adds	r3, r1, r3
 800443a:	3304      	adds	r3, #4
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	609a      	str	r2, [r3, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	3204      	adds	r2, #4
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	1d1a      	adds	r2, r3, #4
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	0013      	movs	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	189b      	adds	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4a23      	ldr	r2, [pc, #140]	; (80044fc <xTaskRemoveFromEventList+0x184>)
 800446e:	189a      	adds	r2, r3, r2
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	615a      	str	r2, [r3, #20]
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004478:	4920      	ldr	r1, [pc, #128]	; (80044fc <xTaskRemoveFromEventList+0x184>)
 800447a:	0013      	movs	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	189b      	adds	r3, r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	585b      	ldr	r3, [r3, r1]
 8004484:	1c58      	adds	r0, r3, #1
 8004486:	491d      	ldr	r1, [pc, #116]	; (80044fc <xTaskRemoveFromEventList+0x184>)
 8004488:	0013      	movs	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	189b      	adds	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	5058      	str	r0, [r3, r1]
 8004492:	e01b      	b.n	80044cc <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <xTaskRemoveFromEventList+0x188>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	61da      	str	r2, [r3, #28]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	621a      	str	r2, [r3, #32]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	3218      	adds	r2, #24
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	3318      	adds	r3, #24
 80044b6:	001a      	movs	r2, r3
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	4a10      	ldr	r2, [pc, #64]	; (8004500 <xTaskRemoveFromEventList+0x188>)
 80044c0:	629a      	str	r2, [r3, #40]	; 0x28
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <xTaskRemoveFromEventList+0x188>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <xTaskRemoveFromEventList+0x188>)
 80044ca:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <xTaskRemoveFromEventList+0x18c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d905      	bls.n	80044e6 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80044da:	2301      	movs	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80044de:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <xTaskRemoveFromEventList+0x190>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e001      	b.n	80044ea <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80044ea:	69fb      	ldr	r3, [r7, #28]
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b008      	add	sp, #32
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000530 	.word	0x20000530
 80044f8:	20000510 	.word	0x20000510
 80044fc:	20000038 	.word	0x20000038
 8004500:	200004c8 	.word	0x200004c8
 8004504:	20000034 	.word	0x20000034
 8004508:	2000051c 	.word	0x2000051c

0800450c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <vTaskInternalSetTimeOutState+0x20>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800451c:	4b04      	ldr	r3, [pc, #16]	; (8004530 <vTaskInternalSetTimeOutState+0x24>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	605a      	str	r2, [r3, #4]
}
 8004524:	46c0      	nop			; (mov r8, r8)
 8004526:	46bd      	mov	sp, r7
 8004528:	b002      	add	sp, #8
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000520 	.word	0x20000520
 8004530:	2000050c 	.word	0x2000050c

08004534 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <xTaskCheckForTimeOut+0x14>
 8004544:	b672      	cpsid	i
 8004546:	e7fe      	b.n	8004546 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <xTaskCheckForTimeOut+0x1e>
 800454e:	b672      	cpsid	i
 8004550:	e7fe      	b.n	8004550 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 8004552:	f000 fe55 	bl	8005200 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004556:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <xTaskCheckForTimeOut+0xa0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3301      	adds	r3, #1
 800456c:	d102      	bne.n	8004574 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	e027      	b.n	80045c4 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <xTaskCheckForTimeOut+0xa4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d00a      	beq.n	8004596 <xTaskCheckForTimeOut+0x62>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	429a      	cmp	r2, r3
 8004588:	d305      	bcc.n	8004596 <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800458a:	2301      	movs	r3, #1
 800458c:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e016      	b.n	80045c4 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	429a      	cmp	r2, r3
 800459e:	d20c      	bcs.n	80045ba <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1ad2      	subs	r2, r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7ff ffac 	bl	800450c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	e004      	b.n	80045c4 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80045c4:	f000 fe2e 	bl	8005224 <vPortExitCritical>

    return xReturn;
 80045c8:	697b      	ldr	r3, [r7, #20]
}
 80045ca:	0018      	movs	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b006      	add	sp, #24
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	2000050c 	.word	0x2000050c
 80045d8:	20000520 	.word	0x20000520

080045dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80045e0:	4b02      	ldr	r3, [pc, #8]	; (80045ec <vTaskMissedYield+0x10>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	2000051c 	.word	0x2000051c

080045f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80045f8:	f000 f84e 	bl	8004698 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <prvIdleTask+0x1c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d9f9      	bls.n	80045f8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004604:	f000 fdec 	bl	80051e0 <vPortYield>
        prvCheckTasksWaitingTermination();
 8004608:	e7f6      	b.n	80045f8 <prvIdleTask+0x8>
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	20000038 	.word	0x20000038

08004610 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	e00c      	b.n	8004636 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	0013      	movs	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	189b      	adds	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4a14      	ldr	r2, [pc, #80]	; (8004678 <prvInitialiseTaskLists+0x68>)
 8004628:	189b      	adds	r3, r3, r2
 800462a:	0018      	movs	r0, r3
 800462c:	f7fe fe66 	bl	80032fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3301      	adds	r3, #1
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b37      	cmp	r3, #55	; 0x37
 800463a:	d9ef      	bls.n	800461c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800463c:	4b0f      	ldr	r3, [pc, #60]	; (800467c <prvInitialiseTaskLists+0x6c>)
 800463e:	0018      	movs	r0, r3
 8004640:	f7fe fe5c 	bl	80032fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004644:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <prvInitialiseTaskLists+0x70>)
 8004646:	0018      	movs	r0, r3
 8004648:	f7fe fe58 	bl	80032fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800464c:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <prvInitialiseTaskLists+0x74>)
 800464e:	0018      	movs	r0, r3
 8004650:	f7fe fe54 	bl	80032fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004654:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <prvInitialiseTaskLists+0x78>)
 8004656:	0018      	movs	r0, r3
 8004658:	f7fe fe50 	bl	80032fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <prvInitialiseTaskLists+0x7c>)
 800465e:	0018      	movs	r0, r3
 8004660:	f7fe fe4c 	bl	80032fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <prvInitialiseTaskLists+0x80>)
 8004666:	4a05      	ldr	r2, [pc, #20]	; (800467c <prvInitialiseTaskLists+0x6c>)
 8004668:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800466a:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <prvInitialiseTaskLists+0x84>)
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <prvInitialiseTaskLists+0x70>)
 800466e:	601a      	str	r2, [r3, #0]
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46bd      	mov	sp, r7
 8004674:	b002      	add	sp, #8
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000038 	.word	0x20000038
 800467c:	20000498 	.word	0x20000498
 8004680:	200004ac 	.word	0x200004ac
 8004684:	200004c8 	.word	0x200004c8
 8004688:	200004dc 	.word	0x200004dc
 800468c:	200004f4 	.word	0x200004f4
 8004690:	200004c0 	.word	0x200004c0
 8004694:	200004c4 	.word	0x200004c4

08004698 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800469e:	e01a      	b.n	80046d6 <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 80046a0:	f000 fdae 	bl	8005200 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a4:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <prvCheckTasksWaitingTermination+0x50>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fe fea4 	bl	80033fe <uxListRemove>
                --uxCurrentNumberOfTasks;
 80046b6:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <prvCheckTasksWaitingTermination+0x54>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	1e5a      	subs	r2, r3, #1
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <prvCheckTasksWaitingTermination+0x54>)
 80046be:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <prvCheckTasksWaitingTermination+0x58>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	1e5a      	subs	r2, r3, #1
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <prvCheckTasksWaitingTermination+0x58>)
 80046c8:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 80046ca:	f000 fdab 	bl	8005224 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f000 f80f 	bl	80046f4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <prvCheckTasksWaitingTermination+0x58>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e0      	bne.n	80046a0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	200004dc 	.word	0x200004dc
 80046ec:	20000508 	.word	0x20000508
 80046f0:	200004f0 	.word	0x200004f0

080046f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	0018      	movs	r0, r3
 8004702:	f000 febd 	bl	8005480 <vPortFree>
            vPortFree( pxTCB );
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	0018      	movs	r0, r3
 800470a:	f000 feb9 	bl	8005480 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	b002      	add	sp, #8
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <prvResetNextTaskUnblockTime+0x2c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d104      	bne.n	8004730 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <prvResetNextTaskUnblockTime+0x30>)
 8004728:	2201      	movs	r2, #1
 800472a:	4252      	negs	r2, r2
 800472c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800472e:	e005      	b.n	800473c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004730:	4b04      	ldr	r3, [pc, #16]	; (8004744 <prvResetNextTaskUnblockTime+0x2c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <prvResetNextTaskUnblockTime+0x30>)
 800473a:	601a      	str	r2, [r3, #0]
}
 800473c:	46c0      	nop			; (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	200004c0 	.word	0x200004c0
 8004748:	20000528 	.word	0x20000528

0800474c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <xTaskGetSchedulerState+0x30>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d102      	bne.n	8004760 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800475a:	2301      	movs	r3, #1
 800475c:	607b      	str	r3, [r7, #4]
 800475e:	e008      	b.n	8004772 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <xTaskGetSchedulerState+0x34>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004768:	2302      	movs	r3, #2
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	e001      	b.n	8004772 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800476e:	2300      	movs	r3, #0
 8004770:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004772:	687b      	ldr	r3, [r7, #4]
    }
 8004774:	0018      	movs	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	b002      	add	sp, #8
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20000514 	.word	0x20000514
 8004780:	20000530 	.word	0x20000530

08004784 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <xTaskGenericNotifyWait+0x18>
 8004798:	b672      	cpsid	i
 800479a:	e7fe      	b.n	800479a <xTaskGenericNotifyWait+0x16>

        taskENTER_CRITICAL();
 800479c:	f000 fd30 	bl	8005200 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80047a0:	4b36      	ldr	r3, [pc, #216]	; (800487c <xTaskGenericNotifyWait+0xf8>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	2160      	movs	r1, #96	; 0x60
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	18d3      	adds	r3, r2, r3
 80047aa:	185b      	adds	r3, r3, r1
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d022      	beq.n	80047fa <xTaskGenericNotifyWait+0x76>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80047b4:	4b31      	ldr	r3, [pc, #196]	; (800487c <xTaskGenericNotifyWait+0xf8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	3214      	adds	r2, #20
 80047bc:	0092      	lsls	r2, r2, #2
 80047be:	189a      	adds	r2, r3, r2
 80047c0:	3204      	adds	r2, #4
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	43c9      	mvns	r1, r1
 80047c8:	400a      	ands	r2, r1
 80047ca:	68f9      	ldr	r1, [r7, #12]
 80047cc:	3114      	adds	r1, #20
 80047ce:	0089      	lsls	r1, r1, #2
 80047d0:	185b      	adds	r3, r3, r1
 80047d2:	3304      	adds	r3, #4
 80047d4:	601a      	str	r2, [r3, #0]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80047d6:	4b29      	ldr	r3, [pc, #164]	; (800487c <xTaskGenericNotifyWait+0xf8>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	2160      	movs	r1, #96	; 0x60
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	18d3      	adds	r3, r2, r3
 80047e0:	185b      	adds	r3, r3, r1
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d006      	beq.n	80047fa <xTaskGenericNotifyWait+0x76>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	2101      	movs	r1, #1
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 f97d 	bl	8004af0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80047f6:	f000 fcf3 	bl	80051e0 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80047fa:	f000 fd13 	bl	8005224 <vPortExitCritical>

        taskENTER_CRITICAL();
 80047fe:	f000 fcff 	bl	8005200 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d009      	beq.n	800481c <xTaskGenericNotifyWait+0x98>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <xTaskGenericNotifyWait+0xf8>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3314      	adds	r3, #20
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	18d3      	adds	r3, r2, r3
 8004814:	3304      	adds	r3, #4
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800481c:	4b17      	ldr	r3, [pc, #92]	; (800487c <xTaskGenericNotifyWait+0xf8>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2160      	movs	r1, #96	; 0x60
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	18d3      	adds	r3, r2, r3
 8004826:	185b      	adds	r3, r3, r1
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d002      	beq.n	8004836 <xTaskGenericNotifyWait+0xb2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e012      	b.n	800485c <xTaskGenericNotifyWait+0xd8>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004836:	4b11      	ldr	r3, [pc, #68]	; (800487c <xTaskGenericNotifyWait+0xf8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	3214      	adds	r2, #20
 800483e:	0092      	lsls	r2, r2, #2
 8004840:	189a      	adds	r2, r3, r2
 8004842:	3204      	adds	r2, #4
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	43c9      	mvns	r1, r1
 800484a:	400a      	ands	r2, r1
 800484c:	68f9      	ldr	r1, [r7, #12]
 800484e:	3114      	adds	r1, #20
 8004850:	0089      	lsls	r1, r1, #2
 8004852:	185b      	adds	r3, r3, r1
 8004854:	3304      	adds	r3, #4
 8004856:	601a      	str	r2, [r3, #0]
                xReturn = pdTRUE;
 8004858:	2301      	movs	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800485c:	4b07      	ldr	r3, [pc, #28]	; (800487c <xTaskGenericNotifyWait+0xf8>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	2160      	movs	r1, #96	; 0x60
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	18d3      	adds	r3, r2, r3
 8004866:	185b      	adds	r3, r3, r1
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800486c:	f000 fcda 	bl	8005224 <vPortExitCritical>

        return xReturn;
 8004870:	697b      	ldr	r3, [r7, #20]
    }
 8004872:	0018      	movs	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	b006      	add	sp, #24
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	20000034 	.word	0x20000034

08004880 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004880:	b580      	push	{r7, lr}
 8004882:	b08c      	sub	sp, #48	; 0x30
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	001a      	movs	r2, r3
 800488e:	1cfb      	adds	r3, r7, #3
 8004890:	701a      	strb	r2, [r3, #0]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004892:	2301      	movs	r3, #1
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <xTaskGenericNotifyFromISR+0x20>
 800489c:	b672      	cpsid	i
 800489e:	e7fe      	b.n	800489e <xTaskGenericNotifyFromISR+0x1e>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <xTaskGenericNotifyFromISR+0x2a>
 80048a6:	b672      	cpsid	i
 80048a8:	e7fe      	b.n	80048a8 <xTaskGenericNotifyFromISR+0x28>
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	62bb      	str	r3, [r7, #40]	; 0x28

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048ae:	f000 fcd1 	bl	8005254 <ulSetInterruptMaskFromISR>
 80048b2:	0003      	movs	r3, r0
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
        {
            if( pulPreviousNotificationValue != NULL )
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <xTaskGenericNotifyFromISR+0x4e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80048bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	3314      	adds	r3, #20
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	18d3      	adds	r3, r2, r3
 80048c6:	3304      	adds	r3, #4
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048cc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80048ce:	2323      	movs	r3, #35	; 0x23
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048d4:	2060      	movs	r0, #96	; 0x60
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	188a      	adds	r2, r1, r2
 80048da:	1812      	adds	r2, r2, r0
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	701a      	strb	r2, [r3, #0]
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80048e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e2:	2160      	movs	r1, #96	; 0x60
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	18d3      	adds	r3, r2, r3
 80048e8:	185b      	adds	r3, r3, r1
 80048ea:	2202      	movs	r2, #2
 80048ec:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80048ee:	1cfb      	adds	r3, r7, #3
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d83f      	bhi.n	8004976 <xTaskGenericNotifyFromISR+0xf6>
 80048f6:	009a      	lsls	r2, r3, #2
 80048f8:	4b75      	ldr	r3, [pc, #468]	; (8004ad0 <xTaskGenericNotifyFromISR+0x250>)
 80048fa:	18d3      	adds	r3, r2, r3
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	469f      	mov	pc, r3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3314      	adds	r3, #20
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	18d3      	adds	r3, r2, r3
 800490a:	3304      	adds	r3, #4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	431a      	orrs	r2, r3
 8004912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	3314      	adds	r3, #20
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	18cb      	adds	r3, r1, r3
 800491c:	3304      	adds	r3, #4
 800491e:	601a      	str	r2, [r3, #0]
                    break;
 8004920:	e032      	b.n	8004988 <xTaskGenericNotifyFromISR+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	3314      	adds	r3, #20
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	18d3      	adds	r3, r2, r3
 800492c:	3304      	adds	r3, #4
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	3314      	adds	r3, #20
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	18cb      	adds	r3, r1, r3
 800493c:	3304      	adds	r3, #4
 800493e:	601a      	str	r2, [r3, #0]
                    break;
 8004940:	e022      	b.n	8004988 <xTaskGenericNotifyFromISR+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	3314      	adds	r3, #20
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	18d3      	adds	r3, r2, r3
 800494c:	3304      	adds	r3, #4
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
                    break;
 8004952:	e019      	b.n	8004988 <xTaskGenericNotifyFromISR+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004954:	2323      	movs	r3, #35	; 0x23
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d008      	beq.n	8004970 <xTaskGenericNotifyFromISR+0xf0>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800495e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	3314      	adds	r3, #20
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	18d3      	adds	r3, r2, r3
 8004968:	3304      	adds	r3, #4
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	601a      	str	r2, [r3, #0]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800496e:	e00b      	b.n	8004988 <xTaskGenericNotifyFromISR+0x108>
                        xReturn = pdFAIL;
 8004970:	2300      	movs	r3, #0
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004974:	e008      	b.n	8004988 <xTaskGenericNotifyFromISR+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004976:	4b57      	ldr	r3, [pc, #348]	; (8004ad4 <xTaskGenericNotifyFromISR+0x254>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <xTaskGenericNotifyFromISR+0x106>
 800497e:	b672      	cpsid	i
 8004980:	e7fe      	b.n	8004980 <xTaskGenericNotifyFromISR+0x100>
                    break;
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	e000      	b.n	8004988 <xTaskGenericNotifyFromISR+0x108>
                    break;
 8004986:	46c0      	nop			; (mov r8, r8)

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004988:	2323      	movs	r3, #35	; 0x23
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d000      	beq.n	8004994 <xTaskGenericNotifyFromISR+0x114>
 8004992:	e093      	b.n	8004abc <xTaskGenericNotifyFromISR+0x23c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <xTaskGenericNotifyFromISR+0x120>
 800499c:	b672      	cpsid	i
 800499e:	e7fe      	b.n	800499e <xTaskGenericNotifyFromISR+0x11e>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049a0:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <xTaskGenericNotifyFromISR+0x258>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d15d      	bne.n	8004a64 <xTaskGenericNotifyFromISR+0x1e4>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b4:	68d2      	ldr	r2, [r2, #12]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049be:	6892      	ldr	r2, [r2, #8]
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	3304      	adds	r3, #4
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d103      	bne.n	80049d6 <xTaskGenericNotifyFromISR+0x156>
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	2200      	movs	r2, #0
 80049da:	615a      	str	r2, [r3, #20]
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	1e5a      	subs	r2, r3, #1
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ea:	4b3c      	ldr	r3, [pc, #240]	; (8004adc <xTaskGenericNotifyFromISR+0x25c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d903      	bls.n	80049fa <xTaskGenericNotifyFromISR+0x17a>
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	4b39      	ldr	r3, [pc, #228]	; (8004adc <xTaskGenericNotifyFromISR+0x25c>)
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	4938      	ldr	r1, [pc, #224]	; (8004ae0 <xTaskGenericNotifyFromISR+0x260>)
 8004a00:	0013      	movs	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	189b      	adds	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	18cb      	adds	r3, r1, r3
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	609a      	str	r2, [r3, #8]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	60da      	str	r2, [r3, #12]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a24:	3204      	adds	r2, #4
 8004a26:	605a      	str	r2, [r3, #4]
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	1d1a      	adds	r2, r3, #4
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	0013      	movs	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	189b      	adds	r3, r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4a28      	ldr	r2, [pc, #160]	; (8004ae0 <xTaskGenericNotifyFromISR+0x260>)
 8004a3e:	189a      	adds	r2, r3, r2
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	615a      	str	r2, [r3, #20]
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	4925      	ldr	r1, [pc, #148]	; (8004ae0 <xTaskGenericNotifyFromISR+0x260>)
 8004a4a:	0013      	movs	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	189b      	adds	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	585b      	ldr	r3, [r3, r1]
 8004a54:	1c58      	adds	r0, r3, #1
 8004a56:	4922      	ldr	r1, [pc, #136]	; (8004ae0 <xTaskGenericNotifyFromISR+0x260>)
 8004a58:	0013      	movs	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	189b      	adds	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	5058      	str	r0, [r3, r1]
 8004a62:	e01b      	b.n	8004a9c <xTaskGenericNotifyFromISR+0x21c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004a64:	4b1f      	ldr	r3, [pc, #124]	; (8004ae4 <xTaskGenericNotifyFromISR+0x264>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	61da      	str	r2, [r3, #28]
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	621a      	str	r2, [r3, #32]
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a7e:	3218      	adds	r2, #24
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	3318      	adds	r3, #24
 8004a86:	001a      	movs	r2, r3
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	4a15      	ldr	r2, [pc, #84]	; (8004ae4 <xTaskGenericNotifyFromISR+0x264>)
 8004a90:	629a      	str	r2, [r3, #40]	; 0x28
 8004a92:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <xTaskGenericNotifyFromISR+0x264>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <xTaskGenericNotifyFromISR+0x264>)
 8004a9a:	601a      	str	r2, [r3, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <xTaskGenericNotifyFromISR+0x268>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d908      	bls.n	8004abc <xTaskGenericNotifyFromISR+0x23c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <xTaskGenericNotifyFromISR+0x236>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <xTaskGenericNotifyFromISR+0x26c>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f000 fbce 	bl	8005260 <vClearInterruptMaskFromISR>

        return xReturn;
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b00c      	add	sp, #48	; 0x30
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	08005800 	.word	0x08005800
 8004ad4:	2000050c 	.word	0x2000050c
 8004ad8:	20000530 	.word	0x20000530
 8004adc:	20000510 	.word	0x20000510
 8004ae0:	20000038 	.word	0x20000038
 8004ae4:	200004c8 	.word	0x200004c8
 8004ae8:	20000034 	.word	0x20000034
 8004aec:	2000051c 	.word	0x2000051c

08004af0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004afa:	4b2e      	ldr	r3, [pc, #184]	; (8004bb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b00:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3304      	adds	r3, #4
 8004b06:	0018      	movs	r0, r3
 8004b08:	f7fe fc79 	bl	80033fe <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	d124      	bne.n	8004b5c <prvAddCurrentTaskToDelayedList+0x6c>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d021      	beq.n	8004b5c <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b18:	4b28      	ldr	r3, [pc, #160]	; (8004bbc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	609a      	str	r2, [r3, #8]
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	6892      	ldr	r2, [r2, #8]
 8004b2e:	60da      	str	r2, [r3, #12]
 8004b30:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	3204      	adds	r2, #4
 8004b3a:	605a      	str	r2, [r3, #4]
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	1d1a      	adds	r2, r3, #4
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	609a      	str	r2, [r3, #8]
 8004b46:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004b4c:	615a      	str	r2, [r3, #20]
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	; (8004bbc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	4b19      	ldr	r3, [pc, #100]	; (8004bbc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004b5a:	e026      	b.n	8004baa <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	18d3      	adds	r3, r2, r3
 8004b62:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b64:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d209      	bcs.n	8004b88 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b74:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	0019      	movs	r1, r3
 8004b80:	0010      	movs	r0, r2
 8004b82:	f7fe fc06 	bl	8003392 <vListInsert>
}
 8004b86:	e010      	b.n	8004baa <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b88:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3304      	adds	r3, #4
 8004b92:	0019      	movs	r1, r3
 8004b94:	0010      	movs	r0, r2
 8004b96:	f7fe fbfc 	bl	8003392 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d202      	bcs.n	8004baa <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8004ba4:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	601a      	str	r2, [r3, #0]
}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b006      	add	sp, #24
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	2000050c 	.word	0x2000050c
 8004bb8:	20000034 	.word	0x20000034
 8004bbc:	200004f4 	.word	0x200004f4
 8004bc0:	200004c4 	.word	0x200004c4
 8004bc4:	200004c0 	.word	0x200004c0
 8004bc8:	20000528 	.word	0x20000528

08004bcc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004bd6:	f000 fa41 	bl	800505c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <xTimerCreateTimerTask+0x44>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <xTimerCreateTimerTask+0x30>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	005a      	lsls	r2, r3, #1
 8004be6:	490b      	ldr	r1, [pc, #44]	; (8004c14 <xTimerCreateTimerTask+0x48>)
 8004be8:	480b      	ldr	r0, [pc, #44]	; (8004c18 <xTimerCreateTimerTask+0x4c>)
 8004bea:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <xTimerCreateTimerTask+0x50>)
 8004bec:	9301      	str	r3, [sp, #4]
 8004bee:	2302      	movs	r3, #2
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f7fe feff 	bl	80039f6 <xTaskCreate>
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <xTimerCreateTimerTask+0x3a>
 8004c02:	b672      	cpsid	i
 8004c04:	e7fe      	b.n	8004c04 <xTimerCreateTimerTask+0x38>
        return xReturn;
 8004c06:	687b      	ldr	r3, [r7, #4]
    }
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b002      	add	sp, #8
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000564 	.word	0x20000564
 8004c14:	08005768 	.word	0x08005768
 8004c18:	08004cc9 	.word	0x08004cc9
 8004c1c:	20000568 	.word	0x20000568

08004c20 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004c2c:	e009      	b.n	8004c42 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	18d3      	adds	r3, r2, r3
 8004c36:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	0010      	movs	r0, r2
 8004c40:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	18d1      	adds	r1, r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f8d8 	bl	8004e04 <prvInsertTimerInActiveList>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d1ea      	bne.n	8004c2e <prvReloadTimer+0xe>
        }
    }
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b004      	add	sp, #16
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c6e:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <prvProcessExpiredTimer+0x60>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7fe fbbe 	bl	80033fe <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2228      	movs	r2, #40	; 0x28
 8004c86:	5c9b      	ldrb	r3, [r3, r2]
 8004c88:	001a      	movs	r2, r3
 8004c8a:	2304      	movs	r3, #4
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d006      	beq.n	8004c9e <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	0018      	movs	r0, r3
 8004c98:	f7ff ffc2 	bl	8004c20 <prvReloadTimer>
 8004c9c:	e008      	b.n	8004cb0 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2228      	movs	r2, #40	; 0x28
 8004ca2:	5c9b      	ldrb	r3, [r3, r2]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	4393      	bics	r3, r2
 8004ca8:	b2d9      	uxtb	r1, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2228      	movs	r2, #40	; 0x28
 8004cae:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	0010      	movs	r0, r2
 8004cb8:	4798      	blx	r3
    }
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b004      	add	sp, #16
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	2000055c 	.word	0x2000055c

08004cc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f000 f853 	bl	8004d80 <prvGetNextExpireTime>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	0011      	movs	r1, r2
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 f803 	bl	8004cf0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004cea:	f000 f8cd 	bl	8004e88 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cee:	e7ef      	b.n	8004cd0 <prvTimerTask+0x8>

08004cf0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004cfa:	f7ff f881 	bl	8003e00 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cfe:	2308      	movs	r3, #8
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	0018      	movs	r0, r3
 8004d04:	f000 f85e 	bl	8004dc4 <prvSampleTimeNow>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d12b      	bne.n	8004d6a <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10c      	bne.n	8004d32 <prvProcessTimerOrBlockTask+0x42>
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d808      	bhi.n	8004d32 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8004d20:	f7ff f87a 	bl	8003e18 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0011      	movs	r1, r2
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f7ff ff9a 	bl	8004c64 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004d30:	e01d      	b.n	8004d6e <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <prvProcessTimerOrBlockTask+0x88>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <prvProcessTimerOrBlockTask+0x56>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <prvProcessTimerOrBlockTask+0x58>
 8004d46:	2300      	movs	r3, #0
 8004d48:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d4a:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <prvProcessTimerOrBlockTask+0x8c>)
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	0019      	movs	r1, r3
 8004d58:	f7fe fe1a 	bl	8003990 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004d5c:	f7ff f85c 	bl	8003e18 <xTaskResumeAll>
 8004d60:	1e03      	subs	r3, r0, #0
 8004d62:	d104      	bne.n	8004d6e <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8004d64:	f000 fa3c 	bl	80051e0 <vPortYield>
    }
 8004d68:	e001      	b.n	8004d6e <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8004d6a:	f7ff f855 	bl	8003e18 <xTaskResumeAll>
    }
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b004      	add	sp, #16
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	20000560 	.word	0x20000560
 8004d7c:	20000564 	.word	0x20000564

08004d80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <prvGetNextExpireTime+0x40>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <prvGetNextExpireTime+0x16>
 8004d92:	2201      	movs	r2, #1
 8004d94:	e000      	b.n	8004d98 <prvGetNextExpireTime+0x18>
 8004d96:	2200      	movs	r2, #0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d105      	bne.n	8004db0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <prvGetNextExpireTime+0x40>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e001      	b.n	8004db4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004db4:	68fb      	ldr	r3, [r7, #12]
    }
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b004      	add	sp, #16
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	2000055c 	.word	0x2000055c

08004dc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004dcc:	f7ff f90c 	bl	8003fe8 <xTaskGetTickCount>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <prvSampleTimeNow+0x3c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d205      	bcs.n	8004dea <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8004dde:	f000 f915 	bl	800500c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e002      	b.n	8004df0 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <prvSampleTimeNow+0x3c>)
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8004df6:	68fb      	ldr	r3, [r7, #12]
    }
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b004      	add	sp, #16
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	2000056c 	.word	0x2000056c

08004e04 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d812      	bhi.n	8004e50 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	1ad2      	subs	r2, r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d302      	bcc.n	8004e3e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e01b      	b.n	8004e76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <prvInsertTimerInActiveList+0x7c>)
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3304      	adds	r3, #4
 8004e46:	0019      	movs	r1, r3
 8004e48:	0010      	movs	r0, r2
 8004e4a:	f7fe faa2 	bl	8003392 <vListInsert>
 8004e4e:	e012      	b.n	8004e76 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d206      	bcs.n	8004e66 <prvInsertTimerInActiveList+0x62>
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d302      	bcc.n	8004e66 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e007      	b.n	8004e76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e66:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <prvInsertTimerInActiveList+0x80>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	0019      	movs	r1, r3
 8004e70:	0010      	movs	r0, r2
 8004e72:	f7fe fa8e 	bl	8003392 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004e76:	697b      	ldr	r3, [r7, #20]
    }
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b006      	add	sp, #24
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000560 	.word	0x20000560
 8004e84:	2000055c 	.word	0x2000055c

08004e88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e8e:	e0a9      	b.n	8004fe4 <prvProcessReceivedCommands+0x15c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e90:	1d3b      	adds	r3, r7, #4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	da0f      	bge.n	8004eb8 <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e98:	1d3b      	adds	r3, r7, #4
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <prvProcessReceivedCommands+0x20>
 8004ea4:	b672      	cpsid	i
 8004ea6:	e7fe      	b.n	8004ea6 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	6858      	ldr	r0, [r3, #4]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	4790      	blx	r2
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	da00      	bge.n	8004ec2 <prvProcessReceivedCommands+0x3a>
 8004ec0:	e08f      	b.n	8004fe2 <prvProcessReceivedCommands+0x15a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ec2:	1d3b      	adds	r3, r7, #4
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <prvProcessReceivedCommands+0x52>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7fe fa92 	bl	80033fe <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004eda:	003b      	movs	r3, r7
 8004edc:	0018      	movs	r0, r3
 8004ede:	f7ff ff71 	bl	8004dc4 <prvSampleTimeNow>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	617b      	str	r3, [r7, #20]

                switch( xMessage.xMessageID )
 8004ee6:	1d3b      	adds	r3, r7, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b09      	cmp	r3, #9
 8004eec:	d900      	bls.n	8004ef0 <prvProcessReceivedCommands+0x68>
 8004eee:	e079      	b.n	8004fe4 <prvProcessReceivedCommands+0x15c>
 8004ef0:	009a      	lsls	r2, r3, #2
 8004ef2:	4b44      	ldr	r3, [pc, #272]	; (8005004 <prvProcessReceivedCommands+0x17c>)
 8004ef4:	18d3      	adds	r3, r2, r3
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	2228      	movs	r2, #40	; 0x28
 8004efe:	5c9b      	ldrb	r3, [r3, r2]
 8004f00:	2201      	movs	r2, #1
 8004f02:	4313      	orrs	r3, r2
 8004f04:	b2d9      	uxtb	r1, r3
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2228      	movs	r2, #40	; 0x28
 8004f0a:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	18d1      	adds	r1, r2, r3
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	69b8      	ldr	r0, [r7, #24]
 8004f1e:	f7ff ff71 	bl	8004e04 <prvInsertTimerInActiveList>
 8004f22:	1e03      	subs	r3, r0, #0
 8004f24:	d05e      	beq.n	8004fe4 <prvProcessReceivedCommands+0x15c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2228      	movs	r2, #40	; 0x28
 8004f2a:	5c9b      	ldrb	r3, [r3, r2]
 8004f2c:	001a      	movs	r2, r3
 8004f2e:	2304      	movs	r3, #4
 8004f30:	4013      	ands	r3, r2
 8004f32:	d00a      	beq.n	8004f4a <prvProcessReceivedCommands+0xc2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	18d1      	adds	r1, r2, r3
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	0018      	movs	r0, r3
 8004f44:	f7ff fe6c 	bl	8004c20 <prvReloadTimer>
 8004f48:	e008      	b.n	8004f5c <prvProcessReceivedCommands+0xd4>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2228      	movs	r2, #40	; 0x28
 8004f4e:	5c9b      	ldrb	r3, [r3, r2]
 8004f50:	2201      	movs	r2, #1
 8004f52:	4393      	bics	r3, r2
 8004f54:	b2d9      	uxtb	r1, r3
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2228      	movs	r2, #40	; 0x28
 8004f5a:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	0010      	movs	r0, r2
 8004f64:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004f66:	e03d      	b.n	8004fe4 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2228      	movs	r2, #40	; 0x28
 8004f6c:	5c9b      	ldrb	r3, [r3, r2]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	4393      	bics	r3, r2
 8004f72:	b2d9      	uxtb	r1, r3
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2228      	movs	r2, #40	; 0x28
 8004f78:	5499      	strb	r1, [r3, r2]
                        break;
 8004f7a:	e033      	b.n	8004fe4 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2228      	movs	r2, #40	; 0x28
 8004f80:	5c9b      	ldrb	r3, [r3, r2]
 8004f82:	2201      	movs	r2, #1
 8004f84:	4313      	orrs	r3, r2
 8004f86:	b2d9      	uxtb	r1, r3
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	2228      	movs	r2, #40	; 0x28
 8004f8c:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f8e:	1d3b      	adds	r3, r7, #4
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <prvProcessReceivedCommands+0x11a>
 8004f9e:	b672      	cpsid	i
 8004fa0:	e7fe      	b.n	8004fa0 <prvProcessReceivedCommands+0x118>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	18d1      	adds	r1, r2, r3
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	69b8      	ldr	r0, [r7, #24]
 8004fb0:	f7ff ff28 	bl	8004e04 <prvInsertTimerInActiveList>
                        break;
 8004fb4:	e016      	b.n	8004fe4 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2228      	movs	r2, #40	; 0x28
 8004fba:	5c9b      	ldrb	r3, [r3, r2]
 8004fbc:	001a      	movs	r2, r3
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d104      	bne.n	8004fce <prvProcessReceivedCommands+0x146>
                            {
                                vPortFree( pxTimer );
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f000 fa5a 	bl	8005480 <vPortFree>
 8004fcc:	e00a      	b.n	8004fe4 <prvProcessReceivedCommands+0x15c>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2228      	movs	r2, #40	; 0x28
 8004fd2:	5c9b      	ldrb	r3, [r3, r2]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	4393      	bics	r3, r2
 8004fd8:	b2d9      	uxtb	r1, r3
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2228      	movs	r2, #40	; 0x28
 8004fde:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004fe0:	e000      	b.n	8004fe4 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004fe2:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fe4:	4b08      	ldr	r3, [pc, #32]	; (8005008 <prvProcessReceivedCommands+0x180>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	1d39      	adds	r1, r7, #4
 8004fea:	2200      	movs	r2, #0
 8004fec:	0018      	movs	r0, r3
 8004fee:	f7fe fb3c 	bl	800366a <xQueueReceive>
 8004ff2:	1e03      	subs	r3, r0, #0
 8004ff4:	d000      	beq.n	8004ff8 <prvProcessReceivedCommands+0x170>
 8004ff6:	e74b      	b.n	8004e90 <prvProcessReceivedCommands+0x8>
        }
    }
 8004ff8:	46c0      	nop			; (mov r8, r8)
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b008      	add	sp, #32
 8005000:	bd80      	pop	{r7, pc}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	08005814 	.word	0x08005814
 8005008:	20000564 	.word	0x20000564

0800500c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005012:	e00b      	b.n	800502c <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005014:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <prvSwitchTimerLists+0x48>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800501e:	2301      	movs	r3, #1
 8005020:	425a      	negs	r2, r3
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	0011      	movs	r1, r2
 8005026:	0018      	movs	r0, r3
 8005028:	f7ff fe1c 	bl	8004c64 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <prvSwitchTimerLists+0x48>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1ee      	bne.n	8005014 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005036:	4b07      	ldr	r3, [pc, #28]	; (8005054 <prvSwitchTimerLists+0x48>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <prvSwitchTimerLists+0x4c>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4b04      	ldr	r3, [pc, #16]	; (8005054 <prvSwitchTimerLists+0x48>)
 8005042:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <prvSwitchTimerLists+0x4c>)
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	601a      	str	r2, [r3, #0]
    }
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	46bd      	mov	sp, r7
 800504e:	b002      	add	sp, #8
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	2000055c 	.word	0x2000055c
 8005058:	20000560 	.word	0x20000560

0800505c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005060:	f000 f8ce 	bl	8005200 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005064:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <prvCheckForValidListAndQueue+0x5c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d120      	bne.n	80050ae <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 800506c:	4b13      	ldr	r3, [pc, #76]	; (80050bc <prvCheckForValidListAndQueue+0x60>)
 800506e:	0018      	movs	r0, r3
 8005070:	f7fe f944 	bl	80032fc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005074:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <prvCheckForValidListAndQueue+0x64>)
 8005076:	0018      	movs	r0, r3
 8005078:	f7fe f940 	bl	80032fc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800507c:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <prvCheckForValidListAndQueue+0x68>)
 800507e:	4a0f      	ldr	r2, [pc, #60]	; (80050bc <prvCheckForValidListAndQueue+0x60>)
 8005080:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005082:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <prvCheckForValidListAndQueue+0x6c>)
 8005084:	4a0e      	ldr	r2, [pc, #56]	; (80050c0 <prvCheckForValidListAndQueue+0x64>)
 8005086:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005088:	2200      	movs	r2, #0
 800508a:	2110      	movs	r1, #16
 800508c:	200a      	movs	r0, #10
 800508e:	f7fe fa67 	bl	8003560 <xQueueGenericCreate>
 8005092:	0002      	movs	r2, r0
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <prvCheckForValidListAndQueue+0x5c>)
 8005096:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <prvCheckForValidListAndQueue+0x5c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d006      	beq.n	80050ae <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <prvCheckForValidListAndQueue+0x5c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a09      	ldr	r2, [pc, #36]	; (80050cc <prvCheckForValidListAndQueue+0x70>)
 80050a6:	0011      	movs	r1, r2
 80050a8:	0018      	movs	r0, r3
 80050aa:	f7fe fc2d 	bl	8003908 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80050ae:	f000 f8b9 	bl	8005224 <vPortExitCritical>
    }
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000564 	.word	0x20000564
 80050bc:	20000534 	.word	0x20000534
 80050c0:	20000548 	.word	0x20000548
 80050c4:	2000055c 	.word	0x2000055c
 80050c8:	20000560 	.word	0x20000560
 80050cc:	08005770 	.word	0x08005770

080050d0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3b04      	subs	r3, #4
 80050e0:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2280      	movs	r2, #128	; 0x80
 80050e6:	0452      	lsls	r2, r2, #17
 80050e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3b04      	subs	r3, #4
 80050ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3b04      	subs	r3, #4
 80050fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 80050fc:	4a08      	ldr	r2, [pc, #32]	; (8005120 <pxPortInitialiseStack+0x50>)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3b14      	subs	r3, #20
 8005106:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3b20      	subs	r3, #32
 8005112:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005114:	68fb      	ldr	r3, [r7, #12]
}
 8005116:	0018      	movs	r0, r3
 8005118:	46bd      	mov	sp, r7
 800511a:	b004      	add	sp, #16
 800511c:	bd80      	pop	{r7, pc}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	08005125 	.word	0x08005125

08005124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800512a:	2300      	movs	r3, #0
 800512c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <prvTaskExitError+0x2c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	d001      	beq.n	800513a <prvTaskExitError+0x16>
 8005136:	b672      	cpsid	i
 8005138:	e7fe      	b.n	8005138 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 800513a:	b672      	cpsid	i

    while( ulDummy == 0 )
 800513c:	46c0      	nop			; (mov r8, r8)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0fc      	beq.n	800513e <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005144:	46c0      	nop			; (mov r8, r8)
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	b002      	add	sp, #8
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	20000010 	.word	0x20000010

08005154 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8005158:	46c0      	nop			; (mov r8, r8)
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8005160:	4a0b      	ldr	r2, [pc, #44]	; (8005190 <pxCurrentTCBConst2>)
 8005162:	6813      	ldr	r3, [r2, #0]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	3020      	adds	r0, #32
 8005168:	f380 8809 	msr	PSP, r0
 800516c:	2002      	movs	r0, #2
 800516e:	f380 8814 	msr	CONTROL, r0
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005178:	46ae      	mov	lr, r5
 800517a:	bc08      	pop	{r3}
 800517c:	bc04      	pop	{r2}
 800517e:	b662      	cpsie	i
 8005180:	4718      	bx	r3
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	46c0      	nop			; (mov r8, r8)
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	46c0      	nop			; (mov r8, r8)
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	46c0      	nop			; (mov r8, r8)
 800518e:	46c0      	nop			; (mov r8, r8)

08005190 <pxCurrentTCBConst2>:
 8005190:	20000034 	.word	0x20000034
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8005194:	46c0      	nop			; (mov r8, r8)
 8005196:	46c0      	nop			; (mov r8, r8)

08005198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800519c:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <xPortStartScheduler+0x40>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <xPortStartScheduler+0x40>)
 80051a2:	21ff      	movs	r1, #255	; 0xff
 80051a4:	0409      	lsls	r1, r1, #16
 80051a6:	430a      	orrs	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80051aa:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <xPortStartScheduler+0x40>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <xPortStartScheduler+0x40>)
 80051b0:	21ff      	movs	r1, #255	; 0xff
 80051b2:	0609      	lsls	r1, r1, #24
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80051b8:	f000 f898 	bl	80052ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80051bc:	4b07      	ldr	r3, [pc, #28]	; (80051dc <xPortStartScheduler+0x44>)
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 80051c2:	f7ff ffcd 	bl	8005160 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80051c6:	f7ff f829 	bl	800421c <vTaskSwitchContext>
    prvTaskExitError();
 80051ca:	f7ff ffab 	bl	8005124 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	0018      	movs	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	e000ed20 	.word	0xe000ed20
 80051dc:	20000010 	.word	0x20000010

080051e0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <vPortYield+0x1c>)
 80051e6:	2280      	movs	r2, #128	; 0x80
 80051e8:	0552      	lsls	r2, r2, #21
 80051ea:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80051ec:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80051f0:	f3bf 8f6f 	isb	sy
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005204:	b672      	cpsid	i
    uxCriticalNesting++;
 8005206:	4b06      	ldr	r3, [pc, #24]	; (8005220 <vPortEnterCritical+0x20>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <vPortEnterCritical+0x20>)
 800520e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8005210:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005214:	f3bf 8f6f 	isb	sy
}
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	20000010 	.word	0x20000010

08005224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005228:	4b09      	ldr	r3, [pc, #36]	; (8005250 <vPortExitCritical+0x2c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <vPortExitCritical+0x10>
 8005230:	b672      	cpsid	i
 8005232:	e7fe      	b.n	8005232 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <vPortExitCritical+0x2c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	1e5a      	subs	r2, r3, #1
 800523a:	4b05      	ldr	r3, [pc, #20]	; (8005250 <vPortExitCritical+0x2c>)
 800523c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 800523e:	4b04      	ldr	r3, [pc, #16]	; (8005250 <vPortExitCritical+0x2c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d100      	bne.n	8005248 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005246:	b662      	cpsie	i
    }
}
 8005248:	46c0      	nop			; (mov r8, r8)
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	20000010 	.word	0x20000010

08005254 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8005254:	f3ef 8010 	mrs	r0, PRIMASK
 8005258:	b672      	cpsid	i
 800525a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	0018      	movs	r0, r3

08005260 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8005260:	f380 8810 	msr	PRIMASK, r0
 8005264:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8005266:	46c0      	nop			; (mov r8, r8)
	...

08005270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005270:	f3ef 8009 	mrs	r0, PSP
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <pxCurrentTCBConst>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	3820      	subs	r0, #32
 800527a:	6010      	str	r0, [r2, #0]
 800527c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800527e:	4644      	mov	r4, r8
 8005280:	464d      	mov	r5, r9
 8005282:	4656      	mov	r6, sl
 8005284:	465f      	mov	r7, fp
 8005286:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005288:	b508      	push	{r3, lr}
 800528a:	b672      	cpsid	i
 800528c:	f7fe ffc6 	bl	800421c <vTaskSwitchContext>
 8005290:	b662      	cpsie	i
 8005292:	bc0c      	pop	{r2, r3}
 8005294:	6811      	ldr	r1, [r2, #0]
 8005296:	6808      	ldr	r0, [r1, #0]
 8005298:	3010      	adds	r0, #16
 800529a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800529c:	46a0      	mov	r8, r4
 800529e:	46a9      	mov	r9, r5
 80052a0:	46b2      	mov	sl, r6
 80052a2:	46bb      	mov	fp, r7
 80052a4:	f380 8809 	msr	PSP, r0
 80052a8:	3820      	subs	r0, #32
 80052aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80052ac:	4718      	bx	r3
 80052ae:	46c0      	nop			; (mov r8, r8)

080052b0 <pxCurrentTCBConst>:
 80052b0:	20000034 	.word	0x20000034
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 80052b4:	46c0      	nop			; (mov r8, r8)
 80052b6:	46c0      	nop			; (mov r8, r8)

080052b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80052be:	f7ff ffc9 	bl	8005254 <ulSetInterruptMaskFromISR>
 80052c2:	0003      	movs	r3, r0
 80052c4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80052c6:	f7fe fe9d 	bl	8004004 <xTaskIncrementTick>
 80052ca:	1e03      	subs	r3, r0, #0
 80052cc:	d003      	beq.n	80052d6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052ce:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <SysTick_Handler+0x30>)
 80052d0:	2280      	movs	r2, #128	; 0x80
 80052d2:	0552      	lsls	r2, r2, #21
 80052d4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	0018      	movs	r0, r3
 80052da:	f7ff ffc1 	bl	8005260 <vClearInterruptMaskFromISR>
}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b002      	add	sp, #8
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <vPortSetupTimerInterrupt+0x34>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <vPortSetupTimerInterrupt+0x38>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052fc:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <vPortSetupTimerInterrupt+0x3c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	22fa      	movs	r2, #250	; 0xfa
 8005302:	0091      	lsls	r1, r2, #2
 8005304:	0018      	movs	r0, r3
 8005306:	f7fa feff 	bl	8000108 <__udivsi3>
 800530a:	0003      	movs	r3, r0
 800530c:	001a      	movs	r2, r3
 800530e:	4b07      	ldr	r3, [pc, #28]	; (800532c <vPortSetupTimerInterrupt+0x40>)
 8005310:	3a01      	subs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005314:	4b02      	ldr	r3, [pc, #8]	; (8005320 <vPortSetupTimerInterrupt+0x34>)
 8005316:	2207      	movs	r2, #7
 8005318:	601a      	str	r2, [r3, #0]
}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	e000e010 	.word	0xe000e010
 8005324:	e000e018 	.word	0xe000e018
 8005328:	20000000 	.word	0x20000000
 800532c:	e000e014 	.word	0xe000e014

08005330 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800533c:	f7fe fd60 	bl	8003e00 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005340:	4b4a      	ldr	r3, [pc, #296]	; (800546c <pvPortMalloc+0x13c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005348:	f000 f8e6 	bl	8005518 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d012      	beq.n	8005378 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005352:	2208      	movs	r2, #8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2107      	movs	r1, #7
 8005358:	400b      	ands	r3, r1
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	3308      	adds	r3, #8
 800535e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	43db      	mvns	r3, r3
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	429a      	cmp	r2, r3
 8005368:	d804      	bhi.n	8005374 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	18d3      	adds	r3, r2, r3
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	e001      	b.n	8005378 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	db68      	blt.n	8005450 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d065      	beq.n	8005450 <pvPortMalloc+0x120>
 8005384:	4b3a      	ldr	r3, [pc, #232]	; (8005470 <pvPortMalloc+0x140>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d860      	bhi.n	8005450 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800538e:	4b39      	ldr	r3, [pc, #228]	; (8005474 <pvPortMalloc+0x144>)
 8005390:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8005392:	4b38      	ldr	r3, [pc, #224]	; (8005474 <pvPortMalloc+0x144>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005398:	e004      	b.n	80053a4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d903      	bls.n	80053b6 <pvPortMalloc+0x86>
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f1      	bne.n	800539a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80053b6:	4b2d      	ldr	r3, [pc, #180]	; (800546c <pvPortMalloc+0x13c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d047      	beq.n	8005450 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2208      	movs	r2, #8
 80053c6:	189b      	adds	r3, r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	1ad2      	subs	r2, r2, r3
 80053da:	2308      	movs	r3, #8
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	429a      	cmp	r2, r3
 80053e0:	d916      	bls.n	8005410 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	18d3      	adds	r3, r2, r3
 80053e8:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2207      	movs	r2, #7
 80053ee:	4013      	ands	r3, r2
 80053f0:	d001      	beq.n	80053f6 <pvPortMalloc+0xc6>
 80053f2:	b672      	cpsid	i
 80053f4:	e7fe      	b.n	80053f4 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	1ad2      	subs	r2, r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	0018      	movs	r0, r3
 800540c:	f000 f8de 	bl	80055cc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005410:	4b17      	ldr	r3, [pc, #92]	; (8005470 <pvPortMalloc+0x140>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	1ad2      	subs	r2, r2, r3
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <pvPortMalloc+0x140>)
 800541c:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800541e:	4b14      	ldr	r3, [pc, #80]	; (8005470 <pvPortMalloc+0x140>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <pvPortMalloc+0x148>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d203      	bcs.n	8005432 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800542a:	4b11      	ldr	r3, [pc, #68]	; (8005470 <pvPortMalloc+0x140>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <pvPortMalloc+0x148>)
 8005430:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2280      	movs	r2, #128	; 0x80
 8005438:	0612      	lsls	r2, r2, #24
 800543a:	431a      	orrs	r2, r3
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <pvPortMalloc+0x14c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <pvPortMalloc+0x14c>)
 800544e:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005450:	f7fe fce2 	bl	8003e18 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2207      	movs	r2, #7
 8005458:	4013      	ands	r3, r2
 800545a:	d001      	beq.n	8005460 <pvPortMalloc+0x130>
 800545c:	b672      	cpsid	i
 800545e:	e7fe      	b.n	800545e <pvPortMalloc+0x12e>
    return pvReturn;
 8005460:	697b      	ldr	r3, [r7, #20]
}
 8005462:	0018      	movs	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	b008      	add	sp, #32
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	20001d78 	.word	0x20001d78
 8005470:	20001d7c 	.word	0x20001d7c
 8005474:	20001d70 	.word	0x20001d70
 8005478:	20001d80 	.word	0x20001d80
 800547c:	20001d84 	.word	0x20001d84

08005480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d039      	beq.n	8005506 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005492:	2308      	movs	r3, #8
 8005494:	425b      	negs	r3, r3
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	18d3      	adds	r3, r2, r3
 800549a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	db01      	blt.n	80054ac <vPortFree+0x2c>
 80054a8:	b672      	cpsid	i
 80054aa:	e7fe      	b.n	80054aa <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <vPortFree+0x38>
 80054b4:	b672      	cpsid	i
 80054b6:	e7fe      	b.n	80054b6 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	0fdb      	lsrs	r3, r3, #31
 80054be:	1c1a      	adds	r2, r3, #0
 80054c0:	2301      	movs	r3, #1
 80054c2:	4013      	ands	r3, r2
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01d      	beq.n	8005506 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d119      	bne.n	8005506 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	085a      	lsrs	r2, r3, #1
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80054de:	f7fe fc8f 	bl	8003e00 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <vPortFree+0x90>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	18d2      	adds	r2, r2, r3
 80054ec:	4b08      	ldr	r3, [pc, #32]	; (8005510 <vPortFree+0x90>)
 80054ee:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	0018      	movs	r0, r3
 80054f4:	f000 f86a 	bl	80055cc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80054f8:	4b06      	ldr	r3, [pc, #24]	; (8005514 <vPortFree+0x94>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <vPortFree+0x94>)
 8005500:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8005502:	f7fe fc89 	bl	8003e18 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	46bd      	mov	sp, r7
 800550a:	b004      	add	sp, #16
 800550c:	bd80      	pop	{r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	20001d7c 	.word	0x20001d7c
 8005514:	20001d88 	.word	0x20001d88

08005518 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800551e:	23c0      	movs	r3, #192	; 0xc0
 8005520:	015b      	lsls	r3, r3, #5
 8005522:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005524:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <prvHeapInit+0xa0>)
 8005526:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2207      	movs	r2, #7
 800552c:	4013      	ands	r3, r2
 800552e:	d00c      	beq.n	800554a <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3307      	adds	r3, #7
 8005534:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2207      	movs	r2, #7
 800553a:	4393      	bics	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1ad2      	subs	r2, r2, r3
 8005544:	4b1c      	ldr	r3, [pc, #112]	; (80055b8 <prvHeapInit+0xa0>)
 8005546:	18d3      	adds	r3, r2, r3
 8005548:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800554e:	4b1b      	ldr	r3, [pc, #108]	; (80055bc <prvHeapInit+0xa4>)
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005554:	4b19      	ldr	r3, [pc, #100]	; (80055bc <prvHeapInit+0xa4>)
 8005556:	2200      	movs	r2, #0
 8005558:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	18d3      	adds	r3, r2, r3
 8005560:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005562:	2208      	movs	r2, #8
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2207      	movs	r2, #7
 800556e:	4393      	bics	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <prvHeapInit+0xa8>)
 8005576:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8005578:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <prvHeapInit+0xa8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2200      	movs	r2, #0
 800557e:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005580:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <prvHeapInit+0xa8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	1ad2      	subs	r2, r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <prvHeapInit+0xa8>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <prvHeapInit+0xac>)
 80055a4:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <prvHeapInit+0xb0>)
 80055ac:	601a      	str	r2, [r3, #0]
}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b004      	add	sp, #16
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	20000570 	.word	0x20000570
 80055bc:	20001d70 	.word	0x20001d70
 80055c0:	20001d78 	.word	0x20001d78
 80055c4:	20001d80 	.word	0x20001d80
 80055c8:	20001d7c 	.word	0x20001d7c

080055cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055d4:	4b27      	ldr	r3, [pc, #156]	; (8005674 <prvInsertBlockIntoFreeList+0xa8>)
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e002      	b.n	80055e0 <prvInsertBlockIntoFreeList+0x14>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d8f7      	bhi.n	80055da <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	18d3      	adds	r3, r2, r3
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d108      	bne.n	800560e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	18d2      	adds	r2, r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	18d2      	adds	r2, r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d118      	bne.n	8005654 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4b14      	ldr	r3, [pc, #80]	; (8005678 <prvInsertBlockIntoFreeList+0xac>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d00d      	beq.n	800564a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	18d2      	adds	r2, r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	e008      	b.n	800565c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800564a:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <prvInsertBlockIntoFreeList+0xac>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e003      	b.n	800565c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d002      	beq.n	800566a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	46bd      	mov	sp, r7
 800566e:	b004      	add	sp, #16
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	20001d70 	.word	0x20001d70
 8005678:	20001d78 	.word	0x20001d78

0800567c <__libc_init_array>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	2600      	movs	r6, #0
 8005680:	4d0c      	ldr	r5, [pc, #48]	; (80056b4 <__libc_init_array+0x38>)
 8005682:	4c0d      	ldr	r4, [pc, #52]	; (80056b8 <__libc_init_array+0x3c>)
 8005684:	1b64      	subs	r4, r4, r5
 8005686:	10a4      	asrs	r4, r4, #2
 8005688:	42a6      	cmp	r6, r4
 800568a:	d109      	bne.n	80056a0 <__libc_init_array+0x24>
 800568c:	2600      	movs	r6, #0
 800568e:	f000 f82b 	bl	80056e8 <_init>
 8005692:	4d0a      	ldr	r5, [pc, #40]	; (80056bc <__libc_init_array+0x40>)
 8005694:	4c0a      	ldr	r4, [pc, #40]	; (80056c0 <__libc_init_array+0x44>)
 8005696:	1b64      	subs	r4, r4, r5
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	42a6      	cmp	r6, r4
 800569c:	d105      	bne.n	80056aa <__libc_init_array+0x2e>
 800569e:	bd70      	pop	{r4, r5, r6, pc}
 80056a0:	00b3      	lsls	r3, r6, #2
 80056a2:	58eb      	ldr	r3, [r5, r3]
 80056a4:	4798      	blx	r3
 80056a6:	3601      	adds	r6, #1
 80056a8:	e7ee      	b.n	8005688 <__libc_init_array+0xc>
 80056aa:	00b3      	lsls	r3, r6, #2
 80056ac:	58eb      	ldr	r3, [r5, r3]
 80056ae:	4798      	blx	r3
 80056b0:	3601      	adds	r6, #1
 80056b2:	e7f2      	b.n	800569a <__libc_init_array+0x1e>
 80056b4:	08005844 	.word	0x08005844
 80056b8:	08005844 	.word	0x08005844
 80056bc:	08005844 	.word	0x08005844
 80056c0:	08005848 	.word	0x08005848

080056c4 <memcpy>:
 80056c4:	2300      	movs	r3, #0
 80056c6:	b510      	push	{r4, lr}
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d100      	bne.n	80056ce <memcpy+0xa>
 80056cc:	bd10      	pop	{r4, pc}
 80056ce:	5ccc      	ldrb	r4, [r1, r3]
 80056d0:	54c4      	strb	r4, [r0, r3]
 80056d2:	3301      	adds	r3, #1
 80056d4:	e7f8      	b.n	80056c8 <memcpy+0x4>

080056d6 <memset>:
 80056d6:	0003      	movs	r3, r0
 80056d8:	1882      	adds	r2, r0, r2
 80056da:	4293      	cmp	r3, r2
 80056dc:	d100      	bne.n	80056e0 <memset+0xa>
 80056de:	4770      	bx	lr
 80056e0:	7019      	strb	r1, [r3, #0]
 80056e2:	3301      	adds	r3, #1
 80056e4:	e7f9      	b.n	80056da <memset+0x4>
	...

080056e8 <_init>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr

080056f4 <_fini>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr
