
GY_521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e68  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff0  08003ff0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ff0  08003ff0  00013ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ff8  08003ff8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08004070  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004070  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faff  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002042  00000000  00000000  0002fb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00031be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00032700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017944  00000000  00000000  00033158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec21  00000000  00000000  0004aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000975ec  00000000  00000000  000596bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0ca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b08  00000000  00000000  000f0cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003f0c 	.word	0x08003f0c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08003f0c 	.word	0x08003f0c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	1c08      	adds	r0, r1, #0
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 facb 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f83b 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f929 	bl	80008a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000652:	f000 f899 	bl	8000788 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000656:	f000 f8d7 	bl	8000808 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Read the WHO_AM_I register.
	  HAL_I2C_Mem_Read(&hi2c1, 0xD0 , 0x75 , 1 , &whoAmIValue, 1 , HAL_MAX_DELAY);
 800065a:	4816      	ldr	r0, [pc, #88]	; (80006b4 <main+0x74>)
 800065c:	2301      	movs	r3, #1
 800065e:	425b      	negs	r3, r3
 8000660:	9302      	str	r3, [sp, #8]
 8000662:	2301      	movs	r3, #1
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	241f      	movs	r4, #31
 8000668:	193b      	adds	r3, r7, r4
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2301      	movs	r3, #1
 800066e:	2275      	movs	r2, #117	; 0x75
 8000670:	21d0      	movs	r1, #208	; 0xd0
 8000672:	f000 fe1d 	bl	80012b0 <HAL_I2C_Mem_Read>
	 // HAL_UART_Transmit(&huart2, (uint8_t*)whoAmIValue, sizeof(whoAmIValue), 100);
	  sprintf(msg,"%d\r\n",whoAmIValue);
 8000676:	193b      	adds	r3, r7, r4
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	001a      	movs	r2, r3
 800067c:	490e      	ldr	r1, [pc, #56]	; (80006b8 <main+0x78>)
 800067e:	2514      	movs	r5, #20
 8000680:	197b      	adds	r3, r7, r5
 8000682:	0018      	movs	r0, r3
 8000684:	f003 f81c 	bl	80036c0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8000688:	197b      	adds	r3, r7, r5
 800068a:	0018      	movs	r0, r3
 800068c:	f7ff fd3a 	bl	8000104 <strlen>
 8000690:	0003      	movs	r3, r0
 8000692:	b29a      	uxth	r2, r3
 8000694:	1979      	adds	r1, r7, r5
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <main+0x7c>)
 8000698:	2364      	movs	r3, #100	; 0x64
 800069a:	f002 f977 	bl	800298c <HAL_UART_Transmit>

	  if(whoAmIValue == 104){
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b68      	cmp	r3, #104	; 0x68
 80006a4:	d1d9      	bne.n	800065a <main+0x1a>
//		  Data = 0;
//		  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
		  //sprintf(msg,"%d\r\n",whoAmIValue);
		  	  HAL_UART_Transmit(&huart2, "Pass", sizeof("Pass"), 100);
 80006a6:	4906      	ldr	r1, [pc, #24]	; (80006c0 <main+0x80>)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <main+0x7c>)
 80006aa:	2364      	movs	r3, #100	; 0x64
 80006ac:	2205      	movs	r2, #5
 80006ae:	f002 f96d 	bl	800298c <HAL_UART_Transmit>
  {
 80006b2:	e7d2      	b.n	800065a <main+0x1a>
 80006b4:	20000098 	.word	0x20000098
 80006b8:	08003f24 	.word	0x08003f24
 80006bc:	200000e4 	.word	0x200000e4
 80006c0:	08003f2c 	.word	0x08003f2c

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b0a1      	sub	sp, #132	; 0x84
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	2448      	movs	r4, #72	; 0x48
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	0018      	movs	r0, r3
 80006d0:	2338      	movs	r3, #56	; 0x38
 80006d2:	001a      	movs	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f002 ffeb 	bl	80036b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006da:	2338      	movs	r3, #56	; 0x38
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	0018      	movs	r0, r3
 80006e0:	2310      	movs	r3, #16
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f002 ffe3 	bl	80036b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	0018      	movs	r0, r3
 80006ee:	2334      	movs	r3, #52	; 0x34
 80006f0:	001a      	movs	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	f002 ffdc 	bl	80036b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fa27 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2202      	movs	r2, #2
 8000706:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2240      	movs	r2, #64	; 0x40
 800071a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	193b      	adds	r3, r7, r4
 8000724:	0018      	movs	r0, r3
 8000726:	f001 fa5f 	bl	8001be8 <HAL_RCC_OscConfig>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800072e:	f000 f915 	bl	800095c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	2138      	movs	r1, #56	; 0x38
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2207      	movs	r2, #7
 8000738:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2100      	movs	r1, #0
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fd63 	bl	800221c <HAL_RCC_ClockConfig>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075a:	f000 f8ff 	bl	800095c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2222      	movs	r2, #34	; 0x22
 8000762:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fefc 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800077c:	f000 f8ee 	bl	800095c <Error_Handler>
  }
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b021      	add	sp, #132	; 0x84
 8000786:	bd90      	pop	{r4, r7, pc}

08000788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_I2C1_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_I2C1_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_I2C1_Init+0x74>)
 8000794:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <MX_I2C1_Init+0x7c>)
 8000796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_I2C1_Init+0x74>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 fcdd 	bl	8001184 <HAL_I2C_Init>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ce:	f000 f8c5 	bl	800095c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_I2C1_Init+0x74>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 f922 	bl	8001a20 <HAL_I2CEx_ConfigAnalogFilter>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e0:	f000 f8bc 	bl	800095c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_I2C1_Init+0x74>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 f965 	bl	8001ab8 <HAL_I2CEx_ConfigDigitalFilter>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f000 f8b3 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000098 	.word	0x20000098
 8000800:	40005400 	.word	0x40005400
 8000804:	0010061a 	.word	0x0010061a

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_USART2_UART_Init+0x94>)
 800080e:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <MX_USART2_UART_Init+0x98>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000814:	22e1      	movs	r2, #225	; 0xe1
 8000816:	0252      	lsls	r2, r2, #9
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_USART2_UART_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_USART2_UART_Init+0x94>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_USART2_UART_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USART2_UART_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000852:	0018      	movs	r0, r3
 8000854:	f002 f844 	bl	80028e0 <HAL_UART_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800085c:	f000 f87e 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000862:	2100      	movs	r1, #0
 8000864:	0018      	movs	r0, r3
 8000866:	f002 fe19 	bl	800349c <HAL_UARTEx_SetTxFifoThreshold>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800086e:	f000 f875 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000874:	2100      	movs	r1, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f002 fe50 	bl	800351c <HAL_UARTEx_SetRxFifoThreshold>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000880:	f000 f86c 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000886:	0018      	movs	r0, r3
 8000888:	f002 fdce 	bl	8003428 <HAL_UARTEx_DisableFifoMode>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000890:	f000 f864 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	200000e4 	.word	0x200000e4
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b08b      	sub	sp, #44	; 0x2c
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	2414      	movs	r4, #20
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	0018      	movs	r0, r3
 80008b0:	2314      	movs	r3, #20
 80008b2:	001a      	movs	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	f002 fefb 	bl	80036b0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008c0:	2104      	movs	r1, #4
 80008c2:	430a      	orrs	r2, r1
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ca:	2204      	movs	r2, #4
 80008cc:	4013      	ands	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008d8:	2120      	movs	r1, #32
 80008da:	430a      	orrs	r2, r1
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e2:	2220      	movs	r2, #32
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	430a      	orrs	r2, r1
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fa:	2201      	movs	r2, #1
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_GPIO_Init+0xb4>)
 8000904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_GPIO_Init+0xb4>)
 8000908:	2102      	movs	r1, #2
 800090a:	430a      	orrs	r2, r1
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_GPIO_Init+0xb4>)
 8000910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000912:	2202      	movs	r2, #2
 8000914:	4013      	ands	r3, r2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800091a:	23a0      	movs	r3, #160	; 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2200      	movs	r2, #0
 8000920:	2120      	movs	r1, #32
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fc10 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000928:	0021      	movs	r1, r4
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2220      	movs	r2, #32
 800092e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2201      	movs	r2, #1
 8000934:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2202      	movs	r2, #2
 8000940:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000942:	187a      	adds	r2, r7, r1
 8000944:	23a0      	movs	r3, #160	; 0xa0
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fa98 	bl	8000e80 <HAL_GPIO_Init>

}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b00b      	add	sp, #44	; 0x2c
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	40021000 	.word	0x40021000

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_MspInit+0x4c>)
 8000970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	2101      	movs	r1, #1
 8000976:	430a      	orrs	r2, r1
 8000978:	641a      	str	r2, [r3, #64]	; 0x40
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	2201      	movs	r2, #1
 8000980:	4013      	ands	r3, r2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_MspInit+0x4c>)
 8000988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_MspInit+0x4c>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0549      	lsls	r1, r1, #21
 8000990:	430a      	orrs	r2, r1
 8000992:	63da      	str	r2, [r3, #60]	; 0x3c
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <HAL_MspInit+0x4c>)
 8000996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	055b      	lsls	r3, r3, #21
 800099c:	4013      	ands	r3, r2
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009a2:	23c0      	movs	r3, #192	; 0xc0
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f9a0 	bl	8000cec <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b08b      	sub	sp, #44	; 0x2c
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	2414      	movs	r4, #20
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2314      	movs	r3, #20
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f002 fe70 	bl	80036b0 <memset>
  if(hi2c->Instance==I2C1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <HAL_I2C_MspInit+0x8c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d130      	bne.n	8000a3c <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <HAL_I2C_MspInit+0x90>)
 80009dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <HAL_I2C_MspInit+0x90>)
 80009e0:	2102      	movs	r1, #2
 80009e2:	430a      	orrs	r2, r1
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <HAL_I2C_MspInit+0x90>)
 80009e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ea:	2202      	movs	r2, #2
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	22c0      	movs	r2, #192	; 0xc0
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fa:	0021      	movs	r1, r4
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2212      	movs	r2, #18
 8000a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2206      	movs	r2, #6
 8000a12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_I2C_MspInit+0x94>)
 8000a18:	0019      	movs	r1, r3
 8000a1a:	0010      	movs	r0, r2
 8000a1c:	f000 fa30 	bl	8000e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_I2C_MspInit+0x90>)
 8000a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_I2C_MspInit+0x90>)
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	0389      	lsls	r1, r1, #14
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_I2C_MspInit+0x90>)
 8000a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	039b      	lsls	r3, r3, #14
 8000a36:	4013      	ands	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b00b      	add	sp, #44	; 0x2c
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	40005400 	.word	0x40005400
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	50000400 	.word	0x50000400

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b08b      	sub	sp, #44	; 0x2c
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	2414      	movs	r4, #20
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	2314      	movs	r3, #20
 8000a60:	001a      	movs	r2, r3
 8000a62:	2100      	movs	r1, #0
 8000a64:	f002 fe24 	bl	80036b0 <memset>
  if(huart->Instance==USART2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <HAL_UART_MspInit+0x8c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d130      	bne.n	8000ad4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0x90>)
 8000a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <HAL_UART_MspInit+0x90>)
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	0289      	lsls	r1, r1, #10
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0x90>)
 8000a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	029b      	lsls	r3, r3, #10
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0x90>)
 8000a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <HAL_UART_MspInit+0x90>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	430a      	orrs	r2, r1
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0x90>)
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000aa6:	0021      	movs	r1, r4
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	187a      	adds	r2, r7, r1
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	0011      	movs	r1, r2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 f9d6 	bl	8000e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b00b      	add	sp, #44	; 0x2c
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 f8d4 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	18d3      	adds	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f002 fd8a 	bl	800365c <__errno>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	425b      	negs	r3, r3
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	18d2      	adds	r2, r2, r3
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <_sbrk+0x64>)
 8000b64:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b006      	add	sp, #24
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20009000 	.word	0x20009000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	2000008c 	.word	0x2000008c
 8000b7c:	20000188 	.word	0x20000188

08000b80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b90:	f7ff fff6 	bl	8000b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bba:	f002 fd55 	bl	8003668 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bbe:	f7ff fd3f 	bl	8000640 <main>

08000bc2 <LoopForever>:

LoopForever:
  b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   r0, =_estack
 8000bc4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bd0:	08004000 	.word	0x08004000
  ldr r2, =_sbss
 8000bd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd8:	20000188 	.word	0x20000188

08000bdc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_COMP_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_Init+0x3c>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_Init+0x3c>)
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	0049      	lsls	r1, r1, #1
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f810 	bl	8000c20 <HAL_InitTick>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e001      	b.n	8000c10 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff feac 	bl	8000968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40022000 	.word	0x40022000

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HAL_InitTick+0x88>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d02b      	beq.n	8000c90 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <HAL_InitTick+0x8c>)
 8000c3a:	681c      	ldr	r4, [r3, #0]
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_InitTick+0x88>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	0019      	movs	r1, r3
 8000c42:	23fa      	movs	r3, #250	; 0xfa
 8000c44:	0098      	lsls	r0, r3, #2
 8000c46:	f7ff fa6f 	bl	8000128 <__udivsi3>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	0020      	movs	r0, r4
 8000c50:	f7ff fa6a 	bl	8000128 <__udivsi3>
 8000c54:	0003      	movs	r3, r0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 f905 	bl	8000e66 <HAL_SYSTICK_Config>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d112      	bne.n	8000c86 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d80a      	bhi.n	8000c7c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 f8e4 	bl	8000e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_InitTick+0x90>)
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e00d      	b.n	8000c98 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e008      	b.n	8000c98 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c86:	230f      	movs	r3, #15
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	e003      	b.n	8000c98 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c90:	230f      	movs	r3, #15
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c98:	230f      	movs	r3, #15
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b005      	add	sp, #20
 8000ca4:	bd90      	pop	{r4, r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x1c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	18d2      	adds	r2, r2, r3
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000174 	.word	0x20000174

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <HAL_GetTick+0x10>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	20000174 	.word	0x20000174

08000cec <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40010000 	.word	0x40010000
 8000d14:	fffff9ff 	.word	0xfffff9ff

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d2c:	d828      	bhi.n	8000d80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2e:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <__NVIC_SetPriority+0xd4>)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	33c0      	adds	r3, #192	; 0xc0
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	589b      	ldr	r3, [r3, r2]
 8000d3e:	1dfa      	adds	r2, r7, #7
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	0011      	movs	r1, r2
 8000d44:	2203      	movs	r2, #3
 8000d46:	400a      	ands	r2, r1
 8000d48:	00d2      	lsls	r2, r2, #3
 8000d4a:	21ff      	movs	r1, #255	; 0xff
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	000a      	movs	r2, r1
 8000d50:	43d2      	mvns	r2, r2
 8000d52:	401a      	ands	r2, r3
 8000d54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	019b      	lsls	r3, r3, #6
 8000d5a:	22ff      	movs	r2, #255	; 0xff
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	0018      	movs	r0, r3
 8000d64:	2303      	movs	r3, #3
 8000d66:	4003      	ands	r3, r0
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6c:	481f      	ldr	r0, [pc, #124]	; (8000dec <__NVIC_SetPriority+0xd4>)
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	430a      	orrs	r2, r1
 8000d78:	33c0      	adds	r3, #192	; 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d7e:	e031      	b.n	8000de4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <__NVIC_SetPriority+0xd8>)
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	0019      	movs	r1, r3
 8000d88:	230f      	movs	r3, #15
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	3b08      	subs	r3, #8
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3306      	adds	r3, #6
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	18d3      	adds	r3, r2, r3
 8000d96:	3304      	adds	r3, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	1dfa      	adds	r2, r7, #7
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	0011      	movs	r1, r2
 8000da0:	2203      	movs	r2, #3
 8000da2:	400a      	ands	r2, r1
 8000da4:	00d2      	lsls	r2, r2, #3
 8000da6:	21ff      	movs	r1, #255	; 0xff
 8000da8:	4091      	lsls	r1, r2
 8000daa:	000a      	movs	r2, r1
 8000dac:	43d2      	mvns	r2, r2
 8000dae:	401a      	ands	r2, r3
 8000db0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	019b      	lsls	r3, r3, #6
 8000db6:	22ff      	movs	r2, #255	; 0xff
 8000db8:	401a      	ands	r2, r3
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	4003      	ands	r3, r0
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <__NVIC_SetPriority+0xd8>)
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	001c      	movs	r4, r3
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	4023      	ands	r3, r4
 8000dd4:	3b08      	subs	r3, #8
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	3306      	adds	r3, #6
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	18c3      	adds	r3, r0, r3
 8000de0:	3304      	adds	r3, #4
 8000de2:	601a      	str	r2, [r3, #0]
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b003      	add	sp, #12
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	045b      	lsls	r3, r3, #17
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d301      	bcc.n	8000e0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e010      	b.n	8000e2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <SysTick_Config+0x44>)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	3a01      	subs	r2, #1
 8000e12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e14:	2301      	movs	r3, #1
 8000e16:	425b      	negs	r3, r3
 8000e18:	2103      	movs	r1, #3
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff ff7c 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x44>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x44>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	210f      	movs	r1, #15
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	1c02      	adds	r2, r0, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff5d 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ffbf 	bl	8000df4 <SysTick_Config>
 8000e76:	0003      	movs	r3, r0
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8e:	e147      	b.n	8001120 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2101      	movs	r1, #1
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4091      	lsls	r1, r2
 8000e9a:	000a      	movs	r2, r1
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d100      	bne.n	8000ea8 <HAL_GPIO_Init+0x28>
 8000ea6:	e138      	b.n	800111a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2203      	movs	r2, #3
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d005      	beq.n	8000ec0 <HAL_GPIO_Init+0x40>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d130      	bne.n	8000f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	0013      	movs	r3, r2
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2203      	movs	r2, #3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d017      	beq.n	8000f5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2203      	movs	r2, #3
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d123      	bne.n	8000fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	58d3      	ldr	r3, [r2, r3]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	43da      	mvns	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2107      	movs	r1, #7
 8000f96:	400b      	ands	r3, r1
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	6939      	ldr	r1, [r7, #16]
 8000fb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	23c0      	movs	r3, #192	; 0xc0
 8000fec:	029b      	lsls	r3, r3, #10
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d100      	bne.n	8000ff4 <HAL_GPIO_Init+0x174>
 8000ff2:	e092      	b.n	800111a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3318      	adds	r3, #24
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	589b      	ldr	r3, [r3, r2]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2203      	movs	r2, #3
 8001006:	4013      	ands	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	220f      	movs	r2, #15
 800100c:	409a      	lsls	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	23a0      	movs	r3, #160	; 0xa0
 800101c:	05db      	lsls	r3, r3, #23
 800101e:	429a      	cmp	r2, r3
 8001020:	d013      	beq.n	800104a <HAL_GPIO_Init+0x1ca>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a45      	ldr	r2, [pc, #276]	; (800113c <HAL_GPIO_Init+0x2bc>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d00d      	beq.n	8001046 <HAL_GPIO_Init+0x1c6>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a44      	ldr	r2, [pc, #272]	; (8001140 <HAL_GPIO_Init+0x2c0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d007      	beq.n	8001042 <HAL_GPIO_Init+0x1c2>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a43      	ldr	r2, [pc, #268]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_GPIO_Init+0x1be>
 800103a:	2303      	movs	r3, #3
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x1cc>
 800103e:	2305      	movs	r3, #5
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x1cc>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x1cc>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x1cc>
 800104a:	2300      	movs	r3, #0
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	2103      	movs	r1, #3
 8001050:	400a      	ands	r2, r1
 8001052:	00d2      	lsls	r2, r2, #3
 8001054:	4093      	lsls	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800105c:	4936      	ldr	r1, [pc, #216]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3318      	adds	r3, #24
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	035b      	lsls	r3, r3, #13
 8001082:	4013      	ands	r3, r2
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800108e:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	43da      	mvns	r2, r3
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	039b      	lsls	r3, r3, #14
 80010ac:	4013      	ands	r3, r2
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010be:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 80010c0:	2384      	movs	r3, #132	; 0x84
 80010c2:	58d3      	ldr	r3, [r2, r3]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43da      	mvns	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	029b      	lsls	r3, r3, #10
 80010d8:	4013      	ands	r3, r2
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e4:	4914      	ldr	r1, [pc, #80]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 80010e6:	2284      	movs	r2, #132	; 0x84
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	58d3      	ldr	r3, [r2, r3]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	025b      	lsls	r3, r3, #9
 8001106:	4013      	ands	r3, r2
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001112:	4909      	ldr	r1, [pc, #36]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	40da      	lsrs	r2, r3
 8001128:	1e13      	subs	r3, r2, #0
 800112a:	d000      	beq.n	800112e <HAL_GPIO_Init+0x2ae>
 800112c:	e6b0      	b.n	8000e90 <HAL_GPIO_Init+0x10>
  }
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b006      	add	sp, #24
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021800 	.word	0x40021800
 800113c:	50000400 	.word	0x50000400
 8001140:	50000800 	.word	0x50000800
 8001144:	50000c00 	.word	0x50000c00

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	0008      	movs	r0, r1
 8001152:	0011      	movs	r1, r2
 8001154:	1cbb      	adds	r3, r7, #2
 8001156:	1c02      	adds	r2, r0, #0
 8001158:	801a      	strh	r2, [r3, #0]
 800115a:	1c7b      	adds	r3, r7, #1
 800115c:	1c0a      	adds	r2, r1, #0
 800115e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001160:	1c7b      	adds	r3, r7, #1
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001168:	1cbb      	adds	r3, r7, #2
 800116a:	881a      	ldrh	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001170:	e003      	b.n	800117a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001172:	1cbb      	adds	r3, r7, #2
 8001174:	881a      	ldrh	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e082      	b.n	800129c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2241      	movs	r2, #65	; 0x41
 800119a:	5c9b      	ldrb	r3, [r3, r2]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d107      	bne.n	80011b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2240      	movs	r2, #64	; 0x40
 80011a6:	2100      	movs	r1, #0
 80011a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff fc03 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2241      	movs	r2, #65	; 0x41
 80011b6:	2124      	movs	r1, #36	; 0x24
 80011b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	438a      	bics	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4934      	ldr	r1, [pc, #208]	; (80012a4 <HAL_I2C_Init+0x120>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4931      	ldr	r1, [pc, #196]	; (80012a8 <HAL_I2C_Init+0x124>)
 80011e4:	400a      	ands	r2, r1
 80011e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0209      	lsls	r1, r1, #8
 80011fc:	430a      	orrs	r2, r1
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	e007      	b.n	8001212 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2184      	movs	r1, #132	; 0x84
 800120c:	0209      	lsls	r1, r1, #8
 800120e:	430a      	orrs	r2, r1
 8001210:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d104      	bne.n	8001224 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	491f      	ldr	r1, [pc, #124]	; (80012ac <HAL_I2C_Init+0x128>)
 8001230:	430a      	orrs	r2, r1
 8001232:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	491a      	ldr	r1, [pc, #104]	; (80012a8 <HAL_I2C_Init+0x124>)
 8001240:	400a      	ands	r2, r1
 8001242:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	431a      	orrs	r2, r3
 800124e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69d9      	ldr	r1, [r3, #28]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1a      	ldr	r2, [r3, #32]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2241      	movs	r2, #65	; 0x41
 8001288:	2120      	movs	r1, #32
 800128a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2242      	movs	r2, #66	; 0x42
 8001296:	2100      	movs	r1, #0
 8001298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	f0ffffff 	.word	0xf0ffffff
 80012a8:	ffff7fff 	.word	0xffff7fff
 80012ac:	02008000 	.word	0x02008000

080012b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	000c      	movs	r4, r1
 80012ba:	0010      	movs	r0, r2
 80012bc:	0019      	movs	r1, r3
 80012be:	230a      	movs	r3, #10
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	1c22      	adds	r2, r4, #0
 80012c4:	801a      	strh	r2, [r3, #0]
 80012c6:	2308      	movs	r3, #8
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	1c02      	adds	r2, r0, #0
 80012cc:	801a      	strh	r2, [r3, #0]
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	1c0a      	adds	r2, r1, #0
 80012d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2241      	movs	r2, #65	; 0x41
 80012d8:	5c9b      	ldrb	r3, [r3, r2]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b20      	cmp	r3, #32
 80012de:	d000      	beq.n	80012e2 <HAL_I2C_Mem_Read+0x32>
 80012e0:	e110      	b.n	8001504 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80012e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <HAL_I2C_Mem_Read+0x42>
 80012e8:	232c      	movs	r3, #44	; 0x2c
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e103      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2240      	movs	r2, #64	; 0x40
 8001302:	5c9b      	ldrb	r3, [r3, r2]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_I2C_Mem_Read+0x5c>
 8001308:	2302      	movs	r3, #2
 800130a:	e0fc      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	2101      	movs	r1, #1
 8001312:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001314:	f7ff fce0 	bl	8000cd8 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	0219      	lsls	r1, r3, #8
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2319      	movs	r3, #25
 8001328:	2201      	movs	r2, #1
 800132a:	f000 f979 	bl	8001620 <I2C_WaitOnFlagUntilTimeout>
 800132e:	1e03      	subs	r3, r0, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0e7      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2241      	movs	r2, #65	; 0x41
 800133a:	2122      	movs	r1, #34	; 0x22
 800133c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2242      	movs	r2, #66	; 0x42
 8001342:	2140      	movs	r1, #64	; 0x40
 8001344:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	222c      	movs	r2, #44	; 0x2c
 8001356:	18ba      	adds	r2, r7, r2
 8001358:	8812      	ldrh	r2, [r2, #0]
 800135a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001362:	1dbb      	adds	r3, r7, #6
 8001364:	881c      	ldrh	r4, [r3, #0]
 8001366:	2308      	movs	r3, #8
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	881a      	ldrh	r2, [r3, #0]
 800136c:	230a      	movs	r3, #10
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	8819      	ldrh	r1, [r3, #0]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	0023      	movs	r3, r4
 800137e:	f000 f8cb 	bl	8001518 <I2C_RequestMemoryRead>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d005      	beq.n	8001392 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2240      	movs	r2, #64	; 0x40
 800138a:	2100      	movs	r1, #0
 800138c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0b9      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001396:	b29b      	uxth	r3, r3
 8001398:	2bff      	cmp	r3, #255	; 0xff
 800139a:	d911      	bls.n	80013c0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	045c      	lsls	r4, r3, #17
 80013ac:	230a      	movs	r3, #10
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	8819      	ldrh	r1, [r3, #0]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	4b56      	ldr	r3, [pc, #344]	; (8001510 <HAL_I2C_Mem_Read+0x260>)
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	0023      	movs	r3, r4
 80013ba:	f000 faf7 	bl	80019ac <I2C_TransferConfig>
 80013be:	e012      	b.n	80013e6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	049c      	lsls	r4, r3, #18
 80013d4:	230a      	movs	r3, #10
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	8819      	ldrh	r1, [r3, #0]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <HAL_I2C_Mem_Read+0x260>)
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	0023      	movs	r3, r4
 80013e2:	f000 fae3 	bl	80019ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80013e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	0013      	movs	r3, r2
 80013f0:	2200      	movs	r2, #0
 80013f2:	2104      	movs	r1, #4
 80013f4:	f000 f914 	bl	8001620 <I2C_WaitOnFlagUntilTimeout>
 80013f8:	1e03      	subs	r3, r0, #0
 80013fa:	d001      	beq.n	8001400 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e082      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141c:	3b01      	subs	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001428:	b29b      	uxth	r3, r3
 800142a:	3b01      	subs	r3, #1
 800142c:	b29a      	uxth	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001436:	b29b      	uxth	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d03a      	beq.n	80014b2 <HAL_I2C_Mem_Read+0x202>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001440:	2b00      	cmp	r3, #0
 8001442:	d136      	bne.n	80014b2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	0013      	movs	r3, r2
 800144e:	2200      	movs	r2, #0
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	f000 f8e5 	bl	8001620 <I2C_WaitOnFlagUntilTimeout>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e053      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001462:	b29b      	uxth	r3, r3
 8001464:	2bff      	cmp	r3, #255	; 0xff
 8001466:	d911      	bls.n	800148c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	22ff      	movs	r2, #255	; 0xff
 800146c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001472:	b2da      	uxtb	r2, r3
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	045c      	lsls	r4, r3, #17
 8001478:	230a      	movs	r3, #10
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	8819      	ldrh	r1, [r3, #0]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	2300      	movs	r3, #0
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	0023      	movs	r3, r4
 8001486:	f000 fa91 	bl	80019ac <I2C_TransferConfig>
 800148a:	e012      	b.n	80014b2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001490:	b29a      	uxth	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149a:	b2da      	uxtb	r2, r3
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	049c      	lsls	r4, r3, #18
 80014a0:	230a      	movs	r3, #10
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	8819      	ldrh	r1, [r3, #0]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	2300      	movs	r3, #0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	0023      	movs	r3, r4
 80014ae:	f000 fa7d 	bl	80019ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d194      	bne.n	80013e6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 f92a 	bl	800171c <I2C_WaitOnSTOPFlagUntilTimeout>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e01a      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2220      	movs	r2, #32
 80014d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	490c      	ldr	r1, [pc, #48]	; (8001514 <HAL_I2C_Mem_Read+0x264>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2241      	movs	r2, #65	; 0x41
 80014ec:	2120      	movs	r1, #32
 80014ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2242      	movs	r2, #66	; 0x42
 80014f4:	2100      	movs	r1, #0
 80014f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	2100      	movs	r1, #0
 80014fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	e000      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001504:	2302      	movs	r3, #2
  }
}
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	b007      	add	sp, #28
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	80002400 	.word	0x80002400
 8001514:	fe00e800 	.word	0xfe00e800

08001518 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af02      	add	r7, sp, #8
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	000c      	movs	r4, r1
 8001522:	0010      	movs	r0, r2
 8001524:	0019      	movs	r1, r3
 8001526:	250a      	movs	r5, #10
 8001528:	197b      	adds	r3, r7, r5
 800152a:	1c22      	adds	r2, r4, #0
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	2308      	movs	r3, #8
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	1c02      	adds	r2, r0, #0
 8001534:	801a      	strh	r2, [r3, #0]
 8001536:	1dbb      	adds	r3, r7, #6
 8001538:	1c0a      	adds	r2, r1, #0
 800153a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	197b      	adds	r3, r7, r5
 8001544:	8819      	ldrh	r1, [r3, #0]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <I2C_RequestMemoryRead+0xc0>)
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2300      	movs	r3, #0
 800154e:	f000 fa2d 	bl	80019ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001554:	6a39      	ldr	r1, [r7, #32]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 f8a0 	bl	800169e <I2C_WaitOnTXISFlagUntilTimeout>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d001      	beq.n	8001566 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e033      	b.n	80015ce <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001566:	1dbb      	adds	r3, r7, #6
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800156e:	2308      	movs	r3, #8
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
 800157c:	e019      	b.n	80015b2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800157e:	2308      	movs	r3, #8
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	b29b      	uxth	r3, r3
 8001588:	b2da      	uxtb	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001592:	6a39      	ldr	r1, [r7, #32]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	0018      	movs	r0, r3
 8001598:	f000 f881 	bl	800169e <I2C_WaitOnTXISFlagUntilTimeout>
 800159c:	1e03      	subs	r3, r0, #0
 800159e:	d001      	beq.n	80015a4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e014      	b.n	80015ce <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015a4:	2308      	movs	r3, #8
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80015b2:	6a3a      	ldr	r2, [r7, #32]
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	0013      	movs	r3, r2
 80015bc:	2200      	movs	r2, #0
 80015be:	2140      	movs	r1, #64	; 0x40
 80015c0:	f000 f82e 	bl	8001620 <I2C_WaitOnFlagUntilTimeout>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bdb0      	pop	{r4, r5, r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	80002000 	.word	0x80002000

080015dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d103      	bne.n	80015fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2201      	movs	r2, #1
 8001602:	4013      	ands	r3, r2
 8001604:	2b01      	cmp	r3, #1
 8001606:	d007      	beq.n	8001618 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2101      	movs	r1, #1
 8001614:	430a      	orrs	r2, r1
 8001616:	619a      	str	r2, [r3, #24]
  }
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	1dfb      	adds	r3, r7, #7
 800162e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001630:	e021      	b.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	d01e      	beq.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001638:	f7ff fb4e 	bl	8000cd8 <HAL_GetTick>
 800163c:	0002      	movs	r2, r0
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d302      	bcc.n	800164e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d113      	bne.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	2220      	movs	r2, #32
 8001654:	431a      	orrs	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2241      	movs	r2, #65	; 0x41
 800165e:	2120      	movs	r1, #32
 8001660:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2242      	movs	r2, #66	; 0x42
 8001666:	2100      	movs	r1, #0
 8001668:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2240      	movs	r2, #64	; 0x40
 800166e:	2100      	movs	r1, #0
 8001670:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	4013      	ands	r3, r2
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	425a      	negs	r2, r3
 8001686:	4153      	adcs	r3, r2
 8001688:	b2db      	uxtb	r3, r3
 800168a:	001a      	movs	r2, r3
 800168c:	1dfb      	adds	r3, r7, #7
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d0ce      	beq.n	8001632 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b004      	add	sp, #16
 800169c:	bd80      	pop	{r7, pc}

0800169e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016aa:	e02b      	b.n	8001704 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	68b9      	ldr	r1, [r7, #8]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	0018      	movs	r0, r3
 80016b4:	f000 f86e 	bl	8001794 <I2C_IsErrorOccurred>
 80016b8:	1e03      	subs	r3, r0, #0
 80016ba:	d001      	beq.n	80016c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e029      	b.n	8001714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	3301      	adds	r3, #1
 80016c4:	d01e      	beq.n	8001704 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c6:	f7ff fb07 	bl	8000cd8 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d302      	bcc.n	80016dc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d113      	bne.n	8001704 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	2220      	movs	r2, #32
 80016e2:	431a      	orrs	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2241      	movs	r2, #65	; 0x41
 80016ec:	2120      	movs	r1, #32
 80016ee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2242      	movs	r2, #66	; 0x42
 80016f4:	2100      	movs	r1, #0
 80016f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2240      	movs	r2, #64	; 0x40
 80016fc:	2100      	movs	r1, #0
 80016fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e007      	b.n	8001714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	2b02      	cmp	r3, #2
 8001710:	d1cc      	bne.n	80016ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}

0800171c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001728:	e028      	b.n	800177c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	0018      	movs	r0, r3
 8001732:	f000 f82f 	bl	8001794 <I2C_IsErrorOccurred>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d001      	beq.n	800173e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e026      	b.n	800178c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800173e:	f7ff facb 	bl	8000cd8 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	429a      	cmp	r2, r3
 800174c:	d302      	bcc.n	8001754 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d113      	bne.n	800177c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001758:	2220      	movs	r2, #32
 800175a:	431a      	orrs	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2241      	movs	r2, #65	; 0x41
 8001764:	2120      	movs	r1, #32
 8001766:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2242      	movs	r2, #66	; 0x42
 800176c:	2100      	movs	r1, #0
 800176e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2240      	movs	r2, #64	; 0x40
 8001774:	2100      	movs	r1, #0
 8001776:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e007      	b.n	800178c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2220      	movs	r2, #32
 8001784:	4013      	ands	r3, r2
 8001786:	2b20      	cmp	r3, #32
 8001788:	d1cf      	bne.n	800172a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b004      	add	sp, #16
 8001792:	bd80      	pop	{r7, pc}

08001794 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b08b      	sub	sp, #44	; 0x2c
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a0:	2327      	movs	r3, #39	; 0x27
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2210      	movs	r2, #16
 80017bc:	4013      	ands	r3, r2
 80017be:	d100      	bne.n	80017c2 <I2C_IsErrorOccurred+0x2e>
 80017c0:	e08e      	b.n	80018e0 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2210      	movs	r2, #16
 80017c8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017ca:	e06c      	b.n	80018a6 <I2C_IsErrorOccurred+0x112>
 80017cc:	2427      	movs	r4, #39	; 0x27
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	193a      	adds	r2, r7, r4
 80017d2:	7812      	ldrb	r2, [r2, #0]
 80017d4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3301      	adds	r3, #1
 80017da:	d064      	beq.n	80018a6 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017dc:	f7ff fa7c 	bl	8000cd8 <HAL_GetTick>
 80017e0:	0002      	movs	r2, r0
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d306      	bcc.n	80017fa <I2C_IsErrorOccurred+0x66>
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	193a      	adds	r2, r7, r4
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d155      	bne.n	80018a6 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	01db      	lsls	r3, r3, #7
 8001804:	4013      	ands	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001808:	2013      	movs	r0, #19
 800180a:	183b      	adds	r3, r7, r0
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	2142      	movs	r1, #66	; 0x42
 8001810:	5c52      	ldrb	r2, [r2, r1]
 8001812:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699a      	ldr	r2, [r3, #24]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	401a      	ands	r2, r3
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	429a      	cmp	r2, r3
 8001826:	d137      	bne.n	8001898 <I2C_IsErrorOccurred+0x104>
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	01db      	lsls	r3, r3, #7
 800182e:	429a      	cmp	r2, r3
 8001830:	d032      	beq.n	8001898 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8001832:	183b      	adds	r3, r7, r0
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b20      	cmp	r3, #32
 8001838:	d02e      	beq.n	8001898 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	01c9      	lsls	r1, r1, #7
 8001848:	430a      	orrs	r2, r1
 800184a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800184c:	f7ff fa44 	bl	8000cd8 <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001854:	e020      	b.n	8001898 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001856:	f7ff fa3f 	bl	8000cd8 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2027      	movs	r0, #39	; 0x27
 8001862:	183a      	adds	r2, r7, r0
 8001864:	1839      	adds	r1, r7, r0
 8001866:	7809      	ldrb	r1, [r1, #0]
 8001868:	7011      	strb	r1, [r2, #0]
 800186a:	2b19      	cmp	r3, #25
 800186c:	d914      	bls.n	8001898 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	2220      	movs	r2, #32
 8001874:	431a      	orrs	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2241      	movs	r2, #65	; 0x41
 800187e:	2120      	movs	r1, #32
 8001880:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2242      	movs	r2, #66	; 0x42
 8001886:	2100      	movs	r1, #0
 8001888:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2240      	movs	r2, #64	; 0x40
 800188e:	2100      	movs	r1, #0
 8001890:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8001892:	183b      	adds	r3, r7, r0
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2220      	movs	r2, #32
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b20      	cmp	r3, #32
 80018a4:	d1d7      	bne.n	8001856 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2220      	movs	r2, #32
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b20      	cmp	r3, #32
 80018b2:	d004      	beq.n	80018be <I2C_IsErrorOccurred+0x12a>
 80018b4:	2327      	movs	r3, #39	; 0x27
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d086      	beq.n	80017cc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80018be:	2327      	movs	r3, #39	; 0x27
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d103      	bne.n	80018d0 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2220      	movs	r2, #32
 80018ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	2204      	movs	r2, #4
 80018d4:	4313      	orrs	r3, r2
 80018d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018d8:	2327      	movs	r3, #39	; 0x27
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	d00c      	beq.n	800190c <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4313      	orrs	r3, r2
 80018f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	0052      	lsls	r2, r2, #1
 8001902:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001904:	2327      	movs	r3, #39	; 0x27
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4013      	ands	r3, r2
 8001914:	d00c      	beq.n	8001930 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	2208      	movs	r2, #8
 800191a:	4313      	orrs	r3, r2
 800191c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	00d2      	lsls	r2, r2, #3
 8001926:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001928:	2327      	movs	r3, #39	; 0x27
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4013      	ands	r3, r2
 8001938:	d00c      	beq.n	8001954 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	2202      	movs	r2, #2
 800193e:	4313      	orrs	r3, r2
 8001940:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800194c:	2327      	movs	r3, #39	; 0x27
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001954:	2327      	movs	r3, #39	; 0x27
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d01d      	beq.n	800199a <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff fe3b 	bl	80015dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	490d      	ldr	r1, [pc, #52]	; (80019a8 <I2C_IsErrorOccurred+0x214>)
 8001972:	400a      	ands	r2, r1
 8001974:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	431a      	orrs	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2241      	movs	r2, #65	; 0x41
 8001986:	2120      	movs	r1, #32
 8001988:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2242      	movs	r2, #66	; 0x42
 800198e:	2100      	movs	r1, #0
 8001990:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2240      	movs	r2, #64	; 0x40
 8001996:	2100      	movs	r1, #0
 8001998:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800199a:	2327      	movs	r3, #39	; 0x27
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	781b      	ldrb	r3, [r3, #0]
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b00b      	add	sp, #44	; 0x2c
 80019a6:	bd90      	pop	{r4, r7, pc}
 80019a8:	fe00e800 	.word	0xfe00e800

080019ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	0008      	movs	r0, r1
 80019b6:	0011      	movs	r1, r2
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	240a      	movs	r4, #10
 80019bc:	193b      	adds	r3, r7, r4
 80019be:	1c02      	adds	r2, r0, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	2009      	movs	r0, #9
 80019c4:	183b      	adds	r3, r7, r0
 80019c6:	1c0a      	adds	r2, r1, #0
 80019c8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019ca:	193b      	adds	r3, r7, r4
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	059b      	lsls	r3, r3, #22
 80019d0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019d2:	183b      	adds	r3, r7, r0
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	0419      	lsls	r1, r3, #16
 80019d8:	23ff      	movs	r3, #255	; 0xff
 80019da:	041b      	lsls	r3, r3, #16
 80019dc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019de:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e6:	4313      	orrs	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	085b      	lsrs	r3, r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019f6:	0d51      	lsrs	r1, r2, #21
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	00d2      	lsls	r2, r2, #3
 80019fc:	400a      	ands	r2, r1
 80019fe:	4907      	ldr	r1, [pc, #28]	; (8001a1c <I2C_TransferConfig+0x70>)
 8001a00:	430a      	orrs	r2, r1
 8001a02:	43d2      	mvns	r2, r2
 8001a04:	401a      	ands	r2, r3
 8001a06:	0011      	movs	r1, r2
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b007      	add	sp, #28
 8001a18:	bd90      	pop	{r4, r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	03ff63ff 	.word	0x03ff63ff

08001a20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2241      	movs	r2, #65	; 0x41
 8001a2e:	5c9b      	ldrb	r3, [r3, r2]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d138      	bne.n	8001aa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2240      	movs	r2, #64	; 0x40
 8001a3a:	5c9b      	ldrb	r3, [r3, r2]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e032      	b.n	8001aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2240      	movs	r2, #64	; 0x40
 8001a48:	2101      	movs	r1, #1
 8001a4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2241      	movs	r2, #65	; 0x41
 8001a50:	2124      	movs	r1, #36	; 0x24
 8001a52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	438a      	bics	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4911      	ldr	r1, [pc, #68]	; (8001ab4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2101      	movs	r1, #1
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2241      	movs	r2, #65	; 0x41
 8001a98:	2120      	movs	r1, #32
 8001a9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2240      	movs	r2, #64	; 0x40
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001aa8:	2302      	movs	r3, #2
  }
}
 8001aaa:	0018      	movs	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	ffffefff 	.word	0xffffefff

08001ab8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2241      	movs	r2, #65	; 0x41
 8001ac6:	5c9b      	ldrb	r3, [r3, r2]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d139      	bne.n	8001b42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2240      	movs	r2, #64	; 0x40
 8001ad2:	5c9b      	ldrb	r3, [r3, r2]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e033      	b.n	8001b44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2240      	movs	r2, #64	; 0x40
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2241      	movs	r2, #65	; 0x41
 8001ae8:	2124      	movs	r1, #36	; 0x24
 8001aea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2101      	movs	r1, #1
 8001af8:	438a      	bics	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2241      	movs	r2, #65	; 0x41
 8001b32:	2120      	movs	r1, #32
 8001b34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b42:	2302      	movs	r3, #2
  }
}
 8001b44:	0018      	movs	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	fffff0ff 	.word	0xfffff0ff

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d11f      	bne.n	8001bb4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	0013      	movs	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	189b      	adds	r3, r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4912      	ldr	r1, [pc, #72]	; (8001bcc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7fe fad0 	bl	8000128 <__udivsi3>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b8e:	e008      	b.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e001      	b.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e009      	b.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	401a      	ands	r2, r3
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d0ed      	beq.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b004      	add	sp, #16
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	fffff9ff 	.word	0xfffff9ff
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	000f4240 	.word	0x000f4240

08001bd0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	23e0      	movs	r3, #224	; 0xe0
 8001bda:	01db      	lsls	r3, r3, #7
 8001bdc:	4013      	ands	r3, r2
}
 8001bde:	0018      	movs	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e2fe      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4013      	ands	r3, r2
 8001c02:	d100      	bne.n	8001c06 <HAL_RCC_OscConfig+0x1e>
 8001c04:	e07c      	b.n	8001d00 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	4bc3      	ldr	r3, [pc, #780]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2238      	movs	r2, #56	; 0x38
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	4bc0      	ldr	r3, [pc, #768]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2203      	movs	r2, #3
 8001c16:	4013      	ands	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b10      	cmp	r3, #16
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3e>
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d10b      	bne.n	8001c44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	4bb9      	ldr	r3, [pc, #740]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	029b      	lsls	r3, r3, #10
 8001c34:	4013      	ands	r3, r2
 8001c36:	d062      	beq.n	8001cfe <HAL_RCC_OscConfig+0x116>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d15e      	bne.n	8001cfe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e2d9      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	025b      	lsls	r3, r3, #9
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_OscConfig+0x78>
 8001c50:	4bb0      	ldr	r3, [pc, #704]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4baf      	ldr	r3, [pc, #700]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c56:	2180      	movs	r1, #128	; 0x80
 8001c58:	0249      	lsls	r1, r1, #9
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e020      	b.n	8001ca2 <HAL_RCC_OscConfig+0xba>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	23a0      	movs	r3, #160	; 0xa0
 8001c66:	02db      	lsls	r3, r3, #11
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d10e      	bne.n	8001c8a <HAL_RCC_OscConfig+0xa2>
 8001c6c:	4ba9      	ldr	r3, [pc, #676]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4ba8      	ldr	r3, [pc, #672]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	02c9      	lsls	r1, r1, #11
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	4ba6      	ldr	r3, [pc, #664]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4ba5      	ldr	r3, [pc, #660]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	0249      	lsls	r1, r1, #9
 8001c84:	430a      	orrs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e00b      	b.n	8001ca2 <HAL_RCC_OscConfig+0xba>
 8001c8a:	4ba2      	ldr	r3, [pc, #648]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4ba1      	ldr	r3, [pc, #644]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c90:	49a1      	ldr	r1, [pc, #644]	; (8001f18 <HAL_RCC_OscConfig+0x330>)
 8001c92:	400a      	ands	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	4b9f      	ldr	r3, [pc, #636]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b9e      	ldr	r3, [pc, #632]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001c9c:	499f      	ldr	r1, [pc, #636]	; (8001f1c <HAL_RCC_OscConfig+0x334>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d014      	beq.n	8001cd4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff f815 	bl	8000cd8 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f810 	bl	8000cd8 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e298      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc6:	4b93      	ldr	r3, [pc, #588]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	029b      	lsls	r3, r3, #10
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xcc>
 8001cd2:	e015      	b.n	8001d00 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f800 	bl	8000cd8 <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cde:	f7fe fffb 	bl	8000cd8 <HAL_GetTick>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e283      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cf0:	4b88      	ldr	r3, [pc, #544]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0xf6>
 8001cfc:	e000      	b.n	8001d00 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2202      	movs	r2, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	d100      	bne.n	8001d0c <HAL_RCC_OscConfig+0x124>
 8001d0a:	e099      	b.n	8001e40 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0c:	4b81      	ldr	r3, [pc, #516]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2238      	movs	r2, #56	; 0x38
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d16:	4b7f      	ldr	r3, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d102      	bne.n	8001d2c <HAL_RCC_OscConfig+0x144>
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d002      	beq.n	8001d32 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d135      	bne.n	8001d9e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d32:	4b78      	ldr	r3, [pc, #480]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x162>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e256      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b72      	ldr	r3, [pc, #456]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a74      	ldr	r2, [pc, #464]	; (8001f20 <HAL_RCC_OscConfig+0x338>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	021a      	lsls	r2, r3, #8
 8001d5a:	4b6e      	ldr	r3, [pc, #440]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d112      	bne.n	8001d8c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d66:	4b6b      	ldr	r3, [pc, #428]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6e      	ldr	r2, [pc, #440]	; (8001f24 <HAL_RCC_OscConfig+0x33c>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001d76:	430a      	orrs	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d7a:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	0adb      	lsrs	r3, r3, #11
 8001d80:	2207      	movs	r2, #7
 8001d82:	4013      	ands	r3, r2
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <HAL_RCC_OscConfig+0x340>)
 8001d86:	40da      	lsrs	r2, r3
 8001d88:	4b68      	ldr	r3, [pc, #416]	; (8001f2c <HAL_RCC_OscConfig+0x344>)
 8001d8a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d8c:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x348>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7fe ff45 	bl	8000c20 <HAL_InitTick>
 8001d96:	1e03      	subs	r3, r0, #0
 8001d98:	d051      	beq.n	8001e3e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e22c      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d030      	beq.n	8001e08 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001da6:	4b5b      	ldr	r3, [pc, #364]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a5e      	ldr	r2, [pc, #376]	; (8001f24 <HAL_RCC_OscConfig+0x33c>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001dba:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b55      	ldr	r3, [pc, #340]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	0049      	lsls	r1, r1, #1
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe ff86 	bl	8000cd8 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7fe ff81 	bl	8000cd8 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e209      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de4:	4b4b      	ldr	r3, [pc, #300]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4013      	ands	r3, r2
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b48      	ldr	r3, [pc, #288]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a4a      	ldr	r2, [pc, #296]	; (8001f20 <HAL_RCC_OscConfig+0x338>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	021a      	lsls	r2, r3, #8
 8001e00:	4b44      	ldr	r3, [pc, #272]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	e01b      	b.n	8001e40 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001e08:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001e0e:	4949      	ldr	r1, [pc, #292]	; (8001f34 <HAL_RCC_OscConfig+0x34c>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe ff60 	bl	8000cd8 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7fe ff5b 	bl	8000cd8 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1e3      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0x236>
 8001e3c:	e000      	b.n	8001e40 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2208      	movs	r2, #8
 8001e46:	4013      	ands	r3, r2
 8001e48:	d047      	beq.n	8001eda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2238      	movs	r2, #56	; 0x38
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b18      	cmp	r3, #24
 8001e54:	d10a      	bne.n	8001e6c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d03c      	beq.n	8001eda <HAL_RCC_OscConfig+0x2f2>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d138      	bne.n	8001eda <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e1c5      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d019      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001e76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe ff2a 	bl	8000cd8 <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7fe ff25 	bl	8000cd8 <HAL_GetTick>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e1ad      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d0f1      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2a2>
 8001ea6:	e018      	b.n	8001eda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	438a      	bics	r2, r1
 8001eb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7fe ff10 	bl	8000cd8 <HAL_GetTick>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ebe:	f7fe ff0b 	bl	8000cd8 <HAL_GetTick>
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e193      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d1f1      	bne.n	8001ebe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d100      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2fe>
 8001ee4:	e0c6      	b.n	8002074 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee6:	231f      	movs	r3, #31
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2238      	movs	r2, #56	; 0x38
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d11e      	bne.n	8001f38 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_RCC_OscConfig+0x32c>)
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	2202      	movs	r2, #2
 8001f00:	4013      	ands	r3, r2
 8001f02:	d100      	bne.n	8001f06 <HAL_RCC_OscConfig+0x31e>
 8001f04:	e0b6      	b.n	8002074 <HAL_RCC_OscConfig+0x48c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d000      	beq.n	8001f10 <HAL_RCC_OscConfig+0x328>
 8001f0e:	e0b1      	b.n	8002074 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e171      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	fffeffff 	.word	0xfffeffff
 8001f1c:	fffbffff 	.word	0xfffbffff
 8001f20:	ffff80ff 	.word	0xffff80ff
 8001f24:	ffffc7ff 	.word	0xffffc7ff
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000004 	.word	0x20000004
 8001f34:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f38:	4bb1      	ldr	r3, [pc, #708]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	055b      	lsls	r3, r3, #21
 8001f40:	4013      	ands	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_OscConfig+0x360>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x362>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d011      	beq.n	8001f72 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	4bac      	ldr	r3, [pc, #688]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f52:	4bab      	ldr	r3, [pc, #684]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	0549      	lsls	r1, r1, #21
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f5c:	4ba8      	ldr	r3, [pc, #672]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	055b      	lsls	r3, r3, #21
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f6a:	231f      	movs	r3, #31
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f72:	4ba4      	ldr	r3, [pc, #656]	; (8002204 <HAL_RCC_OscConfig+0x61c>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d11a      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7e:	4ba1      	ldr	r3, [pc, #644]	; (8002204 <HAL_RCC_OscConfig+0x61c>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4ba0      	ldr	r3, [pc, #640]	; (8002204 <HAL_RCC_OscConfig+0x61c>)
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	0049      	lsls	r1, r1, #1
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe fea4 	bl	8000cd8 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f96:	f7fe fe9f 	bl	8000cd8 <HAL_GetTick>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e127      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa8:	4b96      	ldr	r3, [pc, #600]	; (8002204 <HAL_RCC_OscConfig+0x61c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x3e2>
 8001fbc:	4b90      	ldr	r3, [pc, #576]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001fbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fc0:	4b8f      	ldr	r3, [pc, #572]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fc8:	e01c      	b.n	8002004 <HAL_RCC_OscConfig+0x41c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x404>
 8001fd2:	4b8b      	ldr	r3, [pc, #556]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001fd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fd6:	4b8a      	ldr	r3, [pc, #552]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001fd8:	2104      	movs	r1, #4
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fde:	4b88      	ldr	r3, [pc, #544]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001fe0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fe2:	4b87      	ldr	r3, [pc, #540]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0x41c>
 8001fec:	4b84      	ldr	r3, [pc, #528]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ff0:	4b83      	ldr	r3, [pc, #524]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ff8:	4b81      	ldr	r3, [pc, #516]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001ffa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ffc:	4b80      	ldr	r3, [pc, #512]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8001ffe:	2104      	movs	r1, #4
 8002000:	438a      	bics	r2, r1
 8002002:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d014      	beq.n	8002036 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7fe fe64 	bl	8000cd8 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002014:	e009      	b.n	800202a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe fe5f 	bl	8000cd8 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	4a79      	ldr	r2, [pc, #484]	; (8002208 <HAL_RCC_OscConfig+0x620>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e0e6      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202a:	4b75      	ldr	r3, [pc, #468]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	2202      	movs	r2, #2
 8002030:	4013      	ands	r3, r2
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x42e>
 8002034:	e013      	b.n	800205e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7fe fe4f 	bl	8000cd8 <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800203e:	e009      	b.n	8002054 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7fe fe4a 	bl	8000cd8 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	4a6f      	ldr	r2, [pc, #444]	; (8002208 <HAL_RCC_OscConfig+0x620>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0d1      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2202      	movs	r2, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800205e:	231f      	movs	r3, #31
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002068:	4b65      	ldr	r3, [pc, #404]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 800206a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800206c:	4b64      	ldr	r3, [pc, #400]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 800206e:	4967      	ldr	r1, [pc, #412]	; (800220c <HAL_RCC_OscConfig+0x624>)
 8002070:	400a      	ands	r2, r1
 8002072:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d100      	bne.n	800207e <HAL_RCC_OscConfig+0x496>
 800207c:	e0bb      	b.n	80021f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207e:	4b60      	ldr	r3, [pc, #384]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2238      	movs	r2, #56	; 0x38
 8002084:	4013      	ands	r3, r2
 8002086:	2b10      	cmp	r3, #16
 8002088:	d100      	bne.n	800208c <HAL_RCC_OscConfig+0x4a4>
 800208a:	e07b      	b.n	8002184 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d156      	bne.n	8002142 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002094:	4b5a      	ldr	r3, [pc, #360]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 800209a:	495d      	ldr	r1, [pc, #372]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe fe1a 	bl	8000cd8 <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7fe fe15 	bl	8000cd8 <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e09d      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020bc:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	049b      	lsls	r3, r3, #18
 80020c4:	4013      	ands	r3, r2
 80020c6:	d1f0      	bne.n	80020aa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c8:	4b4d      	ldr	r3, [pc, #308]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4a51      	ldr	r2, [pc, #324]	; (8002214 <HAL_RCC_OscConfig+0x62c>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	431a      	orrs	r2, r3
 80020f6:	4b42      	ldr	r3, [pc, #264]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b40      	ldr	r3, [pc, #256]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	0449      	lsls	r1, r1, #17
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	4b3c      	ldr	r3, [pc, #240]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	0549      	lsls	r1, r1, #21
 8002114:	430a      	orrs	r2, r1
 8002116:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe fdde 	bl	8000cd8 <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fdd9 	bl	8000cd8 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e061      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002134:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	049b      	lsls	r3, r3, #18
 800213c:	4013      	ands	r3, r2
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x53a>
 8002140:	e059      	b.n	80021f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8002148:	4931      	ldr	r1, [pc, #196]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 800214a:	400a      	ands	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7fe fdc3 	bl	8000cd8 <HAL_GetTick>
 8002152:	0003      	movs	r3, r0
 8002154:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe fdbe 	bl	8000cd8 <HAL_GetTick>
 800215c:	0002      	movs	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e046      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	049b      	lsls	r3, r3, #18
 8002172:	4013      	ands	r3, r2
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 800217c:	4926      	ldr	r1, [pc, #152]	; (8002218 <HAL_RCC_OscConfig+0x630>)
 800217e:	400a      	ands	r2, r1
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	e038      	b.n	80021f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e033      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x618>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2203      	movs	r2, #3
 800219a:	401a      	ands	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d126      	bne.n	80021f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2270      	movs	r2, #112	; 0x70
 80021a8:	401a      	ands	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d11f      	bne.n	80021f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	23fe      	movs	r3, #254	; 0xfe
 80021b6:	01db      	lsls	r3, r3, #7
 80021b8:	401a      	ands	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d116      	bne.n	80021f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	23f8      	movs	r3, #248	; 0xf8
 80021c8:	039b      	lsls	r3, r3, #14
 80021ca:	401a      	ands	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d10e      	bne.n	80021f2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	23e0      	movs	r3, #224	; 0xe0
 80021d8:	051b      	lsls	r3, r3, #20
 80021da:	401a      	ands	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	0f5b      	lsrs	r3, r3, #29
 80021e8:	075a      	lsls	r2, r3, #29
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b008      	add	sp, #32
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	40007000 	.word	0x40007000
 8002208:	00001388 	.word	0x00001388
 800220c:	efffffff 	.word	0xefffffff
 8002210:	feffffff 	.word	0xfeffffff
 8002214:	11c1808c 	.word	0x11c1808c
 8002218:	eefefffc 	.word	0xeefefffc

0800221c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0e9      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_ClockConfig+0x1f0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2207      	movs	r2, #7
 8002236:	4013      	ands	r3, r2
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d91e      	bls.n	800227c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b73      	ldr	r3, [pc, #460]	; (800240c <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2207      	movs	r2, #7
 8002244:	4393      	bics	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	4b70      	ldr	r3, [pc, #448]	; (800240c <HAL_RCC_ClockConfig+0x1f0>)
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002250:	f7fe fd42 	bl	8000cd8 <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002258:	e009      	b.n	800226e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225a:	f7fe fd3d 	bl	8000cd8 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	4a6a      	ldr	r2, [pc, #424]	; (8002410 <HAL_RCC_ClockConfig+0x1f4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e0ca      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800226e:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_RCC_ClockConfig+0x1f0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2207      	movs	r2, #7
 8002274:	4013      	ands	r3, r2
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d1ee      	bne.n	800225a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d015      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2204      	movs	r2, #4
 800228c:	4013      	ands	r3, r2
 800228e:	d006      	beq.n	800229e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002290:	4b60      	ldr	r3, [pc, #384]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b5f      	ldr	r3, [pc, #380]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 8002296:	21e0      	movs	r1, #224	; 0xe0
 8002298:	01c9      	lsls	r1, r1, #7
 800229a:	430a      	orrs	r2, r1
 800229c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229e:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4a5d      	ldr	r2, [pc, #372]	; (8002418 <HAL_RCC_ClockConfig+0x1fc>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	0019      	movs	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2201      	movs	r2, #1
 80022b8:	4013      	ands	r3, r2
 80022ba:	d057      	beq.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	029b      	lsls	r3, r3, #10
 80022cc:	4013      	ands	r3, r2
 80022ce:	d12b      	bne.n	8002328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e097      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d107      	bne.n	80022ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022dc:	4b4d      	ldr	r3, [pc, #308]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	049b      	lsls	r3, r3, #18
 80022e4:	4013      	ands	r3, r2
 80022e6:	d11f      	bne.n	8002328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e08b      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f4:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4013      	ands	r3, r2
 80022fe:	d113      	bne.n	8002328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e07f      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d106      	bne.n	800231a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800230c:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 800230e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002310:	2202      	movs	r2, #2
 8002312:	4013      	ands	r3, r2
 8002314:	d108      	bne.n	8002328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e074      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231a:	4b3e      	ldr	r3, [pc, #248]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e06d      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002328:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2207      	movs	r2, #7
 800232e:	4393      	bics	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4b37      	ldr	r3, [pc, #220]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233c:	f7fe fccc 	bl	8000cd8 <HAL_GetTick>
 8002340:	0003      	movs	r3, r0
 8002342:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002344:	e009      	b.n	800235a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f7fe fcc7 	bl	8000cd8 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <HAL_RCC_ClockConfig+0x1f4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e054      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2238      	movs	r2, #56	; 0x38
 8002360:	401a      	ands	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	429a      	cmp	r2, r3
 800236a:	d1ec      	bne.n	8002346 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_ClockConfig+0x1f0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2207      	movs	r2, #7
 8002372:	4013      	ands	r3, r2
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d21e      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2207      	movs	r2, #7
 8002380:	4393      	bics	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_RCC_ClockConfig+0x1f0>)
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800238c:	f7fe fca4 	bl	8000cd8 <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002394:	e009      	b.n	80023aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002396:	f7fe fc9f 	bl	8000cd8 <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <HAL_RCC_ClockConfig+0x1f4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e02c      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_RCC_ClockConfig+0x1f0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2207      	movs	r2, #7
 80023b0:	4013      	ands	r3, r2
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d1ee      	bne.n	8002396 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2204      	movs	r2, #4
 80023be:	4013      	ands	r3, r2
 80023c0:	d009      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4a15      	ldr	r2, [pc, #84]	; (800241c <HAL_RCC_ClockConfig+0x200>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023d6:	f000 f829 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023da:	0001      	movs	r1, r0
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	220f      	movs	r2, #15
 80023e4:	401a      	ands	r2, r3
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_RCC_ClockConfig+0x204>)
 80023e8:	0092      	lsls	r2, r2, #2
 80023ea:	58d3      	ldr	r3, [r2, r3]
 80023ec:	221f      	movs	r2, #31
 80023ee:	4013      	ands	r3, r2
 80023f0:	000a      	movs	r2, r1
 80023f2:	40da      	lsrs	r2, r3
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_ClockConfig+0x208>)
 80023f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_ClockConfig+0x20c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7fe fc0f 	bl	8000c20 <HAL_InitTick>
 8002402:	0003      	movs	r3, r0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b004      	add	sp, #16
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40022000 	.word	0x40022000
 8002410:	00001388 	.word	0x00001388
 8002414:	40021000 	.word	0x40021000
 8002418:	fffff0ff 	.word	0xfffff0ff
 800241c:	ffff8fff 	.word	0xffff8fff
 8002420:	08003f34 	.word	0x08003f34
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002432:	4b3c      	ldr	r3, [pc, #240]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2238      	movs	r2, #56	; 0x38
 8002438:	4013      	ands	r3, r2
 800243a:	d10f      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0adb      	lsrs	r3, r3, #11
 8002442:	2207      	movs	r2, #7
 8002444:	4013      	ands	r3, r2
 8002446:	2201      	movs	r2, #1
 8002448:	409a      	lsls	r2, r3
 800244a:	0013      	movs	r3, r2
 800244c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	4835      	ldr	r0, [pc, #212]	; (8002528 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002452:	f7fd fe69 	bl	8000128 <__udivsi3>
 8002456:	0003      	movs	r3, r0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	e05d      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800245c:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2238      	movs	r2, #56	; 0x38
 8002462:	4013      	ands	r3, r2
 8002464:	2b08      	cmp	r3, #8
 8002466:	d102      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_RCC_GetSysClockFreq+0x100>)
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	e054      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800246e:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2238      	movs	r2, #56	; 0x38
 8002474:	4013      	ands	r3, r2
 8002476:	2b10      	cmp	r3, #16
 8002478:	d138      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2203      	movs	r2, #3
 8002480:	4013      	ands	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002484:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	2207      	movs	r2, #7
 800248c:	4013      	ands	r3, r2
 800248e:	3301      	adds	r3, #1
 8002490:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d10d      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	4824      	ldr	r0, [pc, #144]	; (800252c <HAL_RCC_GetSysClockFreq+0x100>)
 800249c:	f7fd fe44 	bl	8000128 <__udivsi3>
 80024a0:	0003      	movs	r3, r0
 80024a2:	0019      	movs	r1, r3
 80024a4:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	227f      	movs	r2, #127	; 0x7f
 80024ac:	4013      	ands	r3, r2
 80024ae:	434b      	muls	r3, r1
 80024b0:	617b      	str	r3, [r7, #20]
        break;
 80024b2:	e00d      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	481c      	ldr	r0, [pc, #112]	; (8002528 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024b8:	f7fd fe36 	bl	8000128 <__udivsi3>
 80024bc:	0003      	movs	r3, r0
 80024be:	0019      	movs	r1, r3
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	227f      	movs	r2, #127	; 0x7f
 80024c8:	4013      	ands	r3, r2
 80024ca:	434b      	muls	r3, r1
 80024cc:	617b      	str	r3, [r7, #20]
        break;
 80024ce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0f5b      	lsrs	r3, r3, #29
 80024d6:	2207      	movs	r2, #7
 80024d8:	4013      	ands	r3, r2
 80024da:	3301      	adds	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	6978      	ldr	r0, [r7, #20]
 80024e2:	f7fd fe21 	bl	8000128 <__udivsi3>
 80024e6:	0003      	movs	r3, r0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	e015      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2238      	movs	r2, #56	; 0x38
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d103      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2238      	movs	r2, #56	; 0x38
 8002506:	4013      	ands	r3, r2
 8002508:	2b18      	cmp	r3, #24
 800250a:	d103      	bne.n	8002514 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800250c:	23fa      	movs	r3, #250	; 0xfa
 800250e:	01db      	lsls	r3, r3, #7
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	e001      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002518:	693b      	ldr	r3, [r7, #16]
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b006      	add	sp, #24
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	40021000 	.word	0x40021000
 8002528:	00f42400 	.word	0x00f42400
 800252c:	007a1200 	.word	0x007a1200

08002530 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002534:	4b02      	ldr	r3, [pc, #8]	; (8002540 <HAL_RCC_GetHCLKFreq+0x10>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	20000000 	.word	0x20000000

08002544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002548:	f7ff fff2 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 800254c:	0004      	movs	r4, r0
 800254e:	f7ff fb3f 	bl	8001bd0 <LL_RCC_GetAPB1Prescaler>
 8002552:	0003      	movs	r3, r0
 8002554:	0b1a      	lsrs	r2, r3, #12
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	58d3      	ldr	r3, [r2, r3]
 800255c:	221f      	movs	r2, #31
 800255e:	4013      	ands	r3, r2
 8002560:	40dc      	lsrs	r4, r3
 8002562:	0023      	movs	r3, r4
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bdb0      	pop	{r4, r5, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	08003f74 	.word	0x08003f74

08002570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002578:	2313      	movs	r3, #19
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002580:	2312      	movs	r3, #18
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	4013      	ands	r3, r2
 8002592:	d100      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002594:	e0a3      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2011      	movs	r0, #17
 8002598:	183b      	adds	r3, r7, r0
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4bc3      	ldr	r3, [pc, #780]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	055b      	lsls	r3, r3, #21
 80025a6:	4013      	ands	r3, r2
 80025a8:	d110      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4bc0      	ldr	r3, [pc, #768]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ae:	4bbf      	ldr	r3, [pc, #764]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0549      	lsls	r1, r1, #21
 80025b4:	430a      	orrs	r2, r1
 80025b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80025b8:	4bbc      	ldr	r3, [pc, #752]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	055b      	lsls	r3, r3, #21
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c6:	183b      	adds	r3, r7, r0
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025cc:	4bb8      	ldr	r3, [pc, #736]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4bb7      	ldr	r3, [pc, #732]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80025d2:	2180      	movs	r1, #128	; 0x80
 80025d4:	0049      	lsls	r1, r1, #1
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025da:	f7fe fb7d 	bl	8000cd8 <HAL_GetTick>
 80025de:	0003      	movs	r3, r0
 80025e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025e2:	e00b      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e4:	f7fe fb78 	bl	8000cd8 <HAL_GetTick>
 80025e8:	0002      	movs	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d904      	bls.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80025f2:	2313      	movs	r3, #19
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	2203      	movs	r2, #3
 80025f8:	701a      	strb	r2, [r3, #0]
        break;
 80025fa:	e005      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025fc:	4bac      	ldr	r3, [pc, #688]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4013      	ands	r3, r2
 8002606:	d0ed      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002608:	2313      	movs	r3, #19
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d154      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002612:	4ba6      	ldr	r3, [pc, #664]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002614:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002616:	23c0      	movs	r3, #192	; 0xc0
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4013      	ands	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d019      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	429a      	cmp	r2, r3
 800262c:	d014      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800262e:	4b9f      	ldr	r3, [pc, #636]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	4aa0      	ldr	r2, [pc, #640]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002634:	4013      	ands	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002638:	4b9c      	ldr	r3, [pc, #624]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800263a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800263c:	4b9b      	ldr	r3, [pc, #620]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	0249      	lsls	r1, r1, #9
 8002642:	430a      	orrs	r2, r1
 8002644:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002646:	4b99      	ldr	r3, [pc, #612]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002648:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800264a:	4b98      	ldr	r3, [pc, #608]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800264c:	499a      	ldr	r1, [pc, #616]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800264e:	400a      	ands	r2, r1
 8002650:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002652:	4b96      	ldr	r3, [pc, #600]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2201      	movs	r2, #1
 800265c:	4013      	ands	r3, r2
 800265e:	d016      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fb3a 	bl	8000cd8 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002668:	e00c      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe fb35 	bl	8000cd8 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	4a91      	ldr	r2, [pc, #580]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d904      	bls.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800267a:	2313      	movs	r3, #19
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	2203      	movs	r2, #3
 8002680:	701a      	strb	r2, [r3, #0]
            break;
 8002682:	e004      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002684:	4b89      	ldr	r3, [pc, #548]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	2202      	movs	r2, #2
 800268a:	4013      	ands	r3, r2
 800268c:	d0ed      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800268e:	2313      	movs	r3, #19
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002698:	4b84      	ldr	r3, [pc, #528]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	4a85      	ldr	r2, [pc, #532]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800269e:	4013      	ands	r3, r2
 80026a0:	0019      	movs	r1, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a6:	4b81      	ldr	r3, [pc, #516]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a8:	430a      	orrs	r2, r1
 80026aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80026ac:	e00c      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026ae:	2312      	movs	r3, #18
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2213      	movs	r2, #19
 80026b4:	18ba      	adds	r2, r7, r2
 80026b6:	7812      	ldrb	r2, [r2, #0]
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e005      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026bc:	2312      	movs	r3, #18
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2213      	movs	r2, #19
 80026c2:	18ba      	adds	r2, r7, r2
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026c8:	2311      	movs	r3, #17
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d2:	4b76      	ldr	r3, [pc, #472]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026d6:	4b75      	ldr	r3, [pc, #468]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d8:	4979      	ldr	r1, [pc, #484]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80026da:	400a      	ands	r2, r1
 80026dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e8:	4b70      	ldr	r3, [pc, #448]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	2203      	movs	r2, #3
 80026ee:	4393      	bics	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4b6d      	ldr	r3, [pc, #436]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2202      	movs	r2, #2
 8002702:	4013      	ands	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002706:	4b69      	ldr	r3, [pc, #420]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	220c      	movs	r2, #12
 800270c:	4393      	bics	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	4b65      	ldr	r3, [pc, #404]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002716:	430a      	orrs	r2, r1
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2210      	movs	r2, #16
 8002720:	4013      	ands	r3, r2
 8002722:	d009      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002724:	4b61      	ldr	r3, [pc, #388]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	4a66      	ldr	r2, [pc, #408]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002734:	430a      	orrs	r2, r1
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4013      	ands	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002744:	4b59      	ldr	r3, [pc, #356]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002748:	4a5f      	ldr	r2, [pc, #380]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	4b56      	ldr	r3, [pc, #344]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002754:	430a      	orrs	r2, r1
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4013      	ands	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002764:	4b51      	ldr	r3, [pc, #324]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	4b4e      	ldr	r3, [pc, #312]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002774:	430a      	orrs	r2, r1
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2220      	movs	r2, #32
 800277e:	4013      	ands	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002782:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002788:	4013      	ands	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	4b46      	ldr	r3, [pc, #280]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002792:	430a      	orrs	r2, r1
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	01db      	lsls	r3, r3, #7
 800279e:	4013      	ands	r3, r2
 80027a0:	d015      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027a2:	4b42      	ldr	r3, [pc, #264]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	0899      	lsrs	r1, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1a      	ldr	r2, [r3, #32]
 80027ae:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1a      	ldr	r2, [r3, #32]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	05db      	lsls	r3, r3, #23
 80027bc:	429a      	cmp	r2, r3
 80027be:	d106      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027c0:	4b3a      	ldr	r3, [pc, #232]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	0249      	lsls	r1, r1, #9
 80027ca:	430a      	orrs	r2, r1
 80027cc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	031b      	lsls	r3, r3, #12
 80027d6:	4013      	ands	r3, r2
 80027d8:	d009      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027da:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027de:	2240      	movs	r2, #64	; 0x40
 80027e0:	4393      	bics	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	039b      	lsls	r3, r3, #14
 80027f6:	4013      	ands	r3, r2
 80027f8:	d016      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027fa:	4b2c      	ldr	r3, [pc, #176]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	4a35      	ldr	r2, [pc, #212]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002800:	4013      	ands	r3, r2
 8002802:	0019      	movs	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002808:	4b28      	ldr	r3, [pc, #160]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800280a:	430a      	orrs	r2, r1
 800280c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	03db      	lsls	r3, r3, #15
 8002816:	429a      	cmp	r2, r3
 8002818:	d106      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800281a:	4b24      	ldr	r3, [pc, #144]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4b23      	ldr	r3, [pc, #140]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002820:	2180      	movs	r1, #128	; 0x80
 8002822:	0449      	lsls	r1, r1, #17
 8002824:	430a      	orrs	r2, r1
 8002826:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	03db      	lsls	r3, r3, #15
 8002830:	4013      	ands	r3, r2
 8002832:	d016      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002834:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002838:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800283a:	4013      	ands	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002844:	430a      	orrs	r2, r1
 8002846:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	045b      	lsls	r3, r3, #17
 8002850:	429a      	cmp	r2, r3
 8002852:	d106      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	0449      	lsls	r1, r1, #17
 800285e:	430a      	orrs	r2, r1
 8002860:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	4013      	ands	r3, r2
 800286c:	d016      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800287e:	430a      	orrs	r2, r1
 8002880:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	01db      	lsls	r3, r3, #7
 800288a:	429a      	cmp	r2, r3
 800288c:	d106      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	0249      	lsls	r1, r1, #9
 8002898:	430a      	orrs	r2, r1
 800289a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800289c:	2312      	movs	r3, #18
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	781b      	ldrb	r3, [r3, #0]
}
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b006      	add	sp, #24
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40007000 	.word	0x40007000
 80028b4:	fffffcff 	.word	0xfffffcff
 80028b8:	fffeffff 	.word	0xfffeffff
 80028bc:	00001388 	.word	0x00001388
 80028c0:	efffffff 	.word	0xefffffff
 80028c4:	fffff3ff 	.word	0xfffff3ff
 80028c8:	fff3ffff 	.word	0xfff3ffff
 80028cc:	ffcfffff 	.word	0xffcfffff
 80028d0:	ffffcfff 	.word	0xffffcfff
 80028d4:	ffbfffff 	.word	0xffbfffff
 80028d8:	feffffff 	.word	0xfeffffff
 80028dc:	ffff3fff 	.word	0xffff3fff

080028e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e046      	b.n	8002980 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2284      	movs	r2, #132	; 0x84
 80028f6:	589b      	ldr	r3, [r3, r2]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d107      	bne.n	800290c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	2100      	movs	r1, #0
 8002902:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0018      	movs	r0, r3
 8002908:	f7fe f8a2 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2284      	movs	r2, #132	; 0x84
 8002910:	2124      	movs	r1, #36	; 0x24
 8002912:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2101      	movs	r1, #1
 8002920:	438a      	bics	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0018      	movs	r0, r3
 8002928:	f000 f8dc 	bl	8002ae4 <UART_SetConfig>
 800292c:	0003      	movs	r3, r0
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e024      	b.n	8002980 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	0018      	movs	r0, r3
 8002942:	f000 fbab 	bl	800309c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	490d      	ldr	r1, [pc, #52]	; (8002988 <HAL_UART_Init+0xa8>)
 8002952:	400a      	ands	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	212a      	movs	r1, #42	; 0x2a
 8002962:	438a      	bics	r2, r1
 8002964:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2101      	movs	r1, #1
 8002972:	430a      	orrs	r2, r1
 8002974:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	0018      	movs	r0, r3
 800297a:	f000 fc43 	bl	8003204 <UART_CheckIdleState>
 800297e:	0003      	movs	r3, r0
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b002      	add	sp, #8
 8002986:	bd80      	pop	{r7, pc}
 8002988:	ffffb7ff 	.word	0xffffb7ff

0800298c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	1dbb      	adds	r3, r7, #6
 800299a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2284      	movs	r2, #132	; 0x84
 80029a0:	589b      	ldr	r3, [r3, r2]
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d000      	beq.n	80029a8 <HAL_UART_Transmit+0x1c>
 80029a6:	e097      	b.n	8002ad8 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_UART_Transmit+0x2a>
 80029ae:	1dbb      	adds	r3, r7, #6
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e08f      	b.n	8002ada <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	015b      	lsls	r3, r3, #5
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d109      	bne.n	80029da <HAL_UART_Transmit+0x4e>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d105      	bne.n	80029da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2201      	movs	r2, #1
 80029d2:	4013      	ands	r3, r2
 80029d4:	d001      	beq.n	80029da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e07f      	b.n	8002ada <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	5c9b      	ldrb	r3, [r3, r2]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_UART_Transmit+0x5c>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e078      	b.n	8002ada <HAL_UART_Transmit+0x14e>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	2101      	movs	r1, #1
 80029ee:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	228c      	movs	r2, #140	; 0x8c
 80029f4:	2100      	movs	r1, #0
 80029f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2284      	movs	r2, #132	; 0x84
 80029fc:	2121      	movs	r1, #33	; 0x21
 80029fe:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a00:	f7fe f96a 	bl	8000cd8 <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1dba      	adds	r2, r7, #6
 8002a0c:	2154      	movs	r1, #84	; 0x54
 8002a0e:	8812      	ldrh	r2, [r2, #0]
 8002a10:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1dba      	adds	r2, r7, #6
 8002a16:	2156      	movs	r1, #86	; 0x56
 8002a18:	8812      	ldrh	r2, [r2, #0]
 8002a1a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	015b      	lsls	r3, r3, #5
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d108      	bne.n	8002a3a <HAL_UART_Transmit+0xae>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d104      	bne.n	8002a3a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	e003      	b.n	8002a42 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	2100      	movs	r1, #0
 8002a48:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002a4a:	e02c      	b.n	8002aa6 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	0013      	movs	r3, r2
 8002a56:	2200      	movs	r2, #0
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	f000 fc1d 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e039      	b.n	8002ada <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	001a      	movs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	05d2      	lsls	r2, r2, #23
 8002a78:	0dd2      	lsrs	r2, r2, #23
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	3302      	adds	r3, #2
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e007      	b.n	8002a94 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3301      	adds	r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2256      	movs	r2, #86	; 0x56
 8002a98:	5a9b      	ldrh	r3, [r3, r2]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b299      	uxth	r1, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2256      	movs	r2, #86	; 0x56
 8002aa4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2256      	movs	r2, #86	; 0x56
 8002aaa:	5a9b      	ldrh	r3, [r3, r2]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1cc      	bne.n	8002a4c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	0013      	movs	r3, r2
 8002abc:	2200      	movs	r2, #0
 8002abe:	2140      	movs	r1, #64	; 0x40
 8002ac0:	f000 fbea 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 8002ac4:	1e03      	subs	r3, r0, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e006      	b.n	8002ada <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2284      	movs	r2, #132	; 0x84
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e000      	b.n	8002ada <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002ad8:	2302      	movs	r3, #2
  }
}
 8002ada:	0018      	movs	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b008      	add	sp, #32
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae4:	b5b0      	push	{r4, r5, r7, lr}
 8002ae6:	b090      	sub	sp, #64	; 0x40
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aec:	231a      	movs	r3, #26
 8002aee:	2220      	movs	r2, #32
 8002af0:	4694      	mov	ip, r2
 8002af2:	44bc      	add	ip, r7
 8002af4:	4463      	add	r3, ip
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4ab9      	ldr	r2, [pc, #740]	; (8002e00 <UART_SetConfig+0x31c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b24:	430b      	orrs	r3, r1
 8002b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4ab5      	ldr	r2, [pc, #724]	; (8002e04 <UART_SetConfig+0x320>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	0018      	movs	r0, r3
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	68d9      	ldr	r1, [r3, #12]
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4aae      	ldr	r2, [pc, #696]	; (8002e08 <UART_SetConfig+0x324>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d004      	beq.n	8002b5c <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4aaa      	ldr	r2, [pc, #680]	; (8002e0c <UART_SetConfig+0x328>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	220f      	movs	r2, #15
 8002b7a:	4393      	bics	r3, r2
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	0003      	movs	r3, r0
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a9f      	ldr	r2, [pc, #636]	; (8002e10 <UART_SetConfig+0x32c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d136      	bne.n	8002c04 <UART_SetConfig+0x120>
 8002b96:	4b9f      	ldr	r3, [pc, #636]	; (8002e14 <UART_SetConfig+0x330>)
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d020      	beq.n	8002be4 <UART_SetConfig+0x100>
 8002ba2:	d827      	bhi.n	8002bf4 <UART_SetConfig+0x110>
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d00d      	beq.n	8002bc4 <UART_SetConfig+0xe0>
 8002ba8:	d824      	bhi.n	8002bf4 <UART_SetConfig+0x110>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <UART_SetConfig+0xd0>
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d010      	beq.n	8002bd4 <UART_SetConfig+0xf0>
 8002bb2:	e01f      	b.n	8002bf4 <UART_SetConfig+0x110>
 8002bb4:	231b      	movs	r3, #27
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	4694      	mov	ip, r2
 8002bba:	44bc      	add	ip, r7
 8002bbc:	4463      	add	r3, ip
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e0c5      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002bc4:	231b      	movs	r3, #27
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	4694      	mov	ip, r2
 8002bca:	44bc      	add	ip, r7
 8002bcc:	4463      	add	r3, ip
 8002bce:	2202      	movs	r2, #2
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e0bd      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002bd4:	231b      	movs	r3, #27
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	4694      	mov	ip, r2
 8002bda:	44bc      	add	ip, r7
 8002bdc:	4463      	add	r3, ip
 8002bde:	2204      	movs	r2, #4
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e0b5      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002be4:	231b      	movs	r3, #27
 8002be6:	2220      	movs	r2, #32
 8002be8:	4694      	mov	ip, r2
 8002bea:	44bc      	add	ip, r7
 8002bec:	4463      	add	r3, ip
 8002bee:	2208      	movs	r2, #8
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e0ad      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002bf4:	231b      	movs	r3, #27
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	4694      	mov	ip, r2
 8002bfa:	44bc      	add	ip, r7
 8002bfc:	4463      	add	r3, ip
 8002bfe:	2210      	movs	r2, #16
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e0a5      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a83      	ldr	r2, [pc, #524]	; (8002e18 <UART_SetConfig+0x334>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d136      	bne.n	8002c7c <UART_SetConfig+0x198>
 8002c0e:	4b81      	ldr	r3, [pc, #516]	; (8002e14 <UART_SetConfig+0x330>)
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	220c      	movs	r2, #12
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d020      	beq.n	8002c5c <UART_SetConfig+0x178>
 8002c1a:	d827      	bhi.n	8002c6c <UART_SetConfig+0x188>
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d00d      	beq.n	8002c3c <UART_SetConfig+0x158>
 8002c20:	d824      	bhi.n	8002c6c <UART_SetConfig+0x188>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <UART_SetConfig+0x148>
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d010      	beq.n	8002c4c <UART_SetConfig+0x168>
 8002c2a:	e01f      	b.n	8002c6c <UART_SetConfig+0x188>
 8002c2c:	231b      	movs	r3, #27
 8002c2e:	2220      	movs	r2, #32
 8002c30:	4694      	mov	ip, r2
 8002c32:	44bc      	add	ip, r7
 8002c34:	4463      	add	r3, ip
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e089      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002c3c:	231b      	movs	r3, #27
 8002c3e:	2220      	movs	r2, #32
 8002c40:	4694      	mov	ip, r2
 8002c42:	44bc      	add	ip, r7
 8002c44:	4463      	add	r3, ip
 8002c46:	2202      	movs	r2, #2
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e081      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002c4c:	231b      	movs	r3, #27
 8002c4e:	2220      	movs	r2, #32
 8002c50:	4694      	mov	ip, r2
 8002c52:	44bc      	add	ip, r7
 8002c54:	4463      	add	r3, ip
 8002c56:	2204      	movs	r2, #4
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e079      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002c5c:	231b      	movs	r3, #27
 8002c5e:	2220      	movs	r2, #32
 8002c60:	4694      	mov	ip, r2
 8002c62:	44bc      	add	ip, r7
 8002c64:	4463      	add	r3, ip
 8002c66:	2208      	movs	r2, #8
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e071      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002c6c:	231b      	movs	r3, #27
 8002c6e:	2220      	movs	r2, #32
 8002c70:	4694      	mov	ip, r2
 8002c72:	44bc      	add	ip, r7
 8002c74:	4463      	add	r3, ip
 8002c76:	2210      	movs	r2, #16
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	e069      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a66      	ldr	r2, [pc, #408]	; (8002e1c <UART_SetConfig+0x338>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d107      	bne.n	8002c96 <UART_SetConfig+0x1b2>
 8002c86:	231b      	movs	r3, #27
 8002c88:	2220      	movs	r2, #32
 8002c8a:	4694      	mov	ip, r2
 8002c8c:	44bc      	add	ip, r7
 8002c8e:	4463      	add	r3, ip
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e05c      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a61      	ldr	r2, [pc, #388]	; (8002e20 <UART_SetConfig+0x33c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d107      	bne.n	8002cb0 <UART_SetConfig+0x1cc>
 8002ca0:	231b      	movs	r3, #27
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	4694      	mov	ip, r2
 8002ca6:	44bc      	add	ip, r7
 8002ca8:	4463      	add	r3, ip
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e04f      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a54      	ldr	r2, [pc, #336]	; (8002e08 <UART_SetConfig+0x324>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d143      	bne.n	8002d42 <UART_SetConfig+0x25e>
 8002cba:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <UART_SetConfig+0x330>)
 8002cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cbe:	23c0      	movs	r3, #192	; 0xc0
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	22c0      	movs	r2, #192	; 0xc0
 8002cc6:	0112      	lsls	r2, r2, #4
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d02a      	beq.n	8002d22 <UART_SetConfig+0x23e>
 8002ccc:	22c0      	movs	r2, #192	; 0xc0
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d82e      	bhi.n	8002d32 <UART_SetConfig+0x24e>
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d012      	beq.n	8002d02 <UART_SetConfig+0x21e>
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	0112      	lsls	r2, r2, #4
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d826      	bhi.n	8002d32 <UART_SetConfig+0x24e>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <UART_SetConfig+0x20e>
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	00d2      	lsls	r2, r2, #3
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d010      	beq.n	8002d12 <UART_SetConfig+0x22e>
 8002cf0:	e01f      	b.n	8002d32 <UART_SetConfig+0x24e>
 8002cf2:	231b      	movs	r3, #27
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	4694      	mov	ip, r2
 8002cf8:	44bc      	add	ip, r7
 8002cfa:	4463      	add	r3, ip
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e026      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002d02:	231b      	movs	r3, #27
 8002d04:	2220      	movs	r2, #32
 8002d06:	4694      	mov	ip, r2
 8002d08:	44bc      	add	ip, r7
 8002d0a:	4463      	add	r3, ip
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e01e      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002d12:	231b      	movs	r3, #27
 8002d14:	2220      	movs	r2, #32
 8002d16:	4694      	mov	ip, r2
 8002d18:	44bc      	add	ip, r7
 8002d1a:	4463      	add	r3, ip
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e016      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002d22:	231b      	movs	r3, #27
 8002d24:	2220      	movs	r2, #32
 8002d26:	4694      	mov	ip, r2
 8002d28:	44bc      	add	ip, r7
 8002d2a:	4463      	add	r3, ip
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e00e      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002d32:	231b      	movs	r3, #27
 8002d34:	2220      	movs	r2, #32
 8002d36:	4694      	mov	ip, r2
 8002d38:	44bc      	add	ip, r7
 8002d3a:	4463      	add	r3, ip
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e006      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002d42:	231b      	movs	r3, #27
 8002d44:	2220      	movs	r2, #32
 8002d46:	4694      	mov	ip, r2
 8002d48:	44bc      	add	ip, r7
 8002d4a:	4463      	add	r3, ip
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2c      	ldr	r2, [pc, #176]	; (8002e08 <UART_SetConfig+0x324>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d000      	beq.n	8002d5c <UART_SetConfig+0x278>
 8002d5a:	e0ad      	b.n	8002eb8 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d5c:	231b      	movs	r3, #27
 8002d5e:	2220      	movs	r2, #32
 8002d60:	4694      	mov	ip, r2
 8002d62:	44bc      	add	ip, r7
 8002d64:	4463      	add	r3, ip
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d015      	beq.n	8002d98 <UART_SetConfig+0x2b4>
 8002d6c:	dc18      	bgt.n	8002da0 <UART_SetConfig+0x2bc>
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d00d      	beq.n	8002d8e <UART_SetConfig+0x2aa>
 8002d72:	dc15      	bgt.n	8002da0 <UART_SetConfig+0x2bc>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <UART_SetConfig+0x29a>
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d005      	beq.n	8002d88 <UART_SetConfig+0x2a4>
 8002d7c:	e010      	b.n	8002da0 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7e:	f7ff fbe1 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8002d82:	0003      	movs	r3, r0
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d86:	e015      	b.n	8002db4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <UART_SetConfig+0x340>)
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d8c:	e012      	b.n	8002db4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d8e:	f7ff fb4d 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8002d92:	0003      	movs	r3, r0
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d96:	e00d      	b.n	8002db4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d9e:	e009      	b.n	8002db4 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002da4:	231a      	movs	r3, #26
 8002da6:	2220      	movs	r2, #32
 8002da8:	4694      	mov	ip, r2
 8002daa:	44bc      	add	ip, r7
 8002dac:	4463      	add	r3, ip
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
        break;
 8002db2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d100      	bne.n	8002dbc <UART_SetConfig+0x2d8>
 8002dba:	e153      	b.n	8003064 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <UART_SetConfig+0x344>)
 8002dc2:	0052      	lsls	r2, r2, #1
 8002dc4:	5ad3      	ldrh	r3, [r2, r3]
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002dca:	f7fd f9ad 	bl	8000128 <__udivsi3>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	0013      	movs	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d305      	bcc.n	8002dee <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d91e      	bls.n	8002e2c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002dee:	231a      	movs	r3, #26
 8002df0:	2220      	movs	r2, #32
 8002df2:	4694      	mov	ip, r2
 8002df4:	44bc      	add	ip, r7
 8002df6:	4463      	add	r3, ip
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e132      	b.n	8003064 <UART_SetConfig+0x580>
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	cfff69f3 	.word	0xcfff69f3
 8002e04:	ffffcfff 	.word	0xffffcfff
 8002e08:	40008000 	.word	0x40008000
 8002e0c:	11fff4ff 	.word	0x11fff4ff
 8002e10:	40013800 	.word	0x40013800
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40004400 	.word	0x40004400
 8002e1c:	40004800 	.word	0x40004800
 8002e20:	40004c00 	.word	0x40004c00
 8002e24:	00f42400 	.word	0x00f42400
 8002e28:	08003f94 	.word	0x08003f94
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e38:	4b96      	ldr	r3, [pc, #600]	; (8003094 <UART_SetConfig+0x5b0>)
 8002e3a:	0052      	lsls	r2, r2, #1
 8002e3c:	5ad3      	ldrh	r3, [r2, r3]
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	69b8      	ldr	r0, [r7, #24]
 8002e4a:	69f9      	ldr	r1, [r7, #28]
 8002e4c:	f7fd fae2 	bl	8000414 <__aeabi_uldivmod>
 8002e50:	0002      	movs	r2, r0
 8002e52:	000b      	movs	r3, r1
 8002e54:	0e11      	lsrs	r1, r2, #24
 8002e56:	021d      	lsls	r5, r3, #8
 8002e58:	430d      	orrs	r5, r1
 8002e5a:	0214      	lsls	r4, r2, #8
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68b8      	ldr	r0, [r7, #8]
 8002e6a:	68f9      	ldr	r1, [r7, #12]
 8002e6c:	1900      	adds	r0, r0, r4
 8002e6e:	4169      	adcs	r1, r5
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f7fd fac9 	bl	8000414 <__aeabi_uldivmod>
 8002e82:	0002      	movs	r2, r0
 8002e84:	000b      	movs	r3, r1
 8002e86:	0013      	movs	r3, r2
 8002e88:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8c:	23c0      	movs	r3, #192	; 0xc0
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d309      	bcc.n	8002ea8 <UART_SetConfig+0x3c4>
 8002e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	035b      	lsls	r3, r3, #13
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d204      	bcs.n	8002ea8 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	e0dd      	b.n	8003064 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8002ea8:	231a      	movs	r3, #26
 8002eaa:	2220      	movs	r2, #32
 8002eac:	4694      	mov	ip, r2
 8002eae:	44bc      	add	ip, r7
 8002eb0:	4463      	add	r3, ip
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e0d5      	b.n	8003064 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d000      	beq.n	8002ec6 <UART_SetConfig+0x3e2>
 8002ec4:	e073      	b.n	8002fae <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8002ec6:	231b      	movs	r3, #27
 8002ec8:	2220      	movs	r2, #32
 8002eca:	4694      	mov	ip, r2
 8002ecc:	44bc      	add	ip, r7
 8002ece:	4463      	add	r3, ip
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d015      	beq.n	8002f02 <UART_SetConfig+0x41e>
 8002ed6:	dc18      	bgt.n	8002f0a <UART_SetConfig+0x426>
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d00d      	beq.n	8002ef8 <UART_SetConfig+0x414>
 8002edc:	dc15      	bgt.n	8002f0a <UART_SetConfig+0x426>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <UART_SetConfig+0x404>
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d005      	beq.n	8002ef2 <UART_SetConfig+0x40e>
 8002ee6:	e010      	b.n	8002f0a <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f7ff fb2c 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8002eec:	0003      	movs	r3, r0
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ef0:	e015      	b.n	8002f1e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ef2:	4b69      	ldr	r3, [pc, #420]	; (8003098 <UART_SetConfig+0x5b4>)
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ef6:	e012      	b.n	8002f1e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef8:	f7ff fa98 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8002efc:	0003      	movs	r3, r0
 8002efe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f00:	e00d      	b.n	8002f1e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f08:	e009      	b.n	8002f1e <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f0e:	231a      	movs	r3, #26
 8002f10:	2220      	movs	r2, #32
 8002f12:	4694      	mov	ip, r2
 8002f14:	44bc      	add	ip, r7
 8002f16:	4463      	add	r3, ip
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
        break;
 8002f1c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d100      	bne.n	8002f26 <UART_SetConfig+0x442>
 8002f24:	e09e      	b.n	8003064 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f2a:	4b5a      	ldr	r3, [pc, #360]	; (8003094 <UART_SetConfig+0x5b0>)
 8002f2c:	0052      	lsls	r2, r2, #1
 8002f2e:	5ad3      	ldrh	r3, [r2, r3]
 8002f30:	0019      	movs	r1, r3
 8002f32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f34:	f7fd f8f8 	bl	8000128 <__udivsi3>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	005a      	lsls	r2, r3, #1
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	18d2      	adds	r2, r2, r3
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0019      	movs	r1, r3
 8002f4a:	0010      	movs	r0, r2
 8002f4c:	f7fd f8ec 	bl	8000128 <__udivsi3>
 8002f50:	0003      	movs	r3, r0
 8002f52:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	2b0f      	cmp	r3, #15
 8002f58:	d921      	bls.n	8002f9e <UART_SetConfig+0x4ba>
 8002f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	025b      	lsls	r3, r3, #9
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d21c      	bcs.n	8002f9e <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	200e      	movs	r0, #14
 8002f6a:	2420      	movs	r4, #32
 8002f6c:	193b      	adds	r3, r7, r4
 8002f6e:	181b      	adds	r3, r3, r0
 8002f70:	210f      	movs	r1, #15
 8002f72:	438a      	bics	r2, r1
 8002f74:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	4013      	ands	r3, r2
 8002f80:	b299      	uxth	r1, r3
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	181b      	adds	r3, r3, r0
 8002f86:	193a      	adds	r2, r7, r4
 8002f88:	1812      	adds	r2, r2, r0
 8002f8a:	8812      	ldrh	r2, [r2, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	193a      	adds	r2, r7, r4
 8002f96:	1812      	adds	r2, r2, r0
 8002f98:	8812      	ldrh	r2, [r2, #0]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	e062      	b.n	8003064 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8002f9e:	231a      	movs	r3, #26
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	4694      	mov	ip, r2
 8002fa4:	44bc      	add	ip, r7
 8002fa6:	4463      	add	r3, ip
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e05a      	b.n	8003064 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fae:	231b      	movs	r3, #27
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	4694      	mov	ip, r2
 8002fb4:	44bc      	add	ip, r7
 8002fb6:	4463      	add	r3, ip
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d015      	beq.n	8002fea <UART_SetConfig+0x506>
 8002fbe:	dc18      	bgt.n	8002ff2 <UART_SetConfig+0x50e>
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d00d      	beq.n	8002fe0 <UART_SetConfig+0x4fc>
 8002fc4:	dc15      	bgt.n	8002ff2 <UART_SetConfig+0x50e>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <UART_SetConfig+0x4ec>
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d005      	beq.n	8002fda <UART_SetConfig+0x4f6>
 8002fce:	e010      	b.n	8002ff2 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd0:	f7ff fab8 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fd8:	e015      	b.n	8003006 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fda:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <UART_SetConfig+0x5b4>)
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fde:	e012      	b.n	8003006 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe0:	f7ff fa24 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fe8:	e00d      	b.n	8003006 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ff0:	e009      	b.n	8003006 <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002ff6:	231a      	movs	r3, #26
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	4694      	mov	ip, r2
 8002ffc:	44bc      	add	ip, r7
 8002ffe:	4463      	add	r3, ip
 8003000:	2201      	movs	r2, #1
 8003002:	701a      	strb	r2, [r3, #0]
        break;
 8003004:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	2b00      	cmp	r3, #0
 800300a:	d02b      	beq.n	8003064 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003010:	4b20      	ldr	r3, [pc, #128]	; (8003094 <UART_SetConfig+0x5b0>)
 8003012:	0052      	lsls	r2, r2, #1
 8003014:	5ad3      	ldrh	r3, [r2, r3]
 8003016:	0019      	movs	r1, r3
 8003018:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800301a:	f7fd f885 	bl	8000128 <__udivsi3>
 800301e:	0003      	movs	r3, r0
 8003020:	001a      	movs	r2, r3
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	18d2      	adds	r2, r2, r3
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	0019      	movs	r1, r3
 8003030:	0010      	movs	r0, r2
 8003032:	f7fd f879 	bl	8000128 <__udivsi3>
 8003036:	0003      	movs	r3, r0
 8003038:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	2b0f      	cmp	r3, #15
 800303e:	d90a      	bls.n	8003056 <UART_SetConfig+0x572>
 8003040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	025b      	lsls	r3, r3, #9
 8003046:	429a      	cmp	r2, r3
 8003048:	d205      	bcs.n	8003056 <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	b29a      	uxth	r2, r3
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	e006      	b.n	8003064 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8003056:	231a      	movs	r3, #26
 8003058:	2220      	movs	r2, #32
 800305a:	4694      	mov	ip, r2
 800305c:	44bc      	add	ip, r7
 800305e:	4463      	add	r3, ip
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	226a      	movs	r2, #106	; 0x6a
 8003068:	2101      	movs	r1, #1
 800306a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	2268      	movs	r2, #104	; 0x68
 8003070:	2101      	movs	r1, #1
 8003072:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	2200      	movs	r2, #0
 8003078:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	2200      	movs	r2, #0
 800307e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003080:	231a      	movs	r3, #26
 8003082:	2220      	movs	r2, #32
 8003084:	4694      	mov	ip, r2
 8003086:	44bc      	add	ip, r7
 8003088:	4463      	add	r3, ip
 800308a:	781b      	ldrb	r3, [r3, #0]
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b010      	add	sp, #64	; 0x40
 8003092:	bdb0      	pop	{r4, r5, r7, pc}
 8003094:	08003f94 	.word	0x08003f94
 8003098:	00f42400 	.word	0x00f42400

0800309c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	2201      	movs	r2, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	d00b      	beq.n	80030c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a4a      	ldr	r2, [pc, #296]	; (80031e0 <UART_AdvFeatureConfig+0x144>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	2202      	movs	r2, #2
 80030cc:	4013      	ands	r3, r2
 80030ce:	d00b      	beq.n	80030e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a43      	ldr	r2, [pc, #268]	; (80031e4 <UART_AdvFeatureConfig+0x148>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	2204      	movs	r2, #4
 80030ee:	4013      	ands	r3, r2
 80030f0:	d00b      	beq.n	800310a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a3b      	ldr	r2, [pc, #236]	; (80031e8 <UART_AdvFeatureConfig+0x14c>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	0019      	movs	r1, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	2208      	movs	r2, #8
 8003110:	4013      	ands	r3, r2
 8003112:	d00b      	beq.n	800312c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4a34      	ldr	r2, [pc, #208]	; (80031ec <UART_AdvFeatureConfig+0x150>)
 800311c:	4013      	ands	r3, r2
 800311e:	0019      	movs	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	2210      	movs	r2, #16
 8003132:	4013      	ands	r3, r2
 8003134:	d00b      	beq.n	800314e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a2c      	ldr	r2, [pc, #176]	; (80031f0 <UART_AdvFeatureConfig+0x154>)
 800313e:	4013      	ands	r3, r2
 8003140:	0019      	movs	r1, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	2220      	movs	r2, #32
 8003154:	4013      	ands	r3, r2
 8003156:	d00b      	beq.n	8003170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <UART_AdvFeatureConfig+0x158>)
 8003160:	4013      	ands	r3, r2
 8003162:	0019      	movs	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	2240      	movs	r2, #64	; 0x40
 8003176:	4013      	ands	r3, r2
 8003178:	d01d      	beq.n	80031b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <UART_AdvFeatureConfig+0x15c>)
 8003182:	4013      	ands	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	035b      	lsls	r3, r3, #13
 800319a:	429a      	cmp	r2, r3
 800319c:	d10b      	bne.n	80031b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a15      	ldr	r2, [pc, #84]	; (80031fc <UART_AdvFeatureConfig+0x160>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	4013      	ands	r3, r2
 80031be:	d00b      	beq.n	80031d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4a0e      	ldr	r2, [pc, #56]	; (8003200 <UART_AdvFeatureConfig+0x164>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]
  }
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	fffdffff 	.word	0xfffdffff
 80031e4:	fffeffff 	.word	0xfffeffff
 80031e8:	fffbffff 	.word	0xfffbffff
 80031ec:	ffff7fff 	.word	0xffff7fff
 80031f0:	ffffefff 	.word	0xffffefff
 80031f4:	ffffdfff 	.word	0xffffdfff
 80031f8:	ffefffff 	.word	0xffefffff
 80031fc:	ff9fffff 	.word	0xff9fffff
 8003200:	fff7ffff 	.word	0xfff7ffff

08003204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af02      	add	r7, sp, #8
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	228c      	movs	r2, #140	; 0x8c
 8003210:	2100      	movs	r1, #0
 8003212:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003214:	f7fd fd60 	bl	8000cd8 <HAL_GetTick>
 8003218:	0003      	movs	r3, r0
 800321a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2208      	movs	r2, #8
 8003224:	4013      	ands	r3, r2
 8003226:	2b08      	cmp	r3, #8
 8003228:	d10c      	bne.n	8003244 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	0391      	lsls	r1, r2, #14
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <UART_CheckIdleState+0x90>)
 8003234:	9200      	str	r2, [sp, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	f000 f82e 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 800323c:	1e03      	subs	r3, r0, #0
 800323e:	d001      	beq.n	8003244 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e023      	b.n	800328c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2204      	movs	r2, #4
 800324c:	4013      	ands	r3, r2
 800324e:	2b04      	cmp	r3, #4
 8003250:	d10c      	bne.n	800326c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	03d1      	lsls	r1, r2, #15
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <UART_CheckIdleState+0x90>)
 800325c:	9200      	str	r2, [sp, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	f000 f81a 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 8003264:	1e03      	subs	r3, r0, #0
 8003266:	d001      	beq.n	800326c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e00f      	b.n	800328c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2284      	movs	r2, #132	; 0x84
 8003270:	2120      	movs	r1, #32
 8003272:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2288      	movs	r2, #136	; 0x88
 8003278:	2120      	movs	r1, #32
 800327a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b004      	add	sp, #16
 8003292:	bd80      	pop	{r7, pc}
 8003294:	01ffffff 	.word	0x01ffffff

08003298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b094      	sub	sp, #80	; 0x50
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a8:	e0a7      	b.n	80033fa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ac:	3301      	adds	r3, #1
 80032ae:	d100      	bne.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80032b0:	e0a3      	b.n	80033fa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b2:	f7fd fd11 	bl	8000cd8 <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d13f      	bne.n	8003348 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c8:	f3ef 8310 	mrs	r3, PRIMASK
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
 80032d2:	2301      	movs	r3, #1
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	f383 8810 	msr	PRIMASK, r3
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	494e      	ldr	r1, [pc, #312]	; (8003424 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80032ea:	400a      	ands	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	f383 8810 	msr	PRIMASK, r3
}
 80032f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032fa:	f3ef 8310 	mrs	r3, PRIMASK
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003302:	643b      	str	r3, [r7, #64]	; 0x40
 8003304:	2301      	movs	r3, #1
 8003306:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	f383 8810 	msr	PRIMASK, r3
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2101      	movs	r1, #1
 800331c:	438a      	bics	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003326:	f383 8810 	msr	PRIMASK, r3
}
 800332a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2284      	movs	r2, #132	; 0x84
 8003330:	2120      	movs	r1, #32
 8003332:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2288      	movs	r2, #136	; 0x88
 8003338:	2120      	movs	r1, #32
 800333a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2280      	movs	r2, #128	; 0x80
 8003340:	2100      	movs	r1, #0
 8003342:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e069      	b.n	800341c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2204      	movs	r2, #4
 8003350:	4013      	ands	r3, r2
 8003352:	d052      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69da      	ldr	r2, [r3, #28]
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	401a      	ands	r2, r3
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	429a      	cmp	r2, r3
 8003366:	d148      	bne.n	80033fa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2280      	movs	r2, #128	; 0x80
 800336e:	0112      	lsls	r2, r2, #4
 8003370:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003372:	f3ef 8310 	mrs	r3, PRIMASK
 8003376:	613b      	str	r3, [r7, #16]
  return(result);
 8003378:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800337a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800337c:	2301      	movs	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4924      	ldr	r1, [pc, #144]	; (8003424 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003394:	400a      	ands	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f383 8810 	msr	PRIMASK, r3
}
 80033a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a4:	f3ef 8310 	mrs	r3, PRIMASK
 80033a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80033aa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ae:	2301      	movs	r3, #1
 80033b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f383 8810 	msr	PRIMASK, r3
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2101      	movs	r1, #1
 80033c6:	438a      	bics	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f383 8810 	msr	PRIMASK, r3
}
 80033d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2284      	movs	r2, #132	; 0x84
 80033da:	2120      	movs	r1, #32
 80033dc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2288      	movs	r2, #136	; 0x88
 80033e2:	2120      	movs	r1, #32
 80033e4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	228c      	movs	r2, #140	; 0x8c
 80033ea:	2120      	movs	r1, #32
 80033ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	2100      	movs	r1, #0
 80033f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e010      	b.n	800341c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	425a      	negs	r2, r3
 800340a:	4153      	adcs	r3, r2
 800340c:	b2db      	uxtb	r3, r3
 800340e:	001a      	movs	r2, r3
 8003410:	1dfb      	adds	r3, r7, #7
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d100      	bne.n	800341a <UART_WaitOnFlagUntilTimeout+0x182>
 8003418:	e747      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b014      	add	sp, #80	; 0x50
 8003422:	bd80      	pop	{r7, pc}
 8003424:	fffffe5f 	.word	0xfffffe5f

08003428 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	5c9b      	ldrb	r3, [r3, r2]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_UARTEx_DisableFifoMode+0x16>
 800343a:	2302      	movs	r3, #2
 800343c:	e027      	b.n	800348e <HAL_UARTEx_DisableFifoMode+0x66>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2280      	movs	r2, #128	; 0x80
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2284      	movs	r2, #132	; 0x84
 800344a:	2124      	movs	r1, #36	; 0x24
 800344c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2101      	movs	r1, #1
 8003462:	438a      	bics	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <HAL_UARTEx_DisableFifoMode+0x70>)
 800346a:	4013      	ands	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2284      	movs	r2, #132	; 0x84
 8003480:	2120      	movs	r1, #32
 8003482:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b004      	add	sp, #16
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	dfffffff 	.word	0xdfffffff

0800349c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2280      	movs	r2, #128	; 0x80
 80034aa:	5c9b      	ldrb	r3, [r3, r2]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e02e      	b.n	8003512 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	2101      	movs	r1, #1
 80034ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2284      	movs	r2, #132	; 0x84
 80034c0:	2124      	movs	r1, #36	; 0x24
 80034c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2101      	movs	r1, #1
 80034d8:	438a      	bics	r2, r1
 80034da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	08d9      	lsrs	r1, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	0018      	movs	r0, r3
 80034f4:	f000 f854 	bl	80035a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2284      	movs	r2, #132	; 0x84
 8003504:	2120      	movs	r1, #32
 8003506:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	2100      	movs	r1, #0
 800350e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b004      	add	sp, #16
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	5c9b      	ldrb	r3, [r3, r2]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003530:	2302      	movs	r3, #2
 8003532:	e02f      	b.n	8003594 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	2101      	movs	r1, #1
 800353a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2284      	movs	r2, #132	; 0x84
 8003540:	2124      	movs	r1, #36	; 0x24
 8003542:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2101      	movs	r1, #1
 8003558:	438a      	bics	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	4a0e      	ldr	r2, [pc, #56]	; (800359c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003564:	4013      	ands	r3, r2
 8003566:	0019      	movs	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0018      	movs	r0, r3
 8003576:	f000 f813 	bl	80035a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2284      	movs	r2, #132	; 0x84
 8003586:	2120      	movs	r1, #32
 8003588:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	2100      	movs	r1, #0
 8003590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b004      	add	sp, #16
 800359a:	bd80      	pop	{r7, pc}
 800359c:	f1ffffff 	.word	0xf1ffffff

080035a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80035a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	226a      	movs	r2, #106	; 0x6a
 80035b4:	2101      	movs	r1, #1
 80035b6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2268      	movs	r2, #104	; 0x68
 80035bc:	2101      	movs	r1, #1
 80035be:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80035c0:	e043      	b.n	800364a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80035c2:	260f      	movs	r6, #15
 80035c4:	19bb      	adds	r3, r7, r6
 80035c6:	2208      	movs	r2, #8
 80035c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80035ca:	200e      	movs	r0, #14
 80035cc:	183b      	adds	r3, r7, r0
 80035ce:	2208      	movs	r2, #8
 80035d0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	0e5b      	lsrs	r3, r3, #25
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	240d      	movs	r4, #13
 80035de:	193b      	adds	r3, r7, r4
 80035e0:	2107      	movs	r1, #7
 80035e2:	400a      	ands	r2, r1
 80035e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	0f5b      	lsrs	r3, r3, #29
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	250c      	movs	r5, #12
 80035f2:	197b      	adds	r3, r7, r5
 80035f4:	2107      	movs	r1, #7
 80035f6:	400a      	ands	r2, r1
 80035f8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035fa:	183b      	adds	r3, r7, r0
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	197a      	adds	r2, r7, r5
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	4914      	ldr	r1, [pc, #80]	; (8003654 <UARTEx_SetNbDataToProcess+0xb4>)
 8003604:	5c8a      	ldrb	r2, [r1, r2]
 8003606:	435a      	muls	r2, r3
 8003608:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800360a:	197b      	adds	r3, r7, r5
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <UARTEx_SetNbDataToProcess+0xb8>)
 8003610:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003612:	0019      	movs	r1, r3
 8003614:	f7fc fe12 	bl	800023c <__divsi3>
 8003618:	0003      	movs	r3, r0
 800361a:	b299      	uxth	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	226a      	movs	r2, #106	; 0x6a
 8003620:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003622:	19bb      	adds	r3, r7, r6
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	193a      	adds	r2, r7, r4
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	490a      	ldr	r1, [pc, #40]	; (8003654 <UARTEx_SetNbDataToProcess+0xb4>)
 800362c:	5c8a      	ldrb	r2, [r1, r2]
 800362e:	435a      	muls	r2, r3
 8003630:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003632:	193b      	adds	r3, r7, r4
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	4a08      	ldr	r2, [pc, #32]	; (8003658 <UARTEx_SetNbDataToProcess+0xb8>)
 8003638:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800363a:	0019      	movs	r1, r3
 800363c:	f7fc fdfe 	bl	800023c <__divsi3>
 8003640:	0003      	movs	r3, r0
 8003642:	b299      	uxth	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2268      	movs	r2, #104	; 0x68
 8003648:	5299      	strh	r1, [r3, r2]
}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	b005      	add	sp, #20
 8003650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	08003fac 	.word	0x08003fac
 8003658:	08003fb4 	.word	0x08003fb4

0800365c <__errno>:
 800365c:	4b01      	ldr	r3, [pc, #4]	; (8003664 <__errno+0x8>)
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	4770      	bx	lr
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	2000000c 	.word	0x2000000c

08003668 <__libc_init_array>:
 8003668:	b570      	push	{r4, r5, r6, lr}
 800366a:	2600      	movs	r6, #0
 800366c:	4d0c      	ldr	r5, [pc, #48]	; (80036a0 <__libc_init_array+0x38>)
 800366e:	4c0d      	ldr	r4, [pc, #52]	; (80036a4 <__libc_init_array+0x3c>)
 8003670:	1b64      	subs	r4, r4, r5
 8003672:	10a4      	asrs	r4, r4, #2
 8003674:	42a6      	cmp	r6, r4
 8003676:	d109      	bne.n	800368c <__libc_init_array+0x24>
 8003678:	2600      	movs	r6, #0
 800367a:	f000 fc47 	bl	8003f0c <_init>
 800367e:	4d0a      	ldr	r5, [pc, #40]	; (80036a8 <__libc_init_array+0x40>)
 8003680:	4c0a      	ldr	r4, [pc, #40]	; (80036ac <__libc_init_array+0x44>)
 8003682:	1b64      	subs	r4, r4, r5
 8003684:	10a4      	asrs	r4, r4, #2
 8003686:	42a6      	cmp	r6, r4
 8003688:	d105      	bne.n	8003696 <__libc_init_array+0x2e>
 800368a:	bd70      	pop	{r4, r5, r6, pc}
 800368c:	00b3      	lsls	r3, r6, #2
 800368e:	58eb      	ldr	r3, [r5, r3]
 8003690:	4798      	blx	r3
 8003692:	3601      	adds	r6, #1
 8003694:	e7ee      	b.n	8003674 <__libc_init_array+0xc>
 8003696:	00b3      	lsls	r3, r6, #2
 8003698:	58eb      	ldr	r3, [r5, r3]
 800369a:	4798      	blx	r3
 800369c:	3601      	adds	r6, #1
 800369e:	e7f2      	b.n	8003686 <__libc_init_array+0x1e>
 80036a0:	08003ff8 	.word	0x08003ff8
 80036a4:	08003ff8 	.word	0x08003ff8
 80036a8:	08003ff8 	.word	0x08003ff8
 80036ac:	08003ffc 	.word	0x08003ffc

080036b0 <memset>:
 80036b0:	0003      	movs	r3, r0
 80036b2:	1882      	adds	r2, r0, r2
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d100      	bne.n	80036ba <memset+0xa>
 80036b8:	4770      	bx	lr
 80036ba:	7019      	strb	r1, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	e7f9      	b.n	80036b4 <memset+0x4>

080036c0 <siprintf>:
 80036c0:	b40e      	push	{r1, r2, r3}
 80036c2:	b500      	push	{lr}
 80036c4:	490b      	ldr	r1, [pc, #44]	; (80036f4 <siprintf+0x34>)
 80036c6:	b09c      	sub	sp, #112	; 0x70
 80036c8:	ab1d      	add	r3, sp, #116	; 0x74
 80036ca:	9002      	str	r0, [sp, #8]
 80036cc:	9006      	str	r0, [sp, #24]
 80036ce:	9107      	str	r1, [sp, #28]
 80036d0:	9104      	str	r1, [sp, #16]
 80036d2:	4809      	ldr	r0, [pc, #36]	; (80036f8 <siprintf+0x38>)
 80036d4:	4909      	ldr	r1, [pc, #36]	; (80036fc <siprintf+0x3c>)
 80036d6:	cb04      	ldmia	r3!, {r2}
 80036d8:	9105      	str	r1, [sp, #20]
 80036da:	6800      	ldr	r0, [r0, #0]
 80036dc:	a902      	add	r1, sp, #8
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	f000 f870 	bl	80037c4 <_svfiprintf_r>
 80036e4:	2300      	movs	r3, #0
 80036e6:	9a02      	ldr	r2, [sp, #8]
 80036e8:	7013      	strb	r3, [r2, #0]
 80036ea:	b01c      	add	sp, #112	; 0x70
 80036ec:	bc08      	pop	{r3}
 80036ee:	b003      	add	sp, #12
 80036f0:	4718      	bx	r3
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	7fffffff 	.word	0x7fffffff
 80036f8:	2000000c 	.word	0x2000000c
 80036fc:	ffff0208 	.word	0xffff0208

08003700 <__ssputs_r>:
 8003700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003702:	688e      	ldr	r6, [r1, #8]
 8003704:	b085      	sub	sp, #20
 8003706:	0007      	movs	r7, r0
 8003708:	000c      	movs	r4, r1
 800370a:	9203      	str	r2, [sp, #12]
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	429e      	cmp	r6, r3
 8003710:	d83c      	bhi.n	800378c <__ssputs_r+0x8c>
 8003712:	2390      	movs	r3, #144	; 0x90
 8003714:	898a      	ldrh	r2, [r1, #12]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	421a      	tst	r2, r3
 800371a:	d034      	beq.n	8003786 <__ssputs_r+0x86>
 800371c:	2503      	movs	r5, #3
 800371e:	6909      	ldr	r1, [r1, #16]
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	1a5b      	subs	r3, r3, r1
 8003724:	9302      	str	r3, [sp, #8]
 8003726:	6963      	ldr	r3, [r4, #20]
 8003728:	9802      	ldr	r0, [sp, #8]
 800372a:	435d      	muls	r5, r3
 800372c:	0feb      	lsrs	r3, r5, #31
 800372e:	195d      	adds	r5, r3, r5
 8003730:	9b01      	ldr	r3, [sp, #4]
 8003732:	106d      	asrs	r5, r5, #1
 8003734:	3301      	adds	r3, #1
 8003736:	181b      	adds	r3, r3, r0
 8003738:	42ab      	cmp	r3, r5
 800373a:	d900      	bls.n	800373e <__ssputs_r+0x3e>
 800373c:	001d      	movs	r5, r3
 800373e:	0553      	lsls	r3, r2, #21
 8003740:	d532      	bpl.n	80037a8 <__ssputs_r+0xa8>
 8003742:	0029      	movs	r1, r5
 8003744:	0038      	movs	r0, r7
 8003746:	f000 fb31 	bl	8003dac <_malloc_r>
 800374a:	1e06      	subs	r6, r0, #0
 800374c:	d109      	bne.n	8003762 <__ssputs_r+0x62>
 800374e:	230c      	movs	r3, #12
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	2340      	movs	r3, #64	; 0x40
 8003754:	2001      	movs	r0, #1
 8003756:	89a2      	ldrh	r2, [r4, #12]
 8003758:	4240      	negs	r0, r0
 800375a:	4313      	orrs	r3, r2
 800375c:	81a3      	strh	r3, [r4, #12]
 800375e:	b005      	add	sp, #20
 8003760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003762:	9a02      	ldr	r2, [sp, #8]
 8003764:	6921      	ldr	r1, [r4, #16]
 8003766:	f000 faba 	bl	8003cde <memcpy>
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	4a14      	ldr	r2, [pc, #80]	; (80037c0 <__ssputs_r+0xc0>)
 800376e:	401a      	ands	r2, r3
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	4313      	orrs	r3, r2
 8003774:	81a3      	strh	r3, [r4, #12]
 8003776:	9b02      	ldr	r3, [sp, #8]
 8003778:	6126      	str	r6, [r4, #16]
 800377a:	18f6      	adds	r6, r6, r3
 800377c:	6026      	str	r6, [r4, #0]
 800377e:	6165      	str	r5, [r4, #20]
 8003780:	9e01      	ldr	r6, [sp, #4]
 8003782:	1aed      	subs	r5, r5, r3
 8003784:	60a5      	str	r5, [r4, #8]
 8003786:	9b01      	ldr	r3, [sp, #4]
 8003788:	429e      	cmp	r6, r3
 800378a:	d900      	bls.n	800378e <__ssputs_r+0x8e>
 800378c:	9e01      	ldr	r6, [sp, #4]
 800378e:	0032      	movs	r2, r6
 8003790:	9903      	ldr	r1, [sp, #12]
 8003792:	6820      	ldr	r0, [r4, #0]
 8003794:	f000 faac 	bl	8003cf0 <memmove>
 8003798:	68a3      	ldr	r3, [r4, #8]
 800379a:	2000      	movs	r0, #0
 800379c:	1b9b      	subs	r3, r3, r6
 800379e:	60a3      	str	r3, [r4, #8]
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	199e      	adds	r6, r3, r6
 80037a4:	6026      	str	r6, [r4, #0]
 80037a6:	e7da      	b.n	800375e <__ssputs_r+0x5e>
 80037a8:	002a      	movs	r2, r5
 80037aa:	0038      	movs	r0, r7
 80037ac:	f000 fb5c 	bl	8003e68 <_realloc_r>
 80037b0:	1e06      	subs	r6, r0, #0
 80037b2:	d1e0      	bne.n	8003776 <__ssputs_r+0x76>
 80037b4:	0038      	movs	r0, r7
 80037b6:	6921      	ldr	r1, [r4, #16]
 80037b8:	f000 faae 	bl	8003d18 <_free_r>
 80037bc:	e7c7      	b.n	800374e <__ssputs_r+0x4e>
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	fffffb7f 	.word	0xfffffb7f

080037c4 <_svfiprintf_r>:
 80037c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c6:	b0a1      	sub	sp, #132	; 0x84
 80037c8:	9003      	str	r0, [sp, #12]
 80037ca:	001d      	movs	r5, r3
 80037cc:	898b      	ldrh	r3, [r1, #12]
 80037ce:	000f      	movs	r7, r1
 80037d0:	0016      	movs	r6, r2
 80037d2:	061b      	lsls	r3, r3, #24
 80037d4:	d511      	bpl.n	80037fa <_svfiprintf_r+0x36>
 80037d6:	690b      	ldr	r3, [r1, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10e      	bne.n	80037fa <_svfiprintf_r+0x36>
 80037dc:	2140      	movs	r1, #64	; 0x40
 80037de:	f000 fae5 	bl	8003dac <_malloc_r>
 80037e2:	6038      	str	r0, [r7, #0]
 80037e4:	6138      	str	r0, [r7, #16]
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d105      	bne.n	80037f6 <_svfiprintf_r+0x32>
 80037ea:	230c      	movs	r3, #12
 80037ec:	9a03      	ldr	r2, [sp, #12]
 80037ee:	3801      	subs	r0, #1
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	b021      	add	sp, #132	; 0x84
 80037f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f6:	2340      	movs	r3, #64	; 0x40
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	2300      	movs	r3, #0
 80037fc:	ac08      	add	r4, sp, #32
 80037fe:	6163      	str	r3, [r4, #20]
 8003800:	3320      	adds	r3, #32
 8003802:	7663      	strb	r3, [r4, #25]
 8003804:	3310      	adds	r3, #16
 8003806:	76a3      	strb	r3, [r4, #26]
 8003808:	9507      	str	r5, [sp, #28]
 800380a:	0035      	movs	r5, r6
 800380c:	782b      	ldrb	r3, [r5, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <_svfiprintf_r+0x52>
 8003812:	2b25      	cmp	r3, #37	; 0x25
 8003814:	d147      	bne.n	80038a6 <_svfiprintf_r+0xe2>
 8003816:	1bab      	subs	r3, r5, r6
 8003818:	9305      	str	r3, [sp, #20]
 800381a:	42b5      	cmp	r5, r6
 800381c:	d00c      	beq.n	8003838 <_svfiprintf_r+0x74>
 800381e:	0032      	movs	r2, r6
 8003820:	0039      	movs	r1, r7
 8003822:	9803      	ldr	r0, [sp, #12]
 8003824:	f7ff ff6c 	bl	8003700 <__ssputs_r>
 8003828:	1c43      	adds	r3, r0, #1
 800382a:	d100      	bne.n	800382e <_svfiprintf_r+0x6a>
 800382c:	e0ae      	b.n	800398c <_svfiprintf_r+0x1c8>
 800382e:	6962      	ldr	r2, [r4, #20]
 8003830:	9b05      	ldr	r3, [sp, #20]
 8003832:	4694      	mov	ip, r2
 8003834:	4463      	add	r3, ip
 8003836:	6163      	str	r3, [r4, #20]
 8003838:	782b      	ldrb	r3, [r5, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d100      	bne.n	8003840 <_svfiprintf_r+0x7c>
 800383e:	e0a5      	b.n	800398c <_svfiprintf_r+0x1c8>
 8003840:	2201      	movs	r2, #1
 8003842:	2300      	movs	r3, #0
 8003844:	4252      	negs	r2, r2
 8003846:	6062      	str	r2, [r4, #4]
 8003848:	a904      	add	r1, sp, #16
 800384a:	3254      	adds	r2, #84	; 0x54
 800384c:	1852      	adds	r2, r2, r1
 800384e:	1c6e      	adds	r6, r5, #1
 8003850:	6023      	str	r3, [r4, #0]
 8003852:	60e3      	str	r3, [r4, #12]
 8003854:	60a3      	str	r3, [r4, #8]
 8003856:	7013      	strb	r3, [r2, #0]
 8003858:	65a3      	str	r3, [r4, #88]	; 0x58
 800385a:	2205      	movs	r2, #5
 800385c:	7831      	ldrb	r1, [r6, #0]
 800385e:	4854      	ldr	r0, [pc, #336]	; (80039b0 <_svfiprintf_r+0x1ec>)
 8003860:	f000 fa32 	bl	8003cc8 <memchr>
 8003864:	1c75      	adds	r5, r6, #1
 8003866:	2800      	cmp	r0, #0
 8003868:	d11f      	bne.n	80038aa <_svfiprintf_r+0xe6>
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	06d3      	lsls	r3, r2, #27
 800386e:	d504      	bpl.n	800387a <_svfiprintf_r+0xb6>
 8003870:	2353      	movs	r3, #83	; 0x53
 8003872:	a904      	add	r1, sp, #16
 8003874:	185b      	adds	r3, r3, r1
 8003876:	2120      	movs	r1, #32
 8003878:	7019      	strb	r1, [r3, #0]
 800387a:	0713      	lsls	r3, r2, #28
 800387c:	d504      	bpl.n	8003888 <_svfiprintf_r+0xc4>
 800387e:	2353      	movs	r3, #83	; 0x53
 8003880:	a904      	add	r1, sp, #16
 8003882:	185b      	adds	r3, r3, r1
 8003884:	212b      	movs	r1, #43	; 0x2b
 8003886:	7019      	strb	r1, [r3, #0]
 8003888:	7833      	ldrb	r3, [r6, #0]
 800388a:	2b2a      	cmp	r3, #42	; 0x2a
 800388c:	d016      	beq.n	80038bc <_svfiprintf_r+0xf8>
 800388e:	0035      	movs	r5, r6
 8003890:	2100      	movs	r1, #0
 8003892:	200a      	movs	r0, #10
 8003894:	68e3      	ldr	r3, [r4, #12]
 8003896:	782a      	ldrb	r2, [r5, #0]
 8003898:	1c6e      	adds	r6, r5, #1
 800389a:	3a30      	subs	r2, #48	; 0x30
 800389c:	2a09      	cmp	r2, #9
 800389e:	d94e      	bls.n	800393e <_svfiprintf_r+0x17a>
 80038a0:	2900      	cmp	r1, #0
 80038a2:	d111      	bne.n	80038c8 <_svfiprintf_r+0x104>
 80038a4:	e017      	b.n	80038d6 <_svfiprintf_r+0x112>
 80038a6:	3501      	adds	r5, #1
 80038a8:	e7b0      	b.n	800380c <_svfiprintf_r+0x48>
 80038aa:	4b41      	ldr	r3, [pc, #260]	; (80039b0 <_svfiprintf_r+0x1ec>)
 80038ac:	6822      	ldr	r2, [r4, #0]
 80038ae:	1ac0      	subs	r0, r0, r3
 80038b0:	2301      	movs	r3, #1
 80038b2:	4083      	lsls	r3, r0
 80038b4:	4313      	orrs	r3, r2
 80038b6:	002e      	movs	r6, r5
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	e7ce      	b.n	800385a <_svfiprintf_r+0x96>
 80038bc:	9b07      	ldr	r3, [sp, #28]
 80038be:	1d19      	adds	r1, r3, #4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	9107      	str	r1, [sp, #28]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db01      	blt.n	80038cc <_svfiprintf_r+0x108>
 80038c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80038ca:	e004      	b.n	80038d6 <_svfiprintf_r+0x112>
 80038cc:	425b      	negs	r3, r3
 80038ce:	60e3      	str	r3, [r4, #12]
 80038d0:	2302      	movs	r3, #2
 80038d2:	4313      	orrs	r3, r2
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	782b      	ldrb	r3, [r5, #0]
 80038d8:	2b2e      	cmp	r3, #46	; 0x2e
 80038da:	d10a      	bne.n	80038f2 <_svfiprintf_r+0x12e>
 80038dc:	786b      	ldrb	r3, [r5, #1]
 80038de:	2b2a      	cmp	r3, #42	; 0x2a
 80038e0:	d135      	bne.n	800394e <_svfiprintf_r+0x18a>
 80038e2:	9b07      	ldr	r3, [sp, #28]
 80038e4:	3502      	adds	r5, #2
 80038e6:	1d1a      	adds	r2, r3, #4
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	9207      	str	r2, [sp, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	db2b      	blt.n	8003948 <_svfiprintf_r+0x184>
 80038f0:	9309      	str	r3, [sp, #36]	; 0x24
 80038f2:	4e30      	ldr	r6, [pc, #192]	; (80039b4 <_svfiprintf_r+0x1f0>)
 80038f4:	2203      	movs	r2, #3
 80038f6:	0030      	movs	r0, r6
 80038f8:	7829      	ldrb	r1, [r5, #0]
 80038fa:	f000 f9e5 	bl	8003cc8 <memchr>
 80038fe:	2800      	cmp	r0, #0
 8003900:	d006      	beq.n	8003910 <_svfiprintf_r+0x14c>
 8003902:	2340      	movs	r3, #64	; 0x40
 8003904:	1b80      	subs	r0, r0, r6
 8003906:	4083      	lsls	r3, r0
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	3501      	adds	r5, #1
 800390c:	4313      	orrs	r3, r2
 800390e:	6023      	str	r3, [r4, #0]
 8003910:	7829      	ldrb	r1, [r5, #0]
 8003912:	2206      	movs	r2, #6
 8003914:	4828      	ldr	r0, [pc, #160]	; (80039b8 <_svfiprintf_r+0x1f4>)
 8003916:	1c6e      	adds	r6, r5, #1
 8003918:	7621      	strb	r1, [r4, #24]
 800391a:	f000 f9d5 	bl	8003cc8 <memchr>
 800391e:	2800      	cmp	r0, #0
 8003920:	d03c      	beq.n	800399c <_svfiprintf_r+0x1d8>
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <_svfiprintf_r+0x1f8>)
 8003924:	2b00      	cmp	r3, #0
 8003926:	d125      	bne.n	8003974 <_svfiprintf_r+0x1b0>
 8003928:	2207      	movs	r2, #7
 800392a:	9b07      	ldr	r3, [sp, #28]
 800392c:	3307      	adds	r3, #7
 800392e:	4393      	bics	r3, r2
 8003930:	3308      	adds	r3, #8
 8003932:	9307      	str	r3, [sp, #28]
 8003934:	6963      	ldr	r3, [r4, #20]
 8003936:	9a04      	ldr	r2, [sp, #16]
 8003938:	189b      	adds	r3, r3, r2
 800393a:	6163      	str	r3, [r4, #20]
 800393c:	e765      	b.n	800380a <_svfiprintf_r+0x46>
 800393e:	4343      	muls	r3, r0
 8003940:	0035      	movs	r5, r6
 8003942:	2101      	movs	r1, #1
 8003944:	189b      	adds	r3, r3, r2
 8003946:	e7a6      	b.n	8003896 <_svfiprintf_r+0xd2>
 8003948:	2301      	movs	r3, #1
 800394a:	425b      	negs	r3, r3
 800394c:	e7d0      	b.n	80038f0 <_svfiprintf_r+0x12c>
 800394e:	2300      	movs	r3, #0
 8003950:	200a      	movs	r0, #10
 8003952:	001a      	movs	r2, r3
 8003954:	3501      	adds	r5, #1
 8003956:	6063      	str	r3, [r4, #4]
 8003958:	7829      	ldrb	r1, [r5, #0]
 800395a:	1c6e      	adds	r6, r5, #1
 800395c:	3930      	subs	r1, #48	; 0x30
 800395e:	2909      	cmp	r1, #9
 8003960:	d903      	bls.n	800396a <_svfiprintf_r+0x1a6>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0c5      	beq.n	80038f2 <_svfiprintf_r+0x12e>
 8003966:	9209      	str	r2, [sp, #36]	; 0x24
 8003968:	e7c3      	b.n	80038f2 <_svfiprintf_r+0x12e>
 800396a:	4342      	muls	r2, r0
 800396c:	0035      	movs	r5, r6
 800396e:	2301      	movs	r3, #1
 8003970:	1852      	adds	r2, r2, r1
 8003972:	e7f1      	b.n	8003958 <_svfiprintf_r+0x194>
 8003974:	ab07      	add	r3, sp, #28
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	003a      	movs	r2, r7
 800397a:	0021      	movs	r1, r4
 800397c:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <_svfiprintf_r+0x1fc>)
 800397e:	9803      	ldr	r0, [sp, #12]
 8003980:	e000      	b.n	8003984 <_svfiprintf_r+0x1c0>
 8003982:	bf00      	nop
 8003984:	9004      	str	r0, [sp, #16]
 8003986:	9b04      	ldr	r3, [sp, #16]
 8003988:	3301      	adds	r3, #1
 800398a:	d1d3      	bne.n	8003934 <_svfiprintf_r+0x170>
 800398c:	89bb      	ldrh	r3, [r7, #12]
 800398e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003990:	065b      	lsls	r3, r3, #25
 8003992:	d400      	bmi.n	8003996 <_svfiprintf_r+0x1d2>
 8003994:	e72d      	b.n	80037f2 <_svfiprintf_r+0x2e>
 8003996:	2001      	movs	r0, #1
 8003998:	4240      	negs	r0, r0
 800399a:	e72a      	b.n	80037f2 <_svfiprintf_r+0x2e>
 800399c:	ab07      	add	r3, sp, #28
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	003a      	movs	r2, r7
 80039a2:	0021      	movs	r1, r4
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <_svfiprintf_r+0x1fc>)
 80039a6:	9803      	ldr	r0, [sp, #12]
 80039a8:	f000 f87c 	bl	8003aa4 <_printf_i>
 80039ac:	e7ea      	b.n	8003984 <_svfiprintf_r+0x1c0>
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	08003fbc 	.word	0x08003fbc
 80039b4:	08003fc2 	.word	0x08003fc2
 80039b8:	08003fc6 	.word	0x08003fc6
 80039bc:	00000000 	.word	0x00000000
 80039c0:	08003701 	.word	0x08003701

080039c4 <_printf_common>:
 80039c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039c6:	0015      	movs	r5, r2
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	688a      	ldr	r2, [r1, #8]
 80039cc:	690b      	ldr	r3, [r1, #16]
 80039ce:	000c      	movs	r4, r1
 80039d0:	9000      	str	r0, [sp, #0]
 80039d2:	4293      	cmp	r3, r2
 80039d4:	da00      	bge.n	80039d8 <_printf_common+0x14>
 80039d6:	0013      	movs	r3, r2
 80039d8:	0022      	movs	r2, r4
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	3243      	adds	r2, #67	; 0x43
 80039de:	7812      	ldrb	r2, [r2, #0]
 80039e0:	2a00      	cmp	r2, #0
 80039e2:	d001      	beq.n	80039e8 <_printf_common+0x24>
 80039e4:	3301      	adds	r3, #1
 80039e6:	602b      	str	r3, [r5, #0]
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	069b      	lsls	r3, r3, #26
 80039ec:	d502      	bpl.n	80039f4 <_printf_common+0x30>
 80039ee:	682b      	ldr	r3, [r5, #0]
 80039f0:	3302      	adds	r3, #2
 80039f2:	602b      	str	r3, [r5, #0]
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	2306      	movs	r3, #6
 80039f8:	0017      	movs	r7, r2
 80039fa:	401f      	ands	r7, r3
 80039fc:	421a      	tst	r2, r3
 80039fe:	d027      	beq.n	8003a50 <_printf_common+0x8c>
 8003a00:	0023      	movs	r3, r4
 8003a02:	3343      	adds	r3, #67	; 0x43
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	4193      	sbcs	r3, r2
 8003a0a:	6822      	ldr	r2, [r4, #0]
 8003a0c:	0692      	lsls	r2, r2, #26
 8003a0e:	d430      	bmi.n	8003a72 <_printf_common+0xae>
 8003a10:	0022      	movs	r2, r4
 8003a12:	9901      	ldr	r1, [sp, #4]
 8003a14:	9800      	ldr	r0, [sp, #0]
 8003a16:	9e08      	ldr	r6, [sp, #32]
 8003a18:	3243      	adds	r2, #67	; 0x43
 8003a1a:	47b0      	blx	r6
 8003a1c:	1c43      	adds	r3, r0, #1
 8003a1e:	d025      	beq.n	8003a6c <_printf_common+0xa8>
 8003a20:	2306      	movs	r3, #6
 8003a22:	6820      	ldr	r0, [r4, #0]
 8003a24:	682a      	ldr	r2, [r5, #0]
 8003a26:	68e1      	ldr	r1, [r4, #12]
 8003a28:	2500      	movs	r5, #0
 8003a2a:	4003      	ands	r3, r0
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d103      	bne.n	8003a38 <_printf_common+0x74>
 8003a30:	1a8d      	subs	r5, r1, r2
 8003a32:	43eb      	mvns	r3, r5
 8003a34:	17db      	asrs	r3, r3, #31
 8003a36:	401d      	ands	r5, r3
 8003a38:	68a3      	ldr	r3, [r4, #8]
 8003a3a:	6922      	ldr	r2, [r4, #16]
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	dd01      	ble.n	8003a44 <_printf_common+0x80>
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	18ed      	adds	r5, r5, r3
 8003a44:	2700      	movs	r7, #0
 8003a46:	42bd      	cmp	r5, r7
 8003a48:	d120      	bne.n	8003a8c <_printf_common+0xc8>
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	e010      	b.n	8003a70 <_printf_common+0xac>
 8003a4e:	3701      	adds	r7, #1
 8003a50:	68e3      	ldr	r3, [r4, #12]
 8003a52:	682a      	ldr	r2, [r5, #0]
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	42bb      	cmp	r3, r7
 8003a58:	ddd2      	ble.n	8003a00 <_printf_common+0x3c>
 8003a5a:	0022      	movs	r2, r4
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	9901      	ldr	r1, [sp, #4]
 8003a60:	9800      	ldr	r0, [sp, #0]
 8003a62:	9e08      	ldr	r6, [sp, #32]
 8003a64:	3219      	adds	r2, #25
 8003a66:	47b0      	blx	r6
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	d1f0      	bne.n	8003a4e <_printf_common+0x8a>
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	4240      	negs	r0, r0
 8003a70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a72:	2030      	movs	r0, #48	; 0x30
 8003a74:	18e1      	adds	r1, r4, r3
 8003a76:	3143      	adds	r1, #67	; 0x43
 8003a78:	7008      	strb	r0, [r1, #0]
 8003a7a:	0021      	movs	r1, r4
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	3145      	adds	r1, #69	; 0x45
 8003a80:	7809      	ldrb	r1, [r1, #0]
 8003a82:	18a2      	adds	r2, r4, r2
 8003a84:	3243      	adds	r2, #67	; 0x43
 8003a86:	3302      	adds	r3, #2
 8003a88:	7011      	strb	r1, [r2, #0]
 8003a8a:	e7c1      	b.n	8003a10 <_printf_common+0x4c>
 8003a8c:	0022      	movs	r2, r4
 8003a8e:	2301      	movs	r3, #1
 8003a90:	9901      	ldr	r1, [sp, #4]
 8003a92:	9800      	ldr	r0, [sp, #0]
 8003a94:	9e08      	ldr	r6, [sp, #32]
 8003a96:	321a      	adds	r2, #26
 8003a98:	47b0      	blx	r6
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	d0e6      	beq.n	8003a6c <_printf_common+0xa8>
 8003a9e:	3701      	adds	r7, #1
 8003aa0:	e7d1      	b.n	8003a46 <_printf_common+0x82>
	...

08003aa4 <_printf_i>:
 8003aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa6:	b08b      	sub	sp, #44	; 0x2c
 8003aa8:	9206      	str	r2, [sp, #24]
 8003aaa:	000a      	movs	r2, r1
 8003aac:	3243      	adds	r2, #67	; 0x43
 8003aae:	9307      	str	r3, [sp, #28]
 8003ab0:	9005      	str	r0, [sp, #20]
 8003ab2:	9204      	str	r2, [sp, #16]
 8003ab4:	7e0a      	ldrb	r2, [r1, #24]
 8003ab6:	000c      	movs	r4, r1
 8003ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003aba:	2a78      	cmp	r2, #120	; 0x78
 8003abc:	d806      	bhi.n	8003acc <_printf_i+0x28>
 8003abe:	2a62      	cmp	r2, #98	; 0x62
 8003ac0:	d808      	bhi.n	8003ad4 <_printf_i+0x30>
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	d100      	bne.n	8003ac8 <_printf_i+0x24>
 8003ac6:	e0c0      	b.n	8003c4a <_printf_i+0x1a6>
 8003ac8:	2a58      	cmp	r2, #88	; 0x58
 8003aca:	d052      	beq.n	8003b72 <_printf_i+0xce>
 8003acc:	0026      	movs	r6, r4
 8003ace:	3642      	adds	r6, #66	; 0x42
 8003ad0:	7032      	strb	r2, [r6, #0]
 8003ad2:	e022      	b.n	8003b1a <_printf_i+0x76>
 8003ad4:	0010      	movs	r0, r2
 8003ad6:	3863      	subs	r0, #99	; 0x63
 8003ad8:	2815      	cmp	r0, #21
 8003ada:	d8f7      	bhi.n	8003acc <_printf_i+0x28>
 8003adc:	f7fc fb1a 	bl	8000114 <__gnu_thumb1_case_shi>
 8003ae0:	001f0016 	.word	0x001f0016
 8003ae4:	fff6fff6 	.word	0xfff6fff6
 8003ae8:	fff6fff6 	.word	0xfff6fff6
 8003aec:	fff6001f 	.word	0xfff6001f
 8003af0:	fff6fff6 	.word	0xfff6fff6
 8003af4:	00a8fff6 	.word	0x00a8fff6
 8003af8:	009a0036 	.word	0x009a0036
 8003afc:	fff6fff6 	.word	0xfff6fff6
 8003b00:	fff600b9 	.word	0xfff600b9
 8003b04:	fff60036 	.word	0xfff60036
 8003b08:	009efff6 	.word	0x009efff6
 8003b0c:	0026      	movs	r6, r4
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	3642      	adds	r6, #66	; 0x42
 8003b12:	1d11      	adds	r1, r2, #4
 8003b14:	6019      	str	r1, [r3, #0]
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	7033      	strb	r3, [r6, #0]
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0a7      	b.n	8003c6e <_printf_i+0x1ca>
 8003b1e:	6808      	ldr	r0, [r1, #0]
 8003b20:	6819      	ldr	r1, [r3, #0]
 8003b22:	1d0a      	adds	r2, r1, #4
 8003b24:	0605      	lsls	r5, r0, #24
 8003b26:	d50b      	bpl.n	8003b40 <_printf_i+0x9c>
 8003b28:	680d      	ldr	r5, [r1, #0]
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	2d00      	cmp	r5, #0
 8003b2e:	da03      	bge.n	8003b38 <_printf_i+0x94>
 8003b30:	232d      	movs	r3, #45	; 0x2d
 8003b32:	9a04      	ldr	r2, [sp, #16]
 8003b34:	426d      	negs	r5, r5
 8003b36:	7013      	strb	r3, [r2, #0]
 8003b38:	4b61      	ldr	r3, [pc, #388]	; (8003cc0 <_printf_i+0x21c>)
 8003b3a:	270a      	movs	r7, #10
 8003b3c:	9303      	str	r3, [sp, #12]
 8003b3e:	e032      	b.n	8003ba6 <_printf_i+0x102>
 8003b40:	680d      	ldr	r5, [r1, #0]
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	0641      	lsls	r1, r0, #25
 8003b46:	d5f1      	bpl.n	8003b2c <_printf_i+0x88>
 8003b48:	b22d      	sxth	r5, r5
 8003b4a:	e7ef      	b.n	8003b2c <_printf_i+0x88>
 8003b4c:	680d      	ldr	r5, [r1, #0]
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	1d08      	adds	r0, r1, #4
 8003b52:	6018      	str	r0, [r3, #0]
 8003b54:	062e      	lsls	r6, r5, #24
 8003b56:	d501      	bpl.n	8003b5c <_printf_i+0xb8>
 8003b58:	680d      	ldr	r5, [r1, #0]
 8003b5a:	e003      	b.n	8003b64 <_printf_i+0xc0>
 8003b5c:	066d      	lsls	r5, r5, #25
 8003b5e:	d5fb      	bpl.n	8003b58 <_printf_i+0xb4>
 8003b60:	680d      	ldr	r5, [r1, #0]
 8003b62:	b2ad      	uxth	r5, r5
 8003b64:	4b56      	ldr	r3, [pc, #344]	; (8003cc0 <_printf_i+0x21c>)
 8003b66:	270a      	movs	r7, #10
 8003b68:	9303      	str	r3, [sp, #12]
 8003b6a:	2a6f      	cmp	r2, #111	; 0x6f
 8003b6c:	d117      	bne.n	8003b9e <_printf_i+0xfa>
 8003b6e:	2708      	movs	r7, #8
 8003b70:	e015      	b.n	8003b9e <_printf_i+0xfa>
 8003b72:	3145      	adds	r1, #69	; 0x45
 8003b74:	700a      	strb	r2, [r1, #0]
 8003b76:	4a52      	ldr	r2, [pc, #328]	; (8003cc0 <_printf_i+0x21c>)
 8003b78:	9203      	str	r2, [sp, #12]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	6821      	ldr	r1, [r4, #0]
 8003b7e:	ca20      	ldmia	r2!, {r5}
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	0608      	lsls	r0, r1, #24
 8003b84:	d550      	bpl.n	8003c28 <_printf_i+0x184>
 8003b86:	07cb      	lsls	r3, r1, #31
 8003b88:	d502      	bpl.n	8003b90 <_printf_i+0xec>
 8003b8a:	2320      	movs	r3, #32
 8003b8c:	4319      	orrs	r1, r3
 8003b8e:	6021      	str	r1, [r4, #0]
 8003b90:	2710      	movs	r7, #16
 8003b92:	2d00      	cmp	r5, #0
 8003b94:	d103      	bne.n	8003b9e <_printf_i+0xfa>
 8003b96:	2320      	movs	r3, #32
 8003b98:	6822      	ldr	r2, [r4, #0]
 8003b9a:	439a      	bics	r2, r3
 8003b9c:	6022      	str	r2, [r4, #0]
 8003b9e:	0023      	movs	r3, r4
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	3343      	adds	r3, #67	; 0x43
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	6863      	ldr	r3, [r4, #4]
 8003ba8:	60a3      	str	r3, [r4, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	db03      	blt.n	8003bb6 <_printf_i+0x112>
 8003bae:	2204      	movs	r2, #4
 8003bb0:	6821      	ldr	r1, [r4, #0]
 8003bb2:	4391      	bics	r1, r2
 8003bb4:	6021      	str	r1, [r4, #0]
 8003bb6:	2d00      	cmp	r5, #0
 8003bb8:	d102      	bne.n	8003bc0 <_printf_i+0x11c>
 8003bba:	9e04      	ldr	r6, [sp, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <_printf_i+0x136>
 8003bc0:	9e04      	ldr	r6, [sp, #16]
 8003bc2:	0028      	movs	r0, r5
 8003bc4:	0039      	movs	r1, r7
 8003bc6:	f7fc fb35 	bl	8000234 <__aeabi_uidivmod>
 8003bca:	9b03      	ldr	r3, [sp, #12]
 8003bcc:	3e01      	subs	r6, #1
 8003bce:	5c5b      	ldrb	r3, [r3, r1]
 8003bd0:	7033      	strb	r3, [r6, #0]
 8003bd2:	002b      	movs	r3, r5
 8003bd4:	0005      	movs	r5, r0
 8003bd6:	429f      	cmp	r7, r3
 8003bd8:	d9f3      	bls.n	8003bc2 <_printf_i+0x11e>
 8003bda:	2f08      	cmp	r7, #8
 8003bdc:	d109      	bne.n	8003bf2 <_printf_i+0x14e>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	07db      	lsls	r3, r3, #31
 8003be2:	d506      	bpl.n	8003bf2 <_printf_i+0x14e>
 8003be4:	6863      	ldr	r3, [r4, #4]
 8003be6:	6922      	ldr	r2, [r4, #16]
 8003be8:	4293      	cmp	r3, r2
 8003bea:	dc02      	bgt.n	8003bf2 <_printf_i+0x14e>
 8003bec:	2330      	movs	r3, #48	; 0x30
 8003bee:	3e01      	subs	r6, #1
 8003bf0:	7033      	strb	r3, [r6, #0]
 8003bf2:	9b04      	ldr	r3, [sp, #16]
 8003bf4:	1b9b      	subs	r3, r3, r6
 8003bf6:	6123      	str	r3, [r4, #16]
 8003bf8:	9b07      	ldr	r3, [sp, #28]
 8003bfa:	0021      	movs	r1, r4
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	9805      	ldr	r0, [sp, #20]
 8003c00:	9b06      	ldr	r3, [sp, #24]
 8003c02:	aa09      	add	r2, sp, #36	; 0x24
 8003c04:	f7ff fede 	bl	80039c4 <_printf_common>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d135      	bne.n	8003c78 <_printf_i+0x1d4>
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	4240      	negs	r0, r0
 8003c10:	b00b      	add	sp, #44	; 0x2c
 8003c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c14:	2220      	movs	r2, #32
 8003c16:	6809      	ldr	r1, [r1, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	6022      	str	r2, [r4, #0]
 8003c1c:	0022      	movs	r2, r4
 8003c1e:	2178      	movs	r1, #120	; 0x78
 8003c20:	3245      	adds	r2, #69	; 0x45
 8003c22:	7011      	strb	r1, [r2, #0]
 8003c24:	4a27      	ldr	r2, [pc, #156]	; (8003cc4 <_printf_i+0x220>)
 8003c26:	e7a7      	b.n	8003b78 <_printf_i+0xd4>
 8003c28:	0648      	lsls	r0, r1, #25
 8003c2a:	d5ac      	bpl.n	8003b86 <_printf_i+0xe2>
 8003c2c:	b2ad      	uxth	r5, r5
 8003c2e:	e7aa      	b.n	8003b86 <_printf_i+0xe2>
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	680d      	ldr	r5, [r1, #0]
 8003c34:	1d10      	adds	r0, r2, #4
 8003c36:	6949      	ldr	r1, [r1, #20]
 8003c38:	6018      	str	r0, [r3, #0]
 8003c3a:	6813      	ldr	r3, [r2, #0]
 8003c3c:	062e      	lsls	r6, r5, #24
 8003c3e:	d501      	bpl.n	8003c44 <_printf_i+0x1a0>
 8003c40:	6019      	str	r1, [r3, #0]
 8003c42:	e002      	b.n	8003c4a <_printf_i+0x1a6>
 8003c44:	066d      	lsls	r5, r5, #25
 8003c46:	d5fb      	bpl.n	8003c40 <_printf_i+0x19c>
 8003c48:	8019      	strh	r1, [r3, #0]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	9e04      	ldr	r6, [sp, #16]
 8003c4e:	6123      	str	r3, [r4, #16]
 8003c50:	e7d2      	b.n	8003bf8 <_printf_i+0x154>
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	1d11      	adds	r1, r2, #4
 8003c56:	6019      	str	r1, [r3, #0]
 8003c58:	6816      	ldr	r6, [r2, #0]
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	0030      	movs	r0, r6
 8003c5e:	6862      	ldr	r2, [r4, #4]
 8003c60:	f000 f832 	bl	8003cc8 <memchr>
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d001      	beq.n	8003c6c <_printf_i+0x1c8>
 8003c68:	1b80      	subs	r0, r0, r6
 8003c6a:	6060      	str	r0, [r4, #4]
 8003c6c:	6863      	ldr	r3, [r4, #4]
 8003c6e:	6123      	str	r3, [r4, #16]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9a04      	ldr	r2, [sp, #16]
 8003c74:	7013      	strb	r3, [r2, #0]
 8003c76:	e7bf      	b.n	8003bf8 <_printf_i+0x154>
 8003c78:	6923      	ldr	r3, [r4, #16]
 8003c7a:	0032      	movs	r2, r6
 8003c7c:	9906      	ldr	r1, [sp, #24]
 8003c7e:	9805      	ldr	r0, [sp, #20]
 8003c80:	9d07      	ldr	r5, [sp, #28]
 8003c82:	47a8      	blx	r5
 8003c84:	1c43      	adds	r3, r0, #1
 8003c86:	d0c1      	beq.n	8003c0c <_printf_i+0x168>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	079b      	lsls	r3, r3, #30
 8003c8c:	d415      	bmi.n	8003cba <_printf_i+0x216>
 8003c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c90:	68e0      	ldr	r0, [r4, #12]
 8003c92:	4298      	cmp	r0, r3
 8003c94:	dabc      	bge.n	8003c10 <_printf_i+0x16c>
 8003c96:	0018      	movs	r0, r3
 8003c98:	e7ba      	b.n	8003c10 <_printf_i+0x16c>
 8003c9a:	0022      	movs	r2, r4
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	9906      	ldr	r1, [sp, #24]
 8003ca0:	9805      	ldr	r0, [sp, #20]
 8003ca2:	9e07      	ldr	r6, [sp, #28]
 8003ca4:	3219      	adds	r2, #25
 8003ca6:	47b0      	blx	r6
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	d0af      	beq.n	8003c0c <_printf_i+0x168>
 8003cac:	3501      	adds	r5, #1
 8003cae:	68e3      	ldr	r3, [r4, #12]
 8003cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	42ab      	cmp	r3, r5
 8003cb6:	dcf0      	bgt.n	8003c9a <_printf_i+0x1f6>
 8003cb8:	e7e9      	b.n	8003c8e <_printf_i+0x1ea>
 8003cba:	2500      	movs	r5, #0
 8003cbc:	e7f7      	b.n	8003cae <_printf_i+0x20a>
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	08003fcd 	.word	0x08003fcd
 8003cc4:	08003fde 	.word	0x08003fde

08003cc8 <memchr>:
 8003cc8:	b2c9      	uxtb	r1, r1
 8003cca:	1882      	adds	r2, r0, r2
 8003ccc:	4290      	cmp	r0, r2
 8003cce:	d101      	bne.n	8003cd4 <memchr+0xc>
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	4770      	bx	lr
 8003cd4:	7803      	ldrb	r3, [r0, #0]
 8003cd6:	428b      	cmp	r3, r1
 8003cd8:	d0fb      	beq.n	8003cd2 <memchr+0xa>
 8003cda:	3001      	adds	r0, #1
 8003cdc:	e7f6      	b.n	8003ccc <memchr+0x4>

08003cde <memcpy>:
 8003cde:	2300      	movs	r3, #0
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d100      	bne.n	8003ce8 <memcpy+0xa>
 8003ce6:	bd10      	pop	{r4, pc}
 8003ce8:	5ccc      	ldrb	r4, [r1, r3]
 8003cea:	54c4      	strb	r4, [r0, r3]
 8003cec:	3301      	adds	r3, #1
 8003cee:	e7f8      	b.n	8003ce2 <memcpy+0x4>

08003cf0 <memmove>:
 8003cf0:	b510      	push	{r4, lr}
 8003cf2:	4288      	cmp	r0, r1
 8003cf4:	d902      	bls.n	8003cfc <memmove+0xc>
 8003cf6:	188b      	adds	r3, r1, r2
 8003cf8:	4298      	cmp	r0, r3
 8003cfa:	d303      	bcc.n	8003d04 <memmove+0x14>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e007      	b.n	8003d10 <memmove+0x20>
 8003d00:	5c8b      	ldrb	r3, [r1, r2]
 8003d02:	5483      	strb	r3, [r0, r2]
 8003d04:	3a01      	subs	r2, #1
 8003d06:	d2fb      	bcs.n	8003d00 <memmove+0x10>
 8003d08:	bd10      	pop	{r4, pc}
 8003d0a:	5ccc      	ldrb	r4, [r1, r3]
 8003d0c:	54c4      	strb	r4, [r0, r3]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d1fa      	bne.n	8003d0a <memmove+0x1a>
 8003d14:	e7f8      	b.n	8003d08 <memmove+0x18>
	...

08003d18 <_free_r>:
 8003d18:	b570      	push	{r4, r5, r6, lr}
 8003d1a:	0005      	movs	r5, r0
 8003d1c:	2900      	cmp	r1, #0
 8003d1e:	d010      	beq.n	8003d42 <_free_r+0x2a>
 8003d20:	1f0c      	subs	r4, r1, #4
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	da00      	bge.n	8003d2a <_free_r+0x12>
 8003d28:	18e4      	adds	r4, r4, r3
 8003d2a:	0028      	movs	r0, r5
 8003d2c:	f000 f8d4 	bl	8003ed8 <__malloc_lock>
 8003d30:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <_free_r+0x90>)
 8003d32:	6813      	ldr	r3, [r2, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d105      	bne.n	8003d44 <_free_r+0x2c>
 8003d38:	6063      	str	r3, [r4, #4]
 8003d3a:	6014      	str	r4, [r2, #0]
 8003d3c:	0028      	movs	r0, r5
 8003d3e:	f000 f8d3 	bl	8003ee8 <__malloc_unlock>
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	42a3      	cmp	r3, r4
 8003d46:	d908      	bls.n	8003d5a <_free_r+0x42>
 8003d48:	6821      	ldr	r1, [r4, #0]
 8003d4a:	1860      	adds	r0, r4, r1
 8003d4c:	4283      	cmp	r3, r0
 8003d4e:	d1f3      	bne.n	8003d38 <_free_r+0x20>
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	1841      	adds	r1, r0, r1
 8003d56:	6021      	str	r1, [r4, #0]
 8003d58:	e7ee      	b.n	8003d38 <_free_r+0x20>
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <_free_r+0x4e>
 8003d62:	42a3      	cmp	r3, r4
 8003d64:	d9f9      	bls.n	8003d5a <_free_r+0x42>
 8003d66:	6811      	ldr	r1, [r2, #0]
 8003d68:	1850      	adds	r0, r2, r1
 8003d6a:	42a0      	cmp	r0, r4
 8003d6c:	d10b      	bne.n	8003d86 <_free_r+0x6e>
 8003d6e:	6820      	ldr	r0, [r4, #0]
 8003d70:	1809      	adds	r1, r1, r0
 8003d72:	1850      	adds	r0, r2, r1
 8003d74:	6011      	str	r1, [r2, #0]
 8003d76:	4283      	cmp	r3, r0
 8003d78:	d1e0      	bne.n	8003d3c <_free_r+0x24>
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	1841      	adds	r1, r0, r1
 8003d80:	6011      	str	r1, [r2, #0]
 8003d82:	6053      	str	r3, [r2, #4]
 8003d84:	e7da      	b.n	8003d3c <_free_r+0x24>
 8003d86:	42a0      	cmp	r0, r4
 8003d88:	d902      	bls.n	8003d90 <_free_r+0x78>
 8003d8a:	230c      	movs	r3, #12
 8003d8c:	602b      	str	r3, [r5, #0]
 8003d8e:	e7d5      	b.n	8003d3c <_free_r+0x24>
 8003d90:	6821      	ldr	r1, [r4, #0]
 8003d92:	1860      	adds	r0, r4, r1
 8003d94:	4283      	cmp	r3, r0
 8003d96:	d103      	bne.n	8003da0 <_free_r+0x88>
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	1841      	adds	r1, r0, r1
 8003d9e:	6021      	str	r1, [r4, #0]
 8003da0:	6063      	str	r3, [r4, #4]
 8003da2:	6054      	str	r4, [r2, #4]
 8003da4:	e7ca      	b.n	8003d3c <_free_r+0x24>
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	20000090 	.word	0x20000090

08003dac <_malloc_r>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	2303      	movs	r3, #3
 8003db0:	1ccd      	adds	r5, r1, #3
 8003db2:	439d      	bics	r5, r3
 8003db4:	3508      	adds	r5, #8
 8003db6:	0006      	movs	r6, r0
 8003db8:	2d0c      	cmp	r5, #12
 8003dba:	d21f      	bcs.n	8003dfc <_malloc_r+0x50>
 8003dbc:	250c      	movs	r5, #12
 8003dbe:	42a9      	cmp	r1, r5
 8003dc0:	d81e      	bhi.n	8003e00 <_malloc_r+0x54>
 8003dc2:	0030      	movs	r0, r6
 8003dc4:	f000 f888 	bl	8003ed8 <__malloc_lock>
 8003dc8:	4925      	ldr	r1, [pc, #148]	; (8003e60 <_malloc_r+0xb4>)
 8003dca:	680a      	ldr	r2, [r1, #0]
 8003dcc:	0014      	movs	r4, r2
 8003dce:	2c00      	cmp	r4, #0
 8003dd0:	d11a      	bne.n	8003e08 <_malloc_r+0x5c>
 8003dd2:	4f24      	ldr	r7, [pc, #144]	; (8003e64 <_malloc_r+0xb8>)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <_malloc_r+0x38>
 8003dda:	0021      	movs	r1, r4
 8003ddc:	0030      	movs	r0, r6
 8003dde:	f000 f869 	bl	8003eb4 <_sbrk_r>
 8003de2:	6038      	str	r0, [r7, #0]
 8003de4:	0029      	movs	r1, r5
 8003de6:	0030      	movs	r0, r6
 8003de8:	f000 f864 	bl	8003eb4 <_sbrk_r>
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	d12b      	bne.n	8003e48 <_malloc_r+0x9c>
 8003df0:	230c      	movs	r3, #12
 8003df2:	0030      	movs	r0, r6
 8003df4:	6033      	str	r3, [r6, #0]
 8003df6:	f000 f877 	bl	8003ee8 <__malloc_unlock>
 8003dfa:	e003      	b.n	8003e04 <_malloc_r+0x58>
 8003dfc:	2d00      	cmp	r5, #0
 8003dfe:	dade      	bge.n	8003dbe <_malloc_r+0x12>
 8003e00:	230c      	movs	r3, #12
 8003e02:	6033      	str	r3, [r6, #0]
 8003e04:	2000      	movs	r0, #0
 8003e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	1b5b      	subs	r3, r3, r5
 8003e0c:	d419      	bmi.n	8003e42 <_malloc_r+0x96>
 8003e0e:	2b0b      	cmp	r3, #11
 8003e10:	d903      	bls.n	8003e1a <_malloc_r+0x6e>
 8003e12:	6023      	str	r3, [r4, #0]
 8003e14:	18e4      	adds	r4, r4, r3
 8003e16:	6025      	str	r5, [r4, #0]
 8003e18:	e003      	b.n	8003e22 <_malloc_r+0x76>
 8003e1a:	6863      	ldr	r3, [r4, #4]
 8003e1c:	42a2      	cmp	r2, r4
 8003e1e:	d10e      	bne.n	8003e3e <_malloc_r+0x92>
 8003e20:	600b      	str	r3, [r1, #0]
 8003e22:	0030      	movs	r0, r6
 8003e24:	f000 f860 	bl	8003ee8 <__malloc_unlock>
 8003e28:	0020      	movs	r0, r4
 8003e2a:	2207      	movs	r2, #7
 8003e2c:	300b      	adds	r0, #11
 8003e2e:	1d23      	adds	r3, r4, #4
 8003e30:	4390      	bics	r0, r2
 8003e32:	1ac2      	subs	r2, r0, r3
 8003e34:	4298      	cmp	r0, r3
 8003e36:	d0e6      	beq.n	8003e06 <_malloc_r+0x5a>
 8003e38:	1a1b      	subs	r3, r3, r0
 8003e3a:	50a3      	str	r3, [r4, r2]
 8003e3c:	e7e3      	b.n	8003e06 <_malloc_r+0x5a>
 8003e3e:	6053      	str	r3, [r2, #4]
 8003e40:	e7ef      	b.n	8003e22 <_malloc_r+0x76>
 8003e42:	0022      	movs	r2, r4
 8003e44:	6864      	ldr	r4, [r4, #4]
 8003e46:	e7c2      	b.n	8003dce <_malloc_r+0x22>
 8003e48:	2303      	movs	r3, #3
 8003e4a:	1cc4      	adds	r4, r0, #3
 8003e4c:	439c      	bics	r4, r3
 8003e4e:	42a0      	cmp	r0, r4
 8003e50:	d0e1      	beq.n	8003e16 <_malloc_r+0x6a>
 8003e52:	1a21      	subs	r1, r4, r0
 8003e54:	0030      	movs	r0, r6
 8003e56:	f000 f82d 	bl	8003eb4 <_sbrk_r>
 8003e5a:	1c43      	adds	r3, r0, #1
 8003e5c:	d1db      	bne.n	8003e16 <_malloc_r+0x6a>
 8003e5e:	e7c7      	b.n	8003df0 <_malloc_r+0x44>
 8003e60:	20000090 	.word	0x20000090
 8003e64:	20000094 	.word	0x20000094

08003e68 <_realloc_r>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	0007      	movs	r7, r0
 8003e6c:	000d      	movs	r5, r1
 8003e6e:	0016      	movs	r6, r2
 8003e70:	2900      	cmp	r1, #0
 8003e72:	d105      	bne.n	8003e80 <_realloc_r+0x18>
 8003e74:	0011      	movs	r1, r2
 8003e76:	f7ff ff99 	bl	8003dac <_malloc_r>
 8003e7a:	0004      	movs	r4, r0
 8003e7c:	0020      	movs	r0, r4
 8003e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e80:	2a00      	cmp	r2, #0
 8003e82:	d103      	bne.n	8003e8c <_realloc_r+0x24>
 8003e84:	f7ff ff48 	bl	8003d18 <_free_r>
 8003e88:	0034      	movs	r4, r6
 8003e8a:	e7f7      	b.n	8003e7c <_realloc_r+0x14>
 8003e8c:	f000 f834 	bl	8003ef8 <_malloc_usable_size_r>
 8003e90:	002c      	movs	r4, r5
 8003e92:	42b0      	cmp	r0, r6
 8003e94:	d2f2      	bcs.n	8003e7c <_realloc_r+0x14>
 8003e96:	0031      	movs	r1, r6
 8003e98:	0038      	movs	r0, r7
 8003e9a:	f7ff ff87 	bl	8003dac <_malloc_r>
 8003e9e:	1e04      	subs	r4, r0, #0
 8003ea0:	d0ec      	beq.n	8003e7c <_realloc_r+0x14>
 8003ea2:	0029      	movs	r1, r5
 8003ea4:	0032      	movs	r2, r6
 8003ea6:	f7ff ff1a 	bl	8003cde <memcpy>
 8003eaa:	0029      	movs	r1, r5
 8003eac:	0038      	movs	r0, r7
 8003eae:	f7ff ff33 	bl	8003d18 <_free_r>
 8003eb2:	e7e3      	b.n	8003e7c <_realloc_r+0x14>

08003eb4 <_sbrk_r>:
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	b570      	push	{r4, r5, r6, lr}
 8003eb8:	4d06      	ldr	r5, [pc, #24]	; (8003ed4 <_sbrk_r+0x20>)
 8003eba:	0004      	movs	r4, r0
 8003ebc:	0008      	movs	r0, r1
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	f7fc fe28 	bl	8000b14 <_sbrk>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d103      	bne.n	8003ed0 <_sbrk_r+0x1c>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d000      	beq.n	8003ed0 <_sbrk_r+0x1c>
 8003ece:	6023      	str	r3, [r4, #0]
 8003ed0:	bd70      	pop	{r4, r5, r6, pc}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	20000178 	.word	0x20000178

08003ed8 <__malloc_lock>:
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	4802      	ldr	r0, [pc, #8]	; (8003ee4 <__malloc_lock+0xc>)
 8003edc:	f000 f814 	bl	8003f08 <__retarget_lock_acquire_recursive>
 8003ee0:	bd10      	pop	{r4, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	20000180 	.word	0x20000180

08003ee8 <__malloc_unlock>:
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <__malloc_unlock+0xc>)
 8003eec:	f000 f80d 	bl	8003f0a <__retarget_lock_release_recursive>
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	20000180 	.word	0x20000180

08003ef8 <_malloc_usable_size_r>:
 8003ef8:	1f0b      	subs	r3, r1, #4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	1f18      	subs	r0, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da01      	bge.n	8003f06 <_malloc_usable_size_r+0xe>
 8003f02:	580b      	ldr	r3, [r1, r0]
 8003f04:	18c0      	adds	r0, r0, r3
 8003f06:	4770      	bx	lr

08003f08 <__retarget_lock_acquire_recursive>:
 8003f08:	4770      	bx	lr

08003f0a <__retarget_lock_release_recursive>:
 8003f0a:	4770      	bx	lr

08003f0c <_init>:
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f12:	bc08      	pop	{r3}
 8003f14:	469e      	mov	lr, r3
 8003f16:	4770      	bx	lr

08003f18 <_fini>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr
