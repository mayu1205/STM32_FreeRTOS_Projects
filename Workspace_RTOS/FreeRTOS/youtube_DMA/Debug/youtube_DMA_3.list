
youtube_DMA_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ac  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005568  08005568  00015568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005638  08005638  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005638  08005638  00015638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005640  08005640  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005644  08005644  00015644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000074  080056bc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080056bc  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d54  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000236b  00000000  00000000  00030df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00033160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  00033ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192aa  00000000  00000000  00034798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2c5  00000000  00000000  0004da42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d35  00000000  00000000  0005bd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fca3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c34  00000000  00000000  000fca90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005550 	.word	0x08005550

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08005550 	.word	0x08005550

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	1c08      	adds	r0, r1, #0
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char msg[10] = "Mayuri\r\n";
 8000646:	1d39      	adds	r1, r7, #4
 8000648:	4a18      	ldr	r2, [pc, #96]	; (80006ac <main+0x6c>)
 800064a:	000b      	movs	r3, r1
 800064c:	ca11      	ldmia	r2!, {r0, r4}
 800064e:	c311      	stmia	r3!, {r0, r4}
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	2309      	movs	r3, #9
 8000656:	2200      	movs	r2, #0
 8000658:	54ca      	strb	r2, [r1, r3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fb6d 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f82f 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f97d 	bl	8000960 <MX_GPIO_Init>
  MX_DMA_Init();
 8000666:	f000 f95d 	bl	8000924 <MX_DMA_Init>
  MX_ADC1_Init();
 800066a:	f000 f8a3 	bl	80007b4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800066e:	f000 f90b 	bl	8000888 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&value, 1);
 8000672:	490f      	ldr	r1, [pc, #60]	; (80006b0 <main+0x70>)
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <main+0x74>)
 8000676:	2201      	movs	r2, #1
 8000678:	0018      	movs	r0, r3
 800067a:	f000 ff43 	bl	8001504 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <main+0x74>)
 8000680:	0018      	movs	r0, r3
 8000682:	f000 fef1 	bl	8001468 <HAL_ADC_Start>
	  sprintf(msg,"%hu\r\n",value);
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <main+0x70>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	490b      	ldr	r1, [pc, #44]	; (80006b8 <main+0x78>)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	0018      	movs	r0, r3
 8000690:	f004 fb38 	bl	8004d04 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	0018      	movs	r0, r3
 8000698:	f7ff fd34 	bl	8000104 <strlen>
 800069c:	0003      	movs	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	1d39      	adds	r1, r7, #4
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <main+0x7c>)
 80006a4:	230a      	movs	r3, #10
 80006a6:	f003 f89b 	bl	80037e0 <HAL_UART_Transmit>
  {
 80006aa:	e7e8      	b.n	800067e <main+0x3e>
 80006ac:	08005570 	.word	0x08005570
 80006b0:	20000000 	.word	0x20000000
 80006b4:	2000009c 	.word	0x2000009c
 80006b8:	08005568 	.word	0x08005568
 80006bc:	2000015c 	.word	0x2000015c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b0a1      	sub	sp, #132	; 0x84
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	2448      	movs	r4, #72	; 0x48
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	0018      	movs	r0, r3
 80006cc:	2338      	movs	r3, #56	; 0x38
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f004 fb0f 	bl	8004cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d6:	2338      	movs	r3, #56	; 0x38
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	0018      	movs	r0, r3
 80006dc:	2310      	movs	r3, #16
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f004 fb07 	bl	8004cf4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	0018      	movs	r0, r3
 80006ea:	2334      	movs	r3, #52	; 0x34
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f004 fb00 	bl	8004cf4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 f953 	bl	80029a4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2202      	movs	r2, #2
 8000702:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0052      	lsls	r2, r2, #1
 800070a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800070c:	0021      	movs	r1, r4
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2240      	movs	r2, #64	; 0x40
 8000718:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2202      	movs	r2, #2
 8000724:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2208      	movs	r2, #8
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0292      	lsls	r2, r2, #10
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0492      	lsls	r2, r2, #18
 8000740:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0592      	lsls	r2, r2, #22
 8000748:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	187b      	adds	r3, r7, r1
 800074c:	0018      	movs	r0, r3
 800074e:	f002 f975 	bl	8002a3c <HAL_RCC_OscConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000756:	f000 f953 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	2138      	movs	r1, #56	; 0x38
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2207      	movs	r2, #7
 8000760:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2202      	movs	r2, #2
 8000766:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2102      	movs	r1, #2
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fc79 	bl	8003070 <HAL_RCC_ClockConfig>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000782:	f000 f93d 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <SystemClock_Config+0xf0>)
 800078a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	0018      	movs	r0, r3
 800079c:	f002 fe12 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80007a4:	f000 f92c 	bl	8000a00 <Error_Handler>
  }
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b021      	add	sp, #132	; 0x84
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	00004002 	.word	0x00004002

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	0018      	movs	r0, r3
 80007be:	230c      	movs	r3, #12
 80007c0:	001a      	movs	r2, r3
 80007c2:	2100      	movs	r1, #0
 80007c4:	f004 fa96 	bl	8004cf4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_ADC1_Init+0xcc>)
 80007ca:	4a2e      	ldr	r2, [pc, #184]	; (8000884 <MX_ADC1_Init+0xd0>)
 80007cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <MX_ADC1_Init+0xcc>)
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	05d2      	lsls	r2, r2, #23
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MX_ADC1_Init+0xcc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <MX_ADC1_Init+0xcc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_ADC1_Init+0xcc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_ADC1_Init+0xcc>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_ADC1_Init+0xcc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_ADC1_Init+0xcc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_ADC1_Init+0xcc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_ADC1_Init+0xcc>)
 8000802:	2201      	movs	r2, #1
 8000804:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_ADC1_Init+0xcc>)
 8000808:	2220      	movs	r2, #32
 800080a:	2100      	movs	r1, #0
 800080c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_ADC1_Init+0xcc>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_ADC1_Init+0xcc>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_ADC1_Init+0xcc>)
 800081c:	222c      	movs	r2, #44	; 0x2c
 800081e:	2101      	movs	r1, #1
 8000820:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_ADC1_Init+0xcc>)
 8000824:	2200      	movs	r2, #0
 8000826:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_ADC1_Init+0xcc>)
 800082a:	2200      	movs	r2, #0
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_ADC1_Init+0xcc>)
 8000830:	2200      	movs	r2, #0
 8000832:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_ADC1_Init+0xcc>)
 8000836:	223c      	movs	r2, #60	; 0x3c
 8000838:	2100      	movs	r1, #0
 800083a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_ADC1_Init+0xcc>)
 800083e:	2200      	movs	r2, #0
 8000840:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_ADC1_Init+0xcc>)
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fc67 	bl	8001118 <HAL_ADC_Init>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800084e:	f000 f8d7 	bl	8000a00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2201      	movs	r2, #1
 8000856:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	1d3a      	adds	r2, r7, #4
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_ADC1_Init+0xcc>)
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f001 f810 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000874:	f000 f8c4 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b004      	add	sp, #16
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000009c 	.word	0x2000009c
 8000884:	40012400 	.word	0x40012400

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <MX_USART2_UART_Init+0x94>)
 800088e:	4a24      	ldr	r2, [pc, #144]	; (8000920 <MX_USART2_UART_Init+0x98>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_USART2_UART_Init+0x94>)
 8000894:	22e1      	movs	r2, #225	; 0xe1
 8000896:	0252      	lsls	r2, r2, #9
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_USART2_UART_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_USART2_UART_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_USART2_UART_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_USART2_UART_Init+0x94>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_USART2_UART_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_USART2_UART_Init+0x94>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_USART2_UART_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_USART2_UART_Init+0x94>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_USART2_UART_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_USART2_UART_Init+0x94>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f002 ff2e 	bl	8003734 <HAL_UART_Init>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 f890 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART2_UART_Init+0x94>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	0018      	movs	r0, r3
 80008e6:	f004 f8fb 	bl	8004ae0 <HAL_UARTEx_SetTxFifoThreshold>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 f887 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_USART2_UART_Init+0x94>)
 80008f4:	2100      	movs	r1, #0
 80008f6:	0018      	movs	r0, r3
 80008f8:	f004 f932 	bl	8004b60 <HAL_UARTEx_SetRxFifoThreshold>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 f87e 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <MX_USART2_UART_Init+0x94>)
 8000906:	0018      	movs	r0, r3
 8000908:	f004 f8b0 	bl	8004a6c <HAL_UARTEx_DisableFifoMode>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f876 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	2000015c 	.word	0x2000015c
 8000920:	40004400 	.word	0x40004400

08000924 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_DMA_Init+0x38>)
 800092c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_DMA_Init+0x38>)
 8000930:	2101      	movs	r1, #1
 8000932:	430a      	orrs	r2, r1
 8000934:	639a      	str	r2, [r3, #56]	; 0x38
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_DMA_Init+0x38>)
 8000938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800093a:	2201      	movs	r2, #1
 800093c:	4013      	ands	r3, r2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	2009      	movs	r0, #9
 8000948:	f001 fb5a 	bl	8002000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800094c:	2009      	movs	r0, #9
 800094e:	f001 fb6c 	bl	800202a <HAL_NVIC_EnableIRQ>

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b002      	add	sp, #8
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40021000 	.word	0x40021000

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	240c      	movs	r4, #12
 8000968:	193b      	adds	r3, r7, r4
 800096a:	0018      	movs	r0, r3
 800096c:	2314      	movs	r3, #20
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f004 f9bf 	bl	8004cf4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_GPIO_Init+0x9c>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_GPIO_Init+0x9c>)
 800097c:	2104      	movs	r1, #4
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_GPIO_Init+0x9c>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000986:	2204      	movs	r2, #4
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_GPIO_Init+0x9c>)
 8000990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_GPIO_Init+0x9c>)
 8000994:	2120      	movs	r1, #32
 8000996:	430a      	orrs	r2, r1
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_GPIO_Init+0x9c>)
 800099c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099e:	2220      	movs	r2, #32
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_GPIO_Init+0x9c>)
 80009a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_GPIO_Init+0x9c>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	430a      	orrs	r2, r1
 80009b0:	635a      	str	r2, [r3, #52]	; 0x34
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_GPIO_Init+0x9c>)
 80009b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b6:	2201      	movs	r2, #1
 80009b8:	4013      	ands	r3, r2
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	2200      	movs	r2, #0
 80009c4:	2120      	movs	r1, #32
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 ffce 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80009cc:	0021      	movs	r1, r4
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2220      	movs	r2, #32
 80009d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2201      	movs	r2, #1
 80009d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2202      	movs	r2, #2
 80009e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009e6:	187a      	adds	r2, r7, r1
 80009e8:	23a0      	movs	r3, #160	; 0xa0
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	0011      	movs	r1, r2
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 fe56 	bl	80026a0 <HAL_GPIO_Init>

}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b009      	add	sp, #36	; 0x24
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	40021000 	.word	0x40021000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	2101      	movs	r1, #1
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	2201      	movs	r2, #1
 8000a24:	4013      	ands	r3, r2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0549      	lsls	r1, r1, #21
 8000a34:	430a      	orrs	r2, r1
 8000a36:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	055b      	lsls	r3, r3, #21
 8000a40:	4013      	ands	r3, r2
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a46:	23c0      	movs	r3, #192	; 0xc0
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 f9fa 	bl	8000e44 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	2414      	movs	r4, #20
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f004 f940 	bl	8004cf4 <memset>
  if(hadc->Instance==ADC1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a31      	ldr	r2, [pc, #196]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d15c      	bne.n	8000b38 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a7e:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0349      	lsls	r1, r1, #13
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	035b      	lsls	r3, r3, #13
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa6:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2203      	movs	r2, #3
 8000abc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	193a      	adds	r2, r7, r4
 8000ac6:	23a0      	movs	r3, #160	; 0xa0
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f001 fde7 	bl	80026a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <HAL_ADC_MspInit+0xf0>)
 8000ad6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000ada:	2205      	movs	r2, #5
 8000adc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	0052      	lsls	r2, r2, #1
 8000af6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	00d2      	lsls	r2, r2, #3
 8000afe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000b02:	2220      	movs	r2, #32
 8000b04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 faa8 	bl	8002064 <HAL_DMA_Init>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000b18:	f7ff ff72 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000b20:	651a      	str	r2, [r3, #80]	; 0x50
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	200c      	movs	r0, #12
 8000b2e:	f001 fa67 	bl	8002000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000b32:	200c      	movs	r0, #12
 8000b34:	f001 fa79 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b00b      	add	sp, #44	; 0x2c
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	40012400 	.word	0x40012400
 8000b44:	40021000 	.word	0x40021000
 8000b48:	20000100 	.word	0x20000100
 8000b4c:	40020008 	.word	0x40020008

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b08b      	sub	sp, #44	; 0x2c
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	2414      	movs	r4, #20
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2314      	movs	r3, #20
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f004 f8c6 	bl	8004cf4 <memset>
  if(huart->Instance==USART2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_UART_MspInit+0x9c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d138      	bne.n	8000be4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b72:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <HAL_UART_MspInit+0xa0>)
 8000b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_UART_MspInit+0xa0>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	0289      	lsls	r1, r1, #10
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_UART_MspInit+0xa0>)
 8000b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	029b      	lsls	r3, r3, #10
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_UART_MspInit+0xa0>)
 8000b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_UART_MspInit+0xa0>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	635a      	str	r2, [r3, #52]	; 0x34
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_UART_MspInit+0xa0>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ba6:	0021      	movs	r1, r4
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	187a      	adds	r2, r7, r1
 8000bc8:	23a0      	movs	r3, #160	; 0xa0
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 fd66 	bl	80026a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	201c      	movs	r0, #28
 8000bda:	f001 fa11 	bl	8002000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bde:	201c      	movs	r0, #28
 8000be0:	f001 fa23 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b00b      	add	sp, #44	; 0x2c
 8000bea:	bd90      	pop	{r4, r7, pc}
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f8f8 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <DMA1_Channel1_IRQHandler+0x14>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f001 fbf6 	bl	800241c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20000100 	.word	0x20000100

08000c3c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <ADC1_COMP_IRQHandler+0x14>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fcec 	bl	8001620 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	2000009c 	.word	0x2000009c

08000c54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <USART2_IRQHandler+0x14>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f002 fe6c 	bl	8003938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	2000015c 	.word	0x2000015c

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	18d3      	adds	r3, r2, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f004 f800 	bl	8004ca0 <__errno>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	425b      	negs	r3, r3
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	18d2      	adds	r2, r2, r3
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b006      	add	sp, #24
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20009000 	.word	0x20009000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000090 	.word	0x20000090
 8000cd4:	20000200 	.word	0x20000200

08000cd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ce6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce8:	f7ff fff6 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d12:	f003 ffcb 	bl	8004cac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d16:	f7ff fc93 	bl	8000640 <main>

08000d1a <LoopForever>:

LoopForever:
  b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   r0, =_estack
 8000d1c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d28:	08005648 	.word	0x08005648
  ldr r2, =_sbss
 8000d2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d30:	20000200 	.word	0x20000200

08000d34 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <CEC_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_Init+0x3c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_Init+0x3c>)
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	0049      	lsls	r1, r1, #1
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 f810 	bl	8000d78 <HAL_InitTick>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e001      	b.n	8000d68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fe52 	bl	8000a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	781b      	ldrb	r3, [r3, #0]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40022000 	.word	0x40022000

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d80:	230f      	movs	r3, #15
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_InitTick+0x88>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d02b      	beq.n	8000de8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <HAL_InitTick+0x8c>)
 8000d92:	681c      	ldr	r4, [r3, #0]
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <HAL_InitTick+0x88>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	0019      	movs	r1, r3
 8000d9a:	23fa      	movs	r3, #250	; 0xfa
 8000d9c:	0098      	lsls	r0, r3, #2
 8000d9e:	f7ff f9c3 	bl	8000128 <__udivsi3>
 8000da2:	0003      	movs	r3, r0
 8000da4:	0019      	movs	r1, r3
 8000da6:	0020      	movs	r0, r4
 8000da8:	f7ff f9be 	bl	8000128 <__udivsi3>
 8000dac:	0003      	movs	r3, r0
 8000dae:	0018      	movs	r0, r3
 8000db0:	f001 f94b 	bl	800204a <HAL_SYSTICK_Config>
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	d112      	bne.n	8000dde <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d80a      	bhi.n	8000dd4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	425b      	negs	r3, r3
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f001 f91a 	bl	8002000 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_InitTick+0x90>)
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e00d      	b.n	8000df0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e008      	b.n	8000df0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dde:	230f      	movs	r3, #15
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e003      	b.n	8000df0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de8:	230f      	movs	r3, #15
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000df0:	230f      	movs	r3, #15
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	781b      	ldrb	r3, [r3, #0]
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b005      	add	sp, #20
 8000dfc:	bd90      	pop	{r4, r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	2000000c 	.word	0x2000000c
 8000e04:	20000004 	.word	0x20000004
 8000e08:	20000008 	.word	0x20000008

08000e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_IncTick+0x1c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	001a      	movs	r2, r3
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x20>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	18d2      	adds	r2, r2, r3
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_IncTick+0x20>)
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	200001ec 	.word	0x200001ec

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <HAL_GetTick+0x10>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	200001ec 	.word	0x200001ec

08000e44 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e52:	4013      	ands	r3, r2
 8000e54:	0019      	movs	r1, r3
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	fffff9ff 	.word	0xfffff9ff

08000e70 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e80:	401a      	ands	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	431a      	orrs	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	fe3fffff 	.word	0xfe3fffff

08000e98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	23e0      	movs	r3, #224	; 0xe0
 8000ea6:	045b      	lsls	r3, r3, #17
 8000ea8:	4013      	ands	r3, r2
}
 8000eaa:	0018      	movs	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	2107      	movs	r1, #7
 8000eca:	4091      	lsls	r1, r2
 8000ecc:	000a      	movs	r2, r1
 8000ece:	43d2      	mvns	r2, r2
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4099      	lsls	r1, r3
 8000edc:	000b      	movs	r3, r1
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b004      	add	sp, #16
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	2104      	movs	r1, #4
 8000efe:	400a      	ands	r2, r1
 8000f00:	2107      	movs	r1, #7
 8000f02:	4091      	lsls	r1, r2
 8000f04:	000a      	movs	r2, r1
 8000f06:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f0e:	40da      	lsrs	r2, r3
 8000f10:	0013      	movs	r3, r2
}
 8000f12:	0018      	movs	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	23c0      	movs	r3, #192	; 0xc0
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	211f      	movs	r1, #31
 8000f50:	400a      	ands	r2, r1
 8000f52:	210f      	movs	r1, #15
 8000f54:	4091      	lsls	r1, r2
 8000f56:	000a      	movs	r2, r1
 8000f58:	43d2      	mvns	r2, r2
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	0e9b      	lsrs	r3, r3, #26
 8000f60:	210f      	movs	r1, #15
 8000f62:	4019      	ands	r1, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	201f      	movs	r0, #31
 8000f68:	4003      	ands	r3, r0
 8000f6a:	4099      	lsls	r1, r3
 8000f6c:	000b      	movs	r3, r1
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b004      	add	sp, #16
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	035b      	lsls	r3, r3, #13
 8000f8e:	0b5b      	lsrs	r3, r3, #13
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	0352      	lsls	r2, r2, #13
 8000fb0:	0b52      	lsrs	r2, r2, #13
 8000fb2:	43d2      	mvns	r2, r2
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	4013      	ands	r3, r2
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	0212      	lsls	r2, r2, #8
 8000ff0:	43d2      	mvns	r2, r2
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	4904      	ldr	r1, [pc, #16]	; (8001010 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000ffe:	400b      	ands	r3, r1
 8001000:	431a      	orrs	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b004      	add	sp, #16
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	07ffff00 	.word	0x07ffff00

08001014 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a05      	ldr	r2, [pc, #20]	; (8001038 <LL_ADC_EnableInternalRegulator+0x24>)
 8001022:	4013      	ands	r3, r2
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	0552      	lsls	r2, r2, #21
 8001028:	431a      	orrs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	6fffffe8 	.word	0x6fffffe8

0800103c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	055b      	lsls	r3, r3, #21
 800104c:	401a      	ands	r2, r3
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	055b      	lsls	r3, r3, #21
 8001052:	429a      	cmp	r2, r3
 8001054:	d101      	bne.n	800105a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800105a:	2300      	movs	r3, #0
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}

08001064 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <LL_ADC_Enable+0x20>)
 8001072:	4013      	ands	r3, r2
 8001074:	2201      	movs	r2, #1
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}
 8001084:	7fffffe8 	.word	0x7fffffe8

08001088 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <LL_ADC_Disable+0x20>)
 8001096:	4013      	ands	r3, r2
 8001098:	2202      	movs	r2, #2
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	7fffffe8 	.word	0x7fffffe8

080010ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2201      	movs	r2, #1
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <LL_ADC_IsEnabled+0x18>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <LL_ADC_IsEnabled+0x1a>
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	0018      	movs	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <LL_ADC_REG_StartConversion+0x20>)
 80010de:	4013      	ands	r3, r2
 80010e0:	2204      	movs	r2, #4
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	7fffffe8 	.word	0x7fffffe8

080010f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2204      	movs	r2, #4
 8001102:	4013      	ands	r3, r2
 8001104:	2b04      	cmp	r3, #4
 8001106:	d101      	bne.n	800110c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800110c:	2300      	movs	r3, #0
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001120:	231f      	movs	r3, #31
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e17f      	b.n	800143e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10a      	bne.n	800115c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff fc87 	bl	8000a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2254      	movs	r2, #84	; 0x54
 8001158:	2100      	movs	r1, #0
 800115a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff ff6b 	bl	800103c <LL_ADC_IsInternalRegulatorEnabled>
 8001166:	1e03      	subs	r3, r0, #0
 8001168:	d115      	bne.n	8001196 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	0018      	movs	r0, r3
 8001170:	f7ff ff50 	bl	8001014 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001174:	4bb4      	ldr	r3, [pc, #720]	; (8001448 <HAL_ADC_Init+0x330>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	49b4      	ldr	r1, [pc, #720]	; (800144c <HAL_ADC_Init+0x334>)
 800117a:	0018      	movs	r0, r3
 800117c:	f7fe ffd4 	bl	8000128 <__udivsi3>
 8001180:	0003      	movs	r3, r0
 8001182:	3301      	adds	r3, #1
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001188:	e002      	b.n	8001190 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3b01      	subs	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f9      	bne.n	800118a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	0018      	movs	r0, r3
 800119c:	f7ff ff4e 	bl	800103c <LL_ADC_IsInternalRegulatorEnabled>
 80011a0:	1e03      	subs	r3, r0, #0
 80011a2:	d10f      	bne.n	80011c4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	2210      	movs	r2, #16
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b4:	2201      	movs	r2, #1
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011bc:	231f      	movs	r3, #31
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ff93 	bl	80010f4 <LL_ADC_REG_IsConversionOngoing>
 80011ce:	0003      	movs	r3, r0
 80011d0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	2210      	movs	r2, #16
 80011d8:	4013      	ands	r3, r2
 80011da:	d000      	beq.n	80011de <HAL_ADC_Init+0xc6>
 80011dc:	e122      	b.n	8001424 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d000      	beq.n	80011e6 <HAL_ADC_Init+0xce>
 80011e4:	e11e      	b.n	8001424 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	4a99      	ldr	r2, [pc, #612]	; (8001450 <HAL_ADC_Init+0x338>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	2202      	movs	r2, #2
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff ff56 	bl	80010ac <LL_ADC_IsEnabled>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d000      	beq.n	8001206 <HAL_ADC_Init+0xee>
 8001204:	e0ad      	b.n	8001362 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7e1b      	ldrb	r3, [r3, #24]
 800120e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001210:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7e5b      	ldrb	r3, [r3, #25]
 8001216:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001218:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e9b      	ldrb	r3, [r3, #26]
 800121e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001220:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <HAL_ADC_Init+0x118>
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	015b      	lsls	r3, r3, #5
 800122e:	e000      	b.n	8001232 <HAL_ADC_Init+0x11a>
 8001230:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001232:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001238:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2b00      	cmp	r3, #0
 8001240:	da04      	bge.n	800124c <HAL_ADC_Init+0x134>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	085b      	lsrs	r3, r3, #1
 800124a:	e001      	b.n	8001250 <HAL_ADC_Init+0x138>
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001250:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	212c      	movs	r1, #44	; 0x2c
 8001256:	5c5b      	ldrb	r3, [r3, r1]
 8001258:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800125a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2220      	movs	r2, #32
 8001266:	5c9b      	ldrb	r3, [r3, r2]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d115      	bne.n	8001298 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7e9b      	ldrb	r3, [r3, #26]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d105      	bne.n	8001280 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	0252      	lsls	r2, r2, #9
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	e00b      	b.n	8001298 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001284:	2220      	movs	r2, #32
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001290:	2201      	movs	r2, #1
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00a      	beq.n	80012b6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a4:	23e0      	movs	r3, #224	; 0xe0
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012ae:	4313      	orrs	r3, r2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4a65      	ldr	r2, [pc, #404]	; (8001454 <HAL_ADC_Init+0x33c>)
 80012be:	4013      	ands	r3, r2
 80012c0:	0019      	movs	r1, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	0f9b      	lsrs	r3, r3, #30
 80012d2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012d8:	4313      	orrs	r3, r2
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4313      	orrs	r3, r2
 80012de:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	223c      	movs	r2, #60	; 0x3c
 80012e4:	5c9b      	ldrb	r3, [r3, r2]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d111      	bne.n	800130e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	0f9b      	lsrs	r3, r3, #30
 80012f0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012f6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80012fc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001302:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	4313      	orrs	r3, r2
 8001308:	2201      	movs	r2, #1
 800130a:	4313      	orrs	r3, r2
 800130c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <HAL_ADC_Init+0x340>)
 8001316:	4013      	ands	r3, r2
 8001318:	0019      	movs	r1, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	430a      	orrs	r2, r1
 8001322:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	23c0      	movs	r3, #192	; 0xc0
 800132a:	061b      	lsls	r3, r3, #24
 800132c:	429a      	cmp	r2, r3
 800132e:	d018      	beq.n	8001362 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	05db      	lsls	r3, r3, #23
 8001338:	429a      	cmp	r2, r3
 800133a:	d012      	beq.n	8001362 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	061b      	lsls	r3, r3, #24
 8001344:	429a      	cmp	r2, r3
 8001346:	d00c      	beq.n	8001362 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001348:	4b44      	ldr	r3, [pc, #272]	; (800145c <HAL_ADC_Init+0x344>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a44      	ldr	r2, [pc, #272]	; (8001460 <HAL_ADC_Init+0x348>)
 800134e:	4013      	ands	r3, r2
 8001350:	0019      	movs	r1, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	23f0      	movs	r3, #240	; 0xf0
 8001358:	039b      	lsls	r3, r3, #14
 800135a:	401a      	ands	r2, r3
 800135c:	4b3f      	ldr	r3, [pc, #252]	; (800145c <HAL_ADC_Init+0x344>)
 800135e:	430a      	orrs	r2, r1
 8001360:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136a:	001a      	movs	r2, r3
 800136c:	2100      	movs	r1, #0
 800136e:	f7ff fda0 	bl	8000eb2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	493a      	ldr	r1, [pc, #232]	; (8001464 <HAL_ADC_Init+0x34c>)
 800137c:	001a      	movs	r2, r3
 800137e:	f7ff fd98 	bl	8000eb2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2110      	movs	r1, #16
 8001396:	4249      	negs	r1, r1
 8001398:	430a      	orrs	r2, r1
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
 800139c:	e018      	b.n	80013d0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	039b      	lsls	r3, r3, #14
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d112      	bne.n	80013d0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	221c      	movs	r2, #28
 80013ba:	4013      	ands	r3, r2
 80013bc:	2210      	movs	r2, #16
 80013be:	4252      	negs	r2, r2
 80013c0:	409a      	lsls	r2, r3
 80013c2:	0011      	movs	r1, r2
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2100      	movs	r1, #0
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff fd88 	bl	8000eec <LL_ADC_GetSamplingTimeCommonChannels>
 80013dc:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d10b      	bne.n	80013fe <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	2203      	movs	r2, #3
 80013f2:	4393      	bics	r3, r2
 80013f4:	2201      	movs	r2, #1
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013fc:	e01c      	b.n	8001438 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	2212      	movs	r2, #18
 8001404:	4393      	bics	r3, r2
 8001406:	2210      	movs	r2, #16
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001412:	2201      	movs	r2, #1
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800141a:	231f      	movs	r3, #31
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001422:	e009      	b.n	8001438 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	2210      	movs	r2, #16
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001430:	231f      	movs	r3, #31
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001438:	231f      	movs	r3, #31
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	781b      	ldrb	r3, [r3, #0]
}
 800143e:	0018      	movs	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	b008      	add	sp, #32
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	20000004 	.word	0x20000004
 800144c:	00030d40 	.word	0x00030d40
 8001450:	fffffefd 	.word	0xfffffefd
 8001454:	fffe0201 	.word	0xfffe0201
 8001458:	1ffffc02 	.word	0x1ffffc02
 800145c:	40012708 	.word	0x40012708
 8001460:	ffc3ffff 	.word	0xffc3ffff
 8001464:	07ffff04 	.word	0x07ffff04

08001468 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fe3d 	bl	80010f4 <LL_ADC_REG_IsConversionOngoing>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d135      	bne.n	80014ea <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2254      	movs	r2, #84	; 0x54
 8001482:	5c9b      	ldrb	r3, [r3, r2]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_ADC_Start+0x24>
 8001488:	2302      	movs	r3, #2
 800148a:	e035      	b.n	80014f8 <HAL_ADC_Start+0x90>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2254      	movs	r2, #84	; 0x54
 8001490:	2101      	movs	r1, #1
 8001492:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001494:	250f      	movs	r5, #15
 8001496:	197c      	adds	r4, r7, r5
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	0018      	movs	r0, r3
 800149c:	f000 fbd0 	bl	8001c40 <ADC_Enable>
 80014a0:	0003      	movs	r3, r0
 80014a2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014a4:	197b      	adds	r3, r7, r5
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d119      	bne.n	80014e0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	4a13      	ldr	r2, [pc, #76]	; (8001500 <HAL_ADC_Start+0x98>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0052      	lsls	r2, r2, #1
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	221c      	movs	r2, #28
 80014ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2254      	movs	r2, #84	; 0x54
 80014d0:	2100      	movs	r1, #0
 80014d2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fdf9 	bl	80010d0 <LL_ADC_REG_StartConversion>
 80014de:	e008      	b.n	80014f2 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2254      	movs	r2, #84	; 0x54
 80014e4:	2100      	movs	r1, #0
 80014e6:	5499      	strb	r1, [r3, r2]
 80014e8:	e003      	b.n	80014f2 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014ea:	230f      	movs	r3, #15
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	2202      	movs	r2, #2
 80014f0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80014f2:	230f      	movs	r3, #15
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	781b      	ldrb	r3, [r3, #0]
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b004      	add	sp, #16
 80014fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001500:	fffff0fe 	.word	0xfffff0fe

08001504 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fded 	bl	80010f4 <LL_ADC_REG_IsConversionOngoing>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d16c      	bne.n	80015f8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2254      	movs	r2, #84	; 0x54
 8001522:	5c9b      	ldrb	r3, [r3, r2]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_ADC_Start_DMA+0x28>
 8001528:	2302      	movs	r3, #2
 800152a:	e06c      	b.n	8001606 <HAL_ADC_Start_DMA+0x102>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2254      	movs	r2, #84	; 0x54
 8001530:	2101      	movs	r1, #1
 8001532:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	4013      	ands	r3, r2
 800153e:	d113      	bne.n	8001568 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff fdb1 	bl	80010ac <LL_ADC_IsEnabled>
 800154a:	1e03      	subs	r3, r0, #0
 800154c:	d004      	beq.n	8001558 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	0018      	movs	r0, r3
 8001554:	f7ff fd98 	bl	8001088 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2101      	movs	r1, #1
 8001564:	430a      	orrs	r2, r1
 8001566:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001568:	2517      	movs	r5, #23
 800156a:	197c      	adds	r4, r7, r5
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	0018      	movs	r0, r3
 8001570:	f000 fb66 	bl	8001c40 <ADC_Enable>
 8001574:	0003      	movs	r3, r0
 8001576:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001578:	002c      	movs	r4, r5
 800157a:	193b      	adds	r3, r7, r4
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d13e      	bne.n	8001600 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	4a22      	ldr	r2, [pc, #136]	; (8001610 <HAL_ADC_Start_DMA+0x10c>)
 8001588:	4013      	ands	r3, r2
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0052      	lsls	r2, r2, #1
 800158e:	431a      	orrs	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159e:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <HAL_ADC_Start_DMA+0x110>)
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a6:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <HAL_ADC_Start_DMA+0x114>)
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ae:	4a1b      	ldr	r2, [pc, #108]	; (800161c <HAL_ADC_Start_DMA+0x118>)
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	221c      	movs	r2, #28
 80015b8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2254      	movs	r2, #84	; 0x54
 80015be:	2100      	movs	r1, #0
 80015c0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2110      	movs	r1, #16
 80015ce:	430a      	orrs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3340      	adds	r3, #64	; 0x40
 80015dc:	0019      	movs	r1, r3
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	193c      	adds	r4, r7, r4
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f000 fdc8 	bl	8002178 <HAL_DMA_Start_IT>
 80015e8:	0003      	movs	r3, r0
 80015ea:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fd6d 	bl	80010d0 <LL_ADC_REG_StartConversion>
 80015f6:	e003      	b.n	8001600 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015f8:	2317      	movs	r3, #23
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	2202      	movs	r2, #2
 80015fe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001600:	2317      	movs	r3, #23
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	781b      	ldrb	r3, [r3, #0]
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b006      	add	sp, #24
 800160c:	bdb0      	pop	{r4, r5, r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	fffff0fe 	.word	0xfffff0fe
 8001614:	08001d4d 	.word	0x08001d4d
 8001618:	08001e15 	.word	0x08001e15
 800161c:	08001e33 	.word	0x08001e33

08001620 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2202      	movs	r2, #2
 8001640:	4013      	ands	r3, r2
 8001642:	d017      	beq.n	8001674 <HAL_ADC_IRQHandler+0x54>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d013      	beq.n	8001674 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001650:	2210      	movs	r2, #16
 8001652:	4013      	ands	r3, r2
 8001654:	d106      	bne.n	8001664 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	2280      	movs	r2, #128	; 0x80
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	0018      	movs	r0, r3
 8001668:	f000 fc0e 	bl	8001e88 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	2204      	movs	r2, #4
 8001678:	4013      	ands	r3, r2
 800167a:	d003      	beq.n	8001684 <HAL_ADC_IRQHandler+0x64>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2204      	movs	r2, #4
 8001680:	4013      	ands	r3, r2
 8001682:	d107      	bne.n	8001694 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2208      	movs	r2, #8
 8001688:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800168a:	d04d      	beq.n	8001728 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2208      	movs	r2, #8
 8001690:	4013      	ands	r3, r2
 8001692:	d049      	beq.n	8001728 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	2210      	movs	r2, #16
 800169a:	4013      	ands	r3, r2
 800169c:	d106      	bne.n	80016ac <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff fc32 	bl	8000f1a <LL_ADC_REG_IsTriggerSourceSWStart>
 80016b6:	1e03      	subs	r3, r0, #0
 80016b8:	d02e      	beq.n	8001718 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7e9b      	ldrb	r3, [r3, #26]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d12a      	bne.n	8001718 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2208      	movs	r2, #8
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d123      	bne.n	8001718 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff fd0d 	bl	80010f4 <LL_ADC_REG_IsConversionOngoing>
 80016da:	1e03      	subs	r3, r0, #0
 80016dc:	d110      	bne.n	8001700 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	210c      	movs	r1, #12
 80016ea:	438a      	bics	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	4a56      	ldr	r2, [pc, #344]	; (800184c <HAL_ADC_IRQHandler+0x22c>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	2201      	movs	r2, #1
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	659a      	str	r2, [r3, #88]	; 0x58
 80016fe:	e00b      	b.n	8001718 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	2220      	movs	r2, #32
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001710:	2201      	movs	r2, #1
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	0018      	movs	r0, r3
 800171c:	f000 f898 	bl	8001850 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	220c      	movs	r2, #12
 8001726:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	4013      	ands	r3, r2
 800172e:	d012      	beq.n	8001756 <HAL_ADC_IRQHandler+0x136>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	4013      	ands	r3, r2
 8001736:	d00e      	beq.n	8001756 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	0252      	lsls	r2, r2, #9
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	0018      	movs	r0, r3
 800174a:	f000 f891 	bl	8001870 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4013      	ands	r3, r2
 800175e:	d014      	beq.n	800178a <HAL_ADC_IRQHandler+0x16a>
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4013      	ands	r3, r2
 8001768:	d00f      	beq.n	800178a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	0292      	lsls	r2, r2, #10
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	0018      	movs	r0, r3
 800177c:	f000 fb74 	bl	8001e68 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	0052      	lsls	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d014      	beq.n	80017be <HAL_ADC_IRQHandler+0x19e>
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d00f      	beq.n	80017be <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	02d2      	lsls	r2, r2, #11
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 fb62 	bl	8001e78 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2210      	movs	r2, #16
 80017c2:	4013      	ands	r3, r2
 80017c4:	d02b      	beq.n	800181e <HAL_ADC_IRQHandler+0x1fe>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2210      	movs	r2, #16
 80017ca:	4013      	ands	r3, r2
 80017cc:	d027      	beq.n	800181e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80017d6:	2301      	movs	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e008      	b.n	80017ee <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff fbee 	bl	8000fc2 <LL_ADC_REG_GetDMATransfer>
 80017e6:	1e03      	subs	r3, r0, #0
 80017e8:	d001      	beq.n	80017ee <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80017ea:	2301      	movs	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d110      	bne.n	8001816 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	00d2      	lsls	r2, r2, #3
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2202      	movs	r2, #2
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	0018      	movs	r0, r3
 8001812:	f000 f835 	bl	8001880 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2210      	movs	r2, #16
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	019b      	lsls	r3, r3, #6
 8001824:	4013      	ands	r3, r2
 8001826:	d00d      	beq.n	8001844 <HAL_ADC_IRQHandler+0x224>
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	019b      	lsls	r3, r3, #6
 800182e:	4013      	ands	r3, r2
 8001830:	d008      	beq.n	8001844 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	0018      	movs	r0, r3
 8001836:	f000 fb2f 	bl	8001e98 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	0192      	lsls	r2, r2, #6
 8001842:	601a      	str	r2, [r3, #0]
  }
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b006      	add	sp, #24
 800184a:	bd80      	pop	{r7, pc}
 800184c:	fffffefe 	.word	0xfffffefe

08001850 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b002      	add	sp, #8
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189a:	2317      	movs	r3, #23
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2254      	movs	r2, #84	; 0x54
 80018aa:	5c9b      	ldrb	r3, [r3, r2]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x24>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e1c0      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x3a6>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2254      	movs	r2, #84	; 0x54
 80018b8:	2101      	movs	r1, #1
 80018ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff fc17 	bl	80010f4 <LL_ADC_REG_IsConversionOngoing>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d000      	beq.n	80018cc <HAL_ADC_ConfigChannel+0x3c>
 80018ca:	e1a3      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d100      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x46>
 80018d4:	e143      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	429a      	cmp	r2, r3
 80018e0:	d004      	beq.n	80018ec <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018e6:	4ac1      	ldr	r2, [pc, #772]	; (8001bec <HAL_ADC_ConfigChannel+0x35c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d108      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0019      	movs	r1, r3
 80018f6:	0010      	movs	r0, r2
 80018f8:	f7ff fb40 	bl	8000f7c <LL_ADC_REG_SetSequencerChAdd>
 80018fc:	e0c9      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	211f      	movs	r1, #31
 8001908:	400b      	ands	r3, r1
 800190a:	210f      	movs	r1, #15
 800190c:	4099      	lsls	r1, r3
 800190e:	000b      	movs	r3, r1
 8001910:	43db      	mvns	r3, r3
 8001912:	4013      	ands	r3, r2
 8001914:	0019      	movs	r1, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	035b      	lsls	r3, r3, #13
 800191c:	0b5b      	lsrs	r3, r3, #13
 800191e:	d105      	bne.n	800192c <HAL_ADC_ConfigChannel+0x9c>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0e9b      	lsrs	r3, r3, #26
 8001926:	221f      	movs	r2, #31
 8001928:	4013      	ands	r3, r2
 800192a:	e098      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	4013      	ands	r3, r2
 8001934:	d000      	beq.n	8001938 <HAL_ADC_ConfigChannel+0xa8>
 8001936:	e091      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x1cc>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d000      	beq.n	8001944 <HAL_ADC_ConfigChannel+0xb4>
 8001942:	e089      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x1c8>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2204      	movs	r2, #4
 800194a:	4013      	ands	r3, r2
 800194c:	d000      	beq.n	8001950 <HAL_ADC_ConfigChannel+0xc0>
 800194e:	e081      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x1c4>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2208      	movs	r2, #8
 8001956:	4013      	ands	r3, r2
 8001958:	d000      	beq.n	800195c <HAL_ADC_ConfigChannel+0xcc>
 800195a:	e079      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x1c0>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2210      	movs	r2, #16
 8001962:	4013      	ands	r3, r2
 8001964:	d000      	beq.n	8001968 <HAL_ADC_ConfigChannel+0xd8>
 8001966:	e071      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x1bc>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2220      	movs	r2, #32
 800196e:	4013      	ands	r3, r2
 8001970:	d000      	beq.n	8001974 <HAL_ADC_ConfigChannel+0xe4>
 8001972:	e069      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x1b8>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2240      	movs	r2, #64	; 0x40
 800197a:	4013      	ands	r3, r2
 800197c:	d000      	beq.n	8001980 <HAL_ADC_ConfigChannel+0xf0>
 800197e:	e061      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x1b4>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	4013      	ands	r3, r2
 8001988:	d000      	beq.n	800198c <HAL_ADC_ConfigChannel+0xfc>
 800198a:	e059      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x1b0>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4013      	ands	r3, r2
 8001996:	d151      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1ac>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d149      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x1a8>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4013      	ands	r3, r2
 80019ae:	d141      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x1a4>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4013      	ands	r3, r2
 80019ba:	d139      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1a0>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	015b      	lsls	r3, r3, #5
 80019c4:	4013      	ands	r3, r2
 80019c6:	d131      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x19c>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	019b      	lsls	r3, r3, #6
 80019d0:	4013      	ands	r3, r2
 80019d2:	d129      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x198>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	01db      	lsls	r3, r3, #7
 80019dc:	4013      	ands	r3, r2
 80019de:	d121      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x194>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	4013      	ands	r3, r2
 80019ea:	d119      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x190>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	025b      	lsls	r3, r3, #9
 80019f4:	4013      	ands	r3, r2
 80019f6:	d111      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x18c>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	029b      	lsls	r3, r3, #10
 8001a00:	4013      	ands	r3, r2
 8001a02:	d109      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x188>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	02db      	lsls	r3, r3, #11
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d001      	beq.n	8001a14 <HAL_ADC_ConfigChannel+0x184>
 8001a10:	2312      	movs	r3, #18
 8001a12:	e024      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a14:	2300      	movs	r3, #0
 8001a16:	e022      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a18:	2311      	movs	r3, #17
 8001a1a:	e020      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	e01e      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a20:	230f      	movs	r3, #15
 8001a22:	e01c      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a24:	230e      	movs	r3, #14
 8001a26:	e01a      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a28:	230d      	movs	r3, #13
 8001a2a:	e018      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	e016      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a30:	230b      	movs	r3, #11
 8001a32:	e014      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a34:	230a      	movs	r3, #10
 8001a36:	e012      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a38:	2309      	movs	r3, #9
 8001a3a:	e010      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	e00e      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a40:	2307      	movs	r3, #7
 8001a42:	e00c      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a44:	2306      	movs	r3, #6
 8001a46:	e00a      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a48:	2305      	movs	r3, #5
 8001a4a:	e008      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	e006      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a50:	2303      	movs	r3, #3
 8001a52:	e004      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1ce>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	6852      	ldr	r2, [r2, #4]
 8001a62:	201f      	movs	r0, #31
 8001a64:	4002      	ands	r2, r0
 8001a66:	4093      	lsls	r3, r2
 8001a68:	000a      	movs	r2, r1
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d808      	bhi.n	8001a92 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	f7ff fa55 	bl	8000f3c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6819      	ldr	r1, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	001a      	movs	r2, r3
 8001aa0:	f7ff fa9c 	bl	8000fdc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db00      	blt.n	8001aae <HAL_ADC_ConfigChannel+0x21e>
 8001aac:	e0bc      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aae:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <HAL_ADC_ConfigChannel+0x360>)
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff f9f1 	bl	8000e98 <LL_ADC_GetCommonPathInternalCh>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a4d      	ldr	r2, [pc, #308]	; (8001bf4 <HAL_ADC_ConfigChannel+0x364>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d122      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	041b      	lsls	r3, r3, #16
 8001aca:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001acc:	d11d      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	0412      	lsls	r2, r2, #16
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	4a46      	ldr	r2, [pc, #280]	; (8001bf0 <HAL_ADC_ConfigChannel+0x360>)
 8001ad8:	0019      	movs	r1, r3
 8001ada:	0010      	movs	r0, r2
 8001adc:	f7ff f9c8 	bl	8000e70 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ae0:	4b45      	ldr	r3, [pc, #276]	; (8001bf8 <HAL_ADC_ConfigChannel+0x368>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4945      	ldr	r1, [pc, #276]	; (8001bfc <HAL_ADC_ConfigChannel+0x36c>)
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f7fe fb1e 	bl	8000128 <__udivsi3>
 8001aec:	0003      	movs	r3, r0
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	0013      	movs	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	189b      	adds	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001afa:	e002      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f9      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b08:	e08e      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a3c      	ldr	r2, [pc, #240]	; (8001c00 <HAL_ADC_ConfigChannel+0x370>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d10e      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x2a2>
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	045b      	lsls	r3, r3, #17
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d109      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	0452      	lsls	r2, r2, #17
 8001b24:	4313      	orrs	r3, r2
 8001b26:	4a32      	ldr	r2, [pc, #200]	; (8001bf0 <HAL_ADC_ConfigChannel+0x360>)
 8001b28:	0019      	movs	r1, r3
 8001b2a:	0010      	movs	r0, r2
 8001b2c:	f7ff f9a0 	bl	8000e70 <LL_ADC_SetCommonPathInternalCh>
 8001b30:	e07a      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a33      	ldr	r2, [pc, #204]	; (8001c04 <HAL_ADC_ConfigChannel+0x374>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d000      	beq.n	8001b3e <HAL_ADC_ConfigChannel+0x2ae>
 8001b3c:	e074      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	03db      	lsls	r3, r3, #15
 8001b44:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b46:	d000      	beq.n	8001b4a <HAL_ADC_ConfigChannel+0x2ba>
 8001b48:	e06e      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	03d2      	lsls	r2, r2, #15
 8001b50:	4313      	orrs	r3, r2
 8001b52:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_ADC_ConfigChannel+0x360>)
 8001b54:	0019      	movs	r1, r3
 8001b56:	0010      	movs	r0, r2
 8001b58:	f7ff f98a 	bl	8000e70 <LL_ADC_SetCommonPathInternalCh>
 8001b5c:	e064      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691a      	ldr	r2, [r3, #16]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	061b      	lsls	r3, r3, #24
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d004      	beq.n	8001b74 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <HAL_ADC_ConfigChannel+0x35c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d107      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	0010      	movs	r0, r2
 8001b80:	f7ff fa0d 	bl	8000f9e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	da4d      	bge.n	8001c28 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_ADC_ConfigChannel+0x360>)
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7ff f982 	bl	8000e98 <LL_ADC_GetCommonPathInternalCh>
 8001b94:	0003      	movs	r3, r0
 8001b96:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <HAL_ADC_ConfigChannel+0x364>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d108      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <HAL_ADC_ConfigChannel+0x378>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_ADC_ConfigChannel+0x360>)
 8001baa:	0019      	movs	r1, r3
 8001bac:	0010      	movs	r0, r2
 8001bae:	f7ff f95f 	bl	8000e70 <LL_ADC_SetCommonPathInternalCh>
 8001bb2:	e039      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_ADC_ConfigChannel+0x370>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d108      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <HAL_ADC_ConfigChannel+0x37c>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_ADC_ConfigChannel+0x360>)
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	0010      	movs	r0, r2
 8001bca:	f7ff f951 	bl	8000e70 <LL_ADC_SetCommonPathInternalCh>
 8001bce:	e02b      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <HAL_ADC_ConfigChannel+0x374>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d126      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <HAL_ADC_ConfigChannel+0x380>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <HAL_ADC_ConfigChannel+0x360>)
 8001be2:	0019      	movs	r1, r3
 8001be4:	0010      	movs	r0, r2
 8001be6:	f7ff f943 	bl	8000e70 <LL_ADC_SetCommonPathInternalCh>
 8001bea:	e01d      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x398>
 8001bec:	80000004 	.word	0x80000004
 8001bf0:	40012708 	.word	0x40012708
 8001bf4:	b0001000 	.word	0xb0001000
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	00030d40 	.word	0x00030d40
 8001c00:	b8004000 	.word	0xb8004000
 8001c04:	b4002000 	.word	0xb4002000
 8001c08:	ff7fffff 	.word	0xff7fffff
 8001c0c:	feffffff 	.word	0xfeffffff
 8001c10:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	2220      	movs	r2, #32
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c20:	2317      	movs	r3, #23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2254      	movs	r2, #84	; 0x54
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001c30:	2317      	movs	r3, #23
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	781b      	ldrb	r3, [r3, #0]
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b006      	add	sp, #24
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)

08001c40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff fa2b 	bl	80010ac <LL_ADC_IsEnabled>
 8001c56:	1e03      	subs	r3, r0, #0
 8001c58:	d000      	beq.n	8001c5c <ADC_Enable+0x1c>
 8001c5a:	e069      	b.n	8001d30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4a36      	ldr	r2, [pc, #216]	; (8001d3c <ADC_Enable+0xfc>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	d00d      	beq.n	8001c84 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	2201      	movs	r2, #1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e056      	b.n	8001d32 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff f9eb 	bl	8001064 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <ADC_Enable+0x100>)
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff f901 	bl	8000e98 <LL_ADC_GetCommonPathInternalCh>
 8001c96:	0002      	movs	r2, r0
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	041b      	lsls	r3, r3, #16
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d00f      	beq.n	8001cc0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ca0:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <ADC_Enable+0x104>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4928      	ldr	r1, [pc, #160]	; (8001d48 <ADC_Enable+0x108>)
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7fe fa3e 	bl	8000128 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	3301      	adds	r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cb2:	e002      	b.n	8001cba <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f9      	bne.n	8001cb4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7e5b      	ldrb	r3, [r3, #25]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d033      	beq.n	8001d30 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f8b2 	bl	8000e30 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cd0:	e027      	b.n	8001d22 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7ff f9e8 	bl	80010ac <LL_ADC_IsEnabled>
 8001cdc:	1e03      	subs	r3, r0, #0
 8001cde:	d104      	bne.n	8001cea <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff f9bd 	bl	8001064 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cea:	f7ff f8a1 	bl	8000e30 <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d914      	bls.n	8001d22 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d00d      	beq.n	8001d22 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	2210      	movs	r2, #16
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2201      	movs	r2, #1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e007      	b.n	8001d32 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d1d0      	bne.n	8001cd2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b004      	add	sp, #16
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	80000017 	.word	0x80000017
 8001d40:	40012708 	.word	0x40012708
 8001d44:	20000004 	.word	0x20000004
 8001d48:	00030d40 	.word	0x00030d40

08001d4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	2250      	movs	r2, #80	; 0x50
 8001d60:	4013      	ands	r3, r2
 8001d62:	d141      	bne.n	8001de8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7ff f8cf 	bl	8000f1a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d7c:	1e03      	subs	r3, r0, #0
 8001d7e:	d02e      	beq.n	8001dde <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	7e9b      	ldrb	r3, [r3, #26]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d12a      	bne.n	8001dde <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2208      	movs	r2, #8
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d123      	bne.n	8001dde <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff f9aa 	bl	80010f4 <LL_ADC_REG_IsConversionOngoing>
 8001da0:	1e03      	subs	r3, r0, #0
 8001da2:	d110      	bne.n	8001dc6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	210c      	movs	r1, #12
 8001db0:	438a      	bics	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <ADC_DMAConvCplt+0xc4>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	659a      	str	r2, [r3, #88]	; 0x58
 8001dc4:	e00b      	b.n	8001dde <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	2220      	movs	r2, #32
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7ff fd35 	bl	8001850 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001de6:	e00f      	b.n	8001e08 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	2210      	movs	r2, #16
 8001dee:	4013      	ands	r3, r2
 8001df0:	d004      	beq.n	8001dfc <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff fd43 	bl	8001880 <HAL_ADC_ErrorCallback>
}
 8001dfa:	e005      	b.n	8001e08 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	0010      	movs	r0, r2
 8001e06:	4798      	blx	r3
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b004      	add	sp, #16
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	fffffefe 	.word	0xfffffefe

08001e14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff fd1b 	bl	8001860 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b004      	add	sp, #16
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	2240      	movs	r2, #64	; 0x40
 8001e46:	431a      	orrs	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	2204      	movs	r2, #4
 8001e52:	431a      	orrs	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7ff fd10 	bl	8001880 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001e70:	46c0      	nop			; (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b002      	add	sp, #8
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b002      	add	sp, #8
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	0002      	movs	r2, r0
 8001eb0:	1dfb      	adds	r3, r7, #7
 8001eb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	1dfb      	adds	r3, r7, #7
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eba:	d809      	bhi.n	8001ed0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebc:	1dfb      	adds	r3, r7, #7
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	231f      	movs	r3, #31
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__NVIC_EnableIRQ+0x30>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	4091      	lsls	r1, r2
 8001ecc:	000a      	movs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	1dfb      	adds	r3, r7, #7
 8001ee8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001eea:	1dfb      	adds	r3, r7, #7
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b7f      	cmp	r3, #127	; 0x7f
 8001ef0:	d828      	bhi.n	8001f44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ef2:	4a2f      	ldr	r2, [pc, #188]	; (8001fb0 <__NVIC_SetPriority+0xd4>)
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	33c0      	adds	r3, #192	; 0xc0
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	589b      	ldr	r3, [r3, r2]
 8001f02:	1dfa      	adds	r2, r7, #7
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	0011      	movs	r1, r2
 8001f08:	2203      	movs	r2, #3
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	00d2      	lsls	r2, r2, #3
 8001f0e:	21ff      	movs	r1, #255	; 0xff
 8001f10:	4091      	lsls	r1, r2
 8001f12:	000a      	movs	r2, r1
 8001f14:	43d2      	mvns	r2, r2
 8001f16:	401a      	ands	r2, r3
 8001f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	019b      	lsls	r3, r3, #6
 8001f1e:	22ff      	movs	r2, #255	; 0xff
 8001f20:	401a      	ands	r2, r3
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	0018      	movs	r0, r3
 8001f28:	2303      	movs	r3, #3
 8001f2a:	4003      	ands	r3, r0
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f30:	481f      	ldr	r0, [pc, #124]	; (8001fb0 <__NVIC_SetPriority+0xd4>)
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	33c0      	adds	r3, #192	; 0xc0
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f42:	e031      	b.n	8001fa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f44:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <__NVIC_SetPriority+0xd8>)
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	230f      	movs	r3, #15
 8001f4e:	400b      	ands	r3, r1
 8001f50:	3b08      	subs	r3, #8
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3306      	adds	r3, #6
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	18d3      	adds	r3, r2, r3
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	1dfa      	adds	r2, r7, #7
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	0011      	movs	r1, r2
 8001f64:	2203      	movs	r2, #3
 8001f66:	400a      	ands	r2, r1
 8001f68:	00d2      	lsls	r2, r2, #3
 8001f6a:	21ff      	movs	r1, #255	; 0xff
 8001f6c:	4091      	lsls	r1, r2
 8001f6e:	000a      	movs	r2, r1
 8001f70:	43d2      	mvns	r2, r2
 8001f72:	401a      	ands	r2, r3
 8001f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	22ff      	movs	r2, #255	; 0xff
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	0018      	movs	r0, r3
 8001f84:	2303      	movs	r3, #3
 8001f86:	4003      	ands	r3, r0
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f8c:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <__NVIC_SetPriority+0xd8>)
 8001f8e:	1dfb      	adds	r3, r7, #7
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	001c      	movs	r4, r3
 8001f94:	230f      	movs	r3, #15
 8001f96:	4023      	ands	r3, r4
 8001f98:	3b08      	subs	r3, #8
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	3306      	adds	r3, #6
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	18c3      	adds	r3, r0, r3
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	601a      	str	r2, [r3, #0]
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b003      	add	sp, #12
 8001fae:	bd90      	pop	{r4, r7, pc}
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	1e5a      	subs	r2, r3, #1
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	045b      	lsls	r3, r3, #17
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d301      	bcc.n	8001fd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e010      	b.n	8001ff2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <SysTick_Config+0x44>)
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	3a01      	subs	r2, #1
 8001fd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd8:	2301      	movs	r3, #1
 8001fda:	425b      	negs	r3, r3
 8001fdc:	2103      	movs	r1, #3
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f7ff ff7c 	bl	8001edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <SysTick_Config+0x44>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <SysTick_Config+0x44>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	210f      	movs	r1, #15
 800200c:	187b      	adds	r3, r7, r1
 800200e:	1c02      	adds	r2, r0, #0
 8002010:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	187b      	adds	r3, r7, r1
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b25b      	sxtb	r3, r3
 800201a:	0011      	movs	r1, r2
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff ff5d 	bl	8001edc <__NVIC_SetPriority>
}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b004      	add	sp, #16
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	0002      	movs	r2, r0
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	b25b      	sxtb	r3, r3
 800203c:	0018      	movs	r0, r3
 800203e:	f7ff ff33 	bl	8001ea8 <__NVIC_EnableIRQ>
}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	46bd      	mov	sp, r7
 8002046:	b002      	add	sp, #8
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff ffaf 	bl	8001fb8 <SysTick_Config>
 800205a:	0003      	movs	r3, r0
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e077      	b.n	8002166 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a3d      	ldr	r2, [pc, #244]	; (8002170 <HAL_DMA_Init+0x10c>)
 800207c:	4694      	mov	ip, r2
 800207e:	4463      	add	r3, ip
 8002080:	2114      	movs	r1, #20
 8002082:	0018      	movs	r0, r3
 8002084:	f7fe f850 	bl	8000128 <__udivsi3>
 8002088:	0003      	movs	r3, r0
 800208a:	009a      	lsls	r2, r3, #2
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2225      	movs	r2, #37	; 0x25
 8002094:	2102      	movs	r1, #2
 8002096:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4934      	ldr	r1, [pc, #208]	; (8002174 <HAL_DMA_Init+0x110>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 fa8d 	bl	8002600 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	01db      	lsls	r3, r3, #7
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d102      	bne.n	80020f8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	213f      	movs	r1, #63	; 0x3f
 8002102:	400a      	ands	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800210e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d011      	beq.n	800213c <HAL_DMA_Init+0xd8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d80d      	bhi.n	800213c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	0018      	movs	r0, r3
 8002124:	f000 fa98 	bl	8002658 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	e008      	b.n	800214e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2225      	movs	r2, #37	; 0x25
 8002158:	2101      	movs	r1, #1
 800215a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2224      	movs	r2, #36	; 0x24
 8002160:	2100      	movs	r1, #0
 8002162:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	bffdfff8 	.word	0xbffdfff8
 8002174:	ffff800f 	.word	0xffff800f

08002178 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2317      	movs	r3, #23
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2224      	movs	r2, #36	; 0x24
 8002192:	5c9b      	ldrb	r3, [r3, r2]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_DMA_Start_IT+0x24>
 8002198:	2302      	movs	r3, #2
 800219a:	e06f      	b.n	800227c <HAL_DMA_Start_IT+0x104>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2224      	movs	r2, #36	; 0x24
 80021a0:	2101      	movs	r1, #1
 80021a2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2225      	movs	r2, #37	; 0x25
 80021a8:	5c9b      	ldrb	r3, [r3, r2]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d157      	bne.n	8002260 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2225      	movs	r2, #37	; 0x25
 80021b4:	2102      	movs	r1, #2
 80021b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2101      	movs	r1, #1
 80021ca:	438a      	bics	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f9d3 	bl	8002580 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	210e      	movs	r1, #14
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e00f      	b.n	8002214 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2104      	movs	r1, #4
 8002200:	438a      	bics	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	210a      	movs	r1, #10
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	025b      	lsls	r3, r3, #9
 800221e:	4013      	ands	r3, r2
 8002220:	d008      	beq.n	8002234 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	0049      	lsls	r1, r1, #1
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	0049      	lsls	r1, r1, #1
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e00a      	b.n	8002276 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2224      	movs	r2, #36	; 0x24
 800226a:	2100      	movs	r1, #0
 800226c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800226e:	2317      	movs	r3, #23
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002276:	2317      	movs	r3, #23
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	781b      	ldrb	r3, [r3, #0]
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b006      	add	sp, #24
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e050      	b.n	8002338 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2225      	movs	r2, #37	; 0x25
 800229a:	5c9b      	ldrb	r3, [r3, r2]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d008      	beq.n	80022b4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	2100      	movs	r1, #0
 80022ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e041      	b.n	8002338 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	210e      	movs	r1, #14
 80022c0:	438a      	bics	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	491c      	ldr	r1, [pc, #112]	; (8002340 <HAL_DMA_Abort+0xbc>)
 80022d0:	400a      	ands	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2101      	movs	r1, #1
 80022e0:	438a      	bics	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <HAL_DMA_Abort+0xc0>)
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	221c      	movs	r2, #28
 80022ee:	4013      	ands	r3, r2
 80022f0:	2201      	movs	r2, #1
 80022f2:	409a      	lsls	r2, r3
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <HAL_DMA_Abort+0xc0>)
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002302:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00c      	beq.n	8002326 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002316:	490a      	ldr	r1, [pc, #40]	; (8002340 <HAL_DMA_Abort+0xbc>)
 8002318:	400a      	ands	r2, r1
 800231a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002324:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2225      	movs	r2, #37	; 0x25
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2224      	movs	r2, #36	; 0x24
 8002332:	2100      	movs	r1, #0
 8002334:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}
 8002340:	fffffeff 	.word	0xfffffeff
 8002344:	40020000 	.word	0x40020000

08002348 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002350:	210f      	movs	r1, #15
 8002352:	187b      	adds	r3, r7, r1
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2225      	movs	r2, #37	; 0x25
 800235c:	5c9b      	ldrb	r3, [r3, r2]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d006      	beq.n	8002372 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2204      	movs	r2, #4
 8002368:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e049      	b.n	8002406 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	210e      	movs	r1, #14
 800237e:	438a      	bics	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2101      	movs	r1, #1
 800238e:	438a      	bics	r2, r1
 8002390:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	491d      	ldr	r1, [pc, #116]	; (8002414 <HAL_DMA_Abort_IT+0xcc>)
 800239e:	400a      	ands	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_DMA_Abort_IT+0xd0>)
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	221c      	movs	r2, #28
 80023ac:	4013      	ands	r3, r2
 80023ae:	2201      	movs	r2, #1
 80023b0:	409a      	lsls	r2, r3
 80023b2:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_DMA_Abort_IT+0xd0>)
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00c      	beq.n	80023e4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d4:	490f      	ldr	r1, [pc, #60]	; (8002414 <HAL_DMA_Abort_IT+0xcc>)
 80023d6:	400a      	ands	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80023e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2225      	movs	r2, #37	; 0x25
 80023e8:	2101      	movs	r1, #1
 80023ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2224      	movs	r2, #36	; 0x24
 80023f0:	2100      	movs	r1, #0
 80023f2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	0010      	movs	r0, r2
 8002404:	4798      	blx	r3
    }
  }
  return status;
 8002406:	230f      	movs	r3, #15
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	781b      	ldrb	r3, [r3, #0]
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}
 8002414:	fffffeff 	.word	0xfffffeff
 8002418:	40020000 	.word	0x40020000

0800241c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002424:	4b55      	ldr	r3, [pc, #340]	; (800257c <HAL_DMA_IRQHandler+0x160>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	221c      	movs	r2, #28
 8002438:	4013      	ands	r3, r2
 800243a:	2204      	movs	r2, #4
 800243c:	409a      	lsls	r2, r3
 800243e:	0013      	movs	r3, r2
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4013      	ands	r3, r2
 8002444:	d027      	beq.n	8002496 <HAL_DMA_IRQHandler+0x7a>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2204      	movs	r2, #4
 800244a:	4013      	ands	r3, r2
 800244c:	d023      	beq.n	8002496 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2220      	movs	r2, #32
 8002456:	4013      	ands	r3, r2
 8002458:	d107      	bne.n	800246a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2104      	movs	r1, #4
 8002466:	438a      	bics	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800246a:	4b44      	ldr	r3, [pc, #272]	; (800257c <HAL_DMA_IRQHandler+0x160>)
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	221c      	movs	r2, #28
 8002474:	4013      	ands	r3, r2
 8002476:	2204      	movs	r2, #4
 8002478:	409a      	lsls	r2, r3
 800247a:	4b40      	ldr	r3, [pc, #256]	; (800257c <HAL_DMA_IRQHandler+0x160>)
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	2b00      	cmp	r3, #0
 8002486:	d100      	bne.n	800248a <HAL_DMA_IRQHandler+0x6e>
 8002488:	e073      	b.n	8002572 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	0010      	movs	r0, r2
 8002492:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002494:	e06d      	b.n	8002572 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	221c      	movs	r2, #28
 800249c:	4013      	ands	r3, r2
 800249e:	2202      	movs	r2, #2
 80024a0:	409a      	lsls	r2, r3
 80024a2:	0013      	movs	r3, r2
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4013      	ands	r3, r2
 80024a8:	d02e      	beq.n	8002508 <HAL_DMA_IRQHandler+0xec>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2202      	movs	r2, #2
 80024ae:	4013      	ands	r3, r2
 80024b0:	d02a      	beq.n	8002508 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2220      	movs	r2, #32
 80024ba:	4013      	ands	r3, r2
 80024bc:	d10b      	bne.n	80024d6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	210a      	movs	r1, #10
 80024ca:	438a      	bics	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2225      	movs	r2, #37	; 0x25
 80024d2:	2101      	movs	r1, #1
 80024d4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <HAL_DMA_IRQHandler+0x160>)
 80024d8:	6859      	ldr	r1, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	221c      	movs	r2, #28
 80024e0:	4013      	ands	r3, r2
 80024e2:	2202      	movs	r2, #2
 80024e4:	409a      	lsls	r2, r3
 80024e6:	4b25      	ldr	r3, [pc, #148]	; (800257c <HAL_DMA_IRQHandler+0x160>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2224      	movs	r2, #36	; 0x24
 80024f0:	2100      	movs	r1, #0
 80024f2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d03a      	beq.n	8002572 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	0010      	movs	r0, r2
 8002504:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002506:	e034      	b.n	8002572 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	221c      	movs	r2, #28
 800250e:	4013      	ands	r3, r2
 8002510:	2208      	movs	r2, #8
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	d02b      	beq.n	8002574 <HAL_DMA_IRQHandler+0x158>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2208      	movs	r2, #8
 8002520:	4013      	ands	r3, r2
 8002522:	d027      	beq.n	8002574 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	210e      	movs	r1, #14
 8002530:	438a      	bics	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_DMA_IRQHandler+0x160>)
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	221c      	movs	r2, #28
 800253e:	4013      	ands	r3, r2
 8002540:	2201      	movs	r2, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_DMA_IRQHandler+0x160>)
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2225      	movs	r2, #37	; 0x25
 8002554:	2101      	movs	r1, #1
 8002556:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2224      	movs	r2, #36	; 0x24
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	0010      	movs	r0, r2
 8002570:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46c0      	nop			; (mov r8, r8)
}
 8002576:	46bd      	mov	sp, r7
 8002578:	b004      	add	sp, #16
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40020000 	.word	0x40020000

08002580 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002596:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80025a8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <DMA_SetConfig+0x7c>)
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	221c      	movs	r2, #28
 80025b4:	4013      	ands	r3, r2
 80025b6:	2201      	movs	r2, #1
 80025b8:	409a      	lsls	r2, r3
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <DMA_SetConfig+0x7c>)
 80025bc:	430a      	orrs	r2, r1
 80025be:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d108      	bne.n	80025e2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025e0:	e007      	b.n	80025f2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	60da      	str	r2, [r3, #12]
}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b004      	add	sp, #16
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	40020000 	.word	0x40020000

08002600 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002610:	4694      	mov	ip, r2
 8002612:	4463      	add	r3, ip
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	001a      	movs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	001a      	movs	r2, r3
 8002622:	23ff      	movs	r3, #255	; 0xff
 8002624:	4013      	ands	r3, r2
 8002626:	3b08      	subs	r3, #8
 8002628:	2114      	movs	r1, #20
 800262a:	0018      	movs	r0, r3
 800262c:	f7fd fd7c 	bl	8000128 <__udivsi3>
 8002630:	0003      	movs	r3, r0
 8002632:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a07      	ldr	r2, [pc, #28]	; (8002654 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002638:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	221f      	movs	r2, #31
 800263e:	4013      	ands	r3, r2
 8002640:	2201      	movs	r2, #1
 8002642:	409a      	lsls	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	b004      	add	sp, #16
 800264e:	bd80      	pop	{r7, pc}
 8002650:	10008200 	.word	0x10008200
 8002654:	40020880 	.word	0x40020880

08002658 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	223f      	movs	r2, #63	; 0x3f
 8002666:	4013      	ands	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800266e:	4694      	mov	ip, r2
 8002670:	4463      	add	r3, ip
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	001a      	movs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800267e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3b01      	subs	r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	4013      	ands	r3, r2
 8002688:	2201      	movs	r2, #1
 800268a:	409a      	lsls	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b004      	add	sp, #16
 8002696:	bd80      	pop	{r7, pc}
 8002698:	1000823f 	.word	0x1000823f
 800269c:	40020940 	.word	0x40020940

080026a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ae:	e147      	b.n	8002940 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4091      	lsls	r1, r2
 80026ba:	000a      	movs	r2, r1
 80026bc:	4013      	ands	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d100      	bne.n	80026c8 <HAL_GPIO_Init+0x28>
 80026c6:	e138      	b.n	800293a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2203      	movs	r2, #3
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d005      	beq.n	80026e0 <HAL_GPIO_Init+0x40>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2203      	movs	r2, #3
 80026da:	4013      	ands	r3, r2
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d130      	bne.n	8002742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	409a      	lsls	r2, r3
 80026ee:	0013      	movs	r3, r2
 80026f0:	43da      	mvns	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	409a      	lsls	r2, r3
 8002702:	0013      	movs	r3, r2
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002716:	2201      	movs	r2, #1
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
 800271c:	0013      	movs	r3, r2
 800271e:	43da      	mvns	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	2201      	movs	r2, #1
 800272e:	401a      	ands	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
 8002734:	0013      	movs	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2203      	movs	r2, #3
 8002748:	4013      	ands	r3, r2
 800274a:	2b03      	cmp	r3, #3
 800274c:	d017      	beq.n	800277e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	409a      	lsls	r2, r3
 800275c:	0013      	movs	r3, r2
 800275e:	43da      	mvns	r2, r3
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	409a      	lsls	r2, r3
 8002770:	0013      	movs	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2203      	movs	r2, #3
 8002784:	4013      	ands	r3, r2
 8002786:	2b02      	cmp	r3, #2
 8002788:	d123      	bne.n	80027d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	58d3      	ldr	r3, [r2, r3]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2207      	movs	r2, #7
 800279c:	4013      	ands	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	409a      	lsls	r2, r3
 80027a4:	0013      	movs	r3, r2
 80027a6:	43da      	mvns	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2107      	movs	r1, #7
 80027b6:	400b      	ands	r3, r1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	409a      	lsls	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	6939      	ldr	r1, [r7, #16]
 80027d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	2203      	movs	r2, #3
 80027de:	409a      	lsls	r2, r3
 80027e0:	0013      	movs	r3, r2
 80027e2:	43da      	mvns	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2203      	movs	r2, #3
 80027f0:	401a      	ands	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	23c0      	movs	r3, #192	; 0xc0
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	4013      	ands	r3, r2
 8002810:	d100      	bne.n	8002814 <HAL_GPIO_Init+0x174>
 8002812:	e092      	b.n	800293a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002814:	4a50      	ldr	r2, [pc, #320]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3318      	adds	r3, #24
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	589b      	ldr	r3, [r3, r2]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2203      	movs	r2, #3
 8002826:	4013      	ands	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	220f      	movs	r2, #15
 800282c:	409a      	lsls	r2, r3
 800282e:	0013      	movs	r3, r2
 8002830:	43da      	mvns	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	23a0      	movs	r3, #160	; 0xa0
 800283c:	05db      	lsls	r3, r3, #23
 800283e:	429a      	cmp	r2, r3
 8002840:	d013      	beq.n	800286a <HAL_GPIO_Init+0x1ca>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a45      	ldr	r2, [pc, #276]	; (800295c <HAL_GPIO_Init+0x2bc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00d      	beq.n	8002866 <HAL_GPIO_Init+0x1c6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a44      	ldr	r2, [pc, #272]	; (8002960 <HAL_GPIO_Init+0x2c0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <HAL_GPIO_Init+0x1c2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a43      	ldr	r2, [pc, #268]	; (8002964 <HAL_GPIO_Init+0x2c4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_GPIO_Init+0x1be>
 800285a:	2303      	movs	r3, #3
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x1cc>
 800285e:	2305      	movs	r3, #5
 8002860:	e004      	b.n	800286c <HAL_GPIO_Init+0x1cc>
 8002862:	2302      	movs	r3, #2
 8002864:	e002      	b.n	800286c <HAL_GPIO_Init+0x1cc>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_GPIO_Init+0x1cc>
 800286a:	2300      	movs	r3, #0
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	2103      	movs	r1, #3
 8002870:	400a      	ands	r2, r1
 8002872:	00d2      	lsls	r2, r2, #3
 8002874:	4093      	lsls	r3, r2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800287c:	4936      	ldr	r1, [pc, #216]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3318      	adds	r3, #24
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800288a:	4b33      	ldr	r3, [pc, #204]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43da      	mvns	r2, r3
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	035b      	lsls	r3, r3, #13
 80028a2:	4013      	ands	r3, r2
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80028b4:	4b28      	ldr	r3, [pc, #160]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43da      	mvns	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	039b      	lsls	r3, r3, #14
 80028cc:	4013      	ands	r3, r2
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028de:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 80028e0:	2384      	movs	r3, #132	; 0x84
 80028e2:	58d3      	ldr	r3, [r2, r3]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	43da      	mvns	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	4013      	ands	r3, r2
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002904:	4914      	ldr	r1, [pc, #80]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 8002906:	2284      	movs	r2, #132	; 0x84
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800290c:	4a12      	ldr	r2, [pc, #72]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	58d3      	ldr	r3, [r2, r3]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43da      	mvns	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	025b      	lsls	r3, r3, #9
 8002926:	4013      	ands	r3, r2
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002932:	4909      	ldr	r1, [pc, #36]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	40da      	lsrs	r2, r3
 8002948:	1e13      	subs	r3, r2, #0
 800294a:	d000      	beq.n	800294e <HAL_GPIO_Init+0x2ae>
 800294c:	e6b0      	b.n	80026b0 <HAL_GPIO_Init+0x10>
  }
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b006      	add	sp, #24
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021800 	.word	0x40021800
 800295c:	50000400 	.word	0x50000400
 8002960:	50000800 	.word	0x50000800
 8002964:	50000c00 	.word	0x50000c00

08002968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	0008      	movs	r0, r1
 8002972:	0011      	movs	r1, r2
 8002974:	1cbb      	adds	r3, r7, #2
 8002976:	1c02      	adds	r2, r0, #0
 8002978:	801a      	strh	r2, [r3, #0]
 800297a:	1c7b      	adds	r3, r7, #1
 800297c:	1c0a      	adds	r2, r1, #0
 800297e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002980:	1c7b      	adds	r3, r7, #1
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002988:	1cbb      	adds	r3, r7, #2
 800298a:	881a      	ldrh	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002990:	e003      	b.n	800299a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002992:	1cbb      	adds	r3, r7, #2
 8002994:	881a      	ldrh	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	629a      	str	r2, [r3, #40]	; 0x28
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d11f      	bne.n	8002a08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	0013      	movs	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	189b      	adds	r3, r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4912      	ldr	r1, [pc, #72]	; (8002a20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7fd fba6 	bl	8000128 <__udivsi3>
 80029dc:	0003      	movs	r3, r0
 80029de:	3301      	adds	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e2:	e008      	b.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	e001      	b.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e009      	b.n	8002a0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	401a      	ands	r2, r3
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d0ed      	beq.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b004      	add	sp, #16
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	40007000 	.word	0x40007000
 8002a18:	fffff9ff 	.word	0xfffff9ff
 8002a1c:	20000004 	.word	0x20000004
 8002a20:	000f4240 	.word	0x000f4240

08002a24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	23e0      	movs	r3, #224	; 0xe0
 8002a2e:	01db      	lsls	r3, r3, #7
 8002a30:	4013      	ands	r3, r2
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e2fe      	b.n	800304c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2201      	movs	r2, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	d100      	bne.n	8002a5a <HAL_RCC_OscConfig+0x1e>
 8002a58:	e07c      	b.n	8002b54 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5a:	4bc3      	ldr	r3, [pc, #780]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2238      	movs	r2, #56	; 0x38
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a64:	4bc0      	ldr	r3, [pc, #768]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d102      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3e>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d002      	beq.n	8002a80 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d10b      	bne.n	8002a98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	4bb9      	ldr	r3, [pc, #740]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	029b      	lsls	r3, r3, #10
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d062      	beq.n	8002b52 <HAL_RCC_OscConfig+0x116>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d15e      	bne.n	8002b52 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e2d9      	b.n	800304c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	025b      	lsls	r3, r3, #9
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x78>
 8002aa4:	4bb0      	ldr	r3, [pc, #704]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4baf      	ldr	r3, [pc, #700]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	0249      	lsls	r1, r1, #9
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e020      	b.n	8002af6 <HAL_RCC_OscConfig+0xba>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	23a0      	movs	r3, #160	; 0xa0
 8002aba:	02db      	lsls	r3, r3, #11
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d10e      	bne.n	8002ade <HAL_RCC_OscConfig+0xa2>
 8002ac0:	4ba9      	ldr	r3, [pc, #676]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4ba8      	ldr	r3, [pc, #672]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ac6:	2180      	movs	r1, #128	; 0x80
 8002ac8:	02c9      	lsls	r1, r1, #11
 8002aca:	430a      	orrs	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	4ba6      	ldr	r3, [pc, #664]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4ba5      	ldr	r3, [pc, #660]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	0249      	lsls	r1, r1, #9
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e00b      	b.n	8002af6 <HAL_RCC_OscConfig+0xba>
 8002ade:	4ba2      	ldr	r3, [pc, #648]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4ba1      	ldr	r3, [pc, #644]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ae4:	49a1      	ldr	r1, [pc, #644]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	4b9f      	ldr	r3, [pc, #636]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b9e      	ldr	r3, [pc, #632]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002af0:	499f      	ldr	r1, [pc, #636]	; (8002d70 <HAL_RCC_OscConfig+0x334>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d014      	beq.n	8002b28 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fe f997 	bl	8000e30 <HAL_GetTick>
 8002b02:	0003      	movs	r3, r0
 8002b04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7fe f992 	bl	8000e30 <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e298      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1a:	4b93      	ldr	r3, [pc, #588]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	029b      	lsls	r3, r3, #10
 8002b22:	4013      	ands	r3, r2
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xcc>
 8002b26:	e015      	b.n	8002b54 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe f982 	bl	8000e30 <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b32:	f7fe f97d 	bl	8000e30 <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b64      	cmp	r3, #100	; 0x64
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e283      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b44:	4b88      	ldr	r3, [pc, #544]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	029b      	lsls	r3, r3, #10
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0xf6>
 8002b50:	e000      	b.n	8002b54 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d100      	bne.n	8002b60 <HAL_RCC_OscConfig+0x124>
 8002b5e:	e099      	b.n	8002c94 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b60:	4b81      	ldr	r3, [pc, #516]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2238      	movs	r2, #56	; 0x38
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	4013      	ands	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d102      	bne.n	8002b80 <HAL_RCC_OscConfig+0x144>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d002      	beq.n	8002b86 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d135      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b86:	4b78      	ldr	r3, [pc, #480]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d005      	beq.n	8002b9e <HAL_RCC_OscConfig+0x162>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e256      	b.n	800304c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b72      	ldr	r3, [pc, #456]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4a74      	ldr	r2, [pc, #464]	; (8002d74 <HAL_RCC_OscConfig+0x338>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	021a      	lsls	r2, r3, #8
 8002bae:	4b6e      	ldr	r3, [pc, #440]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d112      	bne.n	8002be0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bba:	4b6b      	ldr	r3, [pc, #428]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a6e      	ldr	r2, [pc, #440]	; (8002d78 <HAL_RCC_OscConfig+0x33c>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	4b67      	ldr	r3, [pc, #412]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002bce:	4b66      	ldr	r3, [pc, #408]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0adb      	lsrs	r3, r3, #11
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	4a68      	ldr	r2, [pc, #416]	; (8002d7c <HAL_RCC_OscConfig+0x340>)
 8002bda:	40da      	lsrs	r2, r3
 8002bdc:	4b68      	ldr	r3, [pc, #416]	; (8002d80 <HAL_RCC_OscConfig+0x344>)
 8002bde:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002be0:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_OscConfig+0x348>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7fe f8c7 	bl	8000d78 <HAL_InitTick>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d051      	beq.n	8002c92 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e22c      	b.n	800304c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d030      	beq.n	8002c5c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bfa:	4b5b      	ldr	r3, [pc, #364]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a5e      	ldr	r2, [pc, #376]	; (8002d78 <HAL_RCC_OscConfig+0x33c>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	0019      	movs	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002c0e:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4b55      	ldr	r3, [pc, #340]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	0049      	lsls	r1, r1, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f908 	bl	8000e30 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe f903 	bl	8000e30 <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e209      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c38:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4013      	ands	r3, r2
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b48      	ldr	r3, [pc, #288]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	; (8002d74 <HAL_RCC_OscConfig+0x338>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	021a      	lsls	r2, r3, #8
 8002c54:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	e01b      	b.n	8002c94 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c62:	4949      	ldr	r1, [pc, #292]	; (8002d88 <HAL_RCC_OscConfig+0x34c>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f8e2 	bl	8000e30 <HAL_GetTick>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c72:	f7fe f8dd 	bl	8000e30 <HAL_GetTick>
 8002c76:	0002      	movs	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e1e3      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c84:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x236>
 8002c90:	e000      	b.n	8002c94 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c92:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2208      	movs	r2, #8
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d047      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2238      	movs	r2, #56	; 0x38
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b18      	cmp	r3, #24
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002caa:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cae:	2202      	movs	r2, #2
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d03c      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d138      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e1c5      	b.n	800304c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d019      	beq.n	8002cfc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002cca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ccc:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f8ac 	bl	8000e30 <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cde:	f7fe f8a7 	bl	8000e30 <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e1ad      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d0f1      	beq.n	8002cde <HAL_RCC_OscConfig+0x2a2>
 8002cfa:	e018      	b.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002cfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002d02:	2101      	movs	r1, #1
 8002d04:	438a      	bics	r2, r1
 8002d06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe f892 	bl	8000e30 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d12:	f7fe f88d 	bl	8000e30 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e193      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d28:	2202      	movs	r2, #2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d1f1      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2204      	movs	r2, #4
 8002d34:	4013      	ands	r3, r2
 8002d36:	d100      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2fe>
 8002d38:	e0c6      	b.n	8002ec8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	231f      	movs	r3, #31
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2238      	movs	r2, #56	; 0x38
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d11e      	bne.n	8002d8c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	2202      	movs	r2, #2
 8002d54:	4013      	ands	r3, r2
 8002d56:	d100      	bne.n	8002d5a <HAL_RCC_OscConfig+0x31e>
 8002d58:	e0b6      	b.n	8002ec8 <HAL_RCC_OscConfig+0x48c>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d000      	beq.n	8002d64 <HAL_RCC_OscConfig+0x328>
 8002d62:	e0b1      	b.n	8002ec8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e171      	b.n	800304c <HAL_RCC_OscConfig+0x610>
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	fffeffff 	.word	0xfffeffff
 8002d70:	fffbffff 	.word	0xfffbffff
 8002d74:	ffff80ff 	.word	0xffff80ff
 8002d78:	ffffc7ff 	.word	0xffffc7ff
 8002d7c:	00f42400 	.word	0x00f42400
 8002d80:	20000004 	.word	0x20000004
 8002d84:	20000008 	.word	0x20000008
 8002d88:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d8c:	4bb1      	ldr	r3, [pc, #708]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	055b      	lsls	r3, r3, #21
 8002d94:	4013      	ands	r3, r2
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_OscConfig+0x360>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x362>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d011      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	4bac      	ldr	r3, [pc, #688]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002da6:	4bab      	ldr	r3, [pc, #684]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	0549      	lsls	r1, r1, #21
 8002dac:	430a      	orrs	r2, r1
 8002dae:	63da      	str	r2, [r3, #60]	; 0x3c
 8002db0:	4ba8      	ldr	r3, [pc, #672]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	055b      	lsls	r3, r3, #21
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002dbe:	231f      	movs	r3, #31
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc6:	4ba4      	ldr	r3, [pc, #656]	; (8003058 <HAL_RCC_OscConfig+0x61c>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d11a      	bne.n	8002e08 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dd2:	4ba1      	ldr	r3, [pc, #644]	; (8003058 <HAL_RCC_OscConfig+0x61c>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4ba0      	ldr	r3, [pc, #640]	; (8003058 <HAL_RCC_OscConfig+0x61c>)
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	0049      	lsls	r1, r1, #1
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002de0:	f7fe f826 	bl	8000e30 <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dea:	f7fe f821 	bl	8000e30 <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e127      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dfc:	4b96      	ldr	r3, [pc, #600]	; (8003058 <HAL_RCC_OscConfig+0x61c>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4013      	ands	r3, r2
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3e2>
 8002e10:	4b90      	ldr	r3, [pc, #576]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e14:	4b8f      	ldr	r3, [pc, #572]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e16:	2101      	movs	r1, #1
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e1c:	e01c      	b.n	8002e58 <HAL_RCC_OscConfig+0x41c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x404>
 8002e26:	4b8b      	ldr	r3, [pc, #556]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e2a:	4b8a      	ldr	r3, [pc, #552]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e32:	4b88      	ldr	r3, [pc, #544]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e36:	4b87      	ldr	r3, [pc, #540]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e38:	2101      	movs	r1, #1
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0x41c>
 8002e40:	4b84      	ldr	r3, [pc, #528]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e44:	4b83      	ldr	r3, [pc, #524]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e46:	2101      	movs	r1, #1
 8002e48:	438a      	bics	r2, r1
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e4c:	4b81      	ldr	r3, [pc, #516]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e50:	4b80      	ldr	r3, [pc, #512]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e52:	2104      	movs	r1, #4
 8002e54:	438a      	bics	r2, r1
 8002e56:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d014      	beq.n	8002e8a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fd ffe6 	bl	8000e30 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e68:	e009      	b.n	8002e7e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fd ffe1 	bl	8000e30 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	4a79      	ldr	r2, [pc, #484]	; (800305c <HAL_RCC_OscConfig+0x620>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e0e6      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7e:	4b75      	ldr	r3, [pc, #468]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	2202      	movs	r2, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x42e>
 8002e88:	e013      	b.n	8002eb2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fd ffd1 	bl	8000e30 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e92:	e009      	b.n	8002ea8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7fd ffcc 	bl	8000e30 <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	4a6f      	ldr	r2, [pc, #444]	; (800305c <HAL_RCC_OscConfig+0x620>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e0d1      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ea8:	4b6a      	ldr	r3, [pc, #424]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	2202      	movs	r2, #2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002eb2:	231f      	movs	r3, #31
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d105      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ebc:	4b65      	ldr	r3, [pc, #404]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec0:	4b64      	ldr	r3, [pc, #400]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002ec2:	4967      	ldr	r1, [pc, #412]	; (8003060 <HAL_RCC_OscConfig+0x624>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d100      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x496>
 8002ed0:	e0bb      	b.n	800304a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed2:	4b60      	ldr	r3, [pc, #384]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2238      	movs	r2, #56	; 0x38
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d100      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4a4>
 8002ede:	e07b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d156      	bne.n	8002f96 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee8:	4b5a      	ldr	r3, [pc, #360]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002eee:	495d      	ldr	r1, [pc, #372]	; (8003064 <HAL_RCC_OscConfig+0x628>)
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fd ff9c 	bl	8000e30 <HAL_GetTick>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fd ff97 	bl	8000e30 <HAL_GetTick>
 8002f02:	0002      	movs	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e09d      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	049b      	lsls	r3, r3, #18
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d1f0      	bne.n	8002efe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1c:	4b4d      	ldr	r3, [pc, #308]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a51      	ldr	r2, [pc, #324]	; (8003068 <HAL_RCC_OscConfig+0x62c>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	4b42      	ldr	r3, [pc, #264]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f50:	4b40      	ldr	r3, [pc, #256]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	0449      	lsls	r1, r1, #17
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0549      	lsls	r1, r1, #21
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fd ff60 	bl	8000e30 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
 8002f72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fd ff5b 	bl	8000e30 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e061      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f88:	4b32      	ldr	r3, [pc, #200]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	049b      	lsls	r3, r3, #18
 8002f90:	4013      	ands	r3, r2
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x53a>
 8002f94:	e059      	b.n	800304a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f9c:	4931      	ldr	r1, [pc, #196]	; (8003064 <HAL_RCC_OscConfig+0x628>)
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7fd ff45 	bl	8000e30 <HAL_GetTick>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fd ff40 	bl	8000e30 <HAL_GetTick>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e046      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fbe:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	049b      	lsls	r3, r3, #18
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	4b21      	ldr	r3, [pc, #132]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002fd0:	4926      	ldr	r1, [pc, #152]	; (800306c <HAL_RCC_OscConfig+0x630>)
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	e038      	b.n	800304a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e033      	b.n	800304c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2203      	movs	r2, #3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d126      	bne.n	8003046 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2270      	movs	r2, #112	; 0x70
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d11f      	bne.n	8003046 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	23fe      	movs	r3, #254	; 0xfe
 800300a:	01db      	lsls	r3, r3, #7
 800300c:	401a      	ands	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d116      	bne.n	8003046 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	23f8      	movs	r3, #248	; 0xf8
 800301c:	039b      	lsls	r3, r3, #14
 800301e:	401a      	ands	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d10e      	bne.n	8003046 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	23e0      	movs	r3, #224	; 0xe0
 800302c:	051b      	lsls	r3, r3, #20
 800302e:	401a      	ands	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	0f5b      	lsrs	r3, r3, #29
 800303c:	075a      	lsls	r2, r3, #29
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b008      	add	sp, #32
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	40007000 	.word	0x40007000
 800305c:	00001388 	.word	0x00001388
 8003060:	efffffff 	.word	0xefffffff
 8003064:	feffffff 	.word	0xfeffffff
 8003068:	11c1808c 	.word	0x11c1808c
 800306c:	eefefffc 	.word	0xeefefffc

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0e9      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2207      	movs	r2, #7
 800308a:	4013      	ands	r3, r2
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d91e      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b73      	ldr	r3, [pc, #460]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2207      	movs	r2, #7
 8003098:	4393      	bics	r3, r2
 800309a:	0019      	movs	r1, r3
 800309c:	4b70      	ldr	r3, [pc, #448]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030a4:	f7fd fec4 	bl	8000e30 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030ac:	e009      	b.n	80030c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ae:	f7fd febf 	bl	8000e30 <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	4a6a      	ldr	r2, [pc, #424]	; (8003264 <HAL_RCC_ClockConfig+0x1f4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e0ca      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030c2:	4b67      	ldr	r3, [pc, #412]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2207      	movs	r2, #7
 80030c8:	4013      	ands	r3, r2
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1ee      	bne.n	80030ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2202      	movs	r2, #2
 80030d6:	4013      	ands	r3, r2
 80030d8:	d015      	beq.n	8003106 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2204      	movs	r2, #4
 80030e0:	4013      	ands	r3, r2
 80030e2:	d006      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030e4:	4b60      	ldr	r3, [pc, #384]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 80030ea:	21e0      	movs	r1, #224	; 0xe0
 80030ec:	01c9      	lsls	r1, r1, #7
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f2:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4a5d      	ldr	r2, [pc, #372]	; (800326c <HAL_RCC_ClockConfig+0x1fc>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2201      	movs	r2, #1
 800310c:	4013      	ands	r3, r2
 800310e:	d057      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d107      	bne.n	8003128 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	029b      	lsls	r3, r3, #10
 8003120:	4013      	ands	r3, r2
 8003122:	d12b      	bne.n	800317c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e097      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d107      	bne.n	8003140 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003130:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	049b      	lsls	r3, r3, #18
 8003138:	4013      	ands	r3, r2
 800313a:	d11f      	bne.n	800317c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e08b      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003148:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4013      	ands	r3, r2
 8003152:	d113      	bne.n	800317c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e07f      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d106      	bne.n	800316e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003160:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d108      	bne.n	800317c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e074      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316e:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	2202      	movs	r2, #2
 8003174:	4013      	ands	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e06d      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800317c:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2207      	movs	r2, #7
 8003182:	4393      	bics	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	4b37      	ldr	r3, [pc, #220]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003190:	f7fd fe4e 	bl	8000e30 <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003198:	e009      	b.n	80031ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319a:	f7fd fe49 	bl	8000e30 <HAL_GetTick>
 800319e:	0002      	movs	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <HAL_RCC_ClockConfig+0x1f4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e054      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2238      	movs	r2, #56	; 0x38
 80031b4:	401a      	ands	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1ec      	bne.n	800319a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2207      	movs	r2, #7
 80031c6:	4013      	ands	r3, r2
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d21e      	bcs.n	800320c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2207      	movs	r2, #7
 80031d4:	4393      	bics	r3, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031e0:	f7fd fe26 	bl	8000e30 <HAL_GetTick>
 80031e4:	0003      	movs	r3, r0
 80031e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031e8:	e009      	b.n	80031fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ea:	f7fd fe21 	bl	8000e30 <HAL_GetTick>
 80031ee:	0002      	movs	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <HAL_RCC_ClockConfig+0x1f4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e02c      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2207      	movs	r2, #7
 8003204:	4013      	ands	r3, r2
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d1ee      	bne.n	80031ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2204      	movs	r2, #4
 8003212:	4013      	ands	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	4a15      	ldr	r2, [pc, #84]	; (8003270 <HAL_RCC_ClockConfig+0x200>)
 800321c:	4013      	ands	r3, r2
 800321e:	0019      	movs	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800322a:	f000 f829 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800322e:	0001      	movs	r1, r0
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	220f      	movs	r2, #15
 8003238:	401a      	ands	r2, r3
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_RCC_ClockConfig+0x204>)
 800323c:	0092      	lsls	r2, r2, #2
 800323e:	58d3      	ldr	r3, [r2, r3]
 8003240:	221f      	movs	r2, #31
 8003242:	4013      	ands	r3, r2
 8003244:	000a      	movs	r2, r1
 8003246:	40da      	lsrs	r2, r3
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_ClockConfig+0x208>)
 800324a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_ClockConfig+0x20c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0018      	movs	r0, r3
 8003252:	f7fd fd91 	bl	8000d78 <HAL_InitTick>
 8003256:	0003      	movs	r3, r0
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b004      	add	sp, #16
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40022000 	.word	0x40022000
 8003264:	00001388 	.word	0x00001388
 8003268:	40021000 	.word	0x40021000
 800326c:	fffff0ff 	.word	0xfffff0ff
 8003270:	ffff8fff 	.word	0xffff8fff
 8003274:	0800557c 	.word	0x0800557c
 8003278:	20000004 	.word	0x20000004
 800327c:	20000008 	.word	0x20000008

08003280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003286:	4b3c      	ldr	r3, [pc, #240]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2238      	movs	r2, #56	; 0x38
 800328c:	4013      	ands	r3, r2
 800328e:	d10f      	bne.n	80032b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003290:	4b39      	ldr	r3, [pc, #228]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0adb      	lsrs	r3, r3, #11
 8003296:	2207      	movs	r2, #7
 8003298:	4013      	ands	r3, r2
 800329a:	2201      	movs	r2, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	0013      	movs	r3, r2
 80032a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80032a2:	6839      	ldr	r1, [r7, #0]
 80032a4:	4835      	ldr	r0, [pc, #212]	; (800337c <HAL_RCC_GetSysClockFreq+0xfc>)
 80032a6:	f7fc ff3f 	bl	8000128 <__udivsi3>
 80032aa:	0003      	movs	r3, r0
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	e05d      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032b0:	4b31      	ldr	r3, [pc, #196]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2238      	movs	r2, #56	; 0x38
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032bc:	4b30      	ldr	r3, [pc, #192]	; (8003380 <HAL_RCC_GetSysClockFreq+0x100>)
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	e054      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2238      	movs	r2, #56	; 0x38
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d138      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2203      	movs	r2, #3
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	2207      	movs	r2, #7
 80032e0:	4013      	ands	r3, r2
 80032e2:	3301      	adds	r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d10d      	bne.n	8003308 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4824      	ldr	r0, [pc, #144]	; (8003380 <HAL_RCC_GetSysClockFreq+0x100>)
 80032f0:	f7fc ff1a 	bl	8000128 <__udivsi3>
 80032f4:	0003      	movs	r3, r0
 80032f6:	0019      	movs	r1, r3
 80032f8:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	227f      	movs	r2, #127	; 0x7f
 8003300:	4013      	ands	r3, r2
 8003302:	434b      	muls	r3, r1
 8003304:	617b      	str	r3, [r7, #20]
        break;
 8003306:	e00d      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	481c      	ldr	r0, [pc, #112]	; (800337c <HAL_RCC_GetSysClockFreq+0xfc>)
 800330c:	f7fc ff0c 	bl	8000128 <__udivsi3>
 8003310:	0003      	movs	r3, r0
 8003312:	0019      	movs	r1, r3
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	227f      	movs	r2, #127	; 0x7f
 800331c:	4013      	ands	r3, r2
 800331e:	434b      	muls	r3, r1
 8003320:	617b      	str	r3, [r7, #20]
        break;
 8003322:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	0f5b      	lsrs	r3, r3, #29
 800332a:	2207      	movs	r2, #7
 800332c:	4013      	ands	r3, r2
 800332e:	3301      	adds	r3, #1
 8003330:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	6978      	ldr	r0, [r7, #20]
 8003336:	f7fc fef7 	bl	8000128 <__udivsi3>
 800333a:	0003      	movs	r3, r0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	e015      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003340:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2238      	movs	r2, #56	; 0x38
 8003346:	4013      	ands	r3, r2
 8003348:	2b20      	cmp	r3, #32
 800334a:	d103      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e00b      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2238      	movs	r2, #56	; 0x38
 800335a:	4013      	ands	r3, r2
 800335c:	2b18      	cmp	r3, #24
 800335e:	d103      	bne.n	8003368 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003360:	23fa      	movs	r3, #250	; 0xfa
 8003362:	01db      	lsls	r3, r3, #7
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	e001      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800336c:	693b      	ldr	r3, [r7, #16]
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b006      	add	sp, #24
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	40021000 	.word	0x40021000
 800337c:	00f42400 	.word	0x00f42400
 8003380:	007a1200 	.word	0x007a1200

08003384 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003388:	4b02      	ldr	r3, [pc, #8]	; (8003394 <HAL_RCC_GetHCLKFreq+0x10>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	20000004 	.word	0x20000004

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b5b0      	push	{r4, r5, r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800339c:	f7ff fff2 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033a0:	0004      	movs	r4, r0
 80033a2:	f7ff fb3f 	bl	8002a24 <LL_RCC_GetAPB1Prescaler>
 80033a6:	0003      	movs	r3, r0
 80033a8:	0b1a      	lsrs	r2, r3, #12
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ac:	0092      	lsls	r2, r2, #2
 80033ae:	58d3      	ldr	r3, [r2, r3]
 80033b0:	221f      	movs	r2, #31
 80033b2:	4013      	ands	r3, r2
 80033b4:	40dc      	lsrs	r4, r3
 80033b6:	0023      	movs	r3, r4
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bdb0      	pop	{r4, r5, r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	080055bc 	.word	0x080055bc

080033c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80033cc:	2313      	movs	r3, #19
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033d4:	2312      	movs	r3, #18
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	029b      	lsls	r3, r3, #10
 80033e4:	4013      	ands	r3, r2
 80033e6:	d100      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80033e8:	e0a3      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ea:	2011      	movs	r0, #17
 80033ec:	183b      	adds	r3, r7, r0
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f2:	4bc3      	ldr	r3, [pc, #780]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	055b      	lsls	r3, r3, #21
 80033fa:	4013      	ands	r3, r2
 80033fc:	d110      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	4bc0      	ldr	r3, [pc, #768]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003402:	4bbf      	ldr	r3, [pc, #764]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	0549      	lsls	r1, r1, #21
 8003408:	430a      	orrs	r2, r1
 800340a:	63da      	str	r2, [r3, #60]	; 0x3c
 800340c:	4bbc      	ldr	r3, [pc, #752]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800340e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	055b      	lsls	r3, r3, #21
 8003414:	4013      	ands	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341a:	183b      	adds	r3, r7, r0
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003420:	4bb8      	ldr	r3, [pc, #736]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4bb7      	ldr	r3, [pc, #732]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003426:	2180      	movs	r1, #128	; 0x80
 8003428:	0049      	lsls	r1, r1, #1
 800342a:	430a      	orrs	r2, r1
 800342c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800342e:	f7fd fcff 	bl	8000e30 <HAL_GetTick>
 8003432:	0003      	movs	r3, r0
 8003434:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003436:	e00b      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003438:	f7fd fcfa 	bl	8000e30 <HAL_GetTick>
 800343c:	0002      	movs	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d904      	bls.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003446:	2313      	movs	r3, #19
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2203      	movs	r2, #3
 800344c:	701a      	strb	r2, [r3, #0]
        break;
 800344e:	e005      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003450:	4bac      	ldr	r3, [pc, #688]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4013      	ands	r3, r2
 800345a:	d0ed      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800345c:	2313      	movs	r3, #19
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d154      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003466:	4ba6      	ldr	r3, [pc, #664]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003468:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800346a:	23c0      	movs	r3, #192	; 0xc0
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4013      	ands	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d019      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	429a      	cmp	r2, r3
 8003480:	d014      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003482:	4b9f      	ldr	r3, [pc, #636]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	4aa0      	ldr	r2, [pc, #640]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003488:	4013      	ands	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800348c:	4b9c      	ldr	r3, [pc, #624]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800348e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003490:	4b9b      	ldr	r3, [pc, #620]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	0249      	lsls	r1, r1, #9
 8003496:	430a      	orrs	r2, r1
 8003498:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800349a:	4b99      	ldr	r3, [pc, #612]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800349c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800349e:	4b98      	ldr	r3, [pc, #608]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034a0:	499a      	ldr	r1, [pc, #616]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034a6:	4b96      	ldr	r3, [pc, #600]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2201      	movs	r2, #1
 80034b0:	4013      	ands	r3, r2
 80034b2:	d016      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fd fcbc 	bl	8000e30 <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034bc:	e00c      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7fd fcb7 	bl	8000e30 <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	4a91      	ldr	r2, [pc, #580]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d904      	bls.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80034ce:	2313      	movs	r3, #19
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	2203      	movs	r2, #3
 80034d4:	701a      	strb	r2, [r3, #0]
            break;
 80034d6:	e004      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d8:	4b89      	ldr	r3, [pc, #548]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	2202      	movs	r2, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	d0ed      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80034e2:	2313      	movs	r3, #19
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ec:	4b84      	ldr	r3, [pc, #528]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	4a85      	ldr	r2, [pc, #532]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	0019      	movs	r1, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fa:	4b81      	ldr	r3, [pc, #516]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034fc:	430a      	orrs	r2, r1
 80034fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003500:	e00c      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003502:	2312      	movs	r3, #18
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2213      	movs	r2, #19
 8003508:	18ba      	adds	r2, r7, r2
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e005      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	2312      	movs	r3, #18
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2213      	movs	r2, #19
 8003516:	18ba      	adds	r2, r7, r2
 8003518:	7812      	ldrb	r2, [r2, #0]
 800351a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800351c:	2311      	movs	r3, #17
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003526:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352a:	4b75      	ldr	r3, [pc, #468]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800352c:	4979      	ldr	r1, [pc, #484]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800352e:	400a      	ands	r2, r1
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2201      	movs	r2, #1
 8003538:	4013      	ands	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353c:	4b70      	ldr	r3, [pc, #448]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	2203      	movs	r2, #3
 8003542:	4393      	bics	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4b6d      	ldr	r3, [pc, #436]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800354c:	430a      	orrs	r2, r1
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2202      	movs	r2, #2
 8003556:	4013      	ands	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800355a:	4b69      	ldr	r3, [pc, #420]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	220c      	movs	r2, #12
 8003560:	4393      	bics	r3, r2
 8003562:	0019      	movs	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800356a:	430a      	orrs	r2, r1
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2210      	movs	r2, #16
 8003574:	4013      	ands	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003578:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	4a66      	ldr	r2, [pc, #408]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800357e:	4013      	ands	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	4b5e      	ldr	r3, [pc, #376]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003588:	430a      	orrs	r2, r1
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4013      	ands	r3, r2
 8003596:	d009      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003598:	4b59      	ldr	r3, [pc, #356]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	4a5f      	ldr	r2, [pc, #380]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800359e:	4013      	ands	r3, r2
 80035a0:	0019      	movs	r1, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	4b56      	ldr	r3, [pc, #344]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035a8:	430a      	orrs	r2, r1
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4013      	ands	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035b8:	4b51      	ldr	r3, [pc, #324]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69da      	ldr	r2, [r3, #28]
 80035c6:	4b4e      	ldr	r3, [pc, #312]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035c8:	430a      	orrs	r2, r1
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2220      	movs	r2, #32
 80035d2:	4013      	ands	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035d6:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	4a52      	ldr	r2, [pc, #328]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	4b46      	ldr	r3, [pc, #280]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035e6:	430a      	orrs	r2, r1
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	01db      	lsls	r3, r3, #7
 80035f2:	4013      	ands	r3, r2
 80035f4:	d015      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f6:	4b42      	ldr	r3, [pc, #264]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	0899      	lsrs	r1, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1a      	ldr	r2, [r3, #32]
 8003602:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003604:	430a      	orrs	r2, r1
 8003606:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	05db      	lsls	r3, r3, #23
 8003610:	429a      	cmp	r2, r3
 8003612:	d106      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003614:	4b3a      	ldr	r3, [pc, #232]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	4b39      	ldr	r3, [pc, #228]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	0249      	lsls	r1, r1, #9
 800361e:	430a      	orrs	r2, r1
 8003620:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	031b      	lsls	r3, r3, #12
 800362a:	4013      	ands	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800362e:	4b34      	ldr	r3, [pc, #208]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	4393      	bics	r3, r2
 8003636:	0019      	movs	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800363c:	4b30      	ldr	r3, [pc, #192]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800363e:	430a      	orrs	r2, r1
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	039b      	lsls	r3, r3, #14
 800364a:	4013      	ands	r3, r2
 800364c:	d016      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800364e:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	4a35      	ldr	r2, [pc, #212]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003654:	4013      	ands	r3, r2
 8003656:	0019      	movs	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800365e:	430a      	orrs	r2, r1
 8003660:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	03db      	lsls	r3, r3, #15
 800366a:	429a      	cmp	r2, r3
 800366c:	d106      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	4b23      	ldr	r3, [pc, #140]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	0449      	lsls	r1, r1, #17
 8003678:	430a      	orrs	r2, r1
 800367a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	03db      	lsls	r3, r3, #15
 8003684:	4013      	ands	r3, r2
 8003686:	d016      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003688:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	4a27      	ldr	r2, [pc, #156]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800368e:	4013      	ands	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003698:	430a      	orrs	r2, r1
 800369a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	045b      	lsls	r3, r3, #17
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d106      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80036a8:	4b15      	ldr	r3, [pc, #84]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036ae:	2180      	movs	r1, #128	; 0x80
 80036b0:	0449      	lsls	r1, r1, #17
 80036b2:	430a      	orrs	r2, r1
 80036b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	4013      	ands	r3, r2
 80036c0:	d016      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	4a1a      	ldr	r2, [pc, #104]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036d2:	430a      	orrs	r2, r1
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	01db      	lsls	r3, r3, #7
 80036de:	429a      	cmp	r2, r3
 80036e0:	d106      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80036e2:	4b07      	ldr	r3, [pc, #28]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036e8:	2180      	movs	r1, #128	; 0x80
 80036ea:	0249      	lsls	r1, r1, #9
 80036ec:	430a      	orrs	r2, r1
 80036ee:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80036f0:	2312      	movs	r3, #18
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	781b      	ldrb	r3, [r3, #0]
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b006      	add	sp, #24
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	40021000 	.word	0x40021000
 8003704:	40007000 	.word	0x40007000
 8003708:	fffffcff 	.word	0xfffffcff
 800370c:	fffeffff 	.word	0xfffeffff
 8003710:	00001388 	.word	0x00001388
 8003714:	efffffff 	.word	0xefffffff
 8003718:	fffff3ff 	.word	0xfffff3ff
 800371c:	fff3ffff 	.word	0xfff3ffff
 8003720:	ffcfffff 	.word	0xffcfffff
 8003724:	ffffcfff 	.word	0xffffcfff
 8003728:	ffbfffff 	.word	0xffbfffff
 800372c:	feffffff 	.word	0xfeffffff
 8003730:	ffff3fff 	.word	0xffff3fff

08003734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e046      	b.n	80037d4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2284      	movs	r2, #132	; 0x84
 800374a:	589b      	ldr	r3, [r3, r2]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	0018      	movs	r0, r3
 800375c:	f7fd f9f8 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2284      	movs	r2, #132	; 0x84
 8003764:	2124      	movs	r1, #36	; 0x24
 8003766:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2101      	movs	r1, #1
 8003774:	438a      	bics	r2, r1
 8003776:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	0018      	movs	r0, r3
 800377c:	f000 fc12 	bl	8003fa4 <UART_SetConfig>
 8003780:	0003      	movs	r3, r0
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e024      	b.n	80037d4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	0018      	movs	r0, r3
 8003796:	f000 fee1 	bl	800455c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	490d      	ldr	r1, [pc, #52]	; (80037dc <HAL_UART_Init+0xa8>)
 80037a6:	400a      	ands	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	212a      	movs	r1, #42	; 0x2a
 80037b6:	438a      	bics	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2101      	movs	r1, #1
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 ff79 	bl	80046c4 <UART_CheckIdleState>
 80037d2:	0003      	movs	r3, r0
}
 80037d4:	0018      	movs	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b002      	add	sp, #8
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	ffffb7ff 	.word	0xffffb7ff

080037e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	1dbb      	adds	r3, r7, #6
 80037ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2284      	movs	r2, #132	; 0x84
 80037f4:	589b      	ldr	r3, [r3, r2]
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d000      	beq.n	80037fc <HAL_UART_Transmit+0x1c>
 80037fa:	e097      	b.n	800392c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_UART_Transmit+0x2a>
 8003802:	1dbb      	adds	r3, r7, #6
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e08f      	b.n	800392e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	015b      	lsls	r3, r3, #5
 8003816:	429a      	cmp	r2, r3
 8003818:	d109      	bne.n	800382e <HAL_UART_Transmit+0x4e>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2201      	movs	r2, #1
 8003826:	4013      	ands	r3, r2
 8003828:	d001      	beq.n	800382e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e07f      	b.n	800392e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	5c9b      	ldrb	r3, [r3, r2]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_UART_Transmit+0x5c>
 8003838:	2302      	movs	r3, #2
 800383a:	e078      	b.n	800392e <HAL_UART_Transmit+0x14e>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	2101      	movs	r1, #1
 8003842:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	228c      	movs	r2, #140	; 0x8c
 8003848:	2100      	movs	r1, #0
 800384a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2284      	movs	r2, #132	; 0x84
 8003850:	2121      	movs	r1, #33	; 0x21
 8003852:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003854:	f7fd faec 	bl	8000e30 <HAL_GetTick>
 8003858:	0003      	movs	r3, r0
 800385a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1dba      	adds	r2, r7, #6
 8003860:	2154      	movs	r1, #84	; 0x54
 8003862:	8812      	ldrh	r2, [r2, #0]
 8003864:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1dba      	adds	r2, r7, #6
 800386a:	2156      	movs	r1, #86	; 0x56
 800386c:	8812      	ldrh	r2, [r2, #0]
 800386e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	015b      	lsls	r3, r3, #5
 8003878:	429a      	cmp	r2, r3
 800387a:	d108      	bne.n	800388e <HAL_UART_Transmit+0xae>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	e003      	b.n	8003896 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2280      	movs	r2, #128	; 0x80
 800389a:	2100      	movs	r1, #0
 800389c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800389e:	e02c      	b.n	80038fa <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	0013      	movs	r3, r2
 80038aa:	2200      	movs	r2, #0
 80038ac:	2180      	movs	r1, #128	; 0x80
 80038ae:	f000 ff53 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d001      	beq.n	80038ba <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e039      	b.n	800392e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	001a      	movs	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	05d2      	lsls	r2, r2, #23
 80038cc:	0dd2      	lsrs	r2, r2, #23
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	3302      	adds	r3, #2
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	e007      	b.n	80038e8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3301      	adds	r3, #1
 80038e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2256      	movs	r2, #86	; 0x56
 80038ec:	5a9b      	ldrh	r3, [r3, r2]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b299      	uxth	r1, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2256      	movs	r2, #86	; 0x56
 80038f8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2256      	movs	r2, #86	; 0x56
 80038fe:	5a9b      	ldrh	r3, [r3, r2]
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1cc      	bne.n	80038a0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	0013      	movs	r3, r2
 8003910:	2200      	movs	r2, #0
 8003912:	2140      	movs	r1, #64	; 0x40
 8003914:	f000 ff20 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d001      	beq.n	8003920 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e006      	b.n	800392e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2284      	movs	r2, #132	; 0x84
 8003924:	2120      	movs	r1, #32
 8003926:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b008      	add	sp, #32
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003938:	b5b0      	push	{r4, r5, r7, lr}
 800393a:	b0aa      	sub	sp, #168	; 0xa8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	22a4      	movs	r2, #164	; 0xa4
 8003948:	18b9      	adds	r1, r7, r2
 800394a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	20a0      	movs	r0, #160	; 0xa0
 8003954:	1839      	adds	r1, r7, r0
 8003956:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	249c      	movs	r4, #156	; 0x9c
 8003960:	1939      	adds	r1, r7, r4
 8003962:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003964:	0011      	movs	r1, r2
 8003966:	18bb      	adds	r3, r7, r2
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4aa0      	ldr	r2, [pc, #640]	; (8003bec <HAL_UART_IRQHandler+0x2b4>)
 800396c:	4013      	ands	r3, r2
 800396e:	2298      	movs	r2, #152	; 0x98
 8003970:	18bd      	adds	r5, r7, r2
 8003972:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003974:	18bb      	adds	r3, r7, r2
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d11a      	bne.n	80039b2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800397c:	187b      	adds	r3, r7, r1
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2220      	movs	r2, #32
 8003982:	4013      	ands	r3, r2
 8003984:	d015      	beq.n	80039b2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003986:	183b      	adds	r3, r7, r0
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2220      	movs	r2, #32
 800398c:	4013      	ands	r3, r2
 800398e:	d105      	bne.n	800399c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003990:	193b      	adds	r3, r7, r4
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	055b      	lsls	r3, r3, #21
 8003998:	4013      	ands	r3, r2
 800399a:	d00a      	beq.n	80039b2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d100      	bne.n	80039a6 <HAL_UART_IRQHandler+0x6e>
 80039a4:	e2cf      	b.n	8003f46 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	0010      	movs	r0, r2
 80039ae:	4798      	blx	r3
      }
      return;
 80039b0:	e2c9      	b.n	8003f46 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80039b2:	2398      	movs	r3, #152	; 0x98
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d100      	bne.n	80039be <HAL_UART_IRQHandler+0x86>
 80039bc:	e11e      	b.n	8003bfc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80039be:	239c      	movs	r3, #156	; 0x9c
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a8a      	ldr	r2, [pc, #552]	; (8003bf0 <HAL_UART_IRQHandler+0x2b8>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	d106      	bne.n	80039d8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80039ca:	23a0      	movs	r3, #160	; 0xa0
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a88      	ldr	r2, [pc, #544]	; (8003bf4 <HAL_UART_IRQHandler+0x2bc>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	d100      	bne.n	80039d8 <HAL_UART_IRQHandler+0xa0>
 80039d6:	e111      	b.n	8003bfc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039d8:	23a4      	movs	r3, #164	; 0xa4
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2201      	movs	r2, #1
 80039e0:	4013      	ands	r3, r2
 80039e2:	d012      	beq.n	8003a0a <HAL_UART_IRQHandler+0xd2>
 80039e4:	23a0      	movs	r3, #160	; 0xa0
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4013      	ands	r3, r2
 80039f0:	d00b      	beq.n	8003a0a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2201      	movs	r2, #1
 80039f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	228c      	movs	r2, #140	; 0x8c
 80039fe:	589b      	ldr	r3, [r3, r2]
 8003a00:	2201      	movs	r2, #1
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	218c      	movs	r1, #140	; 0x8c
 8003a08:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a0a:	23a4      	movs	r3, #164	; 0xa4
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2202      	movs	r2, #2
 8003a12:	4013      	ands	r3, r2
 8003a14:	d011      	beq.n	8003a3a <HAL_UART_IRQHandler+0x102>
 8003a16:	239c      	movs	r3, #156	; 0x9c
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d00b      	beq.n	8003a3a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2202      	movs	r2, #2
 8003a28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	228c      	movs	r2, #140	; 0x8c
 8003a2e:	589b      	ldr	r3, [r3, r2]
 8003a30:	2204      	movs	r2, #4
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	218c      	movs	r1, #140	; 0x8c
 8003a38:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a3a:	23a4      	movs	r3, #164	; 0xa4
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2204      	movs	r2, #4
 8003a42:	4013      	ands	r3, r2
 8003a44:	d011      	beq.n	8003a6a <HAL_UART_IRQHandler+0x132>
 8003a46:	239c      	movs	r3, #156	; 0x9c
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d00b      	beq.n	8003a6a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2204      	movs	r2, #4
 8003a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	228c      	movs	r2, #140	; 0x8c
 8003a5e:	589b      	ldr	r3, [r3, r2]
 8003a60:	2202      	movs	r2, #2
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	218c      	movs	r1, #140	; 0x8c
 8003a68:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a6a:	23a4      	movs	r3, #164	; 0xa4
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2208      	movs	r2, #8
 8003a72:	4013      	ands	r3, r2
 8003a74:	d017      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003a76:	23a0      	movs	r3, #160	; 0xa0
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d105      	bne.n	8003a8e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003a82:	239c      	movs	r3, #156	; 0x9c
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a59      	ldr	r2, [pc, #356]	; (8003bf0 <HAL_UART_IRQHandler+0x2b8>)
 8003a8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2208      	movs	r2, #8
 8003a94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	228c      	movs	r2, #140	; 0x8c
 8003a9a:	589b      	ldr	r3, [r3, r2]
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	218c      	movs	r1, #140	; 0x8c
 8003aa4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003aa6:	23a4      	movs	r3, #164	; 0xa4
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_UART_IRQHandler+0x1a4>
 8003ab4:	23a0      	movs	r3, #160	; 0xa0
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	04db      	lsls	r3, r3, #19
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d00c      	beq.n	8003adc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	0112      	lsls	r2, r2, #4
 8003aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	228c      	movs	r2, #140	; 0x8c
 8003ad0:	589b      	ldr	r3, [r3, r2]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	218c      	movs	r1, #140	; 0x8c
 8003ada:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	228c      	movs	r2, #140	; 0x8c
 8003ae0:	589b      	ldr	r3, [r3, r2]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d100      	bne.n	8003ae8 <HAL_UART_IRQHandler+0x1b0>
 8003ae6:	e230      	b.n	8003f4a <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ae8:	23a4      	movs	r3, #164	; 0xa4
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2220      	movs	r2, #32
 8003af0:	4013      	ands	r3, r2
 8003af2:	d015      	beq.n	8003b20 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003af4:	23a0      	movs	r3, #160	; 0xa0
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2220      	movs	r2, #32
 8003afc:	4013      	ands	r3, r2
 8003afe:	d106      	bne.n	8003b0e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b00:	239c      	movs	r3, #156	; 0x9c
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	055b      	lsls	r3, r3, #21
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d008      	beq.n	8003b20 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	0010      	movs	r0, r2
 8003b1e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	228c      	movs	r2, #140	; 0x8c
 8003b24:	589b      	ldr	r3, [r3, r2]
 8003b26:	2194      	movs	r1, #148	; 0x94
 8003b28:	187a      	adds	r2, r7, r1
 8003b2a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2240      	movs	r2, #64	; 0x40
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d004      	beq.n	8003b44 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2228      	movs	r2, #40	; 0x28
 8003b40:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b42:	d047      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0018      	movs	r0, r3
 8003b48:	f000 fece 	bl	80048e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2240      	movs	r2, #64	; 0x40
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d137      	bne.n	8003bca <HAL_UART_IRQHandler+0x292>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b5e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b62:	2090      	movs	r0, #144	; 0x90
 8003b64:	183a      	adds	r2, r7, r0
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	2301      	movs	r3, #1
 8003b6a:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b6e:	f383 8810 	msr	PRIMASK, r3
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2140      	movs	r1, #64	; 0x40
 8003b80:	438a      	bics	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	183b      	adds	r3, r7, r0
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b8c:	f383 8810 	msr	PRIMASK, r3
}
 8003b90:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d012      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b9e:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <HAL_UART_IRQHandler+0x2c0>)
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7fe fbce 	bl	8002348 <HAL_DMA_Abort_IT>
 8003bac:	1e03      	subs	r3, r0, #0
 8003bae:	d01a      	beq.n	8003be6 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bba:	0018      	movs	r0, r3
 8003bbc:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbe:	e012      	b.n	8003be6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f000 f9da 	bl	8003f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	e00d      	b.n	8003be6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f000 f9d5 	bl	8003f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd2:	e008      	b.n	8003be6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 f9d0 	bl	8003f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	228c      	movs	r2, #140	; 0x8c
 8003be0:	2100      	movs	r1, #0
 8003be2:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003be4:	e1b1      	b.n	8003f4a <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be6:	46c0      	nop			; (mov r8, r8)
    return;
 8003be8:	e1af      	b.n	8003f4a <HAL_UART_IRQHandler+0x612>
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	0000080f 	.word	0x0000080f
 8003bf0:	10000001 	.word	0x10000001
 8003bf4:	04000120 	.word	0x04000120
 8003bf8:	080049b5 	.word	0x080049b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d000      	beq.n	8003c06 <HAL_UART_IRQHandler+0x2ce>
 8003c04:	e135      	b.n	8003e72 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c06:	23a4      	movs	r3, #164	; 0xa4
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d100      	bne.n	8003c14 <HAL_UART_IRQHandler+0x2dc>
 8003c12:	e12e      	b.n	8003e72 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c14:	23a0      	movs	r3, #160	; 0xa0
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <HAL_UART_IRQHandler+0x2ea>
 8003c20:	e127      	b.n	8003e72 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2210      	movs	r2, #16
 8003c28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2240      	movs	r2, #64	; 0x40
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	d000      	beq.n	8003c3a <HAL_UART_IRQHandler+0x302>
 8003c38:	e09e      	b.n	8003d78 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	217e      	movs	r1, #126	; 0x7e
 8003c44:	187b      	adds	r3, r7, r1
 8003c46:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003c48:	187b      	adds	r3, r7, r1
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d100      	bne.n	8003c52 <HAL_UART_IRQHandler+0x31a>
 8003c50:	e17d      	b.n	8003f4e <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	225c      	movs	r2, #92	; 0x5c
 8003c56:	5a9b      	ldrh	r3, [r3, r2]
 8003c58:	187a      	adds	r2, r7, r1
 8003c5a:	8812      	ldrh	r2, [r2, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d300      	bcc.n	8003c62 <HAL_UART_IRQHandler+0x32a>
 8003c60:	e175      	b.n	8003f4e <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	187a      	adds	r2, r7, r1
 8003c66:	215e      	movs	r1, #94	; 0x5e
 8003c68:	8812      	ldrh	r2, [r2, #0]
 8003c6a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2220      	movs	r2, #32
 8003c76:	4013      	ands	r3, r2
 8003c78:	d16f      	bne.n	8003d5a <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c82:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c84:	2301      	movs	r3, #1
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8a:	f383 8810 	msr	PRIMASK, r3
}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	49b1      	ldr	r1, [pc, #708]	; (8003f60 <HAL_UART_IRQHandler+0x628>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cac:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb4:	677b      	str	r3, [r7, #116]	; 0x74
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2101      	movs	r1, #1
 8003cce:	438a      	bics	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd8:	f383 8810 	msr	PRIMASK, r3
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cde:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ce8:	2301      	movs	r3, #1
 8003cea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cee:	f383 8810 	msr	PRIMASK, r3
}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2140      	movs	r1, #64	; 0x40
 8003d00:	438a      	bics	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d06:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d0a:	f383 8810 	msr	PRIMASK, r3
}
 8003d0e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2288      	movs	r2, #136	; 0x88
 8003d14:	2120      	movs	r1, #32
 8003d16:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d22:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d28:	2301      	movs	r3, #1
 8003d2a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2110      	movs	r1, #16
 8003d40:	438a      	bics	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d46:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d4a:	f383 8810 	msr	PRIMASK, r3
}
 8003d4e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7fe fa95 	bl	8002284 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	225c      	movs	r2, #92	; 0x5c
 8003d5e:	5a9a      	ldrh	r2, [r3, r2]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	215e      	movs	r1, #94	; 0x5e
 8003d64:	5a5b      	ldrh	r3, [r3, r1]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	0011      	movs	r1, r2
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 f90b 	bl	8003f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d76:	e0ea      	b.n	8003f4e <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	225c      	movs	r2, #92	; 0x5c
 8003d7c:	5a99      	ldrh	r1, [r3, r2]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	225e      	movs	r2, #94	; 0x5e
 8003d82:	5a9b      	ldrh	r3, [r3, r2]
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	208e      	movs	r0, #142	; 0x8e
 8003d88:	183b      	adds	r3, r7, r0
 8003d8a:	1a8a      	subs	r2, r1, r2
 8003d8c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	225e      	movs	r2, #94	; 0x5e
 8003d92:	5a9b      	ldrh	r3, [r3, r2]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d100      	bne.n	8003d9c <HAL_UART_IRQHandler+0x464>
 8003d9a:	e0da      	b.n	8003f52 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8003d9c:	183b      	adds	r3, r7, r0
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d100      	bne.n	8003da6 <HAL_UART_IRQHandler+0x46e>
 8003da4:	e0d5      	b.n	8003f52 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da6:	f3ef 8310 	mrs	r3, PRIMASK
 8003daa:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dac:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dae:	2488      	movs	r4, #136	; 0x88
 8003db0:	193a      	adds	r2, r7, r4
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	2301      	movs	r3, #1
 8003db6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f383 8810 	msr	PRIMASK, r3
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4966      	ldr	r1, [pc, #408]	; (8003f64 <HAL_UART_IRQHandler+0x62c>)
 8003dcc:	400a      	ands	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	193b      	adds	r3, r7, r4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f383 8810 	msr	PRIMASK, r3
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dde:	f3ef 8310 	mrs	r3, PRIMASK
 8003de2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003de4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003de6:	2484      	movs	r4, #132	; 0x84
 8003de8:	193a      	adds	r2, r7, r4
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	2301      	movs	r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f383 8810 	msr	PRIMASK, r3
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4959      	ldr	r1, [pc, #356]	; (8003f68 <HAL_UART_IRQHandler+0x630>)
 8003e04:	400a      	ands	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	193b      	adds	r3, r7, r4
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f383 8810 	msr	PRIMASK, r3
}
 8003e14:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2288      	movs	r2, #136	; 0x88
 8003e1a:	2120      	movs	r1, #32
 8003e1c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e32:	2480      	movs	r4, #128	; 0x80
 8003e34:	193a      	adds	r2, r7, r4
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	2301      	movs	r3, #1
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	f383 8810 	msr	PRIMASK, r3
}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2110      	movs	r1, #16
 8003e50:	438a      	bics	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	193b      	adds	r3, r7, r4
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	f383 8810 	msr	PRIMASK, r3
}
 8003e60:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e62:	183b      	adds	r3, r7, r0
 8003e64:	881a      	ldrh	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0011      	movs	r1, r2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 f88e 	bl	8003f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e70:	e06f      	b.n	8003f52 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e72:	23a4      	movs	r3, #164	; 0xa4
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	035b      	lsls	r3, r3, #13
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d010      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x56a>
 8003e80:	239c      	movs	r3, #156	; 0x9c
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	03db      	lsls	r3, r3, #15
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2280      	movs	r2, #128	; 0x80
 8003e94:	0352      	lsls	r2, r2, #13
 8003e96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 fdcd 	bl	8004a3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ea0:	e05a      	b.n	8003f58 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003ea2:	23a4      	movs	r3, #164	; 0xa4
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d016      	beq.n	8003edc <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003eae:	23a0      	movs	r3, #160	; 0xa0
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d106      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003eba:	239c      	movs	r3, #156	; 0x9c
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d042      	beq.n	8003f56 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	0010      	movs	r0, r2
 8003ed8:	4798      	blx	r3
    }
    return;
 8003eda:	e03c      	b.n	8003f56 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003edc:	23a4      	movs	r3, #164	; 0xa4
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2240      	movs	r2, #64	; 0x40
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d00a      	beq.n	8003efe <HAL_UART_IRQHandler+0x5c6>
 8003ee8:	23a0      	movs	r3, #160	; 0xa0
 8003eea:	18fb      	adds	r3, r7, r3
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2240      	movs	r2, #64	; 0x40
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d004      	beq.n	8003efe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f000 fd73 	bl	80049e2 <UART_EndTransmit_IT>
    return;
 8003efc:	e02c      	b.n	8003f58 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003efe:	23a4      	movs	r3, #164	; 0xa4
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <HAL_UART_IRQHandler+0x5ec>
 8003f0c:	23a0      	movs	r3, #160	; 0xa0
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	05db      	lsls	r3, r3, #23
 8003f16:	4013      	ands	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f000 fd9c 	bl	8004a5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f22:	e019      	b.n	8003f58 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003f24:	23a4      	movs	r3, #164	; 0xa4
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	045b      	lsls	r3, r3, #17
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d012      	beq.n	8003f58 <HAL_UART_IRQHandler+0x620>
 8003f32:	23a0      	movs	r3, #160	; 0xa0
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	da0d      	bge.n	8003f58 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 fd83 	bl	8004a4a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f44:	e008      	b.n	8003f58 <HAL_UART_IRQHandler+0x620>
      return;
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	e006      	b.n	8003f58 <HAL_UART_IRQHandler+0x620>
    return;
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	e004      	b.n	8003f58 <HAL_UART_IRQHandler+0x620>
      return;
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	e002      	b.n	8003f58 <HAL_UART_IRQHandler+0x620>
      return;
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	e000      	b.n	8003f58 <HAL_UART_IRQHandler+0x620>
    return;
 8003f56:	46c0      	nop			; (mov r8, r8)
  }
}
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b02a      	add	sp, #168	; 0xa8
 8003f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	fffffeff 	.word	0xfffffeff
 8003f64:	fffffedf 	.word	0xfffffedf
 8003f68:	effffffe 	.word	0xeffffffe

08003f6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f74:	46c0      	nop			; (mov r8, r8)
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b002      	add	sp, #8
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b002      	add	sp, #8
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	000a      	movs	r2, r1
 8003f96:	1cbb      	adds	r3, r7, #2
 8003f98:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b002      	add	sp, #8
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa4:	b5b0      	push	{r4, r5, r7, lr}
 8003fa6:	b090      	sub	sp, #64	; 0x40
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fac:	231a      	movs	r3, #26
 8003fae:	2220      	movs	r2, #32
 8003fb0:	4694      	mov	ip, r2
 8003fb2:	44bc      	add	ip, r7
 8003fb4:	4463      	add	r3, ip
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4ab9      	ldr	r2, [pc, #740]	; (80042c0 <UART_SetConfig+0x31c>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	0019      	movs	r1, r3
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4ab5      	ldr	r2, [pc, #724]	; (80042c4 <UART_SetConfig+0x320>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	68d9      	ldr	r1, [r3, #12]
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	430b      	orrs	r3, r1
 8004000:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4aae      	ldr	r2, [pc, #696]	; (80042c8 <UART_SetConfig+0x324>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004018:	4313      	orrs	r3, r2
 800401a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	4aaa      	ldr	r2, [pc, #680]	; (80042cc <UART_SetConfig+0x328>)
 8004024:	4013      	ands	r3, r2
 8004026:	0019      	movs	r1, r3
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402e:	430b      	orrs	r3, r1
 8004030:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	220f      	movs	r2, #15
 800403a:	4393      	bics	r3, r2
 800403c:	0018      	movs	r0, r3
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	0003      	movs	r3, r0
 8004048:	430b      	orrs	r3, r1
 800404a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a9f      	ldr	r2, [pc, #636]	; (80042d0 <UART_SetConfig+0x32c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d136      	bne.n	80040c4 <UART_SetConfig+0x120>
 8004056:	4b9f      	ldr	r3, [pc, #636]	; (80042d4 <UART_SetConfig+0x330>)
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	2203      	movs	r2, #3
 800405c:	4013      	ands	r3, r2
 800405e:	2b03      	cmp	r3, #3
 8004060:	d020      	beq.n	80040a4 <UART_SetConfig+0x100>
 8004062:	d827      	bhi.n	80040b4 <UART_SetConfig+0x110>
 8004064:	2b02      	cmp	r3, #2
 8004066:	d00d      	beq.n	8004084 <UART_SetConfig+0xe0>
 8004068:	d824      	bhi.n	80040b4 <UART_SetConfig+0x110>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <UART_SetConfig+0xd0>
 800406e:	2b01      	cmp	r3, #1
 8004070:	d010      	beq.n	8004094 <UART_SetConfig+0xf0>
 8004072:	e01f      	b.n	80040b4 <UART_SetConfig+0x110>
 8004074:	231b      	movs	r3, #27
 8004076:	2220      	movs	r2, #32
 8004078:	4694      	mov	ip, r2
 800407a:	44bc      	add	ip, r7
 800407c:	4463      	add	r3, ip
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	e0c5      	b.n	8004210 <UART_SetConfig+0x26c>
 8004084:	231b      	movs	r3, #27
 8004086:	2220      	movs	r2, #32
 8004088:	4694      	mov	ip, r2
 800408a:	44bc      	add	ip, r7
 800408c:	4463      	add	r3, ip
 800408e:	2202      	movs	r2, #2
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	e0bd      	b.n	8004210 <UART_SetConfig+0x26c>
 8004094:	231b      	movs	r3, #27
 8004096:	2220      	movs	r2, #32
 8004098:	4694      	mov	ip, r2
 800409a:	44bc      	add	ip, r7
 800409c:	4463      	add	r3, ip
 800409e:	2204      	movs	r2, #4
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e0b5      	b.n	8004210 <UART_SetConfig+0x26c>
 80040a4:	231b      	movs	r3, #27
 80040a6:	2220      	movs	r2, #32
 80040a8:	4694      	mov	ip, r2
 80040aa:	44bc      	add	ip, r7
 80040ac:	4463      	add	r3, ip
 80040ae:	2208      	movs	r2, #8
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e0ad      	b.n	8004210 <UART_SetConfig+0x26c>
 80040b4:	231b      	movs	r3, #27
 80040b6:	2220      	movs	r2, #32
 80040b8:	4694      	mov	ip, r2
 80040ba:	44bc      	add	ip, r7
 80040bc:	4463      	add	r3, ip
 80040be:	2210      	movs	r2, #16
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e0a5      	b.n	8004210 <UART_SetConfig+0x26c>
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a83      	ldr	r2, [pc, #524]	; (80042d8 <UART_SetConfig+0x334>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d136      	bne.n	800413c <UART_SetConfig+0x198>
 80040ce:	4b81      	ldr	r3, [pc, #516]	; (80042d4 <UART_SetConfig+0x330>)
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	220c      	movs	r2, #12
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d020      	beq.n	800411c <UART_SetConfig+0x178>
 80040da:	d827      	bhi.n	800412c <UART_SetConfig+0x188>
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d00d      	beq.n	80040fc <UART_SetConfig+0x158>
 80040e0:	d824      	bhi.n	800412c <UART_SetConfig+0x188>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <UART_SetConfig+0x148>
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d010      	beq.n	800410c <UART_SetConfig+0x168>
 80040ea:	e01f      	b.n	800412c <UART_SetConfig+0x188>
 80040ec:	231b      	movs	r3, #27
 80040ee:	2220      	movs	r2, #32
 80040f0:	4694      	mov	ip, r2
 80040f2:	44bc      	add	ip, r7
 80040f4:	4463      	add	r3, ip
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e089      	b.n	8004210 <UART_SetConfig+0x26c>
 80040fc:	231b      	movs	r3, #27
 80040fe:	2220      	movs	r2, #32
 8004100:	4694      	mov	ip, r2
 8004102:	44bc      	add	ip, r7
 8004104:	4463      	add	r3, ip
 8004106:	2202      	movs	r2, #2
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e081      	b.n	8004210 <UART_SetConfig+0x26c>
 800410c:	231b      	movs	r3, #27
 800410e:	2220      	movs	r2, #32
 8004110:	4694      	mov	ip, r2
 8004112:	44bc      	add	ip, r7
 8004114:	4463      	add	r3, ip
 8004116:	2204      	movs	r2, #4
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	e079      	b.n	8004210 <UART_SetConfig+0x26c>
 800411c:	231b      	movs	r3, #27
 800411e:	2220      	movs	r2, #32
 8004120:	4694      	mov	ip, r2
 8004122:	44bc      	add	ip, r7
 8004124:	4463      	add	r3, ip
 8004126:	2208      	movs	r2, #8
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e071      	b.n	8004210 <UART_SetConfig+0x26c>
 800412c:	231b      	movs	r3, #27
 800412e:	2220      	movs	r2, #32
 8004130:	4694      	mov	ip, r2
 8004132:	44bc      	add	ip, r7
 8004134:	4463      	add	r3, ip
 8004136:	2210      	movs	r2, #16
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	e069      	b.n	8004210 <UART_SetConfig+0x26c>
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a66      	ldr	r2, [pc, #408]	; (80042dc <UART_SetConfig+0x338>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d107      	bne.n	8004156 <UART_SetConfig+0x1b2>
 8004146:	231b      	movs	r3, #27
 8004148:	2220      	movs	r2, #32
 800414a:	4694      	mov	ip, r2
 800414c:	44bc      	add	ip, r7
 800414e:	4463      	add	r3, ip
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e05c      	b.n	8004210 <UART_SetConfig+0x26c>
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a61      	ldr	r2, [pc, #388]	; (80042e0 <UART_SetConfig+0x33c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d107      	bne.n	8004170 <UART_SetConfig+0x1cc>
 8004160:	231b      	movs	r3, #27
 8004162:	2220      	movs	r2, #32
 8004164:	4694      	mov	ip, r2
 8004166:	44bc      	add	ip, r7
 8004168:	4463      	add	r3, ip
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e04f      	b.n	8004210 <UART_SetConfig+0x26c>
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a54      	ldr	r2, [pc, #336]	; (80042c8 <UART_SetConfig+0x324>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d143      	bne.n	8004202 <UART_SetConfig+0x25e>
 800417a:	4b56      	ldr	r3, [pc, #344]	; (80042d4 <UART_SetConfig+0x330>)
 800417c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800417e:	23c0      	movs	r3, #192	; 0xc0
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	4013      	ands	r3, r2
 8004184:	22c0      	movs	r2, #192	; 0xc0
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	4293      	cmp	r3, r2
 800418a:	d02a      	beq.n	80041e2 <UART_SetConfig+0x23e>
 800418c:	22c0      	movs	r2, #192	; 0xc0
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	4293      	cmp	r3, r2
 8004192:	d82e      	bhi.n	80041f2 <UART_SetConfig+0x24e>
 8004194:	2280      	movs	r2, #128	; 0x80
 8004196:	0112      	lsls	r2, r2, #4
 8004198:	4293      	cmp	r3, r2
 800419a:	d012      	beq.n	80041c2 <UART_SetConfig+0x21e>
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	0112      	lsls	r2, r2, #4
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d826      	bhi.n	80041f2 <UART_SetConfig+0x24e>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d004      	beq.n	80041b2 <UART_SetConfig+0x20e>
 80041a8:	2280      	movs	r2, #128	; 0x80
 80041aa:	00d2      	lsls	r2, r2, #3
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d010      	beq.n	80041d2 <UART_SetConfig+0x22e>
 80041b0:	e01f      	b.n	80041f2 <UART_SetConfig+0x24e>
 80041b2:	231b      	movs	r3, #27
 80041b4:	2220      	movs	r2, #32
 80041b6:	4694      	mov	ip, r2
 80041b8:	44bc      	add	ip, r7
 80041ba:	4463      	add	r3, ip
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e026      	b.n	8004210 <UART_SetConfig+0x26c>
 80041c2:	231b      	movs	r3, #27
 80041c4:	2220      	movs	r2, #32
 80041c6:	4694      	mov	ip, r2
 80041c8:	44bc      	add	ip, r7
 80041ca:	4463      	add	r3, ip
 80041cc:	2202      	movs	r2, #2
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	e01e      	b.n	8004210 <UART_SetConfig+0x26c>
 80041d2:	231b      	movs	r3, #27
 80041d4:	2220      	movs	r2, #32
 80041d6:	4694      	mov	ip, r2
 80041d8:	44bc      	add	ip, r7
 80041da:	4463      	add	r3, ip
 80041dc:	2204      	movs	r2, #4
 80041de:	701a      	strb	r2, [r3, #0]
 80041e0:	e016      	b.n	8004210 <UART_SetConfig+0x26c>
 80041e2:	231b      	movs	r3, #27
 80041e4:	2220      	movs	r2, #32
 80041e6:	4694      	mov	ip, r2
 80041e8:	44bc      	add	ip, r7
 80041ea:	4463      	add	r3, ip
 80041ec:	2208      	movs	r2, #8
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e00e      	b.n	8004210 <UART_SetConfig+0x26c>
 80041f2:	231b      	movs	r3, #27
 80041f4:	2220      	movs	r2, #32
 80041f6:	4694      	mov	ip, r2
 80041f8:	44bc      	add	ip, r7
 80041fa:	4463      	add	r3, ip
 80041fc:	2210      	movs	r2, #16
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e006      	b.n	8004210 <UART_SetConfig+0x26c>
 8004202:	231b      	movs	r3, #27
 8004204:	2220      	movs	r2, #32
 8004206:	4694      	mov	ip, r2
 8004208:	44bc      	add	ip, r7
 800420a:	4463      	add	r3, ip
 800420c:	2210      	movs	r2, #16
 800420e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a2c      	ldr	r2, [pc, #176]	; (80042c8 <UART_SetConfig+0x324>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d000      	beq.n	800421c <UART_SetConfig+0x278>
 800421a:	e0ad      	b.n	8004378 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800421c:	231b      	movs	r3, #27
 800421e:	2220      	movs	r2, #32
 8004220:	4694      	mov	ip, r2
 8004222:	44bc      	add	ip, r7
 8004224:	4463      	add	r3, ip
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d015      	beq.n	8004258 <UART_SetConfig+0x2b4>
 800422c:	dc18      	bgt.n	8004260 <UART_SetConfig+0x2bc>
 800422e:	2b04      	cmp	r3, #4
 8004230:	d00d      	beq.n	800424e <UART_SetConfig+0x2aa>
 8004232:	dc15      	bgt.n	8004260 <UART_SetConfig+0x2bc>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <UART_SetConfig+0x29a>
 8004238:	2b02      	cmp	r3, #2
 800423a:	d005      	beq.n	8004248 <UART_SetConfig+0x2a4>
 800423c:	e010      	b.n	8004260 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800423e:	f7ff f8ab 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004242:	0003      	movs	r3, r0
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004246:	e015      	b.n	8004274 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004248:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <UART_SetConfig+0x340>)
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800424c:	e012      	b.n	8004274 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424e:	f7ff f817 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 8004252:	0003      	movs	r3, r0
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004256:	e00d      	b.n	8004274 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800425e:	e009      	b.n	8004274 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004264:	231a      	movs	r3, #26
 8004266:	2220      	movs	r2, #32
 8004268:	4694      	mov	ip, r2
 800426a:	44bc      	add	ip, r7
 800426c:	4463      	add	r3, ip
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
        break;
 8004272:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	2b00      	cmp	r3, #0
 8004278:	d100      	bne.n	800427c <UART_SetConfig+0x2d8>
 800427a:	e153      	b.n	8004524 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004280:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <UART_SetConfig+0x344>)
 8004282:	0052      	lsls	r2, r2, #1
 8004284:	5ad3      	ldrh	r3, [r2, r3]
 8004286:	0019      	movs	r1, r3
 8004288:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800428a:	f7fb ff4d 	bl	8000128 <__udivsi3>
 800428e:	0003      	movs	r3, r0
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	0013      	movs	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	189b      	adds	r3, r3, r2
 800429c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800429e:	429a      	cmp	r2, r3
 80042a0:	d305      	bcc.n	80042ae <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d91e      	bls.n	80042ec <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80042ae:	231a      	movs	r3, #26
 80042b0:	2220      	movs	r2, #32
 80042b2:	4694      	mov	ip, r2
 80042b4:	44bc      	add	ip, r7
 80042b6:	4463      	add	r3, ip
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	e132      	b.n	8004524 <UART_SetConfig+0x580>
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	cfff69f3 	.word	0xcfff69f3
 80042c4:	ffffcfff 	.word	0xffffcfff
 80042c8:	40008000 	.word	0x40008000
 80042cc:	11fff4ff 	.word	0x11fff4ff
 80042d0:	40013800 	.word	0x40013800
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40004400 	.word	0x40004400
 80042dc:	40004800 	.word	0x40004800
 80042e0:	40004c00 	.word	0x40004c00
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	080055dc 	.word	0x080055dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f8:	4b96      	ldr	r3, [pc, #600]	; (8004554 <UART_SetConfig+0x5b0>)
 80042fa:	0052      	lsls	r2, r2, #1
 80042fc:	5ad3      	ldrh	r3, [r2, r3]
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	69b8      	ldr	r0, [r7, #24]
 800430a:	69f9      	ldr	r1, [r7, #28]
 800430c:	f7fc f882 	bl	8000414 <__aeabi_uldivmod>
 8004310:	0002      	movs	r2, r0
 8004312:	000b      	movs	r3, r1
 8004314:	0e11      	lsrs	r1, r2, #24
 8004316:	021d      	lsls	r5, r3, #8
 8004318:	430d      	orrs	r5, r1
 800431a:	0214      	lsls	r4, r2, #8
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68b8      	ldr	r0, [r7, #8]
 800432a:	68f9      	ldr	r1, [r7, #12]
 800432c:	1900      	adds	r0, r0, r4
 800432e:	4169      	adcs	r1, r5
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	2300      	movs	r3, #0
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f7fc f869 	bl	8000414 <__aeabi_uldivmod>
 8004342:	0002      	movs	r2, r0
 8004344:	000b      	movs	r3, r1
 8004346:	0013      	movs	r3, r2
 8004348:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800434a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434c:	23c0      	movs	r3, #192	; 0xc0
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	429a      	cmp	r2, r3
 8004352:	d309      	bcc.n	8004368 <UART_SetConfig+0x3c4>
 8004354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	035b      	lsls	r3, r3, #13
 800435a:	429a      	cmp	r2, r3
 800435c:	d204      	bcs.n	8004368 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	e0dd      	b.n	8004524 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8004368:	231a      	movs	r3, #26
 800436a:	2220      	movs	r2, #32
 800436c:	4694      	mov	ip, r2
 800436e:	44bc      	add	ip, r7
 8004370:	4463      	add	r3, ip
 8004372:	2201      	movs	r2, #1
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	e0d5      	b.n	8004524 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	69da      	ldr	r2, [r3, #28]
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	429a      	cmp	r2, r3
 8004382:	d000      	beq.n	8004386 <UART_SetConfig+0x3e2>
 8004384:	e073      	b.n	800446e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004386:	231b      	movs	r3, #27
 8004388:	2220      	movs	r2, #32
 800438a:	4694      	mov	ip, r2
 800438c:	44bc      	add	ip, r7
 800438e:	4463      	add	r3, ip
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b08      	cmp	r3, #8
 8004394:	d015      	beq.n	80043c2 <UART_SetConfig+0x41e>
 8004396:	dc18      	bgt.n	80043ca <UART_SetConfig+0x426>
 8004398:	2b04      	cmp	r3, #4
 800439a:	d00d      	beq.n	80043b8 <UART_SetConfig+0x414>
 800439c:	dc15      	bgt.n	80043ca <UART_SetConfig+0x426>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <UART_SetConfig+0x404>
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d005      	beq.n	80043b2 <UART_SetConfig+0x40e>
 80043a6:	e010      	b.n	80043ca <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a8:	f7fe fff6 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 80043ac:	0003      	movs	r3, r0
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043b0:	e015      	b.n	80043de <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b2:	4b69      	ldr	r3, [pc, #420]	; (8004558 <UART_SetConfig+0x5b4>)
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043b6:	e012      	b.n	80043de <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b8:	f7fe ff62 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 80043bc:	0003      	movs	r3, r0
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043c0:	e00d      	b.n	80043de <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043c8:	e009      	b.n	80043de <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80043ce:	231a      	movs	r3, #26
 80043d0:	2220      	movs	r2, #32
 80043d2:	4694      	mov	ip, r2
 80043d4:	44bc      	add	ip, r7
 80043d6:	4463      	add	r3, ip
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
        break;
 80043dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d100      	bne.n	80043e6 <UART_SetConfig+0x442>
 80043e4:	e09e      	b.n	8004524 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ea:	4b5a      	ldr	r3, [pc, #360]	; (8004554 <UART_SetConfig+0x5b0>)
 80043ec:	0052      	lsls	r2, r2, #1
 80043ee:	5ad3      	ldrh	r3, [r2, r3]
 80043f0:	0019      	movs	r1, r3
 80043f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043f4:	f7fb fe98 	bl	8000128 <__udivsi3>
 80043f8:	0003      	movs	r3, r0
 80043fa:	005a      	lsls	r2, r3, #1
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	18d2      	adds	r2, r2, r3
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	0019      	movs	r1, r3
 800440a:	0010      	movs	r0, r2
 800440c:	f7fb fe8c 	bl	8000128 <__udivsi3>
 8004410:	0003      	movs	r3, r0
 8004412:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	2b0f      	cmp	r3, #15
 8004418:	d921      	bls.n	800445e <UART_SetConfig+0x4ba>
 800441a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441c:	2380      	movs	r3, #128	; 0x80
 800441e:	025b      	lsls	r3, r3, #9
 8004420:	429a      	cmp	r2, r3
 8004422:	d21c      	bcs.n	800445e <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	b29a      	uxth	r2, r3
 8004428:	200e      	movs	r0, #14
 800442a:	2420      	movs	r4, #32
 800442c:	193b      	adds	r3, r7, r4
 800442e:	181b      	adds	r3, r3, r0
 8004430:	210f      	movs	r1, #15
 8004432:	438a      	bics	r2, r1
 8004434:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	b29b      	uxth	r3, r3
 800443c:	2207      	movs	r2, #7
 800443e:	4013      	ands	r3, r2
 8004440:	b299      	uxth	r1, r3
 8004442:	193b      	adds	r3, r7, r4
 8004444:	181b      	adds	r3, r3, r0
 8004446:	193a      	adds	r2, r7, r4
 8004448:	1812      	adds	r2, r2, r0
 800444a:	8812      	ldrh	r2, [r2, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	193a      	adds	r2, r7, r4
 8004456:	1812      	adds	r2, r2, r0
 8004458:	8812      	ldrh	r2, [r2, #0]
 800445a:	60da      	str	r2, [r3, #12]
 800445c:	e062      	b.n	8004524 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 800445e:	231a      	movs	r3, #26
 8004460:	2220      	movs	r2, #32
 8004462:	4694      	mov	ip, r2
 8004464:	44bc      	add	ip, r7
 8004466:	4463      	add	r3, ip
 8004468:	2201      	movs	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	e05a      	b.n	8004524 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 800446e:	231b      	movs	r3, #27
 8004470:	2220      	movs	r2, #32
 8004472:	4694      	mov	ip, r2
 8004474:	44bc      	add	ip, r7
 8004476:	4463      	add	r3, ip
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b08      	cmp	r3, #8
 800447c:	d015      	beq.n	80044aa <UART_SetConfig+0x506>
 800447e:	dc18      	bgt.n	80044b2 <UART_SetConfig+0x50e>
 8004480:	2b04      	cmp	r3, #4
 8004482:	d00d      	beq.n	80044a0 <UART_SetConfig+0x4fc>
 8004484:	dc15      	bgt.n	80044b2 <UART_SetConfig+0x50e>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <UART_SetConfig+0x4ec>
 800448a:	2b02      	cmp	r3, #2
 800448c:	d005      	beq.n	800449a <UART_SetConfig+0x4f6>
 800448e:	e010      	b.n	80044b2 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7fe ff82 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004494:	0003      	movs	r3, r0
 8004496:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004498:	e015      	b.n	80044c6 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800449a:	4b2f      	ldr	r3, [pc, #188]	; (8004558 <UART_SetConfig+0x5b4>)
 800449c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800449e:	e012      	b.n	80044c6 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a0:	f7fe feee 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 80044a4:	0003      	movs	r3, r0
 80044a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044a8:	e00d      	b.n	80044c6 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044b0:	e009      	b.n	80044c6 <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80044b6:	231a      	movs	r3, #26
 80044b8:	2220      	movs	r2, #32
 80044ba:	4694      	mov	ip, r2
 80044bc:	44bc      	add	ip, r7
 80044be:	4463      	add	r3, ip
 80044c0:	2201      	movs	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]
        break;
 80044c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80044c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d02b      	beq.n	8004524 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d0:	4b20      	ldr	r3, [pc, #128]	; (8004554 <UART_SetConfig+0x5b0>)
 80044d2:	0052      	lsls	r2, r2, #1
 80044d4:	5ad3      	ldrh	r3, [r2, r3]
 80044d6:	0019      	movs	r1, r3
 80044d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044da:	f7fb fe25 	bl	8000128 <__udivsi3>
 80044de:	0003      	movs	r3, r0
 80044e0:	001a      	movs	r2, r3
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	085b      	lsrs	r3, r3, #1
 80044e8:	18d2      	adds	r2, r2, r3
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	0019      	movs	r1, r3
 80044f0:	0010      	movs	r0, r2
 80044f2:	f7fb fe19 	bl	8000128 <__udivsi3>
 80044f6:	0003      	movs	r3, r0
 80044f8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	2b0f      	cmp	r3, #15
 80044fe:	d90a      	bls.n	8004516 <UART_SetConfig+0x572>
 8004500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	025b      	lsls	r3, r3, #9
 8004506:	429a      	cmp	r2, r3
 8004508:	d205      	bcs.n	8004516 <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	b29a      	uxth	r2, r3
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60da      	str	r2, [r3, #12]
 8004514:	e006      	b.n	8004524 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8004516:	231a      	movs	r3, #26
 8004518:	2220      	movs	r2, #32
 800451a:	4694      	mov	ip, r2
 800451c:	44bc      	add	ip, r7
 800451e:	4463      	add	r3, ip
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	226a      	movs	r2, #106	; 0x6a
 8004528:	2101      	movs	r1, #1
 800452a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	2268      	movs	r2, #104	; 0x68
 8004530:	2101      	movs	r1, #1
 8004532:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	2200      	movs	r2, #0
 8004538:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	2200      	movs	r2, #0
 800453e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004540:	231a      	movs	r3, #26
 8004542:	2220      	movs	r2, #32
 8004544:	4694      	mov	ip, r2
 8004546:	44bc      	add	ip, r7
 8004548:	4463      	add	r3, ip
 800454a:	781b      	ldrb	r3, [r3, #0]
}
 800454c:	0018      	movs	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	b010      	add	sp, #64	; 0x40
 8004552:	bdb0      	pop	{r4, r5, r7, pc}
 8004554:	080055dc 	.word	0x080055dc
 8004558:	00f42400 	.word	0x00f42400

0800455c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	2201      	movs	r2, #1
 800456a:	4013      	ands	r3, r2
 800456c:	d00b      	beq.n	8004586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a4a      	ldr	r2, [pc, #296]	; (80046a0 <UART_AdvFeatureConfig+0x144>)
 8004576:	4013      	ands	r3, r2
 8004578:	0019      	movs	r1, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	2202      	movs	r2, #2
 800458c:	4013      	ands	r3, r2
 800458e:	d00b      	beq.n	80045a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4a43      	ldr	r2, [pc, #268]	; (80046a4 <UART_AdvFeatureConfig+0x148>)
 8004598:	4013      	ands	r3, r2
 800459a:	0019      	movs	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	2204      	movs	r2, #4
 80045ae:	4013      	ands	r3, r2
 80045b0:	d00b      	beq.n	80045ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4a3b      	ldr	r2, [pc, #236]	; (80046a8 <UART_AdvFeatureConfig+0x14c>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	2208      	movs	r2, #8
 80045d0:	4013      	ands	r3, r2
 80045d2:	d00b      	beq.n	80045ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4a34      	ldr	r2, [pc, #208]	; (80046ac <UART_AdvFeatureConfig+0x150>)
 80045dc:	4013      	ands	r3, r2
 80045de:	0019      	movs	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	2210      	movs	r2, #16
 80045f2:	4013      	ands	r3, r2
 80045f4:	d00b      	beq.n	800460e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4a2c      	ldr	r2, [pc, #176]	; (80046b0 <UART_AdvFeatureConfig+0x154>)
 80045fe:	4013      	ands	r3, r2
 8004600:	0019      	movs	r1, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	2220      	movs	r2, #32
 8004614:	4013      	ands	r3, r2
 8004616:	d00b      	beq.n	8004630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	4a25      	ldr	r2, [pc, #148]	; (80046b4 <UART_AdvFeatureConfig+0x158>)
 8004620:	4013      	ands	r3, r2
 8004622:	0019      	movs	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	2240      	movs	r2, #64	; 0x40
 8004636:	4013      	ands	r3, r2
 8004638:	d01d      	beq.n	8004676 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <UART_AdvFeatureConfig+0x15c>)
 8004642:	4013      	ands	r3, r2
 8004644:	0019      	movs	r1, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	035b      	lsls	r3, r3, #13
 800465a:	429a      	cmp	r2, r3
 800465c:	d10b      	bne.n	8004676 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4a15      	ldr	r2, [pc, #84]	; (80046bc <UART_AdvFeatureConfig+0x160>)
 8004666:	4013      	ands	r3, r2
 8004668:	0019      	movs	r1, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	2280      	movs	r2, #128	; 0x80
 800467c:	4013      	ands	r3, r2
 800467e:	d00b      	beq.n	8004698 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <UART_AdvFeatureConfig+0x164>)
 8004688:	4013      	ands	r3, r2
 800468a:	0019      	movs	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }
}
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b002      	add	sp, #8
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	fffdffff 	.word	0xfffdffff
 80046a4:	fffeffff 	.word	0xfffeffff
 80046a8:	fffbffff 	.word	0xfffbffff
 80046ac:	ffff7fff 	.word	0xffff7fff
 80046b0:	ffffefff 	.word	0xffffefff
 80046b4:	ffffdfff 	.word	0xffffdfff
 80046b8:	ffefffff 	.word	0xffefffff
 80046bc:	ff9fffff 	.word	0xff9fffff
 80046c0:	fff7ffff 	.word	0xfff7ffff

080046c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	228c      	movs	r2, #140	; 0x8c
 80046d0:	2100      	movs	r1, #0
 80046d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046d4:	f7fc fbac 	bl	8000e30 <HAL_GetTick>
 80046d8:	0003      	movs	r3, r0
 80046da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2208      	movs	r2, #8
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d10c      	bne.n	8004704 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	0391      	lsls	r1, r2, #14
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <UART_CheckIdleState+0x90>)
 80046f4:	9200      	str	r2, [sp, #0]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f000 f82e 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 80046fc:	1e03      	subs	r3, r0, #0
 80046fe:	d001      	beq.n	8004704 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e023      	b.n	800474c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2204      	movs	r2, #4
 800470c:	4013      	ands	r3, r2
 800470e:	2b04      	cmp	r3, #4
 8004710:	d10c      	bne.n	800472c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	03d1      	lsls	r1, r2, #15
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4a0e      	ldr	r2, [pc, #56]	; (8004754 <UART_CheckIdleState+0x90>)
 800471c:	9200      	str	r2, [sp, #0]
 800471e:	2200      	movs	r2, #0
 8004720:	f000 f81a 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 8004724:	1e03      	subs	r3, r0, #0
 8004726:	d001      	beq.n	800472c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e00f      	b.n	800474c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2284      	movs	r2, #132	; 0x84
 8004730:	2120      	movs	r1, #32
 8004732:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2288      	movs	r2, #136	; 0x88
 8004738:	2120      	movs	r1, #32
 800473a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2280      	movs	r2, #128	; 0x80
 8004746:	2100      	movs	r1, #0
 8004748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b004      	add	sp, #16
 8004752:	bd80      	pop	{r7, pc}
 8004754:	01ffffff 	.word	0x01ffffff

08004758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b094      	sub	sp, #80	; 0x50
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	1dfb      	adds	r3, r7, #7
 8004766:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004768:	e0a7      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800476c:	3301      	adds	r3, #1
 800476e:	d100      	bne.n	8004772 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004770:	e0a3      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004772:	f7fc fb5d 	bl	8000e30 <HAL_GetTick>
 8004776:	0002      	movs	r2, r0
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800477e:	429a      	cmp	r2, r3
 8004780:	d302      	bcc.n	8004788 <UART_WaitOnFlagUntilTimeout+0x30>
 8004782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004784:	2b00      	cmp	r3, #0
 8004786:	d13f      	bne.n	8004808 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004788:	f3ef 8310 	mrs	r3, PRIMASK
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004790:	647b      	str	r3, [r7, #68]	; 0x44
 8004792:	2301      	movs	r3, #1
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	f383 8810 	msr	PRIMASK, r3
}
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	494e      	ldr	r1, [pc, #312]	; (80048e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80047aa:	400a      	ands	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	f383 8810 	msr	PRIMASK, r3
}
 80047b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ba:	f3ef 8310 	mrs	r3, PRIMASK
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c2:	643b      	str	r3, [r7, #64]	; 0x40
 80047c4:	2301      	movs	r3, #1
 80047c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	f383 8810 	msr	PRIMASK, r3
}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2101      	movs	r1, #1
 80047dc:	438a      	bics	r2, r1
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e6:	f383 8810 	msr	PRIMASK, r3
}
 80047ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2284      	movs	r2, #132	; 0x84
 80047f0:	2120      	movs	r1, #32
 80047f2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2288      	movs	r2, #136	; 0x88
 80047f8:	2120      	movs	r1, #32
 80047fa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2280      	movs	r2, #128	; 0x80
 8004800:	2100      	movs	r1, #0
 8004802:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e069      	b.n	80048dc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2204      	movs	r2, #4
 8004810:	4013      	ands	r3, r2
 8004812:	d052      	beq.n	80048ba <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	401a      	ands	r2, r3
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	429a      	cmp	r2, r3
 8004826:	d148      	bne.n	80048ba <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	0112      	lsls	r2, r2, #4
 8004830:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	613b      	str	r3, [r7, #16]
  return(result);
 8004838:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800483a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800483c:	2301      	movs	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f383 8810 	msr	PRIMASK, r3
}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4924      	ldr	r1, [pc, #144]	; (80048e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004854:	400a      	ands	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f383 8810 	msr	PRIMASK, r3
}
 8004862:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004864:	f3ef 8310 	mrs	r3, PRIMASK
 8004868:	61fb      	str	r3, [r7, #28]
  return(result);
 800486a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486c:	64bb      	str	r3, [r7, #72]	; 0x48
 800486e:	2301      	movs	r3, #1
 8004870:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f383 8810 	msr	PRIMASK, r3
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2101      	movs	r1, #1
 8004886:	438a      	bics	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
 800488a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	f383 8810 	msr	PRIMASK, r3
}
 8004894:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2284      	movs	r2, #132	; 0x84
 800489a:	2120      	movs	r1, #32
 800489c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2288      	movs	r2, #136	; 0x88
 80048a2:	2120      	movs	r1, #32
 80048a4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	228c      	movs	r2, #140	; 0x8c
 80048aa:	2120      	movs	r1, #32
 80048ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2280      	movs	r2, #128	; 0x80
 80048b2:	2100      	movs	r1, #0
 80048b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e010      	b.n	80048dc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	425a      	negs	r2, r3
 80048ca:	4153      	adcs	r3, r2
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	001a      	movs	r2, r3
 80048d0:	1dfb      	adds	r3, r7, #7
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d100      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0x182>
 80048d8:	e747      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b014      	add	sp, #80	; 0x50
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	fffffe5f 	.word	0xfffffe5f

080048e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08e      	sub	sp, #56	; 0x38
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048f0:	f3ef 8310 	mrs	r3, PRIMASK
 80048f4:	617b      	str	r3, [r7, #20]
  return(result);
 80048f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
 80048fa:	2301      	movs	r3, #1
 80048fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f383 8810 	msr	PRIMASK, r3
}
 8004904:	46c0      	nop			; (mov r8, r8)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4926      	ldr	r1, [pc, #152]	; (80049ac <UART_EndRxTransfer+0xc4>)
 8004912:	400a      	ands	r2, r1
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f383 8810 	msr	PRIMASK, r3
}
 8004920:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004922:	f3ef 8310 	mrs	r3, PRIMASK
 8004926:	623b      	str	r3, [r7, #32]
  return(result);
 8004928:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800492a:	633b      	str	r3, [r7, #48]	; 0x30
 800492c:	2301      	movs	r3, #1
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	f383 8810 	msr	PRIMASK, r3
}
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	491b      	ldr	r1, [pc, #108]	; (80049b0 <UART_EndRxTransfer+0xc8>)
 8004944:	400a      	ands	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	f383 8810 	msr	PRIMASK, r3
}
 8004952:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d118      	bne.n	800498e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495c:	f3ef 8310 	mrs	r3, PRIMASK
 8004960:	60bb      	str	r3, [r7, #8]
  return(result);
 8004962:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004966:	2301      	movs	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2110      	movs	r1, #16
 800497e:	438a      	bics	r2, r1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2288      	movs	r2, #136	; 0x88
 8004992:	2120      	movs	r1, #32
 8004994:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	671a      	str	r2, [r3, #112]	; 0x70
}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	46bd      	mov	sp, r7
 80049a6:	b00e      	add	sp, #56	; 0x38
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	fffffedf 	.word	0xfffffedf
 80049b0:	effffffe 	.word	0xeffffffe

080049b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	225e      	movs	r2, #94	; 0x5e
 80049c6:	2100      	movs	r1, #0
 80049c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2256      	movs	r2, #86	; 0x56
 80049ce:	2100      	movs	r1, #0
 80049d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	0018      	movs	r0, r3
 80049d6:	f7ff fad1 	bl	8003f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	b004      	add	sp, #16
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b086      	sub	sp, #24
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ea:	f3ef 8310 	mrs	r3, PRIMASK
 80049ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80049f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	2301      	movs	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f383 8810 	msr	PRIMASK, r3
}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2140      	movs	r1, #64	; 0x40
 8004a0c:	438a      	bics	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2284      	movs	r2, #132	; 0x84
 8004a20:	2120      	movs	r1, #32
 8004a22:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f7ff fa9d 	bl	8003f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b006      	add	sp, #24
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b002      	add	sp, #8
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b002      	add	sp, #8
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	5c9b      	ldrb	r3, [r3, r2]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e027      	b.n	8004ad2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2280      	movs	r2, #128	; 0x80
 8004a86:	2101      	movs	r1, #1
 8004a88:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2284      	movs	r2, #132	; 0x84
 8004a8e:	2124      	movs	r1, #36	; 0x24
 8004a90:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	438a      	bics	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a0b      	ldr	r2, [pc, #44]	; (8004adc <HAL_UARTEx_DisableFifoMode+0x70>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2284      	movs	r2, #132	; 0x84
 8004ac4:	2120      	movs	r1, #32
 8004ac6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2280      	movs	r2, #128	; 0x80
 8004acc:	2100      	movs	r1, #0
 8004ace:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b004      	add	sp, #16
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	dfffffff 	.word	0xdfffffff

08004ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2280      	movs	r2, #128	; 0x80
 8004aee:	5c9b      	ldrb	r3, [r3, r2]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e02e      	b.n	8004b56 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2280      	movs	r2, #128	; 0x80
 8004afc:	2101      	movs	r1, #1
 8004afe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2284      	movs	r2, #132	; 0x84
 8004b04:	2124      	movs	r1, #36	; 0x24
 8004b06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	438a      	bics	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	08d9      	lsrs	r1, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 f854 	bl	8004be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2284      	movs	r2, #132	; 0x84
 8004b48:	2120      	movs	r1, #32
 8004b4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2280      	movs	r2, #128	; 0x80
 8004b50:	2100      	movs	r1, #0
 8004b52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b004      	add	sp, #16
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2280      	movs	r2, #128	; 0x80
 8004b6e:	5c9b      	ldrb	r3, [r3, r2]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e02f      	b.n	8004bd8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2280      	movs	r2, #128	; 0x80
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2284      	movs	r2, #132	; 0x84
 8004b84:	2124      	movs	r1, #36	; 0x24
 8004b86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	438a      	bics	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4a0e      	ldr	r2, [pc, #56]	; (8004be0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	0019      	movs	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 f813 	bl	8004be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2284      	movs	r2, #132	; 0x84
 8004bca:	2120      	movs	r1, #32
 8004bcc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2280      	movs	r2, #128	; 0x80
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b004      	add	sp, #16
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	f1ffffff 	.word	0xf1ffffff

08004be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d108      	bne.n	8004c06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	226a      	movs	r2, #106	; 0x6a
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2268      	movs	r2, #104	; 0x68
 8004c00:	2101      	movs	r1, #1
 8004c02:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c04:	e043      	b.n	8004c8e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c06:	260f      	movs	r6, #15
 8004c08:	19bb      	adds	r3, r7, r6
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c0e:	200e      	movs	r0, #14
 8004c10:	183b      	adds	r3, r7, r0
 8004c12:	2208      	movs	r2, #8
 8004c14:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	0e5b      	lsrs	r3, r3, #25
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	240d      	movs	r4, #13
 8004c22:	193b      	adds	r3, r7, r4
 8004c24:	2107      	movs	r1, #7
 8004c26:	400a      	ands	r2, r1
 8004c28:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	0f5b      	lsrs	r3, r3, #29
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	250c      	movs	r5, #12
 8004c36:	197b      	adds	r3, r7, r5
 8004c38:	2107      	movs	r1, #7
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c3e:	183b      	adds	r3, r7, r0
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	197a      	adds	r2, r7, r5
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	4914      	ldr	r1, [pc, #80]	; (8004c98 <UARTEx_SetNbDataToProcess+0xb4>)
 8004c48:	5c8a      	ldrb	r2, [r1, r2]
 8004c4a:	435a      	muls	r2, r3
 8004c4c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c4e:	197b      	adds	r3, r7, r5
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <UARTEx_SetNbDataToProcess+0xb8>)
 8004c54:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c56:	0019      	movs	r1, r3
 8004c58:	f7fb faf0 	bl	800023c <__divsi3>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	b299      	uxth	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	226a      	movs	r2, #106	; 0x6a
 8004c64:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c66:	19bb      	adds	r3, r7, r6
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	193a      	adds	r2, r7, r4
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	490a      	ldr	r1, [pc, #40]	; (8004c98 <UARTEx_SetNbDataToProcess+0xb4>)
 8004c70:	5c8a      	ldrb	r2, [r1, r2]
 8004c72:	435a      	muls	r2, r3
 8004c74:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c76:	193b      	adds	r3, r7, r4
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	4a08      	ldr	r2, [pc, #32]	; (8004c9c <UARTEx_SetNbDataToProcess+0xb8>)
 8004c7c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c7e:	0019      	movs	r1, r3
 8004c80:	f7fb fadc 	bl	800023c <__divsi3>
 8004c84:	0003      	movs	r3, r0
 8004c86:	b299      	uxth	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2268      	movs	r2, #104	; 0x68
 8004c8c:	5299      	strh	r1, [r3, r2]
}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b005      	add	sp, #20
 8004c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	080055f4 	.word	0x080055f4
 8004c9c:	080055fc 	.word	0x080055fc

08004ca0 <__errno>:
 8004ca0:	4b01      	ldr	r3, [pc, #4]	; (8004ca8 <__errno+0x8>)
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	4770      	bx	lr
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	20000010 	.word	0x20000010

08004cac <__libc_init_array>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	2600      	movs	r6, #0
 8004cb0:	4d0c      	ldr	r5, [pc, #48]	; (8004ce4 <__libc_init_array+0x38>)
 8004cb2:	4c0d      	ldr	r4, [pc, #52]	; (8004ce8 <__libc_init_array+0x3c>)
 8004cb4:	1b64      	subs	r4, r4, r5
 8004cb6:	10a4      	asrs	r4, r4, #2
 8004cb8:	42a6      	cmp	r6, r4
 8004cba:	d109      	bne.n	8004cd0 <__libc_init_array+0x24>
 8004cbc:	2600      	movs	r6, #0
 8004cbe:	f000 fc47 	bl	8005550 <_init>
 8004cc2:	4d0a      	ldr	r5, [pc, #40]	; (8004cec <__libc_init_array+0x40>)
 8004cc4:	4c0a      	ldr	r4, [pc, #40]	; (8004cf0 <__libc_init_array+0x44>)
 8004cc6:	1b64      	subs	r4, r4, r5
 8004cc8:	10a4      	asrs	r4, r4, #2
 8004cca:	42a6      	cmp	r6, r4
 8004ccc:	d105      	bne.n	8004cda <__libc_init_array+0x2e>
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	00b3      	lsls	r3, r6, #2
 8004cd2:	58eb      	ldr	r3, [r5, r3]
 8004cd4:	4798      	blx	r3
 8004cd6:	3601      	adds	r6, #1
 8004cd8:	e7ee      	b.n	8004cb8 <__libc_init_array+0xc>
 8004cda:	00b3      	lsls	r3, r6, #2
 8004cdc:	58eb      	ldr	r3, [r5, r3]
 8004cde:	4798      	blx	r3
 8004ce0:	3601      	adds	r6, #1
 8004ce2:	e7f2      	b.n	8004cca <__libc_init_array+0x1e>
 8004ce4:	08005640 	.word	0x08005640
 8004ce8:	08005640 	.word	0x08005640
 8004cec:	08005640 	.word	0x08005640
 8004cf0:	08005644 	.word	0x08005644

08004cf4 <memset>:
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	1882      	adds	r2, r0, r2
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d100      	bne.n	8004cfe <memset+0xa>
 8004cfc:	4770      	bx	lr
 8004cfe:	7019      	strb	r1, [r3, #0]
 8004d00:	3301      	adds	r3, #1
 8004d02:	e7f9      	b.n	8004cf8 <memset+0x4>

08004d04 <siprintf>:
 8004d04:	b40e      	push	{r1, r2, r3}
 8004d06:	b500      	push	{lr}
 8004d08:	490b      	ldr	r1, [pc, #44]	; (8004d38 <siprintf+0x34>)
 8004d0a:	b09c      	sub	sp, #112	; 0x70
 8004d0c:	ab1d      	add	r3, sp, #116	; 0x74
 8004d0e:	9002      	str	r0, [sp, #8]
 8004d10:	9006      	str	r0, [sp, #24]
 8004d12:	9107      	str	r1, [sp, #28]
 8004d14:	9104      	str	r1, [sp, #16]
 8004d16:	4809      	ldr	r0, [pc, #36]	; (8004d3c <siprintf+0x38>)
 8004d18:	4909      	ldr	r1, [pc, #36]	; (8004d40 <siprintf+0x3c>)
 8004d1a:	cb04      	ldmia	r3!, {r2}
 8004d1c:	9105      	str	r1, [sp, #20]
 8004d1e:	6800      	ldr	r0, [r0, #0]
 8004d20:	a902      	add	r1, sp, #8
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	f000 f870 	bl	8004e08 <_svfiprintf_r>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	9a02      	ldr	r2, [sp, #8]
 8004d2c:	7013      	strb	r3, [r2, #0]
 8004d2e:	b01c      	add	sp, #112	; 0x70
 8004d30:	bc08      	pop	{r3}
 8004d32:	b003      	add	sp, #12
 8004d34:	4718      	bx	r3
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	7fffffff 	.word	0x7fffffff
 8004d3c:	20000010 	.word	0x20000010
 8004d40:	ffff0208 	.word	0xffff0208

08004d44 <__ssputs_r>:
 8004d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d46:	688e      	ldr	r6, [r1, #8]
 8004d48:	b085      	sub	sp, #20
 8004d4a:	0007      	movs	r7, r0
 8004d4c:	000c      	movs	r4, r1
 8004d4e:	9203      	str	r2, [sp, #12]
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	429e      	cmp	r6, r3
 8004d54:	d83c      	bhi.n	8004dd0 <__ssputs_r+0x8c>
 8004d56:	2390      	movs	r3, #144	; 0x90
 8004d58:	898a      	ldrh	r2, [r1, #12]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	421a      	tst	r2, r3
 8004d5e:	d034      	beq.n	8004dca <__ssputs_r+0x86>
 8004d60:	2503      	movs	r5, #3
 8004d62:	6909      	ldr	r1, [r1, #16]
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	1a5b      	subs	r3, r3, r1
 8004d68:	9302      	str	r3, [sp, #8]
 8004d6a:	6963      	ldr	r3, [r4, #20]
 8004d6c:	9802      	ldr	r0, [sp, #8]
 8004d6e:	435d      	muls	r5, r3
 8004d70:	0feb      	lsrs	r3, r5, #31
 8004d72:	195d      	adds	r5, r3, r5
 8004d74:	9b01      	ldr	r3, [sp, #4]
 8004d76:	106d      	asrs	r5, r5, #1
 8004d78:	3301      	adds	r3, #1
 8004d7a:	181b      	adds	r3, r3, r0
 8004d7c:	42ab      	cmp	r3, r5
 8004d7e:	d900      	bls.n	8004d82 <__ssputs_r+0x3e>
 8004d80:	001d      	movs	r5, r3
 8004d82:	0553      	lsls	r3, r2, #21
 8004d84:	d532      	bpl.n	8004dec <__ssputs_r+0xa8>
 8004d86:	0029      	movs	r1, r5
 8004d88:	0038      	movs	r0, r7
 8004d8a:	f000 fb31 	bl	80053f0 <_malloc_r>
 8004d8e:	1e06      	subs	r6, r0, #0
 8004d90:	d109      	bne.n	8004da6 <__ssputs_r+0x62>
 8004d92:	230c      	movs	r3, #12
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	2340      	movs	r3, #64	; 0x40
 8004d98:	2001      	movs	r0, #1
 8004d9a:	89a2      	ldrh	r2, [r4, #12]
 8004d9c:	4240      	negs	r0, r0
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	81a3      	strh	r3, [r4, #12]
 8004da2:	b005      	add	sp, #20
 8004da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da6:	9a02      	ldr	r2, [sp, #8]
 8004da8:	6921      	ldr	r1, [r4, #16]
 8004daa:	f000 faba 	bl	8005322 <memcpy>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	4a14      	ldr	r2, [pc, #80]	; (8004e04 <__ssputs_r+0xc0>)
 8004db2:	401a      	ands	r2, r3
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	4313      	orrs	r3, r2
 8004db8:	81a3      	strh	r3, [r4, #12]
 8004dba:	9b02      	ldr	r3, [sp, #8]
 8004dbc:	6126      	str	r6, [r4, #16]
 8004dbe:	18f6      	adds	r6, r6, r3
 8004dc0:	6026      	str	r6, [r4, #0]
 8004dc2:	6165      	str	r5, [r4, #20]
 8004dc4:	9e01      	ldr	r6, [sp, #4]
 8004dc6:	1aed      	subs	r5, r5, r3
 8004dc8:	60a5      	str	r5, [r4, #8]
 8004dca:	9b01      	ldr	r3, [sp, #4]
 8004dcc:	429e      	cmp	r6, r3
 8004dce:	d900      	bls.n	8004dd2 <__ssputs_r+0x8e>
 8004dd0:	9e01      	ldr	r6, [sp, #4]
 8004dd2:	0032      	movs	r2, r6
 8004dd4:	9903      	ldr	r1, [sp, #12]
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	f000 faac 	bl	8005334 <memmove>
 8004ddc:	68a3      	ldr	r3, [r4, #8]
 8004dde:	2000      	movs	r0, #0
 8004de0:	1b9b      	subs	r3, r3, r6
 8004de2:	60a3      	str	r3, [r4, #8]
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	199e      	adds	r6, r3, r6
 8004de8:	6026      	str	r6, [r4, #0]
 8004dea:	e7da      	b.n	8004da2 <__ssputs_r+0x5e>
 8004dec:	002a      	movs	r2, r5
 8004dee:	0038      	movs	r0, r7
 8004df0:	f000 fb5c 	bl	80054ac <_realloc_r>
 8004df4:	1e06      	subs	r6, r0, #0
 8004df6:	d1e0      	bne.n	8004dba <__ssputs_r+0x76>
 8004df8:	0038      	movs	r0, r7
 8004dfa:	6921      	ldr	r1, [r4, #16]
 8004dfc:	f000 faae 	bl	800535c <_free_r>
 8004e00:	e7c7      	b.n	8004d92 <__ssputs_r+0x4e>
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	fffffb7f 	.word	0xfffffb7f

08004e08 <_svfiprintf_r>:
 8004e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0a:	b0a1      	sub	sp, #132	; 0x84
 8004e0c:	9003      	str	r0, [sp, #12]
 8004e0e:	001d      	movs	r5, r3
 8004e10:	898b      	ldrh	r3, [r1, #12]
 8004e12:	000f      	movs	r7, r1
 8004e14:	0016      	movs	r6, r2
 8004e16:	061b      	lsls	r3, r3, #24
 8004e18:	d511      	bpl.n	8004e3e <_svfiprintf_r+0x36>
 8004e1a:	690b      	ldr	r3, [r1, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10e      	bne.n	8004e3e <_svfiprintf_r+0x36>
 8004e20:	2140      	movs	r1, #64	; 0x40
 8004e22:	f000 fae5 	bl	80053f0 <_malloc_r>
 8004e26:	6038      	str	r0, [r7, #0]
 8004e28:	6138      	str	r0, [r7, #16]
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d105      	bne.n	8004e3a <_svfiprintf_r+0x32>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	9a03      	ldr	r2, [sp, #12]
 8004e32:	3801      	subs	r0, #1
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	b021      	add	sp, #132	; 0x84
 8004e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3a:	2340      	movs	r3, #64	; 0x40
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	ac08      	add	r4, sp, #32
 8004e42:	6163      	str	r3, [r4, #20]
 8004e44:	3320      	adds	r3, #32
 8004e46:	7663      	strb	r3, [r4, #25]
 8004e48:	3310      	adds	r3, #16
 8004e4a:	76a3      	strb	r3, [r4, #26]
 8004e4c:	9507      	str	r5, [sp, #28]
 8004e4e:	0035      	movs	r5, r6
 8004e50:	782b      	ldrb	r3, [r5, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <_svfiprintf_r+0x52>
 8004e56:	2b25      	cmp	r3, #37	; 0x25
 8004e58:	d147      	bne.n	8004eea <_svfiprintf_r+0xe2>
 8004e5a:	1bab      	subs	r3, r5, r6
 8004e5c:	9305      	str	r3, [sp, #20]
 8004e5e:	42b5      	cmp	r5, r6
 8004e60:	d00c      	beq.n	8004e7c <_svfiprintf_r+0x74>
 8004e62:	0032      	movs	r2, r6
 8004e64:	0039      	movs	r1, r7
 8004e66:	9803      	ldr	r0, [sp, #12]
 8004e68:	f7ff ff6c 	bl	8004d44 <__ssputs_r>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	d100      	bne.n	8004e72 <_svfiprintf_r+0x6a>
 8004e70:	e0ae      	b.n	8004fd0 <_svfiprintf_r+0x1c8>
 8004e72:	6962      	ldr	r2, [r4, #20]
 8004e74:	9b05      	ldr	r3, [sp, #20]
 8004e76:	4694      	mov	ip, r2
 8004e78:	4463      	add	r3, ip
 8004e7a:	6163      	str	r3, [r4, #20]
 8004e7c:	782b      	ldrb	r3, [r5, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d100      	bne.n	8004e84 <_svfiprintf_r+0x7c>
 8004e82:	e0a5      	b.n	8004fd0 <_svfiprintf_r+0x1c8>
 8004e84:	2201      	movs	r2, #1
 8004e86:	2300      	movs	r3, #0
 8004e88:	4252      	negs	r2, r2
 8004e8a:	6062      	str	r2, [r4, #4]
 8004e8c:	a904      	add	r1, sp, #16
 8004e8e:	3254      	adds	r2, #84	; 0x54
 8004e90:	1852      	adds	r2, r2, r1
 8004e92:	1c6e      	adds	r6, r5, #1
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	60e3      	str	r3, [r4, #12]
 8004e98:	60a3      	str	r3, [r4, #8]
 8004e9a:	7013      	strb	r3, [r2, #0]
 8004e9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e9e:	2205      	movs	r2, #5
 8004ea0:	7831      	ldrb	r1, [r6, #0]
 8004ea2:	4854      	ldr	r0, [pc, #336]	; (8004ff4 <_svfiprintf_r+0x1ec>)
 8004ea4:	f000 fa32 	bl	800530c <memchr>
 8004ea8:	1c75      	adds	r5, r6, #1
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d11f      	bne.n	8004eee <_svfiprintf_r+0xe6>
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	06d3      	lsls	r3, r2, #27
 8004eb2:	d504      	bpl.n	8004ebe <_svfiprintf_r+0xb6>
 8004eb4:	2353      	movs	r3, #83	; 0x53
 8004eb6:	a904      	add	r1, sp, #16
 8004eb8:	185b      	adds	r3, r3, r1
 8004eba:	2120      	movs	r1, #32
 8004ebc:	7019      	strb	r1, [r3, #0]
 8004ebe:	0713      	lsls	r3, r2, #28
 8004ec0:	d504      	bpl.n	8004ecc <_svfiprintf_r+0xc4>
 8004ec2:	2353      	movs	r3, #83	; 0x53
 8004ec4:	a904      	add	r1, sp, #16
 8004ec6:	185b      	adds	r3, r3, r1
 8004ec8:	212b      	movs	r1, #43	; 0x2b
 8004eca:	7019      	strb	r1, [r3, #0]
 8004ecc:	7833      	ldrb	r3, [r6, #0]
 8004ece:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed0:	d016      	beq.n	8004f00 <_svfiprintf_r+0xf8>
 8004ed2:	0035      	movs	r5, r6
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	200a      	movs	r0, #10
 8004ed8:	68e3      	ldr	r3, [r4, #12]
 8004eda:	782a      	ldrb	r2, [r5, #0]
 8004edc:	1c6e      	adds	r6, r5, #1
 8004ede:	3a30      	subs	r2, #48	; 0x30
 8004ee0:	2a09      	cmp	r2, #9
 8004ee2:	d94e      	bls.n	8004f82 <_svfiprintf_r+0x17a>
 8004ee4:	2900      	cmp	r1, #0
 8004ee6:	d111      	bne.n	8004f0c <_svfiprintf_r+0x104>
 8004ee8:	e017      	b.n	8004f1a <_svfiprintf_r+0x112>
 8004eea:	3501      	adds	r5, #1
 8004eec:	e7b0      	b.n	8004e50 <_svfiprintf_r+0x48>
 8004eee:	4b41      	ldr	r3, [pc, #260]	; (8004ff4 <_svfiprintf_r+0x1ec>)
 8004ef0:	6822      	ldr	r2, [r4, #0]
 8004ef2:	1ac0      	subs	r0, r0, r3
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4083      	lsls	r3, r0
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	002e      	movs	r6, r5
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	e7ce      	b.n	8004e9e <_svfiprintf_r+0x96>
 8004f00:	9b07      	ldr	r3, [sp, #28]
 8004f02:	1d19      	adds	r1, r3, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	9107      	str	r1, [sp, #28]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	db01      	blt.n	8004f10 <_svfiprintf_r+0x108>
 8004f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f0e:	e004      	b.n	8004f1a <_svfiprintf_r+0x112>
 8004f10:	425b      	negs	r3, r3
 8004f12:	60e3      	str	r3, [r4, #12]
 8004f14:	2302      	movs	r3, #2
 8004f16:	4313      	orrs	r3, r2
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	782b      	ldrb	r3, [r5, #0]
 8004f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1e:	d10a      	bne.n	8004f36 <_svfiprintf_r+0x12e>
 8004f20:	786b      	ldrb	r3, [r5, #1]
 8004f22:	2b2a      	cmp	r3, #42	; 0x2a
 8004f24:	d135      	bne.n	8004f92 <_svfiprintf_r+0x18a>
 8004f26:	9b07      	ldr	r3, [sp, #28]
 8004f28:	3502      	adds	r5, #2
 8004f2a:	1d1a      	adds	r2, r3, #4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	9207      	str	r2, [sp, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	db2b      	blt.n	8004f8c <_svfiprintf_r+0x184>
 8004f34:	9309      	str	r3, [sp, #36]	; 0x24
 8004f36:	4e30      	ldr	r6, [pc, #192]	; (8004ff8 <_svfiprintf_r+0x1f0>)
 8004f38:	2203      	movs	r2, #3
 8004f3a:	0030      	movs	r0, r6
 8004f3c:	7829      	ldrb	r1, [r5, #0]
 8004f3e:	f000 f9e5 	bl	800530c <memchr>
 8004f42:	2800      	cmp	r0, #0
 8004f44:	d006      	beq.n	8004f54 <_svfiprintf_r+0x14c>
 8004f46:	2340      	movs	r3, #64	; 0x40
 8004f48:	1b80      	subs	r0, r0, r6
 8004f4a:	4083      	lsls	r3, r0
 8004f4c:	6822      	ldr	r2, [r4, #0]
 8004f4e:	3501      	adds	r5, #1
 8004f50:	4313      	orrs	r3, r2
 8004f52:	6023      	str	r3, [r4, #0]
 8004f54:	7829      	ldrb	r1, [r5, #0]
 8004f56:	2206      	movs	r2, #6
 8004f58:	4828      	ldr	r0, [pc, #160]	; (8004ffc <_svfiprintf_r+0x1f4>)
 8004f5a:	1c6e      	adds	r6, r5, #1
 8004f5c:	7621      	strb	r1, [r4, #24]
 8004f5e:	f000 f9d5 	bl	800530c <memchr>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d03c      	beq.n	8004fe0 <_svfiprintf_r+0x1d8>
 8004f66:	4b26      	ldr	r3, [pc, #152]	; (8005000 <_svfiprintf_r+0x1f8>)
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d125      	bne.n	8004fb8 <_svfiprintf_r+0x1b0>
 8004f6c:	2207      	movs	r2, #7
 8004f6e:	9b07      	ldr	r3, [sp, #28]
 8004f70:	3307      	adds	r3, #7
 8004f72:	4393      	bics	r3, r2
 8004f74:	3308      	adds	r3, #8
 8004f76:	9307      	str	r3, [sp, #28]
 8004f78:	6963      	ldr	r3, [r4, #20]
 8004f7a:	9a04      	ldr	r2, [sp, #16]
 8004f7c:	189b      	adds	r3, r3, r2
 8004f7e:	6163      	str	r3, [r4, #20]
 8004f80:	e765      	b.n	8004e4e <_svfiprintf_r+0x46>
 8004f82:	4343      	muls	r3, r0
 8004f84:	0035      	movs	r5, r6
 8004f86:	2101      	movs	r1, #1
 8004f88:	189b      	adds	r3, r3, r2
 8004f8a:	e7a6      	b.n	8004eda <_svfiprintf_r+0xd2>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	425b      	negs	r3, r3
 8004f90:	e7d0      	b.n	8004f34 <_svfiprintf_r+0x12c>
 8004f92:	2300      	movs	r3, #0
 8004f94:	200a      	movs	r0, #10
 8004f96:	001a      	movs	r2, r3
 8004f98:	3501      	adds	r5, #1
 8004f9a:	6063      	str	r3, [r4, #4]
 8004f9c:	7829      	ldrb	r1, [r5, #0]
 8004f9e:	1c6e      	adds	r6, r5, #1
 8004fa0:	3930      	subs	r1, #48	; 0x30
 8004fa2:	2909      	cmp	r1, #9
 8004fa4:	d903      	bls.n	8004fae <_svfiprintf_r+0x1a6>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0c5      	beq.n	8004f36 <_svfiprintf_r+0x12e>
 8004faa:	9209      	str	r2, [sp, #36]	; 0x24
 8004fac:	e7c3      	b.n	8004f36 <_svfiprintf_r+0x12e>
 8004fae:	4342      	muls	r2, r0
 8004fb0:	0035      	movs	r5, r6
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	1852      	adds	r2, r2, r1
 8004fb6:	e7f1      	b.n	8004f9c <_svfiprintf_r+0x194>
 8004fb8:	ab07      	add	r3, sp, #28
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	003a      	movs	r2, r7
 8004fbe:	0021      	movs	r1, r4
 8004fc0:	4b10      	ldr	r3, [pc, #64]	; (8005004 <_svfiprintf_r+0x1fc>)
 8004fc2:	9803      	ldr	r0, [sp, #12]
 8004fc4:	e000      	b.n	8004fc8 <_svfiprintf_r+0x1c0>
 8004fc6:	bf00      	nop
 8004fc8:	9004      	str	r0, [sp, #16]
 8004fca:	9b04      	ldr	r3, [sp, #16]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	d1d3      	bne.n	8004f78 <_svfiprintf_r+0x170>
 8004fd0:	89bb      	ldrh	r3, [r7, #12]
 8004fd2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004fd4:	065b      	lsls	r3, r3, #25
 8004fd6:	d400      	bmi.n	8004fda <_svfiprintf_r+0x1d2>
 8004fd8:	e72d      	b.n	8004e36 <_svfiprintf_r+0x2e>
 8004fda:	2001      	movs	r0, #1
 8004fdc:	4240      	negs	r0, r0
 8004fde:	e72a      	b.n	8004e36 <_svfiprintf_r+0x2e>
 8004fe0:	ab07      	add	r3, sp, #28
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	003a      	movs	r2, r7
 8004fe6:	0021      	movs	r1, r4
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <_svfiprintf_r+0x1fc>)
 8004fea:	9803      	ldr	r0, [sp, #12]
 8004fec:	f000 f87c 	bl	80050e8 <_printf_i>
 8004ff0:	e7ea      	b.n	8004fc8 <_svfiprintf_r+0x1c0>
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	08005604 	.word	0x08005604
 8004ff8:	0800560a 	.word	0x0800560a
 8004ffc:	0800560e 	.word	0x0800560e
 8005000:	00000000 	.word	0x00000000
 8005004:	08004d45 	.word	0x08004d45

08005008 <_printf_common>:
 8005008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800500a:	0015      	movs	r5, r2
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	688a      	ldr	r2, [r1, #8]
 8005010:	690b      	ldr	r3, [r1, #16]
 8005012:	000c      	movs	r4, r1
 8005014:	9000      	str	r0, [sp, #0]
 8005016:	4293      	cmp	r3, r2
 8005018:	da00      	bge.n	800501c <_printf_common+0x14>
 800501a:	0013      	movs	r3, r2
 800501c:	0022      	movs	r2, r4
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	3243      	adds	r2, #67	; 0x43
 8005022:	7812      	ldrb	r2, [r2, #0]
 8005024:	2a00      	cmp	r2, #0
 8005026:	d001      	beq.n	800502c <_printf_common+0x24>
 8005028:	3301      	adds	r3, #1
 800502a:	602b      	str	r3, [r5, #0]
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	069b      	lsls	r3, r3, #26
 8005030:	d502      	bpl.n	8005038 <_printf_common+0x30>
 8005032:	682b      	ldr	r3, [r5, #0]
 8005034:	3302      	adds	r3, #2
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	6822      	ldr	r2, [r4, #0]
 800503a:	2306      	movs	r3, #6
 800503c:	0017      	movs	r7, r2
 800503e:	401f      	ands	r7, r3
 8005040:	421a      	tst	r2, r3
 8005042:	d027      	beq.n	8005094 <_printf_common+0x8c>
 8005044:	0023      	movs	r3, r4
 8005046:	3343      	adds	r3, #67	; 0x43
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	1e5a      	subs	r2, r3, #1
 800504c:	4193      	sbcs	r3, r2
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	0692      	lsls	r2, r2, #26
 8005052:	d430      	bmi.n	80050b6 <_printf_common+0xae>
 8005054:	0022      	movs	r2, r4
 8005056:	9901      	ldr	r1, [sp, #4]
 8005058:	9800      	ldr	r0, [sp, #0]
 800505a:	9e08      	ldr	r6, [sp, #32]
 800505c:	3243      	adds	r2, #67	; 0x43
 800505e:	47b0      	blx	r6
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d025      	beq.n	80050b0 <_printf_common+0xa8>
 8005064:	2306      	movs	r3, #6
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	682a      	ldr	r2, [r5, #0]
 800506a:	68e1      	ldr	r1, [r4, #12]
 800506c:	2500      	movs	r5, #0
 800506e:	4003      	ands	r3, r0
 8005070:	2b04      	cmp	r3, #4
 8005072:	d103      	bne.n	800507c <_printf_common+0x74>
 8005074:	1a8d      	subs	r5, r1, r2
 8005076:	43eb      	mvns	r3, r5
 8005078:	17db      	asrs	r3, r3, #31
 800507a:	401d      	ands	r5, r3
 800507c:	68a3      	ldr	r3, [r4, #8]
 800507e:	6922      	ldr	r2, [r4, #16]
 8005080:	4293      	cmp	r3, r2
 8005082:	dd01      	ble.n	8005088 <_printf_common+0x80>
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	18ed      	adds	r5, r5, r3
 8005088:	2700      	movs	r7, #0
 800508a:	42bd      	cmp	r5, r7
 800508c:	d120      	bne.n	80050d0 <_printf_common+0xc8>
 800508e:	2000      	movs	r0, #0
 8005090:	e010      	b.n	80050b4 <_printf_common+0xac>
 8005092:	3701      	adds	r7, #1
 8005094:	68e3      	ldr	r3, [r4, #12]
 8005096:	682a      	ldr	r2, [r5, #0]
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	42bb      	cmp	r3, r7
 800509c:	ddd2      	ble.n	8005044 <_printf_common+0x3c>
 800509e:	0022      	movs	r2, r4
 80050a0:	2301      	movs	r3, #1
 80050a2:	9901      	ldr	r1, [sp, #4]
 80050a4:	9800      	ldr	r0, [sp, #0]
 80050a6:	9e08      	ldr	r6, [sp, #32]
 80050a8:	3219      	adds	r2, #25
 80050aa:	47b0      	blx	r6
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d1f0      	bne.n	8005092 <_printf_common+0x8a>
 80050b0:	2001      	movs	r0, #1
 80050b2:	4240      	negs	r0, r0
 80050b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050b6:	2030      	movs	r0, #48	; 0x30
 80050b8:	18e1      	adds	r1, r4, r3
 80050ba:	3143      	adds	r1, #67	; 0x43
 80050bc:	7008      	strb	r0, [r1, #0]
 80050be:	0021      	movs	r1, r4
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	3145      	adds	r1, #69	; 0x45
 80050c4:	7809      	ldrb	r1, [r1, #0]
 80050c6:	18a2      	adds	r2, r4, r2
 80050c8:	3243      	adds	r2, #67	; 0x43
 80050ca:	3302      	adds	r3, #2
 80050cc:	7011      	strb	r1, [r2, #0]
 80050ce:	e7c1      	b.n	8005054 <_printf_common+0x4c>
 80050d0:	0022      	movs	r2, r4
 80050d2:	2301      	movs	r3, #1
 80050d4:	9901      	ldr	r1, [sp, #4]
 80050d6:	9800      	ldr	r0, [sp, #0]
 80050d8:	9e08      	ldr	r6, [sp, #32]
 80050da:	321a      	adds	r2, #26
 80050dc:	47b0      	blx	r6
 80050de:	1c43      	adds	r3, r0, #1
 80050e0:	d0e6      	beq.n	80050b0 <_printf_common+0xa8>
 80050e2:	3701      	adds	r7, #1
 80050e4:	e7d1      	b.n	800508a <_printf_common+0x82>
	...

080050e8 <_printf_i>:
 80050e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ea:	b08b      	sub	sp, #44	; 0x2c
 80050ec:	9206      	str	r2, [sp, #24]
 80050ee:	000a      	movs	r2, r1
 80050f0:	3243      	adds	r2, #67	; 0x43
 80050f2:	9307      	str	r3, [sp, #28]
 80050f4:	9005      	str	r0, [sp, #20]
 80050f6:	9204      	str	r2, [sp, #16]
 80050f8:	7e0a      	ldrb	r2, [r1, #24]
 80050fa:	000c      	movs	r4, r1
 80050fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050fe:	2a78      	cmp	r2, #120	; 0x78
 8005100:	d806      	bhi.n	8005110 <_printf_i+0x28>
 8005102:	2a62      	cmp	r2, #98	; 0x62
 8005104:	d808      	bhi.n	8005118 <_printf_i+0x30>
 8005106:	2a00      	cmp	r2, #0
 8005108:	d100      	bne.n	800510c <_printf_i+0x24>
 800510a:	e0c0      	b.n	800528e <_printf_i+0x1a6>
 800510c:	2a58      	cmp	r2, #88	; 0x58
 800510e:	d052      	beq.n	80051b6 <_printf_i+0xce>
 8005110:	0026      	movs	r6, r4
 8005112:	3642      	adds	r6, #66	; 0x42
 8005114:	7032      	strb	r2, [r6, #0]
 8005116:	e022      	b.n	800515e <_printf_i+0x76>
 8005118:	0010      	movs	r0, r2
 800511a:	3863      	subs	r0, #99	; 0x63
 800511c:	2815      	cmp	r0, #21
 800511e:	d8f7      	bhi.n	8005110 <_printf_i+0x28>
 8005120:	f7fa fff8 	bl	8000114 <__gnu_thumb1_case_shi>
 8005124:	001f0016 	.word	0x001f0016
 8005128:	fff6fff6 	.word	0xfff6fff6
 800512c:	fff6fff6 	.word	0xfff6fff6
 8005130:	fff6001f 	.word	0xfff6001f
 8005134:	fff6fff6 	.word	0xfff6fff6
 8005138:	00a8fff6 	.word	0x00a8fff6
 800513c:	009a0036 	.word	0x009a0036
 8005140:	fff6fff6 	.word	0xfff6fff6
 8005144:	fff600b9 	.word	0xfff600b9
 8005148:	fff60036 	.word	0xfff60036
 800514c:	009efff6 	.word	0x009efff6
 8005150:	0026      	movs	r6, r4
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	3642      	adds	r6, #66	; 0x42
 8005156:	1d11      	adds	r1, r2, #4
 8005158:	6019      	str	r1, [r3, #0]
 800515a:	6813      	ldr	r3, [r2, #0]
 800515c:	7033      	strb	r3, [r6, #0]
 800515e:	2301      	movs	r3, #1
 8005160:	e0a7      	b.n	80052b2 <_printf_i+0x1ca>
 8005162:	6808      	ldr	r0, [r1, #0]
 8005164:	6819      	ldr	r1, [r3, #0]
 8005166:	1d0a      	adds	r2, r1, #4
 8005168:	0605      	lsls	r5, r0, #24
 800516a:	d50b      	bpl.n	8005184 <_printf_i+0x9c>
 800516c:	680d      	ldr	r5, [r1, #0]
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	2d00      	cmp	r5, #0
 8005172:	da03      	bge.n	800517c <_printf_i+0x94>
 8005174:	232d      	movs	r3, #45	; 0x2d
 8005176:	9a04      	ldr	r2, [sp, #16]
 8005178:	426d      	negs	r5, r5
 800517a:	7013      	strb	r3, [r2, #0]
 800517c:	4b61      	ldr	r3, [pc, #388]	; (8005304 <_printf_i+0x21c>)
 800517e:	270a      	movs	r7, #10
 8005180:	9303      	str	r3, [sp, #12]
 8005182:	e032      	b.n	80051ea <_printf_i+0x102>
 8005184:	680d      	ldr	r5, [r1, #0]
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	0641      	lsls	r1, r0, #25
 800518a:	d5f1      	bpl.n	8005170 <_printf_i+0x88>
 800518c:	b22d      	sxth	r5, r5
 800518e:	e7ef      	b.n	8005170 <_printf_i+0x88>
 8005190:	680d      	ldr	r5, [r1, #0]
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	1d08      	adds	r0, r1, #4
 8005196:	6018      	str	r0, [r3, #0]
 8005198:	062e      	lsls	r6, r5, #24
 800519a:	d501      	bpl.n	80051a0 <_printf_i+0xb8>
 800519c:	680d      	ldr	r5, [r1, #0]
 800519e:	e003      	b.n	80051a8 <_printf_i+0xc0>
 80051a0:	066d      	lsls	r5, r5, #25
 80051a2:	d5fb      	bpl.n	800519c <_printf_i+0xb4>
 80051a4:	680d      	ldr	r5, [r1, #0]
 80051a6:	b2ad      	uxth	r5, r5
 80051a8:	4b56      	ldr	r3, [pc, #344]	; (8005304 <_printf_i+0x21c>)
 80051aa:	270a      	movs	r7, #10
 80051ac:	9303      	str	r3, [sp, #12]
 80051ae:	2a6f      	cmp	r2, #111	; 0x6f
 80051b0:	d117      	bne.n	80051e2 <_printf_i+0xfa>
 80051b2:	2708      	movs	r7, #8
 80051b4:	e015      	b.n	80051e2 <_printf_i+0xfa>
 80051b6:	3145      	adds	r1, #69	; 0x45
 80051b8:	700a      	strb	r2, [r1, #0]
 80051ba:	4a52      	ldr	r2, [pc, #328]	; (8005304 <_printf_i+0x21c>)
 80051bc:	9203      	str	r2, [sp, #12]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	6821      	ldr	r1, [r4, #0]
 80051c2:	ca20      	ldmia	r2!, {r5}
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	0608      	lsls	r0, r1, #24
 80051c8:	d550      	bpl.n	800526c <_printf_i+0x184>
 80051ca:	07cb      	lsls	r3, r1, #31
 80051cc:	d502      	bpl.n	80051d4 <_printf_i+0xec>
 80051ce:	2320      	movs	r3, #32
 80051d0:	4319      	orrs	r1, r3
 80051d2:	6021      	str	r1, [r4, #0]
 80051d4:	2710      	movs	r7, #16
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	d103      	bne.n	80051e2 <_printf_i+0xfa>
 80051da:	2320      	movs	r3, #32
 80051dc:	6822      	ldr	r2, [r4, #0]
 80051de:	439a      	bics	r2, r3
 80051e0:	6022      	str	r2, [r4, #0]
 80051e2:	0023      	movs	r3, r4
 80051e4:	2200      	movs	r2, #0
 80051e6:	3343      	adds	r3, #67	; 0x43
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	6863      	ldr	r3, [r4, #4]
 80051ec:	60a3      	str	r3, [r4, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	db03      	blt.n	80051fa <_printf_i+0x112>
 80051f2:	2204      	movs	r2, #4
 80051f4:	6821      	ldr	r1, [r4, #0]
 80051f6:	4391      	bics	r1, r2
 80051f8:	6021      	str	r1, [r4, #0]
 80051fa:	2d00      	cmp	r5, #0
 80051fc:	d102      	bne.n	8005204 <_printf_i+0x11c>
 80051fe:	9e04      	ldr	r6, [sp, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00c      	beq.n	800521e <_printf_i+0x136>
 8005204:	9e04      	ldr	r6, [sp, #16]
 8005206:	0028      	movs	r0, r5
 8005208:	0039      	movs	r1, r7
 800520a:	f7fb f813 	bl	8000234 <__aeabi_uidivmod>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	3e01      	subs	r6, #1
 8005212:	5c5b      	ldrb	r3, [r3, r1]
 8005214:	7033      	strb	r3, [r6, #0]
 8005216:	002b      	movs	r3, r5
 8005218:	0005      	movs	r5, r0
 800521a:	429f      	cmp	r7, r3
 800521c:	d9f3      	bls.n	8005206 <_printf_i+0x11e>
 800521e:	2f08      	cmp	r7, #8
 8005220:	d109      	bne.n	8005236 <_printf_i+0x14e>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	07db      	lsls	r3, r3, #31
 8005226:	d506      	bpl.n	8005236 <_printf_i+0x14e>
 8005228:	6863      	ldr	r3, [r4, #4]
 800522a:	6922      	ldr	r2, [r4, #16]
 800522c:	4293      	cmp	r3, r2
 800522e:	dc02      	bgt.n	8005236 <_printf_i+0x14e>
 8005230:	2330      	movs	r3, #48	; 0x30
 8005232:	3e01      	subs	r6, #1
 8005234:	7033      	strb	r3, [r6, #0]
 8005236:	9b04      	ldr	r3, [sp, #16]
 8005238:	1b9b      	subs	r3, r3, r6
 800523a:	6123      	str	r3, [r4, #16]
 800523c:	9b07      	ldr	r3, [sp, #28]
 800523e:	0021      	movs	r1, r4
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	9805      	ldr	r0, [sp, #20]
 8005244:	9b06      	ldr	r3, [sp, #24]
 8005246:	aa09      	add	r2, sp, #36	; 0x24
 8005248:	f7ff fede 	bl	8005008 <_printf_common>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d135      	bne.n	80052bc <_printf_i+0x1d4>
 8005250:	2001      	movs	r0, #1
 8005252:	4240      	negs	r0, r0
 8005254:	b00b      	add	sp, #44	; 0x2c
 8005256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005258:	2220      	movs	r2, #32
 800525a:	6809      	ldr	r1, [r1, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	6022      	str	r2, [r4, #0]
 8005260:	0022      	movs	r2, r4
 8005262:	2178      	movs	r1, #120	; 0x78
 8005264:	3245      	adds	r2, #69	; 0x45
 8005266:	7011      	strb	r1, [r2, #0]
 8005268:	4a27      	ldr	r2, [pc, #156]	; (8005308 <_printf_i+0x220>)
 800526a:	e7a7      	b.n	80051bc <_printf_i+0xd4>
 800526c:	0648      	lsls	r0, r1, #25
 800526e:	d5ac      	bpl.n	80051ca <_printf_i+0xe2>
 8005270:	b2ad      	uxth	r5, r5
 8005272:	e7aa      	b.n	80051ca <_printf_i+0xe2>
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	680d      	ldr	r5, [r1, #0]
 8005278:	1d10      	adds	r0, r2, #4
 800527a:	6949      	ldr	r1, [r1, #20]
 800527c:	6018      	str	r0, [r3, #0]
 800527e:	6813      	ldr	r3, [r2, #0]
 8005280:	062e      	lsls	r6, r5, #24
 8005282:	d501      	bpl.n	8005288 <_printf_i+0x1a0>
 8005284:	6019      	str	r1, [r3, #0]
 8005286:	e002      	b.n	800528e <_printf_i+0x1a6>
 8005288:	066d      	lsls	r5, r5, #25
 800528a:	d5fb      	bpl.n	8005284 <_printf_i+0x19c>
 800528c:	8019      	strh	r1, [r3, #0]
 800528e:	2300      	movs	r3, #0
 8005290:	9e04      	ldr	r6, [sp, #16]
 8005292:	6123      	str	r3, [r4, #16]
 8005294:	e7d2      	b.n	800523c <_printf_i+0x154>
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	1d11      	adds	r1, r2, #4
 800529a:	6019      	str	r1, [r3, #0]
 800529c:	6816      	ldr	r6, [r2, #0]
 800529e:	2100      	movs	r1, #0
 80052a0:	0030      	movs	r0, r6
 80052a2:	6862      	ldr	r2, [r4, #4]
 80052a4:	f000 f832 	bl	800530c <memchr>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d001      	beq.n	80052b0 <_printf_i+0x1c8>
 80052ac:	1b80      	subs	r0, r0, r6
 80052ae:	6060      	str	r0, [r4, #4]
 80052b0:	6863      	ldr	r3, [r4, #4]
 80052b2:	6123      	str	r3, [r4, #16]
 80052b4:	2300      	movs	r3, #0
 80052b6:	9a04      	ldr	r2, [sp, #16]
 80052b8:	7013      	strb	r3, [r2, #0]
 80052ba:	e7bf      	b.n	800523c <_printf_i+0x154>
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	0032      	movs	r2, r6
 80052c0:	9906      	ldr	r1, [sp, #24]
 80052c2:	9805      	ldr	r0, [sp, #20]
 80052c4:	9d07      	ldr	r5, [sp, #28]
 80052c6:	47a8      	blx	r5
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d0c1      	beq.n	8005250 <_printf_i+0x168>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	079b      	lsls	r3, r3, #30
 80052d0:	d415      	bmi.n	80052fe <_printf_i+0x216>
 80052d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d4:	68e0      	ldr	r0, [r4, #12]
 80052d6:	4298      	cmp	r0, r3
 80052d8:	dabc      	bge.n	8005254 <_printf_i+0x16c>
 80052da:	0018      	movs	r0, r3
 80052dc:	e7ba      	b.n	8005254 <_printf_i+0x16c>
 80052de:	0022      	movs	r2, r4
 80052e0:	2301      	movs	r3, #1
 80052e2:	9906      	ldr	r1, [sp, #24]
 80052e4:	9805      	ldr	r0, [sp, #20]
 80052e6:	9e07      	ldr	r6, [sp, #28]
 80052e8:	3219      	adds	r2, #25
 80052ea:	47b0      	blx	r6
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d0af      	beq.n	8005250 <_printf_i+0x168>
 80052f0:	3501      	adds	r5, #1
 80052f2:	68e3      	ldr	r3, [r4, #12]
 80052f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	42ab      	cmp	r3, r5
 80052fa:	dcf0      	bgt.n	80052de <_printf_i+0x1f6>
 80052fc:	e7e9      	b.n	80052d2 <_printf_i+0x1ea>
 80052fe:	2500      	movs	r5, #0
 8005300:	e7f7      	b.n	80052f2 <_printf_i+0x20a>
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	08005615 	.word	0x08005615
 8005308:	08005626 	.word	0x08005626

0800530c <memchr>:
 800530c:	b2c9      	uxtb	r1, r1
 800530e:	1882      	adds	r2, r0, r2
 8005310:	4290      	cmp	r0, r2
 8005312:	d101      	bne.n	8005318 <memchr+0xc>
 8005314:	2000      	movs	r0, #0
 8005316:	4770      	bx	lr
 8005318:	7803      	ldrb	r3, [r0, #0]
 800531a:	428b      	cmp	r3, r1
 800531c:	d0fb      	beq.n	8005316 <memchr+0xa>
 800531e:	3001      	adds	r0, #1
 8005320:	e7f6      	b.n	8005310 <memchr+0x4>

08005322 <memcpy>:
 8005322:	2300      	movs	r3, #0
 8005324:	b510      	push	{r4, lr}
 8005326:	429a      	cmp	r2, r3
 8005328:	d100      	bne.n	800532c <memcpy+0xa>
 800532a:	bd10      	pop	{r4, pc}
 800532c:	5ccc      	ldrb	r4, [r1, r3]
 800532e:	54c4      	strb	r4, [r0, r3]
 8005330:	3301      	adds	r3, #1
 8005332:	e7f8      	b.n	8005326 <memcpy+0x4>

08005334 <memmove>:
 8005334:	b510      	push	{r4, lr}
 8005336:	4288      	cmp	r0, r1
 8005338:	d902      	bls.n	8005340 <memmove+0xc>
 800533a:	188b      	adds	r3, r1, r2
 800533c:	4298      	cmp	r0, r3
 800533e:	d303      	bcc.n	8005348 <memmove+0x14>
 8005340:	2300      	movs	r3, #0
 8005342:	e007      	b.n	8005354 <memmove+0x20>
 8005344:	5c8b      	ldrb	r3, [r1, r2]
 8005346:	5483      	strb	r3, [r0, r2]
 8005348:	3a01      	subs	r2, #1
 800534a:	d2fb      	bcs.n	8005344 <memmove+0x10>
 800534c:	bd10      	pop	{r4, pc}
 800534e:	5ccc      	ldrb	r4, [r1, r3]
 8005350:	54c4      	strb	r4, [r0, r3]
 8005352:	3301      	adds	r3, #1
 8005354:	429a      	cmp	r2, r3
 8005356:	d1fa      	bne.n	800534e <memmove+0x1a>
 8005358:	e7f8      	b.n	800534c <memmove+0x18>
	...

0800535c <_free_r>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	0005      	movs	r5, r0
 8005360:	2900      	cmp	r1, #0
 8005362:	d010      	beq.n	8005386 <_free_r+0x2a>
 8005364:	1f0c      	subs	r4, r1, #4
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	da00      	bge.n	800536e <_free_r+0x12>
 800536c:	18e4      	adds	r4, r4, r3
 800536e:	0028      	movs	r0, r5
 8005370:	f000 f8d4 	bl	800551c <__malloc_lock>
 8005374:	4a1d      	ldr	r2, [pc, #116]	; (80053ec <_free_r+0x90>)
 8005376:	6813      	ldr	r3, [r2, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d105      	bne.n	8005388 <_free_r+0x2c>
 800537c:	6063      	str	r3, [r4, #4]
 800537e:	6014      	str	r4, [r2, #0]
 8005380:	0028      	movs	r0, r5
 8005382:	f000 f8d3 	bl	800552c <__malloc_unlock>
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	42a3      	cmp	r3, r4
 800538a:	d908      	bls.n	800539e <_free_r+0x42>
 800538c:	6821      	ldr	r1, [r4, #0]
 800538e:	1860      	adds	r0, r4, r1
 8005390:	4283      	cmp	r3, r0
 8005392:	d1f3      	bne.n	800537c <_free_r+0x20>
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	1841      	adds	r1, r0, r1
 800539a:	6021      	str	r1, [r4, #0]
 800539c:	e7ee      	b.n	800537c <_free_r+0x20>
 800539e:	001a      	movs	r2, r3
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <_free_r+0x4e>
 80053a6:	42a3      	cmp	r3, r4
 80053a8:	d9f9      	bls.n	800539e <_free_r+0x42>
 80053aa:	6811      	ldr	r1, [r2, #0]
 80053ac:	1850      	adds	r0, r2, r1
 80053ae:	42a0      	cmp	r0, r4
 80053b0:	d10b      	bne.n	80053ca <_free_r+0x6e>
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	1809      	adds	r1, r1, r0
 80053b6:	1850      	adds	r0, r2, r1
 80053b8:	6011      	str	r1, [r2, #0]
 80053ba:	4283      	cmp	r3, r0
 80053bc:	d1e0      	bne.n	8005380 <_free_r+0x24>
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	1841      	adds	r1, r0, r1
 80053c4:	6011      	str	r1, [r2, #0]
 80053c6:	6053      	str	r3, [r2, #4]
 80053c8:	e7da      	b.n	8005380 <_free_r+0x24>
 80053ca:	42a0      	cmp	r0, r4
 80053cc:	d902      	bls.n	80053d4 <_free_r+0x78>
 80053ce:	230c      	movs	r3, #12
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	e7d5      	b.n	8005380 <_free_r+0x24>
 80053d4:	6821      	ldr	r1, [r4, #0]
 80053d6:	1860      	adds	r0, r4, r1
 80053d8:	4283      	cmp	r3, r0
 80053da:	d103      	bne.n	80053e4 <_free_r+0x88>
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	1841      	adds	r1, r0, r1
 80053e2:	6021      	str	r1, [r4, #0]
 80053e4:	6063      	str	r3, [r4, #4]
 80053e6:	6054      	str	r4, [r2, #4]
 80053e8:	e7ca      	b.n	8005380 <_free_r+0x24>
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	20000094 	.word	0x20000094

080053f0 <_malloc_r>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	2303      	movs	r3, #3
 80053f4:	1ccd      	adds	r5, r1, #3
 80053f6:	439d      	bics	r5, r3
 80053f8:	3508      	adds	r5, #8
 80053fa:	0006      	movs	r6, r0
 80053fc:	2d0c      	cmp	r5, #12
 80053fe:	d21f      	bcs.n	8005440 <_malloc_r+0x50>
 8005400:	250c      	movs	r5, #12
 8005402:	42a9      	cmp	r1, r5
 8005404:	d81e      	bhi.n	8005444 <_malloc_r+0x54>
 8005406:	0030      	movs	r0, r6
 8005408:	f000 f888 	bl	800551c <__malloc_lock>
 800540c:	4925      	ldr	r1, [pc, #148]	; (80054a4 <_malloc_r+0xb4>)
 800540e:	680a      	ldr	r2, [r1, #0]
 8005410:	0014      	movs	r4, r2
 8005412:	2c00      	cmp	r4, #0
 8005414:	d11a      	bne.n	800544c <_malloc_r+0x5c>
 8005416:	4f24      	ldr	r7, [pc, #144]	; (80054a8 <_malloc_r+0xb8>)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d104      	bne.n	8005428 <_malloc_r+0x38>
 800541e:	0021      	movs	r1, r4
 8005420:	0030      	movs	r0, r6
 8005422:	f000 f869 	bl	80054f8 <_sbrk_r>
 8005426:	6038      	str	r0, [r7, #0]
 8005428:	0029      	movs	r1, r5
 800542a:	0030      	movs	r0, r6
 800542c:	f000 f864 	bl	80054f8 <_sbrk_r>
 8005430:	1c43      	adds	r3, r0, #1
 8005432:	d12b      	bne.n	800548c <_malloc_r+0x9c>
 8005434:	230c      	movs	r3, #12
 8005436:	0030      	movs	r0, r6
 8005438:	6033      	str	r3, [r6, #0]
 800543a:	f000 f877 	bl	800552c <__malloc_unlock>
 800543e:	e003      	b.n	8005448 <_malloc_r+0x58>
 8005440:	2d00      	cmp	r5, #0
 8005442:	dade      	bge.n	8005402 <_malloc_r+0x12>
 8005444:	230c      	movs	r3, #12
 8005446:	6033      	str	r3, [r6, #0]
 8005448:	2000      	movs	r0, #0
 800544a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	1b5b      	subs	r3, r3, r5
 8005450:	d419      	bmi.n	8005486 <_malloc_r+0x96>
 8005452:	2b0b      	cmp	r3, #11
 8005454:	d903      	bls.n	800545e <_malloc_r+0x6e>
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	18e4      	adds	r4, r4, r3
 800545a:	6025      	str	r5, [r4, #0]
 800545c:	e003      	b.n	8005466 <_malloc_r+0x76>
 800545e:	6863      	ldr	r3, [r4, #4]
 8005460:	42a2      	cmp	r2, r4
 8005462:	d10e      	bne.n	8005482 <_malloc_r+0x92>
 8005464:	600b      	str	r3, [r1, #0]
 8005466:	0030      	movs	r0, r6
 8005468:	f000 f860 	bl	800552c <__malloc_unlock>
 800546c:	0020      	movs	r0, r4
 800546e:	2207      	movs	r2, #7
 8005470:	300b      	adds	r0, #11
 8005472:	1d23      	adds	r3, r4, #4
 8005474:	4390      	bics	r0, r2
 8005476:	1ac2      	subs	r2, r0, r3
 8005478:	4298      	cmp	r0, r3
 800547a:	d0e6      	beq.n	800544a <_malloc_r+0x5a>
 800547c:	1a1b      	subs	r3, r3, r0
 800547e:	50a3      	str	r3, [r4, r2]
 8005480:	e7e3      	b.n	800544a <_malloc_r+0x5a>
 8005482:	6053      	str	r3, [r2, #4]
 8005484:	e7ef      	b.n	8005466 <_malloc_r+0x76>
 8005486:	0022      	movs	r2, r4
 8005488:	6864      	ldr	r4, [r4, #4]
 800548a:	e7c2      	b.n	8005412 <_malloc_r+0x22>
 800548c:	2303      	movs	r3, #3
 800548e:	1cc4      	adds	r4, r0, #3
 8005490:	439c      	bics	r4, r3
 8005492:	42a0      	cmp	r0, r4
 8005494:	d0e1      	beq.n	800545a <_malloc_r+0x6a>
 8005496:	1a21      	subs	r1, r4, r0
 8005498:	0030      	movs	r0, r6
 800549a:	f000 f82d 	bl	80054f8 <_sbrk_r>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	d1db      	bne.n	800545a <_malloc_r+0x6a>
 80054a2:	e7c7      	b.n	8005434 <_malloc_r+0x44>
 80054a4:	20000094 	.word	0x20000094
 80054a8:	20000098 	.word	0x20000098

080054ac <_realloc_r>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	0007      	movs	r7, r0
 80054b0:	000d      	movs	r5, r1
 80054b2:	0016      	movs	r6, r2
 80054b4:	2900      	cmp	r1, #0
 80054b6:	d105      	bne.n	80054c4 <_realloc_r+0x18>
 80054b8:	0011      	movs	r1, r2
 80054ba:	f7ff ff99 	bl	80053f0 <_malloc_r>
 80054be:	0004      	movs	r4, r0
 80054c0:	0020      	movs	r0, r4
 80054c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c4:	2a00      	cmp	r2, #0
 80054c6:	d103      	bne.n	80054d0 <_realloc_r+0x24>
 80054c8:	f7ff ff48 	bl	800535c <_free_r>
 80054cc:	0034      	movs	r4, r6
 80054ce:	e7f7      	b.n	80054c0 <_realloc_r+0x14>
 80054d0:	f000 f834 	bl	800553c <_malloc_usable_size_r>
 80054d4:	002c      	movs	r4, r5
 80054d6:	42b0      	cmp	r0, r6
 80054d8:	d2f2      	bcs.n	80054c0 <_realloc_r+0x14>
 80054da:	0031      	movs	r1, r6
 80054dc:	0038      	movs	r0, r7
 80054de:	f7ff ff87 	bl	80053f0 <_malloc_r>
 80054e2:	1e04      	subs	r4, r0, #0
 80054e4:	d0ec      	beq.n	80054c0 <_realloc_r+0x14>
 80054e6:	0029      	movs	r1, r5
 80054e8:	0032      	movs	r2, r6
 80054ea:	f7ff ff1a 	bl	8005322 <memcpy>
 80054ee:	0029      	movs	r1, r5
 80054f0:	0038      	movs	r0, r7
 80054f2:	f7ff ff33 	bl	800535c <_free_r>
 80054f6:	e7e3      	b.n	80054c0 <_realloc_r+0x14>

080054f8 <_sbrk_r>:
 80054f8:	2300      	movs	r3, #0
 80054fa:	b570      	push	{r4, r5, r6, lr}
 80054fc:	4d06      	ldr	r5, [pc, #24]	; (8005518 <_sbrk_r+0x20>)
 80054fe:	0004      	movs	r4, r0
 8005500:	0008      	movs	r0, r1
 8005502:	602b      	str	r3, [r5, #0]
 8005504:	f7fb fbb2 	bl	8000c6c <_sbrk>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d103      	bne.n	8005514 <_sbrk_r+0x1c>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d000      	beq.n	8005514 <_sbrk_r+0x1c>
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	bd70      	pop	{r4, r5, r6, pc}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	200001f0 	.word	0x200001f0

0800551c <__malloc_lock>:
 800551c:	b510      	push	{r4, lr}
 800551e:	4802      	ldr	r0, [pc, #8]	; (8005528 <__malloc_lock+0xc>)
 8005520:	f000 f814 	bl	800554c <__retarget_lock_acquire_recursive>
 8005524:	bd10      	pop	{r4, pc}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	200001f8 	.word	0x200001f8

0800552c <__malloc_unlock>:
 800552c:	b510      	push	{r4, lr}
 800552e:	4802      	ldr	r0, [pc, #8]	; (8005538 <__malloc_unlock+0xc>)
 8005530:	f000 f80d 	bl	800554e <__retarget_lock_release_recursive>
 8005534:	bd10      	pop	{r4, pc}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	200001f8 	.word	0x200001f8

0800553c <_malloc_usable_size_r>:
 800553c:	1f0b      	subs	r3, r1, #4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	1f18      	subs	r0, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	da01      	bge.n	800554a <_malloc_usable_size_r+0xe>
 8005546:	580b      	ldr	r3, [r1, r0]
 8005548:	18c0      	adds	r0, r0, r3
 800554a:	4770      	bx	lr

0800554c <__retarget_lock_acquire_recursive>:
 800554c:	4770      	bx	lr

0800554e <__retarget_lock_release_recursive>:
 800554e:	4770      	bx	lr

08005550 <_init>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr

0800555c <_fini>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr
