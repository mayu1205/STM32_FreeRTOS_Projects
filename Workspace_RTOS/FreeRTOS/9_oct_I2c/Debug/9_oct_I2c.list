
9_oct_I2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e8  080038e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038f0  080038f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003904  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003904  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f006  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e36  00000000  00000000  0002f03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00030e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  00031970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175f4  00000000  00000000  000323b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e71a  00000000  00000000  000499ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009537f  00000000  00000000  000580c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002724  00000000  00000000  000ed498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003844 	.word	0x08003844

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003844 	.word	0x08003844

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char TX_buffer[] = "M";
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	224d      	movs	r2, #77	; 0x4d
 8000626:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fa8a 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f83e 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 f92c 	bl	800088c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000634:	f000 f89c 	bl	8000770 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000638:	f000 f8da 	bl	80007f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, TX_buffer, 1, HAL_MAX_DELAY);
 800063c:	2301      	movs	r3, #1
 800063e:	425b      	negs	r3, r3
 8000640:	1d39      	adds	r1, r7, #4
 8000642:	4817      	ldr	r0, [pc, #92]	; (80006a0 <main+0x84>)
 8000644:	2201      	movs	r2, #1
 8000646:	f002 fa69 	bl	8002b1c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
 800064a:	2301      	movs	r3, #1
 800064c:	425b      	negs	r3, r3
 800064e:	4915      	ldr	r1, [pc, #84]	; (80006a4 <main+0x88>)
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <main+0x84>)
 8000652:	2203      	movs	r2, #3
 8000654:	f002 fa62 	bl	8002b1c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_Master_Transmit(&hi2c1, 0, TX_buffer, 1, HAL_MAX_DELAY);
 8000658:	1d3a      	adds	r2, r7, #4
 800065a:	4813      	ldr	r0, [pc, #76]	; (80006a8 <main+0x8c>)
 800065c:	2301      	movs	r3, #1
 800065e:	425b      	negs	r3, r3
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	2100      	movs	r1, #0
 8000666:	f000 fdf7 	bl	8001258 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 800066a:	2064      	movs	r0, #100	; 0x64
 800066c:	f000 faee 	bl	8000c4c <HAL_Delay>

	  HAL_I2C_Master_Receive(&hi2c1, 0, RX_buffer, 1, HAL_MAX_DELAY);
 8000670:	003a      	movs	r2, r7
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <main+0x8c>)
 8000674:	2301      	movs	r3, #1
 8000676:	425b      	negs	r3, r3
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2301      	movs	r3, #1
 800067c:	2100      	movs	r1, #0
 800067e:	f000 fef3 	bl	8001468 <HAL_I2C_Master_Receive>
	  HAL_Delay(100);
 8000682:	2064      	movs	r0, #100	; 0x64
 8000684:	f000 fae2 	bl	8000c4c <HAL_Delay>

	  HAL_UART_Transmit(&huart2, RX_buffer, 1, HAL_MAX_DELAY);
 8000688:	2301      	movs	r3, #1
 800068a:	425b      	negs	r3, r3
 800068c:	0039      	movs	r1, r7
 800068e:	4804      	ldr	r0, [pc, #16]	; (80006a0 <main+0x84>)
 8000690:	2201      	movs	r2, #1
 8000692:	f002 fa43 	bl	8002b1c <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000696:	2064      	movs	r0, #100	; 0x64
 8000698:	f000 fad8 	bl	8000c4c <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c1, 0, TX_buffer, 1, HAL_MAX_DELAY);
 800069c:	e7dc      	b.n	8000658 <main+0x3c>
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000074 	.word	0x20000074
 80006a4:	0800385c 	.word	0x0800385c
 80006a8:	20000028 	.word	0x20000028

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b0a1      	sub	sp, #132	; 0x84
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	2448      	movs	r4, #72	; 0x48
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	0018      	movs	r0, r3
 80006b8:	2338      	movs	r3, #56	; 0x38
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f003 f8b9 	bl	8003834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c2:	2338      	movs	r3, #56	; 0x38
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	0018      	movs	r0, r3
 80006c8:	2310      	movs	r3, #16
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f003 f8b1 	bl	8003834 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	0018      	movs	r0, r3
 80006d6:	2334      	movs	r3, #52	; 0x34
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f003 f8aa 	bl	8003834 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fafb 	bl	8001ce0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2202      	movs	r2, #2
 80006ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	0052      	lsls	r2, r2, #1
 80006f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2240      	movs	r2, #64	; 0x40
 8000702:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	193b      	adds	r3, r7, r4
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fb33 	bl	8001d78 <HAL_RCC_OscConfig>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000716:	f000 f909 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	2138      	movs	r1, #56	; 0x38
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2207      	movs	r2, #7
 8000720:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2100      	movs	r1, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fe37 	bl	80023ac <HAL_RCC_ClockConfig>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000742:	f000 f8f3 	bl	800092c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2222      	movs	r2, #34	; 0x22
 800074a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	0018      	movs	r0, r3
 800075c:	f001 ffd0 	bl	8002700 <HAL_RCCEx_PeriphCLKConfig>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000764:	f000 f8e2 	bl	800092c <Error_Handler>
  }
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b021      	add	sp, #132	; 0x84
 800076e:	bd90      	pop	{r4, r7, pc}

08000770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_I2C1_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_I2C1_Init+0x74>)
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <MX_I2C1_Init+0x7c>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000788:	2201      	movs	r2, #1
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 fcbd 	bl	800112c <HAL_I2C_Init>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007b6:	f000 f8b9 	bl	800092c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007bc:	2100      	movs	r1, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 f9f6 	bl	8001bb0 <HAL_I2CEx_ConfigAnalogFilter>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 f8b0 	bl	800092c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 fa39 	bl	8001c48 <HAL_I2CEx_ConfigDigitalFilter>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 f8a7 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000028 	.word	0x20000028
 80007e8:	40005400 	.word	0x40005400
 80007ec:	00303d5b 	.word	0x00303d5b

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_USART2_UART_Init+0x94>)
 80007f6:	4a24      	ldr	r2, [pc, #144]	; (8000888 <MX_USART2_UART_Init+0x98>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_USART2_UART_Init+0x94>)
 80007fc:	22e1      	movs	r2, #225	; 0xe1
 80007fe:	0252      	lsls	r2, r2, #9
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800083a:	0018      	movs	r0, r3
 800083c:	f002 f918 	bl	8002a70 <HAL_UART_Init>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 f872 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800084a:	2100      	movs	r1, #0
 800084c:	0018      	movs	r0, r3
 800084e:	f002 feed 	bl	800362c <HAL_UARTEx_SetTxFifoThreshold>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000856:	f000 f869 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800085c:	2100      	movs	r1, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f002 ff24 	bl	80036ac <HAL_UARTEx_SetRxFifoThreshold>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000868:	f000 f860 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800086e:	0018      	movs	r0, r3
 8000870:	f002 fea2 	bl	80035b8 <HAL_UARTEx_DisableFifoMode>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 f858 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	20000074 	.word	0x20000074
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	240c      	movs	r4, #12
 8000894:	193b      	adds	r3, r7, r4
 8000896:	0018      	movs	r0, r3
 8000898:	2314      	movs	r3, #20
 800089a:	001a      	movs	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	f002 ffc9 	bl	8003834 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008a8:	2104      	movs	r1, #4
 80008aa:	430a      	orrs	r2, r1
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b2:	2204      	movs	r2, #4
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008c0:	2120      	movs	r1, #32
 80008c2:	430a      	orrs	r2, r1
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ca:	2220      	movs	r2, #32
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008d8:	2101      	movs	r1, #1
 80008da:	430a      	orrs	r2, r1
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e2:	2201      	movs	r2, #1
 80008e4:	4013      	ands	r3, r2
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008ea:	23a0      	movs	r3, #160	; 0xa0
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2200      	movs	r2, #0
 80008f0:	2120      	movs	r1, #32
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 fbfc 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008f8:	0021      	movs	r1, r4
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2220      	movs	r2, #32
 80008fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2201      	movs	r2, #1
 8000904:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2202      	movs	r2, #2
 8000910:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000912:	187a      	adds	r2, r7, r1
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fa84 	bl	8000e28 <HAL_GPIO_Init>

}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b009      	add	sp, #36	; 0x24
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	40021000 	.word	0x40021000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_MspInit+0x4c>)
 8000940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_MspInit+0x4c>)
 8000944:	2101      	movs	r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	641a      	str	r2, [r3, #64]	; 0x40
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	2201      	movs	r2, #1
 8000950:	4013      	ands	r3, r2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_MspInit+0x4c>)
 8000958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_MspInit+0x4c>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0549      	lsls	r1, r1, #21
 8000960:	430a      	orrs	r2, r1
 8000962:	63da      	str	r2, [r3, #60]	; 0x3c
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_MspInit+0x4c>)
 8000966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	055b      	lsls	r3, r3, #21
 800096c:	4013      	ands	r3, r2
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000972:	23c0      	movs	r3, #192	; 0xc0
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	0018      	movs	r0, r3
 8000978:	f000 f98c 	bl	8000c94 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b08b      	sub	sp, #44	; 0x2c
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	2414      	movs	r4, #20
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2314      	movs	r3, #20
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f002 ff4a 	bl	8003834 <memset>
  if(hi2c->Instance==I2C1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <HAL_I2C_MspInit+0x90>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d131      	bne.n	8000a0e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <HAL_I2C_MspInit+0x94>)
 80009ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_I2C_MspInit+0x94>)
 80009b0:	2101      	movs	r1, #1
 80009b2:	430a      	orrs	r2, r1
 80009b4:	635a      	str	r2, [r3, #52]	; 0x34
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_I2C_MspInit+0x94>)
 80009b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ba:	2201      	movs	r2, #1
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	22c0      	movs	r2, #192	; 0xc0
 80009c6:	00d2      	lsls	r2, r2, #3
 80009c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ca:	0021      	movs	r1, r4
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2212      	movs	r2, #18
 80009d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2201      	movs	r2, #1
 80009d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2203      	movs	r2, #3
 80009dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2206      	movs	r2, #6
 80009e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	187a      	adds	r2, r7, r1
 80009e6:	23a0      	movs	r3, #160	; 0xa0
 80009e8:	05db      	lsls	r3, r3, #23
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f000 fa1b 	bl	8000e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_I2C_MspInit+0x94>)
 80009f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_I2C_MspInit+0x94>)
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	0389      	lsls	r1, r1, #14
 80009fc:	430a      	orrs	r2, r1
 80009fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_I2C_MspInit+0x94>)
 8000a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	039b      	lsls	r3, r3, #14
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b00b      	add	sp, #44	; 0x2c
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b08b      	sub	sp, #44	; 0x2c
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	2414      	movs	r4, #20
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	2314      	movs	r3, #20
 8000a30:	001a      	movs	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	f002 fefe 	bl	8003834 <memset>
  if(huart->Instance==USART2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <HAL_UART_MspInit+0x8c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d130      	bne.n	8000aa4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	0289      	lsls	r1, r1, #10
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	029b      	lsls	r3, r3, #10
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	430a      	orrs	r2, r1
 8000a68:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a76:	0021      	movs	r1, r4
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2202      	movs	r2, #2
 8000a82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2201      	movs	r2, #1
 8000a94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	187a      	adds	r2, r7, r1
 8000a98:	23a0      	movs	r3, #160	; 0xa0
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f9c2 	bl	8000e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b00b      	add	sp, #44	; 0x2c
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f89c 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af0:	f7ff fff7 	bl	8000ae2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af6:	490d      	ldr	r1, [pc, #52]	; (8000b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <LoopForever+0xe>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	; (8000b38 <LoopForever+0x16>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b1a:	f002 fe67 	bl	80037ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b1e:	f7ff fd7d 	bl	800061c <main>

08000b22 <LoopForever>:

LoopForever:
  b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   r0, =_estack
 8000b24:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b30:	080038f8 	.word	0x080038f8
  ldr r2, =_sbss
 8000b34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b38:	20000108 	.word	0x20000108

08000b3c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_COMP_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_Init+0x3c>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Init+0x3c>)
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0049      	lsls	r1, r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f000 f810 	bl	8000b80 <HAL_InitTick>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	e001      	b.n	8000b70 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fee4 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	230f      	movs	r3, #15
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <HAL_InitTick+0x88>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d02b      	beq.n	8000bf0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_InitTick+0x8c>)
 8000b9a:	681c      	ldr	r4, [r3, #0]
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <HAL_InitTick+0x88>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	23fa      	movs	r3, #250	; 0xfa
 8000ba4:	0098      	lsls	r0, r3, #2
 8000ba6:	f7ff faad 	bl	8000104 <__udivsi3>
 8000baa:	0003      	movs	r3, r0
 8000bac:	0019      	movs	r1, r3
 8000bae:	0020      	movs	r0, r4
 8000bb0:	f7ff faa8 	bl	8000104 <__udivsi3>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 f929 	bl	8000e0e <HAL_SYSTICK_Config>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d112      	bne.n	8000be6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d80a      	bhi.n	8000bdc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	425b      	negs	r3, r3
 8000bcc:	2200      	movs	r2, #0
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 f908 	bl	8000de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_InitTick+0x90>)
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	e00d      	b.n	8000bf8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	e008      	b.n	8000bf8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be6:	230f      	movs	r3, #15
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	e003      	b.n	8000bf8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	781b      	ldrb	r3, [r3, #0]
}
 8000bfe:	0018      	movs	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b005      	add	sp, #20
 8000c04:	bd90      	pop	{r4, r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	18d2      	adds	r2, r2, r3
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_IncTick+0x20>)
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000104 	.word	0x20000104

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	20000104 	.word	0x20000104

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff fff0 	bl	8000c38 <HAL_GetTick>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3301      	adds	r3, #1
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	189b      	adds	r3, r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	f7ff ffe0 	bl	8000c38 <HAL_GetTick>
 8000c78:	0002      	movs	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b004      	add	sp, #16
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000008 	.word	0x20000008

08000c94 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	0019      	movs	r1, r3
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	40010000 	.word	0x40010000
 8000cbc:	fffff9ff 	.word	0xfffff9ff

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8000cd4:	d828      	bhi.n	8000d28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd6:	4a2f      	ldr	r2, [pc, #188]	; (8000d94 <__NVIC_SetPriority+0xd4>)
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	33c0      	adds	r3, #192	; 0xc0
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	589b      	ldr	r3, [r3, r2]
 8000ce6:	1dfa      	adds	r2, r7, #7
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	0011      	movs	r1, r2
 8000cec:	2203      	movs	r2, #3
 8000cee:	400a      	ands	r2, r1
 8000cf0:	00d2      	lsls	r2, r2, #3
 8000cf2:	21ff      	movs	r1, #255	; 0xff
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	019b      	lsls	r3, r3, #6
 8000d02:	22ff      	movs	r2, #255	; 0xff
 8000d04:	401a      	ands	r2, r3
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	4003      	ands	r3, r0
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d14:	481f      	ldr	r0, [pc, #124]	; (8000d94 <__NVIC_SetPriority+0xd4>)
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	089b      	lsrs	r3, r3, #2
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	33c0      	adds	r3, #192	; 0xc0
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d26:	e031      	b.n	8000d8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <__NVIC_SetPriority+0xd8>)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0019      	movs	r1, r3
 8000d30:	230f      	movs	r3, #15
 8000d32:	400b      	ands	r3, r1
 8000d34:	3b08      	subs	r3, #8
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3306      	adds	r3, #6
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	18d3      	adds	r3, r2, r3
 8000d3e:	3304      	adds	r3, #4
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	1dfa      	adds	r2, r7, #7
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	0011      	movs	r1, r2
 8000d48:	2203      	movs	r2, #3
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	00d2      	lsls	r2, r2, #3
 8000d4e:	21ff      	movs	r1, #255	; 0xff
 8000d50:	4091      	lsls	r1, r2
 8000d52:	000a      	movs	r2, r1
 8000d54:	43d2      	mvns	r2, r2
 8000d56:	401a      	ands	r2, r3
 8000d58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	22ff      	movs	r2, #255	; 0xff
 8000d60:	401a      	ands	r2, r3
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	0018      	movs	r0, r3
 8000d68:	2303      	movs	r3, #3
 8000d6a:	4003      	ands	r3, r0
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <__NVIC_SetPriority+0xd8>)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	001c      	movs	r4, r3
 8000d78:	230f      	movs	r3, #15
 8000d7a:	4023      	ands	r3, r4
 8000d7c:	3b08      	subs	r3, #8
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	430a      	orrs	r2, r1
 8000d82:	3306      	adds	r3, #6
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	18c3      	adds	r3, r0, r3
 8000d88:	3304      	adds	r3, #4
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b003      	add	sp, #12
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	045b      	lsls	r3, r3, #17
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d301      	bcc.n	8000db4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db0:	2301      	movs	r3, #1
 8000db2:	e010      	b.n	8000dd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <SysTick_Config+0x44>)
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	3a01      	subs	r2, #1
 8000dba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	425b      	negs	r3, r3
 8000dc0:	2103      	movs	r1, #3
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff ff7c 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x44>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x44>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	210f      	movs	r1, #15
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	1c02      	adds	r2, r0, #0
 8000df4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b004      	add	sp, #16
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff ffbf 	bl	8000d9c <SysTick_Config>
 8000e1e:	0003      	movs	r3, r0
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	e147      	b.n	80010c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4091      	lsls	r1, r2
 8000e42:	000a      	movs	r2, r1
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d100      	bne.n	8000e50 <HAL_GPIO_Init+0x28>
 8000e4e:	e138      	b.n	80010c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2203      	movs	r2, #3
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d005      	beq.n	8000e68 <HAL_GPIO_Init+0x40>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2203      	movs	r2, #3
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d130      	bne.n	8000eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	409a      	lsls	r2, r3
 8000e76:	0013      	movs	r3, r2
 8000e78:	43da      	mvns	r2, r3
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	409a      	lsls	r2, r3
 8000e8a:	0013      	movs	r3, r2
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2203      	movs	r2, #3
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d017      	beq.n	8000f06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d123      	bne.n	8000f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	58d3      	ldr	r3, [r2, r3]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	2207      	movs	r2, #7
 8000f24:	4013      	ands	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2107      	movs	r1, #7
 8000f3e:	400b      	ands	r3, r1
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	08da      	lsrs	r2, r3, #3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3208      	adds	r2, #8
 8000f54:	0092      	lsls	r2, r2, #2
 8000f56:	6939      	ldr	r1, [r7, #16]
 8000f58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2203      	movs	r2, #3
 8000f78:	401a      	ands	r2, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	23c0      	movs	r3, #192	; 0xc0
 8000f94:	029b      	lsls	r3, r3, #10
 8000f96:	4013      	ands	r3, r2
 8000f98:	d100      	bne.n	8000f9c <HAL_GPIO_Init+0x174>
 8000f9a:	e092      	b.n	80010c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f9c:	4a50      	ldr	r2, [pc, #320]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3318      	adds	r3, #24
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	589b      	ldr	r3, [r3, r2]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2203      	movs	r2, #3
 8000fae:	4013      	ands	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	0013      	movs	r3, r2
 8000fb8:	43da      	mvns	r2, r3
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	23a0      	movs	r3, #160	; 0xa0
 8000fc4:	05db      	lsls	r3, r3, #23
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x1ca>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a45      	ldr	r2, [pc, #276]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x1c6>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a44      	ldr	r2, [pc, #272]	; (80010e8 <HAL_GPIO_Init+0x2c0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x1c2>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a43      	ldr	r2, [pc, #268]	; (80010ec <HAL_GPIO_Init+0x2c4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x1be>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x1cc>
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	e004      	b.n	8000ff4 <HAL_GPIO_Init+0x1cc>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_Init+0x1cc>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x1cc>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	00d2      	lsls	r2, r2, #3
 8000ffc:	4093      	lsls	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001004:	4936      	ldr	r1, [pc, #216]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3318      	adds	r3, #24
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43da      	mvns	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	035b      	lsls	r3, r3, #13
 800102a:	4013      	ands	r3, r2
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	039b      	lsls	r3, r3, #14
 8001054:	4013      	ands	r3, r2
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001066:	4a1e      	ldr	r2, [pc, #120]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8001068:	2384      	movs	r3, #132	; 0x84
 800106a:	58d3      	ldr	r3, [r2, r3]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43da      	mvns	r2, r3
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	029b      	lsls	r3, r3, #10
 8001080:	4013      	ands	r3, r2
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800108c:	4914      	ldr	r1, [pc, #80]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 800108e:	2284      	movs	r2, #132	; 0x84
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001094:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	58d3      	ldr	r3, [r2, r3]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43da      	mvns	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	025b      	lsls	r3, r3, #9
 80010ae:	4013      	ands	r3, r2
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ba:	4909      	ldr	r1, [pc, #36]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	1e13      	subs	r3, r2, #0
 80010d2:	d000      	beq.n	80010d6 <HAL_GPIO_Init+0x2ae>
 80010d4:	e6b0      	b.n	8000e38 <HAL_GPIO_Init+0x10>
  }
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b006      	add	sp, #24
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021800 	.word	0x40021800
 80010e4:	50000400 	.word	0x50000400
 80010e8:	50000800 	.word	0x50000800
 80010ec:	50000c00 	.word	0x50000c00

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	0008      	movs	r0, r1
 80010fa:	0011      	movs	r1, r2
 80010fc:	1cbb      	adds	r3, r7, #2
 80010fe:	1c02      	adds	r2, r0, #0
 8001100:	801a      	strh	r2, [r3, #0]
 8001102:	1c7b      	adds	r3, r7, #1
 8001104:	1c0a      	adds	r2, r1, #0
 8001106:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001108:	1c7b      	adds	r3, r7, #1
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001110:	1cbb      	adds	r3, r7, #2
 8001112:	881a      	ldrh	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800111a:	1cbb      	adds	r3, r7, #2
 800111c:	881a      	ldrh	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e082      	b.n	8001244 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2241      	movs	r2, #65	; 0x41
 8001142:	5c9b      	ldrb	r3, [r3, r2]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d107      	bne.n	800115a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2240      	movs	r2, #64	; 0x40
 800114e:	2100      	movs	r1, #0
 8001150:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff fc17 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2241      	movs	r2, #65	; 0x41
 800115e:	2124      	movs	r1, #36	; 0x24
 8001160:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	438a      	bics	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4934      	ldr	r1, [pc, #208]	; (800124c <HAL_I2C_Init+0x120>)
 800117c:	400a      	ands	r2, r1
 800117e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4931      	ldr	r1, [pc, #196]	; (8001250 <HAL_I2C_Init+0x124>)
 800118c:	400a      	ands	r2, r1
 800118e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d108      	bne.n	80011aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	0209      	lsls	r1, r1, #8
 80011a4:	430a      	orrs	r2, r1
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	e007      	b.n	80011ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2184      	movs	r1, #132	; 0x84
 80011b4:	0209      	lsls	r1, r1, #8
 80011b6:	430a      	orrs	r2, r1
 80011b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d104      	bne.n	80011cc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	491f      	ldr	r1, [pc, #124]	; (8001254 <HAL_I2C_Init+0x128>)
 80011d8:	430a      	orrs	r2, r1
 80011da:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	491a      	ldr	r1, [pc, #104]	; (8001250 <HAL_I2C_Init+0x124>)
 80011e8:	400a      	ands	r2, r1
 80011ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69d9      	ldr	r1, [r3, #28]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2241      	movs	r2, #65	; 0x41
 8001230:	2120      	movs	r1, #32
 8001232:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2242      	movs	r2, #66	; 0x42
 800123e:	2100      	movs	r1, #0
 8001240:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}
 800124c:	f0ffffff 	.word	0xf0ffffff
 8001250:	ffff7fff 	.word	0xffff7fff
 8001254:	02008000 	.word	0x02008000

08001258 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af02      	add	r7, sp, #8
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	0008      	movs	r0, r1
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	0019      	movs	r1, r3
 8001266:	230a      	movs	r3, #10
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	1c02      	adds	r2, r0, #0
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	2308      	movs	r3, #8
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	1c0a      	adds	r2, r1, #0
 8001274:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2241      	movs	r2, #65	; 0x41
 800127a:	5c9b      	ldrb	r3, [r3, r2]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b20      	cmp	r3, #32
 8001280:	d000      	beq.n	8001284 <HAL_I2C_Master_Transmit+0x2c>
 8001282:	e0e7      	b.n	8001454 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2240      	movs	r2, #64	; 0x40
 8001288:	5c9b      	ldrb	r3, [r3, r2]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_I2C_Master_Transmit+0x3a>
 800128e:	2302      	movs	r3, #2
 8001290:	e0e1      	b.n	8001456 <HAL_I2C_Master_Transmit+0x1fe>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2240      	movs	r2, #64	; 0x40
 8001296:	2101      	movs	r1, #1
 8001298:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800129a:	f7ff fccd 	bl	8000c38 <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	0219      	lsls	r1, r3, #8
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2319      	movs	r3, #25
 80012ae:	2201      	movs	r2, #1
 80012b0:	f000 fa04 	bl	80016bc <I2C_WaitOnFlagUntilTimeout>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e0cc      	b.n	8001456 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2241      	movs	r2, #65	; 0x41
 80012c0:	2121      	movs	r1, #33	; 0x21
 80012c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2242      	movs	r2, #66	; 0x42
 80012c8:	2110      	movs	r1, #16
 80012ca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2208      	movs	r2, #8
 80012dc:	18ba      	adds	r2, r7, r2
 80012de:	8812      	ldrh	r2, [r2, #0]
 80012e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	2bff      	cmp	r3, #255	; 0xff
 80012f0:	d911      	bls.n	8001316 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	22ff      	movs	r2, #255	; 0xff
 80012f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	045c      	lsls	r4, r3, #17
 8001302:	230a      	movs	r3, #10
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	8819      	ldrh	r1, [r3, #0]
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	4b55      	ldr	r3, [pc, #340]	; (8001460 <HAL_I2C_Master_Transmit+0x208>)
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	0023      	movs	r3, r4
 8001310:	f000 fc14 	bl	8001b3c <I2C_TransferConfig>
 8001314:	e075      	b.n	8001402 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131a:	b29a      	uxth	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001324:	b2da      	uxtb	r2, r3
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	049c      	lsls	r4, r3, #18
 800132a:	230a      	movs	r3, #10
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	8819      	ldrh	r1, [r3, #0]
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <HAL_I2C_Master_Transmit+0x208>)
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	0023      	movs	r3, r4
 8001338:	f000 fc00 	bl	8001b3c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800133c:	e061      	b.n	8001402 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	0018      	movs	r0, r3
 8001346:	f000 f9f8 	bl	800173a <I2C_WaitOnTXISFlagUntilTimeout>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d001      	beq.n	8001352 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e081      	b.n	8001456 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136c:	b29b      	uxth	r3, r3
 800136e:	3b01      	subs	r3, #1
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137a:	3b01      	subs	r3, #1
 800137c:	b29a      	uxth	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001386:	b29b      	uxth	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d03a      	beq.n	8001402 <HAL_I2C_Master_Transmit+0x1aa>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001390:	2b00      	cmp	r3, #0
 8001392:	d136      	bne.n	8001402 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	0013      	movs	r3, r2
 800139e:	2200      	movs	r2, #0
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	f000 f98b 	bl	80016bc <I2C_WaitOnFlagUntilTimeout>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d001      	beq.n	80013ae <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e053      	b.n	8001456 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	2bff      	cmp	r3, #255	; 0xff
 80013b6:	d911      	bls.n	80013dc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	22ff      	movs	r2, #255	; 0xff
 80013bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	045c      	lsls	r4, r3, #17
 80013c8:	230a      	movs	r3, #10
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	8819      	ldrh	r1, [r3, #0]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	2300      	movs	r3, #0
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	0023      	movs	r3, r4
 80013d6:	f000 fbb1 	bl	8001b3c <I2C_TransferConfig>
 80013da:	e012      	b.n	8001402 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	049c      	lsls	r4, r3, #18
 80013f0:	230a      	movs	r3, #10
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	8819      	ldrh	r1, [r3, #0]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	2300      	movs	r3, #0
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	0023      	movs	r3, r4
 80013fe:	f000 fb9d 	bl	8001b3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001406:	b29b      	uxth	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d198      	bne.n	800133e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	0018      	movs	r0, r3
 8001414:	f000 f9d0 	bl	80017b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001418:	1e03      	subs	r3, r0, #0
 800141a:	d001      	beq.n	8001420 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e01a      	b.n	8001456 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2220      	movs	r2, #32
 8001426:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	490c      	ldr	r1, [pc, #48]	; (8001464 <HAL_I2C_Master_Transmit+0x20c>)
 8001434:	400a      	ands	r2, r1
 8001436:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2241      	movs	r2, #65	; 0x41
 800143c:	2120      	movs	r1, #32
 800143e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2242      	movs	r2, #66	; 0x42
 8001444:	2100      	movs	r1, #0
 8001446:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	2100      	movs	r1, #0
 800144e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e000      	b.n	8001456 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001454:	2302      	movs	r3, #2
  }
}
 8001456:	0018      	movs	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	b007      	add	sp, #28
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	80002000 	.word	0x80002000
 8001464:	fe00e800 	.word	0xfe00e800

08001468 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af02      	add	r7, sp, #8
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	0008      	movs	r0, r1
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	0019      	movs	r1, r3
 8001476:	230a      	movs	r3, #10
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	1c02      	adds	r2, r0, #0
 800147c:	801a      	strh	r2, [r3, #0]
 800147e:	2308      	movs	r3, #8
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	1c0a      	adds	r2, r1, #0
 8001484:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2241      	movs	r2, #65	; 0x41
 800148a:	5c9b      	ldrb	r3, [r3, r2]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b20      	cmp	r3, #32
 8001490:	d000      	beq.n	8001494 <HAL_I2C_Master_Receive+0x2c>
 8001492:	e0e8      	b.n	8001666 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2240      	movs	r2, #64	; 0x40
 8001498:	5c9b      	ldrb	r3, [r3, r2]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <HAL_I2C_Master_Receive+0x3a>
 800149e:	2302      	movs	r3, #2
 80014a0:	e0e2      	b.n	8001668 <HAL_I2C_Master_Receive+0x200>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2240      	movs	r2, #64	; 0x40
 80014a6:	2101      	movs	r1, #1
 80014a8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014aa:	f7ff fbc5 	bl	8000c38 <HAL_GetTick>
 80014ae:	0003      	movs	r3, r0
 80014b0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	0219      	lsls	r1, r3, #8
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2319      	movs	r3, #25
 80014be:	2201      	movs	r2, #1
 80014c0:	f000 f8fc 	bl	80016bc <I2C_WaitOnFlagUntilTimeout>
 80014c4:	1e03      	subs	r3, r0, #0
 80014c6:	d001      	beq.n	80014cc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0cd      	b.n	8001668 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2241      	movs	r2, #65	; 0x41
 80014d0:	2122      	movs	r1, #34	; 0x22
 80014d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2242      	movs	r2, #66	; 0x42
 80014d8:	2110      	movs	r1, #16
 80014da:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2208      	movs	r2, #8
 80014ec:	18ba      	adds	r2, r7, r2
 80014ee:	8812      	ldrh	r2, [r2, #0]
 80014f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	2bff      	cmp	r3, #255	; 0xff
 8001500:	d911      	bls.n	8001526 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	22ff      	movs	r2, #255	; 0xff
 8001506:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150c:	b2da      	uxtb	r2, r3
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	045c      	lsls	r4, r3, #17
 8001512:	230a      	movs	r3, #10
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	8819      	ldrh	r1, [r3, #0]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	4b55      	ldr	r3, [pc, #340]	; (8001670 <HAL_I2C_Master_Receive+0x208>)
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	0023      	movs	r3, r4
 8001520:	f000 fb0c 	bl	8001b3c <I2C_TransferConfig>
 8001524:	e076      	b.n	8001614 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152a:	b29a      	uxth	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001534:	b2da      	uxtb	r2, r3
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	049c      	lsls	r4, r3, #18
 800153a:	230a      	movs	r3, #10
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	8819      	ldrh	r1, [r3, #0]
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	4b4b      	ldr	r3, [pc, #300]	; (8001670 <HAL_I2C_Master_Receive+0x208>)
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	0023      	movs	r3, r4
 8001548:	f000 faf8 	bl	8001b3c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800154c:	e062      	b.n	8001614 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	0018      	movs	r0, r3
 8001556:	f000 f96b 	bl	8001830 <I2C_WaitOnRXNEFlagUntilTimeout>
 800155a:	1e03      	subs	r3, r0, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e082      	b.n	8001668 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157e:	3b01      	subs	r3, #1
 8001580:	b29a      	uxth	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158a:	b29b      	uxth	r3, r3
 800158c:	3b01      	subs	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d03a      	beq.n	8001614 <HAL_I2C_Master_Receive+0x1ac>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d136      	bne.n	8001614 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	0013      	movs	r3, r2
 80015b0:	2200      	movs	r2, #0
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	f000 f882 	bl	80016bc <I2C_WaitOnFlagUntilTimeout>
 80015b8:	1e03      	subs	r3, r0, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e053      	b.n	8001668 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	2bff      	cmp	r3, #255	; 0xff
 80015c8:	d911      	bls.n	80015ee <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	045c      	lsls	r4, r3, #17
 80015da:	230a      	movs	r3, #10
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	8819      	ldrh	r1, [r3, #0]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	2300      	movs	r3, #0
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	0023      	movs	r3, r4
 80015e8:	f000 faa8 	bl	8001b3c <I2C_TransferConfig>
 80015ec:	e012      	b.n	8001614 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	049c      	lsls	r4, r3, #18
 8001602:	230a      	movs	r3, #10
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	8819      	ldrh	r1, [r3, #0]
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	2300      	movs	r3, #0
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	0023      	movs	r3, r4
 8001610:	f000 fa94 	bl	8001b3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001618:	b29b      	uxth	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d197      	bne.n	800154e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	0018      	movs	r0, r3
 8001626:	f000 f8c7 	bl	80017b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800162a:	1e03      	subs	r3, r0, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e01a      	b.n	8001668 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2220      	movs	r2, #32
 8001638:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	490b      	ldr	r1, [pc, #44]	; (8001674 <HAL_I2C_Master_Receive+0x20c>)
 8001646:	400a      	ands	r2, r1
 8001648:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2241      	movs	r2, #65	; 0x41
 800164e:	2120      	movs	r1, #32
 8001650:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2242      	movs	r2, #66	; 0x42
 8001656:	2100      	movs	r1, #0
 8001658:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2240      	movs	r2, #64	; 0x40
 800165e:	2100      	movs	r1, #0
 8001660:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001666:	2302      	movs	r3, #2
  }
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b007      	add	sp, #28
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	80002400 	.word	0x80002400
 8001674:	fe00e800 	.word	0xfe00e800

08001678 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2202      	movs	r2, #2
 8001688:	4013      	ands	r3, r2
 800168a:	2b02      	cmp	r3, #2
 800168c:	d103      	bne.n	8001696 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2200      	movs	r2, #0
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2201      	movs	r2, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d007      	beq.n	80016b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2101      	movs	r1, #1
 80016b0:	430a      	orrs	r2, r1
 80016b2:	619a      	str	r2, [r3, #24]
  }
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b002      	add	sp, #8
 80016ba:	bd80      	pop	{r7, pc}

080016bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016cc:	e021      	b.n	8001712 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	d01e      	beq.n	8001712 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d4:	f7ff fab0 	bl	8000c38 <HAL_GetTick>
 80016d8:	0002      	movs	r2, r0
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d302      	bcc.n	80016ea <I2C_WaitOnFlagUntilTimeout+0x2e>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d113      	bne.n	8001712 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	2220      	movs	r2, #32
 80016f0:	431a      	orrs	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2241      	movs	r2, #65	; 0x41
 80016fa:	2120      	movs	r1, #32
 80016fc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2242      	movs	r2, #66	; 0x42
 8001702:	2100      	movs	r1, #0
 8001704:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	2100      	movs	r1, #0
 800170c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	4013      	ands	r3, r2
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	425a      	negs	r2, r3
 8001722:	4153      	adcs	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	001a      	movs	r2, r3
 8001728:	1dfb      	adds	r3, r7, #7
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d0ce      	beq.n	80016ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}

0800173a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001746:	e02b      	b.n	80017a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	0018      	movs	r0, r3
 8001750:	f000 f8e8 	bl	8001924 <I2C_IsErrorOccurred>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d001      	beq.n	800175c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e029      	b.n	80017b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	3301      	adds	r3, #1
 8001760:	d01e      	beq.n	80017a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001762:	f7ff fa69 	bl	8000c38 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	429a      	cmp	r2, r3
 8001770:	d302      	bcc.n	8001778 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d113      	bne.n	80017a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	2220      	movs	r2, #32
 800177e:	431a      	orrs	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2241      	movs	r2, #65	; 0x41
 8001788:	2120      	movs	r1, #32
 800178a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2242      	movs	r2, #66	; 0x42
 8001790:	2100      	movs	r1, #0
 8001792:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2240      	movs	r2, #64	; 0x40
 8001798:	2100      	movs	r1, #0
 800179a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e007      	b.n	80017b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d1cc      	bne.n	8001748 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	0018      	movs	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b004      	add	sp, #16
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017c4:	e028      	b.n	8001818 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 f8a9 	bl	8001924 <I2C_IsErrorOccurred>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d001      	beq.n	80017da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e026      	b.n	8001828 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017da:	f7ff fa2d 	bl	8000c38 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d302      	bcc.n	80017f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d113      	bne.n	8001818 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	2220      	movs	r2, #32
 80017f6:	431a      	orrs	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2241      	movs	r2, #65	; 0x41
 8001800:	2120      	movs	r1, #32
 8001802:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2242      	movs	r2, #66	; 0x42
 8001808:	2100      	movs	r1, #0
 800180a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2240      	movs	r2, #64	; 0x40
 8001810:	2100      	movs	r1, #0
 8001812:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e007      	b.n	8001828 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2220      	movs	r2, #32
 8001820:	4013      	ands	r3, r2
 8001822:	2b20      	cmp	r3, #32
 8001824:	d1cf      	bne.n	80017c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}

08001830 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800183c:	e064      	b.n	8001908 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	0018      	movs	r0, r3
 8001846:	f000 f86d 	bl	8001924 <I2C_IsErrorOccurred>
 800184a:	1e03      	subs	r3, r0, #0
 800184c:	d001      	beq.n	8001852 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e062      	b.n	8001918 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2220      	movs	r2, #32
 800185a:	4013      	ands	r3, r2
 800185c:	2b20      	cmp	r3, #32
 800185e:	d138      	bne.n	80018d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2204      	movs	r2, #4
 8001868:	4013      	ands	r3, r2
 800186a:	2b04      	cmp	r3, #4
 800186c:	d105      	bne.n	800187a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e04e      	b.n	8001918 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2210      	movs	r2, #16
 8001882:	4013      	ands	r3, r2
 8001884:	2b10      	cmp	r3, #16
 8001886:	d107      	bne.n	8001898 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2210      	movs	r2, #16
 800188e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2204      	movs	r2, #4
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
 8001896:	e002      	b.n	800189e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2220      	movs	r2, #32
 80018a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	491b      	ldr	r1, [pc, #108]	; (8001920 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80018b2:	400a      	ands	r2, r1
 80018b4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2241      	movs	r2, #65	; 0x41
 80018ba:	2120      	movs	r1, #32
 80018bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2242      	movs	r2, #66	; 0x42
 80018c2:	2100      	movs	r1, #0
 80018c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2240      	movs	r2, #64	; 0x40
 80018ca:	2100      	movs	r1, #0
 80018cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e022      	b.n	8001918 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018d2:	f7ff f9b1 	bl	8000c38 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d302      	bcc.n	80018e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10f      	bne.n	8001908 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	2220      	movs	r2, #32
 80018ee:	431a      	orrs	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2241      	movs	r2, #65	; 0x41
 80018f8:	2120      	movs	r1, #32
 80018fa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2240      	movs	r2, #64	; 0x40
 8001900:	2100      	movs	r1, #0
 8001902:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e007      	b.n	8001918 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2204      	movs	r2, #4
 8001910:	4013      	ands	r3, r2
 8001912:	2b04      	cmp	r3, #4
 8001914:	d193      	bne.n	800183e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}
 8001920:	fe00e800 	.word	0xfe00e800

08001924 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b08b      	sub	sp, #44	; 0x2c
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001930:	2327      	movs	r3, #39	; 0x27
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2210      	movs	r2, #16
 800194c:	4013      	ands	r3, r2
 800194e:	d100      	bne.n	8001952 <I2C_IsErrorOccurred+0x2e>
 8001950:	e08e      	b.n	8001a70 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2210      	movs	r2, #16
 8001958:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800195a:	e06c      	b.n	8001a36 <I2C_IsErrorOccurred+0x112>
 800195c:	2427      	movs	r4, #39	; 0x27
 800195e:	193b      	adds	r3, r7, r4
 8001960:	193a      	adds	r2, r7, r4
 8001962:	7812      	ldrb	r2, [r2, #0]
 8001964:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3301      	adds	r3, #1
 800196a:	d064      	beq.n	8001a36 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800196c:	f7ff f964 	bl	8000c38 <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	429a      	cmp	r2, r3
 800197a:	d306      	bcc.n	800198a <I2C_IsErrorOccurred+0x66>
 800197c:	193b      	adds	r3, r7, r4
 800197e:	193a      	adds	r2, r7, r4
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d155      	bne.n	8001a36 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	01db      	lsls	r3, r3, #7
 8001994:	4013      	ands	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001998:	2013      	movs	r0, #19
 800199a:	183b      	adds	r3, r7, r0
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	2142      	movs	r1, #66	; 0x42
 80019a0:	5c52      	ldrb	r2, [r2, r1]
 80019a2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699a      	ldr	r2, [r3, #24]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	401a      	ands	r2, r3
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d137      	bne.n	8001a28 <I2C_IsErrorOccurred+0x104>
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	01db      	lsls	r3, r3, #7
 80019be:	429a      	cmp	r2, r3
 80019c0:	d032      	beq.n	8001a28 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 80019c2:	183b      	adds	r3, r7, r0
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d02e      	beq.n	8001a28 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	01c9      	lsls	r1, r1, #7
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80019dc:	f7ff f92c 	bl	8000c38 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019e4:	e020      	b.n	8001a28 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80019e6:	f7ff f927 	bl	8000c38 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2027      	movs	r0, #39	; 0x27
 80019f2:	183a      	adds	r2, r7, r0
 80019f4:	1839      	adds	r1, r7, r0
 80019f6:	7809      	ldrb	r1, [r1, #0]
 80019f8:	7011      	strb	r1, [r2, #0]
 80019fa:	2b19      	cmp	r3, #25
 80019fc:	d914      	bls.n	8001a28 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	2220      	movs	r2, #32
 8001a04:	431a      	orrs	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2241      	movs	r2, #65	; 0x41
 8001a0e:	2120      	movs	r1, #32
 8001a10:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2242      	movs	r2, #66	; 0x42
 8001a16:	2100      	movs	r1, #0
 8001a18:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2240      	movs	r2, #64	; 0x40
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8001a22:	183b      	adds	r3, r7, r0
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d1d7      	bne.n	80019e6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d004      	beq.n	8001a4e <I2C_IsErrorOccurred+0x12a>
 8001a44:	2327      	movs	r3, #39	; 0x27
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d086      	beq.n	800195c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a4e:	2327      	movs	r3, #39	; 0x27
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d103      	bne.n	8001a60 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	2204      	movs	r2, #4
 8001a64:	4313      	orrs	r3, r2
 8001a66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a68:	2327      	movs	r3, #39	; 0x27
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d00c      	beq.n	8001a9c <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	2201      	movs	r2, #1
 8001a86:	4313      	orrs	r3, r2
 8001a88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	0052      	lsls	r2, r2, #1
 8001a92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a94:	2327      	movs	r3, #39	; 0x27
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d00c      	beq.n	8001ac0 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	00d2      	lsls	r2, r2, #3
 8001ab6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ab8:	2327      	movs	r3, #39	; 0x27
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d00c      	beq.n	8001ae4 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	2202      	movs	r2, #2
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	0092      	lsls	r2, r2, #2
 8001ada:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001adc:	2327      	movs	r3, #39	; 0x27
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001ae4:	2327      	movs	r3, #39	; 0x27
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d01d      	beq.n	8001b2a <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff fdc1 	bl	8001678 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	490d      	ldr	r1, [pc, #52]	; (8001b38 <I2C_IsErrorOccurred+0x214>)
 8001b02:	400a      	ands	r2, r1
 8001b04:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2241      	movs	r2, #65	; 0x41
 8001b16:	2120      	movs	r1, #32
 8001b18:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2242      	movs	r2, #66	; 0x42
 8001b1e:	2100      	movs	r1, #0
 8001b20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2240      	movs	r2, #64	; 0x40
 8001b26:	2100      	movs	r1, #0
 8001b28:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001b2a:	2327      	movs	r3, #39	; 0x27
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b00b      	add	sp, #44	; 0x2c
 8001b36:	bd90      	pop	{r4, r7, pc}
 8001b38:	fe00e800 	.word	0xfe00e800

08001b3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	0008      	movs	r0, r1
 8001b46:	0011      	movs	r1, r2
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	240a      	movs	r4, #10
 8001b4c:	193b      	adds	r3, r7, r4
 8001b4e:	1c02      	adds	r2, r0, #0
 8001b50:	801a      	strh	r2, [r3, #0]
 8001b52:	2009      	movs	r0, #9
 8001b54:	183b      	adds	r3, r7, r0
 8001b56:	1c0a      	adds	r2, r1, #0
 8001b58:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	059b      	lsls	r3, r3, #22
 8001b60:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b62:	183b      	adds	r3, r7, r0
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	0419      	lsls	r1, r3, #16
 8001b68:	23ff      	movs	r3, #255	; 0xff
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b6e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b76:	4313      	orrs	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b86:	0d51      	lsrs	r1, r2, #21
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	00d2      	lsls	r2, r2, #3
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	4907      	ldr	r1, [pc, #28]	; (8001bac <I2C_TransferConfig+0x70>)
 8001b90:	430a      	orrs	r2, r1
 8001b92:	43d2      	mvns	r2, r2
 8001b94:	401a      	ands	r2, r3
 8001b96:	0011      	movs	r1, r2
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b007      	add	sp, #28
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	03ff63ff 	.word	0x03ff63ff

08001bb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2241      	movs	r2, #65	; 0x41
 8001bbe:	5c9b      	ldrb	r3, [r3, r2]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b20      	cmp	r3, #32
 8001bc4:	d138      	bne.n	8001c38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e032      	b.n	8001c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2240      	movs	r2, #64	; 0x40
 8001bd8:	2101      	movs	r1, #1
 8001bda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2241      	movs	r2, #65	; 0x41
 8001be0:	2124      	movs	r1, #36	; 0x24
 8001be2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2101      	movs	r1, #1
 8001bf0:	438a      	bics	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4911      	ldr	r1, [pc, #68]	; (8001c44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6819      	ldr	r1, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2101      	movs	r1, #1
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2241      	movs	r2, #65	; 0x41
 8001c28:	2120      	movs	r1, #32
 8001c2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2240      	movs	r2, #64	; 0x40
 8001c30:	2100      	movs	r1, #0
 8001c32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e000      	b.n	8001c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c38:	2302      	movs	r3, #2
  }
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	ffffefff 	.word	0xffffefff

08001c48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2241      	movs	r2, #65	; 0x41
 8001c56:	5c9b      	ldrb	r3, [r3, r2]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d139      	bne.n	8001cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2240      	movs	r2, #64	; 0x40
 8001c62:	5c9b      	ldrb	r3, [r3, r2]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e033      	b.n	8001cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2240      	movs	r2, #64	; 0x40
 8001c70:	2101      	movs	r1, #1
 8001c72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2241      	movs	r2, #65	; 0x41
 8001c78:	2124      	movs	r1, #36	; 0x24
 8001c7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2101      	movs	r1, #1
 8001c88:	438a      	bics	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2241      	movs	r2, #65	; 0x41
 8001cc2:	2120      	movs	r1, #32
 8001cc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2240      	movs	r2, #64	; 0x40
 8001cca:	2100      	movs	r1, #0
 8001ccc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
  }
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b004      	add	sp, #16
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	fffff0ff 	.word	0xfffff0ff

08001ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d11f      	bne.n	8001d44 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	0013      	movs	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	189b      	adds	r3, r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4912      	ldr	r1, [pc, #72]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7fe f9f6 	bl	8000104 <__udivsi3>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d1e:	e008      	b.n	8001d32 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e001      	b.n	8001d32 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e009      	b.n	8001d46 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d0ed      	beq.n	8001d20 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40007000 	.word	0x40007000
 8001d54:	fffff9ff 	.word	0xfffff9ff
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	000f4240 	.word	0x000f4240

08001d60 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	23e0      	movs	r3, #224	; 0xe0
 8001d6a:	01db      	lsls	r3, r3, #7
 8001d6c:	4013      	ands	r3, r2
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000

08001d78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e2fe      	b.n	8002388 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4013      	ands	r3, r2
 8001d92:	d100      	bne.n	8001d96 <HAL_RCC_OscConfig+0x1e>
 8001d94:	e07c      	b.n	8001e90 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d96:	4bc3      	ldr	r3, [pc, #780]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2238      	movs	r2, #56	; 0x38
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da0:	4bc0      	ldr	r3, [pc, #768]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2203      	movs	r2, #3
 8001da6:	4013      	ands	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d102      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3e>
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d10b      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	4bb9      	ldr	r3, [pc, #740]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	029b      	lsls	r3, r3, #10
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d062      	beq.n	8001e8e <HAL_RCC_OscConfig+0x116>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d15e      	bne.n	8001e8e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e2d9      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	025b      	lsls	r3, r3, #9
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_OscConfig+0x78>
 8001de0:	4bb0      	ldr	r3, [pc, #704]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4baf      	ldr	r3, [pc, #700]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001de6:	2180      	movs	r1, #128	; 0x80
 8001de8:	0249      	lsls	r1, r1, #9
 8001dea:	430a      	orrs	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e020      	b.n	8001e32 <HAL_RCC_OscConfig+0xba>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	23a0      	movs	r3, #160	; 0xa0
 8001df6:	02db      	lsls	r3, r3, #11
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d10e      	bne.n	8001e1a <HAL_RCC_OscConfig+0xa2>
 8001dfc:	4ba9      	ldr	r3, [pc, #676]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4ba8      	ldr	r3, [pc, #672]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	02c9      	lsls	r1, r1, #11
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	4ba6      	ldr	r3, [pc, #664]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4ba5      	ldr	r3, [pc, #660]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0249      	lsls	r1, r1, #9
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e00b      	b.n	8001e32 <HAL_RCC_OscConfig+0xba>
 8001e1a:	4ba2      	ldr	r3, [pc, #648]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4ba1      	ldr	r3, [pc, #644]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e20:	49a1      	ldr	r1, [pc, #644]	; (80020a8 <HAL_RCC_OscConfig+0x330>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	4b9f      	ldr	r3, [pc, #636]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b9e      	ldr	r3, [pc, #632]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e2c:	499f      	ldr	r1, [pc, #636]	; (80020ac <HAL_RCC_OscConfig+0x334>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d014      	beq.n	8001e64 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fefd 	bl	8000c38 <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7fe fef8 	bl	8000c38 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e298      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e56:	4b93      	ldr	r3, [pc, #588]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	029b      	lsls	r3, r3, #10
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xcc>
 8001e62:	e015      	b.n	8001e90 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe fee8 	bl	8000c38 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6e:	f7fe fee3 	bl	8000c38 <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b64      	cmp	r3, #100	; 0x64
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e283      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e80:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	029b      	lsls	r3, r3, #10
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0xf6>
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d100      	bne.n	8001e9c <HAL_RCC_OscConfig+0x124>
 8001e9a:	e099      	b.n	8001fd0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9c:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2238      	movs	r2, #56	; 0x38
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea6:	4b7f      	ldr	r3, [pc, #508]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2203      	movs	r2, #3
 8001eac:	4013      	ands	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0x144>
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d002      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d135      	bne.n	8001f2e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec2:	4b78      	ldr	r3, [pc, #480]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d005      	beq.n	8001eda <HAL_RCC_OscConfig+0x162>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e256      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a74      	ldr	r2, [pc, #464]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	021a      	lsls	r2, r3, #8
 8001eea:	4b6e      	ldr	r3, [pc, #440]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	430a      	orrs	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d112      	bne.n	8001f1c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ef6:	4b6b      	ldr	r3, [pc, #428]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a6e      	ldr	r2, [pc, #440]	; (80020b4 <HAL_RCC_OscConfig+0x33c>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f0a:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	0adb      	lsrs	r3, r3, #11
 8001f10:	2207      	movs	r2, #7
 8001f12:	4013      	ands	r3, r2
 8001f14:	4a68      	ldr	r2, [pc, #416]	; (80020b8 <HAL_RCC_OscConfig+0x340>)
 8001f16:	40da      	lsrs	r2, r3
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x344>)
 8001f1a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f1c:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x348>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7fe fe2d 	bl	8000b80 <HAL_InitTick>
 8001f26:	1e03      	subs	r3, r0, #0
 8001f28:	d051      	beq.n	8001fce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e22c      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d030      	beq.n	8001f98 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f36:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a5e      	ldr	r2, [pc, #376]	; (80020b4 <HAL_RCC_OscConfig+0x33c>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f4a:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b55      	ldr	r3, [pc, #340]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	0049      	lsls	r1, r1, #1
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe fe6e 	bl	8000c38 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f62:	f7fe fe69 	bl	8000c38 <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e209      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b48      	ldr	r3, [pc, #288]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a4a      	ldr	r2, [pc, #296]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	021a      	lsls	r2, r3, #8
 8001f90:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	e01b      	b.n	8001fd0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f98:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	4949      	ldr	r1, [pc, #292]	; (80020c4 <HAL_RCC_OscConfig+0x34c>)
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fe48 	bl	8000c38 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fae:	f7fe fe43 	bl	8000c38 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1e3      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc0:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x236>
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d047      	beq.n	800206a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2238      	movs	r2, #56	; 0x38
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b18      	cmp	r3, #24
 8001fe4:	d10a      	bne.n	8001ffc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fea:	2202      	movs	r2, #2
 8001fec:	4013      	ands	r3, r2
 8001fee:	d03c      	beq.n	800206a <HAL_RCC_OscConfig+0x2f2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d138      	bne.n	800206a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e1c5      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d019      	beq.n	8002038 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8002006:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002008:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 800200a:	2101      	movs	r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe fe12 	bl	8000c38 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201a:	f7fe fe0d 	bl	8000c38 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1ad      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 800202e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d0f1      	beq.n	800201a <HAL_RCC_OscConfig+0x2a2>
 8002036:	e018      	b.n	800206a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 800203a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 800203e:	2101      	movs	r1, #1
 8002040:	438a      	bics	r2, r1
 8002042:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe fdf8 	bl	8000c38 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204e:	f7fe fdf3 	bl	8000c38 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e193      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8002062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d1f1      	bne.n	800204e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d100      	bne.n	8002076 <HAL_RCC_OscConfig+0x2fe>
 8002074:	e0c6      	b.n	8002204 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	231f      	movs	r3, #31
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2238      	movs	r2, #56	; 0x38
 8002084:	4013      	ands	r3, r2
 8002086:	2b20      	cmp	r3, #32
 8002088:	d11e      	bne.n	80020c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2202      	movs	r2, #2
 8002090:	4013      	ands	r3, r2
 8002092:	d100      	bne.n	8002096 <HAL_RCC_OscConfig+0x31e>
 8002094:	e0b6      	b.n	8002204 <HAL_RCC_OscConfig+0x48c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d000      	beq.n	80020a0 <HAL_RCC_OscConfig+0x328>
 800209e:	e0b1      	b.n	8002204 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e171      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
 80020a4:	40021000 	.word	0x40021000
 80020a8:	fffeffff 	.word	0xfffeffff
 80020ac:	fffbffff 	.word	0xfffbffff
 80020b0:	ffff80ff 	.word	0xffff80ff
 80020b4:	ffffc7ff 	.word	0xffffc7ff
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000004 	.word	0x20000004
 80020c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020c8:	4bb1      	ldr	r3, [pc, #708]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80020ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	055b      	lsls	r3, r3, #21
 80020d0:	4013      	ands	r3, r2
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_OscConfig+0x360>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x362>
 80020d8:	2300      	movs	r3, #0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d011      	beq.n	8002102 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	4bac      	ldr	r3, [pc, #688]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80020e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020e2:	4bab      	ldr	r3, [pc, #684]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0549      	lsls	r1, r1, #21
 80020e8:	430a      	orrs	r2, r1
 80020ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80020ec:	4ba8      	ldr	r3, [pc, #672]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80020ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	055b      	lsls	r3, r3, #21
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80020fa:	231f      	movs	r3, #31
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002102:	4ba4      	ldr	r3, [pc, #656]	; (8002394 <HAL_RCC_OscConfig+0x61c>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d11a      	bne.n	8002144 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800210e:	4ba1      	ldr	r3, [pc, #644]	; (8002394 <HAL_RCC_OscConfig+0x61c>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4ba0      	ldr	r3, [pc, #640]	; (8002394 <HAL_RCC_OscConfig+0x61c>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	0049      	lsls	r1, r1, #1
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800211c:	f7fe fd8c 	bl	8000c38 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7fe fd87 	bl	8000c38 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e127      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002138:	4b96      	ldr	r3, [pc, #600]	; (8002394 <HAL_RCC_OscConfig+0x61c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4013      	ands	r3, r2
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x3e2>
 800214c:	4b90      	ldr	r3, [pc, #576]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 800214e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002150:	4b8f      	ldr	r3, [pc, #572]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002152:	2101      	movs	r1, #1
 8002154:	430a      	orrs	r2, r1
 8002156:	65da      	str	r2, [r3, #92]	; 0x5c
 8002158:	e01c      	b.n	8002194 <HAL_RCC_OscConfig+0x41c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b05      	cmp	r3, #5
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x404>
 8002162:	4b8b      	ldr	r3, [pc, #556]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002164:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002166:	4b8a      	ldr	r3, [pc, #552]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002168:	2104      	movs	r1, #4
 800216a:	430a      	orrs	r2, r1
 800216c:	65da      	str	r2, [r3, #92]	; 0x5c
 800216e:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002172:	4b87      	ldr	r3, [pc, #540]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002174:	2101      	movs	r1, #1
 8002176:	430a      	orrs	r2, r1
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0x41c>
 800217c:	4b84      	ldr	r3, [pc, #528]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 800217e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002180:	4b83      	ldr	r3, [pc, #524]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002182:	2101      	movs	r1, #1
 8002184:	438a      	bics	r2, r1
 8002186:	65da      	str	r2, [r3, #92]	; 0x5c
 8002188:	4b81      	ldr	r3, [pc, #516]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 800218a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800218c:	4b80      	ldr	r3, [pc, #512]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 800218e:	2104      	movs	r1, #4
 8002190:	438a      	bics	r2, r1
 8002192:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d014      	beq.n	80021c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe fd4c 	bl	8000c38 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a4:	e009      	b.n	80021ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7fe fd47 	bl	8000c38 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a79      	ldr	r2, [pc, #484]	; (8002398 <HAL_RCC_OscConfig+0x620>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0e6      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ba:	4b75      	ldr	r3, [pc, #468]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	2202      	movs	r2, #2
 80021c0:	4013      	ands	r3, r2
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x42e>
 80021c4:	e013      	b.n	80021ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7fe fd37 	bl	8000c38 <HAL_GetTick>
 80021ca:	0003      	movs	r3, r0
 80021cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ce:	e009      	b.n	80021e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe fd32 	bl	8000c38 <HAL_GetTick>
 80021d4:	0002      	movs	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	4a6f      	ldr	r2, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x620>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0d1      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e4:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	2202      	movs	r2, #2
 80021ea:	4013      	ands	r3, r2
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021ee:	231f      	movs	r3, #31
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80021fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021fc:	4b64      	ldr	r3, [pc, #400]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80021fe:	4967      	ldr	r1, [pc, #412]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002200:	400a      	ands	r2, r1
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d100      	bne.n	800220e <HAL_RCC_OscConfig+0x496>
 800220c:	e0bb      	b.n	8002386 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800220e:	4b60      	ldr	r3, [pc, #384]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2238      	movs	r2, #56	; 0x38
 8002214:	4013      	ands	r3, r2
 8002216:	2b10      	cmp	r3, #16
 8002218:	d100      	bne.n	800221c <HAL_RCC_OscConfig+0x4a4>
 800221a:	e07b      	b.n	8002314 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d156      	bne.n	80022d2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002224:	4b5a      	ldr	r3, [pc, #360]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b59      	ldr	r3, [pc, #356]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 800222a:	495d      	ldr	r1, [pc, #372]	; (80023a0 <HAL_RCC_OscConfig+0x628>)
 800222c:	400a      	ands	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fd02 	bl	8000c38 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7fe fcfd 	bl	8000c38 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e09d      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224c:	4b50      	ldr	r3, [pc, #320]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	049b      	lsls	r3, r3, #18
 8002254:	4013      	ands	r3, r2
 8002256:	d1f0      	bne.n	800223a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002258:	4b4d      	ldr	r3, [pc, #308]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <HAL_RCC_OscConfig+0x62c>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002284:	431a      	orrs	r2, r3
 8002286:	4b42      	ldr	r3, [pc, #264]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002288:	430a      	orrs	r2, r1
 800228a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228c:	4b40      	ldr	r3, [pc, #256]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b3f      	ldr	r3, [pc, #252]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	0449      	lsls	r1, r1, #17
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800229a:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	4b3c      	ldr	r3, [pc, #240]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0549      	lsls	r1, r1, #21
 80022a4:	430a      	orrs	r2, r1
 80022a6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fcc6 	bl	8000c38 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe fcc1 	bl	8000c38 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e061      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	049b      	lsls	r3, r3, #18
 80022cc:	4013      	ands	r3, r2
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x53a>
 80022d0:	e059      	b.n	8002386 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80022d8:	4931      	ldr	r1, [pc, #196]	; (80023a0 <HAL_RCC_OscConfig+0x628>)
 80022da:	400a      	ands	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022de:	f7fe fcab 	bl	8000c38 <HAL_GetTick>
 80022e2:	0003      	movs	r3, r0
 80022e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe fca6 	bl	8000c38 <HAL_GetTick>
 80022ec:	0002      	movs	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e046      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fa:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	049b      	lsls	r3, r3, #18
 8002302:	4013      	ands	r3, r2
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 800230c:	4926      	ldr	r1, [pc, #152]	; (80023a8 <HAL_RCC_OscConfig+0x630>)
 800230e:	400a      	ands	r2, r1
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	e038      	b.n	8002386 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e033      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_RCC_OscConfig+0x618>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2203      	movs	r2, #3
 800232a:	401a      	ands	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	429a      	cmp	r2, r3
 8002332:	d126      	bne.n	8002382 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2270      	movs	r2, #112	; 0x70
 8002338:	401a      	ands	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d11f      	bne.n	8002382 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	23fe      	movs	r3, #254	; 0xfe
 8002346:	01db      	lsls	r3, r3, #7
 8002348:	401a      	ands	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d116      	bne.n	8002382 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	23f8      	movs	r3, #248	; 0xf8
 8002358:	039b      	lsls	r3, r3, #14
 800235a:	401a      	ands	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d10e      	bne.n	8002382 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	23e0      	movs	r3, #224	; 0xe0
 8002368:	051b      	lsls	r3, r3, #20
 800236a:	401a      	ands	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	0f5b      	lsrs	r3, r3, #29
 8002378:	075a      	lsls	r2, r3, #29
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b008      	add	sp, #32
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	40007000 	.word	0x40007000
 8002398:	00001388 	.word	0x00001388
 800239c:	efffffff 	.word	0xefffffff
 80023a0:	feffffff 	.word	0xfeffffff
 80023a4:	11c1808c 	.word	0x11c1808c
 80023a8:	eefefffc 	.word	0xeefefffc

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0e9      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2207      	movs	r2, #7
 80023c6:	4013      	ands	r3, r2
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d91e      	bls.n	800240c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2207      	movs	r2, #7
 80023d4:	4393      	bics	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	4b70      	ldr	r3, [pc, #448]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023e0:	f7fe fc2a 	bl	8000c38 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023e8:	e009      	b.n	80023fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ea:	f7fe fc25 	bl	8000c38 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	4a6a      	ldr	r2, [pc, #424]	; (80025a0 <HAL_RCC_ClockConfig+0x1f4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e0ca      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2207      	movs	r2, #7
 8002404:	4013      	ands	r3, r2
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d1ee      	bne.n	80023ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2202      	movs	r2, #2
 8002412:	4013      	ands	r3, r2
 8002414:	d015      	beq.n	8002442 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2204      	movs	r2, #4
 800241c:	4013      	ands	r3, r2
 800241e:	d006      	beq.n	800242e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002420:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002426:	21e0      	movs	r1, #224	; 0xe0
 8002428:	01c9      	lsls	r1, r1, #7
 800242a:	430a      	orrs	r2, r1
 800242c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242e:	4b5d      	ldr	r3, [pc, #372]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4a5d      	ldr	r2, [pc, #372]	; (80025a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002434:	4013      	ands	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2201      	movs	r2, #1
 8002448:	4013      	ands	r3, r2
 800244a:	d057      	beq.n	80024fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002454:	4b53      	ldr	r3, [pc, #332]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	029b      	lsls	r3, r3, #10
 800245c:	4013      	ands	r3, r2
 800245e:	d12b      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e097      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d107      	bne.n	800247c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246c:	4b4d      	ldr	r3, [pc, #308]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	049b      	lsls	r3, r3, #18
 8002474:	4013      	ands	r3, r2
 8002476:	d11f      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e08b      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002484:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4013      	ands	r3, r2
 800248e:	d113      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e07f      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d106      	bne.n	80024aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249c:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 800249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a0:	2202      	movs	r2, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	d108      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e074      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024aa:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2202      	movs	r2, #2
 80024b0:	4013      	ands	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e06d      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024b8:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2207      	movs	r2, #7
 80024be:	4393      	bics	r3, r2
 80024c0:	0019      	movs	r1, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 80024c8:	430a      	orrs	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024cc:	f7fe fbb4 	bl	8000c38 <HAL_GetTick>
 80024d0:	0003      	movs	r3, r0
 80024d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d4:	e009      	b.n	80024ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d6:	f7fe fbaf 	bl	8000c38 <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	4a2f      	ldr	r2, [pc, #188]	; (80025a0 <HAL_RCC_ClockConfig+0x1f4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e054      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2238      	movs	r2, #56	; 0x38
 80024f0:	401a      	ands	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1ec      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2207      	movs	r2, #7
 8002502:	4013      	ands	r3, r2
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d21e      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2207      	movs	r2, #7
 8002510:	4393      	bics	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800251c:	f7fe fb8c 	bl	8000c38 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002524:	e009      	b.n	800253a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002526:	f7fe fb87 	bl	8000c38 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e02c      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2207      	movs	r2, #7
 8002540:	4013      	ands	r3, r2
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d1ee      	bne.n	8002526 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2204      	movs	r2, #4
 800254e:	4013      	ands	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4a15      	ldr	r2, [pc, #84]	; (80025ac <HAL_RCC_ClockConfig+0x200>)
 8002558:	4013      	ands	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002562:	430a      	orrs	r2, r1
 8002564:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002566:	f000 f829 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800256a:	0001      	movs	r1, r0
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	220f      	movs	r2, #15
 8002574:	401a      	ands	r2, r3
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <HAL_RCC_ClockConfig+0x204>)
 8002578:	0092      	lsls	r2, r2, #2
 800257a:	58d3      	ldr	r3, [r2, r3]
 800257c:	221f      	movs	r2, #31
 800257e:	4013      	ands	r3, r2
 8002580:	000a      	movs	r2, r1
 8002582:	40da      	lsrs	r2, r3
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_ClockConfig+0x208>)
 8002586:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_ClockConfig+0x20c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0018      	movs	r0, r3
 800258e:	f7fe faf7 	bl	8000b80 <HAL_InitTick>
 8002592:	0003      	movs	r3, r0
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40022000 	.word	0x40022000
 80025a0:	00001388 	.word	0x00001388
 80025a4:	40021000 	.word	0x40021000
 80025a8:	fffff0ff 	.word	0xfffff0ff
 80025ac:	ffff8fff 	.word	0xffff8fff
 80025b0:	08003860 	.word	0x08003860
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20000004 	.word	0x20000004

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c2:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2238      	movs	r2, #56	; 0x38
 80025c8:	4013      	ands	r3, r2
 80025ca:	d10f      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0adb      	lsrs	r3, r3, #11
 80025d2:	2207      	movs	r2, #7
 80025d4:	4013      	ands	r3, r2
 80025d6:	2201      	movs	r2, #1
 80025d8:	409a      	lsls	r2, r3
 80025da:	0013      	movs	r3, r2
 80025dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025de:	6839      	ldr	r1, [r7, #0]
 80025e0:	4835      	ldr	r0, [pc, #212]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025e2:	f7fd fd8f 	bl	8000104 <__udivsi3>
 80025e6:	0003      	movs	r3, r0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	e05d      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ec:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2238      	movs	r2, #56	; 0x38
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d102      	bne.n	80025fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f8:	4b30      	ldr	r3, [pc, #192]	; (80026bc <HAL_RCC_GetSysClockFreq+0x100>)
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	e054      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2238      	movs	r2, #56	; 0x38
 8002604:	4013      	ands	r3, r2
 8002606:	2b10      	cmp	r3, #16
 8002608:	d138      	bne.n	800267c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800260a:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2203      	movs	r2, #3
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	2207      	movs	r2, #7
 800261c:	4013      	ands	r3, r2
 800261e:	3301      	adds	r3, #1
 8002620:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d10d      	bne.n	8002644 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	4824      	ldr	r0, [pc, #144]	; (80026bc <HAL_RCC_GetSysClockFreq+0x100>)
 800262c:	f7fd fd6a 	bl	8000104 <__udivsi3>
 8002630:	0003      	movs	r3, r0
 8002632:	0019      	movs	r1, r3
 8002634:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	227f      	movs	r2, #127	; 0x7f
 800263c:	4013      	ands	r3, r2
 800263e:	434b      	muls	r3, r1
 8002640:	617b      	str	r3, [r7, #20]
        break;
 8002642:	e00d      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	481c      	ldr	r0, [pc, #112]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002648:	f7fd fd5c 	bl	8000104 <__udivsi3>
 800264c:	0003      	movs	r3, r0
 800264e:	0019      	movs	r1, r3
 8002650:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	227f      	movs	r2, #127	; 0x7f
 8002658:	4013      	ands	r3, r2
 800265a:	434b      	muls	r3, r1
 800265c:	617b      	str	r3, [r7, #20]
        break;
 800265e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002660:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0f5b      	lsrs	r3, r3, #29
 8002666:	2207      	movs	r2, #7
 8002668:	4013      	ands	r3, r2
 800266a:	3301      	adds	r3, #1
 800266c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	6978      	ldr	r0, [r7, #20]
 8002672:	f7fd fd47 	bl	8000104 <__udivsi3>
 8002676:	0003      	movs	r3, r0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	e015      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2238      	movs	r2, #56	; 0x38
 8002682:	4013      	ands	r3, r2
 8002684:	2b20      	cmp	r3, #32
 8002686:	d103      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2238      	movs	r2, #56	; 0x38
 8002696:	4013      	ands	r3, r2
 8002698:	2b18      	cmp	r3, #24
 800269a:	d103      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800269c:	23fa      	movs	r3, #250	; 0xfa
 800269e:	01db      	lsls	r3, r3, #7
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	e001      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026a8:	693b      	ldr	r3, [r7, #16]
}
 80026aa:	0018      	movs	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b006      	add	sp, #24
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	40021000 	.word	0x40021000
 80026b8:	00f42400 	.word	0x00f42400
 80026bc:	007a1200 	.word	0x007a1200

080026c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c4:	4b02      	ldr	r3, [pc, #8]	; (80026d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	20000000 	.word	0x20000000

080026d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d4:	b5b0      	push	{r4, r5, r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026d8:	f7ff fff2 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 80026dc:	0004      	movs	r4, r0
 80026de:	f7ff fb3f 	bl	8001d60 <LL_RCC_GetAPB1Prescaler>
 80026e2:	0003      	movs	r3, r0
 80026e4:	0b1a      	lsrs	r2, r3, #12
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	58d3      	ldr	r3, [r2, r3]
 80026ec:	221f      	movs	r2, #31
 80026ee:	4013      	ands	r3, r2
 80026f0:	40dc      	lsrs	r4, r3
 80026f2:	0023      	movs	r3, r4
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bdb0      	pop	{r4, r5, r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	080038a0 	.word	0x080038a0

08002700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002708:	2313      	movs	r3, #19
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002710:	2312      	movs	r3, #18
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	4013      	ands	r3, r2
 8002722:	d100      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002724:	e0a3      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002726:	2011      	movs	r0, #17
 8002728:	183b      	adds	r3, r7, r0
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4bc3      	ldr	r3, [pc, #780]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	055b      	lsls	r3, r3, #21
 8002736:	4013      	ands	r3, r2
 8002738:	d110      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4bc0      	ldr	r3, [pc, #768]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800273c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800273e:	4bbf      	ldr	r3, [pc, #764]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	0549      	lsls	r1, r1, #21
 8002744:	430a      	orrs	r2, r1
 8002746:	63da      	str	r2, [r3, #60]	; 0x3c
 8002748:	4bbc      	ldr	r3, [pc, #752]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800274a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	055b      	lsls	r3, r3, #21
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002756:	183b      	adds	r3, r7, r0
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275c:	4bb8      	ldr	r3, [pc, #736]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4bb7      	ldr	r3, [pc, #732]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002762:	2180      	movs	r1, #128	; 0x80
 8002764:	0049      	lsls	r1, r1, #1
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800276a:	f7fe fa65 	bl	8000c38 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002772:	e00b      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002774:	f7fe fa60 	bl	8000c38 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d904      	bls.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002782:	2313      	movs	r3, #19
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2203      	movs	r2, #3
 8002788:	701a      	strb	r2, [r3, #0]
        break;
 800278a:	e005      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800278c:	4bac      	ldr	r3, [pc, #688]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4013      	ands	r3, r2
 8002796:	d0ed      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002798:	2313      	movs	r3, #19
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d154      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a2:	4ba6      	ldr	r3, [pc, #664]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027a6:	23c0      	movs	r3, #192	; 0xc0
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4013      	ands	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d019      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d014      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027be:	4b9f      	ldr	r3, [pc, #636]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c2:	4aa0      	ldr	r2, [pc, #640]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027c8:	4b9c      	ldr	r3, [pc, #624]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027cc:	4b9b      	ldr	r3, [pc, #620]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ce:	2180      	movs	r1, #128	; 0x80
 80027d0:	0249      	lsls	r1, r1, #9
 80027d2:	430a      	orrs	r2, r1
 80027d4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027d6:	4b99      	ldr	r3, [pc, #612]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027da:	4b98      	ldr	r3, [pc, #608]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027dc:	499a      	ldr	r1, [pc, #616]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80027de:	400a      	ands	r2, r1
 80027e0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027e2:	4b96      	ldr	r3, [pc, #600]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2201      	movs	r2, #1
 80027ec:	4013      	ands	r3, r2
 80027ee:	d016      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7fe fa22 	bl	8000c38 <HAL_GetTick>
 80027f4:	0003      	movs	r3, r0
 80027f6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f8:	e00c      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7fe fa1d 	bl	8000c38 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	4a91      	ldr	r2, [pc, #580]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d904      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800280a:	2313      	movs	r3, #19
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	2203      	movs	r2, #3
 8002810:	701a      	strb	r2, [r3, #0]
            break;
 8002812:	e004      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002814:	4b89      	ldr	r3, [pc, #548]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d0ed      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800281e:	2313      	movs	r3, #19
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002828:	4b84      	ldr	r3, [pc, #528]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	4a85      	ldr	r2, [pc, #532]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002836:	4b81      	ldr	r3, [pc, #516]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002838:	430a      	orrs	r2, r1
 800283a:	65da      	str	r2, [r3, #92]	; 0x5c
 800283c:	e00c      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800283e:	2312      	movs	r3, #18
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	2213      	movs	r2, #19
 8002844:	18ba      	adds	r2, r7, r2
 8002846:	7812      	ldrb	r2, [r2, #0]
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e005      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284c:	2312      	movs	r3, #18
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2213      	movs	r2, #19
 8002852:	18ba      	adds	r2, r7, r2
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002858:	2311      	movs	r3, #17
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002866:	4b75      	ldr	r3, [pc, #468]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002868:	4979      	ldr	r1, [pc, #484]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800286a:	400a      	ands	r2, r1
 800286c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2201      	movs	r2, #1
 8002874:	4013      	ands	r3, r2
 8002876:	d009      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002878:	4b70      	ldr	r3, [pc, #448]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	2203      	movs	r2, #3
 800287e:	4393      	bics	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4b6d      	ldr	r3, [pc, #436]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002888:	430a      	orrs	r2, r1
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2202      	movs	r2, #2
 8002892:	4013      	ands	r3, r2
 8002894:	d009      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002896:	4b69      	ldr	r3, [pc, #420]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	220c      	movs	r2, #12
 800289c:	4393      	bics	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a6:	430a      	orrs	r2, r1
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2210      	movs	r2, #16
 80028b0:	4013      	ands	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028b4:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	4a66      	ldr	r2, [pc, #408]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	4b5e      	ldr	r3, [pc, #376]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028c4:	430a      	orrs	r2, r1
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	d009      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028d4:	4b59      	ldr	r3, [pc, #356]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	4a5f      	ldr	r2, [pc, #380]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028da:	4013      	ands	r3, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	4b56      	ldr	r3, [pc, #344]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028e4:	430a      	orrs	r2, r1
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4013      	ands	r3, r2
 80028f2:	d009      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028f4:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f8:	4a58      	ldr	r2, [pc, #352]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002904:	430a      	orrs	r2, r1
 8002906:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2220      	movs	r2, #32
 800290e:	4013      	ands	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002912:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	4a52      	ldr	r2, [pc, #328]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002918:	4013      	ands	r3, r2
 800291a:	0019      	movs	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002922:	430a      	orrs	r2, r1
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	01db      	lsls	r3, r3, #7
 800292e:	4013      	ands	r3, r2
 8002930:	d015      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002932:	4b42      	ldr	r3, [pc, #264]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	0899      	lsrs	r1, r3, #2
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1a      	ldr	r2, [r3, #32]
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002940:	430a      	orrs	r2, r1
 8002942:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1a      	ldr	r2, [r3, #32]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	05db      	lsls	r3, r3, #23
 800294c:	429a      	cmp	r2, r3
 800294e:	d106      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002950:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002956:	2180      	movs	r1, #128	; 0x80
 8002958:	0249      	lsls	r1, r1, #9
 800295a:	430a      	orrs	r2, r1
 800295c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	031b      	lsls	r3, r3, #12
 8002966:	4013      	ands	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800296a:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	4393      	bics	r3, r2
 8002972:	0019      	movs	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002978:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800297a:	430a      	orrs	r2, r1
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	039b      	lsls	r3, r3, #14
 8002986:	4013      	ands	r3, r2
 8002988:	d016      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800298a:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	4a35      	ldr	r2, [pc, #212]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002990:	4013      	ands	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800299a:	430a      	orrs	r2, r1
 800299c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	03db      	lsls	r3, r3, #15
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d106      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029aa:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	0449      	lsls	r1, r1, #17
 80029b4:	430a      	orrs	r2, r1
 80029b6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	03db      	lsls	r3, r3, #15
 80029c0:	4013      	ands	r3, r2
 80029c2:	d016      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029d4:	430a      	orrs	r2, r1
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	045b      	lsls	r3, r3, #17
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d106      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	0449      	lsls	r1, r1, #17
 80029ee:	430a      	orrs	r2, r1
 80029f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4013      	ands	r3, r2
 80029fc:	d016      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	0019      	movs	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	01db      	lsls	r3, r3, #7
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a24:	2180      	movs	r1, #128	; 0x80
 8002a26:	0249      	lsls	r1, r1, #9
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a2c:	2312      	movs	r3, #18
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	781b      	ldrb	r3, [r3, #0]
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b006      	add	sp, #24
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40007000 	.word	0x40007000
 8002a44:	fffffcff 	.word	0xfffffcff
 8002a48:	fffeffff 	.word	0xfffeffff
 8002a4c:	00001388 	.word	0x00001388
 8002a50:	efffffff 	.word	0xefffffff
 8002a54:	fffff3ff 	.word	0xfffff3ff
 8002a58:	fff3ffff 	.word	0xfff3ffff
 8002a5c:	ffcfffff 	.word	0xffcfffff
 8002a60:	ffffcfff 	.word	0xffffcfff
 8002a64:	ffbfffff 	.word	0xffbfffff
 8002a68:	feffffff 	.word	0xfeffffff
 8002a6c:	ffff3fff 	.word	0xffff3fff

08002a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e046      	b.n	8002b10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2284      	movs	r2, #132	; 0x84
 8002a86:	589b      	ldr	r3, [r3, r2]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	2100      	movs	r1, #0
 8002a92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7fd ffc2 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2284      	movs	r2, #132	; 0x84
 8002aa0:	2124      	movs	r1, #36	; 0x24
 8002aa2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 f8dc 	bl	8002c74 <UART_SetConfig>
 8002abc:	0003      	movs	r3, r0
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e024      	b.n	8002b10 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 fbab 	bl	800322c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	490d      	ldr	r1, [pc, #52]	; (8002b18 <HAL_UART_Init+0xa8>)
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	212a      	movs	r1, #42	; 0x2a
 8002af2:	438a      	bics	r2, r1
 8002af4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f000 fc43 	bl	8003394 <UART_CheckIdleState>
 8002b0e:	0003      	movs	r3, r0
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	ffffb7ff 	.word	0xffffb7ff

08002b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	1dbb      	adds	r3, r7, #6
 8002b2a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2284      	movs	r2, #132	; 0x84
 8002b30:	589b      	ldr	r3, [r3, r2]
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d000      	beq.n	8002b38 <HAL_UART_Transmit+0x1c>
 8002b36:	e097      	b.n	8002c68 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_UART_Transmit+0x2a>
 8002b3e:	1dbb      	adds	r3, r7, #6
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e08f      	b.n	8002c6a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	015b      	lsls	r3, r3, #5
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d109      	bne.n	8002b6a <HAL_UART_Transmit+0x4e>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	d001      	beq.n	8002b6a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07f      	b.n	8002c6a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	5c9b      	ldrb	r3, [r3, r2]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_UART_Transmit+0x5c>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e078      	b.n	8002c6a <HAL_UART_Transmit+0x14e>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	228c      	movs	r2, #140	; 0x8c
 8002b84:	2100      	movs	r1, #0
 8002b86:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2284      	movs	r2, #132	; 0x84
 8002b8c:	2121      	movs	r1, #33	; 0x21
 8002b8e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b90:	f7fe f852 	bl	8000c38 <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1dba      	adds	r2, r7, #6
 8002b9c:	2154      	movs	r1, #84	; 0x54
 8002b9e:	8812      	ldrh	r2, [r2, #0]
 8002ba0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1dba      	adds	r2, r7, #6
 8002ba6:	2156      	movs	r1, #86	; 0x56
 8002ba8:	8812      	ldrh	r2, [r2, #0]
 8002baa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	015b      	lsls	r3, r3, #5
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d108      	bne.n	8002bca <HAL_UART_Transmit+0xae>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d104      	bne.n	8002bca <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	e003      	b.n	8002bd2 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2280      	movs	r2, #128	; 0x80
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002bda:	e02c      	b.n	8002c36 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	0013      	movs	r3, r2
 8002be6:	2200      	movs	r2, #0
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	f000 fc1d 	bl	8003428 <UART_WaitOnFlagUntilTimeout>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e039      	b.n	8002c6a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	001a      	movs	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	05d2      	lsls	r2, r2, #23
 8002c08:	0dd2      	lsrs	r2, r2, #23
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	3302      	adds	r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	e007      	b.n	8002c24 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3301      	adds	r3, #1
 8002c22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2256      	movs	r2, #86	; 0x56
 8002c28:	5a9b      	ldrh	r3, [r3, r2]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b299      	uxth	r1, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2256      	movs	r2, #86	; 0x56
 8002c34:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2256      	movs	r2, #86	; 0x56
 8002c3a:	5a9b      	ldrh	r3, [r3, r2]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1cc      	bne.n	8002bdc <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	0013      	movs	r3, r2
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2140      	movs	r1, #64	; 0x40
 8002c50:	f000 fbea 	bl	8003428 <UART_WaitOnFlagUntilTimeout>
 8002c54:	1e03      	subs	r3, r0, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e006      	b.n	8002c6a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2284      	movs	r2, #132	; 0x84
 8002c60:	2120      	movs	r1, #32
 8002c62:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e000      	b.n	8002c6a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
  }
}
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b008      	add	sp, #32
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c74:	b5b0      	push	{r4, r5, r7, lr}
 8002c76:	b090      	sub	sp, #64	; 0x40
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c7c:	231a      	movs	r3, #26
 8002c7e:	2220      	movs	r2, #32
 8002c80:	4694      	mov	ip, r2
 8002c82:	44bc      	add	ip, r7
 8002c84:	4463      	add	r3, ip
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4ab9      	ldr	r2, [pc, #740]	; (8002f90 <UART_SetConfig+0x31c>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4ab5      	ldr	r2, [pc, #724]	; (8002f94 <UART_SetConfig+0x320>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	68d9      	ldr	r1, [r3, #12]
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	0003      	movs	r3, r0
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4aae      	ldr	r2, [pc, #696]	; (8002f98 <UART_SetConfig+0x324>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4aaa      	ldr	r2, [pc, #680]	; (8002f9c <UART_SetConfig+0x328>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	220f      	movs	r2, #15
 8002d0a:	4393      	bics	r3, r2
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	0003      	movs	r3, r0
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a9f      	ldr	r2, [pc, #636]	; (8002fa0 <UART_SetConfig+0x32c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d136      	bne.n	8002d94 <UART_SetConfig+0x120>
 8002d26:	4b9f      	ldr	r3, [pc, #636]	; (8002fa4 <UART_SetConfig+0x330>)
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d020      	beq.n	8002d74 <UART_SetConfig+0x100>
 8002d32:	d827      	bhi.n	8002d84 <UART_SetConfig+0x110>
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d00d      	beq.n	8002d54 <UART_SetConfig+0xe0>
 8002d38:	d824      	bhi.n	8002d84 <UART_SetConfig+0x110>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <UART_SetConfig+0xd0>
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d010      	beq.n	8002d64 <UART_SetConfig+0xf0>
 8002d42:	e01f      	b.n	8002d84 <UART_SetConfig+0x110>
 8002d44:	231b      	movs	r3, #27
 8002d46:	2220      	movs	r2, #32
 8002d48:	4694      	mov	ip, r2
 8002d4a:	44bc      	add	ip, r7
 8002d4c:	4463      	add	r3, ip
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e0c5      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002d54:	231b      	movs	r3, #27
 8002d56:	2220      	movs	r2, #32
 8002d58:	4694      	mov	ip, r2
 8002d5a:	44bc      	add	ip, r7
 8002d5c:	4463      	add	r3, ip
 8002d5e:	2202      	movs	r2, #2
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e0bd      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002d64:	231b      	movs	r3, #27
 8002d66:	2220      	movs	r2, #32
 8002d68:	4694      	mov	ip, r2
 8002d6a:	44bc      	add	ip, r7
 8002d6c:	4463      	add	r3, ip
 8002d6e:	2204      	movs	r2, #4
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e0b5      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002d74:	231b      	movs	r3, #27
 8002d76:	2220      	movs	r2, #32
 8002d78:	4694      	mov	ip, r2
 8002d7a:	44bc      	add	ip, r7
 8002d7c:	4463      	add	r3, ip
 8002d7e:	2208      	movs	r2, #8
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e0ad      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002d84:	231b      	movs	r3, #27
 8002d86:	2220      	movs	r2, #32
 8002d88:	4694      	mov	ip, r2
 8002d8a:	44bc      	add	ip, r7
 8002d8c:	4463      	add	r3, ip
 8002d8e:	2210      	movs	r2, #16
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e0a5      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a83      	ldr	r2, [pc, #524]	; (8002fa8 <UART_SetConfig+0x334>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d136      	bne.n	8002e0c <UART_SetConfig+0x198>
 8002d9e:	4b81      	ldr	r3, [pc, #516]	; (8002fa4 <UART_SetConfig+0x330>)
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	220c      	movs	r2, #12
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d020      	beq.n	8002dec <UART_SetConfig+0x178>
 8002daa:	d827      	bhi.n	8002dfc <UART_SetConfig+0x188>
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d00d      	beq.n	8002dcc <UART_SetConfig+0x158>
 8002db0:	d824      	bhi.n	8002dfc <UART_SetConfig+0x188>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <UART_SetConfig+0x148>
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d010      	beq.n	8002ddc <UART_SetConfig+0x168>
 8002dba:	e01f      	b.n	8002dfc <UART_SetConfig+0x188>
 8002dbc:	231b      	movs	r3, #27
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	4694      	mov	ip, r2
 8002dc2:	44bc      	add	ip, r7
 8002dc4:	4463      	add	r3, ip
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e089      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002dcc:	231b      	movs	r3, #27
 8002dce:	2220      	movs	r2, #32
 8002dd0:	4694      	mov	ip, r2
 8002dd2:	44bc      	add	ip, r7
 8002dd4:	4463      	add	r3, ip
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e081      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002ddc:	231b      	movs	r3, #27
 8002dde:	2220      	movs	r2, #32
 8002de0:	4694      	mov	ip, r2
 8002de2:	44bc      	add	ip, r7
 8002de4:	4463      	add	r3, ip
 8002de6:	2204      	movs	r2, #4
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	e079      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002dec:	231b      	movs	r3, #27
 8002dee:	2220      	movs	r2, #32
 8002df0:	4694      	mov	ip, r2
 8002df2:	44bc      	add	ip, r7
 8002df4:	4463      	add	r3, ip
 8002df6:	2208      	movs	r2, #8
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e071      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002dfc:	231b      	movs	r3, #27
 8002dfe:	2220      	movs	r2, #32
 8002e00:	4694      	mov	ip, r2
 8002e02:	44bc      	add	ip, r7
 8002e04:	4463      	add	r3, ip
 8002e06:	2210      	movs	r2, #16
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e069      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a66      	ldr	r2, [pc, #408]	; (8002fac <UART_SetConfig+0x338>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d107      	bne.n	8002e26 <UART_SetConfig+0x1b2>
 8002e16:	231b      	movs	r3, #27
 8002e18:	2220      	movs	r2, #32
 8002e1a:	4694      	mov	ip, r2
 8002e1c:	44bc      	add	ip, r7
 8002e1e:	4463      	add	r3, ip
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	e05c      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a61      	ldr	r2, [pc, #388]	; (8002fb0 <UART_SetConfig+0x33c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d107      	bne.n	8002e40 <UART_SetConfig+0x1cc>
 8002e30:	231b      	movs	r3, #27
 8002e32:	2220      	movs	r2, #32
 8002e34:	4694      	mov	ip, r2
 8002e36:	44bc      	add	ip, r7
 8002e38:	4463      	add	r3, ip
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	e04f      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a54      	ldr	r2, [pc, #336]	; (8002f98 <UART_SetConfig+0x324>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d143      	bne.n	8002ed2 <UART_SetConfig+0x25e>
 8002e4a:	4b56      	ldr	r3, [pc, #344]	; (8002fa4 <UART_SetConfig+0x330>)
 8002e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e4e:	23c0      	movs	r3, #192	; 0xc0
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	4013      	ands	r3, r2
 8002e54:	22c0      	movs	r2, #192	; 0xc0
 8002e56:	0112      	lsls	r2, r2, #4
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d02a      	beq.n	8002eb2 <UART_SetConfig+0x23e>
 8002e5c:	22c0      	movs	r2, #192	; 0xc0
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d82e      	bhi.n	8002ec2 <UART_SetConfig+0x24e>
 8002e64:	2280      	movs	r2, #128	; 0x80
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d012      	beq.n	8002e92 <UART_SetConfig+0x21e>
 8002e6c:	2280      	movs	r2, #128	; 0x80
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d826      	bhi.n	8002ec2 <UART_SetConfig+0x24e>
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <UART_SetConfig+0x20e>
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	00d2      	lsls	r2, r2, #3
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d010      	beq.n	8002ea2 <UART_SetConfig+0x22e>
 8002e80:	e01f      	b.n	8002ec2 <UART_SetConfig+0x24e>
 8002e82:	231b      	movs	r3, #27
 8002e84:	2220      	movs	r2, #32
 8002e86:	4694      	mov	ip, r2
 8002e88:	44bc      	add	ip, r7
 8002e8a:	4463      	add	r3, ip
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e026      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002e92:	231b      	movs	r3, #27
 8002e94:	2220      	movs	r2, #32
 8002e96:	4694      	mov	ip, r2
 8002e98:	44bc      	add	ip, r7
 8002e9a:	4463      	add	r3, ip
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e01e      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002ea2:	231b      	movs	r3, #27
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	4694      	mov	ip, r2
 8002ea8:	44bc      	add	ip, r7
 8002eaa:	4463      	add	r3, ip
 8002eac:	2204      	movs	r2, #4
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e016      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002eb2:	231b      	movs	r3, #27
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	4694      	mov	ip, r2
 8002eb8:	44bc      	add	ip, r7
 8002eba:	4463      	add	r3, ip
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	e00e      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002ec2:	231b      	movs	r3, #27
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	4694      	mov	ip, r2
 8002ec8:	44bc      	add	ip, r7
 8002eca:	4463      	add	r3, ip
 8002ecc:	2210      	movs	r2, #16
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	e006      	b.n	8002ee0 <UART_SetConfig+0x26c>
 8002ed2:	231b      	movs	r3, #27
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	4694      	mov	ip, r2
 8002ed8:	44bc      	add	ip, r7
 8002eda:	4463      	add	r3, ip
 8002edc:	2210      	movs	r2, #16
 8002ede:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a2c      	ldr	r2, [pc, #176]	; (8002f98 <UART_SetConfig+0x324>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d000      	beq.n	8002eec <UART_SetConfig+0x278>
 8002eea:	e0ad      	b.n	8003048 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002eec:	231b      	movs	r3, #27
 8002eee:	2220      	movs	r2, #32
 8002ef0:	4694      	mov	ip, r2
 8002ef2:	44bc      	add	ip, r7
 8002ef4:	4463      	add	r3, ip
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d015      	beq.n	8002f28 <UART_SetConfig+0x2b4>
 8002efc:	dc18      	bgt.n	8002f30 <UART_SetConfig+0x2bc>
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d00d      	beq.n	8002f1e <UART_SetConfig+0x2aa>
 8002f02:	dc15      	bgt.n	8002f30 <UART_SetConfig+0x2bc>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <UART_SetConfig+0x29a>
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d005      	beq.n	8002f18 <UART_SetConfig+0x2a4>
 8002f0c:	e010      	b.n	8002f30 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f0e:	f7ff fbe1 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 8002f12:	0003      	movs	r3, r0
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f16:	e015      	b.n	8002f44 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f18:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <UART_SetConfig+0x340>)
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f1c:	e012      	b.n	8002f44 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f1e:	f7ff fb4d 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002f22:	0003      	movs	r3, r0
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f26:	e00d      	b.n	8002f44 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f2e:	e009      	b.n	8002f44 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f34:	231a      	movs	r3, #26
 8002f36:	2220      	movs	r2, #32
 8002f38:	4694      	mov	ip, r2
 8002f3a:	44bc      	add	ip, r7
 8002f3c:	4463      	add	r3, ip
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
        break;
 8002f42:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d100      	bne.n	8002f4c <UART_SetConfig+0x2d8>
 8002f4a:	e153      	b.n	80031f4 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <UART_SetConfig+0x344>)
 8002f52:	0052      	lsls	r2, r2, #1
 8002f54:	5ad3      	ldrh	r3, [r2, r3]
 8002f56:	0019      	movs	r1, r3
 8002f58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f5a:	f7fd f8d3 	bl	8000104 <__udivsi3>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	0013      	movs	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	189b      	adds	r3, r3, r2
 8002f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d305      	bcc.n	8002f7e <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d91e      	bls.n	8002fbc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002f7e:	231a      	movs	r3, #26
 8002f80:	2220      	movs	r2, #32
 8002f82:	4694      	mov	ip, r2
 8002f84:	44bc      	add	ip, r7
 8002f86:	4463      	add	r3, ip
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
 8002f8c:	e132      	b.n	80031f4 <UART_SetConfig+0x580>
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	cfff69f3 	.word	0xcfff69f3
 8002f94:	ffffcfff 	.word	0xffffcfff
 8002f98:	40008000 	.word	0x40008000
 8002f9c:	11fff4ff 	.word	0x11fff4ff
 8002fa0:	40013800 	.word	0x40013800
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40004400 	.word	0x40004400
 8002fac:	40004800 	.word	0x40004800
 8002fb0:	40004c00 	.word	0x40004c00
 8002fb4:	00f42400 	.word	0x00f42400
 8002fb8:	080038c0 	.word	0x080038c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc8:	4b96      	ldr	r3, [pc, #600]	; (8003224 <UART_SetConfig+0x5b0>)
 8002fca:	0052      	lsls	r2, r2, #1
 8002fcc:	5ad3      	ldrh	r3, [r2, r3]
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	69b8      	ldr	r0, [r7, #24]
 8002fda:	69f9      	ldr	r1, [r7, #28]
 8002fdc:	f7fd fa08 	bl	80003f0 <__aeabi_uldivmod>
 8002fe0:	0002      	movs	r2, r0
 8002fe2:	000b      	movs	r3, r1
 8002fe4:	0e11      	lsrs	r1, r2, #24
 8002fe6:	021d      	lsls	r5, r3, #8
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0214      	lsls	r4, r2, #8
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68b8      	ldr	r0, [r7, #8]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	1900      	adds	r0, r0, r4
 8002ffe:	4169      	adcs	r1, r5
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f7fd f9ef 	bl	80003f0 <__aeabi_uldivmod>
 8003012:	0002      	movs	r2, r0
 8003014:	000b      	movs	r3, r1
 8003016:	0013      	movs	r3, r2
 8003018:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800301a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800301c:	23c0      	movs	r3, #192	; 0xc0
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	429a      	cmp	r2, r3
 8003022:	d309      	bcc.n	8003038 <UART_SetConfig+0x3c4>
 8003024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	035b      	lsls	r3, r3, #13
 800302a:	429a      	cmp	r2, r3
 800302c:	d204      	bcs.n	8003038 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	e0dd      	b.n	80031f4 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8003038:	231a      	movs	r3, #26
 800303a:	2220      	movs	r2, #32
 800303c:	4694      	mov	ip, r2
 800303e:	44bc      	add	ip, r7
 8003040:	4463      	add	r3, ip
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e0d5      	b.n	80031f4 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	429a      	cmp	r2, r3
 8003052:	d000      	beq.n	8003056 <UART_SetConfig+0x3e2>
 8003054:	e073      	b.n	800313e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003056:	231b      	movs	r3, #27
 8003058:	2220      	movs	r2, #32
 800305a:	4694      	mov	ip, r2
 800305c:	44bc      	add	ip, r7
 800305e:	4463      	add	r3, ip
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b08      	cmp	r3, #8
 8003064:	d015      	beq.n	8003092 <UART_SetConfig+0x41e>
 8003066:	dc18      	bgt.n	800309a <UART_SetConfig+0x426>
 8003068:	2b04      	cmp	r3, #4
 800306a:	d00d      	beq.n	8003088 <UART_SetConfig+0x414>
 800306c:	dc15      	bgt.n	800309a <UART_SetConfig+0x426>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <UART_SetConfig+0x404>
 8003072:	2b02      	cmp	r3, #2
 8003074:	d005      	beq.n	8003082 <UART_SetConfig+0x40e>
 8003076:	e010      	b.n	800309a <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003078:	f7ff fb2c 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 800307c:	0003      	movs	r3, r0
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003080:	e015      	b.n	80030ae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003082:	4b69      	ldr	r3, [pc, #420]	; (8003228 <UART_SetConfig+0x5b4>)
 8003084:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003086:	e012      	b.n	80030ae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003088:	f7ff fa98 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800308c:	0003      	movs	r3, r0
 800308e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003090:	e00d      	b.n	80030ae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003098:	e009      	b.n	80030ae <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800309e:	231a      	movs	r3, #26
 80030a0:	2220      	movs	r2, #32
 80030a2:	4694      	mov	ip, r2
 80030a4:	44bc      	add	ip, r7
 80030a6:	4463      	add	r3, ip
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
        break;
 80030ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d100      	bne.n	80030b6 <UART_SetConfig+0x442>
 80030b4:	e09e      	b.n	80031f4 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ba:	4b5a      	ldr	r3, [pc, #360]	; (8003224 <UART_SetConfig+0x5b0>)
 80030bc:	0052      	lsls	r2, r2, #1
 80030be:	5ad3      	ldrh	r3, [r2, r3]
 80030c0:	0019      	movs	r1, r3
 80030c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030c4:	f7fd f81e 	bl	8000104 <__udivsi3>
 80030c8:	0003      	movs	r3, r0
 80030ca:	005a      	lsls	r2, r3, #1
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	18d2      	adds	r2, r2, r3
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0019      	movs	r1, r3
 80030da:	0010      	movs	r0, r2
 80030dc:	f7fd f812 	bl	8000104 <__udivsi3>
 80030e0:	0003      	movs	r3, r0
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	d921      	bls.n	800312e <UART_SetConfig+0x4ba>
 80030ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	025b      	lsls	r3, r3, #9
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d21c      	bcs.n	800312e <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	200e      	movs	r0, #14
 80030fa:	2420      	movs	r4, #32
 80030fc:	193b      	adds	r3, r7, r4
 80030fe:	181b      	adds	r3, r3, r0
 8003100:	210f      	movs	r1, #15
 8003102:	438a      	bics	r2, r1
 8003104:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	085b      	lsrs	r3, r3, #1
 800310a:	b29b      	uxth	r3, r3
 800310c:	2207      	movs	r2, #7
 800310e:	4013      	ands	r3, r2
 8003110:	b299      	uxth	r1, r3
 8003112:	193b      	adds	r3, r7, r4
 8003114:	181b      	adds	r3, r3, r0
 8003116:	193a      	adds	r2, r7, r4
 8003118:	1812      	adds	r2, r2, r0
 800311a:	8812      	ldrh	r2, [r2, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	193a      	adds	r2, r7, r4
 8003126:	1812      	adds	r2, r2, r0
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	e062      	b.n	80031f4 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 800312e:	231a      	movs	r3, #26
 8003130:	2220      	movs	r2, #32
 8003132:	4694      	mov	ip, r2
 8003134:	44bc      	add	ip, r7
 8003136:	4463      	add	r3, ip
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e05a      	b.n	80031f4 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 800313e:	231b      	movs	r3, #27
 8003140:	2220      	movs	r2, #32
 8003142:	4694      	mov	ip, r2
 8003144:	44bc      	add	ip, r7
 8003146:	4463      	add	r3, ip
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d015      	beq.n	800317a <UART_SetConfig+0x506>
 800314e:	dc18      	bgt.n	8003182 <UART_SetConfig+0x50e>
 8003150:	2b04      	cmp	r3, #4
 8003152:	d00d      	beq.n	8003170 <UART_SetConfig+0x4fc>
 8003154:	dc15      	bgt.n	8003182 <UART_SetConfig+0x50e>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <UART_SetConfig+0x4ec>
 800315a:	2b02      	cmp	r3, #2
 800315c:	d005      	beq.n	800316a <UART_SetConfig+0x4f6>
 800315e:	e010      	b.n	8003182 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003160:	f7ff fab8 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 8003164:	0003      	movs	r3, r0
 8003166:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003168:	e015      	b.n	8003196 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800316a:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <UART_SetConfig+0x5b4>)
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800316e:	e012      	b.n	8003196 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003170:	f7ff fa24 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8003174:	0003      	movs	r3, r0
 8003176:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003178:	e00d      	b.n	8003196 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003180:	e009      	b.n	8003196 <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003186:	231a      	movs	r3, #26
 8003188:	2220      	movs	r2, #32
 800318a:	4694      	mov	ip, r2
 800318c:	44bc      	add	ip, r7
 800318e:	4463      	add	r3, ip
 8003190:	2201      	movs	r2, #1
 8003192:	701a      	strb	r2, [r3, #0]
        break;
 8003194:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02b      	beq.n	80031f4 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a0:	4b20      	ldr	r3, [pc, #128]	; (8003224 <UART_SetConfig+0x5b0>)
 80031a2:	0052      	lsls	r2, r2, #1
 80031a4:	5ad3      	ldrh	r3, [r2, r3]
 80031a6:	0019      	movs	r1, r3
 80031a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031aa:	f7fc ffab 	bl	8000104 <__udivsi3>
 80031ae:	0003      	movs	r3, r0
 80031b0:	001a      	movs	r2, r3
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	18d2      	adds	r2, r2, r3
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	0019      	movs	r1, r3
 80031c0:	0010      	movs	r0, r2
 80031c2:	f7fc ff9f 	bl	8000104 <__udivsi3>
 80031c6:	0003      	movs	r3, r0
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d90a      	bls.n	80031e6 <UART_SetConfig+0x572>
 80031d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	025b      	lsls	r3, r3, #9
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d205      	bcs.n	80031e6 <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	b29a      	uxth	r2, r3
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60da      	str	r2, [r3, #12]
 80031e4:	e006      	b.n	80031f4 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 80031e6:	231a      	movs	r3, #26
 80031e8:	2220      	movs	r2, #32
 80031ea:	4694      	mov	ip, r2
 80031ec:	44bc      	add	ip, r7
 80031ee:	4463      	add	r3, ip
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	226a      	movs	r2, #106	; 0x6a
 80031f8:	2101      	movs	r1, #1
 80031fa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	2268      	movs	r2, #104	; 0x68
 8003200:	2101      	movs	r1, #1
 8003202:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	2200      	movs	r2, #0
 8003208:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	2200      	movs	r2, #0
 800320e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003210:	231a      	movs	r3, #26
 8003212:	2220      	movs	r2, #32
 8003214:	4694      	mov	ip, r2
 8003216:	44bc      	add	ip, r7
 8003218:	4463      	add	r3, ip
 800321a:	781b      	ldrb	r3, [r3, #0]
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b010      	add	sp, #64	; 0x40
 8003222:	bdb0      	pop	{r4, r5, r7, pc}
 8003224:	080038c0 	.word	0x080038c0
 8003228:	00f42400 	.word	0x00f42400

0800322c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	2201      	movs	r2, #1
 800323a:	4013      	ands	r3, r2
 800323c:	d00b      	beq.n	8003256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a4a      	ldr	r2, [pc, #296]	; (8003370 <UART_AdvFeatureConfig+0x144>)
 8003246:	4013      	ands	r3, r2
 8003248:	0019      	movs	r1, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	2202      	movs	r2, #2
 800325c:	4013      	ands	r3, r2
 800325e:	d00b      	beq.n	8003278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4a43      	ldr	r2, [pc, #268]	; (8003374 <UART_AdvFeatureConfig+0x148>)
 8003268:	4013      	ands	r3, r2
 800326a:	0019      	movs	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	2204      	movs	r2, #4
 800327e:	4013      	ands	r3, r2
 8003280:	d00b      	beq.n	800329a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a3b      	ldr	r2, [pc, #236]	; (8003378 <UART_AdvFeatureConfig+0x14c>)
 800328a:	4013      	ands	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	2208      	movs	r2, #8
 80032a0:	4013      	ands	r3, r2
 80032a2:	d00b      	beq.n	80032bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4a34      	ldr	r2, [pc, #208]	; (800337c <UART_AdvFeatureConfig+0x150>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	2210      	movs	r2, #16
 80032c2:	4013      	ands	r3, r2
 80032c4:	d00b      	beq.n	80032de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a2c      	ldr	r2, [pc, #176]	; (8003380 <UART_AdvFeatureConfig+0x154>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	0019      	movs	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	2220      	movs	r2, #32
 80032e4:	4013      	ands	r3, r2
 80032e6:	d00b      	beq.n	8003300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4a25      	ldr	r2, [pc, #148]	; (8003384 <UART_AdvFeatureConfig+0x158>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	2240      	movs	r2, #64	; 0x40
 8003306:	4013      	ands	r3, r2
 8003308:	d01d      	beq.n	8003346 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <UART_AdvFeatureConfig+0x15c>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	035b      	lsls	r3, r3, #13
 800332a:	429a      	cmp	r2, r3
 800332c:	d10b      	bne.n	8003346 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4a15      	ldr	r2, [pc, #84]	; (800338c <UART_AdvFeatureConfig+0x160>)
 8003336:	4013      	ands	r3, r2
 8003338:	0019      	movs	r1, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	4013      	ands	r3, r2
 800334e:	d00b      	beq.n	8003368 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <UART_AdvFeatureConfig+0x164>)
 8003358:	4013      	ands	r3, r2
 800335a:	0019      	movs	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
  }
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	b002      	add	sp, #8
 800336e:	bd80      	pop	{r7, pc}
 8003370:	fffdffff 	.word	0xfffdffff
 8003374:	fffeffff 	.word	0xfffeffff
 8003378:	fffbffff 	.word	0xfffbffff
 800337c:	ffff7fff 	.word	0xffff7fff
 8003380:	ffffefff 	.word	0xffffefff
 8003384:	ffffdfff 	.word	0xffffdfff
 8003388:	ffefffff 	.word	0xffefffff
 800338c:	ff9fffff 	.word	0xff9fffff
 8003390:	fff7ffff 	.word	0xfff7ffff

08003394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af02      	add	r7, sp, #8
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	228c      	movs	r2, #140	; 0x8c
 80033a0:	2100      	movs	r1, #0
 80033a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033a4:	f7fd fc48 	bl	8000c38 <HAL_GetTick>
 80033a8:	0003      	movs	r3, r0
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2208      	movs	r2, #8
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d10c      	bne.n	80033d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	0391      	lsls	r1, r2, #14
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <UART_CheckIdleState+0x90>)
 80033c4:	9200      	str	r2, [sp, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f000 f82e 	bl	8003428 <UART_WaitOnFlagUntilTimeout>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d001      	beq.n	80033d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e023      	b.n	800341c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2204      	movs	r2, #4
 80033dc:	4013      	ands	r3, r2
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d10c      	bne.n	80033fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2280      	movs	r2, #128	; 0x80
 80033e6:	03d1      	lsls	r1, r2, #15
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <UART_CheckIdleState+0x90>)
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f000 f81a 	bl	8003428 <UART_WaitOnFlagUntilTimeout>
 80033f4:	1e03      	subs	r3, r0, #0
 80033f6:	d001      	beq.n	80033fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e00f      	b.n	800341c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2284      	movs	r2, #132	; 0x84
 8003400:	2120      	movs	r1, #32
 8003402:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2288      	movs	r2, #136	; 0x88
 8003408:	2120      	movs	r1, #32
 800340a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	2100      	movs	r1, #0
 8003418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b004      	add	sp, #16
 8003422:	bd80      	pop	{r7, pc}
 8003424:	01ffffff 	.word	0x01ffffff

08003428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b094      	sub	sp, #80	; 0x50
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003438:	e0a7      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800343c:	3301      	adds	r3, #1
 800343e:	d100      	bne.n	8003442 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003440:	e0a3      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003442:	f7fd fbf9 	bl	8000c38 <HAL_GetTick>
 8003446:	0002      	movs	r2, r0
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <UART_WaitOnFlagUntilTimeout+0x30>
 8003452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003454:	2b00      	cmp	r3, #0
 8003456:	d13f      	bne.n	80034d8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003458:	f3ef 8310 	mrs	r3, PRIMASK
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003460:	647b      	str	r3, [r7, #68]	; 0x44
 8003462:	2301      	movs	r3, #1
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	f383 8810 	msr	PRIMASK, r3
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	494e      	ldr	r1, [pc, #312]	; (80035b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800347a:	400a      	ands	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003480:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	f383 8810 	msr	PRIMASK, r3
}
 8003488:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348a:	f3ef 8310 	mrs	r3, PRIMASK
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003492:	643b      	str	r3, [r7, #64]	; 0x40
 8003494:	2301      	movs	r3, #1
 8003496:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349a:	f383 8810 	msr	PRIMASK, r3
}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2101      	movs	r1, #1
 80034ac:	438a      	bics	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b6:	f383 8810 	msr	PRIMASK, r3
}
 80034ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2284      	movs	r2, #132	; 0x84
 80034c0:	2120      	movs	r1, #32
 80034c2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2288      	movs	r2, #136	; 0x88
 80034c8:	2120      	movs	r1, #32
 80034ca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e069      	b.n	80035ac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2204      	movs	r2, #4
 80034e0:	4013      	ands	r3, r2
 80034e2:	d052      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	401a      	ands	r2, r3
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d148      	bne.n	800358a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003502:	f3ef 8310 	mrs	r3, PRIMASK
 8003506:	613b      	str	r3, [r7, #16]
  return(result);
 8003508:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800350a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800350c:	2301      	movs	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f383 8810 	msr	PRIMASK, r3
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4924      	ldr	r1, [pc, #144]	; (80035b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003524:	400a      	ands	r2, r1
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f383 8810 	msr	PRIMASK, r3
}
 8003532:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003534:	f3ef 8310 	mrs	r3, PRIMASK
 8003538:	61fb      	str	r3, [r7, #28]
  return(result);
 800353a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
 800353e:	2301      	movs	r3, #1
 8003540:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f383 8810 	msr	PRIMASK, r3
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2101      	movs	r1, #1
 8003556:	438a      	bics	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	f383 8810 	msr	PRIMASK, r3
}
 8003564:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2284      	movs	r2, #132	; 0x84
 800356a:	2120      	movs	r1, #32
 800356c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2288      	movs	r2, #136	; 0x88
 8003572:	2120      	movs	r1, #32
 8003574:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	228c      	movs	r2, #140	; 0x8c
 800357a:	2120      	movs	r1, #32
 800357c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	2100      	movs	r1, #0
 8003584:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e010      	b.n	80035ac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	425a      	negs	r2, r3
 800359a:	4153      	adcs	r3, r2
 800359c:	b2db      	uxtb	r3, r3
 800359e:	001a      	movs	r2, r3
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d100      	bne.n	80035aa <UART_WaitOnFlagUntilTimeout+0x182>
 80035a8:	e747      	b.n	800343a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b014      	add	sp, #80	; 0x50
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	fffffe5f 	.word	0xfffffe5f

080035b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2280      	movs	r2, #128	; 0x80
 80035c4:	5c9b      	ldrb	r3, [r3, r2]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_UARTEx_DisableFifoMode+0x16>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e027      	b.n	800361e <HAL_UARTEx_DisableFifoMode+0x66>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2284      	movs	r2, #132	; 0x84
 80035da:	2124      	movs	r1, #36	; 0x24
 80035dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2101      	movs	r1, #1
 80035f2:	438a      	bics	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4a0b      	ldr	r2, [pc, #44]	; (8003628 <HAL_UARTEx_DisableFifoMode+0x70>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2284      	movs	r2, #132	; 0x84
 8003610:	2120      	movs	r1, #32
 8003612:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	2100      	movs	r1, #0
 800361a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b004      	add	sp, #16
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	dfffffff 	.word	0xdfffffff

0800362c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	5c9b      	ldrb	r3, [r3, r2]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003640:	2302      	movs	r3, #2
 8003642:	e02e      	b.n	80036a2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2280      	movs	r2, #128	; 0x80
 8003648:	2101      	movs	r1, #1
 800364a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2284      	movs	r2, #132	; 0x84
 8003650:	2124      	movs	r1, #36	; 0x24
 8003652:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2101      	movs	r1, #1
 8003668:	438a      	bics	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	08d9      	lsrs	r1, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	0018      	movs	r0, r3
 8003684:	f000 f854 	bl	8003730 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2284      	movs	r2, #132	; 0x84
 8003694:	2120      	movs	r1, #32
 8003696:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2280      	movs	r2, #128	; 0x80
 800369c:	2100      	movs	r1, #0
 800369e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	0018      	movs	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b004      	add	sp, #16
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	5c9b      	ldrb	r3, [r3, r2]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e02f      	b.n	8003724 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	2101      	movs	r1, #1
 80036ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2284      	movs	r2, #132	; 0x84
 80036d0:	2124      	movs	r1, #36	; 0x24
 80036d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2101      	movs	r1, #1
 80036e8:	438a      	bics	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	4a0e      	ldr	r2, [pc, #56]	; (800372c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	0019      	movs	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	0018      	movs	r0, r3
 8003706:	f000 f813 	bl	8003730 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2284      	movs	r2, #132	; 0x84
 8003716:	2120      	movs	r1, #32
 8003718:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	2100      	movs	r1, #0
 8003720:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b004      	add	sp, #16
 800372a:	bd80      	pop	{r7, pc}
 800372c:	f1ffffff 	.word	0xf1ffffff

08003730 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800373c:	2b00      	cmp	r3, #0
 800373e:	d108      	bne.n	8003752 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	226a      	movs	r2, #106	; 0x6a
 8003744:	2101      	movs	r1, #1
 8003746:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2268      	movs	r2, #104	; 0x68
 800374c:	2101      	movs	r1, #1
 800374e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003750:	e043      	b.n	80037da <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003752:	260f      	movs	r6, #15
 8003754:	19bb      	adds	r3, r7, r6
 8003756:	2208      	movs	r2, #8
 8003758:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800375a:	200e      	movs	r0, #14
 800375c:	183b      	adds	r3, r7, r0
 800375e:	2208      	movs	r2, #8
 8003760:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	0e5b      	lsrs	r3, r3, #25
 800376a:	b2da      	uxtb	r2, r3
 800376c:	240d      	movs	r4, #13
 800376e:	193b      	adds	r3, r7, r4
 8003770:	2107      	movs	r1, #7
 8003772:	400a      	ands	r2, r1
 8003774:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	0f5b      	lsrs	r3, r3, #29
 800377e:	b2da      	uxtb	r2, r3
 8003780:	250c      	movs	r5, #12
 8003782:	197b      	adds	r3, r7, r5
 8003784:	2107      	movs	r1, #7
 8003786:	400a      	ands	r2, r1
 8003788:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800378a:	183b      	adds	r3, r7, r0
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	197a      	adds	r2, r7, r5
 8003790:	7812      	ldrb	r2, [r2, #0]
 8003792:	4914      	ldr	r1, [pc, #80]	; (80037e4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003794:	5c8a      	ldrb	r2, [r1, r2]
 8003796:	435a      	muls	r2, r3
 8003798:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800379a:	197b      	adds	r3, r7, r5
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <UARTEx_SetNbDataToProcess+0xb8>)
 80037a0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037a2:	0019      	movs	r1, r3
 80037a4:	f7fc fd38 	bl	8000218 <__divsi3>
 80037a8:	0003      	movs	r3, r0
 80037aa:	b299      	uxth	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	226a      	movs	r2, #106	; 0x6a
 80037b0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037b2:	19bb      	adds	r3, r7, r6
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	193a      	adds	r2, r7, r4
 80037b8:	7812      	ldrb	r2, [r2, #0]
 80037ba:	490a      	ldr	r1, [pc, #40]	; (80037e4 <UARTEx_SetNbDataToProcess+0xb4>)
 80037bc:	5c8a      	ldrb	r2, [r1, r2]
 80037be:	435a      	muls	r2, r3
 80037c0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80037c2:	193b      	adds	r3, r7, r4
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <UARTEx_SetNbDataToProcess+0xb8>)
 80037c8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037ca:	0019      	movs	r1, r3
 80037cc:	f7fc fd24 	bl	8000218 <__divsi3>
 80037d0:	0003      	movs	r3, r0
 80037d2:	b299      	uxth	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2268      	movs	r2, #104	; 0x68
 80037d8:	5299      	strh	r1, [r3, r2]
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b005      	add	sp, #20
 80037e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	080038d8 	.word	0x080038d8
 80037e8:	080038e0 	.word	0x080038e0

080037ec <__libc_init_array>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	2600      	movs	r6, #0
 80037f0:	4d0c      	ldr	r5, [pc, #48]	; (8003824 <__libc_init_array+0x38>)
 80037f2:	4c0d      	ldr	r4, [pc, #52]	; (8003828 <__libc_init_array+0x3c>)
 80037f4:	1b64      	subs	r4, r4, r5
 80037f6:	10a4      	asrs	r4, r4, #2
 80037f8:	42a6      	cmp	r6, r4
 80037fa:	d109      	bne.n	8003810 <__libc_init_array+0x24>
 80037fc:	2600      	movs	r6, #0
 80037fe:	f000 f821 	bl	8003844 <_init>
 8003802:	4d0a      	ldr	r5, [pc, #40]	; (800382c <__libc_init_array+0x40>)
 8003804:	4c0a      	ldr	r4, [pc, #40]	; (8003830 <__libc_init_array+0x44>)
 8003806:	1b64      	subs	r4, r4, r5
 8003808:	10a4      	asrs	r4, r4, #2
 800380a:	42a6      	cmp	r6, r4
 800380c:	d105      	bne.n	800381a <__libc_init_array+0x2e>
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	00b3      	lsls	r3, r6, #2
 8003812:	58eb      	ldr	r3, [r5, r3]
 8003814:	4798      	blx	r3
 8003816:	3601      	adds	r6, #1
 8003818:	e7ee      	b.n	80037f8 <__libc_init_array+0xc>
 800381a:	00b3      	lsls	r3, r6, #2
 800381c:	58eb      	ldr	r3, [r5, r3]
 800381e:	4798      	blx	r3
 8003820:	3601      	adds	r6, #1
 8003822:	e7f2      	b.n	800380a <__libc_init_array+0x1e>
 8003824:	080038f0 	.word	0x080038f0
 8003828:	080038f0 	.word	0x080038f0
 800382c:	080038f0 	.word	0x080038f0
 8003830:	080038f4 	.word	0x080038f4

08003834 <memset>:
 8003834:	0003      	movs	r3, r0
 8003836:	1882      	adds	r2, r0, r2
 8003838:	4293      	cmp	r3, r2
 800383a:	d100      	bne.n	800383e <memset+0xa>
 800383c:	4770      	bx	lr
 800383e:	7019      	strb	r1, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	e7f9      	b.n	8003838 <memset+0x4>

08003844 <_init>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr

08003850 <_fini>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr
