
oct_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800498c  0800498c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004994  08004994  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800499c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000070  08004a0c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004a0c  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014351  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000243c  00000000  00000000  000343e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00036828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  000377f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001945c  00000000  00000000  000386f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125a0  00000000  00000000  00051b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8fc2  00000000  00000000  000640ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010d0ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d80  00000000  00000000  0010d104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800489c 	.word	0x0800489c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800489c 	.word	0x0800489c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	1c08      	adds	r0, r1, #0
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fc4e 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f816 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f96e 	bl	800092c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000650:	f000 f876 	bl	8000740 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000654:	f000 f8de 	bl	8000814 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000658:	f000 f91a 	bl	8000890 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <main+0x30>)
 800065e:	0018      	movs	r0, r3
 8000660:	f002 fcc4 	bl	8002fec <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <main+0x34>)
 8000666:	0018      	movs	r0, r3
 8000668:	f000 ffb6 	bl	80015d8 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x2c>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	200001b0 	.word	0x200001b0
 8000674:	200000bc 	.word	0x200000bc

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b0a1      	sub	sp, #132	; 0x84
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	2448      	movs	r4, #72	; 0x48
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2338      	movs	r3, #56	; 0x38
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f003 fcd9 	bl	8004040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068e:	2338      	movs	r3, #56	; 0x38
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	0018      	movs	r0, r3
 8000694:	2310      	movs	r3, #16
 8000696:	001a      	movs	r2, r3
 8000698:	2100      	movs	r1, #0
 800069a:	f003 fcd1 	bl	8004040 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	0018      	movs	r0, r3
 80006a2:	2334      	movs	r3, #52	; 0x34
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f003 fcca 	bl	8004040 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fd7b 	bl	80021ac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2202      	movs	r2, #2
 80006ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	0052      	lsls	r2, r2, #1
 80006c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2240      	movs	r2, #64	; 0x40
 80006ce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 fdb3 	bl	8002244 <HAL_RCC_OscConfig>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006e2:	f000 f9a5 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	2138      	movs	r1, #56	; 0x38
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2207      	movs	r2, #7
 80006ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2100      	movs	r1, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f002 f8b7 	bl	8002878 <HAL_RCC_ClockConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 f98f 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4a09      	ldr	r2, [pc, #36]	; (800073c <SystemClock_Config+0xc4>)
 8000716:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	0018      	movs	r0, r3
 8000728:	f002 fa50 	bl	8002bcc <HAL_RCCEx_PeriphCLKConfig>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000730:	f000 f97e 	bl	8000a30 <Error_Handler>
  }
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b021      	add	sp, #132	; 0x84
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	00004001 	.word	0x00004001

08000740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	0018      	movs	r0, r3
 800074a:	230c      	movs	r3, #12
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f003 fc76 	bl	8004040 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000754:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_ADC1_Init+0xcc>)
 8000756:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <MX_ADC1_Init+0xd0>)
 8000758:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_ADC1_Init+0xcc>)
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	05d2      	lsls	r2, r2, #23
 8000760:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_ADC1_Init+0xcc>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_ADC1_Init+0xcc>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_ADC1_Init+0xcc>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000774:	4b25      	ldr	r3, [pc, #148]	; (800080c <MX_ADC1_Init+0xcc>)
 8000776:	2204      	movs	r2, #4
 8000778:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_ADC1_Init+0xcc>)
 800077c:	2200      	movs	r2, #0
 800077e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_ADC1_Init+0xcc>)
 8000782:	2200      	movs	r2, #0
 8000784:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_ADC1_Init+0xcc>)
 8000788:	2201      	movs	r2, #1
 800078a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ADC1_Init+0xcc>)
 800078e:	2201      	movs	r2, #1
 8000790:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ADC1_Init+0xcc>)
 8000794:	2220      	movs	r2, #32
 8000796:	2100      	movs	r1, #0
 8000798:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_ADC1_Init+0xcc>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_ADC1_Init+0xcc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0xcc>)
 80007a8:	222c      	movs	r2, #44	; 0x2c
 80007aa:	2100      	movs	r1, #0
 80007ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_ADC1_Init+0xcc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_ADC1_Init+0xcc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_ADC1_Init+0xcc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_ADC1_Init+0xcc>)
 80007c2:	223c      	movs	r2, #60	; 0x3c
 80007c4:	2100      	movs	r1, #0
 80007c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_ADC1_Init+0xcc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC1_Init+0xcc>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fd59 	bl	8001288 <HAL_ADC_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80007da:	f000 f929 	bl	8000a30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	1d3a      	adds	r2, r7, #4
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_ADC1_Init+0xcc>)
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 ffdc 	bl	80017b4 <HAL_ADC_ConfigChannel>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000800:	f000 f916 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b004      	add	sp, #16
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000bc 	.word	0x200000bc
 8000810:	40012400 	.word	0x40012400

08000814 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	0018      	movs	r0, r3
 800081e:	230c      	movs	r3, #12
 8000820:	001a      	movs	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f003 fc0c 	bl	8004040 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_TIM6_Init+0x6c>)
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <MX_TIM6_Init+0x70>)
 800082c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_TIM6_Init+0x6c>)
 8000830:	4a15      	ldr	r2, [pc, #84]	; (8000888 <MX_TIM6_Init+0x74>)
 8000832:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_TIM6_Init+0x6c>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_TIM6_Init+0x6c>)
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <MX_TIM6_Init+0x78>)
 800083e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_TIM6_Init+0x6c>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_TIM6_Init+0x6c>)
 8000848:	0018      	movs	r0, r3
 800084a:	f002 fb77 	bl	8002f3c <HAL_TIM_Base_Init>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000852:	f000 f8ed 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000862:	1d3a      	adds	r2, r7, #4
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_TIM6_Init+0x6c>)
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f002 fc93 	bl	8003194 <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000872:	f000 f8dd 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b004      	add	sp, #16
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	200001b0 	.word	0x200001b0
 8000884:	40001000 	.word	0x40001000
 8000888:	00003e7f 	.word	0x00003e7f
 800088c:	0000ffff 	.word	0x0000ffff

08000890 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <MX_USART1_UART_Init+0x94>)
 8000896:	4a24      	ldr	r2, [pc, #144]	; (8000928 <MX_USART1_UART_Init+0x98>)
 8000898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800089a:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MX_USART1_UART_Init+0x94>)
 800089c:	22e1      	movs	r2, #225	; 0xe1
 800089e:	0252      	lsls	r2, r2, #9
 80008a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f002 fcc8 	bl	8003270 <HAL_UART_Init>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008e4:	f000 f8a4 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008ea:	2100      	movs	r1, #0
 80008ec:	0018      	movs	r0, r3
 80008ee:	f003 fa9d 	bl	8003e2c <HAL_UARTEx_SetTxFifoThreshold>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008f6:	f000 f89b 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_USART1_UART_Init+0x94>)
 80008fc:	2100      	movs	r1, #0
 80008fe:	0018      	movs	r0, r3
 8000900:	f003 fad4 	bl	8003eac <HAL_UARTEx_SetRxFifoThreshold>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000908:	f000 f892 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <MX_USART1_UART_Init+0x94>)
 800090e:	0018      	movs	r0, r3
 8000910:	f003 fa52 	bl	8003db8 <HAL_UARTEx_DisableFifoMode>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 f88a 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	20000120 	.word	0x20000120
 8000928:	40013800 	.word	0x40013800

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	240c      	movs	r4, #12
 8000934:	193b      	adds	r3, r7, r4
 8000936:	0018      	movs	r0, r3
 8000938:	2314      	movs	r3, #20
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f003 fb7f 	bl	8004040 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b39      	ldr	r3, [pc, #228]	; (8000a28 <MX_GPIO_Init+0xfc>)
 8000944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000946:	4b38      	ldr	r3, [pc, #224]	; (8000a28 <MX_GPIO_Init+0xfc>)
 8000948:	2104      	movs	r1, #4
 800094a:	430a      	orrs	r2, r1
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
 800094e:	4b36      	ldr	r3, [pc, #216]	; (8000a28 <MX_GPIO_Init+0xfc>)
 8000950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000952:	2204      	movs	r2, #4
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <MX_GPIO_Init+0xfc>)
 800095c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <MX_GPIO_Init+0xfc>)
 8000960:	2120      	movs	r1, #32
 8000962:	430a      	orrs	r2, r1
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
 8000966:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <MX_GPIO_Init+0xfc>)
 8000968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096a:	2220      	movs	r2, #32
 800096c:	4013      	ands	r3, r2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <MX_GPIO_Init+0xfc>)
 8000974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000976:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_GPIO_Init+0xfc>)
 8000978:	2101      	movs	r1, #1
 800097a:	430a      	orrs	r2, r1
 800097c:	635a      	str	r2, [r3, #52]	; 0x34
 800097e:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <MX_GPIO_Init+0xfc>)
 8000980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000982:	2201      	movs	r2, #1
 8000984:	4013      	ands	r3, r2
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800098a:	23a0      	movs	r3, #160	; 0xa0
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	0018      	movs	r0, r3
 8000994:	f001 fbae 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	0192      	lsls	r2, r2, #6
 800099e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2288      	movs	r2, #136	; 0x88
 80009a4:	0352      	lsls	r2, r2, #13
 80009a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <MX_GPIO_Init+0x100>)
 80009b2:	0019      	movs	r1, r3
 80009b4:	0010      	movs	r0, r2
 80009b6:	f001 fa39 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	220c      	movs	r2, #12
 80009be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2202      	movs	r2, #2
 80009c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2201      	movs	r2, #1
 80009d6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	193a      	adds	r2, r7, r4
 80009da:	23a0      	movs	r3, #160	; 0xa0
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 fa23 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80009e6:	0021      	movs	r1, r4
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2220      	movs	r2, #32
 80009ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2201      	movs	r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2202      	movs	r2, #2
 80009fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a00:	187a      	adds	r2, r7, r1
 8000a02:	23a0      	movs	r3, #160	; 0xa0
 8000a04:	05db      	lsls	r3, r3, #23
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 fa0f 	bl	8001e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2007      	movs	r0, #7
 8000a14:	f001 f9d8 	bl	8001dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a18:	2007      	movs	r0, #7
 8000a1a:	f001 f9ea 	bl	8001df2 <HAL_NVIC_EnableIRQ>

}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b009      	add	sp, #36	; 0x24
 8000a24:	bd90      	pop	{r4, r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	50000800 	.word	0x50000800

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	2101      	movs	r1, #1
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	2201      	movs	r2, #1
 8000a54:	4013      	ands	r3, r2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	0549      	lsls	r1, r1, #21
 8000a64:	430a      	orrs	r2, r1
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	055b      	lsls	r3, r3, #21
 8000a70:	4013      	ands	r3, r2
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a76:	23c0      	movs	r3, #192	; 0xc0
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fab8 	bl	8000ff0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b08b      	sub	sp, #44	; 0x2c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	2414      	movs	r4, #20
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f003 face 	bl	8004040 <memset>
  if(hadc->Instance==ADC1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <HAL_ADC_MspInit+0x80>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d129      	bne.n	8000b02 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_ADC_MspInit+0x84>)
 8000ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_ADC_MspInit+0x84>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	0349      	lsls	r1, r1, #13
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	641a      	str	r2, [r3, #64]	; 0x40
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_ADC_MspInit+0x84>)
 8000abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	035b      	lsls	r3, r3, #13
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_ADC_MspInit+0x84>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_ADC_MspInit+0x84>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_ADC_MspInit+0x84>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	2201      	movs	r2, #1
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2203      	movs	r2, #3
 8000aec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	193a      	adds	r2, r7, r4
 8000af6:	23a0      	movs	r3, #160	; 0xa0
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	0011      	movs	r1, r2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f001 f995 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b00b      	add	sp, #44	; 0x2c
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	40012400 	.word	0x40012400
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <HAL_TIM_Base_MspInit+0x34>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d10b      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_TIM_Base_MspInit+0x38>)
 8000b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_TIM_Base_MspInit+0x38>)
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_TIM_Base_MspInit+0x38>)
 8000b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b36:	2210      	movs	r2, #16
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	40001000 	.word	0x40001000
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b08b      	sub	sp, #44	; 0x2c
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	2414      	movs	r4, #20
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2314      	movs	r3, #20
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f003 fa6c 	bl	8004040 <memset>
  if(huart->Instance==USART1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <HAL_UART_MspInit+0x8c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12f      	bne.n	8000bd2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <HAL_UART_MspInit+0x90>)
 8000b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_UART_MspInit+0x90>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	01c9      	lsls	r1, r1, #7
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0x90>)
 8000b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	01db      	lsls	r3, r3, #7
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <HAL_UART_MspInit+0x90>)
 8000b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_UART_MspInit+0x90>)
 8000b94:	2104      	movs	r1, #4
 8000b96:	430a      	orrs	r2, r1
 8000b98:	635a      	str	r2, [r3, #52]	; 0x34
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_UART_MspInit+0x90>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ba6:	0021      	movs	r1, r4
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2230      	movs	r2, #48	; 0x30
 8000bac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_UART_MspInit+0x94>)
 8000bca:	0019      	movs	r1, r3
 8000bcc:	0010      	movs	r0, r2
 8000bce:	f001 f92d 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b00b      	add	sp, #44	; 0x2c
 8000bd8:	bd90      	pop	{r4, r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	40021000 	.word	0x40021000
 8000be4:	50000800 	.word	0x50000800

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 f9d4 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b0e6      	sub	sp, #408	; 0x198
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	int arr[100];
	one_sec = 1;
 8000c1e:	4b6f      	ldr	r3, [pc, #444]	; (8000ddc <EXTI4_15_IRQHandler+0x1c4>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
	while(one_sec <= 60){
 8000c24:	e08a      	b.n	8000d3c <EXTI4_15_IRQHandler+0x124>

		final=0;
 8000c26:	4b6e      	ldr	r3, [pc, #440]	; (8000de0 <EXTI4_15_IRQHandler+0x1c8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
		time1 =__HAL_TIM_GET_COUNTER(&htim6);
 8000c2c:	4b6d      	ldr	r3, [pc, #436]	; (8000de4 <EXTI4_15_IRQHandler+0x1cc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c32:	4b6d      	ldr	r3, [pc, #436]	; (8000de8 <EXTI4_15_IRQHandler+0x1d0>)
 8000c34:	601a      	str	r2, [r3, #0]

		for(int i=0; i<1000; i++ ){
 8000c36:	2300      	movs	r3, #0
 8000c38:	22ca      	movs	r2, #202	; 0xca
 8000c3a:	0052      	lsls	r2, r2, #1
 8000c3c:	18ba      	adds	r2, r7, r2
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e026      	b.n	8000c90 <EXTI4_15_IRQHandler+0x78>


			HAL_ADC_Start(&hadc1);
 8000c42:	4b6a      	ldr	r3, [pc, #424]	; (8000dec <EXTI4_15_IRQHandler+0x1d4>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 fcc7 	bl	80015d8 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	425a      	negs	r2, r3
 8000c4e:	4b67      	ldr	r3, [pc, #412]	; (8000dec <EXTI4_15_IRQHandler+0x1d4>)
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fd0e 	bl	8001674 <HAL_ADC_PollForConversion>
			adc = HAL_ADC_GetValue(&hadc1); //one sample/ms
 8000c58:	4b64      	ldr	r3, [pc, #400]	; (8000dec <EXTI4_15_IRQHandler+0x1d4>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 fd9e 	bl	800179c <HAL_ADC_GetValue>
 8000c60:	0003      	movs	r3, r0
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b62      	ldr	r3, [pc, #392]	; (8000df0 <EXTI4_15_IRQHandler+0x1d8>)
 8000c66:	801a      	strh	r2, [r3, #0]
			sum = sum+adc;
 8000c68:	4b61      	ldr	r3, [pc, #388]	; (8000df0 <EXTI4_15_IRQHandler+0x1d8>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	001c      	movs	r4, r3
 8000c6e:	2300      	movs	r3, #0
 8000c70:	001d      	movs	r5, r3
 8000c72:	4b60      	ldr	r3, [pc, #384]	; (8000df4 <EXTI4_15_IRQHandler+0x1dc>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	1912      	adds	r2, r2, r4
 8000c7a:	416b      	adcs	r3, r5
 8000c7c:	495d      	ldr	r1, [pc, #372]	; (8000df4 <EXTI4_15_IRQHandler+0x1dc>)
 8000c7e:	600a      	str	r2, [r1, #0]
 8000c80:	604b      	str	r3, [r1, #4]
		for(int i=0; i<1000; i++ ){
 8000c82:	22ca      	movs	r2, #202	; 0xca
 8000c84:	0052      	lsls	r2, r2, #1
 8000c86:	18bb      	adds	r3, r7, r2
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	18ba      	adds	r2, r7, r2
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	23ca      	movs	r3, #202	; 0xca
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	23fa      	movs	r3, #250	; 0xfa
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dbd0      	blt.n	8000c42 <EXTI4_15_IRQHandler+0x2a>
			//count++;
		}

		while( final <=1000)
 8000ca0:	e00b      	b.n	8000cba <EXTI4_15_IRQHandler+0xa2>
		{

			time2 =__HAL_TIM_GET_COUNTER(&htim6);
 8000ca2:	4b50      	ldr	r3, [pc, #320]	; (8000de4 <EXTI4_15_IRQHandler+0x1cc>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ca8:	4b53      	ldr	r3, [pc, #332]	; (8000df8 <EXTI4_15_IRQHandler+0x1e0>)
 8000caa:	601a      	str	r2, [r3, #0]
			final =time2-time1;
 8000cac:	4b52      	ldr	r3, [pc, #328]	; (8000df8 <EXTI4_15_IRQHandler+0x1e0>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <EXTI4_15_IRQHandler+0x1d0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	1ad2      	subs	r2, r2, r3
 8000cb6:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <EXTI4_15_IRQHandler+0x1c8>)
 8000cb8:	601a      	str	r2, [r3, #0]
		while( final <=1000)
 8000cba:	4b49      	ldr	r3, [pc, #292]	; (8000de0 <EXTI4_15_IRQHandler+0x1c8>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	23fa      	movs	r3, #250	; 0xfa
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d9ed      	bls.n	8000ca2 <EXTI4_15_IRQHandler+0x8a>

		}
//			sprintf(msg,"sum=%d\r\n",sum);
//			HAL_UART_Transmit(&huart1, (uint8_t*)msg , strlen(msg), HAL_MAX_DELAY);

		av = sum/1000; //1000 samples/sec
 8000cc6:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <EXTI4_15_IRQHandler+0x1dc>)
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	6859      	ldr	r1, [r3, #4]
 8000ccc:	22fa      	movs	r2, #250	; 0xfa
 8000cce:	0092      	lsls	r2, r2, #2
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f7ff fb9f 	bl	8000414 <__aeabi_uldivmod>
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	000b      	movs	r3, r1
 8000cda:	4948      	ldr	r1, [pc, #288]	; (8000dfc <EXTI4_15_IRQHandler+0x1e4>)
 8000cdc:	600a      	str	r2, [r1, #0]
 8000cde:	604b      	str	r3, [r1, #4]
		arr[one_sec] = av;
 8000ce0:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <EXTI4_15_IRQHandler+0x1e4>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	493d      	ldr	r1, [pc, #244]	; (8000ddc <EXTI4_15_IRQHandler+0x1c4>)
 8000ce8:	7809      	ldrb	r1, [r1, #0]
 8000cea:	0008      	movs	r0, r1
 8000cec:	0011      	movs	r1, r2
 8000cee:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <EXTI4_15_IRQHandler+0x1e8>)
 8000cf0:	22cc      	movs	r2, #204	; 0xcc
 8000cf2:	0052      	lsls	r2, r2, #1
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	44bc      	add	ip, r7
 8000cf8:	4463      	add	r3, ip
 8000cfa:	0082      	lsls	r2, r0, #2
 8000cfc:	50d1      	str	r1, [r2, r3]
		sum=0;
 8000cfe:	493d      	ldr	r1, [pc, #244]	; (8000df4 <EXTI4_15_IRQHandler+0x1dc>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	2300      	movs	r3, #0
 8000d04:	600a      	str	r2, [r1, #0]
 8000d06:	604b      	str	r3, [r1, #4]

		sprintf(msg,"%d sec\r\n",one_sec);
 8000d08:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <EXTI4_15_IRQHandler+0x1c4>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	493d      	ldr	r1, [pc, #244]	; (8000e04 <EXTI4_15_IRQHandler+0x1ec>)
 8000d10:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <EXTI4_15_IRQHandler+0x1f0>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f003 f99c 	bl	8004050 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg , strlen(msg), HAL_MAX_DELAY);
 8000d18:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <EXTI4_15_IRQHandler+0x1f0>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff f9f2 	bl	8000104 <strlen>
 8000d20:	0003      	movs	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	2301      	movs	r3, #1
 8000d26:	425b      	negs	r3, r3
 8000d28:	4937      	ldr	r1, [pc, #220]	; (8000e08 <EXTI4_15_IRQHandler+0x1f0>)
 8000d2a:	4838      	ldr	r0, [pc, #224]	; (8000e0c <EXTI4_15_IRQHandler+0x1f4>)
 8000d2c:	f002 faf6 	bl	800331c <HAL_UART_Transmit>

		one_sec++;
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <EXTI4_15_IRQHandler+0x1c4>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <EXTI4_15_IRQHandler+0x1c4>)
 8000d3a:	701a      	strb	r2, [r3, #0]
	while(one_sec <= 60){
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <EXTI4_15_IRQHandler+0x1c4>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b3c      	cmp	r3, #60	; 0x3c
 8000d42:	d800      	bhi.n	8000d46 <EXTI4_15_IRQHandler+0x12e>
 8000d44:	e76f      	b.n	8000c26 <EXTI4_15_IRQHandler+0xe>
	}

	for(int i=1; i<=60;i++){
 8000d46:	2301      	movs	r3, #1
 8000d48:	22c8      	movs	r2, #200	; 0xc8
 8000d4a:	0052      	lsls	r2, r2, #1
 8000d4c:	18ba      	adds	r2, r7, r2
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e034      	b.n	8000dbc <EXTI4_15_IRQHandler+0x1a4>

		sprintf(msg,"arr[%d]",i);
 8000d52:	24c8      	movs	r4, #200	; 0xc8
 8000d54:	0064      	lsls	r4, r4, #1
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	492d      	ldr	r1, [pc, #180]	; (8000e10 <EXTI4_15_IRQHandler+0x1f8>)
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <EXTI4_15_IRQHandler+0x1f0>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f003 f976 	bl	8004050 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg , strlen(msg), HAL_MAX_DELAY);
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <EXTI4_15_IRQHandler+0x1f0>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff f9cc 	bl	8000104 <strlen>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	2301      	movs	r3, #1
 8000d72:	425b      	negs	r3, r3
 8000d74:	4924      	ldr	r1, [pc, #144]	; (8000e08 <EXTI4_15_IRQHandler+0x1f0>)
 8000d76:	4825      	ldr	r0, [pc, #148]	; (8000e0c <EXTI4_15_IRQHandler+0x1f4>)
 8000d78:	f002 fad0 	bl	800331c <HAL_UART_Transmit>

		sprintf(msg," = %d\r\n",arr[i]);
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <EXTI4_15_IRQHandler+0x1e8>)
 8000d7e:	22cc      	movs	r2, #204	; 0xcc
 8000d80:	0052      	lsls	r2, r2, #1
 8000d82:	4694      	mov	ip, r2
 8000d84:	44bc      	add	ip, r7
 8000d86:	4463      	add	r3, ip
 8000d88:	193a      	adds	r2, r7, r4
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	58d2      	ldr	r2, [r2, r3]
 8000d90:	4920      	ldr	r1, [pc, #128]	; (8000e14 <EXTI4_15_IRQHandler+0x1fc>)
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <EXTI4_15_IRQHandler+0x1f0>)
 8000d94:	0018      	movs	r0, r3
 8000d96:	f003 f95b 	bl	8004050 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg , strlen(msg), HAL_MAX_DELAY);
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <EXTI4_15_IRQHandler+0x1f0>)
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff f9b1 	bl	8000104 <strlen>
 8000da2:	0003      	movs	r3, r0
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	2301      	movs	r3, #1
 8000da8:	425b      	negs	r3, r3
 8000daa:	4917      	ldr	r1, [pc, #92]	; (8000e08 <EXTI4_15_IRQHandler+0x1f0>)
 8000dac:	4817      	ldr	r0, [pc, #92]	; (8000e0c <EXTI4_15_IRQHandler+0x1f4>)
 8000dae:	f002 fab5 	bl	800331c <HAL_UART_Transmit>
	for(int i=1; i<=60;i++){
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	193a      	adds	r2, r7, r4
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	23c8      	movs	r3, #200	; 0xc8
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b3c      	cmp	r3, #60	; 0x3c
 8000dc6:	ddc4      	ble.n	8000d52 <EXTI4_15_IRQHandler+0x13a>
	}
//	sprintf(msg,"av=%d\r\n",av);
//	HAL_UART_Transmit(&huart1, (uint8_t*)msg , strlen(msg), HAL_MAX_DELAY);

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	019b      	lsls	r3, r3, #6
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 f9af 	bl	8002130 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b066      	add	sp, #408	; 0x198
 8000dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	200000ac 	.word	0x200000ac
 8000de0:	200000a8 	.word	0x200000a8
 8000de4:	200001b0 	.word	0x200001b0
 8000de8:	200000a0 	.word	0x200000a0
 8000dec:	200000bc 	.word	0x200000bc
 8000df0:	2000008c 	.word	0x2000008c
 8000df4:	20000090 	.word	0x20000090
 8000df8:	200000a4 	.word	0x200000a4
 8000dfc:	20000098 	.word	0x20000098
 8000e00:	fffffe68 	.word	0xfffffe68
 8000e04:	080048b4 	.word	0x080048b4
 8000e08:	200001fc 	.word	0x200001fc
 8000e0c:	20000120 	.word	0x20000120
 8000e10:	080048c0 	.word	0x080048c0
 8000e14:	080048c8 	.word	0x080048c8

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	18d3      	adds	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f003 f8d0 	bl	8003fec <__errno>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	425b      	negs	r3, r3
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	18d2      	adds	r2, r2, r3
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b006      	add	sp, #24
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20009000 	.word	0x20009000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	200000b0 	.word	0x200000b0
 8000e80:	20000278 	.word	0x20000278

08000e84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e94:	f7ff fff6 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <LoopForever+0xe>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	; (8000edc <LoopForever+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ebe:	f003 f89b 	bl	8003ff8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ec2:	f7ff fbbd 	bl	8000640 <main>

08000ec6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   r0, =_estack
 8000ec8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ed4:	0800499c 	.word	0x0800499c
  ldr r2, =_sbss
 8000ed8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000edc:	20000274 	.word	0x20000274

08000ee0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_COMP_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x3c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Init+0x3c>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0049      	lsls	r1, r1, #1
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f810 	bl	8000f24 <HAL_InitTick>
 8000f04:	1e03      	subs	r3, r0, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e001      	b.n	8000f14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fd94 	bl	8000a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	781b      	ldrb	r3, [r3, #0]
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40022000 	.word	0x40022000

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <HAL_InitTick+0x88>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d02b      	beq.n	8000f94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <HAL_InitTick+0x8c>)
 8000f3e:	681c      	ldr	r4, [r3, #0]
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_InitTick+0x88>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	0019      	movs	r1, r3
 8000f46:	23fa      	movs	r3, #250	; 0xfa
 8000f48:	0098      	lsls	r0, r3, #2
 8000f4a:	f7ff f8ed 	bl	8000128 <__udivsi3>
 8000f4e:	0003      	movs	r3, r0
 8000f50:	0019      	movs	r1, r3
 8000f52:	0020      	movs	r0, r4
 8000f54:	f7ff f8e8 	bl	8000128 <__udivsi3>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 ff59 	bl	8001e12 <HAL_SYSTICK_Config>
 8000f60:	1e03      	subs	r3, r0, #0
 8000f62:	d112      	bne.n	8000f8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d80a      	bhi.n	8000f80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	425b      	negs	r3, r3
 8000f70:	2200      	movs	r2, #0
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 ff28 	bl	8001dc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_InitTick+0x90>)
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e00d      	b.n	8000f9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f80:	230f      	movs	r3, #15
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e008      	b.n	8000f9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e003      	b.n	8000f9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f94:	230f      	movs	r3, #15
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b005      	add	sp, #20
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	18d2      	adds	r2, r2, r3
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000260 	.word	0x20000260

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_GetTick+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	20000260 	.word	0x20000260

08000ff0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	0019      	movs	r1, r3
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40010000 	.word	0x40010000
 8001018:	fffff9ff 	.word	0xfffff9ff

0800101c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800102c:	401a      	ands	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	fe3fffff 	.word	0xfe3fffff

08001044 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	23e0      	movs	r3, #224	; 0xe0
 8001052:	045b      	lsls	r3, r3, #17
 8001054:	4013      	ands	r3, r2
}
 8001056:	0018      	movs	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	b002      	add	sp, #8
 800105c:	bd80      	pop	{r7, pc}

0800105e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	2104      	movs	r1, #4
 8001072:	400a      	ands	r2, r1
 8001074:	2107      	movs	r1, #7
 8001076:	4091      	lsls	r1, r2
 8001078:	000a      	movs	r2, r1
 800107a:	43d2      	mvns	r2, r2
 800107c:	401a      	ands	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2104      	movs	r1, #4
 8001082:	400b      	ands	r3, r1
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4099      	lsls	r1, r3
 8001088:	000b      	movs	r3, r1
 800108a:	431a      	orrs	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b004      	add	sp, #16
 8001096:	bd80      	pop	{r7, pc}

08001098 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	2104      	movs	r1, #4
 80010aa:	400a      	ands	r2, r1
 80010ac:	2107      	movs	r1, #7
 80010ae:	4091      	lsls	r1, r2
 80010b0:	000a      	movs	r2, r1
 80010b2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2104      	movs	r1, #4
 80010b8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010ba:	40da      	lsrs	r2, r3
 80010bc:	0013      	movs	r3, r2
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	23c0      	movs	r3, #192	; 0xc0
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	4013      	ands	r3, r2
 80010d8:	d101      	bne.n	80010de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010de:	2300      	movs	r3, #0
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	211f      	movs	r1, #31
 80010fc:	400a      	ands	r2, r1
 80010fe:	210f      	movs	r1, #15
 8001100:	4091      	lsls	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	43d2      	mvns	r2, r2
 8001106:	401a      	ands	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	0e9b      	lsrs	r3, r3, #26
 800110c:	210f      	movs	r1, #15
 800110e:	4019      	ands	r1, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	201f      	movs	r0, #31
 8001114:	4003      	ands	r3, r0
 8001116:	4099      	lsls	r1, r3
 8001118:	000b      	movs	r3, r1
 800111a:	431a      	orrs	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b004      	add	sp, #16
 8001126:	bd80      	pop	{r7, pc}

08001128 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	035b      	lsls	r3, r3, #13
 800113a:	0b5b      	lsrs	r3, r3, #13
 800113c:	431a      	orrs	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}

0800114a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	0352      	lsls	r2, r2, #13
 800115c:	0b52      	lsrs	r2, r2, #13
 800115e:	43d2      	mvns	r2, r2
 8001160:	401a      	ands	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b002      	add	sp, #8
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	0212      	lsls	r2, r2, #8
 8001184:	43d2      	mvns	r2, r2
 8001186:	401a      	ands	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	400b      	ands	r3, r1
 8001190:	4904      	ldr	r1, [pc, #16]	; (80011a4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001192:	400b      	ands	r3, r1
 8001194:	431a      	orrs	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b004      	add	sp, #16
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	07ffff00 	.word	0x07ffff00

080011a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <LL_ADC_EnableInternalRegulator+0x24>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	0552      	lsls	r2, r2, #21
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	6fffffe8 	.word	0x6fffffe8

080011d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	055b      	lsls	r3, r3, #21
 80011e0:	401a      	ands	r2, r3
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	055b      	lsls	r3, r3, #21
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d101      	bne.n	80011ee <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <LL_ADC_Enable+0x20>)
 8001206:	4013      	ands	r3, r2
 8001208:	2201      	movs	r2, #1
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b002      	add	sp, #8
 8001216:	bd80      	pop	{r7, pc}
 8001218:	7fffffe8 	.word	0x7fffffe8

0800121c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2201      	movs	r2, #1
 800122a:	4013      	ands	r3, r2
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <LL_ADC_IsEnabled+0x18>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <LL_ADC_IsEnabled+0x1a>
 8001234:	2300      	movs	r3, #0
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b002      	add	sp, #8
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <LL_ADC_REG_StartConversion+0x20>)
 800124e:	4013      	ands	r3, r2
 8001250:	2204      	movs	r2, #4
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bd80      	pop	{r7, pc}
 8001260:	7fffffe8 	.word	0x7fffffe8

08001264 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2204      	movs	r2, #4
 8001272:	4013      	ands	r3, r2
 8001274:	2b04      	cmp	r3, #4
 8001276:	d101      	bne.n	800127c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800127c:	2300      	movs	r3, #0
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001290:	231f      	movs	r3, #31
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e17f      	b.n	80015ae <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10a      	bne.n	80012cc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff fbe7 	bl	8000a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2254      	movs	r2, #84	; 0x54
 80012c8:	2100      	movs	r1, #0
 80012ca:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ff7d 	bl	80011d0 <LL_ADC_IsInternalRegulatorEnabled>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d115      	bne.n	8001306 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff ff62 	bl	80011a8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012e4:	4bb4      	ldr	r3, [pc, #720]	; (80015b8 <HAL_ADC_Init+0x330>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	49b4      	ldr	r1, [pc, #720]	; (80015bc <HAL_ADC_Init+0x334>)
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7fe ff1c 	bl	8000128 <__udivsi3>
 80012f0:	0003      	movs	r3, r0
 80012f2:	3301      	adds	r3, #1
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012f8:	e002      	b.n	8001300 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f9      	bne.n	80012fa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	0018      	movs	r0, r3
 800130c:	f7ff ff60 	bl	80011d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d10f      	bne.n	8001334 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001318:	2210      	movs	r2, #16
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	2201      	movs	r2, #1
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800132c:	231f      	movs	r3, #31
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0018      	movs	r0, r3
 800133a:	f7ff ff93 	bl	8001264 <LL_ADC_REG_IsConversionOngoing>
 800133e:	0003      	movs	r3, r0
 8001340:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	2210      	movs	r2, #16
 8001348:	4013      	ands	r3, r2
 800134a:	d000      	beq.n	800134e <HAL_ADC_Init+0xc6>
 800134c:	e122      	b.n	8001594 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d000      	beq.n	8001356 <HAL_ADC_Init+0xce>
 8001354:	e11e      	b.n	8001594 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	4a99      	ldr	r2, [pc, #612]	; (80015c0 <HAL_ADC_Init+0x338>)
 800135c:	4013      	ands	r3, r2
 800135e:	2202      	movs	r2, #2
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	0018      	movs	r0, r3
 800136c:	f7ff ff56 	bl	800121c <LL_ADC_IsEnabled>
 8001370:	1e03      	subs	r3, r0, #0
 8001372:	d000      	beq.n	8001376 <HAL_ADC_Init+0xee>
 8001374:	e0ad      	b.n	80014d2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7e1b      	ldrb	r3, [r3, #24]
 800137e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001380:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7e5b      	ldrb	r3, [r3, #25]
 8001386:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001388:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7e9b      	ldrb	r3, [r3, #26]
 800138e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001390:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <HAL_ADC_Init+0x118>
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	015b      	lsls	r3, r3, #5
 800139e:	e000      	b.n	80013a2 <HAL_ADC_Init+0x11a>
 80013a0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80013a2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80013a8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	da04      	bge.n	80013bc <HAL_ADC_Init+0x134>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	e001      	b.n	80013c0 <HAL_ADC_Init+0x138>
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80013c0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	212c      	movs	r1, #44	; 0x2c
 80013c6:	5c5b      	ldrb	r3, [r3, r1]
 80013c8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80013ca:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2220      	movs	r2, #32
 80013d6:	5c9b      	ldrb	r3, [r3, r2]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d115      	bne.n	8001408 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d105      	bne.n	80013f0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	0252      	lsls	r2, r2, #9
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	e00b      	b.n	8001408 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f4:	2220      	movs	r2, #32
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001400:	2201      	movs	r2, #1
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00a      	beq.n	8001426 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001414:	23e0      	movs	r3, #224	; 0xe0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800141e:	4313      	orrs	r3, r2
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a65      	ldr	r2, [pc, #404]	; (80015c4 <HAL_ADC_Init+0x33c>)
 800142e:	4013      	ands	r3, r2
 8001430:	0019      	movs	r1, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	430a      	orrs	r2, r1
 800143a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	0f9b      	lsrs	r3, r3, #30
 8001442:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001448:	4313      	orrs	r3, r2
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4313      	orrs	r3, r2
 800144e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	223c      	movs	r2, #60	; 0x3c
 8001454:	5c9b      	ldrb	r3, [r3, r2]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d111      	bne.n	800147e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	0f9b      	lsrs	r3, r3, #30
 8001460:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001466:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800146c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001472:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	4313      	orrs	r3, r2
 8001478:	2201      	movs	r2, #1
 800147a:	4313      	orrs	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <HAL_ADC_Init+0x340>)
 8001486:	4013      	ands	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	430a      	orrs	r2, r1
 8001492:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	23c0      	movs	r3, #192	; 0xc0
 800149a:	061b      	lsls	r3, r3, #24
 800149c:	429a      	cmp	r2, r3
 800149e:	d018      	beq.n	80014d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	05db      	lsls	r3, r3, #23
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d012      	beq.n	80014d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	061b      	lsls	r3, r3, #24
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d00c      	beq.n	80014d2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80014b8:	4b44      	ldr	r3, [pc, #272]	; (80015cc <HAL_ADC_Init+0x344>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a44      	ldr	r2, [pc, #272]	; (80015d0 <HAL_ADC_Init+0x348>)
 80014be:	4013      	ands	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	23f0      	movs	r3, #240	; 0xf0
 80014c8:	039b      	lsls	r3, r3, #14
 80014ca:	401a      	ands	r2, r3
 80014cc:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <HAL_ADC_Init+0x344>)
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014da:	001a      	movs	r2, r3
 80014dc:	2100      	movs	r1, #0
 80014de:	f7ff fdbe 	bl	800105e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ea:	493a      	ldr	r1, [pc, #232]	; (80015d4 <HAL_ADC_Init+0x34c>)
 80014ec:	001a      	movs	r2, r3
 80014ee:	f7ff fdb6 	bl	800105e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2110      	movs	r1, #16
 8001506:	4249      	negs	r1, r1
 8001508:	430a      	orrs	r2, r1
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
 800150c:	e018      	b.n	8001540 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691a      	ldr	r2, [r3, #16]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	039b      	lsls	r3, r3, #14
 8001516:	429a      	cmp	r2, r3
 8001518:	d112      	bne.n	8001540 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	3b01      	subs	r3, #1
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	221c      	movs	r2, #28
 800152a:	4013      	ands	r3, r2
 800152c:	2210      	movs	r2, #16
 800152e:	4252      	negs	r2, r2
 8001530:	409a      	lsls	r2, r3
 8001532:	0011      	movs	r1, r2
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2100      	movs	r1, #0
 8001546:	0018      	movs	r0, r3
 8001548:	f7ff fda6 	bl	8001098 <LL_ADC_GetSamplingTimeCommonChannels>
 800154c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001552:	429a      	cmp	r2, r3
 8001554:	d10b      	bne.n	800156e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	2203      	movs	r2, #3
 8001562:	4393      	bics	r3, r2
 8001564:	2201      	movs	r2, #1
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800156c:	e01c      	b.n	80015a8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	2212      	movs	r2, #18
 8001574:	4393      	bics	r3, r2
 8001576:	2210      	movs	r2, #16
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	2201      	movs	r2, #1
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800158a:	231f      	movs	r3, #31
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001592:	e009      	b.n	80015a8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	2210      	movs	r2, #16
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015a0:	231f      	movs	r3, #31
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80015a8:	231f      	movs	r3, #31
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	781b      	ldrb	r3, [r3, #0]
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b008      	add	sp, #32
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	20000000 	.word	0x20000000
 80015bc:	00030d40 	.word	0x00030d40
 80015c0:	fffffefd 	.word	0xfffffefd
 80015c4:	fffe0201 	.word	0xfffe0201
 80015c8:	1ffffc02 	.word	0x1ffffc02
 80015cc:	40012708 	.word	0x40012708
 80015d0:	ffc3ffff 	.word	0xffc3ffff
 80015d4:	07ffff04 	.word	0x07ffff04

080015d8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff fe3d 	bl	8001264 <LL_ADC_REG_IsConversionOngoing>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d135      	bne.n	800165a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2254      	movs	r2, #84	; 0x54
 80015f2:	5c9b      	ldrb	r3, [r3, r2]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_ADC_Start+0x24>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e035      	b.n	8001668 <HAL_ADC_Start+0x90>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2254      	movs	r2, #84	; 0x54
 8001600:	2101      	movs	r1, #1
 8001602:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001604:	250f      	movs	r5, #15
 8001606:	197c      	adds	r4, r7, r5
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	0018      	movs	r0, r3
 800160c:	f000 faaa 	bl	8001b64 <ADC_Enable>
 8001610:	0003      	movs	r3, r0
 8001612:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001614:	197b      	adds	r3, r7, r5
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d119      	bne.n	8001650 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	4a13      	ldr	r2, [pc, #76]	; (8001670 <HAL_ADC_Start+0x98>)
 8001622:	4013      	ands	r3, r2
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	0052      	lsls	r2, r2, #1
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	221c      	movs	r2, #28
 800163a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2254      	movs	r2, #84	; 0x54
 8001640:	2100      	movs	r1, #0
 8001642:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	0018      	movs	r0, r3
 800164a:	f7ff fdf9 	bl	8001240 <LL_ADC_REG_StartConversion>
 800164e:	e008      	b.n	8001662 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2254      	movs	r2, #84	; 0x54
 8001654:	2100      	movs	r1, #0
 8001656:	5499      	strb	r1, [r3, r2]
 8001658:	e003      	b.n	8001662 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800165a:	230f      	movs	r3, #15
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	2202      	movs	r2, #2
 8001660:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001662:	230f      	movs	r3, #15
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	781b      	ldrb	r3, [r3, #0]
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b004      	add	sp, #16
 800166e:	bdb0      	pop	{r4, r5, r7, pc}
 8001670:	fffff0fe 	.word	0xfffff0fe

08001674 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	2b08      	cmp	r3, #8
 8001684:	d102      	bne.n	800168c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001686:	2308      	movs	r3, #8
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	e00f      	b.n	80016ac <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2201      	movs	r2, #1
 8001694:	4013      	ands	r3, r2
 8001696:	d007      	beq.n	80016a8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	2220      	movs	r2, #32
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e072      	b.n	800178e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80016a8:	2304      	movs	r3, #4
 80016aa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016ac:	f7ff fc96 	bl	8000fdc <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80016b4:	e01f      	b.n	80016f6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	d01c      	beq.n	80016f6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016bc:	f7ff fc8e 	bl	8000fdc <HAL_GetTick>
 80016c0:	0002      	movs	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d302      	bcc.n	80016d2 <HAL_ADC_PollForConversion+0x5e>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d111      	bne.n	80016f6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	4013      	ands	r3, r2
 80016dc:	d10b      	bne.n	80016f6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	2204      	movs	r2, #4
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2254      	movs	r2, #84	; 0x54
 80016ee:	2100      	movs	r1, #0
 80016f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e04b      	b.n	800178e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4013      	ands	r3, r2
 8001700:	d0d9      	beq.n	80016b6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff fcd6 	bl	80010c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d02e      	beq.n	800177c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7e9b      	ldrb	r3, [r3, #26]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d12a      	bne.n	800177c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2208      	movs	r2, #8
 800172e:	4013      	ands	r3, r2
 8001730:	2b08      	cmp	r3, #8
 8001732:	d123      	bne.n	800177c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0018      	movs	r0, r3
 800173a:	f7ff fd93 	bl	8001264 <LL_ADC_REG_IsConversionOngoing>
 800173e:	1e03      	subs	r3, r0, #0
 8001740:	d110      	bne.n	8001764 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	210c      	movs	r1, #12
 800174e:	438a      	bics	r2, r1
 8001750:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_ADC_PollForConversion+0x124>)
 8001758:	4013      	ands	r3, r2
 800175a:	2201      	movs	r2, #1
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	659a      	str	r2, [r3, #88]	; 0x58
 8001762:	e00b      	b.n	800177c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	2220      	movs	r2, #32
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001774:	2201      	movs	r2, #1
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7e1b      	ldrb	r3, [r3, #24]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d103      	bne.n	800178c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	220c      	movs	r2, #12
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b004      	add	sp, #16
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	fffffefe 	.word	0xfffffefe

0800179c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80017aa:	0018      	movs	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b002      	add	sp, #8
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017be:	2317      	movs	r3, #23
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2254      	movs	r2, #84	; 0x54
 80017ce:	5c9b      	ldrb	r3, [r3, r2]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x24>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e1c0      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x3a6>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2254      	movs	r2, #84	; 0x54
 80017dc:	2101      	movs	r1, #1
 80017de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff fd3d 	bl	8001264 <LL_ADC_REG_IsConversionOngoing>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d000      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0x3c>
 80017ee:	e1a3      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d100      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x46>
 80017f8:	e143      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	061b      	lsls	r3, r3, #24
 8001802:	429a      	cmp	r2, r3
 8001804:	d004      	beq.n	8001810 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800180a:	4ac1      	ldr	r2, [pc, #772]	; (8001b10 <HAL_ADC_ConfigChannel+0x35c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d108      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0019      	movs	r1, r3
 800181a:	0010      	movs	r0, r2
 800181c:	f7ff fc84 	bl	8001128 <LL_ADC_REG_SetSequencerChAdd>
 8001820:	e0c9      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	211f      	movs	r1, #31
 800182c:	400b      	ands	r3, r1
 800182e:	210f      	movs	r1, #15
 8001830:	4099      	lsls	r1, r3
 8001832:	000b      	movs	r3, r1
 8001834:	43db      	mvns	r3, r3
 8001836:	4013      	ands	r3, r2
 8001838:	0019      	movs	r1, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	035b      	lsls	r3, r3, #13
 8001840:	0b5b      	lsrs	r3, r3, #13
 8001842:	d105      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x9c>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0e9b      	lsrs	r3, r3, #26
 800184a:	221f      	movs	r2, #31
 800184c:	4013      	ands	r3, r2
 800184e:	e098      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2201      	movs	r2, #1
 8001856:	4013      	ands	r3, r2
 8001858:	d000      	beq.n	800185c <HAL_ADC_ConfigChannel+0xa8>
 800185a:	e091      	b.n	8001980 <HAL_ADC_ConfigChannel+0x1cc>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2202      	movs	r2, #2
 8001862:	4013      	ands	r3, r2
 8001864:	d000      	beq.n	8001868 <HAL_ADC_ConfigChannel+0xb4>
 8001866:	e089      	b.n	800197c <HAL_ADC_ConfigChannel+0x1c8>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2204      	movs	r2, #4
 800186e:	4013      	ands	r3, r2
 8001870:	d000      	beq.n	8001874 <HAL_ADC_ConfigChannel+0xc0>
 8001872:	e081      	b.n	8001978 <HAL_ADC_ConfigChannel+0x1c4>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2208      	movs	r2, #8
 800187a:	4013      	ands	r3, r2
 800187c:	d000      	beq.n	8001880 <HAL_ADC_ConfigChannel+0xcc>
 800187e:	e079      	b.n	8001974 <HAL_ADC_ConfigChannel+0x1c0>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2210      	movs	r2, #16
 8001886:	4013      	ands	r3, r2
 8001888:	d000      	beq.n	800188c <HAL_ADC_ConfigChannel+0xd8>
 800188a:	e071      	b.n	8001970 <HAL_ADC_ConfigChannel+0x1bc>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2220      	movs	r2, #32
 8001892:	4013      	ands	r3, r2
 8001894:	d000      	beq.n	8001898 <HAL_ADC_ConfigChannel+0xe4>
 8001896:	e069      	b.n	800196c <HAL_ADC_ConfigChannel+0x1b8>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2240      	movs	r2, #64	; 0x40
 800189e:	4013      	ands	r3, r2
 80018a0:	d000      	beq.n	80018a4 <HAL_ADC_ConfigChannel+0xf0>
 80018a2:	e061      	b.n	8001968 <HAL_ADC_ConfigChannel+0x1b4>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2280      	movs	r2, #128	; 0x80
 80018aa:	4013      	ands	r3, r2
 80018ac:	d000      	beq.n	80018b0 <HAL_ADC_ConfigChannel+0xfc>
 80018ae:	e059      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1b0>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4013      	ands	r3, r2
 80018ba:	d151      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1ac>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4013      	ands	r3, r2
 80018c6:	d149      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1a8>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4013      	ands	r3, r2
 80018d2:	d141      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1a4>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	4013      	ands	r3, r2
 80018de:	d139      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x1a0>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	015b      	lsls	r3, r3, #5
 80018e8:	4013      	ands	r3, r2
 80018ea:	d131      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x19c>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	019b      	lsls	r3, r3, #6
 80018f4:	4013      	ands	r3, r2
 80018f6:	d129      	bne.n	800194c <HAL_ADC_ConfigChannel+0x198>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	01db      	lsls	r3, r3, #7
 8001900:	4013      	ands	r3, r2
 8001902:	d121      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x194>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	4013      	ands	r3, r2
 800190e:	d119      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x190>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	4013      	ands	r3, r2
 800191a:	d111      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x18c>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	029b      	lsls	r3, r3, #10
 8001924:	4013      	ands	r3, r2
 8001926:	d109      	bne.n	800193c <HAL_ADC_ConfigChannel+0x188>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	02db      	lsls	r3, r3, #11
 8001930:	4013      	ands	r3, r2
 8001932:	d001      	beq.n	8001938 <HAL_ADC_ConfigChannel+0x184>
 8001934:	2312      	movs	r3, #18
 8001936:	e024      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001938:	2300      	movs	r3, #0
 800193a:	e022      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 800193c:	2311      	movs	r3, #17
 800193e:	e020      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001940:	2310      	movs	r3, #16
 8001942:	e01e      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001944:	230f      	movs	r3, #15
 8001946:	e01c      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001948:	230e      	movs	r3, #14
 800194a:	e01a      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 800194c:	230d      	movs	r3, #13
 800194e:	e018      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001950:	230c      	movs	r3, #12
 8001952:	e016      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001954:	230b      	movs	r3, #11
 8001956:	e014      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001958:	230a      	movs	r3, #10
 800195a:	e012      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 800195c:	2309      	movs	r3, #9
 800195e:	e010      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001960:	2308      	movs	r3, #8
 8001962:	e00e      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001964:	2307      	movs	r3, #7
 8001966:	e00c      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001968:	2306      	movs	r3, #6
 800196a:	e00a      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 800196c:	2305      	movs	r3, #5
 800196e:	e008      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001970:	2304      	movs	r3, #4
 8001972:	e006      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001974:	2303      	movs	r3, #3
 8001976:	e004      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001978:	2302      	movs	r3, #2
 800197a:	e002      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ce>
 8001980:	2300      	movs	r3, #0
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	6852      	ldr	r2, [r2, #4]
 8001986:	201f      	movs	r0, #31
 8001988:	4002      	ands	r2, r0
 800198a:	4093      	lsls	r3, r2
 800198c:	000a      	movs	r2, r1
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d808      	bhi.n	80019b6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	001a      	movs	r2, r3
 80019b2:	f7ff fb99 	bl	80010e8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6819      	ldr	r1, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	001a      	movs	r2, r3
 80019c4:	f7ff fbd4 	bl	8001170 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db00      	blt.n	80019d2 <HAL_ADC_ConfigChannel+0x21e>
 80019d0:	e0bc      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019d2:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_ADC_ConfigChannel+0x360>)
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7ff fb35 	bl	8001044 <LL_ADC_GetCommonPathInternalCh>
 80019da:	0003      	movs	r3, r0
 80019dc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a4d      	ldr	r2, [pc, #308]	; (8001b18 <HAL_ADC_ConfigChannel+0x364>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d122      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019f0:	d11d      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	0412      	lsls	r2, r2, #16
 80019f8:	4313      	orrs	r3, r2
 80019fa:	4a46      	ldr	r2, [pc, #280]	; (8001b14 <HAL_ADC_ConfigChannel+0x360>)
 80019fc:	0019      	movs	r1, r3
 80019fe:	0010      	movs	r0, r2
 8001a00:	f7ff fb0c 	bl	800101c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a04:	4b45      	ldr	r3, [pc, #276]	; (8001b1c <HAL_ADC_ConfigChannel+0x368>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4945      	ldr	r1, [pc, #276]	; (8001b20 <HAL_ADC_ConfigChannel+0x36c>)
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7fe fb8c 	bl	8000128 <__udivsi3>
 8001a10:	0003      	movs	r3, r0
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	0013      	movs	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	189b      	adds	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a1e:	e002      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f9      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a2c:	e08e      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a3c      	ldr	r2, [pc, #240]	; (8001b24 <HAL_ADC_ConfigChannel+0x370>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d10e      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x2a2>
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	045b      	lsls	r3, r3, #17
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d109      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	0452      	lsls	r2, r2, #17
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	4a32      	ldr	r2, [pc, #200]	; (8001b14 <HAL_ADC_ConfigChannel+0x360>)
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	0010      	movs	r0, r2
 8001a50:	f7ff fae4 	bl	800101c <LL_ADC_SetCommonPathInternalCh>
 8001a54:	e07a      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a33      	ldr	r2, [pc, #204]	; (8001b28 <HAL_ADC_ConfigChannel+0x374>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d000      	beq.n	8001a62 <HAL_ADC_ConfigChannel+0x2ae>
 8001a60:	e074      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	03db      	lsls	r3, r3, #15
 8001a68:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a6a:	d000      	beq.n	8001a6e <HAL_ADC_ConfigChannel+0x2ba>
 8001a6c:	e06e      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	03d2      	lsls	r2, r2, #15
 8001a74:	4313      	orrs	r3, r2
 8001a76:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_ADC_ConfigChannel+0x360>)
 8001a78:	0019      	movs	r1, r3
 8001a7a:	0010      	movs	r0, r2
 8001a7c:	f7ff face 	bl	800101c <LL_ADC_SetCommonPathInternalCh>
 8001a80:	e064      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d004      	beq.n	8001a98 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a92:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <HAL_ADC_ConfigChannel+0x35c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d107      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	f7ff fb51 	bl	800114a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da4d      	bge.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_ADC_ConfigChannel+0x360>)
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f7ff fac6 	bl	8001044 <LL_ADC_GetCommonPathInternalCh>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <HAL_ADC_ConfigChannel+0x364>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d108      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_ADC_ConfigChannel+0x378>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_ADC_ConfigChannel+0x360>)
 8001ace:	0019      	movs	r1, r3
 8001ad0:	0010      	movs	r0, r2
 8001ad2:	f7ff faa3 	bl	800101c <LL_ADC_SetCommonPathInternalCh>
 8001ad6:	e039      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <HAL_ADC_ConfigChannel+0x370>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d108      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <HAL_ADC_ConfigChannel+0x37c>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_ADC_ConfigChannel+0x360>)
 8001aea:	0019      	movs	r1, r3
 8001aec:	0010      	movs	r0, r2
 8001aee:	f7ff fa95 	bl	800101c <LL_ADC_SetCommonPathInternalCh>
 8001af2:	e02b      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <HAL_ADC_ConfigChannel+0x374>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d126      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <HAL_ADC_ConfigChannel+0x380>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <HAL_ADC_ConfigChannel+0x360>)
 8001b06:	0019      	movs	r1, r3
 8001b08:	0010      	movs	r0, r2
 8001b0a:	f7ff fa87 	bl	800101c <LL_ADC_SetCommonPathInternalCh>
 8001b0e:	e01d      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
 8001b10:	80000004 	.word	0x80000004
 8001b14:	40012708 	.word	0x40012708
 8001b18:	b0001000 	.word	0xb0001000
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	00030d40 	.word	0x00030d40
 8001b24:	b8004000 	.word	0xb8004000
 8001b28:	b4002000 	.word	0xb4002000
 8001b2c:	ff7fffff 	.word	0xff7fffff
 8001b30:	feffffff 	.word	0xfeffffff
 8001b34:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b44:	2317      	movs	r3, #23
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2254      	movs	r2, #84	; 0x54
 8001b50:	2100      	movs	r1, #0
 8001b52:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001b54:	2317      	movs	r3, #23
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	781b      	ldrb	r3, [r3, #0]
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b006      	add	sp, #24
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)

08001b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff fb51 	bl	800121c <LL_ADC_IsEnabled>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d000      	beq.n	8001b80 <ADC_Enable+0x1c>
 8001b7e:	e069      	b.n	8001c54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	4a36      	ldr	r2, [pc, #216]	; (8001c60 <ADC_Enable+0xfc>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d00d      	beq.n	8001ba8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	2210      	movs	r2, #16
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e056      	b.n	8001c56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7ff fb23 	bl	80011f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <ADC_Enable+0x100>)
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff fa45 	bl	8001044 <LL_ADC_GetCommonPathInternalCh>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	041b      	lsls	r3, r3, #16
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d00f      	beq.n	8001be4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc4:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <ADC_Enable+0x104>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4928      	ldr	r1, [pc, #160]	; (8001c6c <ADC_Enable+0x108>)
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7fe faac 	bl	8000128 <__udivsi3>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bd6:	e002      	b.n	8001bde <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f9      	bne.n	8001bd8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7e5b      	ldrb	r3, [r3, #25]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d033      	beq.n	8001c54 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001bec:	f7ff f9f6 	bl	8000fdc <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bf4:	e027      	b.n	8001c46 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f7ff fb0e 	bl	800121c <LL_ADC_IsEnabled>
 8001c00:	1e03      	subs	r3, r0, #0
 8001c02:	d104      	bne.n	8001c0e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff faf5 	bl	80011f8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c0e:	f7ff f9e5 	bl	8000fdc <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d914      	bls.n	8001c46 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2201      	movs	r2, #1
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d00d      	beq.n	8001c46 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	2210      	movs	r2, #16
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e007      	b.n	8001c56 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d1d0      	bne.n	8001bf6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b004      	add	sp, #16
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	80000017 	.word	0x80000017
 8001c64:	40012708 	.word	0x40012708
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	00030d40 	.word	0x00030d40

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	0002      	movs	r2, r0
 8001c78:	1dfb      	adds	r3, r7, #7
 8001c7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	1dfb      	adds	r3, r7, #7
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b7f      	cmp	r3, #127	; 0x7f
 8001c82:	d809      	bhi.n	8001c98 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	001a      	movs	r2, r3
 8001c8a:	231f      	movs	r3, #31
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_EnableIRQ+0x30>)
 8001c90:	2101      	movs	r1, #1
 8001c92:	4091      	lsls	r1, r2
 8001c94:	000a      	movs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	0002      	movs	r2, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	1dfb      	adds	r3, r7, #7
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cb8:	d828      	bhi.n	8001d0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cba:	4a2f      	ldr	r2, [pc, #188]	; (8001d78 <__NVIC_SetPriority+0xd4>)
 8001cbc:	1dfb      	adds	r3, r7, #7
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	33c0      	adds	r3, #192	; 0xc0
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	589b      	ldr	r3, [r3, r2]
 8001cca:	1dfa      	adds	r2, r7, #7
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	0011      	movs	r1, r2
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	00d2      	lsls	r2, r2, #3
 8001cd6:	21ff      	movs	r1, #255	; 0xff
 8001cd8:	4091      	lsls	r1, r2
 8001cda:	000a      	movs	r2, r1
 8001cdc:	43d2      	mvns	r2, r2
 8001cde:	401a      	ands	r2, r3
 8001ce0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	22ff      	movs	r2, #255	; 0xff
 8001ce8:	401a      	ands	r2, r3
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	4003      	ands	r3, r0
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cf8:	481f      	ldr	r0, [pc, #124]	; (8001d78 <__NVIC_SetPriority+0xd4>)
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b25b      	sxtb	r3, r3
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	430a      	orrs	r2, r1
 8001d04:	33c0      	adds	r3, #192	; 0xc0
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d0a:	e031      	b.n	8001d70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <__NVIC_SetPriority+0xd8>)
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	0019      	movs	r1, r3
 8001d14:	230f      	movs	r3, #15
 8001d16:	400b      	ands	r3, r1
 8001d18:	3b08      	subs	r3, #8
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3306      	adds	r3, #6
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	18d3      	adds	r3, r2, r3
 8001d22:	3304      	adds	r3, #4
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	1dfa      	adds	r2, r7, #7
 8001d28:	7812      	ldrb	r2, [r2, #0]
 8001d2a:	0011      	movs	r1, r2
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	400a      	ands	r2, r1
 8001d30:	00d2      	lsls	r2, r2, #3
 8001d32:	21ff      	movs	r1, #255	; 0xff
 8001d34:	4091      	lsls	r1, r2
 8001d36:	000a      	movs	r2, r1
 8001d38:	43d2      	mvns	r2, r2
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	019b      	lsls	r3, r3, #6
 8001d42:	22ff      	movs	r2, #255	; 0xff
 8001d44:	401a      	ands	r2, r3
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	4003      	ands	r3, r0
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d54:	4809      	ldr	r0, [pc, #36]	; (8001d7c <__NVIC_SetPriority+0xd8>)
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	001c      	movs	r4, r3
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	4023      	ands	r3, r4
 8001d60:	3b08      	subs	r3, #8
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	430a      	orrs	r2, r1
 8001d66:	3306      	adds	r3, #6
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	18c3      	adds	r3, r0, r3
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	601a      	str	r2, [r3, #0]
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b003      	add	sp, #12
 8001d76:	bd90      	pop	{r4, r7, pc}
 8001d78:	e000e100 	.word	0xe000e100
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	1e5a      	subs	r2, r3, #1
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	045b      	lsls	r3, r3, #17
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d301      	bcc.n	8001d98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d94:	2301      	movs	r3, #1
 8001d96:	e010      	b.n	8001dba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <SysTick_Config+0x44>)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	3a01      	subs	r2, #1
 8001d9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da0:	2301      	movs	r3, #1
 8001da2:	425b      	negs	r3, r3
 8001da4:	2103      	movs	r1, #3
 8001da6:	0018      	movs	r0, r3
 8001da8:	f7ff ff7c 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <SysTick_Config+0x44>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <SysTick_Config+0x44>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b002      	add	sp, #8
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	1c02      	adds	r2, r0, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	0011      	movs	r1, r2
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff ff5d 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b004      	add	sp, #16
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	0002      	movs	r2, r0
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff ff33 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b002      	add	sp, #8
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff ffaf 	bl	8001d80 <SysTick_Config>
 8001e22:	0003      	movs	r3, r0
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b002      	add	sp, #8
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3a:	e147      	b.n	80020cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4091      	lsls	r1, r2
 8001e46:	000a      	movs	r2, r1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d100      	bne.n	8001e54 <HAL_GPIO_Init+0x28>
 8001e52:	e138      	b.n	80020c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d005      	beq.n	8001e6c <HAL_GPIO_Init+0x40>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2203      	movs	r2, #3
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d130      	bne.n	8001ece <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	0013      	movs	r3, r2
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	2201      	movs	r2, #1
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	0013      	movs	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d017      	beq.n	8001f0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	0013      	movs	r3, r2
 8001eea:	43da      	mvns	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	409a      	lsls	r2, r3
 8001efc:	0013      	movs	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d123      	bne.n	8001f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	58d3      	ldr	r3, [r2, r3]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2207      	movs	r2, #7
 8001f28:	4013      	ands	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	0013      	movs	r3, r2
 8001f32:	43da      	mvns	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2107      	movs	r1, #7
 8001f42:	400b      	ands	r3, r1
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	409a      	lsls	r2, r3
 8001f48:	0013      	movs	r3, r2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	6939      	ldr	r1, [r7, #16]
 8001f5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	409a      	lsls	r2, r3
 8001f84:	0013      	movs	r3, r2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	23c0      	movs	r3, #192	; 0xc0
 8001f98:	029b      	lsls	r3, r3, #10
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d100      	bne.n	8001fa0 <HAL_GPIO_Init+0x174>
 8001f9e:	e092      	b.n	80020c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001fa0:	4a50      	ldr	r2, [pc, #320]	; (80020e4 <HAL_GPIO_Init+0x2b8>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3318      	adds	r3, #24
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	589b      	ldr	r3, [r3, r2]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	0013      	movs	r3, r2
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	23a0      	movs	r3, #160	; 0xa0
 8001fc8:	05db      	lsls	r3, r3, #23
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x1ca>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a45      	ldr	r2, [pc, #276]	; (80020e8 <HAL_GPIO_Init+0x2bc>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x1c6>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a44      	ldr	r2, [pc, #272]	; (80020ec <HAL_GPIO_Init+0x2c0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x1c2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <HAL_GPIO_Init+0x2c4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x1be>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x1cc>
 8001fea:	2305      	movs	r3, #5
 8001fec:	e004      	b.n	8001ff8 <HAL_GPIO_Init+0x1cc>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e002      	b.n	8001ff8 <HAL_GPIO_Init+0x1cc>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_Init+0x1cc>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	2103      	movs	r1, #3
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	00d2      	lsls	r2, r2, #3
 8002000:	4093      	lsls	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002008:	4936      	ldr	r1, [pc, #216]	; (80020e4 <HAL_GPIO_Init+0x2b8>)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3318      	adds	r3, #24
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <HAL_GPIO_Init+0x2b8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43da      	mvns	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	035b      	lsls	r3, r3, #13
 800202e:	4013      	ands	r3, r2
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_GPIO_Init+0x2b8>)
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_GPIO_Init+0x2b8>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43da      	mvns	r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	039b      	lsls	r3, r3, #14
 8002058:	4013      	ands	r3, r2
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <HAL_GPIO_Init+0x2b8>)
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_GPIO_Init+0x2b8>)
 800206c:	2384      	movs	r3, #132	; 0x84
 800206e:	58d3      	ldr	r3, [r2, r3]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43da      	mvns	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	4013      	ands	r3, r2
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002090:	4914      	ldr	r1, [pc, #80]	; (80020e4 <HAL_GPIO_Init+0x2b8>)
 8002092:	2284      	movs	r2, #132	; 0x84
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <HAL_GPIO_Init+0x2b8>)
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	58d3      	ldr	r3, [r2, r3]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43da      	mvns	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	025b      	lsls	r3, r3, #9
 80020b2:	4013      	ands	r3, r2
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020be:	4909      	ldr	r1, [pc, #36]	; (80020e4 <HAL_GPIO_Init+0x2b8>)
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	40da      	lsrs	r2, r3
 80020d4:	1e13      	subs	r3, r2, #0
 80020d6:	d000      	beq.n	80020da <HAL_GPIO_Init+0x2ae>
 80020d8:	e6b0      	b.n	8001e3c <HAL_GPIO_Init+0x10>
  }
}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b006      	add	sp, #24
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021800 	.word	0x40021800
 80020e8:	50000400 	.word	0x50000400
 80020ec:	50000800 	.word	0x50000800
 80020f0:	50000c00 	.word	0x50000c00

080020f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	0008      	movs	r0, r1
 80020fe:	0011      	movs	r1, r2
 8002100:	1cbb      	adds	r3, r7, #2
 8002102:	1c02      	adds	r2, r0, #0
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	1c7b      	adds	r3, r7, #1
 8002108:	1c0a      	adds	r2, r1, #0
 800210a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800210c:	1c7b      	adds	r3, r7, #1
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002114:	1cbb      	adds	r3, r7, #2
 8002116:	881a      	ldrh	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800211c:	e003      	b.n	8002126 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800211e:	1cbb      	adds	r3, r7, #2
 8002120:	881a      	ldrh	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	0002      	movs	r2, r0
 8002138:	1dbb      	adds	r3, r7, #6
 800213a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	1dba      	adds	r2, r7, #6
 8002142:	8812      	ldrh	r2, [r2, #0]
 8002144:	4013      	ands	r3, r2
 8002146:	d008      	beq.n	800215a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800214a:	1dba      	adds	r2, r7, #6
 800214c:	8812      	ldrh	r2, [r2, #0]
 800214e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002150:	1dbb      	adds	r3, r7, #6
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	0018      	movs	r0, r3
 8002156:	f000 f815 	bl	8002184 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	1dba      	adds	r2, r7, #6
 8002160:	8812      	ldrh	r2, [r2, #0]
 8002162:	4013      	ands	r3, r2
 8002164:	d008      	beq.n	8002178 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002168:	1dba      	adds	r2, r7, #6
 800216a:	8812      	ldrh	r2, [r2, #0]
 800216c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800216e:	1dbb      	adds	r3, r7, #6
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	0018      	movs	r0, r3
 8002174:	f000 f810 	bl	8002198 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021800 	.word	0x40021800

08002184 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	0002      	movs	r2, r0
 800218c:	1dbb      	adds	r3, r7, #6
 800218e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	0002      	movs	r2, r0
 80021a0:	1dbb      	adds	r3, r7, #6
 80021a2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d11f      	bne.n	8002210 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	0013      	movs	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	189b      	adds	r3, r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4912      	ldr	r1, [pc, #72]	; (8002228 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021de:	0018      	movs	r0, r3
 80021e0:	f7fd ffa2 	bl	8000128 <__udivsi3>
 80021e4:	0003      	movs	r3, r0
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ea:	e008      	b.n	80021fe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e001      	b.n	80021fe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e009      	b.n	8002212 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	401a      	ands	r2, r3
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	429a      	cmp	r2, r3
 800220e:	d0ed      	beq.n	80021ec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b004      	add	sp, #16
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	40007000 	.word	0x40007000
 8002220:	fffff9ff 	.word	0xfffff9ff
 8002224:	20000000 	.word	0x20000000
 8002228:	000f4240 	.word	0x000f4240

0800222c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	23e0      	movs	r3, #224	; 0xe0
 8002236:	01db      	lsls	r3, r3, #7
 8002238:	4013      	ands	r3, r2
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e2fe      	b.n	8002854 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2201      	movs	r2, #1
 800225c:	4013      	ands	r3, r2
 800225e:	d100      	bne.n	8002262 <HAL_RCC_OscConfig+0x1e>
 8002260:	e07c      	b.n	800235c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002262:	4bc3      	ldr	r3, [pc, #780]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2238      	movs	r2, #56	; 0x38
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800226c:	4bc0      	ldr	r3, [pc, #768]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2203      	movs	r2, #3
 8002272:	4013      	ands	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b10      	cmp	r3, #16
 800227a:	d102      	bne.n	8002282 <HAL_RCC_OscConfig+0x3e>
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d002      	beq.n	8002288 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d10b      	bne.n	80022a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	4bb9      	ldr	r3, [pc, #740]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	4013      	ands	r3, r2
 8002292:	d062      	beq.n	800235a <HAL_RCC_OscConfig+0x116>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d15e      	bne.n	800235a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e2d9      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	025b      	lsls	r3, r3, #9
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_OscConfig+0x78>
 80022ac:	4bb0      	ldr	r3, [pc, #704]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4baf      	ldr	r3, [pc, #700]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	0249      	lsls	r1, r1, #9
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e020      	b.n	80022fe <HAL_RCC_OscConfig+0xba>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	23a0      	movs	r3, #160	; 0xa0
 80022c2:	02db      	lsls	r3, r3, #11
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d10e      	bne.n	80022e6 <HAL_RCC_OscConfig+0xa2>
 80022c8:	4ba9      	ldr	r3, [pc, #676]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4ba8      	ldr	r3, [pc, #672]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	02c9      	lsls	r1, r1, #11
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	4ba6      	ldr	r3, [pc, #664]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4ba5      	ldr	r3, [pc, #660]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0249      	lsls	r1, r1, #9
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e00b      	b.n	80022fe <HAL_RCC_OscConfig+0xba>
 80022e6:	4ba2      	ldr	r3, [pc, #648]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4ba1      	ldr	r3, [pc, #644]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80022ec:	49a1      	ldr	r1, [pc, #644]	; (8002574 <HAL_RCC_OscConfig+0x330>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	4b9f      	ldr	r3, [pc, #636]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4b9e      	ldr	r3, [pc, #632]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80022f8:	499f      	ldr	r1, [pc, #636]	; (8002578 <HAL_RCC_OscConfig+0x334>)
 80022fa:	400a      	ands	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d014      	beq.n	8002330 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7fe fe69 	bl	8000fdc <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe fe64 	bl	8000fdc <HAL_GetTick>
 8002314:	0002      	movs	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e298      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002322:	4b93      	ldr	r3, [pc, #588]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	029b      	lsls	r3, r3, #10
 800232a:	4013      	ands	r3, r2
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0xcc>
 800232e:	e015      	b.n	800235c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe fe54 	bl	8000fdc <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233a:	f7fe fe4f 	bl	8000fdc <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e283      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800234c:	4b88      	ldr	r3, [pc, #544]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	029b      	lsls	r3, r3, #10
 8002354:	4013      	ands	r3, r2
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0xf6>
 8002358:	e000      	b.n	800235c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d100      	bne.n	8002368 <HAL_RCC_OscConfig+0x124>
 8002366:	e099      	b.n	800249c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002368:	4b81      	ldr	r3, [pc, #516]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2238      	movs	r2, #56	; 0x38
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002372:	4b7f      	ldr	r3, [pc, #508]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2203      	movs	r2, #3
 8002378:	4013      	ands	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d102      	bne.n	8002388 <HAL_RCC_OscConfig+0x144>
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d002      	beq.n	800238e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d135      	bne.n	80023fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800238e:	4b78      	ldr	r3, [pc, #480]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4013      	ands	r3, r2
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x162>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e256      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b72      	ldr	r3, [pc, #456]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a74      	ldr	r2, [pc, #464]	; (800257c <HAL_RCC_OscConfig+0x338>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	021a      	lsls	r2, r3, #8
 80023b6:	4b6e      	ldr	r3, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d112      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023c2:	4b6b      	ldr	r3, [pc, #428]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <HAL_RCC_OscConfig+0x33c>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	4b67      	ldr	r3, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023d6:	4b66      	ldr	r3, [pc, #408]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0adb      	lsrs	r3, r3, #11
 80023dc:	2207      	movs	r2, #7
 80023de:	4013      	ands	r3, r2
 80023e0:	4a68      	ldr	r2, [pc, #416]	; (8002584 <HAL_RCC_OscConfig+0x340>)
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4b68      	ldr	r3, [pc, #416]	; (8002588 <HAL_RCC_OscConfig+0x344>)
 80023e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023e8:	4b68      	ldr	r3, [pc, #416]	; (800258c <HAL_RCC_OscConfig+0x348>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f7fe fd99 	bl	8000f24 <HAL_InitTick>
 80023f2:	1e03      	subs	r3, r0, #0
 80023f4:	d051      	beq.n	800249a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e22c      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d030      	beq.n	8002464 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002402:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a5e      	ldr	r2, [pc, #376]	; (8002580 <HAL_RCC_OscConfig+0x33c>)
 8002408:	4013      	ands	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	4b57      	ldr	r3, [pc, #348]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002416:	4b56      	ldr	r3, [pc, #344]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b55      	ldr	r3, [pc, #340]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800241c:	2180      	movs	r1, #128	; 0x80
 800241e:	0049      	lsls	r1, r1, #1
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe fdda 	bl	8000fdc <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242e:	f7fe fdd5 	bl	8000fdc <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e209      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002440:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4013      	ands	r3, r2
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244c:	4b48      	ldr	r3, [pc, #288]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a4a      	ldr	r2, [pc, #296]	; (800257c <HAL_RCC_OscConfig+0x338>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	021a      	lsls	r2, r3, #8
 800245c:	4b44      	ldr	r3, [pc, #272]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	e01b      	b.n	800249c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b41      	ldr	r3, [pc, #260]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800246a:	4949      	ldr	r1, [pc, #292]	; (8002590 <HAL_RCC_OscConfig+0x34c>)
 800246c:	400a      	ands	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fdb4 	bl	8000fdc <HAL_GetTick>
 8002474:	0003      	movs	r3, r0
 8002476:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe fdaf 	bl	8000fdc <HAL_GetTick>
 800247e:	0002      	movs	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e1e3      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800248c:	4b38      	ldr	r3, [pc, #224]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4013      	ands	r3, r2
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_OscConfig+0x236>
 8002498:	e000      	b.n	800249c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800249a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2208      	movs	r2, #8
 80024a2:	4013      	ands	r3, r2
 80024a4:	d047      	beq.n	8002536 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024a6:	4b32      	ldr	r3, [pc, #200]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2238      	movs	r2, #56	; 0x38
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b18      	cmp	r3, #24
 80024b0:	d10a      	bne.n	80024c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024b2:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	d03c      	beq.n	8002536 <HAL_RCC_OscConfig+0x2f2>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d138      	bne.n	8002536 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e1c5      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d019      	beq.n	8002504 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80024d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80024d6:	2101      	movs	r1, #1
 80024d8:	430a      	orrs	r2, r1
 80024da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe fd7e 	bl	8000fdc <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e6:	f7fe fd79 	bl	8000fdc <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e1ad      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 80024fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fc:	2202      	movs	r2, #2
 80024fe:	4013      	ands	r3, r2
 8002500:	d0f1      	beq.n	80024e6 <HAL_RCC_OscConfig+0x2a2>
 8002502:	e018      	b.n	8002536 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 8002506:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800250a:	2101      	movs	r1, #1
 800250c:	438a      	bics	r2, r1
 800250e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fd64 	bl	8000fdc <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251a:	f7fe fd5f 	bl	8000fdc <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e193      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800252e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002530:	2202      	movs	r2, #2
 8002532:	4013      	ands	r3, r2
 8002534:	d1f1      	bne.n	800251a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2204      	movs	r2, #4
 800253c:	4013      	ands	r3, r2
 800253e:	d100      	bne.n	8002542 <HAL_RCC_OscConfig+0x2fe>
 8002540:	e0c6      	b.n	80026d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	231f      	movs	r3, #31
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2238      	movs	r2, #56	; 0x38
 8002550:	4013      	ands	r3, r2
 8002552:	2b20      	cmp	r3, #32
 8002554:	d11e      	bne.n	8002594 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCC_OscConfig+0x32c>)
 8002558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255a:	2202      	movs	r2, #2
 800255c:	4013      	ands	r3, r2
 800255e:	d100      	bne.n	8002562 <HAL_RCC_OscConfig+0x31e>
 8002560:	e0b6      	b.n	80026d0 <HAL_RCC_OscConfig+0x48c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d000      	beq.n	800256c <HAL_RCC_OscConfig+0x328>
 800256a:	e0b1      	b.n	80026d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e171      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
 8002570:	40021000 	.word	0x40021000
 8002574:	fffeffff 	.word	0xfffeffff
 8002578:	fffbffff 	.word	0xfffbffff
 800257c:	ffff80ff 	.word	0xffff80ff
 8002580:	ffffc7ff 	.word	0xffffc7ff
 8002584:	00f42400 	.word	0x00f42400
 8002588:	20000000 	.word	0x20000000
 800258c:	20000004 	.word	0x20000004
 8002590:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002594:	4bb1      	ldr	r3, [pc, #708]	; (800285c <HAL_RCC_OscConfig+0x618>)
 8002596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	055b      	lsls	r3, r3, #21
 800259c:	4013      	ands	r3, r2
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_OscConfig+0x360>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x362>
 80025a4:	2300      	movs	r3, #0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d011      	beq.n	80025ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4bac      	ldr	r3, [pc, #688]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80025ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ae:	4bab      	ldr	r3, [pc, #684]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0549      	lsls	r1, r1, #21
 80025b4:	430a      	orrs	r2, r1
 80025b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80025b8:	4ba8      	ldr	r3, [pc, #672]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80025ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	055b      	lsls	r3, r3, #21
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025c6:	231f      	movs	r3, #31
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ce:	4ba4      	ldr	r3, [pc, #656]	; (8002860 <HAL_RCC_OscConfig+0x61c>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4013      	ands	r3, r2
 80025d8:	d11a      	bne.n	8002610 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025da:	4ba1      	ldr	r3, [pc, #644]	; (8002860 <HAL_RCC_OscConfig+0x61c>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4ba0      	ldr	r3, [pc, #640]	; (8002860 <HAL_RCC_OscConfig+0x61c>)
 80025e0:	2180      	movs	r1, #128	; 0x80
 80025e2:	0049      	lsls	r1, r1, #1
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fcf8 	bl	8000fdc <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f2:	f7fe fcf3 	bl	8000fdc <HAL_GetTick>
 80025f6:	0002      	movs	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e127      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002604:	4b96      	ldr	r3, [pc, #600]	; (8002860 <HAL_RCC_OscConfig+0x61c>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4013      	ands	r3, r2
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x3e2>
 8002618:	4b90      	ldr	r3, [pc, #576]	; (800285c <HAL_RCC_OscConfig+0x618>)
 800261a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800261c:	4b8f      	ldr	r3, [pc, #572]	; (800285c <HAL_RCC_OscConfig+0x618>)
 800261e:	2101      	movs	r1, #1
 8002620:	430a      	orrs	r2, r1
 8002622:	65da      	str	r2, [r3, #92]	; 0x5c
 8002624:	e01c      	b.n	8002660 <HAL_RCC_OscConfig+0x41c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b05      	cmp	r3, #5
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x404>
 800262e:	4b8b      	ldr	r3, [pc, #556]	; (800285c <HAL_RCC_OscConfig+0x618>)
 8002630:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002632:	4b8a      	ldr	r3, [pc, #552]	; (800285c <HAL_RCC_OscConfig+0x618>)
 8002634:	2104      	movs	r1, #4
 8002636:	430a      	orrs	r2, r1
 8002638:	65da      	str	r2, [r3, #92]	; 0x5c
 800263a:	4b88      	ldr	r3, [pc, #544]	; (800285c <HAL_RCC_OscConfig+0x618>)
 800263c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800263e:	4b87      	ldr	r3, [pc, #540]	; (800285c <HAL_RCC_OscConfig+0x618>)
 8002640:	2101      	movs	r1, #1
 8002642:	430a      	orrs	r2, r1
 8002644:	65da      	str	r2, [r3, #92]	; 0x5c
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0x41c>
 8002648:	4b84      	ldr	r3, [pc, #528]	; (800285c <HAL_RCC_OscConfig+0x618>)
 800264a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800264c:	4b83      	ldr	r3, [pc, #524]	; (800285c <HAL_RCC_OscConfig+0x618>)
 800264e:	2101      	movs	r1, #1
 8002650:	438a      	bics	r2, r1
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c
 8002654:	4b81      	ldr	r3, [pc, #516]	; (800285c <HAL_RCC_OscConfig+0x618>)
 8002656:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002658:	4b80      	ldr	r3, [pc, #512]	; (800285c <HAL_RCC_OscConfig+0x618>)
 800265a:	2104      	movs	r1, #4
 800265c:	438a      	bics	r2, r1
 800265e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d014      	beq.n	8002692 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fcb8 	bl	8000fdc <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002670:	e009      	b.n	8002686 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcb3 	bl	8000fdc <HAL_GetTick>
 8002676:	0002      	movs	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	4a79      	ldr	r2, [pc, #484]	; (8002864 <HAL_RCC_OscConfig+0x620>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0e6      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002686:	4b75      	ldr	r3, [pc, #468]	; (800285c <HAL_RCC_OscConfig+0x618>)
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	2202      	movs	r2, #2
 800268c:	4013      	ands	r3, r2
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x42e>
 8002690:	e013      	b.n	80026ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe fca3 	bl	8000fdc <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800269a:	e009      	b.n	80026b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe fc9e 	bl	8000fdc <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	4a6f      	ldr	r2, [pc, #444]	; (8002864 <HAL_RCC_OscConfig+0x620>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e0d1      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b0:	4b6a      	ldr	r3, [pc, #424]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	2202      	movs	r2, #2
 80026b6:	4013      	ands	r3, r2
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026ba:	231f      	movs	r3, #31
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026c4:	4b65      	ldr	r3, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80026c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026c8:	4b64      	ldr	r3, [pc, #400]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80026ca:	4967      	ldr	r1, [pc, #412]	; (8002868 <HAL_RCC_OscConfig+0x624>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d100      	bne.n	80026da <HAL_RCC_OscConfig+0x496>
 80026d8:	e0bb      	b.n	8002852 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026da:	4b60      	ldr	r3, [pc, #384]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2238      	movs	r2, #56	; 0x38
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d100      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4a4>
 80026e6:	e07b      	b.n	80027e0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d156      	bne.n	800279e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f0:	4b5a      	ldr	r3, [pc, #360]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80026f6:	495d      	ldr	r1, [pc, #372]	; (800286c <HAL_RCC_OscConfig+0x628>)
 80026f8:	400a      	ands	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fc:	f7fe fc6e 	bl	8000fdc <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002706:	f7fe fc69 	bl	8000fdc <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e09d      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002718:	4b50      	ldr	r3, [pc, #320]	; (800285c <HAL_RCC_OscConfig+0x618>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	049b      	lsls	r3, r3, #18
 8002720:	4013      	ands	r3, r2
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002724:	4b4d      	ldr	r3, [pc, #308]	; (800285c <HAL_RCC_OscConfig+0x618>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a51      	ldr	r2, [pc, #324]	; (8002870 <HAL_RCC_OscConfig+0x62c>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1a      	ldr	r2, [r3, #32]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	431a      	orrs	r2, r3
 8002752:	4b42      	ldr	r3, [pc, #264]	; (800285c <HAL_RCC_OscConfig+0x618>)
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002758:	4b40      	ldr	r3, [pc, #256]	; (800285c <HAL_RCC_OscConfig+0x618>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_RCC_OscConfig+0x618>)
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	0449      	lsls	r1, r1, #17
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_RCC_OscConfig+0x618>)
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	4b3c      	ldr	r3, [pc, #240]	; (800285c <HAL_RCC_OscConfig+0x618>)
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	0549      	lsls	r1, r1, #21
 8002770:	430a      	orrs	r2, r1
 8002772:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fc32 	bl	8000fdc <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277e:	f7fe fc2d 	bl	8000fdc <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e061      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002790:	4b32      	ldr	r3, [pc, #200]	; (800285c <HAL_RCC_OscConfig+0x618>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	049b      	lsls	r3, r3, #18
 8002798:	4013      	ands	r3, r2
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x53a>
 800279c:	e059      	b.n	8002852 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279e:	4b2f      	ldr	r3, [pc, #188]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b2e      	ldr	r3, [pc, #184]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80027a4:	4931      	ldr	r1, [pc, #196]	; (800286c <HAL_RCC_OscConfig+0x628>)
 80027a6:	400a      	ands	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7fe fc17 	bl	8000fdc <HAL_GetTick>
 80027ae:	0003      	movs	r3, r0
 80027b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe fc12 	bl	8000fdc <HAL_GetTick>
 80027b8:	0002      	movs	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e046      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c6:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	049b      	lsls	r3, r3, #18
 80027ce:	4013      	ands	r3, r2
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80027d8:	4926      	ldr	r1, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x630>)
 80027da:	400a      	ands	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	e038      	b.n	8002852 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e033      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_RCC_OscConfig+0x618>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2203      	movs	r2, #3
 80027f6:	401a      	ands	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d126      	bne.n	800284e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2270      	movs	r2, #112	; 0x70
 8002804:	401a      	ands	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d11f      	bne.n	800284e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	23fe      	movs	r3, #254	; 0xfe
 8002812:	01db      	lsls	r3, r3, #7
 8002814:	401a      	ands	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d116      	bne.n	800284e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	23f8      	movs	r3, #248	; 0xf8
 8002824:	039b      	lsls	r3, r3, #14
 8002826:	401a      	ands	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d10e      	bne.n	800284e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	23e0      	movs	r3, #224	; 0xe0
 8002834:	051b      	lsls	r3, r3, #20
 8002836:	401a      	ands	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	0f5b      	lsrs	r3, r3, #29
 8002844:	075a      	lsls	r2, r3, #29
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	b008      	add	sp, #32
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	40007000 	.word	0x40007000
 8002864:	00001388 	.word	0x00001388
 8002868:	efffffff 	.word	0xefffffff
 800286c:	feffffff 	.word	0xfeffffff
 8002870:	11c1808c 	.word	0x11c1808c
 8002874:	eefefffc 	.word	0xeefefffc

08002878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0e9      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800288c:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2207      	movs	r2, #7
 8002892:	4013      	ands	r3, r2
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d91e      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b73      	ldr	r3, [pc, #460]	; (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2207      	movs	r2, #7
 80028a0:	4393      	bics	r3, r2
 80028a2:	0019      	movs	r1, r3
 80028a4:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fb96 	bl	8000fdc <HAL_GetTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028b4:	e009      	b.n	80028ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b6:	f7fe fb91 	bl	8000fdc <HAL_GetTick>
 80028ba:	0002      	movs	r2, r0
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	4a6a      	ldr	r2, [pc, #424]	; (8002a6c <HAL_RCC_ClockConfig+0x1f4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e0ca      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028ca:	4b67      	ldr	r3, [pc, #412]	; (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2207      	movs	r2, #7
 80028d0:	4013      	ands	r3, r2
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1ee      	bne.n	80028b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2202      	movs	r2, #2
 80028de:	4013      	ands	r3, r2
 80028e0:	d015      	beq.n	800290e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2204      	movs	r2, #4
 80028e8:	4013      	ands	r3, r2
 80028ea:	d006      	beq.n	80028fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028ec:	4b60      	ldr	r3, [pc, #384]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	4b5f      	ldr	r3, [pc, #380]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 80028f2:	21e0      	movs	r1, #224	; 0xe0
 80028f4:	01c9      	lsls	r1, r1, #7
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028fa:	4b5d      	ldr	r3, [pc, #372]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4a5d      	ldr	r2, [pc, #372]	; (8002a74 <HAL_RCC_ClockConfig+0x1fc>)
 8002900:	4013      	ands	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2201      	movs	r2, #1
 8002914:	4013      	ands	r3, r2
 8002916:	d057      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d107      	bne.n	8002930 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	029b      	lsls	r3, r3, #10
 8002928:	4013      	ands	r3, r2
 800292a:	d12b      	bne.n	8002984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e097      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d107      	bne.n	8002948 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002938:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	049b      	lsls	r3, r3, #18
 8002940:	4013      	ands	r3, r2
 8002942:	d11f      	bne.n	8002984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e08b      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d107      	bne.n	8002960 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002950:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4013      	ands	r3, r2
 800295a:	d113      	bne.n	8002984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e07f      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d106      	bne.n	8002976 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002968:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 800296a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296c:	2202      	movs	r2, #2
 800296e:	4013      	ands	r3, r2
 8002970:	d108      	bne.n	8002984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e074      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002976:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2202      	movs	r2, #2
 800297c:	4013      	ands	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e06d      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002984:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2207      	movs	r2, #7
 800298a:	4393      	bics	r3, r2
 800298c:	0019      	movs	r1, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002998:	f7fe fb20 	bl	8000fdc <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a0:	e009      	b.n	80029b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a2:	f7fe fb1b 	bl	8000fdc <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	4a2f      	ldr	r2, [pc, #188]	; (8002a6c <HAL_RCC_ClockConfig+0x1f4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e054      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2238      	movs	r2, #56	; 0x38
 80029bc:	401a      	ands	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d1ec      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2207      	movs	r2, #7
 80029ce:	4013      	ands	r3, r2
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d21e      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2207      	movs	r2, #7
 80029dc:	4393      	bics	r3, r2
 80029de:	0019      	movs	r1, r3
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029e8:	f7fe faf8 	bl	8000fdc <HAL_GetTick>
 80029ec:	0003      	movs	r3, r0
 80029ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029f0:	e009      	b.n	8002a06 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f2:	f7fe faf3 	bl	8000fdc <HAL_GetTick>
 80029f6:	0002      	movs	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <HAL_RCC_ClockConfig+0x1f4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e02c      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2207      	movs	r2, #7
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d1ee      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d009      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <HAL_RCC_ClockConfig+0x200>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a32:	f000 f829 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8002a36:	0001      	movs	r1, r0
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <HAL_RCC_ClockConfig+0x1f8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	220f      	movs	r2, #15
 8002a40:	401a      	ands	r2, r3
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_RCC_ClockConfig+0x204>)
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	58d3      	ldr	r3, [r2, r3]
 8002a48:	221f      	movs	r2, #31
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	000a      	movs	r2, r1
 8002a4e:	40da      	lsrs	r2, r3
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x208>)
 8002a52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_ClockConfig+0x20c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7fe fa63 	bl	8000f24 <HAL_InitTick>
 8002a5e:	0003      	movs	r3, r0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	00001388 	.word	0x00001388
 8002a70:	40021000 	.word	0x40021000
 8002a74:	fffff0ff 	.word	0xfffff0ff
 8002a78:	ffff8fff 	.word	0xffff8fff
 8002a7c:	080048d0 	.word	0x080048d0
 8002a80:	20000000 	.word	0x20000000
 8002a84:	20000004 	.word	0x20000004

08002a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a8e:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2238      	movs	r2, #56	; 0x38
 8002a94:	4013      	ands	r3, r2
 8002a96:	d10f      	bne.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a98:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0adb      	lsrs	r3, r3, #11
 8002a9e:	2207      	movs	r2, #7
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	0013      	movs	r3, r2
 8002aa8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002aaa:	6839      	ldr	r1, [r7, #0]
 8002aac:	4835      	ldr	r0, [pc, #212]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002aae:	f7fd fb3b 	bl	8000128 <__udivsi3>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	e05d      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab8:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2238      	movs	r2, #56	; 0x38
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d102      	bne.n	8002aca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ac4:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e054      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aca:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2238      	movs	r2, #56	; 0x38
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d138      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ad6:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2203      	movs	r2, #3
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ae0:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	4013      	ands	r3, r2
 8002aea:	3301      	adds	r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d10d      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	4824      	ldr	r0, [pc, #144]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x100>)
 8002af8:	f7fd fb16 	bl	8000128 <__udivsi3>
 8002afc:	0003      	movs	r3, r0
 8002afe:	0019      	movs	r1, r3
 8002b00:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	227f      	movs	r2, #127	; 0x7f
 8002b08:	4013      	ands	r3, r2
 8002b0a:	434b      	muls	r3, r1
 8002b0c:	617b      	str	r3, [r7, #20]
        break;
 8002b0e:	e00d      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	481c      	ldr	r0, [pc, #112]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b14:	f7fd fb08 	bl	8000128 <__udivsi3>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	227f      	movs	r2, #127	; 0x7f
 8002b24:	4013      	ands	r3, r2
 8002b26:	434b      	muls	r3, r1
 8002b28:	617b      	str	r3, [r7, #20]
        break;
 8002b2a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	0f5b      	lsrs	r3, r3, #29
 8002b32:	2207      	movs	r2, #7
 8002b34:	4013      	ands	r3, r2
 8002b36:	3301      	adds	r3, #1
 8002b38:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	6978      	ldr	r0, [r7, #20]
 8002b3e:	f7fd faf3 	bl	8000128 <__udivsi3>
 8002b42:	0003      	movs	r3, r0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	e015      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2238      	movs	r2, #56	; 0x38
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d103      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	e00b      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2238      	movs	r2, #56	; 0x38
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b18      	cmp	r3, #24
 8002b66:	d103      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b68:	23fa      	movs	r3, #250	; 0xfa
 8002b6a:	01db      	lsls	r3, r3, #7
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	e001      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b74:	693b      	ldr	r3, [r7, #16]
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b006      	add	sp, #24
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	40021000 	.word	0x40021000
 8002b84:	00f42400 	.word	0x00f42400
 8002b88:	007a1200 	.word	0x007a1200

08002b8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b90:	4b02      	ldr	r3, [pc, #8]	; (8002b9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	20000000 	.word	0x20000000

08002ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba0:	b5b0      	push	{r4, r5, r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ba4:	f7ff fff2 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002ba8:	0004      	movs	r4, r0
 8002baa:	f7ff fb3f 	bl	800222c <LL_RCC_GetAPB1Prescaler>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	0b1a      	lsrs	r2, r3, #12
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bb4:	0092      	lsls	r2, r2, #2
 8002bb6:	58d3      	ldr	r3, [r2, r3]
 8002bb8:	221f      	movs	r2, #31
 8002bba:	4013      	ands	r3, r2
 8002bbc:	40dc      	lsrs	r4, r3
 8002bbe:	0023      	movs	r3, r4
}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	08004910 	.word	0x08004910

08002bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002bd4:	2313      	movs	r3, #19
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bdc:	2312      	movs	r3, #18
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	029b      	lsls	r3, r3, #10
 8002bec:	4013      	ands	r3, r2
 8002bee:	d100      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002bf0:	e0a3      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	2011      	movs	r0, #17
 8002bf4:	183b      	adds	r3, r7, r0
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfa:	4bc3      	ldr	r3, [pc, #780]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	055b      	lsls	r3, r3, #21
 8002c02:	4013      	ands	r3, r2
 8002c04:	d110      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	4bc0      	ldr	r3, [pc, #768]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c0a:	4bbf      	ldr	r3, [pc, #764]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	0549      	lsls	r1, r1, #21
 8002c10:	430a      	orrs	r2, r1
 8002c12:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c14:	4bbc      	ldr	r3, [pc, #752]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	055b      	lsls	r3, r3, #21
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c22:	183b      	adds	r3, r7, r0
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c28:	4bb8      	ldr	r3, [pc, #736]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4bb7      	ldr	r3, [pc, #732]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	0049      	lsls	r1, r1, #1
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c36:	f7fe f9d1 	bl	8000fdc <HAL_GetTick>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c40:	f7fe f9cc 	bl	8000fdc <HAL_GetTick>
 8002c44:	0002      	movs	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d904      	bls.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c4e:	2313      	movs	r3, #19
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	2203      	movs	r2, #3
 8002c54:	701a      	strb	r2, [r3, #0]
        break;
 8002c56:	e005      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c58:	4bac      	ldr	r3, [pc, #688]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	d0ed      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c64:	2313      	movs	r3, #19
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d154      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c6e:	4ba6      	ldr	r3, [pc, #664]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c72:	23c0      	movs	r3, #192	; 0xc0
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d019      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d014      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c8a:	4b9f      	ldr	r3, [pc, #636]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	4aa0      	ldr	r2, [pc, #640]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c94:	4b9c      	ldr	r3, [pc, #624]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c98:	4b9b      	ldr	r3, [pc, #620]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	0249      	lsls	r1, r1, #9
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca2:	4b99      	ldr	r3, [pc, #612]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ca6:	4b98      	ldr	r3, [pc, #608]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca8:	499a      	ldr	r1, [pc, #616]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cae:	4b96      	ldr	r3, [pc, #600]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d016      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f98e 	bl	8000fdc <HAL_GetTick>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc4:	e00c      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe f989 	bl	8000fdc <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	4a91      	ldr	r2, [pc, #580]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d904      	bls.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002cd6:	2313      	movs	r3, #19
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	2203      	movs	r2, #3
 8002cdc:	701a      	strb	r2, [r3, #0]
            break;
 8002cde:	e004      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce0:	4b89      	ldr	r3, [pc, #548]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d0ed      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cea:	2313      	movs	r3, #19
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cf4:	4b84      	ldr	r3, [pc, #528]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	4a85      	ldr	r2, [pc, #532]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d02:	4b81      	ldr	r3, [pc, #516]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d08:	e00c      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d0a:	2312      	movs	r3, #18
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2213      	movs	r2, #19
 8002d10:	18ba      	adds	r2, r7, r2
 8002d12:	7812      	ldrb	r2, [r2, #0]
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	e005      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d18:	2312      	movs	r3, #18
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2213      	movs	r2, #19
 8002d1e:	18ba      	adds	r2, r7, r2
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d24:	2311      	movs	r3, #17
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2e:	4b76      	ldr	r3, [pc, #472]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d32:	4b75      	ldr	r3, [pc, #468]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d34:	4979      	ldr	r1, [pc, #484]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002d36:	400a      	ands	r2, r1
 8002d38:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	4013      	ands	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d44:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	2203      	movs	r2, #3
 8002d4a:	4393      	bics	r3, r2
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	4b6d      	ldr	r3, [pc, #436]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d54:	430a      	orrs	r2, r1
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d009      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d62:	4b69      	ldr	r3, [pc, #420]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	220c      	movs	r2, #12
 8002d68:	4393      	bics	r3, r2
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	4b65      	ldr	r3, [pc, #404]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d72:	430a      	orrs	r2, r1
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	4a66      	ldr	r2, [pc, #408]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	4b5e      	ldr	r3, [pc, #376]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d90:	430a      	orrs	r2, r1
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002da0:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	4a5f      	ldr	r2, [pc, #380]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	4b56      	ldr	r3, [pc, #344]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d009      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dc0:	4b51      	ldr	r3, [pc, #324]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	4a58      	ldr	r2, [pc, #352]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	4b4e      	ldr	r3, [pc, #312]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dde:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	4b46      	ldr	r3, [pc, #280]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dee:	430a      	orrs	r2, r1
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	01db      	lsls	r3, r3, #7
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d015      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dfe:	4b42      	ldr	r3, [pc, #264]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	0899      	lsrs	r1, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1a      	ldr	r2, [r3, #32]
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	05db      	lsls	r3, r3, #23
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	0249      	lsls	r1, r1, #9
 8002e26:	430a      	orrs	r2, r1
 8002e28:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	031b      	lsls	r3, r3, #12
 8002e32:	4013      	ands	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e36:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	0019      	movs	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e44:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e46:	430a      	orrs	r2, r1
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	039b      	lsls	r3, r3, #14
 8002e52:	4013      	ands	r3, r2
 8002e54:	d016      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e56:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	4a35      	ldr	r2, [pc, #212]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e64:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e66:	430a      	orrs	r2, r1
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	03db      	lsls	r3, r3, #15
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d106      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	0449      	lsls	r1, r1, #17
 8002e80:	430a      	orrs	r2, r1
 8002e82:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	03db      	lsls	r3, r3, #15
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d016      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e90:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e94:	4a27      	ldr	r2, [pc, #156]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9e:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	045b      	lsls	r3, r3, #17
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d106      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	0449      	lsls	r1, r1, #17
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d016      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002eca:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eda:	430a      	orrs	r2, r1
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	01db      	lsls	r3, r3, #7
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002eea:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef0:	2180      	movs	r1, #128	; 0x80
 8002ef2:	0249      	lsls	r1, r1, #9
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ef8:	2312      	movs	r3, #18
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	781b      	ldrb	r3, [r3, #0]
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b006      	add	sp, #24
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	fffffcff 	.word	0xfffffcff
 8002f14:	fffeffff 	.word	0xfffeffff
 8002f18:	00001388 	.word	0x00001388
 8002f1c:	efffffff 	.word	0xefffffff
 8002f20:	fffff3ff 	.word	0xfffff3ff
 8002f24:	fff3ffff 	.word	0xfff3ffff
 8002f28:	ffcfffff 	.word	0xffcfffff
 8002f2c:	ffffcfff 	.word	0xffffcfff
 8002f30:	ffbfffff 	.word	0xffbfffff
 8002f34:	feffffff 	.word	0xfeffffff
 8002f38:	ffff3fff 	.word	0xffff3fff

08002f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e04a      	b.n	8002fe4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	223d      	movs	r2, #61	; 0x3d
 8002f52:	5c9b      	ldrb	r3, [r3, r2]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	223c      	movs	r2, #60	; 0x3c
 8002f5e:	2100      	movs	r1, #0
 8002f60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7fd fdd5 	bl	8000b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	223d      	movs	r2, #61	; 0x3d
 8002f6e:	2102      	movs	r1, #2
 8002f70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	0010      	movs	r0, r2
 8002f7e:	f000 f889 	bl	8003094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2248      	movs	r2, #72	; 0x48
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	223e      	movs	r2, #62	; 0x3e
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	223f      	movs	r2, #63	; 0x3f
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2240      	movs	r2, #64	; 0x40
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2241      	movs	r2, #65	; 0x41
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	5499      	strb	r1, [r3, r2]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2242      	movs	r2, #66	; 0x42
 8002fae:	2101      	movs	r1, #1
 8002fb0:	5499      	strb	r1, [r3, r2]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2243      	movs	r2, #67	; 0x43
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2244      	movs	r2, #68	; 0x44
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	5499      	strb	r1, [r3, r2]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2245      	movs	r2, #69	; 0x45
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	5499      	strb	r1, [r3, r2]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2246      	movs	r2, #70	; 0x46
 8002fce:	2101      	movs	r1, #1
 8002fd0:	5499      	strb	r1, [r3, r2]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2247      	movs	r2, #71	; 0x47
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	223d      	movs	r2, #61	; 0x3d
 8002fde:	2101      	movs	r1, #1
 8002fe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	223d      	movs	r2, #61	; 0x3d
 8002ff8:	5c9b      	ldrb	r3, [r3, r2]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d001      	beq.n	8003004 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e03a      	b.n	800307a <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	223d      	movs	r2, #61	; 0x3d
 8003008:	2102      	movs	r1, #2
 800300a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_TIM_Base_Start+0x98>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00f      	beq.n	8003036 <HAL_TIM_Base_Start+0x4a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	05db      	lsls	r3, r3, #23
 800301e:	429a      	cmp	r2, r3
 8003020:	d009      	beq.n	8003036 <HAL_TIM_Base_Start+0x4a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <HAL_TIM_Base_Start+0x9c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_TIM_Base_Start+0x4a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a16      	ldr	r2, [pc, #88]	; (800308c <HAL_TIM_Base_Start+0xa0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d116      	bne.n	8003064 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a14      	ldr	r2, [pc, #80]	; (8003090 <HAL_TIM_Base_Start+0xa4>)
 800303e:	4013      	ands	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b06      	cmp	r3, #6
 8003046:	d016      	beq.n	8003076 <HAL_TIM_Base_Start+0x8a>
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	025b      	lsls	r3, r3, #9
 800304e:	429a      	cmp	r2, r3
 8003050:	d011      	beq.n	8003076 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2101      	movs	r1, #1
 800305e:	430a      	orrs	r2, r1
 8003060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003062:	e008      	b.n	8003076 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2101      	movs	r1, #1
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e000      	b.n	8003078 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003076:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	0018      	movs	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	b004      	add	sp, #16
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	40012c00 	.word	0x40012c00
 8003088:	40000400 	.word	0x40000400
 800308c:	40014000 	.word	0x40014000
 8003090:	00010007 	.word	0x00010007

08003094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a34      	ldr	r2, [pc, #208]	; (8003178 <TIM_Base_SetConfig+0xe4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d008      	beq.n	80030be <TIM_Base_SetConfig+0x2a>
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	05db      	lsls	r3, r3, #23
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d003      	beq.n	80030be <TIM_Base_SetConfig+0x2a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a30      	ldr	r2, [pc, #192]	; (800317c <TIM_Base_SetConfig+0xe8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d108      	bne.n	80030d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2270      	movs	r2, #112	; 0x70
 80030c2:	4393      	bics	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a29      	ldr	r2, [pc, #164]	; (8003178 <TIM_Base_SetConfig+0xe4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <TIM_Base_SetConfig+0x76>
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	05db      	lsls	r3, r3, #23
 80030de:	429a      	cmp	r2, r3
 80030e0:	d013      	beq.n	800310a <TIM_Base_SetConfig+0x76>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a25      	ldr	r2, [pc, #148]	; (800317c <TIM_Base_SetConfig+0xe8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00f      	beq.n	800310a <TIM_Base_SetConfig+0x76>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a24      	ldr	r2, [pc, #144]	; (8003180 <TIM_Base_SetConfig+0xec>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00b      	beq.n	800310a <TIM_Base_SetConfig+0x76>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a23      	ldr	r2, [pc, #140]	; (8003184 <TIM_Base_SetConfig+0xf0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <TIM_Base_SetConfig+0x76>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a22      	ldr	r2, [pc, #136]	; (8003188 <TIM_Base_SetConfig+0xf4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d003      	beq.n	800310a <TIM_Base_SetConfig+0x76>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a21      	ldr	r2, [pc, #132]	; (800318c <TIM_Base_SetConfig+0xf8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d108      	bne.n	800311c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a20      	ldr	r2, [pc, #128]	; (8003190 <TIM_Base_SetConfig+0xfc>)
 800310e:	4013      	ands	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4313      	orrs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	4393      	bics	r3, r2
 8003122:	001a      	movs	r2, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <TIM_Base_SetConfig+0xe4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00b      	beq.n	8003162 <TIM_Base_SetConfig+0xce>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <TIM_Base_SetConfig+0xf0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <TIM_Base_SetConfig+0xce>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <TIM_Base_SetConfig+0xf4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <TIM_Base_SetConfig+0xce>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a0b      	ldr	r2, [pc, #44]	; (800318c <TIM_Base_SetConfig+0xf8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d103      	bne.n	800316a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	615a      	str	r2, [r3, #20]
}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40012c00 	.word	0x40012c00
 800317c:	40000400 	.word	0x40000400
 8003180:	40002000 	.word	0x40002000
 8003184:	40014000 	.word	0x40014000
 8003188:	40014400 	.word	0x40014400
 800318c:	40014800 	.word	0x40014800
 8003190:	fffffcff 	.word	0xfffffcff

08003194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	223c      	movs	r2, #60	; 0x3c
 80031a2:	5c9b      	ldrb	r3, [r3, r2]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e055      	b.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	223c      	movs	r2, #60	; 0x3c
 80031b0:	2101      	movs	r1, #1
 80031b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	223d      	movs	r2, #61	; 0x3d
 80031b8:	2102      	movs	r1, #2
 80031ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a23      	ldr	r2, [pc, #140]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a22      	ldr	r2, [pc, #136]	; (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031da:	4013      	ands	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2270      	movs	r2, #112	; 0x70
 80031ec:	4393      	bics	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a16      	ldr	r2, [pc, #88]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00f      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	05db      	lsls	r3, r3, #23
 8003214:	429a      	cmp	r2, r3
 8003216:	d009      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a12      	ldr	r2, [pc, #72]	; (8003268 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a11      	ldr	r2, [pc, #68]	; (800326c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10c      	bne.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	4393      	bics	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	4313      	orrs	r3, r2
 800323c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	223d      	movs	r2, #61	; 0x3d
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	223c      	movs	r2, #60	; 0x3c
 8003252:	2100      	movs	r1, #0
 8003254:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b004      	add	sp, #16
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40012c00 	.word	0x40012c00
 8003264:	ff0fffff 	.word	0xff0fffff
 8003268:	40000400 	.word	0x40000400
 800326c:	40014000 	.word	0x40014000

08003270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e046      	b.n	8003310 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2284      	movs	r2, #132	; 0x84
 8003286:	589b      	ldr	r3, [r3, r2]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d107      	bne.n	800329c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2280      	movs	r2, #128	; 0x80
 8003290:	2100      	movs	r1, #0
 8003292:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	0018      	movs	r0, r3
 8003298:	f7fd fc5a 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2284      	movs	r2, #132	; 0x84
 80032a0:	2124      	movs	r1, #36	; 0x24
 80032a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2101      	movs	r1, #1
 80032b0:	438a      	bics	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 f8dc 	bl	8003474 <UART_SetConfig>
 80032bc:	0003      	movs	r3, r0
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e024      	b.n	8003310 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 fbab 	bl	8003a2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	490d      	ldr	r1, [pc, #52]	; (8003318 <HAL_UART_Init+0xa8>)
 80032e2:	400a      	ands	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	212a      	movs	r1, #42	; 0x2a
 80032f2:	438a      	bics	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2101      	movs	r1, #1
 8003302:	430a      	orrs	r2, r1
 8003304:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	0018      	movs	r0, r3
 800330a:	f000 fc43 	bl	8003b94 <UART_CheckIdleState>
 800330e:	0003      	movs	r3, r0
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}
 8003318:	ffffb7ff 	.word	0xffffb7ff

0800331c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	1dbb      	adds	r3, r7, #6
 800332a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2284      	movs	r2, #132	; 0x84
 8003330:	589b      	ldr	r3, [r3, r2]
 8003332:	2b20      	cmp	r3, #32
 8003334:	d000      	beq.n	8003338 <HAL_UART_Transmit+0x1c>
 8003336:	e097      	b.n	8003468 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_UART_Transmit+0x2a>
 800333e:	1dbb      	adds	r3, r7, #6
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e08f      	b.n	800346a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	015b      	lsls	r3, r3, #5
 8003352:	429a      	cmp	r2, r3
 8003354:	d109      	bne.n	800336a <HAL_UART_Transmit+0x4e>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2201      	movs	r2, #1
 8003362:	4013      	ands	r3, r2
 8003364:	d001      	beq.n	800336a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e07f      	b.n	800346a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2280      	movs	r2, #128	; 0x80
 800336e:	5c9b      	ldrb	r3, [r3, r2]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_UART_Transmit+0x5c>
 8003374:	2302      	movs	r3, #2
 8003376:	e078      	b.n	800346a <HAL_UART_Transmit+0x14e>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	2101      	movs	r1, #1
 800337e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	228c      	movs	r2, #140	; 0x8c
 8003384:	2100      	movs	r1, #0
 8003386:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2284      	movs	r2, #132	; 0x84
 800338c:	2121      	movs	r1, #33	; 0x21
 800338e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003390:	f7fd fe24 	bl	8000fdc <HAL_GetTick>
 8003394:	0003      	movs	r3, r0
 8003396:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1dba      	adds	r2, r7, #6
 800339c:	2154      	movs	r1, #84	; 0x54
 800339e:	8812      	ldrh	r2, [r2, #0]
 80033a0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1dba      	adds	r2, r7, #6
 80033a6:	2156      	movs	r1, #86	; 0x56
 80033a8:	8812      	ldrh	r2, [r2, #0]
 80033aa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	015b      	lsls	r3, r3, #5
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d108      	bne.n	80033ca <HAL_UART_Transmit+0xae>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d104      	bne.n	80033ca <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	e003      	b.n	80033d2 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2280      	movs	r2, #128	; 0x80
 80033d6:	2100      	movs	r1, #0
 80033d8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80033da:	e02c      	b.n	8003436 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	0013      	movs	r3, r2
 80033e6:	2200      	movs	r2, #0
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	f000 fc1d 	bl	8003c28 <UART_WaitOnFlagUntilTimeout>
 80033ee:	1e03      	subs	r3, r0, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e039      	b.n	800346a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	001a      	movs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	05d2      	lsls	r2, r2, #23
 8003408:	0dd2      	lsrs	r2, r2, #23
 800340a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	3302      	adds	r3, #2
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	e007      	b.n	8003424 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	781a      	ldrb	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3301      	adds	r3, #1
 8003422:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2256      	movs	r2, #86	; 0x56
 8003428:	5a9b      	ldrh	r3, [r3, r2]
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b299      	uxth	r1, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2256      	movs	r2, #86	; 0x56
 8003434:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2256      	movs	r2, #86	; 0x56
 800343a:	5a9b      	ldrh	r3, [r3, r2]
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1cc      	bne.n	80033dc <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	0013      	movs	r3, r2
 800344c:	2200      	movs	r2, #0
 800344e:	2140      	movs	r1, #64	; 0x40
 8003450:	f000 fbea 	bl	8003c28 <UART_WaitOnFlagUntilTimeout>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	d001      	beq.n	800345c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e006      	b.n	800346a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2284      	movs	r2, #132	; 0x84
 8003460:	2120      	movs	r1, #32
 8003462:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e000      	b.n	800346a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	b008      	add	sp, #32
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003474:	b5b0      	push	{r4, r5, r7, lr}
 8003476:	b090      	sub	sp, #64	; 0x40
 8003478:	af00      	add	r7, sp, #0
 800347a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800347c:	231a      	movs	r3, #26
 800347e:	2220      	movs	r2, #32
 8003480:	4694      	mov	ip, r2
 8003482:	44bc      	add	ip, r7
 8003484:	4463      	add	r3, ip
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	431a      	orrs	r2, r3
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	431a      	orrs	r2, r3
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	4313      	orrs	r3, r2
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4ab9      	ldr	r2, [pc, #740]	; (8003790 <UART_SetConfig+0x31c>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b4:	430b      	orrs	r3, r1
 80034b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4ab5      	ldr	r2, [pc, #724]	; (8003794 <UART_SetConfig+0x320>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	0018      	movs	r0, r3
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	68d9      	ldr	r1, [r3, #12]
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	0003      	movs	r3, r0
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4aae      	ldr	r2, [pc, #696]	; (8003798 <UART_SetConfig+0x324>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034e8:	4313      	orrs	r3, r2
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	4aaa      	ldr	r2, [pc, #680]	; (800379c <UART_SetConfig+0x328>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	0019      	movs	r1, r3
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fe:	430b      	orrs	r3, r1
 8003500:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	220f      	movs	r2, #15
 800350a:	4393      	bics	r3, r2
 800350c:	0018      	movs	r0, r3
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	0003      	movs	r3, r0
 8003518:	430b      	orrs	r3, r1
 800351a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a9f      	ldr	r2, [pc, #636]	; (80037a0 <UART_SetConfig+0x32c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d136      	bne.n	8003594 <UART_SetConfig+0x120>
 8003526:	4b9f      	ldr	r3, [pc, #636]	; (80037a4 <UART_SetConfig+0x330>)
 8003528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352a:	2203      	movs	r2, #3
 800352c:	4013      	ands	r3, r2
 800352e:	2b03      	cmp	r3, #3
 8003530:	d020      	beq.n	8003574 <UART_SetConfig+0x100>
 8003532:	d827      	bhi.n	8003584 <UART_SetConfig+0x110>
 8003534:	2b02      	cmp	r3, #2
 8003536:	d00d      	beq.n	8003554 <UART_SetConfig+0xe0>
 8003538:	d824      	bhi.n	8003584 <UART_SetConfig+0x110>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <UART_SetConfig+0xd0>
 800353e:	2b01      	cmp	r3, #1
 8003540:	d010      	beq.n	8003564 <UART_SetConfig+0xf0>
 8003542:	e01f      	b.n	8003584 <UART_SetConfig+0x110>
 8003544:	231b      	movs	r3, #27
 8003546:	2220      	movs	r2, #32
 8003548:	4694      	mov	ip, r2
 800354a:	44bc      	add	ip, r7
 800354c:	4463      	add	r3, ip
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e0c5      	b.n	80036e0 <UART_SetConfig+0x26c>
 8003554:	231b      	movs	r3, #27
 8003556:	2220      	movs	r2, #32
 8003558:	4694      	mov	ip, r2
 800355a:	44bc      	add	ip, r7
 800355c:	4463      	add	r3, ip
 800355e:	2202      	movs	r2, #2
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e0bd      	b.n	80036e0 <UART_SetConfig+0x26c>
 8003564:	231b      	movs	r3, #27
 8003566:	2220      	movs	r2, #32
 8003568:	4694      	mov	ip, r2
 800356a:	44bc      	add	ip, r7
 800356c:	4463      	add	r3, ip
 800356e:	2204      	movs	r2, #4
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	e0b5      	b.n	80036e0 <UART_SetConfig+0x26c>
 8003574:	231b      	movs	r3, #27
 8003576:	2220      	movs	r2, #32
 8003578:	4694      	mov	ip, r2
 800357a:	44bc      	add	ip, r7
 800357c:	4463      	add	r3, ip
 800357e:	2208      	movs	r2, #8
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	e0ad      	b.n	80036e0 <UART_SetConfig+0x26c>
 8003584:	231b      	movs	r3, #27
 8003586:	2220      	movs	r2, #32
 8003588:	4694      	mov	ip, r2
 800358a:	44bc      	add	ip, r7
 800358c:	4463      	add	r3, ip
 800358e:	2210      	movs	r2, #16
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e0a5      	b.n	80036e0 <UART_SetConfig+0x26c>
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a83      	ldr	r2, [pc, #524]	; (80037a8 <UART_SetConfig+0x334>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d136      	bne.n	800360c <UART_SetConfig+0x198>
 800359e:	4b81      	ldr	r3, [pc, #516]	; (80037a4 <UART_SetConfig+0x330>)
 80035a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a2:	220c      	movs	r2, #12
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d020      	beq.n	80035ec <UART_SetConfig+0x178>
 80035aa:	d827      	bhi.n	80035fc <UART_SetConfig+0x188>
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d00d      	beq.n	80035cc <UART_SetConfig+0x158>
 80035b0:	d824      	bhi.n	80035fc <UART_SetConfig+0x188>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <UART_SetConfig+0x148>
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d010      	beq.n	80035dc <UART_SetConfig+0x168>
 80035ba:	e01f      	b.n	80035fc <UART_SetConfig+0x188>
 80035bc:	231b      	movs	r3, #27
 80035be:	2220      	movs	r2, #32
 80035c0:	4694      	mov	ip, r2
 80035c2:	44bc      	add	ip, r7
 80035c4:	4463      	add	r3, ip
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	e089      	b.n	80036e0 <UART_SetConfig+0x26c>
 80035cc:	231b      	movs	r3, #27
 80035ce:	2220      	movs	r2, #32
 80035d0:	4694      	mov	ip, r2
 80035d2:	44bc      	add	ip, r7
 80035d4:	4463      	add	r3, ip
 80035d6:	2202      	movs	r2, #2
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e081      	b.n	80036e0 <UART_SetConfig+0x26c>
 80035dc:	231b      	movs	r3, #27
 80035de:	2220      	movs	r2, #32
 80035e0:	4694      	mov	ip, r2
 80035e2:	44bc      	add	ip, r7
 80035e4:	4463      	add	r3, ip
 80035e6:	2204      	movs	r2, #4
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e079      	b.n	80036e0 <UART_SetConfig+0x26c>
 80035ec:	231b      	movs	r3, #27
 80035ee:	2220      	movs	r2, #32
 80035f0:	4694      	mov	ip, r2
 80035f2:	44bc      	add	ip, r7
 80035f4:	4463      	add	r3, ip
 80035f6:	2208      	movs	r2, #8
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	e071      	b.n	80036e0 <UART_SetConfig+0x26c>
 80035fc:	231b      	movs	r3, #27
 80035fe:	2220      	movs	r2, #32
 8003600:	4694      	mov	ip, r2
 8003602:	44bc      	add	ip, r7
 8003604:	4463      	add	r3, ip
 8003606:	2210      	movs	r2, #16
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e069      	b.n	80036e0 <UART_SetConfig+0x26c>
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a66      	ldr	r2, [pc, #408]	; (80037ac <UART_SetConfig+0x338>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d107      	bne.n	8003626 <UART_SetConfig+0x1b2>
 8003616:	231b      	movs	r3, #27
 8003618:	2220      	movs	r2, #32
 800361a:	4694      	mov	ip, r2
 800361c:	44bc      	add	ip, r7
 800361e:	4463      	add	r3, ip
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e05c      	b.n	80036e0 <UART_SetConfig+0x26c>
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a61      	ldr	r2, [pc, #388]	; (80037b0 <UART_SetConfig+0x33c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d107      	bne.n	8003640 <UART_SetConfig+0x1cc>
 8003630:	231b      	movs	r3, #27
 8003632:	2220      	movs	r2, #32
 8003634:	4694      	mov	ip, r2
 8003636:	44bc      	add	ip, r7
 8003638:	4463      	add	r3, ip
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e04f      	b.n	80036e0 <UART_SetConfig+0x26c>
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a54      	ldr	r2, [pc, #336]	; (8003798 <UART_SetConfig+0x324>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d143      	bne.n	80036d2 <UART_SetConfig+0x25e>
 800364a:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <UART_SetConfig+0x330>)
 800364c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800364e:	23c0      	movs	r3, #192	; 0xc0
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	4013      	ands	r3, r2
 8003654:	22c0      	movs	r2, #192	; 0xc0
 8003656:	0112      	lsls	r2, r2, #4
 8003658:	4293      	cmp	r3, r2
 800365a:	d02a      	beq.n	80036b2 <UART_SetConfig+0x23e>
 800365c:	22c0      	movs	r2, #192	; 0xc0
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	4293      	cmp	r3, r2
 8003662:	d82e      	bhi.n	80036c2 <UART_SetConfig+0x24e>
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	4293      	cmp	r3, r2
 800366a:	d012      	beq.n	8003692 <UART_SetConfig+0x21e>
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	0112      	lsls	r2, r2, #4
 8003670:	4293      	cmp	r3, r2
 8003672:	d826      	bhi.n	80036c2 <UART_SetConfig+0x24e>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <UART_SetConfig+0x20e>
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	00d2      	lsls	r2, r2, #3
 800367c:	4293      	cmp	r3, r2
 800367e:	d010      	beq.n	80036a2 <UART_SetConfig+0x22e>
 8003680:	e01f      	b.n	80036c2 <UART_SetConfig+0x24e>
 8003682:	231b      	movs	r3, #27
 8003684:	2220      	movs	r2, #32
 8003686:	4694      	mov	ip, r2
 8003688:	44bc      	add	ip, r7
 800368a:	4463      	add	r3, ip
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e026      	b.n	80036e0 <UART_SetConfig+0x26c>
 8003692:	231b      	movs	r3, #27
 8003694:	2220      	movs	r2, #32
 8003696:	4694      	mov	ip, r2
 8003698:	44bc      	add	ip, r7
 800369a:	4463      	add	r3, ip
 800369c:	2202      	movs	r2, #2
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e01e      	b.n	80036e0 <UART_SetConfig+0x26c>
 80036a2:	231b      	movs	r3, #27
 80036a4:	2220      	movs	r2, #32
 80036a6:	4694      	mov	ip, r2
 80036a8:	44bc      	add	ip, r7
 80036aa:	4463      	add	r3, ip
 80036ac:	2204      	movs	r2, #4
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	e016      	b.n	80036e0 <UART_SetConfig+0x26c>
 80036b2:	231b      	movs	r3, #27
 80036b4:	2220      	movs	r2, #32
 80036b6:	4694      	mov	ip, r2
 80036b8:	44bc      	add	ip, r7
 80036ba:	4463      	add	r3, ip
 80036bc:	2208      	movs	r2, #8
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e00e      	b.n	80036e0 <UART_SetConfig+0x26c>
 80036c2:	231b      	movs	r3, #27
 80036c4:	2220      	movs	r2, #32
 80036c6:	4694      	mov	ip, r2
 80036c8:	44bc      	add	ip, r7
 80036ca:	4463      	add	r3, ip
 80036cc:	2210      	movs	r2, #16
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e006      	b.n	80036e0 <UART_SetConfig+0x26c>
 80036d2:	231b      	movs	r3, #27
 80036d4:	2220      	movs	r2, #32
 80036d6:	4694      	mov	ip, r2
 80036d8:	44bc      	add	ip, r7
 80036da:	4463      	add	r3, ip
 80036dc:	2210      	movs	r2, #16
 80036de:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <UART_SetConfig+0x324>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d000      	beq.n	80036ec <UART_SetConfig+0x278>
 80036ea:	e0ad      	b.n	8003848 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036ec:	231b      	movs	r3, #27
 80036ee:	2220      	movs	r2, #32
 80036f0:	4694      	mov	ip, r2
 80036f2:	44bc      	add	ip, r7
 80036f4:	4463      	add	r3, ip
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d015      	beq.n	8003728 <UART_SetConfig+0x2b4>
 80036fc:	dc18      	bgt.n	8003730 <UART_SetConfig+0x2bc>
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d00d      	beq.n	800371e <UART_SetConfig+0x2aa>
 8003702:	dc15      	bgt.n	8003730 <UART_SetConfig+0x2bc>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <UART_SetConfig+0x29a>
 8003708:	2b02      	cmp	r3, #2
 800370a:	d005      	beq.n	8003718 <UART_SetConfig+0x2a4>
 800370c:	e010      	b.n	8003730 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800370e:	f7ff fa47 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 8003712:	0003      	movs	r3, r0
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003716:	e015      	b.n	8003744 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <UART_SetConfig+0x340>)
 800371a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800371c:	e012      	b.n	8003744 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371e:	f7ff f9b3 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8003722:	0003      	movs	r3, r0
 8003724:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003726:	e00d      	b.n	8003744 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800372e:	e009      	b.n	8003744 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003734:	231a      	movs	r3, #26
 8003736:	2220      	movs	r2, #32
 8003738:	4694      	mov	ip, r2
 800373a:	44bc      	add	ip, r7
 800373c:	4463      	add	r3, ip
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
        break;
 8003742:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	2b00      	cmp	r3, #0
 8003748:	d100      	bne.n	800374c <UART_SetConfig+0x2d8>
 800374a:	e153      	b.n	80039f4 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <UART_SetConfig+0x344>)
 8003752:	0052      	lsls	r2, r2, #1
 8003754:	5ad3      	ldrh	r3, [r2, r3]
 8003756:	0019      	movs	r1, r3
 8003758:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800375a:	f7fc fce5 	bl	8000128 <__udivsi3>
 800375e:	0003      	movs	r3, r0
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	0013      	movs	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	189b      	adds	r3, r3, r2
 800376c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800376e:	429a      	cmp	r2, r3
 8003770:	d305      	bcc.n	800377e <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800377a:	429a      	cmp	r2, r3
 800377c:	d91e      	bls.n	80037bc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800377e:	231a      	movs	r3, #26
 8003780:	2220      	movs	r2, #32
 8003782:	4694      	mov	ip, r2
 8003784:	44bc      	add	ip, r7
 8003786:	4463      	add	r3, ip
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	e132      	b.n	80039f4 <UART_SetConfig+0x580>
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	cfff69f3 	.word	0xcfff69f3
 8003794:	ffffcfff 	.word	0xffffcfff
 8003798:	40008000 	.word	0x40008000
 800379c:	11fff4ff 	.word	0x11fff4ff
 80037a0:	40013800 	.word	0x40013800
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40004400 	.word	0x40004400
 80037ac:	40004800 	.word	0x40004800
 80037b0:	40004c00 	.word	0x40004c00
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	08004930 	.word	0x08004930
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c8:	4b96      	ldr	r3, [pc, #600]	; (8003a24 <UART_SetConfig+0x5b0>)
 80037ca:	0052      	lsls	r2, r2, #1
 80037cc:	5ad3      	ldrh	r3, [r2, r3]
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	69b8      	ldr	r0, [r7, #24]
 80037da:	69f9      	ldr	r1, [r7, #28]
 80037dc:	f7fc fe1a 	bl	8000414 <__aeabi_uldivmod>
 80037e0:	0002      	movs	r2, r0
 80037e2:	000b      	movs	r3, r1
 80037e4:	0e11      	lsrs	r1, r2, #24
 80037e6:	021d      	lsls	r5, r3, #8
 80037e8:	430d      	orrs	r5, r1
 80037ea:	0214      	lsls	r4, r2, #8
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68b8      	ldr	r0, [r7, #8]
 80037fa:	68f9      	ldr	r1, [r7, #12]
 80037fc:	1900      	adds	r0, r0, r4
 80037fe:	4169      	adcs	r1, r5
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f7fc fe01 	bl	8000414 <__aeabi_uldivmod>
 8003812:	0002      	movs	r2, r0
 8003814:	000b      	movs	r3, r1
 8003816:	0013      	movs	r3, r2
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800381a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381c:	23c0      	movs	r3, #192	; 0xc0
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d309      	bcc.n	8003838 <UART_SetConfig+0x3c4>
 8003824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	035b      	lsls	r3, r3, #13
 800382a:	429a      	cmp	r2, r3
 800382c:	d204      	bcs.n	8003838 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	e0dd      	b.n	80039f4 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8003838:	231a      	movs	r3, #26
 800383a:	2220      	movs	r2, #32
 800383c:	4694      	mov	ip, r2
 800383e:	44bc      	add	ip, r7
 8003840:	4463      	add	r3, ip
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e0d5      	b.n	80039f4 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	2380      	movs	r3, #128	; 0x80
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	429a      	cmp	r2, r3
 8003852:	d000      	beq.n	8003856 <UART_SetConfig+0x3e2>
 8003854:	e073      	b.n	800393e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003856:	231b      	movs	r3, #27
 8003858:	2220      	movs	r2, #32
 800385a:	4694      	mov	ip, r2
 800385c:	44bc      	add	ip, r7
 800385e:	4463      	add	r3, ip
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b08      	cmp	r3, #8
 8003864:	d015      	beq.n	8003892 <UART_SetConfig+0x41e>
 8003866:	dc18      	bgt.n	800389a <UART_SetConfig+0x426>
 8003868:	2b04      	cmp	r3, #4
 800386a:	d00d      	beq.n	8003888 <UART_SetConfig+0x414>
 800386c:	dc15      	bgt.n	800389a <UART_SetConfig+0x426>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <UART_SetConfig+0x404>
 8003872:	2b02      	cmp	r3, #2
 8003874:	d005      	beq.n	8003882 <UART_SetConfig+0x40e>
 8003876:	e010      	b.n	800389a <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7ff f992 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 800387c:	0003      	movs	r3, r0
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003880:	e015      	b.n	80038ae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003882:	4b69      	ldr	r3, [pc, #420]	; (8003a28 <UART_SetConfig+0x5b4>)
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003886:	e012      	b.n	80038ae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003888:	f7ff f8fe 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 800388c:	0003      	movs	r3, r0
 800388e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003890:	e00d      	b.n	80038ae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003898:	e009      	b.n	80038ae <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800389e:	231a      	movs	r3, #26
 80038a0:	2220      	movs	r2, #32
 80038a2:	4694      	mov	ip, r2
 80038a4:	44bc      	add	ip, r7
 80038a6:	4463      	add	r3, ip
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
        break;
 80038ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d100      	bne.n	80038b6 <UART_SetConfig+0x442>
 80038b4:	e09e      	b.n	80039f4 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ba:	4b5a      	ldr	r3, [pc, #360]	; (8003a24 <UART_SetConfig+0x5b0>)
 80038bc:	0052      	lsls	r2, r2, #1
 80038be:	5ad3      	ldrh	r3, [r2, r3]
 80038c0:	0019      	movs	r1, r3
 80038c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038c4:	f7fc fc30 	bl	8000128 <__udivsi3>
 80038c8:	0003      	movs	r3, r0
 80038ca:	005a      	lsls	r2, r3, #1
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	18d2      	adds	r2, r2, r3
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	0019      	movs	r1, r3
 80038da:	0010      	movs	r0, r2
 80038dc:	f7fc fc24 	bl	8000128 <__udivsi3>
 80038e0:	0003      	movs	r3, r0
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	2b0f      	cmp	r3, #15
 80038e8:	d921      	bls.n	800392e <UART_SetConfig+0x4ba>
 80038ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	025b      	lsls	r3, r3, #9
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d21c      	bcs.n	800392e <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	200e      	movs	r0, #14
 80038fa:	2420      	movs	r4, #32
 80038fc:	193b      	adds	r3, r7, r4
 80038fe:	181b      	adds	r3, r3, r0
 8003900:	210f      	movs	r1, #15
 8003902:	438a      	bics	r2, r1
 8003904:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	b29b      	uxth	r3, r3
 800390c:	2207      	movs	r2, #7
 800390e:	4013      	ands	r3, r2
 8003910:	b299      	uxth	r1, r3
 8003912:	193b      	adds	r3, r7, r4
 8003914:	181b      	adds	r3, r3, r0
 8003916:	193a      	adds	r2, r7, r4
 8003918:	1812      	adds	r2, r2, r0
 800391a:	8812      	ldrh	r2, [r2, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	193a      	adds	r2, r7, r4
 8003926:	1812      	adds	r2, r2, r0
 8003928:	8812      	ldrh	r2, [r2, #0]
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	e062      	b.n	80039f4 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 800392e:	231a      	movs	r3, #26
 8003930:	2220      	movs	r2, #32
 8003932:	4694      	mov	ip, r2
 8003934:	44bc      	add	ip, r7
 8003936:	4463      	add	r3, ip
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	e05a      	b.n	80039f4 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 800393e:	231b      	movs	r3, #27
 8003940:	2220      	movs	r2, #32
 8003942:	4694      	mov	ip, r2
 8003944:	44bc      	add	ip, r7
 8003946:	4463      	add	r3, ip
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b08      	cmp	r3, #8
 800394c:	d015      	beq.n	800397a <UART_SetConfig+0x506>
 800394e:	dc18      	bgt.n	8003982 <UART_SetConfig+0x50e>
 8003950:	2b04      	cmp	r3, #4
 8003952:	d00d      	beq.n	8003970 <UART_SetConfig+0x4fc>
 8003954:	dc15      	bgt.n	8003982 <UART_SetConfig+0x50e>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <UART_SetConfig+0x4ec>
 800395a:	2b02      	cmp	r3, #2
 800395c:	d005      	beq.n	800396a <UART_SetConfig+0x4f6>
 800395e:	e010      	b.n	8003982 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003960:	f7ff f91e 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 8003964:	0003      	movs	r3, r0
 8003966:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003968:	e015      	b.n	8003996 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800396a:	4b2f      	ldr	r3, [pc, #188]	; (8003a28 <UART_SetConfig+0x5b4>)
 800396c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800396e:	e012      	b.n	8003996 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003970:	f7ff f88a 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8003974:	0003      	movs	r3, r0
 8003976:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003978:	e00d      	b.n	8003996 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003980:	e009      	b.n	8003996 <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003986:	231a      	movs	r3, #26
 8003988:	2220      	movs	r2, #32
 800398a:	4694      	mov	ip, r2
 800398c:	44bc      	add	ip, r7
 800398e:	4463      	add	r3, ip
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
        break;
 8003994:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	2b00      	cmp	r3, #0
 800399a:	d02b      	beq.n	80039f4 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <UART_SetConfig+0x5b0>)
 80039a2:	0052      	lsls	r2, r2, #1
 80039a4:	5ad3      	ldrh	r3, [r2, r3]
 80039a6:	0019      	movs	r1, r3
 80039a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039aa:	f7fc fbbd 	bl	8000128 <__udivsi3>
 80039ae:	0003      	movs	r3, r0
 80039b0:	001a      	movs	r2, r3
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	18d2      	adds	r2, r2, r3
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	0019      	movs	r1, r3
 80039c0:	0010      	movs	r0, r2
 80039c2:	f7fc fbb1 	bl	8000128 <__udivsi3>
 80039c6:	0003      	movs	r3, r0
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2b0f      	cmp	r3, #15
 80039ce:	d90a      	bls.n	80039e6 <UART_SetConfig+0x572>
 80039d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	025b      	lsls	r3, r3, #9
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d205      	bcs.n	80039e6 <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	b29a      	uxth	r2, r3
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	e006      	b.n	80039f4 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 80039e6:	231a      	movs	r3, #26
 80039e8:	2220      	movs	r2, #32
 80039ea:	4694      	mov	ip, r2
 80039ec:	44bc      	add	ip, r7
 80039ee:	4463      	add	r3, ip
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	226a      	movs	r2, #106	; 0x6a
 80039f8:	2101      	movs	r1, #1
 80039fa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	2268      	movs	r2, #104	; 0x68
 8003a00:	2101      	movs	r1, #1
 8003a02:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	2200      	movs	r2, #0
 8003a08:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003a10:	231a      	movs	r3, #26
 8003a12:	2220      	movs	r2, #32
 8003a14:	4694      	mov	ip, r2
 8003a16:	44bc      	add	ip, r7
 8003a18:	4463      	add	r3, ip
 8003a1a:	781b      	ldrb	r3, [r3, #0]
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b010      	add	sp, #64	; 0x40
 8003a22:	bdb0      	pop	{r4, r5, r7, pc}
 8003a24:	08004930 	.word	0x08004930
 8003a28:	00f42400 	.word	0x00f42400

08003a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a4a      	ldr	r2, [pc, #296]	; (8003b70 <UART_AdvFeatureConfig+0x144>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a43      	ldr	r2, [pc, #268]	; (8003b74 <UART_AdvFeatureConfig+0x148>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a3b      	ldr	r2, [pc, #236]	; (8003b78 <UART_AdvFeatureConfig+0x14c>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4a34      	ldr	r2, [pc, #208]	; (8003b7c <UART_AdvFeatureConfig+0x150>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	0019      	movs	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <UART_AdvFeatureConfig+0x154>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d00b      	beq.n	8003b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	4a25      	ldr	r2, [pc, #148]	; (8003b84 <UART_AdvFeatureConfig+0x158>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	0019      	movs	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	2240      	movs	r2, #64	; 0x40
 8003b06:	4013      	ands	r3, r2
 8003b08:	d01d      	beq.n	8003b46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <UART_AdvFeatureConfig+0x15c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	035b      	lsls	r3, r3, #13
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d10b      	bne.n	8003b46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <UART_AdvFeatureConfig+0x160>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	0019      	movs	r1, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <UART_AdvFeatureConfig+0x164>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]
  }
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	fffdffff 	.word	0xfffdffff
 8003b74:	fffeffff 	.word	0xfffeffff
 8003b78:	fffbffff 	.word	0xfffbffff
 8003b7c:	ffff7fff 	.word	0xffff7fff
 8003b80:	ffffefff 	.word	0xffffefff
 8003b84:	ffffdfff 	.word	0xffffdfff
 8003b88:	ffefffff 	.word	0xffefffff
 8003b8c:	ff9fffff 	.word	0xff9fffff
 8003b90:	fff7ffff 	.word	0xfff7ffff

08003b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	228c      	movs	r2, #140	; 0x8c
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ba4:	f7fd fa1a 	bl	8000fdc <HAL_GetTick>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d10c      	bne.n	8003bd4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	0391      	lsls	r1, r2, #14
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <UART_CheckIdleState+0x90>)
 8003bc4:	9200      	str	r2, [sp, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f000 f82e 	bl	8003c28 <UART_WaitOnFlagUntilTimeout>
 8003bcc:	1e03      	subs	r3, r0, #0
 8003bce:	d001      	beq.n	8003bd4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e023      	b.n	8003c1c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d10c      	bne.n	8003bfc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2280      	movs	r2, #128	; 0x80
 8003be6:	03d1      	lsls	r1, r2, #15
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4a0e      	ldr	r2, [pc, #56]	; (8003c24 <UART_CheckIdleState+0x90>)
 8003bec:	9200      	str	r2, [sp, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f000 f81a 	bl	8003c28 <UART_WaitOnFlagUntilTimeout>
 8003bf4:	1e03      	subs	r3, r0, #0
 8003bf6:	d001      	beq.n	8003bfc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e00f      	b.n	8003c1c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2284      	movs	r2, #132	; 0x84
 8003c00:	2120      	movs	r1, #32
 8003c02:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2288      	movs	r2, #136	; 0x88
 8003c08:	2120      	movs	r1, #32
 8003c0a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	2100      	movs	r1, #0
 8003c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b004      	add	sp, #16
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	01ffffff 	.word	0x01ffffff

08003c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b094      	sub	sp, #80	; 0x50
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	1dfb      	adds	r3, r7, #7
 8003c36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c38:	e0a7      	b.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	d100      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003c40:	e0a3      	b.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7fd f9cb 	bl	8000fdc <HAL_GetTick>
 8003c46:	0002      	movs	r2, r0
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d13f      	bne.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c58:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c60:	647b      	str	r3, [r7, #68]	; 0x44
 8003c62:	2301      	movs	r3, #1
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	494e      	ldr	r1, [pc, #312]	; (8003db4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	643b      	str	r3, [r7, #64]	; 0x40
 8003c94:	2301      	movs	r3, #1
 8003c96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	f383 8810 	msr	PRIMASK, r3
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb6:	f383 8810 	msr	PRIMASK, r3
}
 8003cba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2284      	movs	r2, #132	; 0x84
 8003cc0:	2120      	movs	r1, #32
 8003cc2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2288      	movs	r2, #136	; 0x88
 8003cc8:	2120      	movs	r1, #32
 8003cca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2280      	movs	r2, #128	; 0x80
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e069      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d052      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	401a      	ands	r2, r3
 8003cf0:	2380      	movs	r3, #128	; 0x80
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d148      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	0112      	lsls	r2, r2, #4
 8003d00:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d02:	f3ef 8310 	mrs	r3, PRIMASK
 8003d06:	613b      	str	r3, [r7, #16]
  return(result);
 8003d08:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f383 8810 	msr	PRIMASK, r3
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4924      	ldr	r1, [pc, #144]	; (8003db4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003d24:	400a      	ands	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d34:	f3ef 8310 	mrs	r3, PRIMASK
 8003d38:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d3a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d3e:	2301      	movs	r3, #1
 8003d40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f383 8810 	msr	PRIMASK, r3
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2101      	movs	r1, #1
 8003d56:	438a      	bics	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]
 8003d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	f383 8810 	msr	PRIMASK, r3
}
 8003d64:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2284      	movs	r2, #132	; 0x84
 8003d6a:	2120      	movs	r1, #32
 8003d6c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2288      	movs	r2, #136	; 0x88
 8003d72:	2120      	movs	r1, #32
 8003d74:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	228c      	movs	r2, #140	; 0x8c
 8003d7a:	2120      	movs	r1, #32
 8003d7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	2100      	movs	r1, #0
 8003d84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e010      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	425a      	negs	r2, r3
 8003d9a:	4153      	adcs	r3, r2
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	001a      	movs	r2, r3
 8003da0:	1dfb      	adds	r3, r7, #7
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d100      	bne.n	8003daa <UART_WaitOnFlagUntilTimeout+0x182>
 8003da8:	e747      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b014      	add	sp, #80	; 0x50
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	fffffe5f 	.word	0xfffffe5f

08003db8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	5c9b      	ldrb	r3, [r3, r2]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_UARTEx_DisableFifoMode+0x16>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e027      	b.n	8003e1e <HAL_UARTEx_DisableFifoMode+0x66>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2280      	movs	r2, #128	; 0x80
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2284      	movs	r2, #132	; 0x84
 8003dda:	2124      	movs	r1, #36	; 0x24
 8003ddc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2101      	movs	r1, #1
 8003df2:	438a      	bics	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a0b      	ldr	r2, [pc, #44]	; (8003e28 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2284      	movs	r2, #132	; 0x84
 8003e10:	2120      	movs	r1, #32
 8003e12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	2100      	movs	r1, #0
 8003e1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	0018      	movs	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b004      	add	sp, #16
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	dfffffff 	.word	0xdfffffff

08003e2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	5c9b      	ldrb	r3, [r3, r2]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e02e      	b.n	8003ea2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2280      	movs	r2, #128	; 0x80
 8003e48:	2101      	movs	r1, #1
 8003e4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2284      	movs	r2, #132	; 0x84
 8003e50:	2124      	movs	r1, #36	; 0x24
 8003e52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2101      	movs	r1, #1
 8003e68:	438a      	bics	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	08d9      	lsrs	r1, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f000 f854 	bl	8003f30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2284      	movs	r2, #132	; 0x84
 8003e94:	2120      	movs	r1, #32
 8003e96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b004      	add	sp, #16
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	5c9b      	ldrb	r3, [r3, r2]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e02f      	b.n	8003f24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2280      	movs	r2, #128	; 0x80
 8003ec8:	2101      	movs	r1, #1
 8003eca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2284      	movs	r2, #132	; 0x84
 8003ed0:	2124      	movs	r1, #36	; 0x24
 8003ed2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	438a      	bics	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	4a0e      	ldr	r2, [pc, #56]	; (8003f2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	0018      	movs	r0, r3
 8003f06:	f000 f813 	bl	8003f30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2284      	movs	r2, #132	; 0x84
 8003f16:	2120      	movs	r1, #32
 8003f18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2280      	movs	r2, #128	; 0x80
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b004      	add	sp, #16
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	f1ffffff 	.word	0xf1ffffff

08003f30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d108      	bne.n	8003f52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	226a      	movs	r2, #106	; 0x6a
 8003f44:	2101      	movs	r1, #1
 8003f46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2268      	movs	r2, #104	; 0x68
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f50:	e043      	b.n	8003fda <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f52:	260f      	movs	r6, #15
 8003f54:	19bb      	adds	r3, r7, r6
 8003f56:	2208      	movs	r2, #8
 8003f58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f5a:	200e      	movs	r0, #14
 8003f5c:	183b      	adds	r3, r7, r0
 8003f5e:	2208      	movs	r2, #8
 8003f60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	0e5b      	lsrs	r3, r3, #25
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	240d      	movs	r4, #13
 8003f6e:	193b      	adds	r3, r7, r4
 8003f70:	2107      	movs	r1, #7
 8003f72:	400a      	ands	r2, r1
 8003f74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	0f5b      	lsrs	r3, r3, #29
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	250c      	movs	r5, #12
 8003f82:	197b      	adds	r3, r7, r5
 8003f84:	2107      	movs	r1, #7
 8003f86:	400a      	ands	r2, r1
 8003f88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f8a:	183b      	adds	r3, r7, r0
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	197a      	adds	r2, r7, r5
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	4914      	ldr	r1, [pc, #80]	; (8003fe4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003f94:	5c8a      	ldrb	r2, [r1, r2]
 8003f96:	435a      	muls	r2, r3
 8003f98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f9a:	197b      	adds	r3, r7, r5
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	4a12      	ldr	r2, [pc, #72]	; (8003fe8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003fa0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	f7fc f94a 	bl	800023c <__divsi3>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	b299      	uxth	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	226a      	movs	r2, #106	; 0x6a
 8003fb0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fb2:	19bb      	adds	r3, r7, r6
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	193a      	adds	r2, r7, r4
 8003fb8:	7812      	ldrb	r2, [r2, #0]
 8003fba:	490a      	ldr	r1, [pc, #40]	; (8003fe4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003fbc:	5c8a      	ldrb	r2, [r1, r2]
 8003fbe:	435a      	muls	r2, r3
 8003fc0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003fc2:	193b      	adds	r3, r7, r4
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003fc8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fca:	0019      	movs	r1, r3
 8003fcc:	f7fc f936 	bl	800023c <__divsi3>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	b299      	uxth	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2268      	movs	r2, #104	; 0x68
 8003fd8:	5299      	strh	r1, [r3, r2]
}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b005      	add	sp, #20
 8003fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	08004948 	.word	0x08004948
 8003fe8:	08004950 	.word	0x08004950

08003fec <__errno>:
 8003fec:	4b01      	ldr	r3, [pc, #4]	; (8003ff4 <__errno+0x8>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	4770      	bx	lr
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	2000000c 	.word	0x2000000c

08003ff8 <__libc_init_array>:
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	2600      	movs	r6, #0
 8003ffc:	4d0c      	ldr	r5, [pc, #48]	; (8004030 <__libc_init_array+0x38>)
 8003ffe:	4c0d      	ldr	r4, [pc, #52]	; (8004034 <__libc_init_array+0x3c>)
 8004000:	1b64      	subs	r4, r4, r5
 8004002:	10a4      	asrs	r4, r4, #2
 8004004:	42a6      	cmp	r6, r4
 8004006:	d109      	bne.n	800401c <__libc_init_array+0x24>
 8004008:	2600      	movs	r6, #0
 800400a:	f000 fc47 	bl	800489c <_init>
 800400e:	4d0a      	ldr	r5, [pc, #40]	; (8004038 <__libc_init_array+0x40>)
 8004010:	4c0a      	ldr	r4, [pc, #40]	; (800403c <__libc_init_array+0x44>)
 8004012:	1b64      	subs	r4, r4, r5
 8004014:	10a4      	asrs	r4, r4, #2
 8004016:	42a6      	cmp	r6, r4
 8004018:	d105      	bne.n	8004026 <__libc_init_array+0x2e>
 800401a:	bd70      	pop	{r4, r5, r6, pc}
 800401c:	00b3      	lsls	r3, r6, #2
 800401e:	58eb      	ldr	r3, [r5, r3]
 8004020:	4798      	blx	r3
 8004022:	3601      	adds	r6, #1
 8004024:	e7ee      	b.n	8004004 <__libc_init_array+0xc>
 8004026:	00b3      	lsls	r3, r6, #2
 8004028:	58eb      	ldr	r3, [r5, r3]
 800402a:	4798      	blx	r3
 800402c:	3601      	adds	r6, #1
 800402e:	e7f2      	b.n	8004016 <__libc_init_array+0x1e>
 8004030:	08004994 	.word	0x08004994
 8004034:	08004994 	.word	0x08004994
 8004038:	08004994 	.word	0x08004994
 800403c:	08004998 	.word	0x08004998

08004040 <memset>:
 8004040:	0003      	movs	r3, r0
 8004042:	1882      	adds	r2, r0, r2
 8004044:	4293      	cmp	r3, r2
 8004046:	d100      	bne.n	800404a <memset+0xa>
 8004048:	4770      	bx	lr
 800404a:	7019      	strb	r1, [r3, #0]
 800404c:	3301      	adds	r3, #1
 800404e:	e7f9      	b.n	8004044 <memset+0x4>

08004050 <siprintf>:
 8004050:	b40e      	push	{r1, r2, r3}
 8004052:	b500      	push	{lr}
 8004054:	490b      	ldr	r1, [pc, #44]	; (8004084 <siprintf+0x34>)
 8004056:	b09c      	sub	sp, #112	; 0x70
 8004058:	ab1d      	add	r3, sp, #116	; 0x74
 800405a:	9002      	str	r0, [sp, #8]
 800405c:	9006      	str	r0, [sp, #24]
 800405e:	9107      	str	r1, [sp, #28]
 8004060:	9104      	str	r1, [sp, #16]
 8004062:	4809      	ldr	r0, [pc, #36]	; (8004088 <siprintf+0x38>)
 8004064:	4909      	ldr	r1, [pc, #36]	; (800408c <siprintf+0x3c>)
 8004066:	cb04      	ldmia	r3!, {r2}
 8004068:	9105      	str	r1, [sp, #20]
 800406a:	6800      	ldr	r0, [r0, #0]
 800406c:	a902      	add	r1, sp, #8
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	f000 f870 	bl	8004154 <_svfiprintf_r>
 8004074:	2300      	movs	r3, #0
 8004076:	9a02      	ldr	r2, [sp, #8]
 8004078:	7013      	strb	r3, [r2, #0]
 800407a:	b01c      	add	sp, #112	; 0x70
 800407c:	bc08      	pop	{r3}
 800407e:	b003      	add	sp, #12
 8004080:	4718      	bx	r3
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	7fffffff 	.word	0x7fffffff
 8004088:	2000000c 	.word	0x2000000c
 800408c:	ffff0208 	.word	0xffff0208

08004090 <__ssputs_r>:
 8004090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004092:	688e      	ldr	r6, [r1, #8]
 8004094:	b085      	sub	sp, #20
 8004096:	0007      	movs	r7, r0
 8004098:	000c      	movs	r4, r1
 800409a:	9203      	str	r2, [sp, #12]
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	429e      	cmp	r6, r3
 80040a0:	d83c      	bhi.n	800411c <__ssputs_r+0x8c>
 80040a2:	2390      	movs	r3, #144	; 0x90
 80040a4:	898a      	ldrh	r2, [r1, #12]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	421a      	tst	r2, r3
 80040aa:	d034      	beq.n	8004116 <__ssputs_r+0x86>
 80040ac:	2503      	movs	r5, #3
 80040ae:	6909      	ldr	r1, [r1, #16]
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	1a5b      	subs	r3, r3, r1
 80040b4:	9302      	str	r3, [sp, #8]
 80040b6:	6963      	ldr	r3, [r4, #20]
 80040b8:	9802      	ldr	r0, [sp, #8]
 80040ba:	435d      	muls	r5, r3
 80040bc:	0feb      	lsrs	r3, r5, #31
 80040be:	195d      	adds	r5, r3, r5
 80040c0:	9b01      	ldr	r3, [sp, #4]
 80040c2:	106d      	asrs	r5, r5, #1
 80040c4:	3301      	adds	r3, #1
 80040c6:	181b      	adds	r3, r3, r0
 80040c8:	42ab      	cmp	r3, r5
 80040ca:	d900      	bls.n	80040ce <__ssputs_r+0x3e>
 80040cc:	001d      	movs	r5, r3
 80040ce:	0553      	lsls	r3, r2, #21
 80040d0:	d532      	bpl.n	8004138 <__ssputs_r+0xa8>
 80040d2:	0029      	movs	r1, r5
 80040d4:	0038      	movs	r0, r7
 80040d6:	f000 fb31 	bl	800473c <_malloc_r>
 80040da:	1e06      	subs	r6, r0, #0
 80040dc:	d109      	bne.n	80040f2 <__ssputs_r+0x62>
 80040de:	230c      	movs	r3, #12
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	2340      	movs	r3, #64	; 0x40
 80040e4:	2001      	movs	r0, #1
 80040e6:	89a2      	ldrh	r2, [r4, #12]
 80040e8:	4240      	negs	r0, r0
 80040ea:	4313      	orrs	r3, r2
 80040ec:	81a3      	strh	r3, [r4, #12]
 80040ee:	b005      	add	sp, #20
 80040f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f2:	9a02      	ldr	r2, [sp, #8]
 80040f4:	6921      	ldr	r1, [r4, #16]
 80040f6:	f000 faba 	bl	800466e <memcpy>
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	4a14      	ldr	r2, [pc, #80]	; (8004150 <__ssputs_r+0xc0>)
 80040fe:	401a      	ands	r2, r3
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	4313      	orrs	r3, r2
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	9b02      	ldr	r3, [sp, #8]
 8004108:	6126      	str	r6, [r4, #16]
 800410a:	18f6      	adds	r6, r6, r3
 800410c:	6026      	str	r6, [r4, #0]
 800410e:	6165      	str	r5, [r4, #20]
 8004110:	9e01      	ldr	r6, [sp, #4]
 8004112:	1aed      	subs	r5, r5, r3
 8004114:	60a5      	str	r5, [r4, #8]
 8004116:	9b01      	ldr	r3, [sp, #4]
 8004118:	429e      	cmp	r6, r3
 800411a:	d900      	bls.n	800411e <__ssputs_r+0x8e>
 800411c:	9e01      	ldr	r6, [sp, #4]
 800411e:	0032      	movs	r2, r6
 8004120:	9903      	ldr	r1, [sp, #12]
 8004122:	6820      	ldr	r0, [r4, #0]
 8004124:	f000 faac 	bl	8004680 <memmove>
 8004128:	68a3      	ldr	r3, [r4, #8]
 800412a:	2000      	movs	r0, #0
 800412c:	1b9b      	subs	r3, r3, r6
 800412e:	60a3      	str	r3, [r4, #8]
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	199e      	adds	r6, r3, r6
 8004134:	6026      	str	r6, [r4, #0]
 8004136:	e7da      	b.n	80040ee <__ssputs_r+0x5e>
 8004138:	002a      	movs	r2, r5
 800413a:	0038      	movs	r0, r7
 800413c:	f000 fb5c 	bl	80047f8 <_realloc_r>
 8004140:	1e06      	subs	r6, r0, #0
 8004142:	d1e0      	bne.n	8004106 <__ssputs_r+0x76>
 8004144:	0038      	movs	r0, r7
 8004146:	6921      	ldr	r1, [r4, #16]
 8004148:	f000 faae 	bl	80046a8 <_free_r>
 800414c:	e7c7      	b.n	80040de <__ssputs_r+0x4e>
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	fffffb7f 	.word	0xfffffb7f

08004154 <_svfiprintf_r>:
 8004154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004156:	b0a1      	sub	sp, #132	; 0x84
 8004158:	9003      	str	r0, [sp, #12]
 800415a:	001d      	movs	r5, r3
 800415c:	898b      	ldrh	r3, [r1, #12]
 800415e:	000f      	movs	r7, r1
 8004160:	0016      	movs	r6, r2
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	d511      	bpl.n	800418a <_svfiprintf_r+0x36>
 8004166:	690b      	ldr	r3, [r1, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10e      	bne.n	800418a <_svfiprintf_r+0x36>
 800416c:	2140      	movs	r1, #64	; 0x40
 800416e:	f000 fae5 	bl	800473c <_malloc_r>
 8004172:	6038      	str	r0, [r7, #0]
 8004174:	6138      	str	r0, [r7, #16]
 8004176:	2800      	cmp	r0, #0
 8004178:	d105      	bne.n	8004186 <_svfiprintf_r+0x32>
 800417a:	230c      	movs	r3, #12
 800417c:	9a03      	ldr	r2, [sp, #12]
 800417e:	3801      	subs	r0, #1
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	b021      	add	sp, #132	; 0x84
 8004184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004186:	2340      	movs	r3, #64	; 0x40
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	2300      	movs	r3, #0
 800418c:	ac08      	add	r4, sp, #32
 800418e:	6163      	str	r3, [r4, #20]
 8004190:	3320      	adds	r3, #32
 8004192:	7663      	strb	r3, [r4, #25]
 8004194:	3310      	adds	r3, #16
 8004196:	76a3      	strb	r3, [r4, #26]
 8004198:	9507      	str	r5, [sp, #28]
 800419a:	0035      	movs	r5, r6
 800419c:	782b      	ldrb	r3, [r5, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <_svfiprintf_r+0x52>
 80041a2:	2b25      	cmp	r3, #37	; 0x25
 80041a4:	d147      	bne.n	8004236 <_svfiprintf_r+0xe2>
 80041a6:	1bab      	subs	r3, r5, r6
 80041a8:	9305      	str	r3, [sp, #20]
 80041aa:	42b5      	cmp	r5, r6
 80041ac:	d00c      	beq.n	80041c8 <_svfiprintf_r+0x74>
 80041ae:	0032      	movs	r2, r6
 80041b0:	0039      	movs	r1, r7
 80041b2:	9803      	ldr	r0, [sp, #12]
 80041b4:	f7ff ff6c 	bl	8004090 <__ssputs_r>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d100      	bne.n	80041be <_svfiprintf_r+0x6a>
 80041bc:	e0ae      	b.n	800431c <_svfiprintf_r+0x1c8>
 80041be:	6962      	ldr	r2, [r4, #20]
 80041c0:	9b05      	ldr	r3, [sp, #20]
 80041c2:	4694      	mov	ip, r2
 80041c4:	4463      	add	r3, ip
 80041c6:	6163      	str	r3, [r4, #20]
 80041c8:	782b      	ldrb	r3, [r5, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d100      	bne.n	80041d0 <_svfiprintf_r+0x7c>
 80041ce:	e0a5      	b.n	800431c <_svfiprintf_r+0x1c8>
 80041d0:	2201      	movs	r2, #1
 80041d2:	2300      	movs	r3, #0
 80041d4:	4252      	negs	r2, r2
 80041d6:	6062      	str	r2, [r4, #4]
 80041d8:	a904      	add	r1, sp, #16
 80041da:	3254      	adds	r2, #84	; 0x54
 80041dc:	1852      	adds	r2, r2, r1
 80041de:	1c6e      	adds	r6, r5, #1
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	60e3      	str	r3, [r4, #12]
 80041e4:	60a3      	str	r3, [r4, #8]
 80041e6:	7013      	strb	r3, [r2, #0]
 80041e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80041ea:	2205      	movs	r2, #5
 80041ec:	7831      	ldrb	r1, [r6, #0]
 80041ee:	4854      	ldr	r0, [pc, #336]	; (8004340 <_svfiprintf_r+0x1ec>)
 80041f0:	f000 fa32 	bl	8004658 <memchr>
 80041f4:	1c75      	adds	r5, r6, #1
 80041f6:	2800      	cmp	r0, #0
 80041f8:	d11f      	bne.n	800423a <_svfiprintf_r+0xe6>
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	06d3      	lsls	r3, r2, #27
 80041fe:	d504      	bpl.n	800420a <_svfiprintf_r+0xb6>
 8004200:	2353      	movs	r3, #83	; 0x53
 8004202:	a904      	add	r1, sp, #16
 8004204:	185b      	adds	r3, r3, r1
 8004206:	2120      	movs	r1, #32
 8004208:	7019      	strb	r1, [r3, #0]
 800420a:	0713      	lsls	r3, r2, #28
 800420c:	d504      	bpl.n	8004218 <_svfiprintf_r+0xc4>
 800420e:	2353      	movs	r3, #83	; 0x53
 8004210:	a904      	add	r1, sp, #16
 8004212:	185b      	adds	r3, r3, r1
 8004214:	212b      	movs	r1, #43	; 0x2b
 8004216:	7019      	strb	r1, [r3, #0]
 8004218:	7833      	ldrb	r3, [r6, #0]
 800421a:	2b2a      	cmp	r3, #42	; 0x2a
 800421c:	d016      	beq.n	800424c <_svfiprintf_r+0xf8>
 800421e:	0035      	movs	r5, r6
 8004220:	2100      	movs	r1, #0
 8004222:	200a      	movs	r0, #10
 8004224:	68e3      	ldr	r3, [r4, #12]
 8004226:	782a      	ldrb	r2, [r5, #0]
 8004228:	1c6e      	adds	r6, r5, #1
 800422a:	3a30      	subs	r2, #48	; 0x30
 800422c:	2a09      	cmp	r2, #9
 800422e:	d94e      	bls.n	80042ce <_svfiprintf_r+0x17a>
 8004230:	2900      	cmp	r1, #0
 8004232:	d111      	bne.n	8004258 <_svfiprintf_r+0x104>
 8004234:	e017      	b.n	8004266 <_svfiprintf_r+0x112>
 8004236:	3501      	adds	r5, #1
 8004238:	e7b0      	b.n	800419c <_svfiprintf_r+0x48>
 800423a:	4b41      	ldr	r3, [pc, #260]	; (8004340 <_svfiprintf_r+0x1ec>)
 800423c:	6822      	ldr	r2, [r4, #0]
 800423e:	1ac0      	subs	r0, r0, r3
 8004240:	2301      	movs	r3, #1
 8004242:	4083      	lsls	r3, r0
 8004244:	4313      	orrs	r3, r2
 8004246:	002e      	movs	r6, r5
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	e7ce      	b.n	80041ea <_svfiprintf_r+0x96>
 800424c:	9b07      	ldr	r3, [sp, #28]
 800424e:	1d19      	adds	r1, r3, #4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	9107      	str	r1, [sp, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	db01      	blt.n	800425c <_svfiprintf_r+0x108>
 8004258:	930b      	str	r3, [sp, #44]	; 0x2c
 800425a:	e004      	b.n	8004266 <_svfiprintf_r+0x112>
 800425c:	425b      	negs	r3, r3
 800425e:	60e3      	str	r3, [r4, #12]
 8004260:	2302      	movs	r3, #2
 8004262:	4313      	orrs	r3, r2
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	782b      	ldrb	r3, [r5, #0]
 8004268:	2b2e      	cmp	r3, #46	; 0x2e
 800426a:	d10a      	bne.n	8004282 <_svfiprintf_r+0x12e>
 800426c:	786b      	ldrb	r3, [r5, #1]
 800426e:	2b2a      	cmp	r3, #42	; 0x2a
 8004270:	d135      	bne.n	80042de <_svfiprintf_r+0x18a>
 8004272:	9b07      	ldr	r3, [sp, #28]
 8004274:	3502      	adds	r5, #2
 8004276:	1d1a      	adds	r2, r3, #4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	9207      	str	r2, [sp, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	db2b      	blt.n	80042d8 <_svfiprintf_r+0x184>
 8004280:	9309      	str	r3, [sp, #36]	; 0x24
 8004282:	4e30      	ldr	r6, [pc, #192]	; (8004344 <_svfiprintf_r+0x1f0>)
 8004284:	2203      	movs	r2, #3
 8004286:	0030      	movs	r0, r6
 8004288:	7829      	ldrb	r1, [r5, #0]
 800428a:	f000 f9e5 	bl	8004658 <memchr>
 800428e:	2800      	cmp	r0, #0
 8004290:	d006      	beq.n	80042a0 <_svfiprintf_r+0x14c>
 8004292:	2340      	movs	r3, #64	; 0x40
 8004294:	1b80      	subs	r0, r0, r6
 8004296:	4083      	lsls	r3, r0
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	3501      	adds	r5, #1
 800429c:	4313      	orrs	r3, r2
 800429e:	6023      	str	r3, [r4, #0]
 80042a0:	7829      	ldrb	r1, [r5, #0]
 80042a2:	2206      	movs	r2, #6
 80042a4:	4828      	ldr	r0, [pc, #160]	; (8004348 <_svfiprintf_r+0x1f4>)
 80042a6:	1c6e      	adds	r6, r5, #1
 80042a8:	7621      	strb	r1, [r4, #24]
 80042aa:	f000 f9d5 	bl	8004658 <memchr>
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d03c      	beq.n	800432c <_svfiprintf_r+0x1d8>
 80042b2:	4b26      	ldr	r3, [pc, #152]	; (800434c <_svfiprintf_r+0x1f8>)
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d125      	bne.n	8004304 <_svfiprintf_r+0x1b0>
 80042b8:	2207      	movs	r2, #7
 80042ba:	9b07      	ldr	r3, [sp, #28]
 80042bc:	3307      	adds	r3, #7
 80042be:	4393      	bics	r3, r2
 80042c0:	3308      	adds	r3, #8
 80042c2:	9307      	str	r3, [sp, #28]
 80042c4:	6963      	ldr	r3, [r4, #20]
 80042c6:	9a04      	ldr	r2, [sp, #16]
 80042c8:	189b      	adds	r3, r3, r2
 80042ca:	6163      	str	r3, [r4, #20]
 80042cc:	e765      	b.n	800419a <_svfiprintf_r+0x46>
 80042ce:	4343      	muls	r3, r0
 80042d0:	0035      	movs	r5, r6
 80042d2:	2101      	movs	r1, #1
 80042d4:	189b      	adds	r3, r3, r2
 80042d6:	e7a6      	b.n	8004226 <_svfiprintf_r+0xd2>
 80042d8:	2301      	movs	r3, #1
 80042da:	425b      	negs	r3, r3
 80042dc:	e7d0      	b.n	8004280 <_svfiprintf_r+0x12c>
 80042de:	2300      	movs	r3, #0
 80042e0:	200a      	movs	r0, #10
 80042e2:	001a      	movs	r2, r3
 80042e4:	3501      	adds	r5, #1
 80042e6:	6063      	str	r3, [r4, #4]
 80042e8:	7829      	ldrb	r1, [r5, #0]
 80042ea:	1c6e      	adds	r6, r5, #1
 80042ec:	3930      	subs	r1, #48	; 0x30
 80042ee:	2909      	cmp	r1, #9
 80042f0:	d903      	bls.n	80042fa <_svfiprintf_r+0x1a6>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0c5      	beq.n	8004282 <_svfiprintf_r+0x12e>
 80042f6:	9209      	str	r2, [sp, #36]	; 0x24
 80042f8:	e7c3      	b.n	8004282 <_svfiprintf_r+0x12e>
 80042fa:	4342      	muls	r2, r0
 80042fc:	0035      	movs	r5, r6
 80042fe:	2301      	movs	r3, #1
 8004300:	1852      	adds	r2, r2, r1
 8004302:	e7f1      	b.n	80042e8 <_svfiprintf_r+0x194>
 8004304:	ab07      	add	r3, sp, #28
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	003a      	movs	r2, r7
 800430a:	0021      	movs	r1, r4
 800430c:	4b10      	ldr	r3, [pc, #64]	; (8004350 <_svfiprintf_r+0x1fc>)
 800430e:	9803      	ldr	r0, [sp, #12]
 8004310:	e000      	b.n	8004314 <_svfiprintf_r+0x1c0>
 8004312:	bf00      	nop
 8004314:	9004      	str	r0, [sp, #16]
 8004316:	9b04      	ldr	r3, [sp, #16]
 8004318:	3301      	adds	r3, #1
 800431a:	d1d3      	bne.n	80042c4 <_svfiprintf_r+0x170>
 800431c:	89bb      	ldrh	r3, [r7, #12]
 800431e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004320:	065b      	lsls	r3, r3, #25
 8004322:	d400      	bmi.n	8004326 <_svfiprintf_r+0x1d2>
 8004324:	e72d      	b.n	8004182 <_svfiprintf_r+0x2e>
 8004326:	2001      	movs	r0, #1
 8004328:	4240      	negs	r0, r0
 800432a:	e72a      	b.n	8004182 <_svfiprintf_r+0x2e>
 800432c:	ab07      	add	r3, sp, #28
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	003a      	movs	r2, r7
 8004332:	0021      	movs	r1, r4
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <_svfiprintf_r+0x1fc>)
 8004336:	9803      	ldr	r0, [sp, #12]
 8004338:	f000 f87c 	bl	8004434 <_printf_i>
 800433c:	e7ea      	b.n	8004314 <_svfiprintf_r+0x1c0>
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	08004958 	.word	0x08004958
 8004344:	0800495e 	.word	0x0800495e
 8004348:	08004962 	.word	0x08004962
 800434c:	00000000 	.word	0x00000000
 8004350:	08004091 	.word	0x08004091

08004354 <_printf_common>:
 8004354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004356:	0015      	movs	r5, r2
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	688a      	ldr	r2, [r1, #8]
 800435c:	690b      	ldr	r3, [r1, #16]
 800435e:	000c      	movs	r4, r1
 8004360:	9000      	str	r0, [sp, #0]
 8004362:	4293      	cmp	r3, r2
 8004364:	da00      	bge.n	8004368 <_printf_common+0x14>
 8004366:	0013      	movs	r3, r2
 8004368:	0022      	movs	r2, r4
 800436a:	602b      	str	r3, [r5, #0]
 800436c:	3243      	adds	r2, #67	; 0x43
 800436e:	7812      	ldrb	r2, [r2, #0]
 8004370:	2a00      	cmp	r2, #0
 8004372:	d001      	beq.n	8004378 <_printf_common+0x24>
 8004374:	3301      	adds	r3, #1
 8004376:	602b      	str	r3, [r5, #0]
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	069b      	lsls	r3, r3, #26
 800437c:	d502      	bpl.n	8004384 <_printf_common+0x30>
 800437e:	682b      	ldr	r3, [r5, #0]
 8004380:	3302      	adds	r3, #2
 8004382:	602b      	str	r3, [r5, #0]
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	2306      	movs	r3, #6
 8004388:	0017      	movs	r7, r2
 800438a:	401f      	ands	r7, r3
 800438c:	421a      	tst	r2, r3
 800438e:	d027      	beq.n	80043e0 <_printf_common+0x8c>
 8004390:	0023      	movs	r3, r4
 8004392:	3343      	adds	r3, #67	; 0x43
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	1e5a      	subs	r2, r3, #1
 8004398:	4193      	sbcs	r3, r2
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	0692      	lsls	r2, r2, #26
 800439e:	d430      	bmi.n	8004402 <_printf_common+0xae>
 80043a0:	0022      	movs	r2, r4
 80043a2:	9901      	ldr	r1, [sp, #4]
 80043a4:	9800      	ldr	r0, [sp, #0]
 80043a6:	9e08      	ldr	r6, [sp, #32]
 80043a8:	3243      	adds	r2, #67	; 0x43
 80043aa:	47b0      	blx	r6
 80043ac:	1c43      	adds	r3, r0, #1
 80043ae:	d025      	beq.n	80043fc <_printf_common+0xa8>
 80043b0:	2306      	movs	r3, #6
 80043b2:	6820      	ldr	r0, [r4, #0]
 80043b4:	682a      	ldr	r2, [r5, #0]
 80043b6:	68e1      	ldr	r1, [r4, #12]
 80043b8:	2500      	movs	r5, #0
 80043ba:	4003      	ands	r3, r0
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d103      	bne.n	80043c8 <_printf_common+0x74>
 80043c0:	1a8d      	subs	r5, r1, r2
 80043c2:	43eb      	mvns	r3, r5
 80043c4:	17db      	asrs	r3, r3, #31
 80043c6:	401d      	ands	r5, r3
 80043c8:	68a3      	ldr	r3, [r4, #8]
 80043ca:	6922      	ldr	r2, [r4, #16]
 80043cc:	4293      	cmp	r3, r2
 80043ce:	dd01      	ble.n	80043d4 <_printf_common+0x80>
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	18ed      	adds	r5, r5, r3
 80043d4:	2700      	movs	r7, #0
 80043d6:	42bd      	cmp	r5, r7
 80043d8:	d120      	bne.n	800441c <_printf_common+0xc8>
 80043da:	2000      	movs	r0, #0
 80043dc:	e010      	b.n	8004400 <_printf_common+0xac>
 80043de:	3701      	adds	r7, #1
 80043e0:	68e3      	ldr	r3, [r4, #12]
 80043e2:	682a      	ldr	r2, [r5, #0]
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	42bb      	cmp	r3, r7
 80043e8:	ddd2      	ble.n	8004390 <_printf_common+0x3c>
 80043ea:	0022      	movs	r2, r4
 80043ec:	2301      	movs	r3, #1
 80043ee:	9901      	ldr	r1, [sp, #4]
 80043f0:	9800      	ldr	r0, [sp, #0]
 80043f2:	9e08      	ldr	r6, [sp, #32]
 80043f4:	3219      	adds	r2, #25
 80043f6:	47b0      	blx	r6
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d1f0      	bne.n	80043de <_printf_common+0x8a>
 80043fc:	2001      	movs	r0, #1
 80043fe:	4240      	negs	r0, r0
 8004400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004402:	2030      	movs	r0, #48	; 0x30
 8004404:	18e1      	adds	r1, r4, r3
 8004406:	3143      	adds	r1, #67	; 0x43
 8004408:	7008      	strb	r0, [r1, #0]
 800440a:	0021      	movs	r1, r4
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	3145      	adds	r1, #69	; 0x45
 8004410:	7809      	ldrb	r1, [r1, #0]
 8004412:	18a2      	adds	r2, r4, r2
 8004414:	3243      	adds	r2, #67	; 0x43
 8004416:	3302      	adds	r3, #2
 8004418:	7011      	strb	r1, [r2, #0]
 800441a:	e7c1      	b.n	80043a0 <_printf_common+0x4c>
 800441c:	0022      	movs	r2, r4
 800441e:	2301      	movs	r3, #1
 8004420:	9901      	ldr	r1, [sp, #4]
 8004422:	9800      	ldr	r0, [sp, #0]
 8004424:	9e08      	ldr	r6, [sp, #32]
 8004426:	321a      	adds	r2, #26
 8004428:	47b0      	blx	r6
 800442a:	1c43      	adds	r3, r0, #1
 800442c:	d0e6      	beq.n	80043fc <_printf_common+0xa8>
 800442e:	3701      	adds	r7, #1
 8004430:	e7d1      	b.n	80043d6 <_printf_common+0x82>
	...

08004434 <_printf_i>:
 8004434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004436:	b08b      	sub	sp, #44	; 0x2c
 8004438:	9206      	str	r2, [sp, #24]
 800443a:	000a      	movs	r2, r1
 800443c:	3243      	adds	r2, #67	; 0x43
 800443e:	9307      	str	r3, [sp, #28]
 8004440:	9005      	str	r0, [sp, #20]
 8004442:	9204      	str	r2, [sp, #16]
 8004444:	7e0a      	ldrb	r2, [r1, #24]
 8004446:	000c      	movs	r4, r1
 8004448:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800444a:	2a78      	cmp	r2, #120	; 0x78
 800444c:	d806      	bhi.n	800445c <_printf_i+0x28>
 800444e:	2a62      	cmp	r2, #98	; 0x62
 8004450:	d808      	bhi.n	8004464 <_printf_i+0x30>
 8004452:	2a00      	cmp	r2, #0
 8004454:	d100      	bne.n	8004458 <_printf_i+0x24>
 8004456:	e0c0      	b.n	80045da <_printf_i+0x1a6>
 8004458:	2a58      	cmp	r2, #88	; 0x58
 800445a:	d052      	beq.n	8004502 <_printf_i+0xce>
 800445c:	0026      	movs	r6, r4
 800445e:	3642      	adds	r6, #66	; 0x42
 8004460:	7032      	strb	r2, [r6, #0]
 8004462:	e022      	b.n	80044aa <_printf_i+0x76>
 8004464:	0010      	movs	r0, r2
 8004466:	3863      	subs	r0, #99	; 0x63
 8004468:	2815      	cmp	r0, #21
 800446a:	d8f7      	bhi.n	800445c <_printf_i+0x28>
 800446c:	f7fb fe52 	bl	8000114 <__gnu_thumb1_case_shi>
 8004470:	001f0016 	.word	0x001f0016
 8004474:	fff6fff6 	.word	0xfff6fff6
 8004478:	fff6fff6 	.word	0xfff6fff6
 800447c:	fff6001f 	.word	0xfff6001f
 8004480:	fff6fff6 	.word	0xfff6fff6
 8004484:	00a8fff6 	.word	0x00a8fff6
 8004488:	009a0036 	.word	0x009a0036
 800448c:	fff6fff6 	.word	0xfff6fff6
 8004490:	fff600b9 	.word	0xfff600b9
 8004494:	fff60036 	.word	0xfff60036
 8004498:	009efff6 	.word	0x009efff6
 800449c:	0026      	movs	r6, r4
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	3642      	adds	r6, #66	; 0x42
 80044a2:	1d11      	adds	r1, r2, #4
 80044a4:	6019      	str	r1, [r3, #0]
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	7033      	strb	r3, [r6, #0]
 80044aa:	2301      	movs	r3, #1
 80044ac:	e0a7      	b.n	80045fe <_printf_i+0x1ca>
 80044ae:	6808      	ldr	r0, [r1, #0]
 80044b0:	6819      	ldr	r1, [r3, #0]
 80044b2:	1d0a      	adds	r2, r1, #4
 80044b4:	0605      	lsls	r5, r0, #24
 80044b6:	d50b      	bpl.n	80044d0 <_printf_i+0x9c>
 80044b8:	680d      	ldr	r5, [r1, #0]
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	2d00      	cmp	r5, #0
 80044be:	da03      	bge.n	80044c8 <_printf_i+0x94>
 80044c0:	232d      	movs	r3, #45	; 0x2d
 80044c2:	9a04      	ldr	r2, [sp, #16]
 80044c4:	426d      	negs	r5, r5
 80044c6:	7013      	strb	r3, [r2, #0]
 80044c8:	4b61      	ldr	r3, [pc, #388]	; (8004650 <_printf_i+0x21c>)
 80044ca:	270a      	movs	r7, #10
 80044cc:	9303      	str	r3, [sp, #12]
 80044ce:	e032      	b.n	8004536 <_printf_i+0x102>
 80044d0:	680d      	ldr	r5, [r1, #0]
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	0641      	lsls	r1, r0, #25
 80044d6:	d5f1      	bpl.n	80044bc <_printf_i+0x88>
 80044d8:	b22d      	sxth	r5, r5
 80044da:	e7ef      	b.n	80044bc <_printf_i+0x88>
 80044dc:	680d      	ldr	r5, [r1, #0]
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	1d08      	adds	r0, r1, #4
 80044e2:	6018      	str	r0, [r3, #0]
 80044e4:	062e      	lsls	r6, r5, #24
 80044e6:	d501      	bpl.n	80044ec <_printf_i+0xb8>
 80044e8:	680d      	ldr	r5, [r1, #0]
 80044ea:	e003      	b.n	80044f4 <_printf_i+0xc0>
 80044ec:	066d      	lsls	r5, r5, #25
 80044ee:	d5fb      	bpl.n	80044e8 <_printf_i+0xb4>
 80044f0:	680d      	ldr	r5, [r1, #0]
 80044f2:	b2ad      	uxth	r5, r5
 80044f4:	4b56      	ldr	r3, [pc, #344]	; (8004650 <_printf_i+0x21c>)
 80044f6:	270a      	movs	r7, #10
 80044f8:	9303      	str	r3, [sp, #12]
 80044fa:	2a6f      	cmp	r2, #111	; 0x6f
 80044fc:	d117      	bne.n	800452e <_printf_i+0xfa>
 80044fe:	2708      	movs	r7, #8
 8004500:	e015      	b.n	800452e <_printf_i+0xfa>
 8004502:	3145      	adds	r1, #69	; 0x45
 8004504:	700a      	strb	r2, [r1, #0]
 8004506:	4a52      	ldr	r2, [pc, #328]	; (8004650 <_printf_i+0x21c>)
 8004508:	9203      	str	r2, [sp, #12]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	6821      	ldr	r1, [r4, #0]
 800450e:	ca20      	ldmia	r2!, {r5}
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	0608      	lsls	r0, r1, #24
 8004514:	d550      	bpl.n	80045b8 <_printf_i+0x184>
 8004516:	07cb      	lsls	r3, r1, #31
 8004518:	d502      	bpl.n	8004520 <_printf_i+0xec>
 800451a:	2320      	movs	r3, #32
 800451c:	4319      	orrs	r1, r3
 800451e:	6021      	str	r1, [r4, #0]
 8004520:	2710      	movs	r7, #16
 8004522:	2d00      	cmp	r5, #0
 8004524:	d103      	bne.n	800452e <_printf_i+0xfa>
 8004526:	2320      	movs	r3, #32
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	439a      	bics	r2, r3
 800452c:	6022      	str	r2, [r4, #0]
 800452e:	0023      	movs	r3, r4
 8004530:	2200      	movs	r2, #0
 8004532:	3343      	adds	r3, #67	; 0x43
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	6863      	ldr	r3, [r4, #4]
 8004538:	60a3      	str	r3, [r4, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	db03      	blt.n	8004546 <_printf_i+0x112>
 800453e:	2204      	movs	r2, #4
 8004540:	6821      	ldr	r1, [r4, #0]
 8004542:	4391      	bics	r1, r2
 8004544:	6021      	str	r1, [r4, #0]
 8004546:	2d00      	cmp	r5, #0
 8004548:	d102      	bne.n	8004550 <_printf_i+0x11c>
 800454a:	9e04      	ldr	r6, [sp, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00c      	beq.n	800456a <_printf_i+0x136>
 8004550:	9e04      	ldr	r6, [sp, #16]
 8004552:	0028      	movs	r0, r5
 8004554:	0039      	movs	r1, r7
 8004556:	f7fb fe6d 	bl	8000234 <__aeabi_uidivmod>
 800455a:	9b03      	ldr	r3, [sp, #12]
 800455c:	3e01      	subs	r6, #1
 800455e:	5c5b      	ldrb	r3, [r3, r1]
 8004560:	7033      	strb	r3, [r6, #0]
 8004562:	002b      	movs	r3, r5
 8004564:	0005      	movs	r5, r0
 8004566:	429f      	cmp	r7, r3
 8004568:	d9f3      	bls.n	8004552 <_printf_i+0x11e>
 800456a:	2f08      	cmp	r7, #8
 800456c:	d109      	bne.n	8004582 <_printf_i+0x14e>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	07db      	lsls	r3, r3, #31
 8004572:	d506      	bpl.n	8004582 <_printf_i+0x14e>
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	6922      	ldr	r2, [r4, #16]
 8004578:	4293      	cmp	r3, r2
 800457a:	dc02      	bgt.n	8004582 <_printf_i+0x14e>
 800457c:	2330      	movs	r3, #48	; 0x30
 800457e:	3e01      	subs	r6, #1
 8004580:	7033      	strb	r3, [r6, #0]
 8004582:	9b04      	ldr	r3, [sp, #16]
 8004584:	1b9b      	subs	r3, r3, r6
 8004586:	6123      	str	r3, [r4, #16]
 8004588:	9b07      	ldr	r3, [sp, #28]
 800458a:	0021      	movs	r1, r4
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	9805      	ldr	r0, [sp, #20]
 8004590:	9b06      	ldr	r3, [sp, #24]
 8004592:	aa09      	add	r2, sp, #36	; 0x24
 8004594:	f7ff fede 	bl	8004354 <_printf_common>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d135      	bne.n	8004608 <_printf_i+0x1d4>
 800459c:	2001      	movs	r0, #1
 800459e:	4240      	negs	r0, r0
 80045a0:	b00b      	add	sp, #44	; 0x2c
 80045a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a4:	2220      	movs	r2, #32
 80045a6:	6809      	ldr	r1, [r1, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	6022      	str	r2, [r4, #0]
 80045ac:	0022      	movs	r2, r4
 80045ae:	2178      	movs	r1, #120	; 0x78
 80045b0:	3245      	adds	r2, #69	; 0x45
 80045b2:	7011      	strb	r1, [r2, #0]
 80045b4:	4a27      	ldr	r2, [pc, #156]	; (8004654 <_printf_i+0x220>)
 80045b6:	e7a7      	b.n	8004508 <_printf_i+0xd4>
 80045b8:	0648      	lsls	r0, r1, #25
 80045ba:	d5ac      	bpl.n	8004516 <_printf_i+0xe2>
 80045bc:	b2ad      	uxth	r5, r5
 80045be:	e7aa      	b.n	8004516 <_printf_i+0xe2>
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	680d      	ldr	r5, [r1, #0]
 80045c4:	1d10      	adds	r0, r2, #4
 80045c6:	6949      	ldr	r1, [r1, #20]
 80045c8:	6018      	str	r0, [r3, #0]
 80045ca:	6813      	ldr	r3, [r2, #0]
 80045cc:	062e      	lsls	r6, r5, #24
 80045ce:	d501      	bpl.n	80045d4 <_printf_i+0x1a0>
 80045d0:	6019      	str	r1, [r3, #0]
 80045d2:	e002      	b.n	80045da <_printf_i+0x1a6>
 80045d4:	066d      	lsls	r5, r5, #25
 80045d6:	d5fb      	bpl.n	80045d0 <_printf_i+0x19c>
 80045d8:	8019      	strh	r1, [r3, #0]
 80045da:	2300      	movs	r3, #0
 80045dc:	9e04      	ldr	r6, [sp, #16]
 80045de:	6123      	str	r3, [r4, #16]
 80045e0:	e7d2      	b.n	8004588 <_printf_i+0x154>
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	1d11      	adds	r1, r2, #4
 80045e6:	6019      	str	r1, [r3, #0]
 80045e8:	6816      	ldr	r6, [r2, #0]
 80045ea:	2100      	movs	r1, #0
 80045ec:	0030      	movs	r0, r6
 80045ee:	6862      	ldr	r2, [r4, #4]
 80045f0:	f000 f832 	bl	8004658 <memchr>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d001      	beq.n	80045fc <_printf_i+0x1c8>
 80045f8:	1b80      	subs	r0, r0, r6
 80045fa:	6060      	str	r0, [r4, #4]
 80045fc:	6863      	ldr	r3, [r4, #4]
 80045fe:	6123      	str	r3, [r4, #16]
 8004600:	2300      	movs	r3, #0
 8004602:	9a04      	ldr	r2, [sp, #16]
 8004604:	7013      	strb	r3, [r2, #0]
 8004606:	e7bf      	b.n	8004588 <_printf_i+0x154>
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	0032      	movs	r2, r6
 800460c:	9906      	ldr	r1, [sp, #24]
 800460e:	9805      	ldr	r0, [sp, #20]
 8004610:	9d07      	ldr	r5, [sp, #28]
 8004612:	47a8      	blx	r5
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d0c1      	beq.n	800459c <_printf_i+0x168>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	079b      	lsls	r3, r3, #30
 800461c:	d415      	bmi.n	800464a <_printf_i+0x216>
 800461e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004620:	68e0      	ldr	r0, [r4, #12]
 8004622:	4298      	cmp	r0, r3
 8004624:	dabc      	bge.n	80045a0 <_printf_i+0x16c>
 8004626:	0018      	movs	r0, r3
 8004628:	e7ba      	b.n	80045a0 <_printf_i+0x16c>
 800462a:	0022      	movs	r2, r4
 800462c:	2301      	movs	r3, #1
 800462e:	9906      	ldr	r1, [sp, #24]
 8004630:	9805      	ldr	r0, [sp, #20]
 8004632:	9e07      	ldr	r6, [sp, #28]
 8004634:	3219      	adds	r2, #25
 8004636:	47b0      	blx	r6
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d0af      	beq.n	800459c <_printf_i+0x168>
 800463c:	3501      	adds	r5, #1
 800463e:	68e3      	ldr	r3, [r4, #12]
 8004640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	42ab      	cmp	r3, r5
 8004646:	dcf0      	bgt.n	800462a <_printf_i+0x1f6>
 8004648:	e7e9      	b.n	800461e <_printf_i+0x1ea>
 800464a:	2500      	movs	r5, #0
 800464c:	e7f7      	b.n	800463e <_printf_i+0x20a>
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	08004969 	.word	0x08004969
 8004654:	0800497a 	.word	0x0800497a

08004658 <memchr>:
 8004658:	b2c9      	uxtb	r1, r1
 800465a:	1882      	adds	r2, r0, r2
 800465c:	4290      	cmp	r0, r2
 800465e:	d101      	bne.n	8004664 <memchr+0xc>
 8004660:	2000      	movs	r0, #0
 8004662:	4770      	bx	lr
 8004664:	7803      	ldrb	r3, [r0, #0]
 8004666:	428b      	cmp	r3, r1
 8004668:	d0fb      	beq.n	8004662 <memchr+0xa>
 800466a:	3001      	adds	r0, #1
 800466c:	e7f6      	b.n	800465c <memchr+0x4>

0800466e <memcpy>:
 800466e:	2300      	movs	r3, #0
 8004670:	b510      	push	{r4, lr}
 8004672:	429a      	cmp	r2, r3
 8004674:	d100      	bne.n	8004678 <memcpy+0xa>
 8004676:	bd10      	pop	{r4, pc}
 8004678:	5ccc      	ldrb	r4, [r1, r3]
 800467a:	54c4      	strb	r4, [r0, r3]
 800467c:	3301      	adds	r3, #1
 800467e:	e7f8      	b.n	8004672 <memcpy+0x4>

08004680 <memmove>:
 8004680:	b510      	push	{r4, lr}
 8004682:	4288      	cmp	r0, r1
 8004684:	d902      	bls.n	800468c <memmove+0xc>
 8004686:	188b      	adds	r3, r1, r2
 8004688:	4298      	cmp	r0, r3
 800468a:	d303      	bcc.n	8004694 <memmove+0x14>
 800468c:	2300      	movs	r3, #0
 800468e:	e007      	b.n	80046a0 <memmove+0x20>
 8004690:	5c8b      	ldrb	r3, [r1, r2]
 8004692:	5483      	strb	r3, [r0, r2]
 8004694:	3a01      	subs	r2, #1
 8004696:	d2fb      	bcs.n	8004690 <memmove+0x10>
 8004698:	bd10      	pop	{r4, pc}
 800469a:	5ccc      	ldrb	r4, [r1, r3]
 800469c:	54c4      	strb	r4, [r0, r3]
 800469e:	3301      	adds	r3, #1
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d1fa      	bne.n	800469a <memmove+0x1a>
 80046a4:	e7f8      	b.n	8004698 <memmove+0x18>
	...

080046a8 <_free_r>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	0005      	movs	r5, r0
 80046ac:	2900      	cmp	r1, #0
 80046ae:	d010      	beq.n	80046d2 <_free_r+0x2a>
 80046b0:	1f0c      	subs	r4, r1, #4
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da00      	bge.n	80046ba <_free_r+0x12>
 80046b8:	18e4      	adds	r4, r4, r3
 80046ba:	0028      	movs	r0, r5
 80046bc:	f000 f8d4 	bl	8004868 <__malloc_lock>
 80046c0:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <_free_r+0x90>)
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <_free_r+0x2c>
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	6014      	str	r4, [r2, #0]
 80046cc:	0028      	movs	r0, r5
 80046ce:	f000 f8d3 	bl	8004878 <__malloc_unlock>
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	d908      	bls.n	80046ea <_free_r+0x42>
 80046d8:	6821      	ldr	r1, [r4, #0]
 80046da:	1860      	adds	r0, r4, r1
 80046dc:	4283      	cmp	r3, r0
 80046de:	d1f3      	bne.n	80046c8 <_free_r+0x20>
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	1841      	adds	r1, r0, r1
 80046e6:	6021      	str	r1, [r4, #0]
 80046e8:	e7ee      	b.n	80046c8 <_free_r+0x20>
 80046ea:	001a      	movs	r2, r3
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <_free_r+0x4e>
 80046f2:	42a3      	cmp	r3, r4
 80046f4:	d9f9      	bls.n	80046ea <_free_r+0x42>
 80046f6:	6811      	ldr	r1, [r2, #0]
 80046f8:	1850      	adds	r0, r2, r1
 80046fa:	42a0      	cmp	r0, r4
 80046fc:	d10b      	bne.n	8004716 <_free_r+0x6e>
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	1809      	adds	r1, r1, r0
 8004702:	1850      	adds	r0, r2, r1
 8004704:	6011      	str	r1, [r2, #0]
 8004706:	4283      	cmp	r3, r0
 8004708:	d1e0      	bne.n	80046cc <_free_r+0x24>
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	1841      	adds	r1, r0, r1
 8004710:	6011      	str	r1, [r2, #0]
 8004712:	6053      	str	r3, [r2, #4]
 8004714:	e7da      	b.n	80046cc <_free_r+0x24>
 8004716:	42a0      	cmp	r0, r4
 8004718:	d902      	bls.n	8004720 <_free_r+0x78>
 800471a:	230c      	movs	r3, #12
 800471c:	602b      	str	r3, [r5, #0]
 800471e:	e7d5      	b.n	80046cc <_free_r+0x24>
 8004720:	6821      	ldr	r1, [r4, #0]
 8004722:	1860      	adds	r0, r4, r1
 8004724:	4283      	cmp	r3, r0
 8004726:	d103      	bne.n	8004730 <_free_r+0x88>
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	1841      	adds	r1, r0, r1
 800472e:	6021      	str	r1, [r4, #0]
 8004730:	6063      	str	r3, [r4, #4]
 8004732:	6054      	str	r4, [r2, #4]
 8004734:	e7ca      	b.n	80046cc <_free_r+0x24>
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	200000b4 	.word	0x200000b4

0800473c <_malloc_r>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	2303      	movs	r3, #3
 8004740:	1ccd      	adds	r5, r1, #3
 8004742:	439d      	bics	r5, r3
 8004744:	3508      	adds	r5, #8
 8004746:	0006      	movs	r6, r0
 8004748:	2d0c      	cmp	r5, #12
 800474a:	d21f      	bcs.n	800478c <_malloc_r+0x50>
 800474c:	250c      	movs	r5, #12
 800474e:	42a9      	cmp	r1, r5
 8004750:	d81e      	bhi.n	8004790 <_malloc_r+0x54>
 8004752:	0030      	movs	r0, r6
 8004754:	f000 f888 	bl	8004868 <__malloc_lock>
 8004758:	4925      	ldr	r1, [pc, #148]	; (80047f0 <_malloc_r+0xb4>)
 800475a:	680a      	ldr	r2, [r1, #0]
 800475c:	0014      	movs	r4, r2
 800475e:	2c00      	cmp	r4, #0
 8004760:	d11a      	bne.n	8004798 <_malloc_r+0x5c>
 8004762:	4f24      	ldr	r7, [pc, #144]	; (80047f4 <_malloc_r+0xb8>)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d104      	bne.n	8004774 <_malloc_r+0x38>
 800476a:	0021      	movs	r1, r4
 800476c:	0030      	movs	r0, r6
 800476e:	f000 f869 	bl	8004844 <_sbrk_r>
 8004772:	6038      	str	r0, [r7, #0]
 8004774:	0029      	movs	r1, r5
 8004776:	0030      	movs	r0, r6
 8004778:	f000 f864 	bl	8004844 <_sbrk_r>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d12b      	bne.n	80047d8 <_malloc_r+0x9c>
 8004780:	230c      	movs	r3, #12
 8004782:	0030      	movs	r0, r6
 8004784:	6033      	str	r3, [r6, #0]
 8004786:	f000 f877 	bl	8004878 <__malloc_unlock>
 800478a:	e003      	b.n	8004794 <_malloc_r+0x58>
 800478c:	2d00      	cmp	r5, #0
 800478e:	dade      	bge.n	800474e <_malloc_r+0x12>
 8004790:	230c      	movs	r3, #12
 8004792:	6033      	str	r3, [r6, #0]
 8004794:	2000      	movs	r0, #0
 8004796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	1b5b      	subs	r3, r3, r5
 800479c:	d419      	bmi.n	80047d2 <_malloc_r+0x96>
 800479e:	2b0b      	cmp	r3, #11
 80047a0:	d903      	bls.n	80047aa <_malloc_r+0x6e>
 80047a2:	6023      	str	r3, [r4, #0]
 80047a4:	18e4      	adds	r4, r4, r3
 80047a6:	6025      	str	r5, [r4, #0]
 80047a8:	e003      	b.n	80047b2 <_malloc_r+0x76>
 80047aa:	6863      	ldr	r3, [r4, #4]
 80047ac:	42a2      	cmp	r2, r4
 80047ae:	d10e      	bne.n	80047ce <_malloc_r+0x92>
 80047b0:	600b      	str	r3, [r1, #0]
 80047b2:	0030      	movs	r0, r6
 80047b4:	f000 f860 	bl	8004878 <__malloc_unlock>
 80047b8:	0020      	movs	r0, r4
 80047ba:	2207      	movs	r2, #7
 80047bc:	300b      	adds	r0, #11
 80047be:	1d23      	adds	r3, r4, #4
 80047c0:	4390      	bics	r0, r2
 80047c2:	1ac2      	subs	r2, r0, r3
 80047c4:	4298      	cmp	r0, r3
 80047c6:	d0e6      	beq.n	8004796 <_malloc_r+0x5a>
 80047c8:	1a1b      	subs	r3, r3, r0
 80047ca:	50a3      	str	r3, [r4, r2]
 80047cc:	e7e3      	b.n	8004796 <_malloc_r+0x5a>
 80047ce:	6053      	str	r3, [r2, #4]
 80047d0:	e7ef      	b.n	80047b2 <_malloc_r+0x76>
 80047d2:	0022      	movs	r2, r4
 80047d4:	6864      	ldr	r4, [r4, #4]
 80047d6:	e7c2      	b.n	800475e <_malloc_r+0x22>
 80047d8:	2303      	movs	r3, #3
 80047da:	1cc4      	adds	r4, r0, #3
 80047dc:	439c      	bics	r4, r3
 80047de:	42a0      	cmp	r0, r4
 80047e0:	d0e1      	beq.n	80047a6 <_malloc_r+0x6a>
 80047e2:	1a21      	subs	r1, r4, r0
 80047e4:	0030      	movs	r0, r6
 80047e6:	f000 f82d 	bl	8004844 <_sbrk_r>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	d1db      	bne.n	80047a6 <_malloc_r+0x6a>
 80047ee:	e7c7      	b.n	8004780 <_malloc_r+0x44>
 80047f0:	200000b4 	.word	0x200000b4
 80047f4:	200000b8 	.word	0x200000b8

080047f8 <_realloc_r>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	0007      	movs	r7, r0
 80047fc:	000d      	movs	r5, r1
 80047fe:	0016      	movs	r6, r2
 8004800:	2900      	cmp	r1, #0
 8004802:	d105      	bne.n	8004810 <_realloc_r+0x18>
 8004804:	0011      	movs	r1, r2
 8004806:	f7ff ff99 	bl	800473c <_malloc_r>
 800480a:	0004      	movs	r4, r0
 800480c:	0020      	movs	r0, r4
 800480e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004810:	2a00      	cmp	r2, #0
 8004812:	d103      	bne.n	800481c <_realloc_r+0x24>
 8004814:	f7ff ff48 	bl	80046a8 <_free_r>
 8004818:	0034      	movs	r4, r6
 800481a:	e7f7      	b.n	800480c <_realloc_r+0x14>
 800481c:	f000 f834 	bl	8004888 <_malloc_usable_size_r>
 8004820:	002c      	movs	r4, r5
 8004822:	42b0      	cmp	r0, r6
 8004824:	d2f2      	bcs.n	800480c <_realloc_r+0x14>
 8004826:	0031      	movs	r1, r6
 8004828:	0038      	movs	r0, r7
 800482a:	f7ff ff87 	bl	800473c <_malloc_r>
 800482e:	1e04      	subs	r4, r0, #0
 8004830:	d0ec      	beq.n	800480c <_realloc_r+0x14>
 8004832:	0029      	movs	r1, r5
 8004834:	0032      	movs	r2, r6
 8004836:	f7ff ff1a 	bl	800466e <memcpy>
 800483a:	0029      	movs	r1, r5
 800483c:	0038      	movs	r0, r7
 800483e:	f7ff ff33 	bl	80046a8 <_free_r>
 8004842:	e7e3      	b.n	800480c <_realloc_r+0x14>

08004844 <_sbrk_r>:
 8004844:	2300      	movs	r3, #0
 8004846:	b570      	push	{r4, r5, r6, lr}
 8004848:	4d06      	ldr	r5, [pc, #24]	; (8004864 <_sbrk_r+0x20>)
 800484a:	0004      	movs	r4, r0
 800484c:	0008      	movs	r0, r1
 800484e:	602b      	str	r3, [r5, #0]
 8004850:	f7fc fae2 	bl	8000e18 <_sbrk>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d103      	bne.n	8004860 <_sbrk_r+0x1c>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d000      	beq.n	8004860 <_sbrk_r+0x1c>
 800485e:	6023      	str	r3, [r4, #0]
 8004860:	bd70      	pop	{r4, r5, r6, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	20000264 	.word	0x20000264

08004868 <__malloc_lock>:
 8004868:	b510      	push	{r4, lr}
 800486a:	4802      	ldr	r0, [pc, #8]	; (8004874 <__malloc_lock+0xc>)
 800486c:	f000 f814 	bl	8004898 <__retarget_lock_acquire_recursive>
 8004870:	bd10      	pop	{r4, pc}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	2000026c 	.word	0x2000026c

08004878 <__malloc_unlock>:
 8004878:	b510      	push	{r4, lr}
 800487a:	4802      	ldr	r0, [pc, #8]	; (8004884 <__malloc_unlock+0xc>)
 800487c:	f000 f80d 	bl	800489a <__retarget_lock_release_recursive>
 8004880:	bd10      	pop	{r4, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	2000026c 	.word	0x2000026c

08004888 <_malloc_usable_size_r>:
 8004888:	1f0b      	subs	r3, r1, #4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	1f18      	subs	r0, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	da01      	bge.n	8004896 <_malloc_usable_size_r+0xe>
 8004892:	580b      	ldr	r3, [r1, r0]
 8004894:	18c0      	adds	r0, r0, r3
 8004896:	4770      	bx	lr

08004898 <__retarget_lock_acquire_recursive>:
 8004898:	4770      	bx	lr

0800489a <__retarget_lock_release_recursive>:
 800489a:	4770      	bx	lr

0800489c <_init>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr

080048a8 <_fini>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr
