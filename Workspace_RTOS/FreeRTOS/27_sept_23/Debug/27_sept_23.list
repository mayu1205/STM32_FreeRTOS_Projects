
27_sept_23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c4c  08005c4c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c54  08005c54  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08005c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200000ec  08005d48  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08005d48  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014537  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002474  00000000  00000000  0003464b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00036ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00037ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0ae  00000000  00000000  000389c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012842  00000000  00000000  00052a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab39f  00000000  00000000  000652b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00110657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df4  00000000  00000000  001106ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000ec 	.word	0x200000ec
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005ab0 	.word	0x08005ab0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000f0 	.word	0x200000f0
 8000100:	08005ab0 	.word	0x08005ab0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	1c08      	adds	r0, r1, #0
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <switch_case1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int switch_case1(int dutyCycle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000648:	230c      	movs	r3, #12
 800064a:	18fb      	adds	r3, r7, r3
 800064c:	0018      	movs	r0, r3
 800064e:	231c      	movs	r3, #28
 8000650:	001a      	movs	r2, r3
 8000652:	2100      	movs	r1, #0
 8000654:	f004 fdfe 	bl	8005254 <memset>
	  htim14.Instance = TIM14;
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <switch_case1+0xa8>)
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <switch_case1+0xac>)
 800065c:	601a      	str	r2, [r3, #0]
	  htim14.Init.Prescaler = 16;
 800065e:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <switch_case1+0xa8>)
 8000660:	2210      	movs	r2, #16
 8000662:	605a      	str	r2, [r3, #4]
	  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <switch_case1+0xa8>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
	  htim14.Init.Period = 1000;
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <switch_case1+0xa8>)
 800066c:	22fa      	movs	r2, #250	; 0xfa
 800066e:	0092      	lsls	r2, r2, #2
 8000670:	60da      	str	r2, [r3, #12]
	  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <switch_case1+0xa8>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
	  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <switch_case1+0xa8>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <switch_case1+0xa8>)
 8000680:	0018      	movs	r0, r3
 8000682:	f002 fe4b 	bl	800331c <HAL_TIM_Base_Init>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <switch_case1+0x4e>
	  {
		Error_Handler();
 800068a:	f000 fb79 	bl	8000d80 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <switch_case1+0xa8>)
 8000690:	0018      	movs	r0, r3
 8000692:	f002 fe9b 	bl	80033cc <HAL_TIM_PWM_Init>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <switch_case1+0x5e>
	  {
		Error_Handler();
 800069a:	f000 fb71 	bl	8000d80 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800069e:	210c      	movs	r1, #12
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2260      	movs	r2, #96	; 0x60
 80006a4:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = dutyCycle;
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	605a      	str	r2, [r3, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
	  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b8:	1879      	adds	r1, r7, r1
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <switch_case1+0xa8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	0018      	movs	r0, r3
 80006c0:	f003 f946 	bl	8003950 <HAL_TIM_PWM_ConfigChannel>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <switch_case1+0x8c>
	  {
		Error_Handler();
 80006c8:	f000 fb5a 	bl	8000d80 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim14);
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <switch_case1+0xa8>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fbf0 	bl	8000eb4 <HAL_TIM_MspPostInit>

	  HAL_TIM_PWM_Start_IT(&htim14, TIM_CHANNEL_1);
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <switch_case1+0xa8>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	0018      	movs	r0, r3
 80006da:	f002 fed7 	bl	800348c <HAL_TIM_PWM_Start_IT>
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b00a      	add	sp, #40	; 0x28
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000238 	.word	0x20000238
 80006ec:	40002000 	.word	0x40002000

080006f0 <switch_case2>:

void switch_case2()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	//Get the ADC value from channel_0
	  sConfig.Channel = ADC_CHANNEL_0;
 80006f4:	4b35      	ldr	r3, [pc, #212]	; (80007cc <switch_case2+0xdc>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006fa:	4b34      	ldr	r3, [pc, #208]	; (80007cc <switch_case2+0xdc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000700:	4b32      	ldr	r3, [pc, #200]	; (80007cc <switch_case2+0xdc>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000706:	4a31      	ldr	r2, [pc, #196]	; (80007cc <switch_case2+0xdc>)
 8000708:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <switch_case2+0xe0>)
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f001 f9df 	bl	8001ad0 <HAL_ADC_ConfigChannel>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <switch_case2+0x2a>
	  {
		  Error_Handler();
 8000716:	f000 fb33 	bl	8000d80 <Error_Handler>
	  }

	  HAL_Delay(1);
 800071a:	2001      	movs	r0, #1
 800071c:	f000 fd62 	bl	80011e4 <HAL_Delay>

	  HAL_ADC_Start(&hadc1);
 8000720:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <switch_case2+0xe0>)
 8000722:	0018      	movs	r0, r3
 8000724:	f001 f8aa 	bl	800187c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000728:	2301      	movs	r3, #1
 800072a:	425a      	negs	r2, r3
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <switch_case2+0xe0>)
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f001 f92d 	bl	8001990 <HAL_ADC_PollForConversion>
	  channel_0_raw = HAL_ADC_GetValue(&hadc1);
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <switch_case2+0xe0>)
 8000738:	0018      	movs	r0, r3
 800073a:	f001 f9bd 	bl	8001ab8 <HAL_ADC_GetValue>
 800073e:	0003      	movs	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <switch_case2+0xe4>)
 8000744:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <switch_case2+0xe0>)
 8000748:	0018      	movs	r0, r3
 800074a:	f001 f8e5 	bl	8001918 <HAL_ADC_Stop>

	  //Convert to string and print
	  sprintf(msg,"ch_0 = %hu\n\r",channel_0_raw);
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <switch_case2+0xe4>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	001a      	movs	r2, r3
 8000754:	4920      	ldr	r1, [pc, #128]	; (80007d8 <switch_case2+0xe8>)
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <switch_case2+0xec>)
 8000758:	0018      	movs	r0, r3
 800075a:	f004 fd83 	bl	8005264 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg), HAL_MAX_DELAY);
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <switch_case2+0xec>)
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff fccf 	bl	8000104 <strlen>
 8000766:	0003      	movs	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	2301      	movs	r3, #1
 800076c:	425b      	negs	r3, r3
 800076e:	491b      	ldr	r1, [pc, #108]	; (80007dc <switch_case2+0xec>)
 8000770:	481b      	ldr	r0, [pc, #108]	; (80007e0 <switch_case2+0xf0>)
 8000772:	f003 fdeb 	bl	800434c <HAL_UART_Transmit>

	  static round = 0;
	  round++;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <switch_case2+0xf4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <switch_case2+0xf4>)
 800077e:	601a      	str	r2, [r3, #0]

	  sprintf(msg,"round=%d\n\r",round);
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <switch_case2+0xf4>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4918      	ldr	r1, [pc, #96]	; (80007e8 <switch_case2+0xf8>)
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <switch_case2+0xec>)
 8000788:	0018      	movs	r0, r3
 800078a:	f004 fd6b 	bl	8005264 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg), HAL_MAX_DELAY);
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <switch_case2+0xec>)
 8000790:	0018      	movs	r0, r3
 8000792:	f7ff fcb7 	bl	8000104 <strlen>
 8000796:	0003      	movs	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	2301      	movs	r3, #1
 800079c:	425b      	negs	r3, r3
 800079e:	490f      	ldr	r1, [pc, #60]	; (80007dc <switch_case2+0xec>)
 80007a0:	480f      	ldr	r0, [pc, #60]	; (80007e0 <switch_case2+0xf0>)
 80007a2:	f003 fdd3 	bl	800434c <HAL_UART_Transmit>

	  if(channel_0_raw>3000)
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <switch_case2+0xe4>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <switch_case2+0xfc>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d903      	bls.n	80007b8 <switch_case2+0xc8>
	  	  {
		  	  switch_case1(99);
 80007b0:	2063      	movs	r0, #99	; 0x63
 80007b2:	f7ff ff45 	bl	8000640 <switch_case1>
	  	  }
	  	  else{
	  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
	  	  }

}
 80007b6:	e006      	b.n	80007c6 <switch_case2+0xd6>
	  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 80007b8:	23a0      	movs	r3, #160	; 0xa0
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	2200      	movs	r2, #0
 80007be:	2120      	movs	r1, #32
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 fec5 	bl	8002550 <HAL_GPIO_WritePin>
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000108 	.word	0x20000108
 80007d0:	20000140 	.word	0x20000140
 80007d4:	200001a4 	.word	0x200001a4
 80007d8:	08005ac8 	.word	0x08005ac8
 80007dc:	20000134 	.word	0x20000134
 80007e0:	200001a8 	.word	0x200001a8
 80007e4:	20000114 	.word	0x20000114
 80007e8:	08005ad8 	.word	0x08005ad8
 80007ec:	00000bb8 	.word	0x00000bb8

080007f0 <switch_case3>:

void switch_case3()
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	//Get the ADC value from channel_1
	  sConfig.Channel = ADC_CHANNEL_1;
 80007f4:	4b27      	ldr	r3, [pc, #156]	; (8000894 <switch_case3+0xa4>)
 80007f6:	4a28      	ldr	r2, [pc, #160]	; (8000898 <switch_case3+0xa8>)
 80007f8:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <switch_case3+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <switch_case3+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000806:	4a23      	ldr	r2, [pc, #140]	; (8000894 <switch_case3+0xa4>)
 8000808:	4b24      	ldr	r3, [pc, #144]	; (800089c <switch_case3+0xac>)
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f001 f95f 	bl	8001ad0 <HAL_ADC_ConfigChannel>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <switch_case3+0x2a>
	  {
		  Error_Handler();
 8000816:	f000 fab3 	bl	8000d80 <Error_Handler>
	  }

	  HAL_ADC_Start(&hadc1);
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <switch_case3+0xac>)
 800081c:	0018      	movs	r0, r3
 800081e:	f001 f82d 	bl	800187c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000822:	2301      	movs	r3, #1
 8000824:	425a      	negs	r2, r3
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <switch_case3+0xac>)
 8000828:	0011      	movs	r1, r2
 800082a:	0018      	movs	r0, r3
 800082c:	f001 f8b0 	bl	8001990 <HAL_ADC_PollForConversion>
	  channel_1_raw = HAL_ADC_GetValue(&hadc1);
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <switch_case3+0xac>)
 8000832:	0018      	movs	r0, r3
 8000834:	f001 f940 	bl	8001ab8 <HAL_ADC_GetValue>
 8000838:	0003      	movs	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <switch_case3+0xb0>)
 800083e:	801a      	strh	r2, [r3, #0]

	  sprintf(msg,"ch_1 = %hu\r\n",channel_1_raw);
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <switch_case3+0xb0>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	001a      	movs	r2, r3
 8000846:	4917      	ldr	r1, [pc, #92]	; (80008a4 <switch_case3+0xb4>)
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <switch_case3+0xb8>)
 800084a:	0018      	movs	r0, r3
 800084c:	f004 fd0a 	bl	8005264 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg), 10);
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <switch_case3+0xb8>)
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff fc56 	bl	8000104 <strlen>
 8000858:	0003      	movs	r3, r0
 800085a:	b29a      	uxth	r2, r3
 800085c:	4912      	ldr	r1, [pc, #72]	; (80008a8 <switch_case3+0xb8>)
 800085e:	4813      	ldr	r0, [pc, #76]	; (80008ac <switch_case3+0xbc>)
 8000860:	230a      	movs	r3, #10
 8000862:	f003 fd73 	bl	800434c <HAL_UART_Transmit>

	  if(channel_1_raw>3000)
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <switch_case3+0xb0>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <switch_case3+0xc0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d907      	bls.n	8000880 <switch_case3+0x90>
	  {
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000870:	23a0      	movs	r3, #160	; 0xa0
 8000872:	05db      	lsls	r3, r3, #23
 8000874:	2201      	movs	r2, #1
 8000876:	2120      	movs	r1, #32
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fe69 	bl	8002550 <HAL_GPIO_WritePin>
	  }
	  else{
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
	  }

}
 800087e:	e006      	b.n	800088e <switch_case3+0x9e>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000880:	23a0      	movs	r3, #160	; 0xa0
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	2200      	movs	r2, #0
 8000886:	2120      	movs	r1, #32
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fe61 	bl	8002550 <HAL_GPIO_WritePin>
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000108 	.word	0x20000108
 8000898:	04000002 	.word	0x04000002
 800089c:	20000140 	.word	0x20000140
 80008a0:	20000124 	.word	0x20000124
 80008a4:	08005ae4 	.word	0x08005ae4
 80008a8:	20000134 	.word	0x20000134
 80008ac:	200001a8 	.word	0x200001a8
 80008b0:	00000bb8 	.word	0x00000bb8

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f000 fc0d 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f88f 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 fa0d 	bl	8000ce0 <MX_GPIO_Init>
  MX_TIM14_Init();
 80008c6:	f000 f96d 	bl	8000ba4 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80008ca:	f000 f9bb 	bl	8000c44 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008ce:	f000 f8eb 	bl	8000aa8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim14, TIM_CHANNEL_1);
 80008d2:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <main+0xfc>)
 80008d4:	2100      	movs	r1, #0
 80008d6:	0018      	movs	r0, r3
 80008d8:	f002 fdd8 	bl	800348c <HAL_TIM_PWM_Start_IT>

  HAL_UART_Transmit (&huart2, data, sizeof (data), HAL_MAX_DELAY);
 80008dc:	2301      	movs	r3, #1
 80008de:	425b      	negs	r3, r3
 80008e0:	4934      	ldr	r1, [pc, #208]	; (80009b4 <main+0x100>)
 80008e2:	4835      	ldr	r0, [pc, #212]	; (80009b8 <main+0x104>)
 80008e4:	2279      	movs	r2, #121	; 0x79
 80008e6:	f003 fd31 	bl	800434c <HAL_UART_Transmit>

  HAL_UART_Receive(&huart2, data1, 10, 5000);
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <main+0x108>)
 80008ec:	4934      	ldr	r1, [pc, #208]	; (80009c0 <main+0x10c>)
 80008ee:	4832      	ldr	r0, [pc, #200]	; (80009b8 <main+0x104>)
 80008f0:	220a      	movs	r2, #10
 80008f2:	f003 fdd7 	bl	80044a4 <HAL_UART_Receive>

  HAL_UART_Transmit (&huart2, data1, sizeof(data1), HAL_MAX_DELAY);
 80008f6:	2301      	movs	r3, #1
 80008f8:	425b      	negs	r3, r3
 80008fa:	4931      	ldr	r1, [pc, #196]	; (80009c0 <main+0x10c>)
 80008fc:	482e      	ldr	r0, [pc, #184]	; (80009b8 <main+0x104>)
 80008fe:	220a      	movs	r2, #10
 8000900:	f003 fd24 	bl	800434c <HAL_UART_Transmit>

  char n = data1[0];
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	4a2e      	ldr	r2, [pc, #184]	; (80009c0 <main+0x10c>)
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit (&huart2, n, sizeof(n), HAL_MAX_DELAY);
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	0019      	movs	r1, r3
 8000912:	2301      	movs	r3, #1
 8000914:	425b      	negs	r3, r3
 8000916:	4828      	ldr	r0, [pc, #160]	; (80009b8 <main+0x104>)
 8000918:	2201      	movs	r2, #1
 800091a:	f003 fd17 	bl	800434c <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch(n){
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b33      	cmp	r3, #51	; 0x33
 8000924:	d030      	beq.n	8000988 <main+0xd4>
 8000926:	dc39      	bgt.n	800099c <main+0xe8>
 8000928:	2b31      	cmp	r3, #49	; 0x31
 800092a:	d002      	beq.n	8000932 <main+0x7e>
 800092c:	2b32      	cmp	r3, #50	; 0x32
 800092e:	d00d      	beq.n	800094c <main+0x98>
 8000930:	e034      	b.n	800099c <main+0xe8>

	  	  case '1':
	  	  {
	  		  switch_case1(499);
 8000932:	23f4      	movs	r3, #244	; 0xf4
 8000934:	33ff      	adds	r3, #255	; 0xff
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fe82 	bl	8000640 <switch_case1>
			  HAL_UART_Transmit (&huart2, "Switch Case1\r\n", sizeof("Switch Case1\r\n"), HAL_MAX_DELAY);
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	4920      	ldr	r1, [pc, #128]	; (80009c4 <main+0x110>)
 8000942:	481d      	ldr	r0, [pc, #116]	; (80009b8 <main+0x104>)
 8000944:	220f      	movs	r2, #15
 8000946:	f003 fd01 	bl	800434c <HAL_UART_Transmit>
			  break;
 800094a:	e02f      	b.n	80009ac <main+0xf8>
	  	  }


	  	  case '2':
	  		HAL_UART_Transmit (&huart2, "Switch Case2\r\n", sizeof("Switch Case2\r\n"), HAL_MAX_DELAY);
 800094c:	2301      	movs	r3, #1
 800094e:	425b      	negs	r3, r3
 8000950:	491d      	ldr	r1, [pc, #116]	; (80009c8 <main+0x114>)
 8000952:	4819      	ldr	r0, [pc, #100]	; (80009b8 <main+0x104>)
 8000954:	220f      	movs	r2, #15
 8000956:	f003 fcf9 	bl	800434c <HAL_UART_Transmit>
	  		  while(1)
	  		  {
	  			switch_case2();
 800095a:	f7ff fec9 	bl	80006f0 <switch_case2>
	  			sprintf(msg,"I am stuck\r\n",channel_1_raw);
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <main+0x118>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	001a      	movs	r2, r3
 8000964:	491a      	ldr	r1, [pc, #104]	; (80009d0 <main+0x11c>)
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <main+0x120>)
 8000968:	0018      	movs	r0, r3
 800096a:	f004 fc7b 	bl	8005264 <siprintf>
	  			HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg), HAL_MAX_DELAY);
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <main+0x120>)
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff fbc7 	bl	8000104 <strlen>
 8000976:	0003      	movs	r3, r0
 8000978:	b29a      	uxth	r2, r3
 800097a:	2301      	movs	r3, #1
 800097c:	425b      	negs	r3, r3
 800097e:	4915      	ldr	r1, [pc, #84]	; (80009d4 <main+0x120>)
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <main+0x104>)
 8000982:	f003 fce3 	bl	800434c <HAL_UART_Transmit>
	  			switch_case2();
 8000986:	e7e8      	b.n	800095a <main+0xa6>
	  		  }
	  		  break;

	  	  case '3':
	  		HAL_UART_Transmit (&huart2, "Switch Case3\r\n", sizeof("Switch Case3\r\n"), HAL_MAX_DELAY);
 8000988:	2301      	movs	r3, #1
 800098a:	425b      	negs	r3, r3
 800098c:	4912      	ldr	r1, [pc, #72]	; (80009d8 <main+0x124>)
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <main+0x104>)
 8000990:	220f      	movs	r2, #15
 8000992:	f003 fcdb 	bl	800434c <HAL_UART_Transmit>
	  		  while(1)
	  		  {
	  			  switch_case3();
 8000996:	f7ff ff2b 	bl	80007f0 <switch_case3>
 800099a:	e7fc      	b.n	8000996 <main+0xe2>
	  		  }
	  		  break;

	  	  default :
	  		HAL_UART_Transmit (&huart2,"Error\r\n", sizeof("Error\r\n"),1000);
 800099c:	23fa      	movs	r3, #250	; 0xfa
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	490e      	ldr	r1, [pc, #56]	; (80009dc <main+0x128>)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <main+0x104>)
 80009a4:	2208      	movs	r2, #8
 80009a6:	f003 fcd1 	bl	800434c <HAL_UART_Transmit>
	  		break;
 80009aa:	46c0      	nop			; (mov r8, r8)
	  switch(n){
 80009ac:	e7b7      	b.n	800091e <main+0x6a>
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	20000238 	.word	0x20000238
 80009b4:	20000000 	.word	0x20000000
 80009b8:	200001a8 	.word	0x200001a8
 80009bc:	00001388 	.word	0x00001388
 80009c0:	20000128 	.word	0x20000128
 80009c4:	08005af4 	.word	0x08005af4
 80009c8:	08005b04 	.word	0x08005b04
 80009cc:	20000124 	.word	0x20000124
 80009d0:	08005b14 	.word	0x08005b14
 80009d4:	20000134 	.word	0x20000134
 80009d8:	08005b24 	.word	0x08005b24
 80009dc:	08005b34 	.word	0x08005b34

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b0a1      	sub	sp, #132	; 0x84
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	2448      	movs	r4, #72	; 0x48
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	0018      	movs	r0, r3
 80009ec:	2338      	movs	r3, #56	; 0x38
 80009ee:	001a      	movs	r2, r3
 80009f0:	2100      	movs	r1, #0
 80009f2:	f004 fc2f 	bl	8005254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f6:	2338      	movs	r3, #56	; 0x38
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	0018      	movs	r0, r3
 80009fc:	2310      	movs	r3, #16
 80009fe:	001a      	movs	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	f004 fc27 	bl	8005254 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	0018      	movs	r0, r3
 8000a0a:	2334      	movs	r3, #52	; 0x34
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	f004 fc20 	bl	8005254 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 fdb7 	bl	800258c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2202      	movs	r2, #2
 8000a22:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	0052      	lsls	r2, r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2240      	movs	r2, #64	; 0x40
 8000a36:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	0018      	movs	r0, r3
 8000a42:	f001 fdef 	bl	8002624 <HAL_RCC_OscConfig>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 f999 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4e:	2138      	movs	r1, #56	; 0x38
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2207      	movs	r2, #7
 8000a54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 f8f3 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a76:	f000 f983 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <SystemClock_Config+0xc4>)
 8000a7e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f002 fa8c 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000a98:	f000 f972 	bl	8000d80 <Error_Handler>
  }
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b021      	add	sp, #132	; 0x84
 8000aa2:	bd90      	pop	{r4, r7, pc}
 8000aa4:	00004002 	.word	0x00004002

08000aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	f004 fbcc 	bl	8005254 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000abc:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000abe:	4a37      	ldr	r2, [pc, #220]	; (8000b9c <MX_ADC1_Init+0xf4>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	05d2      	lsls	r2, r2, #23
 8000ac8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad0:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ad6:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	0392      	lsls	r2, r2, #14
 8000adc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ade:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000aea:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000af0:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 8000af6:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000af8:	2202      	movs	r2, #2
 8000afa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000afe:	2220      	movs	r2, #32
 8000b00:	2100      	movs	r1, #0
 8000b02:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000b12:	222c      	movs	r2, #44	; 0x2c
 8000b14:	2100      	movs	r1, #0
 8000b16:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000b2c:	223c      	movs	r2, #60	; 0x3c
 8000b2e:	2100      	movs	r1, #0
 8000b30:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 fcf6 	bl	800152c <HAL_ADC_Init>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000b44:	f000 f91c 	bl	8000d80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5a:	1d3a      	adds	r2, r7, #4
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 ffb5 	bl	8001ad0 <HAL_ADC_ConfigChannel>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000b6a:	f000 f909 	bl	8000d80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <MX_ADC1_Init+0xf8>)
 8000b72:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2204      	movs	r2, #4
 8000b78:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	1d3a      	adds	r2, r7, #4
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_ADC1_Init+0xf0>)
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f000 ffa5 	bl	8001ad0 <HAL_ADC_ConfigChannel>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000b8a:	f000 f8f9 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b004      	add	sp, #16
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	20000140 	.word	0x20000140
 8000b9c:	40012400 	.word	0x40012400
 8000ba0:	04000002 	.word	0x04000002

08000ba4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	0018      	movs	r0, r3
 8000bae:	231c      	movs	r3, #28
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f004 fb4e 	bl	8005254 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <MX_TIM14_Init+0x98>)
 8000bba:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <MX_TIM14_Init+0x9c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_TIM14_Init+0x98>)
 8000bc0:	2210      	movs	r2, #16
 8000bc2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_TIM14_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_TIM14_Init+0x98>)
 8000bcc:	22fa      	movs	r2, #250	; 0xfa
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_TIM14_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_TIM14_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_TIM14_Init+0x98>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f002 fb9b 	bl	800331c <HAL_TIM_Base_Init>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8000bea:	f000 f8c9 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_TIM14_Init+0x98>)
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 fbeb 	bl	80033cc <HAL_TIM_PWM_Init>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8000bfa:	f000 f8c1 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2260      	movs	r2, #96	; 0x60
 8000c02:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c16:	1d39      	adds	r1, r7, #4
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_TIM14_Init+0x98>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 fe97 	bl	8003950 <HAL_TIM_PWM_ConfigChannel>
 8000c22:	1e03      	subs	r3, r0, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000c26:	f000 f8ab 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <MX_TIM14_Init+0x98>)
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f000 f941 	bl	8000eb4 <HAL_TIM_MspPostInit>

}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b008      	add	sp, #32
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	20000238 	.word	0x20000238
 8000c40:	40002000 	.word	0x40002000

08000c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c4a:	4a24      	ldr	r2, [pc, #144]	; (8000cdc <MX_USART2_UART_Init+0x98>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c50:	22e1      	movs	r2, #225	; 0xe1
 8000c52:	0252      	lsls	r2, r2, #9
 8000c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f003 fb06 	bl	80042a0 <HAL_UART_Init>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c98:	f000 f872 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f004 f9cd 	bl	8005040 <HAL_UARTEx_SetTxFifoThreshold>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000caa:	f000 f869 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f004 fa04 	bl	80050c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cbc:	f000 f860 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f004 f982 	bl	8004fcc <HAL_UARTEx_DisableFifoMode>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 f858 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	200001a8 	.word	0x200001a8
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	240c      	movs	r4, #12
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	0018      	movs	r0, r3
 8000cec:	2314      	movs	r3, #20
 8000cee:	001a      	movs	r2, r3
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	f004 faaf 	bl	8005254 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_GPIO_Init+0x9c>)
 8000cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <MX_GPIO_Init+0x9c>)
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_GPIO_Init+0x9c>)
 8000d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d06:	2204      	movs	r2, #4
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_GPIO_Init+0x9c>)
 8000d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_GPIO_Init+0x9c>)
 8000d14:	2120      	movs	r1, #32
 8000d16:	430a      	orrs	r2, r1
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_GPIO_Init+0x9c>)
 8000d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1e:	2220      	movs	r2, #32
 8000d20:	4013      	ands	r3, r2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_GPIO_Init+0x9c>)
 8000d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_GPIO_Init+0x9c>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_GPIO_Init+0x9c>)
 8000d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d36:	2201      	movs	r2, #1
 8000d38:	4013      	ands	r3, r2
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d3e:	23a0      	movs	r3, #160	; 0xa0
 8000d40:	05db      	lsls	r3, r3, #23
 8000d42:	2200      	movs	r2, #0
 8000d44:	2120      	movs	r1, #32
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 fc02 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000d4c:	0021      	movs	r1, r4
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2220      	movs	r2, #32
 8000d52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2201      	movs	r2, #1
 8000d58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2202      	movs	r2, #2
 8000d64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d66:	187a      	adds	r2, r7, r1
 8000d68:	23a0      	movs	r3, #160	; 0xa0
 8000d6a:	05db      	lsls	r3, r3, #23
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f001 fa8a 	bl	8002288 <HAL_GPIO_Init>

}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b009      	add	sp, #36	; 0x24
 8000d7a:	bd90      	pop	{r4, r7, pc}
 8000d7c:	40021000 	.word	0x40021000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	2201      	movs	r2, #1
 8000da4:	4013      	ands	r3, r2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	0549      	lsls	r1, r1, #21
 8000db4:	430a      	orrs	r2, r1
 8000db6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	055b      	lsls	r3, r3, #21
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000dc6:	23c0      	movs	r3, #192	; 0xc0
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fa2e 	bl	800122c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b08b      	sub	sp, #44	; 0x2c
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	2414      	movs	r4, #20
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	0018      	movs	r0, r3
 8000dea:	2314      	movs	r3, #20
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f004 fa30 	bl	8005254 <memset>
  if(hadc->Instance==ADC1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a18      	ldr	r2, [pc, #96]	; (8000e5c <HAL_ADC_MspInit+0x80>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d129      	bne.n	8000e52 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_ADC_MspInit+0x84>)
 8000e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_ADC_MspInit+0x84>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	0349      	lsls	r1, r1, #13
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_ADC_MspInit+0x84>)
 8000e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	035b      	lsls	r3, r3, #13
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_ADC_MspInit+0x84>)
 8000e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_ADC_MspInit+0x84>)
 8000e20:	2101      	movs	r1, #1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_ADC_MspInit+0x84>)
 8000e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2203      	movs	r2, #3
 8000e36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	193a      	adds	r2, r7, r4
 8000e46:	23a0      	movs	r3, #160	; 0xa0
 8000e48:	05db      	lsls	r3, r3, #23
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f001 fa1b 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b00b      	add	sp, #44	; 0x2c
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	40012400 	.word	0x40012400
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_TIM_Base_MspInit+0x48>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d115      	bne.n	8000ea2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0209      	lsls	r1, r1, #8
 8000e80:	430a      	orrs	r2, r1
 8000e82:	641a      	str	r2, [r3, #64]	; 0x40
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2013      	movs	r0, #19
 8000e98:	f001 f9c4 	bl	8002224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000e9c:	2013      	movs	r0, #19
 8000e9e:	f001 f9d6 	bl	800224e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b004      	add	sp, #16
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	40002000 	.word	0x40002000
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	240c      	movs	r4, #12
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	2314      	movs	r3, #20
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f004 f9c4 	bl	8005254 <memset>
  if(htim->Instance==TIM14)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_TIM_MspPostInit+0x70>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d122      	bne.n	8000f1c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_TIM_MspPostInit+0x74>)
 8000ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_TIM_MspPostInit+0x74>)
 8000edc:	2104      	movs	r1, #4
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_TIM_MspPostInit+0x74>)
 8000ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	0152      	lsls	r2, r2, #5
 8000ef4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2202      	movs	r2, #2
 8000efc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_TIM_MspPostInit+0x78>)
 8000f14:	0019      	movs	r1, r3
 8000f16:	0010      	movs	r0, r2
 8000f18:	f001 f9b6 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b009      	add	sp, #36	; 0x24
 8000f22:	bd90      	pop	{r4, r7, pc}
 8000f24:	40002000 	.word	0x40002000
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	50000800 	.word	0x50000800

08000f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b08b      	sub	sp, #44	; 0x2c
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	2414      	movs	r4, #20
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	2314      	movs	r3, #20
 8000f40:	001a      	movs	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	f004 f986 	bl	8005254 <memset>
  if(huart->Instance==USART2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <HAL_UART_MspInit+0x8c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d130      	bne.n	8000fb4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <HAL_UART_MspInit+0x90>)
 8000f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_UART_MspInit+0x90>)
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	0289      	lsls	r1, r1, #10
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_UART_MspInit+0x90>)
 8000f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	029b      	lsls	r3, r3, #10
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <HAL_UART_MspInit+0x90>)
 8000f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <HAL_UART_MspInit+0x90>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	430a      	orrs	r2, r1
 8000f78:	635a      	str	r2, [r3, #52]	; 0x34
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_UART_MspInit+0x90>)
 8000f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000f86:	0021      	movs	r1, r4
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2202      	movs	r2, #2
 8000f92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	187a      	adds	r2, r7, r1
 8000fa8:	23a0      	movs	r3, #160	; 0xa0
 8000faa:	05db      	lsls	r3, r3, #23
 8000fac:	0011      	movs	r1, r2
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f001 f96a 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b00b      	add	sp, #44	; 0x2c
 8000fba:	bd90      	pop	{r4, r7, pc}
 8000fbc:	40004400 	.word	0x40004400
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f8e0 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <TIM14_IRQHandler+0x14>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f002 fb76 	bl	80036ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	20000238 	.word	0x20000238

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	18d3      	adds	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f004 f8e0 	bl	8005200 <__errno>
 8001040:	0003      	movs	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	2301      	movs	r3, #1
 8001048:	425b      	negs	r3, r3
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	18d2      	adds	r2, r2, r3
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <_sbrk+0x64>)
 800105c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b006      	add	sp, #24
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20009000 	.word	0x20009000
 800106c:	00000400 	.word	0x00000400
 8001070:	20000118 	.word	0x20000118
 8001074:	20000298 	.word	0x20000298

08001078 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001086:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001088:	f7ff fff6 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800108e:	490d      	ldr	r1, [pc, #52]	; (80010c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <LoopForever+0xe>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a4:	4c0a      	ldr	r4, [pc, #40]	; (80010d0 <LoopForever+0x16>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010b2:	f004 f8ab 	bl	800520c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010b6:	f7ff fbfd 	bl	80008b4 <main>

080010ba <LoopForever>:

LoopForever:
  b LoopForever
 80010ba:	e7fe      	b.n	80010ba <LoopForever>
  ldr   r0, =_estack
 80010bc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80010c8:	08005c5c 	.word	0x08005c5c
  ldr r2, =_sbss
 80010cc:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80010d0:	20000298 	.word	0x20000298

080010d4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_COMP_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_Init+0x3c>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Init+0x3c>)
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	0049      	lsls	r1, r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f810 	bl	8001118 <HAL_InitTick>
 80010f8:	1e03      	subs	r3, r0, #0
 80010fa:	d003      	beq.n	8001104 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	e001      	b.n	8001108 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fe42 	bl	8000d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	781b      	ldrb	r3, [r3, #0]
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	b002      	add	sp, #8
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001120:	230f      	movs	r3, #15
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_InitTick+0x88>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d02b      	beq.n	8001188 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <HAL_InitTick+0x8c>)
 8001132:	681c      	ldr	r4, [r3, #0]
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_InitTick+0x88>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	0019      	movs	r1, r3
 800113a:	23fa      	movs	r3, #250	; 0xfa
 800113c:	0098      	lsls	r0, r3, #2
 800113e:	f7fe fff3 	bl	8000128 <__udivsi3>
 8001142:	0003      	movs	r3, r0
 8001144:	0019      	movs	r1, r3
 8001146:	0020      	movs	r0, r4
 8001148:	f7fe ffee 	bl	8000128 <__udivsi3>
 800114c:	0003      	movs	r3, r0
 800114e:	0018      	movs	r0, r3
 8001150:	f001 f88d 	bl	800226e <HAL_SYSTICK_Config>
 8001154:	1e03      	subs	r3, r0, #0
 8001156:	d112      	bne.n	800117e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d80a      	bhi.n	8001174 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	2301      	movs	r3, #1
 8001162:	425b      	negs	r3, r3
 8001164:	2200      	movs	r2, #0
 8001166:	0018      	movs	r0, r3
 8001168:	f001 f85c 	bl	8002224 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_InitTick+0x90>)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e00d      	b.n	8001190 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001174:	230f      	movs	r3, #15
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e008      	b.n	8001190 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800117e:	230f      	movs	r3, #15
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e003      	b.n	8001190 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	781b      	ldrb	r3, [r3, #0]
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b005      	add	sp, #20
 800119c:	bd90      	pop	{r4, r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	20000084 	.word	0x20000084
 80011a4:	2000007c 	.word	0x2000007c
 80011a8:	20000080 	.word	0x20000080

080011ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x1c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	001a      	movs	r2, r3
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_IncTick+0x20>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	18d2      	adds	r2, r2, r3
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_IncTick+0x20>)
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	20000084 	.word	0x20000084
 80011cc:	20000284 	.word	0x20000284

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b02      	ldr	r3, [pc, #8]	; (80011e0 <HAL_GetTick+0x10>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	20000284 	.word	0x20000284

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff fff0 	bl	80011d0 <HAL_GetTick>
 80011f0:	0003      	movs	r3, r0
 80011f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	001a      	movs	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	189b      	adds	r3, r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	f7ff ffe0 	bl	80011d0 <HAL_GetTick>
 8001210:	0002      	movs	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b004      	add	sp, #16
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	20000084 	.word	0x20000084

0800122c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800123a:	4013      	ands	r3, r2
 800123c:	0019      	movs	r1, r3
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	430a      	orrs	r2, r1
 8001244:	601a      	str	r2, [r3, #0]
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	40010000 	.word	0x40010000
 8001254:	fffff9ff 	.word	0xfffff9ff

08001258 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001268:	401a      	ands	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b002      	add	sp, #8
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	fe3fffff 	.word	0xfe3fffff

08001280 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	23e0      	movs	r3, #224	; 0xe0
 800128e:	045b      	lsls	r3, r3, #17
 8001290:	4013      	ands	r3, r2
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}

0800129a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	2104      	movs	r1, #4
 80012ae:	400a      	ands	r2, r1
 80012b0:	2107      	movs	r1, #7
 80012b2:	4091      	lsls	r1, r2
 80012b4:	000a      	movs	r2, r1
 80012b6:	43d2      	mvns	r2, r2
 80012b8:	401a      	ands	r2, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2104      	movs	r1, #4
 80012be:	400b      	ands	r3, r1
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4099      	lsls	r1, r3
 80012c4:	000b      	movs	r3, r1
 80012c6:	431a      	orrs	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b004      	add	sp, #16
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	2104      	movs	r1, #4
 80012e6:	400a      	ands	r2, r1
 80012e8:	2107      	movs	r1, #7
 80012ea:	4091      	lsls	r1, r2
 80012ec:	000a      	movs	r2, r1
 80012ee:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2104      	movs	r1, #4
 80012f4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012f6:	40da      	lsrs	r2, r3
 80012f8:	0013      	movs	r3, r2
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b002      	add	sp, #8
 8001300:	bd80      	pop	{r7, pc}

08001302 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	23c0      	movs	r3, #192	; 0xc0
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	4013      	ands	r3, r2
 8001314:	d101      	bne.n	800131a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800131a:	2300      	movs	r3, #0
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b002      	add	sp, #8
 8001322:	bd80      	pop	{r7, pc}

08001324 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	211f      	movs	r1, #31
 8001338:	400a      	ands	r2, r1
 800133a:	210f      	movs	r1, #15
 800133c:	4091      	lsls	r1, r2
 800133e:	000a      	movs	r2, r1
 8001340:	43d2      	mvns	r2, r2
 8001342:	401a      	ands	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	0e9b      	lsrs	r3, r3, #26
 8001348:	210f      	movs	r1, #15
 800134a:	4019      	ands	r1, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	201f      	movs	r0, #31
 8001350:	4003      	ands	r3, r0
 8001352:	4099      	lsls	r1, r3
 8001354:	000b      	movs	r3, r1
 8001356:	431a      	orrs	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b004      	add	sp, #16
 8001362:	bd80      	pop	{r7, pc}

08001364 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	035b      	lsls	r3, r3, #13
 8001376:	0b5b      	lsrs	r3, r3, #13
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}

08001386 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	0352      	lsls	r2, r2, #13
 8001398:	0b52      	lsrs	r2, r2, #13
 800139a:	43d2      	mvns	r2, r2
 800139c:	401a      	ands	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	0212      	lsls	r2, r2, #8
 80013c0:	43d2      	mvns	r2, r2
 80013c2:	401a      	ands	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	400b      	ands	r3, r1
 80013cc:	4904      	ldr	r1, [pc, #16]	; (80013e0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80013ce:	400b      	ands	r3, r1
 80013d0:	431a      	orrs	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	b004      	add	sp, #16
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	07ffff00 	.word	0x07ffff00

080013e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	4a05      	ldr	r2, [pc, #20]	; (8001408 <LL_ADC_EnableInternalRegulator+0x24>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	0552      	lsls	r2, r2, #21
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	6fffffe8 	.word	0x6fffffe8

0800140c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	055b      	lsls	r3, r3, #21
 800141c:	401a      	ands	r2, r3
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	055b      	lsls	r3, r3, #21
 8001422:	429a      	cmp	r2, r3
 8001424:	d101      	bne.n	800142a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800142a:	2300      	movs	r3, #0
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}

08001434 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <LL_ADC_Enable+0x20>)
 8001442:	4013      	ands	r3, r2
 8001444:	2201      	movs	r2, #1
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800144c:	46c0      	nop			; (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b002      	add	sp, #8
 8001452:	bd80      	pop	{r7, pc}
 8001454:	7fffffe8 	.word	0x7fffffe8

08001458 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <LL_ADC_Disable+0x20>)
 8001466:	4013      	ands	r3, r2
 8001468:	2202      	movs	r2, #2
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b002      	add	sp, #8
 8001476:	bd80      	pop	{r7, pc}
 8001478:	7fffffe8 	.word	0x7fffffe8

0800147c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2201      	movs	r2, #1
 800148a:	4013      	ands	r3, r2
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <LL_ADC_IsEnabled+0x18>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <LL_ADC_IsEnabled+0x1a>
 8001494:	2300      	movs	r3, #0
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}

0800149e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2202      	movs	r2, #2
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_IsDisableOngoing+0x18>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_IsDisableOngoing+0x1a>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}

080014c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <LL_ADC_REG_StartConversion+0x20>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	2204      	movs	r2, #4
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b002      	add	sp, #8
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	7fffffe8 	.word	0x7fffffe8

080014e4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <LL_ADC_REG_StopConversion+0x20>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	2210      	movs	r2, #16
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b002      	add	sp, #8
 8001502:	bd80      	pop	{r7, pc}
 8001504:	7fffffe8 	.word	0x7fffffe8

08001508 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2204      	movs	r2, #4
 8001516:	4013      	ands	r3, r2
 8001518:	2b04      	cmp	r3, #4
 800151a:	d101      	bne.n	8001520 <LL_ADC_REG_IsConversionOngoing+0x18>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001520:	2300      	movs	r3, #0
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	b002      	add	sp, #8
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001534:	231f      	movs	r3, #31
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e17f      	b.n	8001852 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10a      	bne.n	8001570 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff fc3d 	bl	8000ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2254      	movs	r2, #84	; 0x54
 800156c:	2100      	movs	r1, #0
 800156e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff ff49 	bl	800140c <LL_ADC_IsInternalRegulatorEnabled>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d115      	bne.n	80015aa <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0018      	movs	r0, r3
 8001584:	f7ff ff2e 	bl	80013e4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001588:	4bb4      	ldr	r3, [pc, #720]	; (800185c <HAL_ADC_Init+0x330>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	49b4      	ldr	r1, [pc, #720]	; (8001860 <HAL_ADC_Init+0x334>)
 800158e:	0018      	movs	r0, r3
 8001590:	f7fe fdca 	bl	8000128 <__udivsi3>
 8001594:	0003      	movs	r3, r0
 8001596:	3301      	adds	r3, #1
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800159c:	e002      	b.n	80015a4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f9      	bne.n	800159e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7ff ff2c 	bl	800140c <LL_ADC_IsInternalRegulatorEnabled>
 80015b4:	1e03      	subs	r3, r0, #0
 80015b6:	d10f      	bne.n	80015d8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	2210      	movs	r2, #16
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2201      	movs	r2, #1
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015d0:	231f      	movs	r3, #31
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff ff93 	bl	8001508 <LL_ADC_REG_IsConversionOngoing>
 80015e2:	0003      	movs	r3, r0
 80015e4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	2210      	movs	r2, #16
 80015ec:	4013      	ands	r3, r2
 80015ee:	d000      	beq.n	80015f2 <HAL_ADC_Init+0xc6>
 80015f0:	e122      	b.n	8001838 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d000      	beq.n	80015fa <HAL_ADC_Init+0xce>
 80015f8:	e11e      	b.n	8001838 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	4a99      	ldr	r2, [pc, #612]	; (8001864 <HAL_ADC_Init+0x338>)
 8001600:	4013      	ands	r3, r2
 8001602:	2202      	movs	r2, #2
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff ff34 	bl	800147c <LL_ADC_IsEnabled>
 8001614:	1e03      	subs	r3, r0, #0
 8001616:	d000      	beq.n	800161a <HAL_ADC_Init+0xee>
 8001618:	e0ad      	b.n	8001776 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7e1b      	ldrb	r3, [r3, #24]
 8001622:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001624:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7e5b      	ldrb	r3, [r3, #25]
 800162a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800162c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7e9b      	ldrb	r3, [r3, #26]
 8001632:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001634:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <HAL_ADC_Init+0x118>
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	015b      	lsls	r3, r3, #5
 8001642:	e000      	b.n	8001646 <HAL_ADC_Init+0x11a>
 8001644:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001646:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800164c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	2b00      	cmp	r3, #0
 8001654:	da04      	bge.n	8001660 <HAL_ADC_Init+0x134>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	085b      	lsrs	r3, r3, #1
 800165e:	e001      	b.n	8001664 <HAL_ADC_Init+0x138>
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001664:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	212c      	movs	r1, #44	; 0x2c
 800166a:	5c5b      	ldrb	r3, [r3, r1]
 800166c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800166e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2220      	movs	r2, #32
 800167a:	5c9b      	ldrb	r3, [r3, r2]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d115      	bne.n	80016ac <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e9b      	ldrb	r3, [r3, #26]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d105      	bne.n	8001694 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	0252      	lsls	r2, r2, #9
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	e00b      	b.n	80016ac <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	2220      	movs	r2, #32
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	2201      	movs	r2, #1
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00a      	beq.n	80016ca <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b8:	23e0      	movs	r3, #224	; 0xe0
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016c2:	4313      	orrs	r3, r2
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4a65      	ldr	r2, [pc, #404]	; (8001868 <HAL_ADC_Init+0x33c>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	430a      	orrs	r2, r1
 80016de:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	0f9b      	lsrs	r3, r3, #30
 80016e6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016ec:	4313      	orrs	r3, r2
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	223c      	movs	r2, #60	; 0x3c
 80016f8:	5c9b      	ldrb	r3, [r3, r2]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d111      	bne.n	8001722 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	0f9b      	lsrs	r3, r3, #30
 8001704:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800170a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001710:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001716:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4313      	orrs	r3, r2
 800171c:	2201      	movs	r2, #1
 800171e:	4313      	orrs	r3, r2
 8001720:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	4a50      	ldr	r2, [pc, #320]	; (800186c <HAL_ADC_Init+0x340>)
 800172a:	4013      	ands	r3, r2
 800172c:	0019      	movs	r1, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	430a      	orrs	r2, r1
 8001736:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	23c0      	movs	r3, #192	; 0xc0
 800173e:	061b      	lsls	r3, r3, #24
 8001740:	429a      	cmp	r2, r3
 8001742:	d018      	beq.n	8001776 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	05db      	lsls	r3, r3, #23
 800174c:	429a      	cmp	r2, r3
 800174e:	d012      	beq.n	8001776 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	061b      	lsls	r3, r3, #24
 8001758:	429a      	cmp	r2, r3
 800175a:	d00c      	beq.n	8001776 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800175c:	4b44      	ldr	r3, [pc, #272]	; (8001870 <HAL_ADC_Init+0x344>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a44      	ldr	r2, [pc, #272]	; (8001874 <HAL_ADC_Init+0x348>)
 8001762:	4013      	ands	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	23f0      	movs	r3, #240	; 0xf0
 800176c:	039b      	lsls	r3, r3, #14
 800176e:	401a      	ands	r2, r3
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <HAL_ADC_Init+0x344>)
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177e:	001a      	movs	r2, r3
 8001780:	2100      	movs	r1, #0
 8001782:	f7ff fd8a 	bl	800129a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178e:	493a      	ldr	r1, [pc, #232]	; (8001878 <HAL_ADC_Init+0x34c>)
 8001790:	001a      	movs	r2, r3
 8001792:	f7ff fd82 	bl	800129a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2110      	movs	r1, #16
 80017aa:	4249      	negs	r1, r1
 80017ac:	430a      	orrs	r2, r1
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
 80017b0:	e018      	b.n	80017e4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	039b      	lsls	r3, r3, #14
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d112      	bne.n	80017e4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	221c      	movs	r2, #28
 80017ce:	4013      	ands	r3, r2
 80017d0:	2210      	movs	r2, #16
 80017d2:	4252      	negs	r2, r2
 80017d4:	409a      	lsls	r2, r3
 80017d6:	0011      	movs	r1, r2
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2100      	movs	r1, #0
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7ff fd72 	bl	80012d4 <LL_ADC_GetSamplingTimeCommonChannels>
 80017f0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d10b      	bne.n	8001812 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	2203      	movs	r2, #3
 8001806:	4393      	bics	r3, r2
 8001808:	2201      	movs	r2, #1
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001810:	e01c      	b.n	800184c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	2212      	movs	r2, #18
 8001818:	4393      	bics	r3, r2
 800181a:	2210      	movs	r2, #16
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	2201      	movs	r2, #1
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800182e:	231f      	movs	r3, #31
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001836:	e009      	b.n	800184c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	2210      	movs	r2, #16
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001844:	231f      	movs	r3, #31
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800184c:	231f      	movs	r3, #31
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	781b      	ldrb	r3, [r3, #0]
}
 8001852:	0018      	movs	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	b008      	add	sp, #32
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	2000007c 	.word	0x2000007c
 8001860:	00030d40 	.word	0x00030d40
 8001864:	fffffefd 	.word	0xfffffefd
 8001868:	fffe0201 	.word	0xfffe0201
 800186c:	1ffffc02 	.word	0x1ffffc02
 8001870:	40012708 	.word	0x40012708
 8001874:	ffc3ffff 	.word	0xffc3ffff
 8001878:	07ffff04 	.word	0x07ffff04

0800187c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800187c:	b5b0      	push	{r4, r5, r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0018      	movs	r0, r3
 800188a:	f7ff fe3d 	bl	8001508 <LL_ADC_REG_IsConversionOngoing>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d135      	bne.n	80018fe <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2254      	movs	r2, #84	; 0x54
 8001896:	5c9b      	ldrb	r3, [r3, r2]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_Start+0x24>
 800189c:	2302      	movs	r3, #2
 800189e:	e035      	b.n	800190c <HAL_ADC_Start+0x90>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2254      	movs	r2, #84	; 0x54
 80018a4:	2101      	movs	r1, #1
 80018a6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018a8:	250f      	movs	r5, #15
 80018aa:	197c      	adds	r4, r7, r5
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	0018      	movs	r0, r3
 80018b0:	f000 fb28 	bl	8001f04 <ADC_Enable>
 80018b4:	0003      	movs	r3, r0
 80018b6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018b8:	197b      	adds	r3, r7, r5
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d119      	bne.n	80018f4 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_ADC_Start+0x98>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	0052      	lsls	r2, r2, #1
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	221c      	movs	r2, #28
 80018de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2254      	movs	r2, #84	; 0x54
 80018e4:	2100      	movs	r1, #0
 80018e6:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff fde7 	bl	80014c0 <LL_ADC_REG_StartConversion>
 80018f2:	e008      	b.n	8001906 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2254      	movs	r2, #84	; 0x54
 80018f8:	2100      	movs	r1, #0
 80018fa:	5499      	strb	r1, [r3, r2]
 80018fc:	e003      	b.n	8001906 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018fe:	230f      	movs	r3, #15
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	2202      	movs	r2, #2
 8001904:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001906:	230f      	movs	r3, #15
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	781b      	ldrb	r3, [r3, #0]
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b004      	add	sp, #16
 8001912:	bdb0      	pop	{r4, r5, r7, pc}
 8001914:	fffff0fe 	.word	0xfffff0fe

08001918 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2254      	movs	r2, #84	; 0x54
 8001924:	5c9b      	ldrb	r3, [r3, r2]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_ADC_Stop+0x16>
 800192a:	2302      	movs	r3, #2
 800192c:	e029      	b.n	8001982 <HAL_ADC_Stop+0x6a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2254      	movs	r2, #84	; 0x54
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001936:	250f      	movs	r5, #15
 8001938:	197c      	adds	r4, r7, r5
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	0018      	movs	r0, r3
 800193e:	f000 fa9f 	bl	8001e80 <ADC_ConversionStop>
 8001942:	0003      	movs	r3, r0
 8001944:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001946:	197b      	adds	r3, r7, r5
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d112      	bne.n	8001974 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800194e:	197c      	adds	r4, r7, r5
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	0018      	movs	r0, r3
 8001954:	f000 fb5c 	bl	8002010 <ADC_Disable>
 8001958:	0003      	movs	r3, r0
 800195a:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800195c:	197b      	adds	r3, r7, r5
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d107      	bne.n	8001974 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_ADC_Stop+0x74>)
 800196a:	4013      	ands	r3, r2
 800196c:	2201      	movs	r2, #1
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2254      	movs	r2, #84	; 0x54
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800197c:	230f      	movs	r3, #15
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	781b      	ldrb	r3, [r3, #0]
}
 8001982:	0018      	movs	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	b004      	add	sp, #16
 8001988:	bdb0      	pop	{r4, r5, r7, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	fffffefe 	.word	0xfffffefe

08001990 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d102      	bne.n	80019a8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80019a2:	2308      	movs	r3, #8
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e00f      	b.n	80019c8 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	4013      	ands	r3, r2
 80019b2:	d007      	beq.n	80019c4 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	2220      	movs	r2, #32
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e072      	b.n	8001aaa <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80019c4:	2304      	movs	r3, #4
 80019c6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019c8:	f7ff fc02 	bl	80011d0 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80019d0:	e01f      	b.n	8001a12 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	d01c      	beq.n	8001a12 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019d8:	f7ff fbfa 	bl	80011d0 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d302      	bcc.n	80019ee <HAL_ADC_PollForConversion+0x5e>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d111      	bne.n	8001a12 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	d10b      	bne.n	8001a12 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	2204      	movs	r2, #4
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2254      	movs	r2, #84	; 0x54
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e04b      	b.n	8001aaa <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d0d9      	beq.n	80019d2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	2280      	movs	r2, #128	; 0x80
 8001a24:	0092      	lsls	r2, r2, #2
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff fc66 	bl	8001302 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d02e      	beq.n	8001a98 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7e9b      	ldrb	r3, [r3, #26]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d12a      	bne.n	8001a98 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2208      	movs	r2, #8
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d123      	bne.n	8001a98 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff fd57 	bl	8001508 <LL_ADC_REG_IsConversionOngoing>
 8001a5a:	1e03      	subs	r3, r0, #0
 8001a5c:	d110      	bne.n	8001a80 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	210c      	movs	r1, #12
 8001a6a:	438a      	bics	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_ADC_PollForConversion+0x124>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	2201      	movs	r2, #1
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	659a      	str	r2, [r3, #88]	; 0x58
 8001a7e:	e00b      	b.n	8001a98 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	2220      	movs	r2, #32
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	2201      	movs	r2, #1
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7e1b      	ldrb	r3, [r3, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d103      	bne.n	8001aa8 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	0018      	movs	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b004      	add	sp, #16
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	fffffefe 	.word	0xfffffefe

08001ab8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b002      	add	sp, #8
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ada:	2317      	movs	r3, #23
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2254      	movs	r2, #84	; 0x54
 8001aea:	5c9b      	ldrb	r3, [r3, r2]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x24>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e1c0      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x3a6>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2254      	movs	r2, #84	; 0x54
 8001af8:	2101      	movs	r1, #1
 8001afa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff fd01 	bl	8001508 <LL_ADC_REG_IsConversionOngoing>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d000      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0x3c>
 8001b0a:	e1a3      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d100      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x46>
 8001b14:	e143      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d004      	beq.n	8001b2c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b26:	4ac1      	ldr	r2, [pc, #772]	; (8001e2c <HAL_ADC_ConfigChannel+0x35c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d108      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0019      	movs	r1, r3
 8001b36:	0010      	movs	r0, r2
 8001b38:	f7ff fc14 	bl	8001364 <LL_ADC_REG_SetSequencerChAdd>
 8001b3c:	e0c9      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	211f      	movs	r1, #31
 8001b48:	400b      	ands	r3, r1
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	4099      	lsls	r1, r3
 8001b4e:	000b      	movs	r3, r1
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4013      	ands	r3, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	035b      	lsls	r3, r3, #13
 8001b5c:	0b5b      	lsrs	r3, r3, #13
 8001b5e:	d105      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x9c>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0e9b      	lsrs	r3, r3, #26
 8001b66:	221f      	movs	r2, #31
 8001b68:	4013      	ands	r3, r2
 8001b6a:	e098      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2201      	movs	r2, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	d000      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0xa8>
 8001b76:	e091      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x1cc>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d000      	beq.n	8001b84 <HAL_ADC_ConfigChannel+0xb4>
 8001b82:	e089      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x1c8>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d000      	beq.n	8001b90 <HAL_ADC_ConfigChannel+0xc0>
 8001b8e:	e081      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x1c4>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2208      	movs	r2, #8
 8001b96:	4013      	ands	r3, r2
 8001b98:	d000      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0xcc>
 8001b9a:	e079      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x1c0>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d000      	beq.n	8001ba8 <HAL_ADC_ConfigChannel+0xd8>
 8001ba6:	e071      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x1bc>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2220      	movs	r2, #32
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d000      	beq.n	8001bb4 <HAL_ADC_ConfigChannel+0xe4>
 8001bb2:	e069      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x1b8>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2240      	movs	r2, #64	; 0x40
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d000      	beq.n	8001bc0 <HAL_ADC_ConfigChannel+0xf0>
 8001bbe:	e061      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x1b4>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d000      	beq.n	8001bcc <HAL_ADC_ConfigChannel+0xfc>
 8001bca:	e059      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x1b0>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d151      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1ac>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	d149      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1a8>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4013      	ands	r3, r2
 8001bee:	d141      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x1a4>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d139      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1a0>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	015b      	lsls	r3, r3, #5
 8001c04:	4013      	ands	r3, r2
 8001c06:	d131      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x19c>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	019b      	lsls	r3, r3, #6
 8001c10:	4013      	ands	r3, r2
 8001c12:	d129      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x198>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	01db      	lsls	r3, r3, #7
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d121      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x194>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d119      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x190>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	025b      	lsls	r3, r3, #9
 8001c34:	4013      	ands	r3, r2
 8001c36:	d111      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x18c>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	029b      	lsls	r3, r3, #10
 8001c40:	4013      	ands	r3, r2
 8001c42:	d109      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x188>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	02db      	lsls	r3, r3, #11
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d001      	beq.n	8001c54 <HAL_ADC_ConfigChannel+0x184>
 8001c50:	2312      	movs	r3, #18
 8001c52:	e024      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c54:	2300      	movs	r3, #0
 8001c56:	e022      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c58:	2311      	movs	r3, #17
 8001c5a:	e020      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	e01e      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c60:	230f      	movs	r3, #15
 8001c62:	e01c      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c64:	230e      	movs	r3, #14
 8001c66:	e01a      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c68:	230d      	movs	r3, #13
 8001c6a:	e018      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c6c:	230c      	movs	r3, #12
 8001c6e:	e016      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c70:	230b      	movs	r3, #11
 8001c72:	e014      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c74:	230a      	movs	r3, #10
 8001c76:	e012      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c78:	2309      	movs	r3, #9
 8001c7a:	e010      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	e00e      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c80:	2307      	movs	r3, #7
 8001c82:	e00c      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c84:	2306      	movs	r3, #6
 8001c86:	e00a      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c88:	2305      	movs	r3, #5
 8001c8a:	e008      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	e006      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c90:	2303      	movs	r3, #3
 8001c92:	e004      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e002      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ce>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	6852      	ldr	r2, [r2, #4]
 8001ca2:	201f      	movs	r0, #31
 8001ca4:	4002      	ands	r2, r0
 8001ca6:	4093      	lsls	r3, r2
 8001ca8:	000a      	movs	r2, r1
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d808      	bhi.n	8001cd2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	001a      	movs	r2, r3
 8001cce:	f7ff fb29 	bl	8001324 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6819      	ldr	r1, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	001a      	movs	r2, r3
 8001ce0:	f7ff fb64 	bl	80013ac <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db00      	blt.n	8001cee <HAL_ADC_ConfigChannel+0x21e>
 8001cec:	e0bc      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cee:	4b50      	ldr	r3, [pc, #320]	; (8001e30 <HAL_ADC_ConfigChannel+0x360>)
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f7ff fac5 	bl	8001280 <LL_ADC_GetCommonPathInternalCh>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a4d      	ldr	r2, [pc, #308]	; (8001e34 <HAL_ADC_ConfigChannel+0x364>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d122      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	041b      	lsls	r3, r3, #16
 8001d0a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d0c:	d11d      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	0412      	lsls	r2, r2, #16
 8001d14:	4313      	orrs	r3, r2
 8001d16:	4a46      	ldr	r2, [pc, #280]	; (8001e30 <HAL_ADC_ConfigChannel+0x360>)
 8001d18:	0019      	movs	r1, r3
 8001d1a:	0010      	movs	r0, r2
 8001d1c:	f7ff fa9c 	bl	8001258 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d20:	4b45      	ldr	r3, [pc, #276]	; (8001e38 <HAL_ADC_ConfigChannel+0x368>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4945      	ldr	r1, [pc, #276]	; (8001e3c <HAL_ADC_ConfigChannel+0x36c>)
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7fe f9fe 	bl	8000128 <__udivsi3>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	0013      	movs	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	189b      	adds	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d3a:	e002      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f9      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d48:	e08e      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a3c      	ldr	r2, [pc, #240]	; (8001e40 <HAL_ADC_ConfigChannel+0x370>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d10e      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x2a2>
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	045b      	lsls	r3, r3, #17
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d109      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	0452      	lsls	r2, r2, #17
 8001d64:	4313      	orrs	r3, r2
 8001d66:	4a32      	ldr	r2, [pc, #200]	; (8001e30 <HAL_ADC_ConfigChannel+0x360>)
 8001d68:	0019      	movs	r1, r3
 8001d6a:	0010      	movs	r0, r2
 8001d6c:	f7ff fa74 	bl	8001258 <LL_ADC_SetCommonPathInternalCh>
 8001d70:	e07a      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a33      	ldr	r2, [pc, #204]	; (8001e44 <HAL_ADC_ConfigChannel+0x374>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d000      	beq.n	8001d7e <HAL_ADC_ConfigChannel+0x2ae>
 8001d7c:	e074      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	03db      	lsls	r3, r3, #15
 8001d84:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d86:	d000      	beq.n	8001d8a <HAL_ADC_ConfigChannel+0x2ba>
 8001d88:	e06e      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	03d2      	lsls	r2, r2, #15
 8001d90:	4313      	orrs	r3, r2
 8001d92:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <HAL_ADC_ConfigChannel+0x360>)
 8001d94:	0019      	movs	r1, r3
 8001d96:	0010      	movs	r0, r2
 8001d98:	f7ff fa5e 	bl	8001258 <LL_ADC_SetCommonPathInternalCh>
 8001d9c:	e064      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	061b      	lsls	r3, r3, #24
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d004      	beq.n	8001db4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dae:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <HAL_ADC_ConfigChannel+0x35c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d107      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	0010      	movs	r0, r2
 8001dc0:	f7ff fae1 	bl	8001386 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	da4d      	bge.n	8001e68 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_ADC_ConfigChannel+0x360>)
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7ff fa56 	bl	8001280 <LL_ADC_GetCommonPathInternalCh>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_ADC_ConfigChannel+0x364>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d108      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <HAL_ADC_ConfigChannel+0x378>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_ADC_ConfigChannel+0x360>)
 8001dea:	0019      	movs	r1, r3
 8001dec:	0010      	movs	r0, r2
 8001dee:	f7ff fa33 	bl	8001258 <LL_ADC_SetCommonPathInternalCh>
 8001df2:	e039      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_ADC_ConfigChannel+0x370>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d108      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_ADC_ConfigChannel+0x37c>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_ADC_ConfigChannel+0x360>)
 8001e06:	0019      	movs	r1, r3
 8001e08:	0010      	movs	r0, r2
 8001e0a:	f7ff fa25 	bl	8001258 <LL_ADC_SetCommonPathInternalCh>
 8001e0e:	e02b      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <HAL_ADC_ConfigChannel+0x374>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d126      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4a0c      	ldr	r2, [pc, #48]	; (8001e50 <HAL_ADC_ConfigChannel+0x380>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	4a03      	ldr	r2, [pc, #12]	; (8001e30 <HAL_ADC_ConfigChannel+0x360>)
 8001e22:	0019      	movs	r1, r3
 8001e24:	0010      	movs	r0, r2
 8001e26:	f7ff fa17 	bl	8001258 <LL_ADC_SetCommonPathInternalCh>
 8001e2a:	e01d      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x398>
 8001e2c:	80000004 	.word	0x80000004
 8001e30:	40012708 	.word	0x40012708
 8001e34:	b0001000 	.word	0xb0001000
 8001e38:	2000007c 	.word	0x2000007c
 8001e3c:	00030d40 	.word	0x00030d40
 8001e40:	b8004000 	.word	0xb8004000
 8001e44:	b4002000 	.word	0xb4002000
 8001e48:	ff7fffff 	.word	0xff7fffff
 8001e4c:	feffffff 	.word	0xfeffffff
 8001e50:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	2220      	movs	r2, #32
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e60:	2317      	movs	r3, #23
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2254      	movs	r2, #84	; 0x54
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e70:	2317      	movs	r3, #23
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	781b      	ldrb	r3, [r3, #0]
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b006      	add	sp, #24
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)

08001e80 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7ff fb3b 	bl	8001508 <LL_ADC_REG_IsConversionOngoing>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d031      	beq.n	8001efa <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7ff faff 	bl	800149e <LL_ADC_IsDisableOngoing>
 8001ea0:	1e03      	subs	r3, r0, #0
 8001ea2:	d104      	bne.n	8001eae <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff fb1b 	bl	80014e4 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eae:	f7ff f98f 	bl	80011d0 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001eb6:	e01a      	b.n	8001eee <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001eb8:	f7ff f98a 	bl	80011d0 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d913      	bls.n	8001eee <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e006      	b.n	8001efc <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d1de      	bne.n	8001eb8 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b004      	add	sp, #16
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff fab1 	bl	800147c <LL_ADC_IsEnabled>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d000      	beq.n	8001f20 <ADC_Enable+0x1c>
 8001f1e:	e069      	b.n	8001ff4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	4a36      	ldr	r2, [pc, #216]	; (8002000 <ADC_Enable+0xfc>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d00d      	beq.n	8001f48 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	2210      	movs	r2, #16
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e056      	b.n	8001ff6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff fa71 	bl	8001434 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <ADC_Enable+0x100>)
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff f993 	bl	8001280 <LL_ADC_GetCommonPathInternalCh>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	041b      	lsls	r3, r3, #16
 8001f60:	4013      	ands	r3, r2
 8001f62:	d00f      	beq.n	8001f84 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f64:	4b28      	ldr	r3, [pc, #160]	; (8002008 <ADC_Enable+0x104>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4928      	ldr	r1, [pc, #160]	; (800200c <ADC_Enable+0x108>)
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7fe f8dc 	bl	8000128 <__udivsi3>
 8001f70:	0003      	movs	r3, r0
 8001f72:	3301      	adds	r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f76:	e002      	b.n	8001f7e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f9      	bne.n	8001f78 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7e5b      	ldrb	r3, [r3, #25]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d033      	beq.n	8001ff4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001f8c:	f7ff f920 	bl	80011d0 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f94:	e027      	b.n	8001fe6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7ff fa6e 	bl	800147c <LL_ADC_IsEnabled>
 8001fa0:	1e03      	subs	r3, r0, #0
 8001fa2:	d104      	bne.n	8001fae <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff fa43 	bl	8001434 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fae:	f7ff f90f 	bl	80011d0 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d914      	bls.n	8001fe6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d00d      	beq.n	8001fe6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	2210      	movs	r2, #16
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	2201      	movs	r2, #1
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e007      	b.n	8001ff6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d1d0      	bne.n	8001f96 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b004      	add	sp, #16
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	80000017 	.word	0x80000017
 8002004:	40012708 	.word	0x40012708
 8002008:	2000007c 	.word	0x2000007c
 800200c:	00030d40 	.word	0x00030d40

08002010 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff fa3e 	bl	800149e <LL_ADC_IsDisableOngoing>
 8002022:	0003      	movs	r3, r0
 8002024:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	0018      	movs	r0, r3
 800202c:	f7ff fa26 	bl	800147c <LL_ADC_IsEnabled>
 8002030:	1e03      	subs	r3, r0, #0
 8002032:	d046      	beq.n	80020c2 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d143      	bne.n	80020c2 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2205      	movs	r2, #5
 8002042:	4013      	ands	r3, r2
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10d      	bne.n	8002064 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0018      	movs	r0, r3
 800204e:	f7ff fa03 	bl	8001458 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2203      	movs	r2, #3
 8002058:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800205a:	f7ff f8b9 	bl	80011d0 <HAL_GetTick>
 800205e:	0003      	movs	r3, r0
 8002060:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002062:	e028      	b.n	80020b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	2210      	movs	r2, #16
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	2201      	movs	r2, #1
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e021      	b.n	80020c4 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002080:	f7ff f8a6 	bl	80011d0 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d913      	bls.n	80020b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2201      	movs	r2, #1
 8002096:	4013      	ands	r3, r2
 8002098:	d00d      	beq.n	80020b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	2210      	movs	r2, #16
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	2201      	movs	r2, #1
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e006      	b.n	80020c4 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2201      	movs	r2, #1
 80020be:	4013      	ands	r3, r2
 80020c0:	d1de      	bne.n	8002080 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}

080020cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	0002      	movs	r2, r0
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	1dfb      	adds	r3, r7, #7
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b7f      	cmp	r3, #127	; 0x7f
 80020de:	d809      	bhi.n	80020f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	001a      	movs	r2, r3
 80020e6:	231f      	movs	r3, #31
 80020e8:	401a      	ands	r2, r3
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <__NVIC_EnableIRQ+0x30>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	4091      	lsls	r1, r2
 80020f0:	000a      	movs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	0002      	movs	r2, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	1dfb      	adds	r3, r7, #7
 800210c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b7f      	cmp	r3, #127	; 0x7f
 8002114:	d828      	bhi.n	8002168 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002116:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <__NVIC_SetPriority+0xd4>)
 8002118:	1dfb      	adds	r3, r7, #7
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b25b      	sxtb	r3, r3
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	33c0      	adds	r3, #192	; 0xc0
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	589b      	ldr	r3, [r3, r2]
 8002126:	1dfa      	adds	r2, r7, #7
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	0011      	movs	r1, r2
 800212c:	2203      	movs	r2, #3
 800212e:	400a      	ands	r2, r1
 8002130:	00d2      	lsls	r2, r2, #3
 8002132:	21ff      	movs	r1, #255	; 0xff
 8002134:	4091      	lsls	r1, r2
 8002136:	000a      	movs	r2, r1
 8002138:	43d2      	mvns	r2, r2
 800213a:	401a      	ands	r2, r3
 800213c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	019b      	lsls	r3, r3, #6
 8002142:	22ff      	movs	r2, #255	; 0xff
 8002144:	401a      	ands	r2, r3
 8002146:	1dfb      	adds	r3, r7, #7
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	0018      	movs	r0, r3
 800214c:	2303      	movs	r3, #3
 800214e:	4003      	ands	r3, r0
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002154:	481f      	ldr	r0, [pc, #124]	; (80021d4 <__NVIC_SetPriority+0xd4>)
 8002156:	1dfb      	adds	r3, r7, #7
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b25b      	sxtb	r3, r3
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	430a      	orrs	r2, r1
 8002160:	33c0      	adds	r3, #192	; 0xc0
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002166:	e031      	b.n	80021cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002168:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <__NVIC_SetPriority+0xd8>)
 800216a:	1dfb      	adds	r3, r7, #7
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	0019      	movs	r1, r3
 8002170:	230f      	movs	r3, #15
 8002172:	400b      	ands	r3, r1
 8002174:	3b08      	subs	r3, #8
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3306      	adds	r3, #6
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	18d3      	adds	r3, r2, r3
 800217e:	3304      	adds	r3, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1dfa      	adds	r2, r7, #7
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	0011      	movs	r1, r2
 8002188:	2203      	movs	r2, #3
 800218a:	400a      	ands	r2, r1
 800218c:	00d2      	lsls	r2, r2, #3
 800218e:	21ff      	movs	r1, #255	; 0xff
 8002190:	4091      	lsls	r1, r2
 8002192:	000a      	movs	r2, r1
 8002194:	43d2      	mvns	r2, r2
 8002196:	401a      	ands	r2, r3
 8002198:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	019b      	lsls	r3, r3, #6
 800219e:	22ff      	movs	r2, #255	; 0xff
 80021a0:	401a      	ands	r2, r3
 80021a2:	1dfb      	adds	r3, r7, #7
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	0018      	movs	r0, r3
 80021a8:	2303      	movs	r3, #3
 80021aa:	4003      	ands	r3, r0
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021b0:	4809      	ldr	r0, [pc, #36]	; (80021d8 <__NVIC_SetPriority+0xd8>)
 80021b2:	1dfb      	adds	r3, r7, #7
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	001c      	movs	r4, r3
 80021b8:	230f      	movs	r3, #15
 80021ba:	4023      	ands	r3, r4
 80021bc:	3b08      	subs	r3, #8
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	430a      	orrs	r2, r1
 80021c2:	3306      	adds	r3, #6
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	18c3      	adds	r3, r0, r3
 80021c8:	3304      	adds	r3, #4
 80021ca:	601a      	str	r2, [r3, #0]
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b003      	add	sp, #12
 80021d2:	bd90      	pop	{r4, r7, pc}
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	1e5a      	subs	r2, r3, #1
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	045b      	lsls	r3, r3, #17
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d301      	bcc.n	80021f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f0:	2301      	movs	r3, #1
 80021f2:	e010      	b.n	8002216 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <SysTick_Config+0x44>)
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	3a01      	subs	r2, #1
 80021fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fc:	2301      	movs	r3, #1
 80021fe:	425b      	negs	r3, r3
 8002200:	2103      	movs	r1, #3
 8002202:	0018      	movs	r0, r3
 8002204:	f7ff ff7c 	bl	8002100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <SysTick_Config+0x44>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <SysTick_Config+0x44>)
 8002210:	2207      	movs	r2, #7
 8002212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002214:	2300      	movs	r3, #0
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b002      	add	sp, #8
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	e000e010 	.word	0xe000e010

08002224 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	210f      	movs	r1, #15
 8002230:	187b      	adds	r3, r7, r1
 8002232:	1c02      	adds	r2, r0, #0
 8002234:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	187b      	adds	r3, r7, r1
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b25b      	sxtb	r3, r3
 800223e:	0011      	movs	r1, r2
 8002240:	0018      	movs	r0, r3
 8002242:	f7ff ff5d 	bl	8002100 <__NVIC_SetPriority>
}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	46bd      	mov	sp, r7
 800224a:	b004      	add	sp, #16
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	0002      	movs	r2, r0
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225a:	1dfb      	adds	r3, r7, #7
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b25b      	sxtb	r3, r3
 8002260:	0018      	movs	r0, r3
 8002262:	f7ff ff33 	bl	80020cc <__NVIC_EnableIRQ>
}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	46bd      	mov	sp, r7
 800226a:	b002      	add	sp, #8
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	0018      	movs	r0, r3
 800227a:	f7ff ffaf 	bl	80021dc <SysTick_Config>
 800227e:	0003      	movs	r3, r0
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b002      	add	sp, #8
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002296:	e147      	b.n	8002528 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4091      	lsls	r1, r2
 80022a2:	000a      	movs	r2, r1
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d100      	bne.n	80022b0 <HAL_GPIO_Init+0x28>
 80022ae:	e138      	b.n	8002522 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2203      	movs	r2, #3
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d005      	beq.n	80022c8 <HAL_GPIO_Init+0x40>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2203      	movs	r2, #3
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d130      	bne.n	800232a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	409a      	lsls	r2, r3
 80022d6:	0013      	movs	r3, r2
 80022d8:	43da      	mvns	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	409a      	lsls	r2, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022fe:	2201      	movs	r2, #1
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
 8002304:	0013      	movs	r3, r2
 8002306:	43da      	mvns	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	2201      	movs	r2, #1
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
 800231c:	0013      	movs	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2203      	movs	r2, #3
 8002330:	4013      	ands	r3, r2
 8002332:	2b03      	cmp	r3, #3
 8002334:	d017      	beq.n	8002366 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	409a      	lsls	r2, r3
 8002344:	0013      	movs	r3, r2
 8002346:	43da      	mvns	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2203      	movs	r2, #3
 800236c:	4013      	ands	r3, r2
 800236e:	2b02      	cmp	r3, #2
 8002370:	d123      	bne.n	80023ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	08da      	lsrs	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3208      	adds	r2, #8
 800237a:	0092      	lsls	r2, r2, #2
 800237c:	58d3      	ldr	r3, [r2, r3]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2207      	movs	r2, #7
 8002384:	4013      	ands	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	409a      	lsls	r2, r3
 800238c:	0013      	movs	r3, r2
 800238e:	43da      	mvns	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2107      	movs	r1, #7
 800239e:	400b      	ands	r3, r1
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	409a      	lsls	r2, r3
 80023a4:	0013      	movs	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	08da      	lsrs	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3208      	adds	r2, #8
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	6939      	ldr	r1, [r7, #16]
 80023b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	409a      	lsls	r2, r3
 80023c8:	0013      	movs	r3, r2
 80023ca:	43da      	mvns	r2, r3
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2203      	movs	r2, #3
 80023d8:	401a      	ands	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	23c0      	movs	r3, #192	; 0xc0
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	4013      	ands	r3, r2
 80023f8:	d100      	bne.n	80023fc <HAL_GPIO_Init+0x174>
 80023fa:	e092      	b.n	8002522 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80023fc:	4a50      	ldr	r2, [pc, #320]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3318      	adds	r3, #24
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	589b      	ldr	r3, [r3, r2]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2203      	movs	r2, #3
 800240e:	4013      	ands	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	220f      	movs	r2, #15
 8002414:	409a      	lsls	r2, r3
 8002416:	0013      	movs	r3, r2
 8002418:	43da      	mvns	r2, r3
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	23a0      	movs	r3, #160	; 0xa0
 8002424:	05db      	lsls	r3, r3, #23
 8002426:	429a      	cmp	r2, r3
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0x1ca>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a45      	ldr	r2, [pc, #276]	; (8002544 <HAL_GPIO_Init+0x2bc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x1c6>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a44      	ldr	r2, [pc, #272]	; (8002548 <HAL_GPIO_Init+0x2c0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x1c2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a43      	ldr	r2, [pc, #268]	; (800254c <HAL_GPIO_Init+0x2c4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x1be>
 8002442:	2303      	movs	r3, #3
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x1cc>
 8002446:	2305      	movs	r3, #5
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x1cc>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x1cc>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x1cc>
 8002452:	2300      	movs	r3, #0
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	2103      	movs	r1, #3
 8002458:	400a      	ands	r2, r1
 800245a:	00d2      	lsls	r2, r2, #3
 800245c:	4093      	lsls	r3, r2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002464:	4936      	ldr	r1, [pc, #216]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3318      	adds	r3, #24
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002472:	4b33      	ldr	r3, [pc, #204]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43da      	mvns	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	035b      	lsls	r3, r3, #13
 800248a:	4013      	ands	r3, r2
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800249c:	4b28      	ldr	r3, [pc, #160]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	039b      	lsls	r3, r3, #14
 80024b4:	4013      	ands	r3, r2
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024c6:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 80024c8:	2384      	movs	r3, #132	; 0x84
 80024ca:	58d3      	ldr	r3, [r2, r3]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43da      	mvns	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	029b      	lsls	r3, r3, #10
 80024e0:	4013      	ands	r3, r2
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024ec:	4914      	ldr	r1, [pc, #80]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 80024ee:	2284      	movs	r2, #132	; 0x84
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80024f4:	4a12      	ldr	r2, [pc, #72]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	58d3      	ldr	r3, [r2, r3]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43da      	mvns	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	025b      	lsls	r3, r3, #9
 800250e:	4013      	ands	r3, r2
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800251a:	4909      	ldr	r1, [pc, #36]	; (8002540 <HAL_GPIO_Init+0x2b8>)
 800251c:	2280      	movs	r2, #128	; 0x80
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3301      	adds	r3, #1
 8002526:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	40da      	lsrs	r2, r3
 8002530:	1e13      	subs	r3, r2, #0
 8002532:	d000      	beq.n	8002536 <HAL_GPIO_Init+0x2ae>
 8002534:	e6b0      	b.n	8002298 <HAL_GPIO_Init+0x10>
  }
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b006      	add	sp, #24
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021800 	.word	0x40021800
 8002544:	50000400 	.word	0x50000400
 8002548:	50000800 	.word	0x50000800
 800254c:	50000c00 	.word	0x50000c00

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	0008      	movs	r0, r1
 800255a:	0011      	movs	r1, r2
 800255c:	1cbb      	adds	r3, r7, #2
 800255e:	1c02      	adds	r2, r0, #0
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	1c7b      	adds	r3, r7, #1
 8002564:	1c0a      	adds	r2, r1, #0
 8002566:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002568:	1c7b      	adds	r3, r7, #1
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002570:	1cbb      	adds	r3, r7, #2
 8002572:	881a      	ldrh	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002578:	e003      	b.n	8002582 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800257a:	1cbb      	adds	r3, r7, #2
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	46bd      	mov	sp, r7
 8002586:	b002      	add	sp, #8
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800259a:	4013      	ands	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d11f      	bne.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80025b0:	4b14      	ldr	r3, [pc, #80]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	0013      	movs	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	189b      	adds	r3, r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4912      	ldr	r1, [pc, #72]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80025be:	0018      	movs	r0, r3
 80025c0:	f7fd fdb2 	bl	8000128 <__udivsi3>
 80025c4:	0003      	movs	r3, r0
 80025c6:	3301      	adds	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ca:	e008      	b.n	80025de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e001      	b.n	80025de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e009      	b.n	80025f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	401a      	ands	r2, r3
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d0ed      	beq.n	80025cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	0018      	movs	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b004      	add	sp, #16
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	40007000 	.word	0x40007000
 8002600:	fffff9ff 	.word	0xfffff9ff
 8002604:	2000007c 	.word	0x2000007c
 8002608:	000f4240 	.word	0x000f4240

0800260c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	23e0      	movs	r3, #224	; 0xe0
 8002616:	01db      	lsls	r3, r3, #7
 8002618:	4013      	ands	r3, r2
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e2fe      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d100      	bne.n	8002642 <HAL_RCC_OscConfig+0x1e>
 8002640:	e07c      	b.n	800273c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002642:	4bc3      	ldr	r3, [pc, #780]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2238      	movs	r2, #56	; 0x38
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800264c:	4bc0      	ldr	r3, [pc, #768]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2203      	movs	r2, #3
 8002652:	4013      	ands	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b10      	cmp	r3, #16
 800265a:	d102      	bne.n	8002662 <HAL_RCC_OscConfig+0x3e>
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d002      	beq.n	8002668 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d10b      	bne.n	8002680 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	4bb9      	ldr	r3, [pc, #740]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	4013      	ands	r3, r2
 8002672:	d062      	beq.n	800273a <HAL_RCC_OscConfig+0x116>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d15e      	bne.n	800273a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e2d9      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	025b      	lsls	r3, r3, #9
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x78>
 800268c:	4bb0      	ldr	r3, [pc, #704]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4baf      	ldr	r3, [pc, #700]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	0249      	lsls	r1, r1, #9
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e020      	b.n	80026de <HAL_RCC_OscConfig+0xba>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	23a0      	movs	r3, #160	; 0xa0
 80026a2:	02db      	lsls	r3, r3, #11
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d10e      	bne.n	80026c6 <HAL_RCC_OscConfig+0xa2>
 80026a8:	4ba9      	ldr	r3, [pc, #676]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4ba8      	ldr	r3, [pc, #672]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	02c9      	lsls	r1, r1, #11
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	4ba6      	ldr	r3, [pc, #664]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4ba5      	ldr	r3, [pc, #660]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	0249      	lsls	r1, r1, #9
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e00b      	b.n	80026de <HAL_RCC_OscConfig+0xba>
 80026c6:	4ba2      	ldr	r3, [pc, #648]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4ba1      	ldr	r3, [pc, #644]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026cc:	49a1      	ldr	r1, [pc, #644]	; (8002954 <HAL_RCC_OscConfig+0x330>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	4b9f      	ldr	r3, [pc, #636]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b9e      	ldr	r3, [pc, #632]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026d8:	499f      	ldr	r1, [pc, #636]	; (8002958 <HAL_RCC_OscConfig+0x334>)
 80026da:	400a      	ands	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d014      	beq.n	8002710 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe fd73 	bl	80011d0 <HAL_GetTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe fd6e 	bl	80011d0 <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e298      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002702:	4b93      	ldr	r3, [pc, #588]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	029b      	lsls	r3, r3, #10
 800270a:	4013      	ands	r3, r2
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0xcc>
 800270e:	e015      	b.n	800273c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fd5e 	bl	80011d0 <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271a:	f7fe fd59 	bl	80011d0 <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b64      	cmp	r3, #100	; 0x64
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e283      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800272c:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	029b      	lsls	r3, r3, #10
 8002734:	4013      	ands	r3, r2
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0xf6>
 8002738:	e000      	b.n	800273c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d100      	bne.n	8002748 <HAL_RCC_OscConfig+0x124>
 8002746:	e099      	b.n	800287c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002748:	4b81      	ldr	r3, [pc, #516]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2238      	movs	r2, #56	; 0x38
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002752:	4b7f      	ldr	r3, [pc, #508]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2203      	movs	r2, #3
 8002758:	4013      	ands	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2b10      	cmp	r3, #16
 8002760:	d102      	bne.n	8002768 <HAL_RCC_OscConfig+0x144>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d002      	beq.n	800276e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d135      	bne.n	80027da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276e:	4b78      	ldr	r3, [pc, #480]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4013      	ands	r3, r2
 8002778:	d005      	beq.n	8002786 <HAL_RCC_OscConfig+0x162>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e256      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002786:	4b72      	ldr	r3, [pc, #456]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a74      	ldr	r2, [pc, #464]	; (800295c <HAL_RCC_OscConfig+0x338>)
 800278c:	4013      	ands	r3, r2
 800278e:	0019      	movs	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	021a      	lsls	r2, r3, #8
 8002796:	4b6e      	ldr	r3, [pc, #440]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d112      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027a2:	4b6b      	ldr	r3, [pc, #428]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6e      	ldr	r2, [pc, #440]	; (8002960 <HAL_RCC_OscConfig+0x33c>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	4b67      	ldr	r3, [pc, #412]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80027b6:	4b66      	ldr	r3, [pc, #408]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0adb      	lsrs	r3, r3, #11
 80027bc:	2207      	movs	r2, #7
 80027be:	4013      	ands	r3, r2
 80027c0:	4a68      	ldr	r2, [pc, #416]	; (8002964 <HAL_RCC_OscConfig+0x340>)
 80027c2:	40da      	lsrs	r2, r3
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <HAL_RCC_OscConfig+0x344>)
 80027c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027c8:	4b68      	ldr	r3, [pc, #416]	; (800296c <HAL_RCC_OscConfig+0x348>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7fe fca3 	bl	8001118 <HAL_InitTick>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d051      	beq.n	800287a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e22c      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d030      	beq.n	8002844 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027e2:	4b5b      	ldr	r3, [pc, #364]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a5e      	ldr	r2, [pc, #376]	; (8002960 <HAL_RCC_OscConfig+0x33c>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	4b57      	ldr	r3, [pc, #348]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80027f6:	4b56      	ldr	r3, [pc, #344]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b55      	ldr	r3, [pc, #340]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	0049      	lsls	r1, r1, #1
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fce4 	bl	80011d0 <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280e:	f7fe fcdf 	bl	80011d0 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e209      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002820:	4b4b      	ldr	r3, [pc, #300]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4013      	ands	r3, r2
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282c:	4b48      	ldr	r3, [pc, #288]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a4a      	ldr	r2, [pc, #296]	; (800295c <HAL_RCC_OscConfig+0x338>)
 8002832:	4013      	ands	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	021a      	lsls	r2, r3, #8
 800283c:	4b44      	ldr	r3, [pc, #272]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	e01b      	b.n	800287c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002844:	4b42      	ldr	r3, [pc, #264]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b41      	ldr	r3, [pc, #260]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 800284a:	4949      	ldr	r1, [pc, #292]	; (8002970 <HAL_RCC_OscConfig+0x34c>)
 800284c:	400a      	ands	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fcbe 	bl	80011d0 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe fcb9 	bl	80011d0 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e1e3      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800286c:	4b38      	ldr	r3, [pc, #224]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4013      	ands	r3, r2
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x236>
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800287a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2208      	movs	r2, #8
 8002882:	4013      	ands	r3, r2
 8002884:	d047      	beq.n	8002916 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002886:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2238      	movs	r2, #56	; 0x38
 800288c:	4013      	ands	r3, r2
 800288e:	2b18      	cmp	r3, #24
 8002890:	d10a      	bne.n	80028a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002896:	2202      	movs	r2, #2
 8002898:	4013      	ands	r3, r2
 800289a:	d03c      	beq.n	8002916 <HAL_RCC_OscConfig+0x2f2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d138      	bne.n	8002916 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e1c5      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d019      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80028b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	430a      	orrs	r2, r1
 80028ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe fc88 	bl	80011d0 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c6:	f7fe fc83 	bl	80011d0 <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1ad      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80028da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028dc:	2202      	movs	r2, #2
 80028de:	4013      	ands	r3, r2
 80028e0:	d0f1      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2a2>
 80028e2:	e018      	b.n	8002916 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80028e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 80028ea:	2101      	movs	r1, #1
 80028ec:	438a      	bics	r2, r1
 80028ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fc6e 	bl	80011d0 <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fa:	f7fe fc69 	bl	80011d0 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e193      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 800290e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002910:	2202      	movs	r2, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d1f1      	bne.n	80028fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2204      	movs	r2, #4
 800291c:	4013      	ands	r3, r2
 800291e:	d100      	bne.n	8002922 <HAL_RCC_OscConfig+0x2fe>
 8002920:	e0c6      	b.n	8002ab0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002922:	231f      	movs	r3, #31
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2238      	movs	r2, #56	; 0x38
 8002930:	4013      	ands	r3, r2
 8002932:	2b20      	cmp	r3, #32
 8002934:	d11e      	bne.n	8002974 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	2202      	movs	r2, #2
 800293c:	4013      	ands	r3, r2
 800293e:	d100      	bne.n	8002942 <HAL_RCC_OscConfig+0x31e>
 8002940:	e0b6      	b.n	8002ab0 <HAL_RCC_OscConfig+0x48c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d000      	beq.n	800294c <HAL_RCC_OscConfig+0x328>
 800294a:	e0b1      	b.n	8002ab0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e171      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
 8002950:	40021000 	.word	0x40021000
 8002954:	fffeffff 	.word	0xfffeffff
 8002958:	fffbffff 	.word	0xfffbffff
 800295c:	ffff80ff 	.word	0xffff80ff
 8002960:	ffffc7ff 	.word	0xffffc7ff
 8002964:	00f42400 	.word	0x00f42400
 8002968:	2000007c 	.word	0x2000007c
 800296c:	20000080 	.word	0x20000080
 8002970:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002974:	4bb1      	ldr	r3, [pc, #708]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	055b      	lsls	r3, r3, #21
 800297c:	4013      	ands	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_RCC_OscConfig+0x360>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x362>
 8002984:	2300      	movs	r3, #0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d011      	beq.n	80029ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	4bac      	ldr	r3, [pc, #688]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 800298c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800298e:	4bab      	ldr	r3, [pc, #684]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	0549      	lsls	r1, r1, #21
 8002994:	430a      	orrs	r2, r1
 8002996:	63da      	str	r2, [r3, #60]	; 0x3c
 8002998:	4ba8      	ldr	r3, [pc, #672]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 800299a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	055b      	lsls	r3, r3, #21
 80029a0:	4013      	ands	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80029a6:	231f      	movs	r3, #31
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ae:	4ba4      	ldr	r3, [pc, #656]	; (8002c40 <HAL_RCC_OscConfig+0x61c>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	d11a      	bne.n	80029f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ba:	4ba1      	ldr	r3, [pc, #644]	; (8002c40 <HAL_RCC_OscConfig+0x61c>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4ba0      	ldr	r3, [pc, #640]	; (8002c40 <HAL_RCC_OscConfig+0x61c>)
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	0049      	lsls	r1, r1, #1
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80029c8:	f7fe fc02 	bl	80011d0 <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d2:	f7fe fbfd 	bl	80011d0 <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e127      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e4:	4b96      	ldr	r3, [pc, #600]	; (8002c40 <HAL_RCC_OscConfig+0x61c>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4013      	ands	r3, r2
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d106      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3e2>
 80029f8:	4b90      	ldr	r3, [pc, #576]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 80029fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029fc:	4b8f      	ldr	r3, [pc, #572]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 80029fe:	2101      	movs	r1, #1
 8002a00:	430a      	orrs	r2, r1
 8002a02:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a04:	e01c      	b.n	8002a40 <HAL_RCC_OscConfig+0x41c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x404>
 8002a0e:	4b8b      	ldr	r3, [pc, #556]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a12:	4b8a      	ldr	r3, [pc, #552]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a14:	2104      	movs	r1, #4
 8002a16:	430a      	orrs	r2, r1
 8002a18:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a1a:	4b88      	ldr	r3, [pc, #544]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a1e:	4b87      	ldr	r3, [pc, #540]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0x41c>
 8002a28:	4b84      	ldr	r3, [pc, #528]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a2c:	4b83      	ldr	r3, [pc, #524]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	438a      	bics	r2, r1
 8002a32:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a34:	4b81      	ldr	r3, [pc, #516]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a38:	4b80      	ldr	r3, [pc, #512]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d014      	beq.n	8002a72 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fbc2 	bl	80011d0 <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a50:	e009      	b.n	8002a66 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fbbd 	bl	80011d0 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	4a79      	ldr	r2, [pc, #484]	; (8002c44 <HAL_RCC_OscConfig+0x620>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e0e6      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a66:	4b75      	ldr	r3, [pc, #468]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x42e>
 8002a70:	e013      	b.n	8002a9a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe fbad 	bl	80011d0 <HAL_GetTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a7a:	e009      	b.n	8002a90 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fba8 	bl	80011d0 <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	4a6f      	ldr	r2, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x620>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0d1      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a90:	4b6a      	ldr	r3, [pc, #424]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	2202      	movs	r2, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a9a:	231f      	movs	r3, #31
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002aa4:	4b65      	ldr	r3, [pc, #404]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aa8:	4b64      	ldr	r3, [pc, #400]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002aaa:	4967      	ldr	r1, [pc, #412]	; (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d100      	bne.n	8002aba <HAL_RCC_OscConfig+0x496>
 8002ab8:	e0bb      	b.n	8002c32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aba:	4b60      	ldr	r3, [pc, #384]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2238      	movs	r2, #56	; 0x38
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d100      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4a4>
 8002ac6:	e07b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d156      	bne.n	8002b7e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b5a      	ldr	r3, [pc, #360]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002ad6:	495d      	ldr	r1, [pc, #372]	; (8002c4c <HAL_RCC_OscConfig+0x628>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fb78 	bl	80011d0 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe fb73 	bl	80011d0 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e09d      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	049b      	lsls	r3, r3, #18
 8002b00:	4013      	ands	r3, r2
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b04:	4b4d      	ldr	r3, [pc, #308]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a51      	ldr	r2, [pc, #324]	; (8002c50 <HAL_RCC_OscConfig+0x62c>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1a      	ldr	r2, [r3, #32]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	431a      	orrs	r2, r3
 8002b32:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b38:	4b40      	ldr	r3, [pc, #256]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b3e:	2180      	movs	r1, #128	; 0x80
 8002b40:	0449      	lsls	r1, r1, #17
 8002b42:	430a      	orrs	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	0549      	lsls	r1, r1, #21
 8002b50:	430a      	orrs	r2, r1
 8002b52:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fb3c 	bl	80011d0 <HAL_GetTick>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe fb37 	bl	80011d0 <HAL_GetTick>
 8002b62:	0002      	movs	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e061      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	049b      	lsls	r3, r3, #18
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x53a>
 8002b7c:	e059      	b.n	8002c32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b84:	4931      	ldr	r1, [pc, #196]	; (8002c4c <HAL_RCC_OscConfig+0x628>)
 8002b86:	400a      	ands	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fb21 	bl	80011d0 <HAL_GetTick>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fb1c 	bl	80011d0 <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e046      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba6:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	049b      	lsls	r3, r3, #18
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002bb8:	4926      	ldr	r1, [pc, #152]	; (8002c54 <HAL_RCC_OscConfig+0x630>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	e038      	b.n	8002c32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e033      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d126      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2270      	movs	r2, #112	; 0x70
 8002be4:	401a      	ands	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d11f      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	23fe      	movs	r3, #254	; 0xfe
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d116      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	23f8      	movs	r3, #248	; 0xf8
 8002c04:	039b      	lsls	r3, r3, #14
 8002c06:	401a      	ands	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d10e      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	23e0      	movs	r3, #224	; 0xe0
 8002c14:	051b      	lsls	r3, r3, #20
 8002c16:	401a      	ands	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	0f5b      	lsrs	r3, r3, #29
 8002c24:	075a      	lsls	r2, r3, #29
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b008      	add	sp, #32
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40007000 	.word	0x40007000
 8002c44:	00001388 	.word	0x00001388
 8002c48:	efffffff 	.word	0xefffffff
 8002c4c:	feffffff 	.word	0xfeffffff
 8002c50:	11c1808c 	.word	0x11c1808c
 8002c54:	eefefffc 	.word	0xeefefffc

08002c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0e9      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b76      	ldr	r3, [pc, #472]	; (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2207      	movs	r2, #7
 8002c72:	4013      	ands	r3, r2
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d91e      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2207      	movs	r2, #7
 8002c80:	4393      	bics	r3, r2
 8002c82:	0019      	movs	r1, r3
 8002c84:	4b70      	ldr	r3, [pc, #448]	; (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c8c:	f7fe faa0 	bl	80011d0 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c94:	e009      	b.n	8002caa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c96:	f7fe fa9b 	bl	80011d0 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	4a6a      	ldr	r2, [pc, #424]	; (8002e4c <HAL_RCC_ClockConfig+0x1f4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0ca      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002caa:	4b67      	ldr	r3, [pc, #412]	; (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2207      	movs	r2, #7
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1ee      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d015      	beq.n	8002cee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d006      	beq.n	8002cda <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ccc:	4b60      	ldr	r3, [pc, #384]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b5f      	ldr	r3, [pc, #380]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002cd2:	21e0      	movs	r1, #224	; 0xe0
 8002cd4:	01c9      	lsls	r1, r1, #7
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4a5d      	ldr	r2, [pc, #372]	; (8002e54 <HAL_RCC_ClockConfig+0x1fc>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d057      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d00:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	029b      	lsls	r3, r3, #10
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d12b      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e097      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d18:	4b4d      	ldr	r3, [pc, #308]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	049b      	lsls	r3, r3, #18
 8002d20:	4013      	ands	r3, r2
 8002d22:	d11f      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e08b      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d30:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d113      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e07f      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d48:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d108      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e074      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d56:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e06d      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d64:	4b3a      	ldr	r3, [pc, #232]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2207      	movs	r2, #7
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d78:	f7fe fa2a 	bl	80011d0 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d80:	e009      	b.n	8002d96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d82:	f7fe fa25 	bl	80011d0 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <HAL_RCC_ClockConfig+0x1f4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e054      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2e      	ldr	r3, [pc, #184]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2238      	movs	r2, #56	; 0x38
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1ec      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2207      	movs	r2, #7
 8002dae:	4013      	ands	r3, r2
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d21e      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2207      	movs	r2, #7
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dc8:	f7fe fa02 	bl	80011d0 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dd0:	e009      	b.n	8002de6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd2:	f7fe f9fd 	bl	80011d0 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <HAL_RCC_ClockConfig+0x1f4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e02c      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002de6:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2207      	movs	r2, #7
 8002dec:	4013      	ands	r3, r2
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1ee      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfe:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <HAL_RCC_ClockConfig+0x200>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e12:	f000 f829 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002e16:	0001      	movs	r1, r0
 8002e18:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	220f      	movs	r2, #15
 8002e20:	401a      	ands	r2, r3
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_RCC_ClockConfig+0x204>)
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	58d3      	ldr	r3, [r2, r3]
 8002e28:	221f      	movs	r2, #31
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	000a      	movs	r2, r1
 8002e2e:	40da      	lsrs	r2, r3
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_ClockConfig+0x208>)
 8002e32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_ClockConfig+0x20c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7fe f96d 	bl	8001118 <HAL_InitTick>
 8002e3e:	0003      	movs	r3, r0
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b004      	add	sp, #16
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	00001388 	.word	0x00001388
 8002e50:	40021000 	.word	0x40021000
 8002e54:	fffff0ff 	.word	0xfffff0ff
 8002e58:	ffff8fff 	.word	0xffff8fff
 8002e5c:	08005b3c 	.word	0x08005b3c
 8002e60:	2000007c 	.word	0x2000007c
 8002e64:	20000080 	.word	0x20000080

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2238      	movs	r2, #56	; 0x38
 8002e74:	4013      	ands	r3, r2
 8002e76:	d10f      	bne.n	8002e98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e78:	4b39      	ldr	r3, [pc, #228]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0adb      	lsrs	r3, r3, #11
 8002e7e:	2207      	movs	r2, #7
 8002e80:	4013      	ands	r3, r2
 8002e82:	2201      	movs	r2, #1
 8002e84:	409a      	lsls	r2, r3
 8002e86:	0013      	movs	r3, r2
 8002e88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e8a:	6839      	ldr	r1, [r7, #0]
 8002e8c:	4835      	ldr	r0, [pc, #212]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e8e:	f7fd f94b 	bl	8000128 <__udivsi3>
 8002e92:	0003      	movs	r3, r0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e05d      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2238      	movs	r2, #56	; 0x38
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d102      	bne.n	8002eaa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ea4:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	e054      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2238      	movs	r2, #56	; 0x38
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d138      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	2207      	movs	r2, #7
 8002ec8:	4013      	ands	r3, r2
 8002eca:	3301      	adds	r3, #1
 8002ecc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	4824      	ldr	r0, [pc, #144]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ed8:	f7fd f926 	bl	8000128 <__udivsi3>
 8002edc:	0003      	movs	r3, r0
 8002ede:	0019      	movs	r1, r3
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	227f      	movs	r2, #127	; 0x7f
 8002ee8:	4013      	ands	r3, r2
 8002eea:	434b      	muls	r3, r1
 8002eec:	617b      	str	r3, [r7, #20]
        break;
 8002eee:	e00d      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	481c      	ldr	r0, [pc, #112]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ef4:	f7fd f918 	bl	8000128 <__udivsi3>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	0019      	movs	r1, r3
 8002efc:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	227f      	movs	r2, #127	; 0x7f
 8002f04:	4013      	ands	r3, r2
 8002f06:	434b      	muls	r3, r1
 8002f08:	617b      	str	r3, [r7, #20]
        break;
 8002f0a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f0c:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0f5b      	lsrs	r3, r3, #29
 8002f12:	2207      	movs	r2, #7
 8002f14:	4013      	ands	r3, r2
 8002f16:	3301      	adds	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	6978      	ldr	r0, [r7, #20]
 8002f1e:	f7fd f903 	bl	8000128 <__udivsi3>
 8002f22:	0003      	movs	r3, r0
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	e015      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2238      	movs	r2, #56	; 0x38
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d103      	bne.n	8002f3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2238      	movs	r2, #56	; 0x38
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b18      	cmp	r3, #24
 8002f46:	d103      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f48:	23fa      	movs	r3, #250	; 0xfa
 8002f4a:	01db      	lsls	r3, r3, #7
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e001      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f54:	693b      	ldr	r3, [r7, #16]
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b006      	add	sp, #24
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	40021000 	.word	0x40021000
 8002f64:	00f42400 	.word	0x00f42400
 8002f68:	007a1200 	.word	0x007a1200

08002f6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f70:	4b02      	ldr	r3, [pc, #8]	; (8002f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	2000007c 	.word	0x2000007c

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f84:	f7ff fff2 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f88:	0004      	movs	r4, r0
 8002f8a:	f7ff fb3f 	bl	800260c <LL_RCC_GetAPB1Prescaler>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	0b1a      	lsrs	r2, r3, #12
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f94:	0092      	lsls	r2, r2, #2
 8002f96:	58d3      	ldr	r3, [r2, r3]
 8002f98:	221f      	movs	r2, #31
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	40dc      	lsrs	r4, r3
 8002f9e:	0023      	movs	r3, r4
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	08005b7c 	.word	0x08005b7c

08002fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002fb4:	2313      	movs	r3, #19
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fbc:	2312      	movs	r3, #18
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	029b      	lsls	r3, r3, #10
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d100      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002fd0:	e0a3      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2011      	movs	r0, #17
 8002fd4:	183b      	adds	r3, r7, r0
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4bc3      	ldr	r3, [pc, #780]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	055b      	lsls	r3, r3, #21
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d110      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4bc0      	ldr	r3, [pc, #768]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fea:	4bbf      	ldr	r3, [pc, #764]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	0549      	lsls	r1, r1, #21
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ff4:	4bbc      	ldr	r3, [pc, #752]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	055b      	lsls	r3, r3, #21
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003002:	183b      	adds	r3, r7, r0
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003008:	4bb8      	ldr	r3, [pc, #736]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4bb7      	ldr	r3, [pc, #732]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	0049      	lsls	r1, r1, #1
 8003012:	430a      	orrs	r2, r1
 8003014:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003016:	f7fe f8db 	bl	80011d0 <HAL_GetTick>
 800301a:	0003      	movs	r3, r0
 800301c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301e:	e00b      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7fe f8d6 	bl	80011d0 <HAL_GetTick>
 8003024:	0002      	movs	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d904      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800302e:	2313      	movs	r3, #19
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	2203      	movs	r2, #3
 8003034:	701a      	strb	r2, [r3, #0]
        break;
 8003036:	e005      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003038:	4bac      	ldr	r3, [pc, #688]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4013      	ands	r3, r2
 8003042:	d0ed      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003044:	2313      	movs	r3, #19
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d154      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800304e:	4ba6      	ldr	r3, [pc, #664]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003050:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003052:	23c0      	movs	r3, #192	; 0xc0
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4013      	ands	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d019      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	429a      	cmp	r2, r3
 8003068:	d014      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800306a:	4b9f      	ldr	r3, [pc, #636]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	4aa0      	ldr	r2, [pc, #640]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003070:	4013      	ands	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003074:	4b9c      	ldr	r3, [pc, #624]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003076:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003078:	4b9b      	ldr	r3, [pc, #620]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	0249      	lsls	r1, r1, #9
 800307e:	430a      	orrs	r2, r1
 8003080:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003082:	4b99      	ldr	r3, [pc, #612]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003084:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003086:	4b98      	ldr	r3, [pc, #608]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003088:	499a      	ldr	r1, [pc, #616]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800308a:	400a      	ands	r2, r1
 800308c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800308e:	4b96      	ldr	r3, [pc, #600]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2201      	movs	r2, #1
 8003098:	4013      	ands	r3, r2
 800309a:	d016      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe f898 	bl	80011d0 <HAL_GetTick>
 80030a0:	0003      	movs	r3, r0
 80030a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a4:	e00c      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe f893 	bl	80011d0 <HAL_GetTick>
 80030aa:	0002      	movs	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	4a91      	ldr	r2, [pc, #580]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d904      	bls.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80030b6:	2313      	movs	r3, #19
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	2203      	movs	r2, #3
 80030bc:	701a      	strb	r2, [r3, #0]
            break;
 80030be:	e004      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c0:	4b89      	ldr	r3, [pc, #548]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c4:	2202      	movs	r2, #2
 80030c6:	4013      	ands	r3, r2
 80030c8:	d0ed      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80030ca:	2313      	movs	r3, #19
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d4:	4b84      	ldr	r3, [pc, #528]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	4a85      	ldr	r2, [pc, #532]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80030da:	4013      	ands	r3, r2
 80030dc:	0019      	movs	r1, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e2:	4b81      	ldr	r3, [pc, #516]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030e4:	430a      	orrs	r2, r1
 80030e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80030e8:	e00c      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ea:	2312      	movs	r3, #18
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	2213      	movs	r2, #19
 80030f0:	18ba      	adds	r2, r7, r2
 80030f2:	7812      	ldrb	r2, [r2, #0]
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e005      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f8:	2312      	movs	r3, #18
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2213      	movs	r2, #19
 80030fe:	18ba      	adds	r2, r7, r2
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003104:	2311      	movs	r3, #17
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d105      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310e:	4b76      	ldr	r3, [pc, #472]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003112:	4b75      	ldr	r3, [pc, #468]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003114:	4979      	ldr	r1, [pc, #484]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003116:	400a      	ands	r2, r1
 8003118:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2201      	movs	r2, #1
 8003120:	4013      	ands	r3, r2
 8003122:	d009      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003124:	4b70      	ldr	r3, [pc, #448]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003128:	2203      	movs	r2, #3
 800312a:	4393      	bics	r3, r2
 800312c:	0019      	movs	r1, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4b6d      	ldr	r3, [pc, #436]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003134:	430a      	orrs	r2, r1
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2202      	movs	r2, #2
 800313e:	4013      	ands	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003142:	4b69      	ldr	r3, [pc, #420]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	220c      	movs	r2, #12
 8003148:	4393      	bics	r3, r2
 800314a:	0019      	movs	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	4b65      	ldr	r3, [pc, #404]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003152:	430a      	orrs	r2, r1
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2210      	movs	r2, #16
 800315c:	4013      	ands	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003160:	4b61      	ldr	r3, [pc, #388]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	4a66      	ldr	r2, [pc, #408]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003166:	4013      	ands	r3, r2
 8003168:	0019      	movs	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	4b5e      	ldr	r3, [pc, #376]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003170:	430a      	orrs	r2, r1
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4013      	ands	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003180:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003184:	4a5f      	ldr	r2, [pc, #380]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	4b56      	ldr	r3, [pc, #344]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003190:	430a      	orrs	r2, r1
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4013      	ands	r3, r2
 800319e:	d009      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031a0:	4b51      	ldr	r3, [pc, #324]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	4a58      	ldr	r2, [pc, #352]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	4b4e      	ldr	r3, [pc, #312]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b0:	430a      	orrs	r2, r1
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2220      	movs	r2, #32
 80031ba:	4013      	ands	r3, r2
 80031bc:	d009      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031be:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	4a52      	ldr	r2, [pc, #328]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ce:	430a      	orrs	r2, r1
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	01db      	lsls	r3, r3, #7
 80031da:	4013      	ands	r3, r2
 80031dc:	d015      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031de:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	0899      	lsrs	r1, r3, #2
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1a      	ldr	r2, [r3, #32]
 80031ea:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ec:	430a      	orrs	r2, r1
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1a      	ldr	r2, [r3, #32]
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	05db      	lsls	r3, r3, #23
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d106      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031fc:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003202:	2180      	movs	r1, #128	; 0x80
 8003204:	0249      	lsls	r1, r1, #9
 8003206:	430a      	orrs	r2, r1
 8003208:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	031b      	lsls	r3, r3, #12
 8003212:	4013      	ands	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003216:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	2240      	movs	r2, #64	; 0x40
 800321c:	4393      	bics	r3, r2
 800321e:	0019      	movs	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003224:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003226:	430a      	orrs	r2, r1
 8003228:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	039b      	lsls	r3, r3, #14
 8003232:	4013      	ands	r3, r2
 8003234:	d016      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003236:	4b2c      	ldr	r3, [pc, #176]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	4a35      	ldr	r2, [pc, #212]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800323c:	4013      	ands	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003244:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003246:	430a      	orrs	r2, r1
 8003248:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	03db      	lsls	r3, r3, #15
 8003252:	429a      	cmp	r2, r3
 8003254:	d106      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	0449      	lsls	r1, r1, #17
 8003260:	430a      	orrs	r2, r1
 8003262:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	03db      	lsls	r3, r3, #15
 800326c:	4013      	ands	r3, r2
 800326e:	d016      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	4a27      	ldr	r2, [pc, #156]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327e:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003280:	430a      	orrs	r2, r1
 8003282:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	045b      	lsls	r3, r3, #17
 800328c:	429a      	cmp	r2, r3
 800328e:	d106      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	0449      	lsls	r1, r1, #17
 800329a:	430a      	orrs	r2, r1
 800329c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	4013      	ands	r3, r2
 80032a8:	d016      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	4a1a      	ldr	r2, [pc, #104]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032ba:	430a      	orrs	r2, r1
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	01db      	lsls	r3, r3, #7
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d106      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032d0:	2180      	movs	r1, #128	; 0x80
 80032d2:	0249      	lsls	r1, r1, #9
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80032d8:	2312      	movs	r3, #18
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	781b      	ldrb	r3, [r3, #0]
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b006      	add	sp, #24
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40007000 	.word	0x40007000
 80032f0:	fffffcff 	.word	0xfffffcff
 80032f4:	fffeffff 	.word	0xfffeffff
 80032f8:	00001388 	.word	0x00001388
 80032fc:	efffffff 	.word	0xefffffff
 8003300:	fffff3ff 	.word	0xfffff3ff
 8003304:	fff3ffff 	.word	0xfff3ffff
 8003308:	ffcfffff 	.word	0xffcfffff
 800330c:	ffffcfff 	.word	0xffffcfff
 8003310:	ffbfffff 	.word	0xffbfffff
 8003314:	feffffff 	.word	0xfeffffff
 8003318:	ffff3fff 	.word	0xffff3fff

0800331c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e04a      	b.n	80033c4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	223d      	movs	r2, #61	; 0x3d
 8003332:	5c9b      	ldrb	r3, [r3, r2]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	223c      	movs	r2, #60	; 0x3c
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	0018      	movs	r0, r3
 8003346:	f7fd fd8d 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	223d      	movs	r2, #61	; 0x3d
 800334e:	2102      	movs	r1, #2
 8003350:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	0019      	movs	r1, r3
 800335c:	0010      	movs	r0, r2
 800335e:	f000 fc1f 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2248      	movs	r2, #72	; 0x48
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	223e      	movs	r2, #62	; 0x3e
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	223f      	movs	r2, #63	; 0x3f
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2240      	movs	r2, #64	; 0x40
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2241      	movs	r2, #65	; 0x41
 8003386:	2101      	movs	r1, #1
 8003388:	5499      	strb	r1, [r3, r2]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2242      	movs	r2, #66	; 0x42
 800338e:	2101      	movs	r1, #1
 8003390:	5499      	strb	r1, [r3, r2]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2243      	movs	r2, #67	; 0x43
 8003396:	2101      	movs	r1, #1
 8003398:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2244      	movs	r2, #68	; 0x44
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2245      	movs	r2, #69	; 0x45
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2246      	movs	r2, #70	; 0x46
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2247      	movs	r2, #71	; 0x47
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	223d      	movs	r2, #61	; 0x3d
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b002      	add	sp, #8
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e04a      	b.n	8003474 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	223d      	movs	r2, #61	; 0x3d
 80033e2:	5c9b      	ldrb	r3, [r3, r2]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	223c      	movs	r2, #60	; 0x3c
 80033ee:	2100      	movs	r1, #0
 80033f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 f841 	bl	800347c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	223d      	movs	r2, #61	; 0x3d
 80033fe:	2102      	movs	r1, #2
 8003400:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	0019      	movs	r1, r3
 800340c:	0010      	movs	r0, r2
 800340e:	f000 fbc7 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2248      	movs	r2, #72	; 0x48
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	223e      	movs	r2, #62	; 0x3e
 800341e:	2101      	movs	r1, #1
 8003420:	5499      	strb	r1, [r3, r2]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	223f      	movs	r2, #63	; 0x3f
 8003426:	2101      	movs	r1, #1
 8003428:	5499      	strb	r1, [r3, r2]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2240      	movs	r2, #64	; 0x40
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2241      	movs	r2, #65	; 0x41
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2242      	movs	r2, #66	; 0x42
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2243      	movs	r2, #67	; 0x43
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2244      	movs	r2, #68	; 0x44
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2245      	movs	r2, #69	; 0x45
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2246      	movs	r2, #70	; 0x46
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2247      	movs	r2, #71	; 0x47
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	223d      	movs	r2, #61	; 0x3d
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003496:	230f      	movs	r3, #15
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d108      	bne.n	80034b6 <HAL_TIM_PWM_Start_IT+0x2a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	223e      	movs	r2, #62	; 0x3e
 80034a8:	5c9b      	ldrb	r3, [r3, r2]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	1e5a      	subs	r2, r3, #1
 80034b0:	4193      	sbcs	r3, r2
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	e037      	b.n	8003526 <HAL_TIM_PWM_Start_IT+0x9a>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d108      	bne.n	80034ce <HAL_TIM_PWM_Start_IT+0x42>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	223f      	movs	r2, #63	; 0x3f
 80034c0:	5c9b      	ldrb	r3, [r3, r2]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	1e5a      	subs	r2, r3, #1
 80034c8:	4193      	sbcs	r3, r2
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e02b      	b.n	8003526 <HAL_TIM_PWM_Start_IT+0x9a>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d108      	bne.n	80034e6 <HAL_TIM_PWM_Start_IT+0x5a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2240      	movs	r2, #64	; 0x40
 80034d8:	5c9b      	ldrb	r3, [r3, r2]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	1e5a      	subs	r2, r3, #1
 80034e0:	4193      	sbcs	r3, r2
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e01f      	b.n	8003526 <HAL_TIM_PWM_Start_IT+0x9a>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b0c      	cmp	r3, #12
 80034ea:	d108      	bne.n	80034fe <HAL_TIM_PWM_Start_IT+0x72>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2241      	movs	r2, #65	; 0x41
 80034f0:	5c9b      	ldrb	r3, [r3, r2]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	4193      	sbcs	r3, r2
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e013      	b.n	8003526 <HAL_TIM_PWM_Start_IT+0x9a>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b10      	cmp	r3, #16
 8003502:	d108      	bne.n	8003516 <HAL_TIM_PWM_Start_IT+0x8a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2242      	movs	r2, #66	; 0x42
 8003508:	5c9b      	ldrb	r3, [r3, r2]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	1e5a      	subs	r2, r3, #1
 8003510:	4193      	sbcs	r3, r2
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e007      	b.n	8003526 <HAL_TIM_PWM_Start_IT+0x9a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2243      	movs	r2, #67	; 0x43
 800351a:	5c9b      	ldrb	r3, [r3, r2]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	1e5a      	subs	r2, r3, #1
 8003522:	4193      	sbcs	r3, r2
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_TIM_PWM_Start_IT+0xa2>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0ce      	b.n	80036cc <HAL_TIM_PWM_Start_IT+0x240>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d104      	bne.n	800353e <HAL_TIM_PWM_Start_IT+0xb2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	223e      	movs	r2, #62	; 0x3e
 8003538:	2102      	movs	r1, #2
 800353a:	5499      	strb	r1, [r3, r2]
 800353c:	e023      	b.n	8003586 <HAL_TIM_PWM_Start_IT+0xfa>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b04      	cmp	r3, #4
 8003542:	d104      	bne.n	800354e <HAL_TIM_PWM_Start_IT+0xc2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	223f      	movs	r2, #63	; 0x3f
 8003548:	2102      	movs	r1, #2
 800354a:	5499      	strb	r1, [r3, r2]
 800354c:	e01b      	b.n	8003586 <HAL_TIM_PWM_Start_IT+0xfa>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d104      	bne.n	800355e <HAL_TIM_PWM_Start_IT+0xd2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2240      	movs	r2, #64	; 0x40
 8003558:	2102      	movs	r1, #2
 800355a:	5499      	strb	r1, [r3, r2]
 800355c:	e013      	b.n	8003586 <HAL_TIM_PWM_Start_IT+0xfa>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d104      	bne.n	800356e <HAL_TIM_PWM_Start_IT+0xe2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2241      	movs	r2, #65	; 0x41
 8003568:	2102      	movs	r1, #2
 800356a:	5499      	strb	r1, [r3, r2]
 800356c:	e00b      	b.n	8003586 <HAL_TIM_PWM_Start_IT+0xfa>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b10      	cmp	r3, #16
 8003572:	d104      	bne.n	800357e <HAL_TIM_PWM_Start_IT+0xf2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2242      	movs	r2, #66	; 0x42
 8003578:	2102      	movs	r1, #2
 800357a:	5499      	strb	r1, [r3, r2]
 800357c:	e003      	b.n	8003586 <HAL_TIM_PWM_Start_IT+0xfa>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2243      	movs	r2, #67	; 0x43
 8003582:	2102      	movs	r1, #2
 8003584:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b0c      	cmp	r3, #12
 800358a:	d02a      	beq.n	80035e2 <HAL_TIM_PWM_Start_IT+0x156>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b0c      	cmp	r3, #12
 8003590:	d830      	bhi.n	80035f4 <HAL_TIM_PWM_Start_IT+0x168>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b08      	cmp	r3, #8
 8003596:	d01b      	beq.n	80035d0 <HAL_TIM_PWM_Start_IT+0x144>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d82a      	bhi.n	80035f4 <HAL_TIM_PWM_Start_IT+0x168>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_TIM_PWM_Start_IT+0x120>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d009      	beq.n	80035be <HAL_TIM_PWM_Start_IT+0x132>
 80035aa:	e023      	b.n	80035f4 <HAL_TIM_PWM_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2102      	movs	r1, #2
 80035b8:	430a      	orrs	r2, r1
 80035ba:	60da      	str	r2, [r3, #12]
      break;
 80035bc:	e01f      	b.n	80035fe <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2104      	movs	r1, #4
 80035ca:	430a      	orrs	r2, r1
 80035cc:	60da      	str	r2, [r3, #12]
      break;
 80035ce:	e016      	b.n	80035fe <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2108      	movs	r1, #8
 80035dc:	430a      	orrs	r2, r1
 80035de:	60da      	str	r2, [r3, #12]
      break;
 80035e0:	e00d      	b.n	80035fe <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2110      	movs	r1, #16
 80035ee:	430a      	orrs	r2, r1
 80035f0:	60da      	str	r2, [r3, #12]
      break;
 80035f2:	e004      	b.n	80035fe <HAL_TIM_PWM_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 80035f4:	230f      	movs	r3, #15
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	2201      	movs	r2, #1
 80035fa:	701a      	strb	r2, [r3, #0]
      break;
 80035fc:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80035fe:	230f      	movs	r3, #15
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d15e      	bne.n	80036c6 <HAL_TIM_PWM_Start_IT+0x23a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6839      	ldr	r1, [r7, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	0018      	movs	r0, r3
 8003612:	f000 fe09 	bl	8004228 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a2e      	ldr	r2, [pc, #184]	; (80036d4 <HAL_TIM_PWM_Start_IT+0x248>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_TIM_PWM_Start_IT+0x1b2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <HAL_TIM_PWM_Start_IT+0x24c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_TIM_PWM_Start_IT+0x1b2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2b      	ldr	r2, [pc, #172]	; (80036dc <HAL_TIM_PWM_Start_IT+0x250>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_TIM_PWM_Start_IT+0x1b2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <HAL_TIM_PWM_Start_IT+0x254>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_TIM_PWM_Start_IT+0x1b6>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <HAL_TIM_PWM_Start_IT+0x1b8>
 8003642:	2300      	movs	r3, #0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_TIM_PWM_Start_IT+0x1ce>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	0209      	lsls	r1, r1, #8
 8003656:	430a      	orrs	r2, r1
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <HAL_TIM_PWM_Start_IT+0x248>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00f      	beq.n	8003684 <HAL_TIM_PWM_Start_IT+0x1f8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	05db      	lsls	r3, r3, #23
 800366c:	429a      	cmp	r2, r3
 800366e:	d009      	beq.n	8003684 <HAL_TIM_PWM_Start_IT+0x1f8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_TIM_PWM_Start_IT+0x258>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_TIM_PWM_Start_IT+0x1f8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <HAL_TIM_PWM_Start_IT+0x24c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d116      	bne.n	80036b2 <HAL_TIM_PWM_Start_IT+0x226>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <HAL_TIM_PWM_Start_IT+0x25c>)
 800368c:	4013      	ands	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b06      	cmp	r3, #6
 8003694:	d016      	beq.n	80036c4 <HAL_TIM_PWM_Start_IT+0x238>
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	025b      	lsls	r3, r3, #9
 800369c:	429a      	cmp	r2, r3
 800369e:	d011      	beq.n	80036c4 <HAL_TIM_PWM_Start_IT+0x238>
      {
        __HAL_TIM_ENABLE(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2101      	movs	r1, #1
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b0:	e008      	b.n	80036c4 <HAL_TIM_PWM_Start_IT+0x238>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2101      	movs	r1, #1
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e000      	b.n	80036c6 <HAL_TIM_PWM_Start_IT+0x23a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80036c6:	230f      	movs	r3, #15
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	781b      	ldrb	r3, [r3, #0]
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b004      	add	sp, #16
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40014400 	.word	0x40014400
 80036e0:	40014800 	.word	0x40014800
 80036e4:	40000400 	.word	0x40000400
 80036e8:	00010007 	.word	0x00010007

080036ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d124      	bne.n	800374c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2202      	movs	r2, #2
 800370a:	4013      	ands	r3, r2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d11d      	bne.n	800374c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2203      	movs	r2, #3
 8003716:	4252      	negs	r2, r2
 8003718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2203      	movs	r2, #3
 8003728:	4013      	ands	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	f000 fa1e 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 8003734:	e007      	b.n	8003746 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0018      	movs	r0, r3
 800373a:	f000 fa11 	bl	8003b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	0018      	movs	r0, r3
 8003742:	f000 fa1d 	bl	8003b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2204      	movs	r2, #4
 8003754:	4013      	ands	r3, r2
 8003756:	2b04      	cmp	r3, #4
 8003758:	d125      	bne.n	80037a6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2204      	movs	r2, #4
 8003762:	4013      	ands	r3, r2
 8003764:	2b04      	cmp	r3, #4
 8003766:	d11e      	bne.n	80037a6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2205      	movs	r2, #5
 800376e:	4252      	negs	r2, r2
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	23c0      	movs	r3, #192	; 0xc0
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4013      	ands	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f000 f9f1 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 800378e:	e007      	b.n	80037a0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	0018      	movs	r0, r3
 8003794:	f000 f9e4 	bl	8003b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	0018      	movs	r0, r3
 800379c:	f000 f9f0 	bl	8003b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2208      	movs	r2, #8
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d124      	bne.n	80037fe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2208      	movs	r2, #8
 80037bc:	4013      	ands	r3, r2
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d11d      	bne.n	80037fe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2209      	movs	r2, #9
 80037c8:	4252      	negs	r2, r2
 80037ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2204      	movs	r2, #4
 80037d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	2203      	movs	r2, #3
 80037da:	4013      	ands	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 f9c5 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 80037e6:	e007      	b.n	80037f8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 f9b8 	bl	8003b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 f9c4 	bl	8003b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2210      	movs	r2, #16
 8003806:	4013      	ands	r3, r2
 8003808:	2b10      	cmp	r3, #16
 800380a:	d125      	bne.n	8003858 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2210      	movs	r2, #16
 8003814:	4013      	ands	r3, r2
 8003816:	2b10      	cmp	r3, #16
 8003818:	d11e      	bne.n	8003858 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2211      	movs	r2, #17
 8003820:	4252      	negs	r2, r2
 8003822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2208      	movs	r2, #8
 8003828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	23c0      	movs	r3, #192	; 0xc0
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4013      	ands	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0018      	movs	r0, r3
 800383c:	f000 f998 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 8003840:	e007      	b.n	8003852 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	0018      	movs	r0, r3
 8003846:	f000 f98b 	bl	8003b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0018      	movs	r0, r3
 800384e:	f000 f997 	bl	8003b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2201      	movs	r2, #1
 8003860:	4013      	ands	r3, r2
 8003862:	2b01      	cmp	r3, #1
 8003864:	d10f      	bne.n	8003886 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	4013      	ands	r3, r2
 8003870:	2b01      	cmp	r3, #1
 8003872:	d108      	bne.n	8003886 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2202      	movs	r2, #2
 800387a:	4252      	negs	r2, r2
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	0018      	movs	r0, r3
 8003882:	f000 f965 	bl	8003b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	2280      	movs	r2, #128	; 0x80
 800388e:	4013      	ands	r3, r2
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d10f      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	4013      	ands	r3, r2
 800389e:	2b80      	cmp	r3, #128	; 0x80
 80038a0:	d108      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2281      	movs	r2, #129	; 0x81
 80038a8:	4252      	negs	r2, r2
 80038aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 fce5 	bl	800427e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	401a      	ands	r2, r3
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d10e      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b80      	cmp	r3, #128	; 0x80
 80038d4:	d107      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1c      	ldr	r2, [pc, #112]	; (800394c <HAL_TIM_IRQHandler+0x260>)
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 fcd4 	bl	800428e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2240      	movs	r2, #64	; 0x40
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d10f      	bne.n	8003914 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2240      	movs	r2, #64	; 0x40
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d108      	bne.n	8003914 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2241      	movs	r2, #65	; 0x41
 8003908:	4252      	negs	r2, r2
 800390a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	0018      	movs	r0, r3
 8003910:	f000 f93e 	bl	8003b90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2220      	movs	r2, #32
 800391c:	4013      	ands	r3, r2
 800391e:	2b20      	cmp	r3, #32
 8003920:	d10f      	bne.n	8003942 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	4013      	ands	r3, r2
 800392c:	2b20      	cmp	r3, #32
 800392e:	d108      	bne.n	8003942 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2221      	movs	r2, #33	; 0x21
 8003936:	4252      	negs	r2, r2
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	0018      	movs	r0, r3
 800393e:	f000 fc96 	bl	800426e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	fffffeff 	.word	0xfffffeff

08003950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800395c:	2317      	movs	r3, #23
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	223c      	movs	r2, #60	; 0x3c
 8003968:	5c9b      	ldrb	r3, [r3, r2]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x22>
 800396e:	2302      	movs	r3, #2
 8003970:	e0e5      	b.n	8003b3e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	223c      	movs	r2, #60	; 0x3c
 8003976:	2101      	movs	r1, #1
 8003978:	5499      	strb	r1, [r3, r2]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b14      	cmp	r3, #20
 800397e:	d900      	bls.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003980:	e0d1      	b.n	8003b26 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	009a      	lsls	r2, r3, #2
 8003986:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003988:	18d3      	adds	r3, r2, r3
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	0011      	movs	r1, r2
 8003996:	0018      	movs	r0, r3
 8003998:	f000 f982 	bl	8003ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2108      	movs	r1, #8
 80039a8:	430a      	orrs	r2, r1
 80039aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2104      	movs	r1, #4
 80039b8:	438a      	bics	r2, r1
 80039ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6999      	ldr	r1, [r3, #24]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	619a      	str	r2, [r3, #24]
      break;
 80039ce:	e0af      	b.n	8003b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	0011      	movs	r1, r2
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 f9eb 	bl	8003db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2180      	movs	r1, #128	; 0x80
 80039ea:	0109      	lsls	r1, r1, #4
 80039ec:	430a      	orrs	r2, r1
 80039ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4954      	ldr	r1, [pc, #336]	; (8003b4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80039fc:	400a      	ands	r2, r1
 80039fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6999      	ldr	r1, [r3, #24]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	021a      	lsls	r2, r3, #8
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	619a      	str	r2, [r3, #24]
      break;
 8003a14:	e08c      	b.n	8003b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	0011      	movs	r1, r2
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f000 fa4c 	bl	8003ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2108      	movs	r1, #8
 8003a30:	430a      	orrs	r2, r1
 8003a32:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2104      	movs	r1, #4
 8003a40:	438a      	bics	r2, r1
 8003a42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69d9      	ldr	r1, [r3, #28]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	61da      	str	r2, [r3, #28]
      break;
 8003a56:	e06b      	b.n	8003b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	0011      	movs	r1, r2
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 fab3 	bl	8003fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2180      	movs	r1, #128	; 0x80
 8003a72:	0109      	lsls	r1, r1, #4
 8003a74:	430a      	orrs	r2, r1
 8003a76:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4932      	ldr	r1, [pc, #200]	; (8003b4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a84:	400a      	ands	r2, r1
 8003a86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69d9      	ldr	r1, [r3, #28]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	021a      	lsls	r2, r3, #8
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	61da      	str	r2, [r3, #28]
      break;
 8003a9c:	e048      	b.n	8003b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	0011      	movs	r1, r2
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 fafa 	bl	80040a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2108      	movs	r1, #8
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2104      	movs	r1, #4
 8003ac8:	438a      	bics	r2, r1
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ade:	e027      	b.n	8003b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f000 fb39 	bl	8004160 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0109      	lsls	r1, r1, #4
 8003afc:	430a      	orrs	r2, r1
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4910      	ldr	r1, [pc, #64]	; (8003b4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	021a      	lsls	r2, r3, #8
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b24:	e004      	b.n	8003b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003b26:	2317      	movs	r3, #23
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
      break;
 8003b2e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	223c      	movs	r2, #60	; 0x3c
 8003b34:	2100      	movs	r1, #0
 8003b36:	5499      	strb	r1, [r3, r2]

  return status;
 8003b38:	2317      	movs	r3, #23
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	781b      	ldrb	r3, [r3, #0]
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b006      	add	sp, #24
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	08005b9c 	.word	0x08005b9c
 8003b4c:	fffffbff 	.word	0xfffffbff

08003b50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b002      	add	sp, #8
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b002      	add	sp, #8
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a34      	ldr	r2, [pc, #208]	; (8003c84 <TIM_Base_SetConfig+0xe4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d008      	beq.n	8003bca <TIM_Base_SetConfig+0x2a>
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	05db      	lsls	r3, r3, #23
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d003      	beq.n	8003bca <TIM_Base_SetConfig+0x2a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a30      	ldr	r2, [pc, #192]	; (8003c88 <TIM_Base_SetConfig+0xe8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d108      	bne.n	8003bdc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2270      	movs	r2, #112	; 0x70
 8003bce:	4393      	bics	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a29      	ldr	r2, [pc, #164]	; (8003c84 <TIM_Base_SetConfig+0xe4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d018      	beq.n	8003c16 <TIM_Base_SetConfig+0x76>
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	05db      	lsls	r3, r3, #23
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d013      	beq.n	8003c16 <TIM_Base_SetConfig+0x76>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a25      	ldr	r2, [pc, #148]	; (8003c88 <TIM_Base_SetConfig+0xe8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00f      	beq.n	8003c16 <TIM_Base_SetConfig+0x76>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a24      	ldr	r2, [pc, #144]	; (8003c8c <TIM_Base_SetConfig+0xec>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <TIM_Base_SetConfig+0x76>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <TIM_Base_SetConfig+0xf0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d007      	beq.n	8003c16 <TIM_Base_SetConfig+0x76>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <TIM_Base_SetConfig+0xf4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_Base_SetConfig+0x76>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <TIM_Base_SetConfig+0xf8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d108      	bne.n	8003c28 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <TIM_Base_SetConfig+0xfc>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2280      	movs	r2, #128	; 0x80
 8003c2c:	4393      	bics	r3, r2
 8003c2e:	001a      	movs	r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <TIM_Base_SetConfig+0xe4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_Base_SetConfig+0xce>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <TIM_Base_SetConfig+0xf0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <TIM_Base_SetConfig+0xce>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a0c      	ldr	r2, [pc, #48]	; (8003c94 <TIM_Base_SetConfig+0xf4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_Base_SetConfig+0xce>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a0b      	ldr	r2, [pc, #44]	; (8003c98 <TIM_Base_SetConfig+0xf8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d103      	bne.n	8003c76 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	615a      	str	r2, [r3, #20]
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b004      	add	sp, #16
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40002000 	.word	0x40002000
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40014400 	.word	0x40014400
 8003c98:	40014800 	.word	0x40014800
 8003c9c:	fffffcff 	.word	0xfffffcff

08003ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4393      	bics	r3, r2
 8003cb2:	001a      	movs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a32      	ldr	r2, [pc, #200]	; (8003d98 <TIM_OC1_SetConfig+0xf8>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	4393      	bics	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	4393      	bics	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a28      	ldr	r2, [pc, #160]	; (8003d9c <TIM_OC1_SetConfig+0xfc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00b      	beq.n	8003d16 <TIM_OC1_SetConfig+0x76>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a27      	ldr	r2, [pc, #156]	; (8003da0 <TIM_OC1_SetConfig+0x100>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <TIM_OC1_SetConfig+0x76>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <TIM_OC1_SetConfig+0x104>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_OC1_SetConfig+0x76>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <TIM_OC1_SetConfig+0x108>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10c      	bne.n	8003d30 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2208      	movs	r2, #8
 8003d1a:	4393      	bics	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	4393      	bics	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a1a      	ldr	r2, [pc, #104]	; (8003d9c <TIM_OC1_SetConfig+0xfc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00b      	beq.n	8003d50 <TIM_OC1_SetConfig+0xb0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <TIM_OC1_SetConfig+0x100>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_OC1_SetConfig+0xb0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a18      	ldr	r2, [pc, #96]	; (8003da4 <TIM_OC1_SetConfig+0x104>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC1_SetConfig+0xb0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a17      	ldr	r2, [pc, #92]	; (8003da8 <TIM_OC1_SetConfig+0x108>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d111      	bne.n	8003d74 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4a16      	ldr	r2, [pc, #88]	; (8003dac <TIM_OC1_SetConfig+0x10c>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4a15      	ldr	r2, [pc, #84]	; (8003db0 <TIM_OC1_SetConfig+0x110>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b006      	add	sp, #24
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	fffeff8f 	.word	0xfffeff8f
 8003d9c:	40012c00 	.word	0x40012c00
 8003da0:	40014000 	.word	0x40014000
 8003da4:	40014400 	.word	0x40014400
 8003da8:	40014800 	.word	0x40014800
 8003dac:	fffffeff 	.word	0xfffffeff
 8003db0:	fffffdff 	.word	0xfffffdff

08003db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	4393      	bics	r3, r2
 8003dc6:	001a      	movs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a2e      	ldr	r2, [pc, #184]	; (8003e9c <TIM_OC2_SetConfig+0xe8>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4a2d      	ldr	r2, [pc, #180]	; (8003ea0 <TIM_OC2_SetConfig+0xec>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	4393      	bics	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <TIM_OC2_SetConfig+0xf0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10d      	bne.n	8003e32 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	4393      	bics	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2240      	movs	r2, #64	; 0x40
 8003e2e:	4393      	bics	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <TIM_OC2_SetConfig+0xf0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00b      	beq.n	8003e52 <TIM_OC2_SetConfig+0x9e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <TIM_OC2_SetConfig+0xf4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <TIM_OC2_SetConfig+0x9e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <TIM_OC2_SetConfig+0xf8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d003      	beq.n	8003e52 <TIM_OC2_SetConfig+0x9e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <TIM_OC2_SetConfig+0xfc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d113      	bne.n	8003e7a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <TIM_OC2_SetConfig+0x100>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4a16      	ldr	r2, [pc, #88]	; (8003eb8 <TIM_OC2_SetConfig+0x104>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b006      	add	sp, #24
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	feff8fff 	.word	0xfeff8fff
 8003ea0:	fffffcff 	.word	0xfffffcff
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40014000 	.word	0x40014000
 8003eac:	40014400 	.word	0x40014400
 8003eb0:	40014800 	.word	0x40014800
 8003eb4:	fffffbff 	.word	0xfffffbff
 8003eb8:	fffff7ff 	.word	0xfffff7ff

08003ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4a35      	ldr	r2, [pc, #212]	; (8003fa0 <TIM_OC3_SetConfig+0xe4>)
 8003ecc:	401a      	ands	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4a2f      	ldr	r2, [pc, #188]	; (8003fa4 <TIM_OC3_SetConfig+0xe8>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2203      	movs	r2, #3
 8003ef0:	4393      	bics	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <TIM_OC3_SetConfig+0xec>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a25      	ldr	r2, [pc, #148]	; (8003fac <TIM_OC3_SetConfig+0xf0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10d      	bne.n	8003f36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	4a24      	ldr	r2, [pc, #144]	; (8003fb0 <TIM_OC3_SetConfig+0xf4>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <TIM_OC3_SetConfig+0xf8>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a1c      	ldr	r2, [pc, #112]	; (8003fac <TIM_OC3_SetConfig+0xf0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00b      	beq.n	8003f56 <TIM_OC3_SetConfig+0x9a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <TIM_OC3_SetConfig+0xfc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d007      	beq.n	8003f56 <TIM_OC3_SetConfig+0x9a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <TIM_OC3_SetConfig+0x100>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d003      	beq.n	8003f56 <TIM_OC3_SetConfig+0x9a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <TIM_OC3_SetConfig+0x104>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d113      	bne.n	8003f7e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <TIM_OC3_SetConfig+0x108>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <TIM_OC3_SetConfig+0x10c>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	621a      	str	r2, [r3, #32]
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b006      	add	sp, #24
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	fffffeff 	.word	0xfffffeff
 8003fa4:	fffeff8f 	.word	0xfffeff8f
 8003fa8:	fffffdff 	.word	0xfffffdff
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	fffff7ff 	.word	0xfffff7ff
 8003fb4:	fffffbff 	.word	0xfffffbff
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40014400 	.word	0x40014400
 8003fc0:	40014800 	.word	0x40014800
 8003fc4:	ffffefff 	.word	0xffffefff
 8003fc8:	ffffdfff 	.word	0xffffdfff

08003fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	4a28      	ldr	r2, [pc, #160]	; (800407c <TIM_OC4_SetConfig+0xb0>)
 8003fdc:	401a      	ands	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4a22      	ldr	r2, [pc, #136]	; (8004080 <TIM_OC4_SetConfig+0xb4>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	; (8004084 <TIM_OC4_SetConfig+0xb8>)
 8004000:	4013      	ands	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <TIM_OC4_SetConfig+0xbc>)
 8004014:	4013      	ands	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	031b      	lsls	r3, r3, #12
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a19      	ldr	r2, [pc, #100]	; (800408c <TIM_OC4_SetConfig+0xc0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00b      	beq.n	8004044 <TIM_OC4_SetConfig+0x78>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a18      	ldr	r2, [pc, #96]	; (8004090 <TIM_OC4_SetConfig+0xc4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d007      	beq.n	8004044 <TIM_OC4_SetConfig+0x78>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a17      	ldr	r2, [pc, #92]	; (8004094 <TIM_OC4_SetConfig+0xc8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_OC4_SetConfig+0x78>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a16      	ldr	r2, [pc, #88]	; (8004098 <TIM_OC4_SetConfig+0xcc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d109      	bne.n	8004058 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4a15      	ldr	r2, [pc, #84]	; (800409c <TIM_OC4_SetConfig+0xd0>)
 8004048:	4013      	ands	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	019b      	lsls	r3, r3, #6
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b006      	add	sp, #24
 8004078:	bd80      	pop	{r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	ffffefff 	.word	0xffffefff
 8004080:	feff8fff 	.word	0xfeff8fff
 8004084:	fffffcff 	.word	0xfffffcff
 8004088:	ffffdfff 	.word	0xffffdfff
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800
 800409c:	ffffbfff 	.word	0xffffbfff

080040a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	4a25      	ldr	r2, [pc, #148]	; (8004144 <TIM_OC5_SetConfig+0xa4>)
 80040b0:	401a      	ands	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <TIM_OC5_SetConfig+0xa8>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4a1b      	ldr	r2, [pc, #108]	; (800414c <TIM_OC5_SetConfig+0xac>)
 80040de:	4013      	ands	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a17      	ldr	r2, [pc, #92]	; (8004150 <TIM_OC5_SetConfig+0xb0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00b      	beq.n	800410e <TIM_OC5_SetConfig+0x6e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a16      	ldr	r2, [pc, #88]	; (8004154 <TIM_OC5_SetConfig+0xb4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <TIM_OC5_SetConfig+0x6e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a15      	ldr	r2, [pc, #84]	; (8004158 <TIM_OC5_SetConfig+0xb8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_OC5_SetConfig+0x6e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <TIM_OC5_SetConfig+0xbc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d109      	bne.n	8004122 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <TIM_OC5_SetConfig+0xa4>)
 8004112:	4013      	ands	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	621a      	str	r2, [r3, #32]
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b006      	add	sp, #24
 8004142:	bd80      	pop	{r7, pc}
 8004144:	fffeffff 	.word	0xfffeffff
 8004148:	fffeff8f 	.word	0xfffeff8f
 800414c:	fffdffff 	.word	0xfffdffff
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40014000 	.word	0x40014000
 8004158:	40014400 	.word	0x40014400
 800415c:	40014800 	.word	0x40014800

08004160 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	4a26      	ldr	r2, [pc, #152]	; (8004208 <TIM_OC6_SetConfig+0xa8>)
 8004170:	401a      	ands	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4a20      	ldr	r2, [pc, #128]	; (800420c <TIM_OC6_SetConfig+0xac>)
 800418c:	4013      	ands	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <TIM_OC6_SetConfig+0xb0>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	051b      	lsls	r3, r3, #20
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a18      	ldr	r2, [pc, #96]	; (8004214 <TIM_OC6_SetConfig+0xb4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <TIM_OC6_SetConfig+0x70>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <TIM_OC6_SetConfig+0xb8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <TIM_OC6_SetConfig+0x70>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <TIM_OC6_SetConfig+0xbc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_OC6_SetConfig+0x70>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a15      	ldr	r2, [pc, #84]	; (8004220 <TIM_OC6_SetConfig+0xc0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d109      	bne.n	80041e4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	4a14      	ldr	r2, [pc, #80]	; (8004224 <TIM_OC6_SetConfig+0xc4>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	029b      	lsls	r3, r3, #10
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	621a      	str	r2, [r3, #32]
}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	46bd      	mov	sp, r7
 8004202:	b006      	add	sp, #24
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	ffefffff 	.word	0xffefffff
 800420c:	feff8fff 	.word	0xfeff8fff
 8004210:	ffdfffff 	.word	0xffdfffff
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40014000 	.word	0x40014000
 800421c:	40014400 	.word	0x40014400
 8004220:	40014800 	.word	0x40014800
 8004224:	fffbffff 	.word	0xfffbffff

08004228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	221f      	movs	r2, #31
 8004238:	4013      	ands	r3, r2
 800423a:	2201      	movs	r2, #1
 800423c:	409a      	lsls	r2, r3
 800423e:	0013      	movs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	43d2      	mvns	r2, r2
 800424a:	401a      	ands	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	211f      	movs	r1, #31
 8004258:	400b      	ands	r3, r1
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4099      	lsls	r1, r3
 800425e:	000b      	movs	r3, r1
 8004260:	431a      	orrs	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	b006      	add	sp, #24
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	46bd      	mov	sp, r7
 800427a:	b002      	add	sp, #8
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	46bd      	mov	sp, r7
 800428a:	b002      	add	sp, #8
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	46bd      	mov	sp, r7
 800429a:	b002      	add	sp, #8
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e046      	b.n	8004340 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2284      	movs	r2, #132	; 0x84
 80042b6:	589b      	ldr	r3, [r3, r2]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d107      	bne.n	80042cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2280      	movs	r2, #128	; 0x80
 80042c0:	2100      	movs	r1, #0
 80042c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f7fc fe32 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2284      	movs	r2, #132	; 0x84
 80042d0:	2124      	movs	r1, #36	; 0x24
 80042d2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2101      	movs	r1, #1
 80042e0:	438a      	bics	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 f9ce 	bl	8004688 <UART_SetConfig>
 80042ec:	0003      	movs	r3, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e024      	b.n	8004340 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	0018      	movs	r0, r3
 8004302:	f000 fc9d 	bl	8004c40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	490d      	ldr	r1, [pc, #52]	; (8004348 <HAL_UART_Init+0xa8>)
 8004312:	400a      	ands	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	212a      	movs	r1, #42	; 0x2a
 8004322:	438a      	bics	r2, r1
 8004324:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2101      	movs	r1, #1
 8004332:	430a      	orrs	r2, r1
 8004334:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	0018      	movs	r0, r3
 800433a:	f000 fd35 	bl	8004da8 <UART_CheckIdleState>
 800433e:	0003      	movs	r3, r0
}
 8004340:	0018      	movs	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	b002      	add	sp, #8
 8004346:	bd80      	pop	{r7, pc}
 8004348:	ffffb7ff 	.word	0xffffb7ff

0800434c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08a      	sub	sp, #40	; 0x28
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	1dbb      	adds	r3, r7, #6
 800435a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2284      	movs	r2, #132	; 0x84
 8004360:	589b      	ldr	r3, [r3, r2]
 8004362:	2b20      	cmp	r3, #32
 8004364:	d000      	beq.n	8004368 <HAL_UART_Transmit+0x1c>
 8004366:	e097      	b.n	8004498 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_UART_Transmit+0x2a>
 800436e:	1dbb      	adds	r3, r7, #6
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e08f      	b.n	800449a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	015b      	lsls	r3, r3, #5
 8004382:	429a      	cmp	r2, r3
 8004384:	d109      	bne.n	800439a <HAL_UART_Transmit+0x4e>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2201      	movs	r2, #1
 8004392:	4013      	ands	r3, r2
 8004394:	d001      	beq.n	800439a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e07f      	b.n	800449a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2280      	movs	r2, #128	; 0x80
 800439e:	5c9b      	ldrb	r3, [r3, r2]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Transmit+0x5c>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e078      	b.n	800449a <HAL_UART_Transmit+0x14e>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2280      	movs	r2, #128	; 0x80
 80043ac:	2101      	movs	r1, #1
 80043ae:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	228c      	movs	r2, #140	; 0x8c
 80043b4:	2100      	movs	r1, #0
 80043b6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2284      	movs	r2, #132	; 0x84
 80043bc:	2121      	movs	r1, #33	; 0x21
 80043be:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043c0:	f7fc ff06 	bl	80011d0 <HAL_GetTick>
 80043c4:	0003      	movs	r3, r0
 80043c6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1dba      	adds	r2, r7, #6
 80043cc:	2154      	movs	r1, #84	; 0x54
 80043ce:	8812      	ldrh	r2, [r2, #0]
 80043d0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1dba      	adds	r2, r7, #6
 80043d6:	2156      	movs	r1, #86	; 0x56
 80043d8:	8812      	ldrh	r2, [r2, #0]
 80043da:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	015b      	lsls	r3, r3, #5
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d108      	bne.n	80043fa <HAL_UART_Transmit+0xae>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d104      	bne.n	80043fa <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	e003      	b.n	8004402 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2280      	movs	r2, #128	; 0x80
 8004406:	2100      	movs	r1, #0
 8004408:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800440a:	e02c      	b.n	8004466 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	0013      	movs	r3, r2
 8004416:	2200      	movs	r2, #0
 8004418:	2180      	movs	r1, #128	; 0x80
 800441a:	f000 fd0f 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 800441e:	1e03      	subs	r3, r0, #0
 8004420:	d001      	beq.n	8004426 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e039      	b.n	800449a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	001a      	movs	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	05d2      	lsls	r2, r2, #23
 8004438:	0dd2      	lsrs	r2, r2, #23
 800443a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	3302      	adds	r3, #2
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	e007      	b.n	8004454 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	781a      	ldrb	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3301      	adds	r3, #1
 8004452:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2256      	movs	r2, #86	; 0x56
 8004458:	5a9b      	ldrh	r3, [r3, r2]
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b299      	uxth	r1, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2256      	movs	r2, #86	; 0x56
 8004464:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2256      	movs	r2, #86	; 0x56
 800446a:	5a9b      	ldrh	r3, [r3, r2]
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1cc      	bne.n	800440c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	0013      	movs	r3, r2
 800447c:	2200      	movs	r2, #0
 800447e:	2140      	movs	r1, #64	; 0x40
 8004480:	f000 fcdc 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 8004484:	1e03      	subs	r3, r0, #0
 8004486:	d001      	beq.n	800448c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e006      	b.n	800449a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2284      	movs	r2, #132	; 0x84
 8004490:	2120      	movs	r1, #32
 8004492:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	e000      	b.n	800449a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004498:	2302      	movs	r3, #2
  }
}
 800449a:	0018      	movs	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	b008      	add	sp, #32
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	1dbb      	adds	r3, r7, #6
 80044b2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2288      	movs	r2, #136	; 0x88
 80044b8:	589b      	ldr	r3, [r3, r2]
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d000      	beq.n	80044c0 <HAL_UART_Receive+0x1c>
 80044be:	e0db      	b.n	8004678 <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_UART_Receive+0x2a>
 80044c6:	1dbb      	adds	r3, r7, #6
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e0d3      	b.n	800467a <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	015b      	lsls	r3, r3, #5
 80044da:	429a      	cmp	r2, r3
 80044dc:	d109      	bne.n	80044f2 <HAL_UART_Receive+0x4e>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d105      	bne.n	80044f2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2201      	movs	r2, #1
 80044ea:	4013      	ands	r3, r2
 80044ec:	d001      	beq.n	80044f2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0c3      	b.n	800467a <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2280      	movs	r2, #128	; 0x80
 80044f6:	5c9b      	ldrb	r3, [r3, r2]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_UART_Receive+0x5c>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e0bc      	b.n	800467a <HAL_UART_Receive+0x1d6>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2280      	movs	r2, #128	; 0x80
 8004504:	2101      	movs	r1, #1
 8004506:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	228c      	movs	r2, #140	; 0x8c
 800450c:	2100      	movs	r1, #0
 800450e:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2288      	movs	r2, #136	; 0x88
 8004514:	2122      	movs	r1, #34	; 0x22
 8004516:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451e:	f7fc fe57 	bl	80011d0 <HAL_GetTick>
 8004522:	0003      	movs	r3, r0
 8004524:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1dba      	adds	r2, r7, #6
 800452a:	215c      	movs	r1, #92	; 0x5c
 800452c:	8812      	ldrh	r2, [r2, #0]
 800452e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1dba      	adds	r2, r7, #6
 8004534:	215e      	movs	r1, #94	; 0x5e
 8004536:	8812      	ldrh	r2, [r2, #0]
 8004538:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	015b      	lsls	r3, r3, #5
 8004542:	429a      	cmp	r2, r3
 8004544:	d10d      	bne.n	8004562 <HAL_UART_Receive+0xbe>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d104      	bne.n	8004558 <HAL_UART_Receive+0xb4>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2260      	movs	r2, #96	; 0x60
 8004552:	494c      	ldr	r1, [pc, #304]	; (8004684 <HAL_UART_Receive+0x1e0>)
 8004554:	5299      	strh	r1, [r3, r2]
 8004556:	e02e      	b.n	80045b6 <HAL_UART_Receive+0x112>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2260      	movs	r2, #96	; 0x60
 800455c:	21ff      	movs	r1, #255	; 0xff
 800455e:	5299      	strh	r1, [r3, r2]
 8004560:	e029      	b.n	80045b6 <HAL_UART_Receive+0x112>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10d      	bne.n	8004586 <HAL_UART_Receive+0xe2>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <HAL_UART_Receive+0xd8>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2260      	movs	r2, #96	; 0x60
 8004576:	21ff      	movs	r1, #255	; 0xff
 8004578:	5299      	strh	r1, [r3, r2]
 800457a:	e01c      	b.n	80045b6 <HAL_UART_Receive+0x112>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2260      	movs	r2, #96	; 0x60
 8004580:	217f      	movs	r1, #127	; 0x7f
 8004582:	5299      	strh	r1, [r3, r2]
 8004584:	e017      	b.n	80045b6 <HAL_UART_Receive+0x112>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	055b      	lsls	r3, r3, #21
 800458e:	429a      	cmp	r2, r3
 8004590:	d10d      	bne.n	80045ae <HAL_UART_Receive+0x10a>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <HAL_UART_Receive+0x100>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2260      	movs	r2, #96	; 0x60
 800459e:	217f      	movs	r1, #127	; 0x7f
 80045a0:	5299      	strh	r1, [r3, r2]
 80045a2:	e008      	b.n	80045b6 <HAL_UART_Receive+0x112>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2260      	movs	r2, #96	; 0x60
 80045a8:	213f      	movs	r1, #63	; 0x3f
 80045aa:	5299      	strh	r1, [r3, r2]
 80045ac:	e003      	b.n	80045b6 <HAL_UART_Receive+0x112>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2260      	movs	r2, #96	; 0x60
 80045b2:	2100      	movs	r1, #0
 80045b4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80045b6:	2312      	movs	r3, #18
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	2160      	movs	r1, #96	; 0x60
 80045be:	5a52      	ldrh	r2, [r2, r1]
 80045c0:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	2380      	movs	r3, #128	; 0x80
 80045c8:	015b      	lsls	r3, r3, #5
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d108      	bne.n	80045e0 <HAL_UART_Receive+0x13c>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	e003      	b.n	80045e8 <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2280      	movs	r2, #128	; 0x80
 80045ec:	2100      	movs	r1, #0
 80045ee:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80045f0:	e036      	b.n	8004660 <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	0013      	movs	r3, r2
 80045fc:	2200      	movs	r2, #0
 80045fe:	2120      	movs	r1, #32
 8004600:	f000 fc1c 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d001      	beq.n	800460c <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e036      	b.n	800467a <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10e      	bne.n	8004630 <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	b29b      	uxth	r3, r3
 800461a:	2212      	movs	r2, #18
 800461c:	18ba      	adds	r2, r7, r2
 800461e:	8812      	ldrh	r2, [r2, #0]
 8004620:	4013      	ands	r3, r2
 8004622:	b29a      	uxth	r2, r3
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	3302      	adds	r3, #2
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e00e      	b.n	800464e <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2212      	movs	r2, #18
 800463a:	18ba      	adds	r2, r7, r2
 800463c:	8812      	ldrh	r2, [r2, #0]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	4013      	ands	r3, r2
 8004642:	b2da      	uxtb	r2, r3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	3301      	adds	r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	225e      	movs	r2, #94	; 0x5e
 8004652:	5a9b      	ldrh	r3, [r3, r2]
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b299      	uxth	r1, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	225e      	movs	r2, #94	; 0x5e
 800465e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	225e      	movs	r2, #94	; 0x5e
 8004664:	5a9b      	ldrh	r3, [r3, r2]
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1c2      	bne.n	80045f2 <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2288      	movs	r2, #136	; 0x88
 8004670:	2120      	movs	r1, #32
 8004672:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	0018      	movs	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	b008      	add	sp, #32
 8004680:	bd80      	pop	{r7, pc}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	000001ff 	.word	0x000001ff

08004688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004688:	b5b0      	push	{r4, r5, r7, lr}
 800468a:	b090      	sub	sp, #64	; 0x40
 800468c:	af00      	add	r7, sp, #0
 800468e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004690:	231a      	movs	r3, #26
 8004692:	2220      	movs	r2, #32
 8004694:	4694      	mov	ip, r2
 8004696:	44bc      	add	ip, r7
 8004698:	4463      	add	r3, ip
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	431a      	orrs	r2, r3
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4ab9      	ldr	r2, [pc, #740]	; (80049a4 <UART_SetConfig+0x31c>)
 80046be:	4013      	ands	r3, r2
 80046c0:	0019      	movs	r1, r3
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4ab5      	ldr	r2, [pc, #724]	; (80049a8 <UART_SetConfig+0x320>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	0018      	movs	r0, r3
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	68d9      	ldr	r1, [r3, #12]
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	0003      	movs	r3, r0
 80046e2:	430b      	orrs	r3, r1
 80046e4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4aae      	ldr	r2, [pc, #696]	; (80049ac <UART_SetConfig+0x324>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046fc:	4313      	orrs	r3, r2
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	4aaa      	ldr	r2, [pc, #680]	; (80049b0 <UART_SetConfig+0x328>)
 8004708:	4013      	ands	r3, r2
 800470a:	0019      	movs	r1, r3
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004712:	430b      	orrs	r3, r1
 8004714:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	220f      	movs	r2, #15
 800471e:	4393      	bics	r3, r2
 8004720:	0018      	movs	r0, r3
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	0003      	movs	r3, r0
 800472c:	430b      	orrs	r3, r1
 800472e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a9f      	ldr	r2, [pc, #636]	; (80049b4 <UART_SetConfig+0x32c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d136      	bne.n	80047a8 <UART_SetConfig+0x120>
 800473a:	4b9f      	ldr	r3, [pc, #636]	; (80049b8 <UART_SetConfig+0x330>)
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	2203      	movs	r2, #3
 8004740:	4013      	ands	r3, r2
 8004742:	2b03      	cmp	r3, #3
 8004744:	d020      	beq.n	8004788 <UART_SetConfig+0x100>
 8004746:	d827      	bhi.n	8004798 <UART_SetConfig+0x110>
 8004748:	2b02      	cmp	r3, #2
 800474a:	d00d      	beq.n	8004768 <UART_SetConfig+0xe0>
 800474c:	d824      	bhi.n	8004798 <UART_SetConfig+0x110>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <UART_SetConfig+0xd0>
 8004752:	2b01      	cmp	r3, #1
 8004754:	d010      	beq.n	8004778 <UART_SetConfig+0xf0>
 8004756:	e01f      	b.n	8004798 <UART_SetConfig+0x110>
 8004758:	231b      	movs	r3, #27
 800475a:	2220      	movs	r2, #32
 800475c:	4694      	mov	ip, r2
 800475e:	44bc      	add	ip, r7
 8004760:	4463      	add	r3, ip
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e0c5      	b.n	80048f4 <UART_SetConfig+0x26c>
 8004768:	231b      	movs	r3, #27
 800476a:	2220      	movs	r2, #32
 800476c:	4694      	mov	ip, r2
 800476e:	44bc      	add	ip, r7
 8004770:	4463      	add	r3, ip
 8004772:	2202      	movs	r2, #2
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e0bd      	b.n	80048f4 <UART_SetConfig+0x26c>
 8004778:	231b      	movs	r3, #27
 800477a:	2220      	movs	r2, #32
 800477c:	4694      	mov	ip, r2
 800477e:	44bc      	add	ip, r7
 8004780:	4463      	add	r3, ip
 8004782:	2204      	movs	r2, #4
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e0b5      	b.n	80048f4 <UART_SetConfig+0x26c>
 8004788:	231b      	movs	r3, #27
 800478a:	2220      	movs	r2, #32
 800478c:	4694      	mov	ip, r2
 800478e:	44bc      	add	ip, r7
 8004790:	4463      	add	r3, ip
 8004792:	2208      	movs	r2, #8
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	e0ad      	b.n	80048f4 <UART_SetConfig+0x26c>
 8004798:	231b      	movs	r3, #27
 800479a:	2220      	movs	r2, #32
 800479c:	4694      	mov	ip, r2
 800479e:	44bc      	add	ip, r7
 80047a0:	4463      	add	r3, ip
 80047a2:	2210      	movs	r2, #16
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e0a5      	b.n	80048f4 <UART_SetConfig+0x26c>
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a83      	ldr	r2, [pc, #524]	; (80049bc <UART_SetConfig+0x334>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d136      	bne.n	8004820 <UART_SetConfig+0x198>
 80047b2:	4b81      	ldr	r3, [pc, #516]	; (80049b8 <UART_SetConfig+0x330>)
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	220c      	movs	r2, #12
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	d020      	beq.n	8004800 <UART_SetConfig+0x178>
 80047be:	d827      	bhi.n	8004810 <UART_SetConfig+0x188>
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d00d      	beq.n	80047e0 <UART_SetConfig+0x158>
 80047c4:	d824      	bhi.n	8004810 <UART_SetConfig+0x188>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <UART_SetConfig+0x148>
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d010      	beq.n	80047f0 <UART_SetConfig+0x168>
 80047ce:	e01f      	b.n	8004810 <UART_SetConfig+0x188>
 80047d0:	231b      	movs	r3, #27
 80047d2:	2220      	movs	r2, #32
 80047d4:	4694      	mov	ip, r2
 80047d6:	44bc      	add	ip, r7
 80047d8:	4463      	add	r3, ip
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e089      	b.n	80048f4 <UART_SetConfig+0x26c>
 80047e0:	231b      	movs	r3, #27
 80047e2:	2220      	movs	r2, #32
 80047e4:	4694      	mov	ip, r2
 80047e6:	44bc      	add	ip, r7
 80047e8:	4463      	add	r3, ip
 80047ea:	2202      	movs	r2, #2
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e081      	b.n	80048f4 <UART_SetConfig+0x26c>
 80047f0:	231b      	movs	r3, #27
 80047f2:	2220      	movs	r2, #32
 80047f4:	4694      	mov	ip, r2
 80047f6:	44bc      	add	ip, r7
 80047f8:	4463      	add	r3, ip
 80047fa:	2204      	movs	r2, #4
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e079      	b.n	80048f4 <UART_SetConfig+0x26c>
 8004800:	231b      	movs	r3, #27
 8004802:	2220      	movs	r2, #32
 8004804:	4694      	mov	ip, r2
 8004806:	44bc      	add	ip, r7
 8004808:	4463      	add	r3, ip
 800480a:	2208      	movs	r2, #8
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	e071      	b.n	80048f4 <UART_SetConfig+0x26c>
 8004810:	231b      	movs	r3, #27
 8004812:	2220      	movs	r2, #32
 8004814:	4694      	mov	ip, r2
 8004816:	44bc      	add	ip, r7
 8004818:	4463      	add	r3, ip
 800481a:	2210      	movs	r2, #16
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e069      	b.n	80048f4 <UART_SetConfig+0x26c>
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a66      	ldr	r2, [pc, #408]	; (80049c0 <UART_SetConfig+0x338>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d107      	bne.n	800483a <UART_SetConfig+0x1b2>
 800482a:	231b      	movs	r3, #27
 800482c:	2220      	movs	r2, #32
 800482e:	4694      	mov	ip, r2
 8004830:	44bc      	add	ip, r7
 8004832:	4463      	add	r3, ip
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e05c      	b.n	80048f4 <UART_SetConfig+0x26c>
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a61      	ldr	r2, [pc, #388]	; (80049c4 <UART_SetConfig+0x33c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d107      	bne.n	8004854 <UART_SetConfig+0x1cc>
 8004844:	231b      	movs	r3, #27
 8004846:	2220      	movs	r2, #32
 8004848:	4694      	mov	ip, r2
 800484a:	44bc      	add	ip, r7
 800484c:	4463      	add	r3, ip
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e04f      	b.n	80048f4 <UART_SetConfig+0x26c>
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a54      	ldr	r2, [pc, #336]	; (80049ac <UART_SetConfig+0x324>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d143      	bne.n	80048e6 <UART_SetConfig+0x25e>
 800485e:	4b56      	ldr	r3, [pc, #344]	; (80049b8 <UART_SetConfig+0x330>)
 8004860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004862:	23c0      	movs	r3, #192	; 0xc0
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	4013      	ands	r3, r2
 8004868:	22c0      	movs	r2, #192	; 0xc0
 800486a:	0112      	lsls	r2, r2, #4
 800486c:	4293      	cmp	r3, r2
 800486e:	d02a      	beq.n	80048c6 <UART_SetConfig+0x23e>
 8004870:	22c0      	movs	r2, #192	; 0xc0
 8004872:	0112      	lsls	r2, r2, #4
 8004874:	4293      	cmp	r3, r2
 8004876:	d82e      	bhi.n	80048d6 <UART_SetConfig+0x24e>
 8004878:	2280      	movs	r2, #128	; 0x80
 800487a:	0112      	lsls	r2, r2, #4
 800487c:	4293      	cmp	r3, r2
 800487e:	d012      	beq.n	80048a6 <UART_SetConfig+0x21e>
 8004880:	2280      	movs	r2, #128	; 0x80
 8004882:	0112      	lsls	r2, r2, #4
 8004884:	4293      	cmp	r3, r2
 8004886:	d826      	bhi.n	80048d6 <UART_SetConfig+0x24e>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <UART_SetConfig+0x20e>
 800488c:	2280      	movs	r2, #128	; 0x80
 800488e:	00d2      	lsls	r2, r2, #3
 8004890:	4293      	cmp	r3, r2
 8004892:	d010      	beq.n	80048b6 <UART_SetConfig+0x22e>
 8004894:	e01f      	b.n	80048d6 <UART_SetConfig+0x24e>
 8004896:	231b      	movs	r3, #27
 8004898:	2220      	movs	r2, #32
 800489a:	4694      	mov	ip, r2
 800489c:	44bc      	add	ip, r7
 800489e:	4463      	add	r3, ip
 80048a0:	2200      	movs	r2, #0
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	e026      	b.n	80048f4 <UART_SetConfig+0x26c>
 80048a6:	231b      	movs	r3, #27
 80048a8:	2220      	movs	r2, #32
 80048aa:	4694      	mov	ip, r2
 80048ac:	44bc      	add	ip, r7
 80048ae:	4463      	add	r3, ip
 80048b0:	2202      	movs	r2, #2
 80048b2:	701a      	strb	r2, [r3, #0]
 80048b4:	e01e      	b.n	80048f4 <UART_SetConfig+0x26c>
 80048b6:	231b      	movs	r3, #27
 80048b8:	2220      	movs	r2, #32
 80048ba:	4694      	mov	ip, r2
 80048bc:	44bc      	add	ip, r7
 80048be:	4463      	add	r3, ip
 80048c0:	2204      	movs	r2, #4
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	e016      	b.n	80048f4 <UART_SetConfig+0x26c>
 80048c6:	231b      	movs	r3, #27
 80048c8:	2220      	movs	r2, #32
 80048ca:	4694      	mov	ip, r2
 80048cc:	44bc      	add	ip, r7
 80048ce:	4463      	add	r3, ip
 80048d0:	2208      	movs	r2, #8
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	e00e      	b.n	80048f4 <UART_SetConfig+0x26c>
 80048d6:	231b      	movs	r3, #27
 80048d8:	2220      	movs	r2, #32
 80048da:	4694      	mov	ip, r2
 80048dc:	44bc      	add	ip, r7
 80048de:	4463      	add	r3, ip
 80048e0:	2210      	movs	r2, #16
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e006      	b.n	80048f4 <UART_SetConfig+0x26c>
 80048e6:	231b      	movs	r3, #27
 80048e8:	2220      	movs	r2, #32
 80048ea:	4694      	mov	ip, r2
 80048ec:	44bc      	add	ip, r7
 80048ee:	4463      	add	r3, ip
 80048f0:	2210      	movs	r2, #16
 80048f2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <UART_SetConfig+0x324>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d000      	beq.n	8004900 <UART_SetConfig+0x278>
 80048fe:	e0ad      	b.n	8004a5c <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004900:	231b      	movs	r3, #27
 8004902:	2220      	movs	r2, #32
 8004904:	4694      	mov	ip, r2
 8004906:	44bc      	add	ip, r7
 8004908:	4463      	add	r3, ip
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d015      	beq.n	800493c <UART_SetConfig+0x2b4>
 8004910:	dc18      	bgt.n	8004944 <UART_SetConfig+0x2bc>
 8004912:	2b04      	cmp	r3, #4
 8004914:	d00d      	beq.n	8004932 <UART_SetConfig+0x2aa>
 8004916:	dc15      	bgt.n	8004944 <UART_SetConfig+0x2bc>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <UART_SetConfig+0x29a>
 800491c:	2b02      	cmp	r3, #2
 800491e:	d005      	beq.n	800492c <UART_SetConfig+0x2a4>
 8004920:	e010      	b.n	8004944 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004922:	f7fe fb2d 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8004926:	0003      	movs	r3, r0
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800492a:	e015      	b.n	8004958 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800492c:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <UART_SetConfig+0x340>)
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004930:	e012      	b.n	8004958 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004932:	f7fe fa99 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8004936:	0003      	movs	r3, r0
 8004938:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800493a:	e00d      	b.n	8004958 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004942:	e009      	b.n	8004958 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004948:	231a      	movs	r3, #26
 800494a:	2220      	movs	r2, #32
 800494c:	4694      	mov	ip, r2
 800494e:	44bc      	add	ip, r7
 8004950:	4463      	add	r3, ip
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
        break;
 8004956:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	2b00      	cmp	r3, #0
 800495c:	d100      	bne.n	8004960 <UART_SetConfig+0x2d8>
 800495e:	e153      	b.n	8004c08 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004964:	4b19      	ldr	r3, [pc, #100]	; (80049cc <UART_SetConfig+0x344>)
 8004966:	0052      	lsls	r2, r2, #1
 8004968:	5ad3      	ldrh	r3, [r2, r3]
 800496a:	0019      	movs	r1, r3
 800496c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800496e:	f7fb fbdb 	bl	8000128 <__udivsi3>
 8004972:	0003      	movs	r3, r0
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	0013      	movs	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	189b      	adds	r3, r3, r2
 8004980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004982:	429a      	cmp	r2, r3
 8004984:	d305      	bcc.n	8004992 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800498c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800498e:	429a      	cmp	r2, r3
 8004990:	d91e      	bls.n	80049d0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004992:	231a      	movs	r3, #26
 8004994:	2220      	movs	r2, #32
 8004996:	4694      	mov	ip, r2
 8004998:	44bc      	add	ip, r7
 800499a:	4463      	add	r3, ip
 800499c:	2201      	movs	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e132      	b.n	8004c08 <UART_SetConfig+0x580>
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	cfff69f3 	.word	0xcfff69f3
 80049a8:	ffffcfff 	.word	0xffffcfff
 80049ac:	40008000 	.word	0x40008000
 80049b0:	11fff4ff 	.word	0x11fff4ff
 80049b4:	40013800 	.word	0x40013800
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40004400 	.word	0x40004400
 80049c0:	40004800 	.word	0x40004800
 80049c4:	40004c00 	.word	0x40004c00
 80049c8:	00f42400 	.word	0x00f42400
 80049cc:	08005bf0 	.word	0x08005bf0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	2300      	movs	r3, #0
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049dc:	4b96      	ldr	r3, [pc, #600]	; (8004c38 <UART_SetConfig+0x5b0>)
 80049de:	0052      	lsls	r2, r2, #1
 80049e0:	5ad3      	ldrh	r3, [r2, r3]
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	69b8      	ldr	r0, [r7, #24]
 80049ee:	69f9      	ldr	r1, [r7, #28]
 80049f0:	f7fb fd10 	bl	8000414 <__aeabi_uldivmod>
 80049f4:	0002      	movs	r2, r0
 80049f6:	000b      	movs	r3, r1
 80049f8:	0e11      	lsrs	r1, r2, #24
 80049fa:	021d      	lsls	r5, r3, #8
 80049fc:	430d      	orrs	r5, r1
 80049fe:	0214      	lsls	r4, r2, #8
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68b8      	ldr	r0, [r7, #8]
 8004a0e:	68f9      	ldr	r1, [r7, #12]
 8004a10:	1900      	adds	r0, r0, r4
 8004a12:	4169      	adcs	r1, r5
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f7fb fcf7 	bl	8000414 <__aeabi_uldivmod>
 8004a26:	0002      	movs	r2, r0
 8004a28:	000b      	movs	r3, r1
 8004a2a:	0013      	movs	r3, r2
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a30:	23c0      	movs	r3, #192	; 0xc0
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d309      	bcc.n	8004a4c <UART_SetConfig+0x3c4>
 8004a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	035b      	lsls	r3, r3, #13
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d204      	bcs.n	8004a4c <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e0dd      	b.n	8004c08 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8004a4c:	231a      	movs	r3, #26
 8004a4e:	2220      	movs	r2, #32
 8004a50:	4694      	mov	ip, r2
 8004a52:	44bc      	add	ip, r7
 8004a54:	4463      	add	r3, ip
 8004a56:	2201      	movs	r2, #1
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e0d5      	b.n	8004c08 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	2380      	movs	r3, #128	; 0x80
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d000      	beq.n	8004a6a <UART_SetConfig+0x3e2>
 8004a68:	e073      	b.n	8004b52 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004a6a:	231b      	movs	r3, #27
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	4694      	mov	ip, r2
 8004a70:	44bc      	add	ip, r7
 8004a72:	4463      	add	r3, ip
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d015      	beq.n	8004aa6 <UART_SetConfig+0x41e>
 8004a7a:	dc18      	bgt.n	8004aae <UART_SetConfig+0x426>
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d00d      	beq.n	8004a9c <UART_SetConfig+0x414>
 8004a80:	dc15      	bgt.n	8004aae <UART_SetConfig+0x426>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <UART_SetConfig+0x404>
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d005      	beq.n	8004a96 <UART_SetConfig+0x40e>
 8004a8a:	e010      	b.n	8004aae <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fe fa78 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8004a90:	0003      	movs	r3, r0
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a94:	e015      	b.n	8004ac2 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a96:	4b69      	ldr	r3, [pc, #420]	; (8004c3c <UART_SetConfig+0x5b4>)
 8004a98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a9a:	e012      	b.n	8004ac2 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9c:	f7fe f9e4 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aa4:	e00d      	b.n	8004ac2 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aac:	e009      	b.n	8004ac2 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004ab2:	231a      	movs	r3, #26
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	4694      	mov	ip, r2
 8004ab8:	44bc      	add	ip, r7
 8004aba:	4463      	add	r3, ip
 8004abc:	2201      	movs	r2, #1
 8004abe:	701a      	strb	r2, [r3, #0]
        break;
 8004ac0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d100      	bne.n	8004aca <UART_SetConfig+0x442>
 8004ac8:	e09e      	b.n	8004c08 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ace:	4b5a      	ldr	r3, [pc, #360]	; (8004c38 <UART_SetConfig+0x5b0>)
 8004ad0:	0052      	lsls	r2, r2, #1
 8004ad2:	5ad3      	ldrh	r3, [r2, r3]
 8004ad4:	0019      	movs	r1, r3
 8004ad6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ad8:	f7fb fb26 	bl	8000128 <__udivsi3>
 8004adc:	0003      	movs	r3, r0
 8004ade:	005a      	lsls	r2, r3, #1
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	18d2      	adds	r2, r2, r3
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	0019      	movs	r1, r3
 8004aee:	0010      	movs	r0, r2
 8004af0:	f7fb fb1a 	bl	8000128 <__udivsi3>
 8004af4:	0003      	movs	r3, r0
 8004af6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	2b0f      	cmp	r3, #15
 8004afc:	d921      	bls.n	8004b42 <UART_SetConfig+0x4ba>
 8004afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	025b      	lsls	r3, r3, #9
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d21c      	bcs.n	8004b42 <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	200e      	movs	r0, #14
 8004b0e:	2420      	movs	r4, #32
 8004b10:	193b      	adds	r3, r7, r4
 8004b12:	181b      	adds	r3, r3, r0
 8004b14:	210f      	movs	r1, #15
 8004b16:	438a      	bics	r2, r1
 8004b18:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2207      	movs	r2, #7
 8004b22:	4013      	ands	r3, r2
 8004b24:	b299      	uxth	r1, r3
 8004b26:	193b      	adds	r3, r7, r4
 8004b28:	181b      	adds	r3, r3, r0
 8004b2a:	193a      	adds	r2, r7, r4
 8004b2c:	1812      	adds	r2, r2, r0
 8004b2e:	8812      	ldrh	r2, [r2, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	193a      	adds	r2, r7, r4
 8004b3a:	1812      	adds	r2, r2, r0
 8004b3c:	8812      	ldrh	r2, [r2, #0]
 8004b3e:	60da      	str	r2, [r3, #12]
 8004b40:	e062      	b.n	8004c08 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8004b42:	231a      	movs	r3, #26
 8004b44:	2220      	movs	r2, #32
 8004b46:	4694      	mov	ip, r2
 8004b48:	44bc      	add	ip, r7
 8004b4a:	4463      	add	r3, ip
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	e05a      	b.n	8004c08 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b52:	231b      	movs	r3, #27
 8004b54:	2220      	movs	r2, #32
 8004b56:	4694      	mov	ip, r2
 8004b58:	44bc      	add	ip, r7
 8004b5a:	4463      	add	r3, ip
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d015      	beq.n	8004b8e <UART_SetConfig+0x506>
 8004b62:	dc18      	bgt.n	8004b96 <UART_SetConfig+0x50e>
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d00d      	beq.n	8004b84 <UART_SetConfig+0x4fc>
 8004b68:	dc15      	bgt.n	8004b96 <UART_SetConfig+0x50e>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <UART_SetConfig+0x4ec>
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d005      	beq.n	8004b7e <UART_SetConfig+0x4f6>
 8004b72:	e010      	b.n	8004b96 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b74:	f7fe fa04 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b7c:	e015      	b.n	8004baa <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b7e:	4b2f      	ldr	r3, [pc, #188]	; (8004c3c <UART_SetConfig+0x5b4>)
 8004b80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b82:	e012      	b.n	8004baa <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b84:	f7fe f970 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b8c:	e00d      	b.n	8004baa <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b94:	e009      	b.n	8004baa <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004b9a:	231a      	movs	r3, #26
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	4694      	mov	ip, r2
 8004ba0:	44bc      	add	ip, r7
 8004ba2:	4463      	add	r3, ip
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
        break;
 8004ba8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02b      	beq.n	8004c08 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bb4:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <UART_SetConfig+0x5b0>)
 8004bb6:	0052      	lsls	r2, r2, #1
 8004bb8:	5ad3      	ldrh	r3, [r2, r3]
 8004bba:	0019      	movs	r1, r3
 8004bbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004bbe:	f7fb fab3 	bl	8000128 <__udivsi3>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	18d2      	adds	r2, r2, r3
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	0010      	movs	r0, r2
 8004bd6:	f7fb faa7 	bl	8000128 <__udivsi3>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	2b0f      	cmp	r3, #15
 8004be2:	d90a      	bls.n	8004bfa <UART_SetConfig+0x572>
 8004be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	025b      	lsls	r3, r3, #9
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d205      	bcs.n	8004bfa <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60da      	str	r2, [r3, #12]
 8004bf8:	e006      	b.n	8004c08 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8004bfa:	231a      	movs	r3, #26
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	4694      	mov	ip, r2
 8004c00:	44bc      	add	ip, r7
 8004c02:	4463      	add	r3, ip
 8004c04:	2201      	movs	r2, #1
 8004c06:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	226a      	movs	r2, #106	; 0x6a
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	2268      	movs	r2, #104	; 0x68
 8004c14:	2101      	movs	r1, #1
 8004c16:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	2200      	movs	r2, #0
 8004c22:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004c24:	231a      	movs	r3, #26
 8004c26:	2220      	movs	r2, #32
 8004c28:	4694      	mov	ip, r2
 8004c2a:	44bc      	add	ip, r7
 8004c2c:	4463      	add	r3, ip
 8004c2e:	781b      	ldrb	r3, [r3, #0]
}
 8004c30:	0018      	movs	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b010      	add	sp, #64	; 0x40
 8004c36:	bdb0      	pop	{r4, r5, r7, pc}
 8004c38:	08005bf0 	.word	0x08005bf0
 8004c3c:	00f42400 	.word	0x00f42400

08004c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d00b      	beq.n	8004c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4a4a      	ldr	r2, [pc, #296]	; (8004d84 <UART_AdvFeatureConfig+0x144>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	2202      	movs	r2, #2
 8004c70:	4013      	ands	r3, r2
 8004c72:	d00b      	beq.n	8004c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4a43      	ldr	r2, [pc, #268]	; (8004d88 <UART_AdvFeatureConfig+0x148>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	0019      	movs	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	2204      	movs	r2, #4
 8004c92:	4013      	ands	r3, r2
 8004c94:	d00b      	beq.n	8004cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4a3b      	ldr	r2, [pc, #236]	; (8004d8c <UART_AdvFeatureConfig+0x14c>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	0019      	movs	r1, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d00b      	beq.n	8004cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	4a34      	ldr	r2, [pc, #208]	; (8004d90 <UART_AdvFeatureConfig+0x150>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	0019      	movs	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a2c      	ldr	r2, [pc, #176]	; (8004d94 <UART_AdvFeatureConfig+0x154>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	0019      	movs	r1, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d00b      	beq.n	8004d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	4a25      	ldr	r2, [pc, #148]	; (8004d98 <UART_AdvFeatureConfig+0x158>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	2240      	movs	r2, #64	; 0x40
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d01d      	beq.n	8004d5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <UART_AdvFeatureConfig+0x15c>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	0019      	movs	r1, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3a:	2380      	movs	r3, #128	; 0x80
 8004d3c:	035b      	lsls	r3, r3, #13
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d10b      	bne.n	8004d5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <UART_AdvFeatureConfig+0x160>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	2280      	movs	r2, #128	; 0x80
 8004d60:	4013      	ands	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4a0e      	ldr	r2, [pc, #56]	; (8004da4 <UART_AdvFeatureConfig+0x164>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	0019      	movs	r1, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	605a      	str	r2, [r3, #4]
  }
}
 8004d7c:	46c0      	nop			; (mov r8, r8)
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	b002      	add	sp, #8
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	fffdffff 	.word	0xfffdffff
 8004d88:	fffeffff 	.word	0xfffeffff
 8004d8c:	fffbffff 	.word	0xfffbffff
 8004d90:	ffff7fff 	.word	0xffff7fff
 8004d94:	ffffefff 	.word	0xffffefff
 8004d98:	ffffdfff 	.word	0xffffdfff
 8004d9c:	ffefffff 	.word	0xffefffff
 8004da0:	ff9fffff 	.word	0xff9fffff
 8004da4:	fff7ffff 	.word	0xfff7ffff

08004da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	228c      	movs	r2, #140	; 0x8c
 8004db4:	2100      	movs	r1, #0
 8004db6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004db8:	f7fc fa0a 	bl	80011d0 <HAL_GetTick>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d10c      	bne.n	8004de8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2280      	movs	r2, #128	; 0x80
 8004dd2:	0391      	lsls	r1, r2, #14
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <UART_CheckIdleState+0x90>)
 8004dd8:	9200      	str	r2, [sp, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f000 f82e 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 8004de0:	1e03      	subs	r3, r0, #0
 8004de2:	d001      	beq.n	8004de8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e023      	b.n	8004e30 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2204      	movs	r2, #4
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d10c      	bne.n	8004e10 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2280      	movs	r2, #128	; 0x80
 8004dfa:	03d1      	lsls	r1, r2, #15
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4a0e      	ldr	r2, [pc, #56]	; (8004e38 <UART_CheckIdleState+0x90>)
 8004e00:	9200      	str	r2, [sp, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f000 f81a 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 8004e08:	1e03      	subs	r3, r0, #0
 8004e0a:	d001      	beq.n	8004e10 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e00f      	b.n	8004e30 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2284      	movs	r2, #132	; 0x84
 8004e14:	2120      	movs	r1, #32
 8004e16:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2288      	movs	r2, #136	; 0x88
 8004e1c:	2120      	movs	r1, #32
 8004e1e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2280      	movs	r2, #128	; 0x80
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b004      	add	sp, #16
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	01ffffff 	.word	0x01ffffff

08004e3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b094      	sub	sp, #80	; 0x50
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	1dfb      	adds	r3, r7, #7
 8004e4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4c:	e0a7      	b.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e50:	3301      	adds	r3, #1
 8004e52:	d100      	bne.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004e54:	e0a3      	b.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e56:	f7fc f9bb 	bl	80011d0 <HAL_GetTick>
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d13f      	bne.n	8004eec <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e74:	647b      	str	r3, [r7, #68]	; 0x44
 8004e76:	2301      	movs	r3, #1
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	f383 8810 	msr	PRIMASK, r3
}
 8004e80:	46c0      	nop			; (mov r8, r8)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	494e      	ldr	r1, [pc, #312]	; (8004fc8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004e8e:	400a      	ands	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e94:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	f383 8810 	msr	PRIMASK, r3
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	f383 8810 	msr	PRIMASK, r3
}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	438a      	bics	r2, r1
 8004ec2:	609a      	str	r2, [r3, #8]
 8004ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eca:	f383 8810 	msr	PRIMASK, r3
}
 8004ece:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2284      	movs	r2, #132	; 0x84
 8004ed4:	2120      	movs	r1, #32
 8004ed6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2288      	movs	r2, #136	; 0x88
 8004edc:	2120      	movs	r1, #32
 8004ede:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2280      	movs	r2, #128	; 0x80
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e069      	b.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d052      	beq.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	401a      	ands	r2, r3
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d148      	bne.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2280      	movs	r2, #128	; 0x80
 8004f12:	0112      	lsls	r2, r2, #4
 8004f14:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f16:	f3ef 8310 	mrs	r3, PRIMASK
 8004f1a:	613b      	str	r3, [r7, #16]
  return(result);
 8004f1c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f20:	2301      	movs	r3, #1
 8004f22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f383 8810 	msr	PRIMASK, r3
}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4924      	ldr	r1, [pc, #144]	; (8004fc8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004f38:	400a      	ands	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f383 8810 	msr	PRIMASK, r3
}
 8004f46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f48:	f3ef 8310 	mrs	r3, PRIMASK
 8004f4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f52:	2301      	movs	r3, #1
 8004f54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	f383 8810 	msr	PRIMASK, r3
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2101      	movs	r1, #1
 8004f6a:	438a      	bics	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
 8004f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	f383 8810 	msr	PRIMASK, r3
}
 8004f78:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2284      	movs	r2, #132	; 0x84
 8004f7e:	2120      	movs	r1, #32
 8004f80:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2288      	movs	r2, #136	; 0x88
 8004f86:	2120      	movs	r1, #32
 8004f88:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	228c      	movs	r2, #140	; 0x8c
 8004f8e:	2120      	movs	r1, #32
 8004f90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2280      	movs	r2, #128	; 0x80
 8004f96:	2100      	movs	r1, #0
 8004f98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e010      	b.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	425a      	negs	r2, r3
 8004fae:	4153      	adcs	r3, r2
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	001a      	movs	r2, r3
 8004fb4:	1dfb      	adds	r3, r7, #7
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d100      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x182>
 8004fbc:	e747      	b.n	8004e4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b014      	add	sp, #80	; 0x50
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	fffffe5f 	.word	0xfffffe5f

08004fcc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2280      	movs	r2, #128	; 0x80
 8004fd8:	5c9b      	ldrb	r3, [r3, r2]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UARTEx_DisableFifoMode+0x16>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e027      	b.n	8005032 <HAL_UARTEx_DisableFifoMode+0x66>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2280      	movs	r2, #128	; 0x80
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2284      	movs	r2, #132	; 0x84
 8004fee:	2124      	movs	r1, #36	; 0x24
 8004ff0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2101      	movs	r1, #1
 8005006:	438a      	bics	r2, r1
 8005008:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a0b      	ldr	r2, [pc, #44]	; (800503c <HAL_UARTEx_DisableFifoMode+0x70>)
 800500e:	4013      	ands	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2284      	movs	r2, #132	; 0x84
 8005024:	2120      	movs	r1, #32
 8005026:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2280      	movs	r2, #128	; 0x80
 800502c:	2100      	movs	r1, #0
 800502e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b004      	add	sp, #16
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	dfffffff 	.word	0xdfffffff

08005040 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2280      	movs	r2, #128	; 0x80
 800504e:	5c9b      	ldrb	r3, [r3, r2]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005054:	2302      	movs	r3, #2
 8005056:	e02e      	b.n	80050b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2280      	movs	r2, #128	; 0x80
 800505c:	2101      	movs	r1, #1
 800505e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2284      	movs	r2, #132	; 0x84
 8005064:	2124      	movs	r1, #36	; 0x24
 8005066:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2101      	movs	r1, #1
 800507c:	438a      	bics	r2, r1
 800507e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	08d9      	lsrs	r1, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	0018      	movs	r0, r3
 8005098:	f000 f854 	bl	8005144 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2284      	movs	r2, #132	; 0x84
 80050a8:	2120      	movs	r1, #32
 80050aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2280      	movs	r2, #128	; 0x80
 80050b0:	2100      	movs	r1, #0
 80050b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	0018      	movs	r0, r3
 80050b8:	46bd      	mov	sp, r7
 80050ba:	b004      	add	sp, #16
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2280      	movs	r2, #128	; 0x80
 80050ce:	5c9b      	ldrb	r3, [r3, r2]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e02f      	b.n	8005138 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2280      	movs	r2, #128	; 0x80
 80050dc:	2101      	movs	r1, #1
 80050de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2284      	movs	r2, #132	; 0x84
 80050e4:	2124      	movs	r1, #36	; 0x24
 80050e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2101      	movs	r1, #1
 80050fc:	438a      	bics	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	4a0e      	ldr	r2, [pc, #56]	; (8005140 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005108:	4013      	ands	r3, r2
 800510a:	0019      	movs	r1, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	0018      	movs	r0, r3
 800511a:	f000 f813 	bl	8005144 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2284      	movs	r2, #132	; 0x84
 800512a:	2120      	movs	r1, #32
 800512c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2280      	movs	r2, #128	; 0x80
 8005132:	2100      	movs	r1, #0
 8005134:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	b004      	add	sp, #16
 800513e:	bd80      	pop	{r7, pc}
 8005140:	f1ffffff 	.word	0xf1ffffff

08005144 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005150:	2b00      	cmp	r3, #0
 8005152:	d108      	bne.n	8005166 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	226a      	movs	r2, #106	; 0x6a
 8005158:	2101      	movs	r1, #1
 800515a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2268      	movs	r2, #104	; 0x68
 8005160:	2101      	movs	r1, #1
 8005162:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005164:	e043      	b.n	80051ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005166:	260f      	movs	r6, #15
 8005168:	19bb      	adds	r3, r7, r6
 800516a:	2208      	movs	r2, #8
 800516c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800516e:	200e      	movs	r0, #14
 8005170:	183b      	adds	r3, r7, r0
 8005172:	2208      	movs	r2, #8
 8005174:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	0e5b      	lsrs	r3, r3, #25
 800517e:	b2da      	uxtb	r2, r3
 8005180:	240d      	movs	r4, #13
 8005182:	193b      	adds	r3, r7, r4
 8005184:	2107      	movs	r1, #7
 8005186:	400a      	ands	r2, r1
 8005188:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	0f5b      	lsrs	r3, r3, #29
 8005192:	b2da      	uxtb	r2, r3
 8005194:	250c      	movs	r5, #12
 8005196:	197b      	adds	r3, r7, r5
 8005198:	2107      	movs	r1, #7
 800519a:	400a      	ands	r2, r1
 800519c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800519e:	183b      	adds	r3, r7, r0
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	197a      	adds	r2, r7, r5
 80051a4:	7812      	ldrb	r2, [r2, #0]
 80051a6:	4914      	ldr	r1, [pc, #80]	; (80051f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80051a8:	5c8a      	ldrb	r2, [r1, r2]
 80051aa:	435a      	muls	r2, r3
 80051ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80051ae:	197b      	adds	r3, r7, r5
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	4a12      	ldr	r2, [pc, #72]	; (80051fc <UARTEx_SetNbDataToProcess+0xb8>)
 80051b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051b6:	0019      	movs	r1, r3
 80051b8:	f7fb f840 	bl	800023c <__divsi3>
 80051bc:	0003      	movs	r3, r0
 80051be:	b299      	uxth	r1, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	226a      	movs	r2, #106	; 0x6a
 80051c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051c6:	19bb      	adds	r3, r7, r6
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	193a      	adds	r2, r7, r4
 80051cc:	7812      	ldrb	r2, [r2, #0]
 80051ce:	490a      	ldr	r1, [pc, #40]	; (80051f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80051d0:	5c8a      	ldrb	r2, [r1, r2]
 80051d2:	435a      	muls	r2, r3
 80051d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80051d6:	193b      	adds	r3, r7, r4
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	4a08      	ldr	r2, [pc, #32]	; (80051fc <UARTEx_SetNbDataToProcess+0xb8>)
 80051dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051de:	0019      	movs	r1, r3
 80051e0:	f7fb f82c 	bl	800023c <__divsi3>
 80051e4:	0003      	movs	r3, r0
 80051e6:	b299      	uxth	r1, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2268      	movs	r2, #104	; 0x68
 80051ec:	5299      	strh	r1, [r3, r2]
}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b005      	add	sp, #20
 80051f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	08005c08 	.word	0x08005c08
 80051fc:	08005c10 	.word	0x08005c10

08005200 <__errno>:
 8005200:	4b01      	ldr	r3, [pc, #4]	; (8005208 <__errno+0x8>)
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	4770      	bx	lr
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	20000088 	.word	0x20000088

0800520c <__libc_init_array>:
 800520c:	b570      	push	{r4, r5, r6, lr}
 800520e:	2600      	movs	r6, #0
 8005210:	4d0c      	ldr	r5, [pc, #48]	; (8005244 <__libc_init_array+0x38>)
 8005212:	4c0d      	ldr	r4, [pc, #52]	; (8005248 <__libc_init_array+0x3c>)
 8005214:	1b64      	subs	r4, r4, r5
 8005216:	10a4      	asrs	r4, r4, #2
 8005218:	42a6      	cmp	r6, r4
 800521a:	d109      	bne.n	8005230 <__libc_init_array+0x24>
 800521c:	2600      	movs	r6, #0
 800521e:	f000 fc47 	bl	8005ab0 <_init>
 8005222:	4d0a      	ldr	r5, [pc, #40]	; (800524c <__libc_init_array+0x40>)
 8005224:	4c0a      	ldr	r4, [pc, #40]	; (8005250 <__libc_init_array+0x44>)
 8005226:	1b64      	subs	r4, r4, r5
 8005228:	10a4      	asrs	r4, r4, #2
 800522a:	42a6      	cmp	r6, r4
 800522c:	d105      	bne.n	800523a <__libc_init_array+0x2e>
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	00b3      	lsls	r3, r6, #2
 8005232:	58eb      	ldr	r3, [r5, r3]
 8005234:	4798      	blx	r3
 8005236:	3601      	adds	r6, #1
 8005238:	e7ee      	b.n	8005218 <__libc_init_array+0xc>
 800523a:	00b3      	lsls	r3, r6, #2
 800523c:	58eb      	ldr	r3, [r5, r3]
 800523e:	4798      	blx	r3
 8005240:	3601      	adds	r6, #1
 8005242:	e7f2      	b.n	800522a <__libc_init_array+0x1e>
 8005244:	08005c54 	.word	0x08005c54
 8005248:	08005c54 	.word	0x08005c54
 800524c:	08005c54 	.word	0x08005c54
 8005250:	08005c58 	.word	0x08005c58

08005254 <memset>:
 8005254:	0003      	movs	r3, r0
 8005256:	1882      	adds	r2, r0, r2
 8005258:	4293      	cmp	r3, r2
 800525a:	d100      	bne.n	800525e <memset+0xa>
 800525c:	4770      	bx	lr
 800525e:	7019      	strb	r1, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	e7f9      	b.n	8005258 <memset+0x4>

08005264 <siprintf>:
 8005264:	b40e      	push	{r1, r2, r3}
 8005266:	b500      	push	{lr}
 8005268:	490b      	ldr	r1, [pc, #44]	; (8005298 <siprintf+0x34>)
 800526a:	b09c      	sub	sp, #112	; 0x70
 800526c:	ab1d      	add	r3, sp, #116	; 0x74
 800526e:	9002      	str	r0, [sp, #8]
 8005270:	9006      	str	r0, [sp, #24]
 8005272:	9107      	str	r1, [sp, #28]
 8005274:	9104      	str	r1, [sp, #16]
 8005276:	4809      	ldr	r0, [pc, #36]	; (800529c <siprintf+0x38>)
 8005278:	4909      	ldr	r1, [pc, #36]	; (80052a0 <siprintf+0x3c>)
 800527a:	cb04      	ldmia	r3!, {r2}
 800527c:	9105      	str	r1, [sp, #20]
 800527e:	6800      	ldr	r0, [r0, #0]
 8005280:	a902      	add	r1, sp, #8
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	f000 f870 	bl	8005368 <_svfiprintf_r>
 8005288:	2300      	movs	r3, #0
 800528a:	9a02      	ldr	r2, [sp, #8]
 800528c:	7013      	strb	r3, [r2, #0]
 800528e:	b01c      	add	sp, #112	; 0x70
 8005290:	bc08      	pop	{r3}
 8005292:	b003      	add	sp, #12
 8005294:	4718      	bx	r3
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	7fffffff 	.word	0x7fffffff
 800529c:	20000088 	.word	0x20000088
 80052a0:	ffff0208 	.word	0xffff0208

080052a4 <__ssputs_r>:
 80052a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a6:	688e      	ldr	r6, [r1, #8]
 80052a8:	b085      	sub	sp, #20
 80052aa:	0007      	movs	r7, r0
 80052ac:	000c      	movs	r4, r1
 80052ae:	9203      	str	r2, [sp, #12]
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	429e      	cmp	r6, r3
 80052b4:	d83c      	bhi.n	8005330 <__ssputs_r+0x8c>
 80052b6:	2390      	movs	r3, #144	; 0x90
 80052b8:	898a      	ldrh	r2, [r1, #12]
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	421a      	tst	r2, r3
 80052be:	d034      	beq.n	800532a <__ssputs_r+0x86>
 80052c0:	2503      	movs	r5, #3
 80052c2:	6909      	ldr	r1, [r1, #16]
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	1a5b      	subs	r3, r3, r1
 80052c8:	9302      	str	r3, [sp, #8]
 80052ca:	6963      	ldr	r3, [r4, #20]
 80052cc:	9802      	ldr	r0, [sp, #8]
 80052ce:	435d      	muls	r5, r3
 80052d0:	0feb      	lsrs	r3, r5, #31
 80052d2:	195d      	adds	r5, r3, r5
 80052d4:	9b01      	ldr	r3, [sp, #4]
 80052d6:	106d      	asrs	r5, r5, #1
 80052d8:	3301      	adds	r3, #1
 80052da:	181b      	adds	r3, r3, r0
 80052dc:	42ab      	cmp	r3, r5
 80052de:	d900      	bls.n	80052e2 <__ssputs_r+0x3e>
 80052e0:	001d      	movs	r5, r3
 80052e2:	0553      	lsls	r3, r2, #21
 80052e4:	d532      	bpl.n	800534c <__ssputs_r+0xa8>
 80052e6:	0029      	movs	r1, r5
 80052e8:	0038      	movs	r0, r7
 80052ea:	f000 fb31 	bl	8005950 <_malloc_r>
 80052ee:	1e06      	subs	r6, r0, #0
 80052f0:	d109      	bne.n	8005306 <__ssputs_r+0x62>
 80052f2:	230c      	movs	r3, #12
 80052f4:	603b      	str	r3, [r7, #0]
 80052f6:	2340      	movs	r3, #64	; 0x40
 80052f8:	2001      	movs	r0, #1
 80052fa:	89a2      	ldrh	r2, [r4, #12]
 80052fc:	4240      	negs	r0, r0
 80052fe:	4313      	orrs	r3, r2
 8005300:	81a3      	strh	r3, [r4, #12]
 8005302:	b005      	add	sp, #20
 8005304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005306:	9a02      	ldr	r2, [sp, #8]
 8005308:	6921      	ldr	r1, [r4, #16]
 800530a:	f000 faba 	bl	8005882 <memcpy>
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	4a14      	ldr	r2, [pc, #80]	; (8005364 <__ssputs_r+0xc0>)
 8005312:	401a      	ands	r2, r3
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	4313      	orrs	r3, r2
 8005318:	81a3      	strh	r3, [r4, #12]
 800531a:	9b02      	ldr	r3, [sp, #8]
 800531c:	6126      	str	r6, [r4, #16]
 800531e:	18f6      	adds	r6, r6, r3
 8005320:	6026      	str	r6, [r4, #0]
 8005322:	6165      	str	r5, [r4, #20]
 8005324:	9e01      	ldr	r6, [sp, #4]
 8005326:	1aed      	subs	r5, r5, r3
 8005328:	60a5      	str	r5, [r4, #8]
 800532a:	9b01      	ldr	r3, [sp, #4]
 800532c:	429e      	cmp	r6, r3
 800532e:	d900      	bls.n	8005332 <__ssputs_r+0x8e>
 8005330:	9e01      	ldr	r6, [sp, #4]
 8005332:	0032      	movs	r2, r6
 8005334:	9903      	ldr	r1, [sp, #12]
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	f000 faac 	bl	8005894 <memmove>
 800533c:	68a3      	ldr	r3, [r4, #8]
 800533e:	2000      	movs	r0, #0
 8005340:	1b9b      	subs	r3, r3, r6
 8005342:	60a3      	str	r3, [r4, #8]
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	199e      	adds	r6, r3, r6
 8005348:	6026      	str	r6, [r4, #0]
 800534a:	e7da      	b.n	8005302 <__ssputs_r+0x5e>
 800534c:	002a      	movs	r2, r5
 800534e:	0038      	movs	r0, r7
 8005350:	f000 fb5c 	bl	8005a0c <_realloc_r>
 8005354:	1e06      	subs	r6, r0, #0
 8005356:	d1e0      	bne.n	800531a <__ssputs_r+0x76>
 8005358:	0038      	movs	r0, r7
 800535a:	6921      	ldr	r1, [r4, #16]
 800535c:	f000 faae 	bl	80058bc <_free_r>
 8005360:	e7c7      	b.n	80052f2 <__ssputs_r+0x4e>
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	fffffb7f 	.word	0xfffffb7f

08005368 <_svfiprintf_r>:
 8005368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800536a:	b0a1      	sub	sp, #132	; 0x84
 800536c:	9003      	str	r0, [sp, #12]
 800536e:	001d      	movs	r5, r3
 8005370:	898b      	ldrh	r3, [r1, #12]
 8005372:	000f      	movs	r7, r1
 8005374:	0016      	movs	r6, r2
 8005376:	061b      	lsls	r3, r3, #24
 8005378:	d511      	bpl.n	800539e <_svfiprintf_r+0x36>
 800537a:	690b      	ldr	r3, [r1, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10e      	bne.n	800539e <_svfiprintf_r+0x36>
 8005380:	2140      	movs	r1, #64	; 0x40
 8005382:	f000 fae5 	bl	8005950 <_malloc_r>
 8005386:	6038      	str	r0, [r7, #0]
 8005388:	6138      	str	r0, [r7, #16]
 800538a:	2800      	cmp	r0, #0
 800538c:	d105      	bne.n	800539a <_svfiprintf_r+0x32>
 800538e:	230c      	movs	r3, #12
 8005390:	9a03      	ldr	r2, [sp, #12]
 8005392:	3801      	subs	r0, #1
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	b021      	add	sp, #132	; 0x84
 8005398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800539a:	2340      	movs	r3, #64	; 0x40
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	2300      	movs	r3, #0
 80053a0:	ac08      	add	r4, sp, #32
 80053a2:	6163      	str	r3, [r4, #20]
 80053a4:	3320      	adds	r3, #32
 80053a6:	7663      	strb	r3, [r4, #25]
 80053a8:	3310      	adds	r3, #16
 80053aa:	76a3      	strb	r3, [r4, #26]
 80053ac:	9507      	str	r5, [sp, #28]
 80053ae:	0035      	movs	r5, r6
 80053b0:	782b      	ldrb	r3, [r5, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <_svfiprintf_r+0x52>
 80053b6:	2b25      	cmp	r3, #37	; 0x25
 80053b8:	d147      	bne.n	800544a <_svfiprintf_r+0xe2>
 80053ba:	1bab      	subs	r3, r5, r6
 80053bc:	9305      	str	r3, [sp, #20]
 80053be:	42b5      	cmp	r5, r6
 80053c0:	d00c      	beq.n	80053dc <_svfiprintf_r+0x74>
 80053c2:	0032      	movs	r2, r6
 80053c4:	0039      	movs	r1, r7
 80053c6:	9803      	ldr	r0, [sp, #12]
 80053c8:	f7ff ff6c 	bl	80052a4 <__ssputs_r>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d100      	bne.n	80053d2 <_svfiprintf_r+0x6a>
 80053d0:	e0ae      	b.n	8005530 <_svfiprintf_r+0x1c8>
 80053d2:	6962      	ldr	r2, [r4, #20]
 80053d4:	9b05      	ldr	r3, [sp, #20]
 80053d6:	4694      	mov	ip, r2
 80053d8:	4463      	add	r3, ip
 80053da:	6163      	str	r3, [r4, #20]
 80053dc:	782b      	ldrb	r3, [r5, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d100      	bne.n	80053e4 <_svfiprintf_r+0x7c>
 80053e2:	e0a5      	b.n	8005530 <_svfiprintf_r+0x1c8>
 80053e4:	2201      	movs	r2, #1
 80053e6:	2300      	movs	r3, #0
 80053e8:	4252      	negs	r2, r2
 80053ea:	6062      	str	r2, [r4, #4]
 80053ec:	a904      	add	r1, sp, #16
 80053ee:	3254      	adds	r2, #84	; 0x54
 80053f0:	1852      	adds	r2, r2, r1
 80053f2:	1c6e      	adds	r6, r5, #1
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	60e3      	str	r3, [r4, #12]
 80053f8:	60a3      	str	r3, [r4, #8]
 80053fa:	7013      	strb	r3, [r2, #0]
 80053fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80053fe:	2205      	movs	r2, #5
 8005400:	7831      	ldrb	r1, [r6, #0]
 8005402:	4854      	ldr	r0, [pc, #336]	; (8005554 <_svfiprintf_r+0x1ec>)
 8005404:	f000 fa32 	bl	800586c <memchr>
 8005408:	1c75      	adds	r5, r6, #1
 800540a:	2800      	cmp	r0, #0
 800540c:	d11f      	bne.n	800544e <_svfiprintf_r+0xe6>
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	06d3      	lsls	r3, r2, #27
 8005412:	d504      	bpl.n	800541e <_svfiprintf_r+0xb6>
 8005414:	2353      	movs	r3, #83	; 0x53
 8005416:	a904      	add	r1, sp, #16
 8005418:	185b      	adds	r3, r3, r1
 800541a:	2120      	movs	r1, #32
 800541c:	7019      	strb	r1, [r3, #0]
 800541e:	0713      	lsls	r3, r2, #28
 8005420:	d504      	bpl.n	800542c <_svfiprintf_r+0xc4>
 8005422:	2353      	movs	r3, #83	; 0x53
 8005424:	a904      	add	r1, sp, #16
 8005426:	185b      	adds	r3, r3, r1
 8005428:	212b      	movs	r1, #43	; 0x2b
 800542a:	7019      	strb	r1, [r3, #0]
 800542c:	7833      	ldrb	r3, [r6, #0]
 800542e:	2b2a      	cmp	r3, #42	; 0x2a
 8005430:	d016      	beq.n	8005460 <_svfiprintf_r+0xf8>
 8005432:	0035      	movs	r5, r6
 8005434:	2100      	movs	r1, #0
 8005436:	200a      	movs	r0, #10
 8005438:	68e3      	ldr	r3, [r4, #12]
 800543a:	782a      	ldrb	r2, [r5, #0]
 800543c:	1c6e      	adds	r6, r5, #1
 800543e:	3a30      	subs	r2, #48	; 0x30
 8005440:	2a09      	cmp	r2, #9
 8005442:	d94e      	bls.n	80054e2 <_svfiprintf_r+0x17a>
 8005444:	2900      	cmp	r1, #0
 8005446:	d111      	bne.n	800546c <_svfiprintf_r+0x104>
 8005448:	e017      	b.n	800547a <_svfiprintf_r+0x112>
 800544a:	3501      	adds	r5, #1
 800544c:	e7b0      	b.n	80053b0 <_svfiprintf_r+0x48>
 800544e:	4b41      	ldr	r3, [pc, #260]	; (8005554 <_svfiprintf_r+0x1ec>)
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	1ac0      	subs	r0, r0, r3
 8005454:	2301      	movs	r3, #1
 8005456:	4083      	lsls	r3, r0
 8005458:	4313      	orrs	r3, r2
 800545a:	002e      	movs	r6, r5
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	e7ce      	b.n	80053fe <_svfiprintf_r+0x96>
 8005460:	9b07      	ldr	r3, [sp, #28]
 8005462:	1d19      	adds	r1, r3, #4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	9107      	str	r1, [sp, #28]
 8005468:	2b00      	cmp	r3, #0
 800546a:	db01      	blt.n	8005470 <_svfiprintf_r+0x108>
 800546c:	930b      	str	r3, [sp, #44]	; 0x2c
 800546e:	e004      	b.n	800547a <_svfiprintf_r+0x112>
 8005470:	425b      	negs	r3, r3
 8005472:	60e3      	str	r3, [r4, #12]
 8005474:	2302      	movs	r3, #2
 8005476:	4313      	orrs	r3, r2
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	782b      	ldrb	r3, [r5, #0]
 800547c:	2b2e      	cmp	r3, #46	; 0x2e
 800547e:	d10a      	bne.n	8005496 <_svfiprintf_r+0x12e>
 8005480:	786b      	ldrb	r3, [r5, #1]
 8005482:	2b2a      	cmp	r3, #42	; 0x2a
 8005484:	d135      	bne.n	80054f2 <_svfiprintf_r+0x18a>
 8005486:	9b07      	ldr	r3, [sp, #28]
 8005488:	3502      	adds	r5, #2
 800548a:	1d1a      	adds	r2, r3, #4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	9207      	str	r2, [sp, #28]
 8005490:	2b00      	cmp	r3, #0
 8005492:	db2b      	blt.n	80054ec <_svfiprintf_r+0x184>
 8005494:	9309      	str	r3, [sp, #36]	; 0x24
 8005496:	4e30      	ldr	r6, [pc, #192]	; (8005558 <_svfiprintf_r+0x1f0>)
 8005498:	2203      	movs	r2, #3
 800549a:	0030      	movs	r0, r6
 800549c:	7829      	ldrb	r1, [r5, #0]
 800549e:	f000 f9e5 	bl	800586c <memchr>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d006      	beq.n	80054b4 <_svfiprintf_r+0x14c>
 80054a6:	2340      	movs	r3, #64	; 0x40
 80054a8:	1b80      	subs	r0, r0, r6
 80054aa:	4083      	lsls	r3, r0
 80054ac:	6822      	ldr	r2, [r4, #0]
 80054ae:	3501      	adds	r5, #1
 80054b0:	4313      	orrs	r3, r2
 80054b2:	6023      	str	r3, [r4, #0]
 80054b4:	7829      	ldrb	r1, [r5, #0]
 80054b6:	2206      	movs	r2, #6
 80054b8:	4828      	ldr	r0, [pc, #160]	; (800555c <_svfiprintf_r+0x1f4>)
 80054ba:	1c6e      	adds	r6, r5, #1
 80054bc:	7621      	strb	r1, [r4, #24]
 80054be:	f000 f9d5 	bl	800586c <memchr>
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d03c      	beq.n	8005540 <_svfiprintf_r+0x1d8>
 80054c6:	4b26      	ldr	r3, [pc, #152]	; (8005560 <_svfiprintf_r+0x1f8>)
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d125      	bne.n	8005518 <_svfiprintf_r+0x1b0>
 80054cc:	2207      	movs	r2, #7
 80054ce:	9b07      	ldr	r3, [sp, #28]
 80054d0:	3307      	adds	r3, #7
 80054d2:	4393      	bics	r3, r2
 80054d4:	3308      	adds	r3, #8
 80054d6:	9307      	str	r3, [sp, #28]
 80054d8:	6963      	ldr	r3, [r4, #20]
 80054da:	9a04      	ldr	r2, [sp, #16]
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	6163      	str	r3, [r4, #20]
 80054e0:	e765      	b.n	80053ae <_svfiprintf_r+0x46>
 80054e2:	4343      	muls	r3, r0
 80054e4:	0035      	movs	r5, r6
 80054e6:	2101      	movs	r1, #1
 80054e8:	189b      	adds	r3, r3, r2
 80054ea:	e7a6      	b.n	800543a <_svfiprintf_r+0xd2>
 80054ec:	2301      	movs	r3, #1
 80054ee:	425b      	negs	r3, r3
 80054f0:	e7d0      	b.n	8005494 <_svfiprintf_r+0x12c>
 80054f2:	2300      	movs	r3, #0
 80054f4:	200a      	movs	r0, #10
 80054f6:	001a      	movs	r2, r3
 80054f8:	3501      	adds	r5, #1
 80054fa:	6063      	str	r3, [r4, #4]
 80054fc:	7829      	ldrb	r1, [r5, #0]
 80054fe:	1c6e      	adds	r6, r5, #1
 8005500:	3930      	subs	r1, #48	; 0x30
 8005502:	2909      	cmp	r1, #9
 8005504:	d903      	bls.n	800550e <_svfiprintf_r+0x1a6>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0c5      	beq.n	8005496 <_svfiprintf_r+0x12e>
 800550a:	9209      	str	r2, [sp, #36]	; 0x24
 800550c:	e7c3      	b.n	8005496 <_svfiprintf_r+0x12e>
 800550e:	4342      	muls	r2, r0
 8005510:	0035      	movs	r5, r6
 8005512:	2301      	movs	r3, #1
 8005514:	1852      	adds	r2, r2, r1
 8005516:	e7f1      	b.n	80054fc <_svfiprintf_r+0x194>
 8005518:	ab07      	add	r3, sp, #28
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	003a      	movs	r2, r7
 800551e:	0021      	movs	r1, r4
 8005520:	4b10      	ldr	r3, [pc, #64]	; (8005564 <_svfiprintf_r+0x1fc>)
 8005522:	9803      	ldr	r0, [sp, #12]
 8005524:	e000      	b.n	8005528 <_svfiprintf_r+0x1c0>
 8005526:	bf00      	nop
 8005528:	9004      	str	r0, [sp, #16]
 800552a:	9b04      	ldr	r3, [sp, #16]
 800552c:	3301      	adds	r3, #1
 800552e:	d1d3      	bne.n	80054d8 <_svfiprintf_r+0x170>
 8005530:	89bb      	ldrh	r3, [r7, #12]
 8005532:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005534:	065b      	lsls	r3, r3, #25
 8005536:	d400      	bmi.n	800553a <_svfiprintf_r+0x1d2>
 8005538:	e72d      	b.n	8005396 <_svfiprintf_r+0x2e>
 800553a:	2001      	movs	r0, #1
 800553c:	4240      	negs	r0, r0
 800553e:	e72a      	b.n	8005396 <_svfiprintf_r+0x2e>
 8005540:	ab07      	add	r3, sp, #28
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	003a      	movs	r2, r7
 8005546:	0021      	movs	r1, r4
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <_svfiprintf_r+0x1fc>)
 800554a:	9803      	ldr	r0, [sp, #12]
 800554c:	f000 f87c 	bl	8005648 <_printf_i>
 8005550:	e7ea      	b.n	8005528 <_svfiprintf_r+0x1c0>
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	08005c18 	.word	0x08005c18
 8005558:	08005c1e 	.word	0x08005c1e
 800555c:	08005c22 	.word	0x08005c22
 8005560:	00000000 	.word	0x00000000
 8005564:	080052a5 	.word	0x080052a5

08005568 <_printf_common>:
 8005568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800556a:	0015      	movs	r5, r2
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	688a      	ldr	r2, [r1, #8]
 8005570:	690b      	ldr	r3, [r1, #16]
 8005572:	000c      	movs	r4, r1
 8005574:	9000      	str	r0, [sp, #0]
 8005576:	4293      	cmp	r3, r2
 8005578:	da00      	bge.n	800557c <_printf_common+0x14>
 800557a:	0013      	movs	r3, r2
 800557c:	0022      	movs	r2, r4
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	3243      	adds	r2, #67	; 0x43
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	2a00      	cmp	r2, #0
 8005586:	d001      	beq.n	800558c <_printf_common+0x24>
 8005588:	3301      	adds	r3, #1
 800558a:	602b      	str	r3, [r5, #0]
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	069b      	lsls	r3, r3, #26
 8005590:	d502      	bpl.n	8005598 <_printf_common+0x30>
 8005592:	682b      	ldr	r3, [r5, #0]
 8005594:	3302      	adds	r3, #2
 8005596:	602b      	str	r3, [r5, #0]
 8005598:	6822      	ldr	r2, [r4, #0]
 800559a:	2306      	movs	r3, #6
 800559c:	0017      	movs	r7, r2
 800559e:	401f      	ands	r7, r3
 80055a0:	421a      	tst	r2, r3
 80055a2:	d027      	beq.n	80055f4 <_printf_common+0x8c>
 80055a4:	0023      	movs	r3, r4
 80055a6:	3343      	adds	r3, #67	; 0x43
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	1e5a      	subs	r2, r3, #1
 80055ac:	4193      	sbcs	r3, r2
 80055ae:	6822      	ldr	r2, [r4, #0]
 80055b0:	0692      	lsls	r2, r2, #26
 80055b2:	d430      	bmi.n	8005616 <_printf_common+0xae>
 80055b4:	0022      	movs	r2, r4
 80055b6:	9901      	ldr	r1, [sp, #4]
 80055b8:	9800      	ldr	r0, [sp, #0]
 80055ba:	9e08      	ldr	r6, [sp, #32]
 80055bc:	3243      	adds	r2, #67	; 0x43
 80055be:	47b0      	blx	r6
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d025      	beq.n	8005610 <_printf_common+0xa8>
 80055c4:	2306      	movs	r3, #6
 80055c6:	6820      	ldr	r0, [r4, #0]
 80055c8:	682a      	ldr	r2, [r5, #0]
 80055ca:	68e1      	ldr	r1, [r4, #12]
 80055cc:	2500      	movs	r5, #0
 80055ce:	4003      	ands	r3, r0
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d103      	bne.n	80055dc <_printf_common+0x74>
 80055d4:	1a8d      	subs	r5, r1, r2
 80055d6:	43eb      	mvns	r3, r5
 80055d8:	17db      	asrs	r3, r3, #31
 80055da:	401d      	ands	r5, r3
 80055dc:	68a3      	ldr	r3, [r4, #8]
 80055de:	6922      	ldr	r2, [r4, #16]
 80055e0:	4293      	cmp	r3, r2
 80055e2:	dd01      	ble.n	80055e8 <_printf_common+0x80>
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	18ed      	adds	r5, r5, r3
 80055e8:	2700      	movs	r7, #0
 80055ea:	42bd      	cmp	r5, r7
 80055ec:	d120      	bne.n	8005630 <_printf_common+0xc8>
 80055ee:	2000      	movs	r0, #0
 80055f0:	e010      	b.n	8005614 <_printf_common+0xac>
 80055f2:	3701      	adds	r7, #1
 80055f4:	68e3      	ldr	r3, [r4, #12]
 80055f6:	682a      	ldr	r2, [r5, #0]
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	42bb      	cmp	r3, r7
 80055fc:	ddd2      	ble.n	80055a4 <_printf_common+0x3c>
 80055fe:	0022      	movs	r2, r4
 8005600:	2301      	movs	r3, #1
 8005602:	9901      	ldr	r1, [sp, #4]
 8005604:	9800      	ldr	r0, [sp, #0]
 8005606:	9e08      	ldr	r6, [sp, #32]
 8005608:	3219      	adds	r2, #25
 800560a:	47b0      	blx	r6
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d1f0      	bne.n	80055f2 <_printf_common+0x8a>
 8005610:	2001      	movs	r0, #1
 8005612:	4240      	negs	r0, r0
 8005614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005616:	2030      	movs	r0, #48	; 0x30
 8005618:	18e1      	adds	r1, r4, r3
 800561a:	3143      	adds	r1, #67	; 0x43
 800561c:	7008      	strb	r0, [r1, #0]
 800561e:	0021      	movs	r1, r4
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	3145      	adds	r1, #69	; 0x45
 8005624:	7809      	ldrb	r1, [r1, #0]
 8005626:	18a2      	adds	r2, r4, r2
 8005628:	3243      	adds	r2, #67	; 0x43
 800562a:	3302      	adds	r3, #2
 800562c:	7011      	strb	r1, [r2, #0]
 800562e:	e7c1      	b.n	80055b4 <_printf_common+0x4c>
 8005630:	0022      	movs	r2, r4
 8005632:	2301      	movs	r3, #1
 8005634:	9901      	ldr	r1, [sp, #4]
 8005636:	9800      	ldr	r0, [sp, #0]
 8005638:	9e08      	ldr	r6, [sp, #32]
 800563a:	321a      	adds	r2, #26
 800563c:	47b0      	blx	r6
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	d0e6      	beq.n	8005610 <_printf_common+0xa8>
 8005642:	3701      	adds	r7, #1
 8005644:	e7d1      	b.n	80055ea <_printf_common+0x82>
	...

08005648 <_printf_i>:
 8005648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800564a:	b08b      	sub	sp, #44	; 0x2c
 800564c:	9206      	str	r2, [sp, #24]
 800564e:	000a      	movs	r2, r1
 8005650:	3243      	adds	r2, #67	; 0x43
 8005652:	9307      	str	r3, [sp, #28]
 8005654:	9005      	str	r0, [sp, #20]
 8005656:	9204      	str	r2, [sp, #16]
 8005658:	7e0a      	ldrb	r2, [r1, #24]
 800565a:	000c      	movs	r4, r1
 800565c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800565e:	2a78      	cmp	r2, #120	; 0x78
 8005660:	d806      	bhi.n	8005670 <_printf_i+0x28>
 8005662:	2a62      	cmp	r2, #98	; 0x62
 8005664:	d808      	bhi.n	8005678 <_printf_i+0x30>
 8005666:	2a00      	cmp	r2, #0
 8005668:	d100      	bne.n	800566c <_printf_i+0x24>
 800566a:	e0c0      	b.n	80057ee <_printf_i+0x1a6>
 800566c:	2a58      	cmp	r2, #88	; 0x58
 800566e:	d052      	beq.n	8005716 <_printf_i+0xce>
 8005670:	0026      	movs	r6, r4
 8005672:	3642      	adds	r6, #66	; 0x42
 8005674:	7032      	strb	r2, [r6, #0]
 8005676:	e022      	b.n	80056be <_printf_i+0x76>
 8005678:	0010      	movs	r0, r2
 800567a:	3863      	subs	r0, #99	; 0x63
 800567c:	2815      	cmp	r0, #21
 800567e:	d8f7      	bhi.n	8005670 <_printf_i+0x28>
 8005680:	f7fa fd48 	bl	8000114 <__gnu_thumb1_case_shi>
 8005684:	001f0016 	.word	0x001f0016
 8005688:	fff6fff6 	.word	0xfff6fff6
 800568c:	fff6fff6 	.word	0xfff6fff6
 8005690:	fff6001f 	.word	0xfff6001f
 8005694:	fff6fff6 	.word	0xfff6fff6
 8005698:	00a8fff6 	.word	0x00a8fff6
 800569c:	009a0036 	.word	0x009a0036
 80056a0:	fff6fff6 	.word	0xfff6fff6
 80056a4:	fff600b9 	.word	0xfff600b9
 80056a8:	fff60036 	.word	0xfff60036
 80056ac:	009efff6 	.word	0x009efff6
 80056b0:	0026      	movs	r6, r4
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	3642      	adds	r6, #66	; 0x42
 80056b6:	1d11      	adds	r1, r2, #4
 80056b8:	6019      	str	r1, [r3, #0]
 80056ba:	6813      	ldr	r3, [r2, #0]
 80056bc:	7033      	strb	r3, [r6, #0]
 80056be:	2301      	movs	r3, #1
 80056c0:	e0a7      	b.n	8005812 <_printf_i+0x1ca>
 80056c2:	6808      	ldr	r0, [r1, #0]
 80056c4:	6819      	ldr	r1, [r3, #0]
 80056c6:	1d0a      	adds	r2, r1, #4
 80056c8:	0605      	lsls	r5, r0, #24
 80056ca:	d50b      	bpl.n	80056e4 <_printf_i+0x9c>
 80056cc:	680d      	ldr	r5, [r1, #0]
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	2d00      	cmp	r5, #0
 80056d2:	da03      	bge.n	80056dc <_printf_i+0x94>
 80056d4:	232d      	movs	r3, #45	; 0x2d
 80056d6:	9a04      	ldr	r2, [sp, #16]
 80056d8:	426d      	negs	r5, r5
 80056da:	7013      	strb	r3, [r2, #0]
 80056dc:	4b61      	ldr	r3, [pc, #388]	; (8005864 <_printf_i+0x21c>)
 80056de:	270a      	movs	r7, #10
 80056e0:	9303      	str	r3, [sp, #12]
 80056e2:	e032      	b.n	800574a <_printf_i+0x102>
 80056e4:	680d      	ldr	r5, [r1, #0]
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	0641      	lsls	r1, r0, #25
 80056ea:	d5f1      	bpl.n	80056d0 <_printf_i+0x88>
 80056ec:	b22d      	sxth	r5, r5
 80056ee:	e7ef      	b.n	80056d0 <_printf_i+0x88>
 80056f0:	680d      	ldr	r5, [r1, #0]
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	1d08      	adds	r0, r1, #4
 80056f6:	6018      	str	r0, [r3, #0]
 80056f8:	062e      	lsls	r6, r5, #24
 80056fa:	d501      	bpl.n	8005700 <_printf_i+0xb8>
 80056fc:	680d      	ldr	r5, [r1, #0]
 80056fe:	e003      	b.n	8005708 <_printf_i+0xc0>
 8005700:	066d      	lsls	r5, r5, #25
 8005702:	d5fb      	bpl.n	80056fc <_printf_i+0xb4>
 8005704:	680d      	ldr	r5, [r1, #0]
 8005706:	b2ad      	uxth	r5, r5
 8005708:	4b56      	ldr	r3, [pc, #344]	; (8005864 <_printf_i+0x21c>)
 800570a:	270a      	movs	r7, #10
 800570c:	9303      	str	r3, [sp, #12]
 800570e:	2a6f      	cmp	r2, #111	; 0x6f
 8005710:	d117      	bne.n	8005742 <_printf_i+0xfa>
 8005712:	2708      	movs	r7, #8
 8005714:	e015      	b.n	8005742 <_printf_i+0xfa>
 8005716:	3145      	adds	r1, #69	; 0x45
 8005718:	700a      	strb	r2, [r1, #0]
 800571a:	4a52      	ldr	r2, [pc, #328]	; (8005864 <_printf_i+0x21c>)
 800571c:	9203      	str	r2, [sp, #12]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	6821      	ldr	r1, [r4, #0]
 8005722:	ca20      	ldmia	r2!, {r5}
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	0608      	lsls	r0, r1, #24
 8005728:	d550      	bpl.n	80057cc <_printf_i+0x184>
 800572a:	07cb      	lsls	r3, r1, #31
 800572c:	d502      	bpl.n	8005734 <_printf_i+0xec>
 800572e:	2320      	movs	r3, #32
 8005730:	4319      	orrs	r1, r3
 8005732:	6021      	str	r1, [r4, #0]
 8005734:	2710      	movs	r7, #16
 8005736:	2d00      	cmp	r5, #0
 8005738:	d103      	bne.n	8005742 <_printf_i+0xfa>
 800573a:	2320      	movs	r3, #32
 800573c:	6822      	ldr	r2, [r4, #0]
 800573e:	439a      	bics	r2, r3
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	0023      	movs	r3, r4
 8005744:	2200      	movs	r2, #0
 8005746:	3343      	adds	r3, #67	; 0x43
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	6863      	ldr	r3, [r4, #4]
 800574c:	60a3      	str	r3, [r4, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	db03      	blt.n	800575a <_printf_i+0x112>
 8005752:	2204      	movs	r2, #4
 8005754:	6821      	ldr	r1, [r4, #0]
 8005756:	4391      	bics	r1, r2
 8005758:	6021      	str	r1, [r4, #0]
 800575a:	2d00      	cmp	r5, #0
 800575c:	d102      	bne.n	8005764 <_printf_i+0x11c>
 800575e:	9e04      	ldr	r6, [sp, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00c      	beq.n	800577e <_printf_i+0x136>
 8005764:	9e04      	ldr	r6, [sp, #16]
 8005766:	0028      	movs	r0, r5
 8005768:	0039      	movs	r1, r7
 800576a:	f7fa fd63 	bl	8000234 <__aeabi_uidivmod>
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	3e01      	subs	r6, #1
 8005772:	5c5b      	ldrb	r3, [r3, r1]
 8005774:	7033      	strb	r3, [r6, #0]
 8005776:	002b      	movs	r3, r5
 8005778:	0005      	movs	r5, r0
 800577a:	429f      	cmp	r7, r3
 800577c:	d9f3      	bls.n	8005766 <_printf_i+0x11e>
 800577e:	2f08      	cmp	r7, #8
 8005780:	d109      	bne.n	8005796 <_printf_i+0x14e>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	07db      	lsls	r3, r3, #31
 8005786:	d506      	bpl.n	8005796 <_printf_i+0x14e>
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	6922      	ldr	r2, [r4, #16]
 800578c:	4293      	cmp	r3, r2
 800578e:	dc02      	bgt.n	8005796 <_printf_i+0x14e>
 8005790:	2330      	movs	r3, #48	; 0x30
 8005792:	3e01      	subs	r6, #1
 8005794:	7033      	strb	r3, [r6, #0]
 8005796:	9b04      	ldr	r3, [sp, #16]
 8005798:	1b9b      	subs	r3, r3, r6
 800579a:	6123      	str	r3, [r4, #16]
 800579c:	9b07      	ldr	r3, [sp, #28]
 800579e:	0021      	movs	r1, r4
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	9805      	ldr	r0, [sp, #20]
 80057a4:	9b06      	ldr	r3, [sp, #24]
 80057a6:	aa09      	add	r2, sp, #36	; 0x24
 80057a8:	f7ff fede 	bl	8005568 <_printf_common>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d135      	bne.n	800581c <_printf_i+0x1d4>
 80057b0:	2001      	movs	r0, #1
 80057b2:	4240      	negs	r0, r0
 80057b4:	b00b      	add	sp, #44	; 0x2c
 80057b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b8:	2220      	movs	r2, #32
 80057ba:	6809      	ldr	r1, [r1, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	6022      	str	r2, [r4, #0]
 80057c0:	0022      	movs	r2, r4
 80057c2:	2178      	movs	r1, #120	; 0x78
 80057c4:	3245      	adds	r2, #69	; 0x45
 80057c6:	7011      	strb	r1, [r2, #0]
 80057c8:	4a27      	ldr	r2, [pc, #156]	; (8005868 <_printf_i+0x220>)
 80057ca:	e7a7      	b.n	800571c <_printf_i+0xd4>
 80057cc:	0648      	lsls	r0, r1, #25
 80057ce:	d5ac      	bpl.n	800572a <_printf_i+0xe2>
 80057d0:	b2ad      	uxth	r5, r5
 80057d2:	e7aa      	b.n	800572a <_printf_i+0xe2>
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	680d      	ldr	r5, [r1, #0]
 80057d8:	1d10      	adds	r0, r2, #4
 80057da:	6949      	ldr	r1, [r1, #20]
 80057dc:	6018      	str	r0, [r3, #0]
 80057de:	6813      	ldr	r3, [r2, #0]
 80057e0:	062e      	lsls	r6, r5, #24
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0x1a0>
 80057e4:	6019      	str	r1, [r3, #0]
 80057e6:	e002      	b.n	80057ee <_printf_i+0x1a6>
 80057e8:	066d      	lsls	r5, r5, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0x19c>
 80057ec:	8019      	strh	r1, [r3, #0]
 80057ee:	2300      	movs	r3, #0
 80057f0:	9e04      	ldr	r6, [sp, #16]
 80057f2:	6123      	str	r3, [r4, #16]
 80057f4:	e7d2      	b.n	800579c <_printf_i+0x154>
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	1d11      	adds	r1, r2, #4
 80057fa:	6019      	str	r1, [r3, #0]
 80057fc:	6816      	ldr	r6, [r2, #0]
 80057fe:	2100      	movs	r1, #0
 8005800:	0030      	movs	r0, r6
 8005802:	6862      	ldr	r2, [r4, #4]
 8005804:	f000 f832 	bl	800586c <memchr>
 8005808:	2800      	cmp	r0, #0
 800580a:	d001      	beq.n	8005810 <_printf_i+0x1c8>
 800580c:	1b80      	subs	r0, r0, r6
 800580e:	6060      	str	r0, [r4, #4]
 8005810:	6863      	ldr	r3, [r4, #4]
 8005812:	6123      	str	r3, [r4, #16]
 8005814:	2300      	movs	r3, #0
 8005816:	9a04      	ldr	r2, [sp, #16]
 8005818:	7013      	strb	r3, [r2, #0]
 800581a:	e7bf      	b.n	800579c <_printf_i+0x154>
 800581c:	6923      	ldr	r3, [r4, #16]
 800581e:	0032      	movs	r2, r6
 8005820:	9906      	ldr	r1, [sp, #24]
 8005822:	9805      	ldr	r0, [sp, #20]
 8005824:	9d07      	ldr	r5, [sp, #28]
 8005826:	47a8      	blx	r5
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d0c1      	beq.n	80057b0 <_printf_i+0x168>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	079b      	lsls	r3, r3, #30
 8005830:	d415      	bmi.n	800585e <_printf_i+0x216>
 8005832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005834:	68e0      	ldr	r0, [r4, #12]
 8005836:	4298      	cmp	r0, r3
 8005838:	dabc      	bge.n	80057b4 <_printf_i+0x16c>
 800583a:	0018      	movs	r0, r3
 800583c:	e7ba      	b.n	80057b4 <_printf_i+0x16c>
 800583e:	0022      	movs	r2, r4
 8005840:	2301      	movs	r3, #1
 8005842:	9906      	ldr	r1, [sp, #24]
 8005844:	9805      	ldr	r0, [sp, #20]
 8005846:	9e07      	ldr	r6, [sp, #28]
 8005848:	3219      	adds	r2, #25
 800584a:	47b0      	blx	r6
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d0af      	beq.n	80057b0 <_printf_i+0x168>
 8005850:	3501      	adds	r5, #1
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	42ab      	cmp	r3, r5
 800585a:	dcf0      	bgt.n	800583e <_printf_i+0x1f6>
 800585c:	e7e9      	b.n	8005832 <_printf_i+0x1ea>
 800585e:	2500      	movs	r5, #0
 8005860:	e7f7      	b.n	8005852 <_printf_i+0x20a>
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	08005c29 	.word	0x08005c29
 8005868:	08005c3a 	.word	0x08005c3a

0800586c <memchr>:
 800586c:	b2c9      	uxtb	r1, r1
 800586e:	1882      	adds	r2, r0, r2
 8005870:	4290      	cmp	r0, r2
 8005872:	d101      	bne.n	8005878 <memchr+0xc>
 8005874:	2000      	movs	r0, #0
 8005876:	4770      	bx	lr
 8005878:	7803      	ldrb	r3, [r0, #0]
 800587a:	428b      	cmp	r3, r1
 800587c:	d0fb      	beq.n	8005876 <memchr+0xa>
 800587e:	3001      	adds	r0, #1
 8005880:	e7f6      	b.n	8005870 <memchr+0x4>

08005882 <memcpy>:
 8005882:	2300      	movs	r3, #0
 8005884:	b510      	push	{r4, lr}
 8005886:	429a      	cmp	r2, r3
 8005888:	d100      	bne.n	800588c <memcpy+0xa>
 800588a:	bd10      	pop	{r4, pc}
 800588c:	5ccc      	ldrb	r4, [r1, r3]
 800588e:	54c4      	strb	r4, [r0, r3]
 8005890:	3301      	adds	r3, #1
 8005892:	e7f8      	b.n	8005886 <memcpy+0x4>

08005894 <memmove>:
 8005894:	b510      	push	{r4, lr}
 8005896:	4288      	cmp	r0, r1
 8005898:	d902      	bls.n	80058a0 <memmove+0xc>
 800589a:	188b      	adds	r3, r1, r2
 800589c:	4298      	cmp	r0, r3
 800589e:	d303      	bcc.n	80058a8 <memmove+0x14>
 80058a0:	2300      	movs	r3, #0
 80058a2:	e007      	b.n	80058b4 <memmove+0x20>
 80058a4:	5c8b      	ldrb	r3, [r1, r2]
 80058a6:	5483      	strb	r3, [r0, r2]
 80058a8:	3a01      	subs	r2, #1
 80058aa:	d2fb      	bcs.n	80058a4 <memmove+0x10>
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	5ccc      	ldrb	r4, [r1, r3]
 80058b0:	54c4      	strb	r4, [r0, r3]
 80058b2:	3301      	adds	r3, #1
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d1fa      	bne.n	80058ae <memmove+0x1a>
 80058b8:	e7f8      	b.n	80058ac <memmove+0x18>
	...

080058bc <_free_r>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	0005      	movs	r5, r0
 80058c0:	2900      	cmp	r1, #0
 80058c2:	d010      	beq.n	80058e6 <_free_r+0x2a>
 80058c4:	1f0c      	subs	r4, r1, #4
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	da00      	bge.n	80058ce <_free_r+0x12>
 80058cc:	18e4      	adds	r4, r4, r3
 80058ce:	0028      	movs	r0, r5
 80058d0:	f000 f8d4 	bl	8005a7c <__malloc_lock>
 80058d4:	4a1d      	ldr	r2, [pc, #116]	; (800594c <_free_r+0x90>)
 80058d6:	6813      	ldr	r3, [r2, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <_free_r+0x2c>
 80058dc:	6063      	str	r3, [r4, #4]
 80058de:	6014      	str	r4, [r2, #0]
 80058e0:	0028      	movs	r0, r5
 80058e2:	f000 f8d3 	bl	8005a8c <__malloc_unlock>
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	d908      	bls.n	80058fe <_free_r+0x42>
 80058ec:	6821      	ldr	r1, [r4, #0]
 80058ee:	1860      	adds	r0, r4, r1
 80058f0:	4283      	cmp	r3, r0
 80058f2:	d1f3      	bne.n	80058dc <_free_r+0x20>
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	1841      	adds	r1, r0, r1
 80058fa:	6021      	str	r1, [r4, #0]
 80058fc:	e7ee      	b.n	80058dc <_free_r+0x20>
 80058fe:	001a      	movs	r2, r3
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <_free_r+0x4e>
 8005906:	42a3      	cmp	r3, r4
 8005908:	d9f9      	bls.n	80058fe <_free_r+0x42>
 800590a:	6811      	ldr	r1, [r2, #0]
 800590c:	1850      	adds	r0, r2, r1
 800590e:	42a0      	cmp	r0, r4
 8005910:	d10b      	bne.n	800592a <_free_r+0x6e>
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	1809      	adds	r1, r1, r0
 8005916:	1850      	adds	r0, r2, r1
 8005918:	6011      	str	r1, [r2, #0]
 800591a:	4283      	cmp	r3, r0
 800591c:	d1e0      	bne.n	80058e0 <_free_r+0x24>
 800591e:	6818      	ldr	r0, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	1841      	adds	r1, r0, r1
 8005924:	6011      	str	r1, [r2, #0]
 8005926:	6053      	str	r3, [r2, #4]
 8005928:	e7da      	b.n	80058e0 <_free_r+0x24>
 800592a:	42a0      	cmp	r0, r4
 800592c:	d902      	bls.n	8005934 <_free_r+0x78>
 800592e:	230c      	movs	r3, #12
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	e7d5      	b.n	80058e0 <_free_r+0x24>
 8005934:	6821      	ldr	r1, [r4, #0]
 8005936:	1860      	adds	r0, r4, r1
 8005938:	4283      	cmp	r3, r0
 800593a:	d103      	bne.n	8005944 <_free_r+0x88>
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	1841      	adds	r1, r0, r1
 8005942:	6021      	str	r1, [r4, #0]
 8005944:	6063      	str	r3, [r4, #4]
 8005946:	6054      	str	r4, [r2, #4]
 8005948:	e7ca      	b.n	80058e0 <_free_r+0x24>
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	2000011c 	.word	0x2000011c

08005950 <_malloc_r>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	2303      	movs	r3, #3
 8005954:	1ccd      	adds	r5, r1, #3
 8005956:	439d      	bics	r5, r3
 8005958:	3508      	adds	r5, #8
 800595a:	0006      	movs	r6, r0
 800595c:	2d0c      	cmp	r5, #12
 800595e:	d21f      	bcs.n	80059a0 <_malloc_r+0x50>
 8005960:	250c      	movs	r5, #12
 8005962:	42a9      	cmp	r1, r5
 8005964:	d81e      	bhi.n	80059a4 <_malloc_r+0x54>
 8005966:	0030      	movs	r0, r6
 8005968:	f000 f888 	bl	8005a7c <__malloc_lock>
 800596c:	4925      	ldr	r1, [pc, #148]	; (8005a04 <_malloc_r+0xb4>)
 800596e:	680a      	ldr	r2, [r1, #0]
 8005970:	0014      	movs	r4, r2
 8005972:	2c00      	cmp	r4, #0
 8005974:	d11a      	bne.n	80059ac <_malloc_r+0x5c>
 8005976:	4f24      	ldr	r7, [pc, #144]	; (8005a08 <_malloc_r+0xb8>)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <_malloc_r+0x38>
 800597e:	0021      	movs	r1, r4
 8005980:	0030      	movs	r0, r6
 8005982:	f000 f869 	bl	8005a58 <_sbrk_r>
 8005986:	6038      	str	r0, [r7, #0]
 8005988:	0029      	movs	r1, r5
 800598a:	0030      	movs	r0, r6
 800598c:	f000 f864 	bl	8005a58 <_sbrk_r>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d12b      	bne.n	80059ec <_malloc_r+0x9c>
 8005994:	230c      	movs	r3, #12
 8005996:	0030      	movs	r0, r6
 8005998:	6033      	str	r3, [r6, #0]
 800599a:	f000 f877 	bl	8005a8c <__malloc_unlock>
 800599e:	e003      	b.n	80059a8 <_malloc_r+0x58>
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	dade      	bge.n	8005962 <_malloc_r+0x12>
 80059a4:	230c      	movs	r3, #12
 80059a6:	6033      	str	r3, [r6, #0]
 80059a8:	2000      	movs	r0, #0
 80059aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	1b5b      	subs	r3, r3, r5
 80059b0:	d419      	bmi.n	80059e6 <_malloc_r+0x96>
 80059b2:	2b0b      	cmp	r3, #11
 80059b4:	d903      	bls.n	80059be <_malloc_r+0x6e>
 80059b6:	6023      	str	r3, [r4, #0]
 80059b8:	18e4      	adds	r4, r4, r3
 80059ba:	6025      	str	r5, [r4, #0]
 80059bc:	e003      	b.n	80059c6 <_malloc_r+0x76>
 80059be:	6863      	ldr	r3, [r4, #4]
 80059c0:	42a2      	cmp	r2, r4
 80059c2:	d10e      	bne.n	80059e2 <_malloc_r+0x92>
 80059c4:	600b      	str	r3, [r1, #0]
 80059c6:	0030      	movs	r0, r6
 80059c8:	f000 f860 	bl	8005a8c <__malloc_unlock>
 80059cc:	0020      	movs	r0, r4
 80059ce:	2207      	movs	r2, #7
 80059d0:	300b      	adds	r0, #11
 80059d2:	1d23      	adds	r3, r4, #4
 80059d4:	4390      	bics	r0, r2
 80059d6:	1ac2      	subs	r2, r0, r3
 80059d8:	4298      	cmp	r0, r3
 80059da:	d0e6      	beq.n	80059aa <_malloc_r+0x5a>
 80059dc:	1a1b      	subs	r3, r3, r0
 80059de:	50a3      	str	r3, [r4, r2]
 80059e0:	e7e3      	b.n	80059aa <_malloc_r+0x5a>
 80059e2:	6053      	str	r3, [r2, #4]
 80059e4:	e7ef      	b.n	80059c6 <_malloc_r+0x76>
 80059e6:	0022      	movs	r2, r4
 80059e8:	6864      	ldr	r4, [r4, #4]
 80059ea:	e7c2      	b.n	8005972 <_malloc_r+0x22>
 80059ec:	2303      	movs	r3, #3
 80059ee:	1cc4      	adds	r4, r0, #3
 80059f0:	439c      	bics	r4, r3
 80059f2:	42a0      	cmp	r0, r4
 80059f4:	d0e1      	beq.n	80059ba <_malloc_r+0x6a>
 80059f6:	1a21      	subs	r1, r4, r0
 80059f8:	0030      	movs	r0, r6
 80059fa:	f000 f82d 	bl	8005a58 <_sbrk_r>
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	d1db      	bne.n	80059ba <_malloc_r+0x6a>
 8005a02:	e7c7      	b.n	8005994 <_malloc_r+0x44>
 8005a04:	2000011c 	.word	0x2000011c
 8005a08:	20000120 	.word	0x20000120

08005a0c <_realloc_r>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	0007      	movs	r7, r0
 8005a10:	000d      	movs	r5, r1
 8005a12:	0016      	movs	r6, r2
 8005a14:	2900      	cmp	r1, #0
 8005a16:	d105      	bne.n	8005a24 <_realloc_r+0x18>
 8005a18:	0011      	movs	r1, r2
 8005a1a:	f7ff ff99 	bl	8005950 <_malloc_r>
 8005a1e:	0004      	movs	r4, r0
 8005a20:	0020      	movs	r0, r4
 8005a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a24:	2a00      	cmp	r2, #0
 8005a26:	d103      	bne.n	8005a30 <_realloc_r+0x24>
 8005a28:	f7ff ff48 	bl	80058bc <_free_r>
 8005a2c:	0034      	movs	r4, r6
 8005a2e:	e7f7      	b.n	8005a20 <_realloc_r+0x14>
 8005a30:	f000 f834 	bl	8005a9c <_malloc_usable_size_r>
 8005a34:	002c      	movs	r4, r5
 8005a36:	42b0      	cmp	r0, r6
 8005a38:	d2f2      	bcs.n	8005a20 <_realloc_r+0x14>
 8005a3a:	0031      	movs	r1, r6
 8005a3c:	0038      	movs	r0, r7
 8005a3e:	f7ff ff87 	bl	8005950 <_malloc_r>
 8005a42:	1e04      	subs	r4, r0, #0
 8005a44:	d0ec      	beq.n	8005a20 <_realloc_r+0x14>
 8005a46:	0029      	movs	r1, r5
 8005a48:	0032      	movs	r2, r6
 8005a4a:	f7ff ff1a 	bl	8005882 <memcpy>
 8005a4e:	0029      	movs	r1, r5
 8005a50:	0038      	movs	r0, r7
 8005a52:	f7ff ff33 	bl	80058bc <_free_r>
 8005a56:	e7e3      	b.n	8005a20 <_realloc_r+0x14>

08005a58 <_sbrk_r>:
 8005a58:	2300      	movs	r3, #0
 8005a5a:	b570      	push	{r4, r5, r6, lr}
 8005a5c:	4d06      	ldr	r5, [pc, #24]	; (8005a78 <_sbrk_r+0x20>)
 8005a5e:	0004      	movs	r4, r0
 8005a60:	0008      	movs	r0, r1
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	f7fb fad2 	bl	800100c <_sbrk>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	d103      	bne.n	8005a74 <_sbrk_r+0x1c>
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d000      	beq.n	8005a74 <_sbrk_r+0x1c>
 8005a72:	6023      	str	r3, [r4, #0]
 8005a74:	bd70      	pop	{r4, r5, r6, pc}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	20000288 	.word	0x20000288

08005a7c <__malloc_lock>:
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	4802      	ldr	r0, [pc, #8]	; (8005a88 <__malloc_lock+0xc>)
 8005a80:	f000 f814 	bl	8005aac <__retarget_lock_acquire_recursive>
 8005a84:	bd10      	pop	{r4, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	20000290 	.word	0x20000290

08005a8c <__malloc_unlock>:
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	4802      	ldr	r0, [pc, #8]	; (8005a98 <__malloc_unlock+0xc>)
 8005a90:	f000 f80d 	bl	8005aae <__retarget_lock_release_recursive>
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	20000290 	.word	0x20000290

08005a9c <_malloc_usable_size_r>:
 8005a9c:	1f0b      	subs	r3, r1, #4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	1f18      	subs	r0, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	da01      	bge.n	8005aaa <_malloc_usable_size_r+0xe>
 8005aa6:	580b      	ldr	r3, [r1, r0]
 8005aa8:	18c0      	adds	r0, r0, r3
 8005aaa:	4770      	bx	lr

08005aac <__retarget_lock_acquire_recursive>:
 8005aac:	4770      	bx	lr

08005aae <__retarget_lock_release_recursive>:
 8005aae:	4770      	bx	lr

08005ab0 <_init>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr

08005abc <_fini>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac2:	bc08      	pop	{r3}
 8005ac4:	469e      	mov	lr, r3
 8005ac6:	4770      	bx	lr
