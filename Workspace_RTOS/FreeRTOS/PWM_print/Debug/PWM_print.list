
PWM_print.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e8  080047e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f0  080047f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000070  08004868  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004868  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ace  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c8  00000000  00000000  00032b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00034d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00035b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dde  00000000  00000000  00036808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a29  00000000  00000000  0004f5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a15fe  00000000  00000000  0006000f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010160d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ac  00000000  00000000  00101660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800469c 	.word	0x0800469c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800469c 	.word	0x0800469c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	1c08      	adds	r0, r1, #0
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fb72 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f888 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f986 	bl	800095c <MX_GPIO_Init>
  MX_TIM14_Init();
 8000650:	f000 f8e4 	bl	800081c <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f934 	bl	80008c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim14, TIM_CHANNEL_1);
 8000658:	4b32      	ldr	r3, [pc, #200]	; (8000724 <main+0xe4>)
 800065a:	2100      	movs	r1, #0
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fdfd 	bl	800225c <HAL_TIM_PWM_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_Delay(1);
	  input = HAL_GPIO_ReadPin(high_pulse_count_GPIO_Port,	high_pulse_count_Pin);
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	4a30      	ldr	r2, [pc, #192]	; (8000728 <main+0xe8>)
 8000668:	0019      	movs	r1, r3
 800066a:	0010      	movs	r0, r2
 800066c:	f000 fe3c 	bl	80012e8 <HAL_GPIO_ReadPin>
 8000670:	0003      	movs	r3, r0
 8000672:	001a      	movs	r2, r3
 8000674:	4b2d      	ldr	r3, [pc, #180]	; (800072c <main+0xec>)
 8000676:	601a      	str	r2, [r3, #0]
	  count1_pin_input = HAL_GPIO_ReadPin(count1_GPIO_Port, count1_Pin);
 8000678:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <main+0xf0>)
 800067a:	2120      	movs	r1, #32
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fe33 	bl	80012e8 <HAL_GPIO_ReadPin>
 8000682:	0003      	movs	r3, r0
 8000684:	001a      	movs	r2, r3
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <main+0xf4>)
 8000688:	601a      	str	r2, [r3, #0]

//	  input = HAL_GPIO_ReadPin(high_pulse_count_GPIO_Port,	high_pulse_count_Pin);
//	  sprintf(msg,"CS=%d\r\n",input);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//
	  curr_state = input;
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <main+0xec>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <main+0xf8>)
 8000690:	601a      	str	r2, [r3, #0]

	  if(prev_state == 1 && curr_state == 0)
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <main+0xfc>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d10c      	bne.n	80006b4 <main+0x74>
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <main+0xf8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d108      	bne.n	80006b4 <main+0x74>
	  {
//		  if(count1_pin_input == 1)
//		  {
//			  High_pulse_count++;
//		  }
		  High_pulse_count++;
 80006a2:	4b27      	ldr	r3, [pc, #156]	; (8000740 <main+0x100>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <main+0x100>)
 80006aa:	601a      	str	r2, [r3, #0]
		  prev_state = input;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <main+0xec>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <main+0xfc>)
 80006b2:	601a      	str	r2, [r3, #0]

	  }
	  if(prev_state == 0 && curr_state == 1)
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <main+0xfc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d10c      	bne.n	80006d6 <main+0x96>
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <main+0xf8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d108      	bne.n	80006d6 <main+0x96>
	  {
		 Low_pulse_count++;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <main+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <main+0x104>)
 80006cc:	601a      	str	r2, [r3, #0]
		 prev_state = input;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <main+0xec>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <main+0xfc>)
 80006d4:	601a      	str	r2, [r3, #0]
	  }

	  sprintf(msg1,"H_2_L_count=%d ",High_pulse_count);
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <main+0x100>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	491b      	ldr	r1, [pc, #108]	; (8000748 <main+0x108>)
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <main+0x10c>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f003 fbb6 	bl	8003e50 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <main+0x10c>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f7ff fd0c 	bl	8000104 <strlen>
 80006ec:	0003      	movs	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	2301      	movs	r3, #1
 80006f2:	425b      	negs	r3, r3
 80006f4:	4915      	ldr	r1, [pc, #84]	; (800074c <main+0x10c>)
 80006f6:	4816      	ldr	r0, [pc, #88]	; (8000750 <main+0x110>)
 80006f8:	f002 fd10 	bl	800311c <HAL_UART_Transmit>

	  sprintf(msg2,"L_2_H_count=%d\r\n",Low_pulse_count);
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <main+0x104>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4914      	ldr	r1, [pc, #80]	; (8000754 <main+0x114>)
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <main+0x118>)
 8000704:	0018      	movs	r0, r3
 8000706:	f003 fba3 	bl	8003e50 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <main+0x118>)
 800070c:	0018      	movs	r0, r3
 800070e:	f7ff fcf9 	bl	8000104 <strlen>
 8000712:	0003      	movs	r3, r0
 8000714:	b29a      	uxth	r2, r3
 8000716:	2301      	movs	r3, #1
 8000718:	425b      	negs	r3, r3
 800071a:	490f      	ldr	r1, [pc, #60]	; (8000758 <main+0x118>)
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <main+0x110>)
 800071e:	f002 fcfd 	bl	800311c <HAL_UART_Transmit>
	  input = HAL_GPIO_ReadPin(high_pulse_count_GPIO_Port,	high_pulse_count_Pin);
 8000722:	e79e      	b.n	8000662 <main+0x22>
 8000724:	2000026c 	.word	0x2000026c
 8000728:	50000400 	.word	0x50000400
 800072c:	2000008c 	.word	0x2000008c
 8000730:	50000800 	.word	0x50000800
 8000734:	20000090 	.word	0x20000090
 8000738:	200000a0 	.word	0x200000a0
 800073c:	2000009c 	.word	0x2000009c
 8000740:	20000094 	.word	0x20000094
 8000744:	20000098 	.word	0x20000098
 8000748:	080046b4 	.word	0x080046b4
 800074c:	200000b0 	.word	0x200000b0
 8000750:	200001dc 	.word	0x200001dc
 8000754:	080046c4 	.word	0x080046c4
 8000758:	20000178 	.word	0x20000178

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b0a1      	sub	sp, #132	; 0x84
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	2448      	movs	r4, #72	; 0x48
 8000764:	193b      	adds	r3, r7, r4
 8000766:	0018      	movs	r0, r3
 8000768:	2338      	movs	r3, #56	; 0x38
 800076a:	001a      	movs	r2, r3
 800076c:	2100      	movs	r1, #0
 800076e:	f003 fb67 	bl	8003e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000772:	2338      	movs	r3, #56	; 0x38
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	0018      	movs	r0, r3
 8000778:	2310      	movs	r3, #16
 800077a:	001a      	movs	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	f003 fb5f 	bl	8003e40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	0018      	movs	r0, r3
 8000786:	2334      	movs	r3, #52	; 0x34
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f003 fb58 	bl	8003e40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	0018      	movs	r0, r3
 8000796:	f000 fde1 	bl	800135c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2202      	movs	r2, #2
 800079e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	0052      	lsls	r2, r2, #1
 80007a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2240      	movs	r2, #64	; 0x40
 80007b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fe19 	bl	80013f4 <HAL_RCC_OscConfig>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007c6:	f000 f949 	bl	8000a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	2138      	movs	r1, #56	; 0x38
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2207      	movs	r2, #7
 80007d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2100      	movs	r1, #0
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 f91d 	bl	8001a28 <HAL_RCC_ClockConfig>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007f2:	f000 f933 	bl	8000a5c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2202      	movs	r2, #2
 80007fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	0018      	movs	r0, r3
 8000806:	f001 fab9 	bl	8001d7c <HAL_RCCEx_PeriphCLKConfig>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800080e:	f000 f925 	bl	8000a5c <Error_Handler>
  }
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b021      	add	sp, #132	; 0x84
 8000818:	bd90      	pop	{r4, r7, pc}
	...

0800081c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	0018      	movs	r0, r3
 8000826:	231c      	movs	r3, #28
 8000828:	001a      	movs	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	f003 fb08 	bl	8003e40 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_TIM14_Init+0x98>)
 8000832:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <MX_TIM14_Init+0x9c>)
 8000834:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15999;
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_TIM14_Init+0x98>)
 8000838:	4a20      	ldr	r2, [pc, #128]	; (80008bc <MX_TIM14_Init+0xa0>)
 800083a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_TIM14_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_TIM14_Init+0x98>)
 8000844:	22fa      	movs	r2, #250	; 0xfa
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_TIM14_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_TIM14_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_TIM14_Init+0x98>)
 8000858:	0018      	movs	r0, r3
 800085a:	f001 fc47 	bl	80020ec <HAL_TIM_Base_Init>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8000862:	f000 f8fb 	bl	8000a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_TIM14_Init+0x98>)
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fc97 	bl	800219c <HAL_TIM_PWM_Init>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8000872:	f000 f8f3 	bl	8000a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2260      	movs	r2, #96	; 0x60
 800087a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 99;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2263      	movs	r2, #99	; 0x63
 8000880:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088e:	1d39      	adds	r1, r7, #4
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_TIM14_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	0018      	movs	r0, r3
 8000896:	f001 ff43 	bl	8002720 <HAL_TIM_PWM_ConfigChannel>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800089e:	f000 f8dd 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <MX_TIM14_Init+0x98>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 f92f 	bl	8000b08 <HAL_TIM_MspPostInit>

}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b008      	add	sp, #32
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	2000026c 	.word	0x2000026c
 80008b8:	40002000 	.word	0x40002000
 80008bc:	00003e7f 	.word	0x00003e7f

080008c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <MX_USART2_UART_Init+0x94>)
 80008c6:	4a24      	ldr	r2, [pc, #144]	; (8000958 <MX_USART2_UART_Init+0x98>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MX_USART2_UART_Init+0x94>)
 80008cc:	22e1      	movs	r2, #225	; 0xe1
 80008ce:	0252      	lsls	r2, r2, #9
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <MX_USART2_UART_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_USART2_UART_Init+0x94>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_USART2_UART_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_USART2_UART_Init+0x94>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_USART2_UART_Init+0x94>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_USART2_UART_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_USART2_UART_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_USART2_UART_Init+0x94>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USART2_UART_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_USART2_UART_Init+0x94>)
 800090a:	0018      	movs	r0, r3
 800090c:	f002 fbb0 	bl	8003070 <HAL_UART_Init>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000914:	f000 f8a2 	bl	8000a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART2_UART_Init+0x94>)
 800091a:	2100      	movs	r1, #0
 800091c:	0018      	movs	r0, r3
 800091e:	f003 f985 	bl	8003c2c <HAL_UARTEx_SetTxFifoThreshold>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000926:	f000 f899 	bl	8000a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_USART2_UART_Init+0x94>)
 800092c:	2100      	movs	r1, #0
 800092e:	0018      	movs	r0, r3
 8000930:	f003 f9bc 	bl	8003cac <HAL_UARTEx_SetRxFifoThreshold>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 f890 	bl	8000a5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <MX_USART2_UART_Init+0x94>)
 800093e:	0018      	movs	r0, r3
 8000940:	f003 f93a 	bl	8003bb8 <HAL_UARTEx_DisableFifoMode>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 f888 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	200001dc 	.word	0x200001dc
 8000958:	40004400 	.word	0x40004400

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b08b      	sub	sp, #44	; 0x2c
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	2414      	movs	r4, #20
 8000964:	193b      	adds	r3, r7, r4
 8000966:	0018      	movs	r0, r3
 8000968:	2314      	movs	r3, #20
 800096a:	001a      	movs	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f003 fa67 	bl	8003e40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <MX_GPIO_Init+0xf4>)
 8000974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000976:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <MX_GPIO_Init+0xf4>)
 8000978:	2104      	movs	r1, #4
 800097a:	430a      	orrs	r2, r1
 800097c:	635a      	str	r2, [r3, #52]	; 0x34
 800097e:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <MX_GPIO_Init+0xf4>)
 8000980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000982:	2204      	movs	r2, #4
 8000984:	4013      	ands	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <MX_GPIO_Init+0xf4>)
 800098c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800098e:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <MX_GPIO_Init+0xf4>)
 8000990:	2120      	movs	r1, #32
 8000992:	430a      	orrs	r2, r1
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <MX_GPIO_Init+0xf4>)
 8000998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099a:	2220      	movs	r2, #32
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <MX_GPIO_Init+0xf4>)
 80009a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <MX_GPIO_Init+0xf4>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
 80009ae:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <MX_GPIO_Init+0xf4>)
 80009b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b2:	2201      	movs	r2, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <MX_GPIO_Init+0xf4>)
 80009bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_GPIO_Init+0xf4>)
 80009c0:	2102      	movs	r1, #2
 80009c2:	430a      	orrs	r2, r1
 80009c4:	635a      	str	r2, [r3, #52]	; 0x34
 80009c6:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <MX_GPIO_Init+0xf4>)
 80009c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ca:	2202      	movs	r2, #2
 80009cc:	4013      	ands	r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80009d2:	23a0      	movs	r3, #160	; 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	2200      	movs	r2, #0
 80009d8:	2120      	movs	r1, #32
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fca1 	bl	8001322 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2220      	movs	r2, #32
 80009e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2201      	movs	r2, #1
 80009ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2202      	movs	r2, #2
 80009f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2202      	movs	r2, #2
 80009f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009f8:	193a      	adds	r2, r7, r4
 80009fa:	23a0      	movs	r3, #160	; 0xa0
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fb0d 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : count1_Pin */
  GPIO_InitStruct.Pin = count1_Pin;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2220      	movs	r2, #32
 8000a0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(count1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <MX_GPIO_Init+0xf8>)
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	0010      	movs	r0, r2
 8000a20:	f000 fafe 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : high_pulse_count_Pin low_pulse_count_Pin */
  GPIO_InitStruct.Pin = high_pulse_count_Pin|low_pulse_count_Pin;
 8000a24:	0021      	movs	r1, r4
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	22c0      	movs	r2, #192	; 0xc0
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <MX_GPIO_Init+0xfc>)
 8000a3e:	0019      	movs	r1, r3
 8000a40:	0010      	movs	r0, r2
 8000a42:	f000 faed 	bl	8001020 <HAL_GPIO_Init>

}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b00b      	add	sp, #44	; 0x2c
 8000a4c:	bd90      	pop	{r4, r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40021000 	.word	0x40021000
 8000a54:	50000800 	.word	0x50000800
 8000a58:	50000400 	.word	0x50000400

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	641a      	str	r2, [r3, #64]	; 0x40
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	0549      	lsls	r1, r1, #21
 8000a90:	430a      	orrs	r2, r1
 8000a92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	055b      	lsls	r3, r3, #21
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000aa2:	23c0      	movs	r3, #192	; 0xc0
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 f9c6 	bl	8000e38 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_TIM_Base_MspInit+0x48>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d115      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_TIM_Base_MspInit+0x4c>)
 8000acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_TIM_Base_MspInit+0x4c>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	0209      	lsls	r1, r1, #8
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_TIM_Base_MspInit+0x4c>)
 8000ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2013      	movs	r0, #19
 8000aec:	f000 fa66 	bl	8000fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000af0:	2013      	movs	r0, #19
 8000af2:	f000 fa78 	bl	8000fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b004      	add	sp, #16
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	40002000 	.word	0x40002000
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b089      	sub	sp, #36	; 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	240c      	movs	r4, #12
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	0018      	movs	r0, r3
 8000b16:	2314      	movs	r3, #20
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f003 f990 	bl	8003e40 <memset>
  if(htim->Instance==TIM14)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <HAL_TIM_MspPostInit+0x70>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d122      	bne.n	8000b70 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_TIM_MspPostInit+0x74>)
 8000b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_TIM_MspPostInit+0x74>)
 8000b30:	2104      	movs	r1, #4
 8000b32:	430a      	orrs	r2, r1
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_TIM_MspPostInit+0x74>)
 8000b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = pwm_pin_Pin;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	0152      	lsls	r2, r2, #5
 8000b48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	0021      	movs	r1, r4
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2202      	movs	r2, #2
 8000b50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2202      	movs	r2, #2
 8000b62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(pwm_pin_GPIO_Port, &GPIO_InitStruct);
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_TIM_MspPostInit+0x78>)
 8000b68:	0019      	movs	r1, r3
 8000b6a:	0010      	movs	r0, r2
 8000b6c:	f000 fa58 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b009      	add	sp, #36	; 0x24
 8000b76:	bd90      	pop	{r4, r7, pc}
 8000b78:	40002000 	.word	0x40002000
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	50000800 	.word	0x50000800

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b08b      	sub	sp, #44	; 0x2c
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	2414      	movs	r4, #20
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	0018      	movs	r0, r3
 8000b92:	2314      	movs	r3, #20
 8000b94:	001a      	movs	r2, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	f003 f952 	bl	8003e40 <memset>
  if(huart->Instance==USART2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <HAL_UART_MspInit+0x8c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d130      	bne.n	8000c08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	0289      	lsls	r1, r1, #10
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	029b      	lsls	r3, r3, #10
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_UART_MspInit+0x90>)
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000bda:	0021      	movs	r1, r4
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2202      	movs	r2, #2
 8000be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	187a      	adds	r2, r7, r1
 8000bfc:	23a0      	movs	r3, #160	; 0xa0
 8000bfe:	05db      	lsls	r3, r3, #23
 8000c00:	0011      	movs	r1, r2
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fa0c 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b00b      	add	sp, #44	; 0x2c
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	40004400 	.word	0x40004400
 8000c14:	40021000 	.word	0x40021000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f8e0 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
//		sprintf(msg2,"low_pulse_count=%d\r\n",Lpulse);
//		HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
//	}

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <TIM14_IRQHandler+0x14>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f001 fc34 	bl	80024bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	2000026c 	.word	0x2000026c

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	18d3      	adds	r3, r2, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f003 f8ac 	bl	8003dec <__errno>
 8000c94:	0003      	movs	r3, r0
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	425b      	negs	r3, r3
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	18d2      	adds	r2, r2, r3
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b006      	add	sp, #24
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20009000 	.word	0x20009000
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	200000a4 	.word	0x200000a4
 8000cc8:	200002d0 	.word	0x200002d0

08000ccc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cdc:	f7ff fff6 	bl	8000ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	; (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d06:	f003 f877 	bl	8003df8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d0a:	f7ff fc99 	bl	8000640 <main>

08000d0e <LoopForever>:

LoopForever:
  b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   r0, =_estack
 8000d10:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d1c:	080047f8 	.word	0x080047f8
  ldr r2, =_sbss
 8000d20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d24:	200002cc 	.word	0x200002cc

08000d28 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_COMP_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_Init+0x3c>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_Init+0x3c>)
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0049      	lsls	r1, r1, #1
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f810 	bl	8000d6c <HAL_InitTick>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	e001      	b.n	8000d5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fe86 	bl	8000a68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	781b      	ldrb	r3, [r3, #0]
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40022000 	.word	0x40022000

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_InitTick+0x88>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d02b      	beq.n	8000ddc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_InitTick+0x8c>)
 8000d86:	681c      	ldr	r4, [r3, #0]
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_InitTick+0x88>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	23fa      	movs	r3, #250	; 0xfa
 8000d90:	0098      	lsls	r0, r3, #2
 8000d92:	f7ff f9c9 	bl	8000128 <__udivsi3>
 8000d96:	0003      	movs	r3, r0
 8000d98:	0019      	movs	r1, r3
 8000d9a:	0020      	movs	r0, r4
 8000d9c:	f7ff f9c4 	bl	8000128 <__udivsi3>
 8000da0:	0003      	movs	r3, r0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 f92f 	bl	8001006 <HAL_SYSTICK_Config>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d112      	bne.n	8000dd2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d80a      	bhi.n	8000dc8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	2301      	movs	r3, #1
 8000db6:	425b      	negs	r3, r3
 8000db8:	2200      	movs	r2, #0
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 f8fe 	bl	8000fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_InitTick+0x90>)
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	e00d      	b.n	8000de4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e008      	b.n	8000de4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e003      	b.n	8000de4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ddc:	230f      	movs	r3, #15
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000de4:	230f      	movs	r3, #15
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	781b      	ldrb	r3, [r3, #0]
}
 8000dea:	0018      	movs	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b005      	add	sp, #20
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_IncTick+0x1c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	001a      	movs	r2, r3
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x20>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	18d2      	adds	r2, r2, r3
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_IncTick+0x20>)
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	200002b8 	.word	0x200002b8

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <HAL_GetTick+0x10>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	200002b8 	.word	0x200002b8

08000e38 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	0019      	movs	r1, r3
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	40010000 	.word	0x40010000
 8000e60:	fffff9ff 	.word	0xfffff9ff

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b7f      	cmp	r3, #127	; 0x7f
 8000e76:	d809      	bhi.n	8000e8c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	231f      	movs	r3, #31
 8000e80:	401a      	ands	r2, r3
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_EnableIRQ+0x30>)
 8000e84:	2101      	movs	r1, #1
 8000e86:	4091      	lsls	r1, r2
 8000e88:	000a      	movs	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8000eac:	d828      	bhi.n	8000f00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eae:	4a2f      	ldr	r2, [pc, #188]	; (8000f6c <__NVIC_SetPriority+0xd4>)
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	33c0      	adds	r3, #192	; 0xc0
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	589b      	ldr	r3, [r3, r2]
 8000ebe:	1dfa      	adds	r2, r7, #7
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	00d2      	lsls	r2, r2, #3
 8000eca:	21ff      	movs	r1, #255	; 0xff
 8000ecc:	4091      	lsls	r1, r2
 8000ece:	000a      	movs	r2, r1
 8000ed0:	43d2      	mvns	r2, r2
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	019b      	lsls	r3, r3, #6
 8000eda:	22ff      	movs	r2, #255	; 0xff
 8000edc:	401a      	ands	r2, r3
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	4003      	ands	r3, r0
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eec:	481f      	ldr	r0, [pc, #124]	; (8000f6c <__NVIC_SetPriority+0xd4>)
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	33c0      	adds	r3, #192	; 0xc0
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000efe:	e031      	b.n	8000f64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f00:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <__NVIC_SetPriority+0xd8>)
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	0019      	movs	r1, r3
 8000f08:	230f      	movs	r3, #15
 8000f0a:	400b      	ands	r3, r1
 8000f0c:	3b08      	subs	r3, #8
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3306      	adds	r3, #6
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	18d3      	adds	r3, r2, r3
 8000f16:	3304      	adds	r3, #4
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	1dfa      	adds	r2, r7, #7
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	0011      	movs	r1, r2
 8000f20:	2203      	movs	r2, #3
 8000f22:	400a      	ands	r2, r1
 8000f24:	00d2      	lsls	r2, r2, #3
 8000f26:	21ff      	movs	r1, #255	; 0xff
 8000f28:	4091      	lsls	r1, r2
 8000f2a:	000a      	movs	r2, r1
 8000f2c:	43d2      	mvns	r2, r2
 8000f2e:	401a      	ands	r2, r3
 8000f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	019b      	lsls	r3, r3, #6
 8000f36:	22ff      	movs	r2, #255	; 0xff
 8000f38:	401a      	ands	r2, r3
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	0018      	movs	r0, r3
 8000f40:	2303      	movs	r3, #3
 8000f42:	4003      	ands	r3, r0
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <__NVIC_SetPriority+0xd8>)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	001c      	movs	r4, r3
 8000f50:	230f      	movs	r3, #15
 8000f52:	4023      	ands	r3, r4
 8000f54:	3b08      	subs	r3, #8
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	3306      	adds	r3, #6
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	18c3      	adds	r3, r0, r3
 8000f60:	3304      	adds	r3, #4
 8000f62:	601a      	str	r2, [r3, #0]
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b003      	add	sp, #12
 8000f6a:	bd90      	pop	{r4, r7, pc}
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	1e5a      	subs	r2, r3, #1
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	045b      	lsls	r3, r3, #17
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d301      	bcc.n	8000f8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e010      	b.n	8000fae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <SysTick_Config+0x44>)
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	3a01      	subs	r2, #1
 8000f92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f94:	2301      	movs	r3, #1
 8000f96:	425b      	negs	r3, r3
 8000f98:	2103      	movs	r1, #3
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff ff7c 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x44>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x44>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	0018      	movs	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	1c02      	adds	r2, r0, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff ff5d 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b004      	add	sp, #16
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	0002      	movs	r2, r0
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff ff33 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b002      	add	sp, #8
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0018      	movs	r0, r3
 8001012:	f7ff ffaf 	bl	8000f74 <SysTick_Config>
 8001016:	0003      	movs	r3, r0
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102e:	e147      	b.n	80012c0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4091      	lsls	r1, r2
 800103a:	000a      	movs	r2, r1
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d100      	bne.n	8001048 <HAL_GPIO_Init+0x28>
 8001046:	e138      	b.n	80012ba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2203      	movs	r2, #3
 800104e:	4013      	ands	r3, r2
 8001050:	2b01      	cmp	r3, #1
 8001052:	d005      	beq.n	8001060 <HAL_GPIO_Init+0x40>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2203      	movs	r2, #3
 800105a:	4013      	ands	r3, r2
 800105c:	2b02      	cmp	r3, #2
 800105e:	d130      	bne.n	80010c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	43da      	mvns	r2, r3
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	409a      	lsls	r2, r3
 8001082:	0013      	movs	r3, r2
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001096:	2201      	movs	r2, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	43da      	mvns	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	2201      	movs	r2, #1
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2203      	movs	r2, #3
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d017      	beq.n	80010fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2203      	movs	r2, #3
 8001104:	4013      	ands	r3, r2
 8001106:	2b02      	cmp	r3, #2
 8001108:	d123      	bne.n	8001152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	58d3      	ldr	r3, [r2, r3]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2207      	movs	r2, #7
 800111c:	4013      	ands	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	43da      	mvns	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2107      	movs	r1, #7
 8001136:	400b      	ands	r3, r1
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	0092      	lsls	r2, r2, #2
 800114e:	6939      	ldr	r1, [r7, #16]
 8001150:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	43da      	mvns	r2, r3
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2203      	movs	r2, #3
 8001170:	401a      	ands	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	23c0      	movs	r3, #192	; 0xc0
 800118c:	029b      	lsls	r3, r3, #10
 800118e:	4013      	ands	r3, r2
 8001190:	d100      	bne.n	8001194 <HAL_GPIO_Init+0x174>
 8001192:	e092      	b.n	80012ba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001194:	4a50      	ldr	r2, [pc, #320]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3318      	adds	r3, #24
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	589b      	ldr	r3, [r3, r2]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	2203      	movs	r2, #3
 80011a6:	4013      	ands	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	220f      	movs	r2, #15
 80011ac:	409a      	lsls	r2, r3
 80011ae:	0013      	movs	r3, r2
 80011b0:	43da      	mvns	r2, r3
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	23a0      	movs	r3, #160	; 0xa0
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	429a      	cmp	r2, r3
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x1ca>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a45      	ldr	r2, [pc, #276]	; (80012dc <HAL_GPIO_Init+0x2bc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x1c6>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a44      	ldr	r2, [pc, #272]	; (80012e0 <HAL_GPIO_Init+0x2c0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x1c2>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a43      	ldr	r2, [pc, #268]	; (80012e4 <HAL_GPIO_Init+0x2c4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x1be>
 80011da:	2303      	movs	r3, #3
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x1cc>
 80011de:	2305      	movs	r3, #5
 80011e0:	e004      	b.n	80011ec <HAL_GPIO_Init+0x1cc>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_Init+0x1cc>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x1cc>
 80011ea:	2300      	movs	r3, #0
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	2103      	movs	r1, #3
 80011f0:	400a      	ands	r2, r1
 80011f2:	00d2      	lsls	r2, r2, #3
 80011f4:	4093      	lsls	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011fc:	4936      	ldr	r1, [pc, #216]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3318      	adds	r3, #24
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	035b      	lsls	r3, r3, #13
 8001222:	4013      	ands	r3, r2
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43da      	mvns	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	039b      	lsls	r3, r3, #14
 800124c:	4013      	ands	r3, r2
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800125e:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001260:	2384      	movs	r3, #132	; 0x84
 8001262:	58d3      	ldr	r3, [r2, r3]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43da      	mvns	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	029b      	lsls	r3, r3, #10
 8001278:	4013      	ands	r3, r2
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001284:	4914      	ldr	r1, [pc, #80]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001286:	2284      	movs	r2, #132	; 0x84
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800128c:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	58d3      	ldr	r3, [r2, r3]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43da      	mvns	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	025b      	lsls	r3, r3, #9
 80012a6:	4013      	ands	r3, r2
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b2:	4909      	ldr	r1, [pc, #36]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 80012b4:	2280      	movs	r2, #128	; 0x80
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	40da      	lsrs	r2, r3
 80012c8:	1e13      	subs	r3, r2, #0
 80012ca:	d000      	beq.n	80012ce <HAL_GPIO_Init+0x2ae>
 80012cc:	e6b0      	b.n	8001030 <HAL_GPIO_Init+0x10>
  }
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b006      	add	sp, #24
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021800 	.word	0x40021800
 80012dc:	50000400 	.word	0x50000400
 80012e0:	50000800 	.word	0x50000800
 80012e4:	50000c00 	.word	0x50000c00

080012e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	000a      	movs	r2, r1
 80012f2:	1cbb      	adds	r3, r7, #2
 80012f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	1cba      	adds	r2, r7, #2
 80012fc:	8812      	ldrh	r2, [r2, #0]
 80012fe:	4013      	ands	r3, r2
 8001300:	d004      	beq.n	800130c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001302:	230f      	movs	r3, #15
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	e003      	b.n	8001314 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800130c:	230f      	movs	r3, #15
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001314:	230f      	movs	r3, #15
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	781b      	ldrb	r3, [r3, #0]
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b004      	add	sp, #16
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	0008      	movs	r0, r1
 800132c:	0011      	movs	r1, r2
 800132e:	1cbb      	adds	r3, r7, #2
 8001330:	1c02      	adds	r2, r0, #0
 8001332:	801a      	strh	r2, [r3, #0]
 8001334:	1c7b      	adds	r3, r7, #1
 8001336:	1c0a      	adds	r2, r1, #0
 8001338:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800133a:	1c7b      	adds	r3, r7, #1
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d004      	beq.n	800134c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001342:	1cbb      	adds	r3, r7, #2
 8001344:	881a      	ldrh	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800134a:	e003      	b.n	8001354 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800134c:	1cbb      	adds	r3, r7, #2
 800134e:	881a      	ldrh	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b002      	add	sp, #8
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800136a:	4013      	ands	r3, r2
 800136c:	0019      	movs	r1, r3
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	429a      	cmp	r2, r3
 800137e:	d11f      	bne.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	0013      	movs	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	189b      	adds	r3, r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4912      	ldr	r1, [pc, #72]	; (80013d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800138e:	0018      	movs	r0, r3
 8001390:	f7fe feca 	bl	8000128 <__udivsi3>
 8001394:	0003      	movs	r3, r0
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800139a:	e008      	b.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e001      	b.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e009      	b.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	401a      	ands	r2, r3
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	429a      	cmp	r2, r3
 80013be:	d0ed      	beq.n	800139c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b004      	add	sp, #16
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40007000 	.word	0x40007000
 80013d0:	fffff9ff 	.word	0xfffff9ff
 80013d4:	20000000 	.word	0x20000000
 80013d8:	000f4240 	.word	0x000f4240

080013dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	23e0      	movs	r3, #224	; 0xe0
 80013e6:	01db      	lsls	r3, r3, #7
 80013e8:	4013      	ands	r3, r2
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e2fe      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2201      	movs	r2, #1
 800140c:	4013      	ands	r3, r2
 800140e:	d100      	bne.n	8001412 <HAL_RCC_OscConfig+0x1e>
 8001410:	e07c      	b.n	800150c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001412:	4bc3      	ldr	r3, [pc, #780]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2238      	movs	r2, #56	; 0x38
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800141c:	4bc0      	ldr	r3, [pc, #768]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2203      	movs	r2, #3
 8001422:	4013      	ands	r3, r2
 8001424:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b10      	cmp	r3, #16
 800142a:	d102      	bne.n	8001432 <HAL_RCC_OscConfig+0x3e>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d002      	beq.n	8001438 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b08      	cmp	r3, #8
 8001436:	d10b      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	4bb9      	ldr	r3, [pc, #740]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	029b      	lsls	r3, r3, #10
 8001440:	4013      	ands	r3, r2
 8001442:	d062      	beq.n	800150a <HAL_RCC_OscConfig+0x116>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d15e      	bne.n	800150a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e2d9      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	025b      	lsls	r3, r3, #9
 8001458:	429a      	cmp	r2, r3
 800145a:	d107      	bne.n	800146c <HAL_RCC_OscConfig+0x78>
 800145c:	4bb0      	ldr	r3, [pc, #704]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4baf      	ldr	r3, [pc, #700]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	0249      	lsls	r1, r1, #9
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e020      	b.n	80014ae <HAL_RCC_OscConfig+0xba>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	23a0      	movs	r3, #160	; 0xa0
 8001472:	02db      	lsls	r3, r3, #11
 8001474:	429a      	cmp	r2, r3
 8001476:	d10e      	bne.n	8001496 <HAL_RCC_OscConfig+0xa2>
 8001478:	4ba9      	ldr	r3, [pc, #676]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4ba8      	ldr	r3, [pc, #672]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	02c9      	lsls	r1, r1, #11
 8001482:	430a      	orrs	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	4ba6      	ldr	r3, [pc, #664]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4ba5      	ldr	r3, [pc, #660]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	0249      	lsls	r1, r1, #9
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e00b      	b.n	80014ae <HAL_RCC_OscConfig+0xba>
 8001496:	4ba2      	ldr	r3, [pc, #648]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4ba1      	ldr	r3, [pc, #644]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 800149c:	49a1      	ldr	r1, [pc, #644]	; (8001724 <HAL_RCC_OscConfig+0x330>)
 800149e:	400a      	ands	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	4b9f      	ldr	r3, [pc, #636]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b9e      	ldr	r3, [pc, #632]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	499f      	ldr	r1, [pc, #636]	; (8001728 <HAL_RCC_OscConfig+0x334>)
 80014aa:	400a      	ands	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d014      	beq.n	80014e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fcb5 	bl	8000e24 <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fcb0 	bl	8000e24 <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e298      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d2:	4b93      	ldr	r3, [pc, #588]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	029b      	lsls	r3, r3, #10
 80014da:	4013      	ands	r3, r2
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0xcc>
 80014de:	e015      	b.n	800150c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fca0 	bl	8000e24 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ea:	f7ff fc9b 	bl	8000e24 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b64      	cmp	r3, #100	; 0x64
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e283      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fc:	4b88      	ldr	r3, [pc, #544]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	029b      	lsls	r3, r3, #10
 8001504:	4013      	ands	r3, r2
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0xf6>
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d100      	bne.n	8001518 <HAL_RCC_OscConfig+0x124>
 8001516:	e099      	b.n	800164c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001518:	4b81      	ldr	r3, [pc, #516]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2238      	movs	r2, #56	; 0x38
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001522:	4b7f      	ldr	r3, [pc, #508]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2203      	movs	r2, #3
 8001528:	4013      	ands	r3, r2
 800152a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b10      	cmp	r3, #16
 8001530:	d102      	bne.n	8001538 <HAL_RCC_OscConfig+0x144>
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d002      	beq.n	800153e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d135      	bne.n	80015aa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153e:	4b78      	ldr	r3, [pc, #480]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4013      	ands	r3, r2
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x162>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e256      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b72      	ldr	r3, [pc, #456]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a74      	ldr	r2, [pc, #464]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	021a      	lsls	r2, r3, #8
 8001566:	4b6e      	ldr	r3, [pc, #440]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d112      	bne.n	8001598 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001572:	4b6b      	ldr	r3, [pc, #428]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a6e      	ldr	r2, [pc, #440]	; (8001730 <HAL_RCC_OscConfig+0x33c>)
 8001578:	4013      	ands	r3, r2
 800157a:	0019      	movs	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	4b67      	ldr	r3, [pc, #412]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001586:	4b66      	ldr	r3, [pc, #408]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	0adb      	lsrs	r3, r3, #11
 800158c:	2207      	movs	r2, #7
 800158e:	4013      	ands	r3, r2
 8001590:	4a68      	ldr	r2, [pc, #416]	; (8001734 <HAL_RCC_OscConfig+0x340>)
 8001592:	40da      	lsrs	r2, r3
 8001594:	4b68      	ldr	r3, [pc, #416]	; (8001738 <HAL_RCC_OscConfig+0x344>)
 8001596:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001598:	4b68      	ldr	r3, [pc, #416]	; (800173c <HAL_RCC_OscConfig+0x348>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff fbe5 	bl	8000d6c <HAL_InitTick>
 80015a2:	1e03      	subs	r3, r0, #0
 80015a4:	d051      	beq.n	800164a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e22c      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d030      	beq.n	8001614 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015b2:	4b5b      	ldr	r3, [pc, #364]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a5e      	ldr	r2, [pc, #376]	; (8001730 <HAL_RCC_OscConfig+0x33c>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	0019      	movs	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	4b57      	ldr	r3, [pc, #348]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015c6:	4b56      	ldr	r3, [pc, #344]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b55      	ldr	r3, [pc, #340]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	0049      	lsls	r1, r1, #1
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fc26 	bl	8000e24 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fc21 	bl	8000e24 <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e209      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f0:	4b4b      	ldr	r3, [pc, #300]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b48      	ldr	r3, [pc, #288]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a4a      	ldr	r2, [pc, #296]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001602:	4013      	ands	r3, r2
 8001604:	0019      	movs	r1, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	021a      	lsls	r2, r3, #8
 800160c:	4b44      	ldr	r3, [pc, #272]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	e01b      	b.n	800164c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001614:	4b42      	ldr	r3, [pc, #264]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 800161a:	4949      	ldr	r1, [pc, #292]	; (8001740 <HAL_RCC_OscConfig+0x34c>)
 800161c:	400a      	ands	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fc00 	bl	8000e24 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fbfb 	bl	8000e24 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1e3      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800163c:	4b38      	ldr	r3, [pc, #224]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4013      	ands	r3, r2
 8001646:	d1f0      	bne.n	800162a <HAL_RCC_OscConfig+0x236>
 8001648:	e000      	b.n	800164c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2208      	movs	r2, #8
 8001652:	4013      	ands	r3, r2
 8001654:	d047      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001656:	4b32      	ldr	r3, [pc, #200]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2238      	movs	r2, #56	; 0x38
 800165c:	4013      	ands	r3, r2
 800165e:	2b18      	cmp	r3, #24
 8001660:	d10a      	bne.n	8001678 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d03c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2f2>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d138      	bne.n	80016e6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e1c5      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d019      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001682:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001684:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001686:	2101      	movs	r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fbca 	bl	8000e24 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001696:	f7ff fbc5 	bl	8000e24 <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1ad      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ac:	2202      	movs	r2, #2
 80016ae:	4013      	ands	r3, r2
 80016b0:	d0f1      	beq.n	8001696 <HAL_RCC_OscConfig+0x2a2>
 80016b2:	e018      	b.n	80016e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	438a      	bics	r2, r1
 80016be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fbb0 	bl	8000e24 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ca:	f7ff fbab 	bl	8000e24 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e193      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80016de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e0:	2202      	movs	r2, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	d1f1      	bne.n	80016ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2204      	movs	r2, #4
 80016ec:	4013      	ands	r3, r2
 80016ee:	d100      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2fe>
 80016f0:	e0c6      	b.n	8001880 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f2:	231f      	movs	r3, #31
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2238      	movs	r2, #56	; 0x38
 8001700:	4013      	ands	r3, r2
 8001702:	2b20      	cmp	r3, #32
 8001704:	d11e      	bne.n	8001744 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_RCC_OscConfig+0x32c>)
 8001708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d100      	bne.n	8001712 <HAL_RCC_OscConfig+0x31e>
 8001710:	e0b6      	b.n	8001880 <HAL_RCC_OscConfig+0x48c>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d000      	beq.n	800171c <HAL_RCC_OscConfig+0x328>
 800171a:	e0b1      	b.n	8001880 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e171      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
 8001720:	40021000 	.word	0x40021000
 8001724:	fffeffff 	.word	0xfffeffff
 8001728:	fffbffff 	.word	0xfffbffff
 800172c:	ffff80ff 	.word	0xffff80ff
 8001730:	ffffc7ff 	.word	0xffffc7ff
 8001734:	00f42400 	.word	0x00f42400
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004
 8001740:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001744:	4bb1      	ldr	r3, [pc, #708]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	055b      	lsls	r3, r3, #21
 800174c:	4013      	ands	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x360>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x362>
 8001754:	2300      	movs	r3, #0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d011      	beq.n	800177e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4bac      	ldr	r3, [pc, #688]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 800175c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800175e:	4bab      	ldr	r3, [pc, #684]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	0549      	lsls	r1, r1, #21
 8001764:	430a      	orrs	r2, r1
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c
 8001768:	4ba8      	ldr	r3, [pc, #672]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 800176a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	055b      	lsls	r3, r3, #21
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001776:	231f      	movs	r3, #31
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177e:	4ba4      	ldr	r3, [pc, #656]	; (8001a10 <HAL_RCC_OscConfig+0x61c>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4013      	ands	r3, r2
 8001788:	d11a      	bne.n	80017c0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800178a:	4ba1      	ldr	r3, [pc, #644]	; (8001a10 <HAL_RCC_OscConfig+0x61c>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4ba0      	ldr	r3, [pc, #640]	; (8001a10 <HAL_RCC_OscConfig+0x61c>)
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	0049      	lsls	r1, r1, #1
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001798:	f7ff fb44 	bl	8000e24 <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a2:	f7ff fb3f 	bl	8000e24 <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e127      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b4:	4b96      	ldr	r3, [pc, #600]	; (8001a10 <HAL_RCC_OscConfig+0x61c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3e2>
 80017c8:	4b90      	ldr	r3, [pc, #576]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80017ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017cc:	4b8f      	ldr	r3, [pc, #572]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	430a      	orrs	r2, r1
 80017d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80017d4:	e01c      	b.n	8001810 <HAL_RCC_OscConfig+0x41c>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x404>
 80017de:	4b8b      	ldr	r3, [pc, #556]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80017e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017e2:	4b8a      	ldr	r3, [pc, #552]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80017e4:	2104      	movs	r1, #4
 80017e6:	430a      	orrs	r2, r1
 80017e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80017ea:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80017ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ee:	4b87      	ldr	r3, [pc, #540]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	430a      	orrs	r2, r1
 80017f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0x41c>
 80017f8:	4b84      	ldr	r3, [pc, #528]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80017fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017fc:	4b83      	ldr	r3, [pc, #524]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80017fe:	2101      	movs	r1, #1
 8001800:	438a      	bics	r2, r1
 8001802:	65da      	str	r2, [r3, #92]	; 0x5c
 8001804:	4b81      	ldr	r3, [pc, #516]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001806:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001808:	4b80      	ldr	r3, [pc, #512]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 800180a:	2104      	movs	r1, #4
 800180c:	438a      	bics	r2, r1
 800180e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d014      	beq.n	8001842 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fb04 	bl	8000e24 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001820:	e009      	b.n	8001836 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff faff 	bl	8000e24 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	4a79      	ldr	r2, [pc, #484]	; (8001a14 <HAL_RCC_OscConfig+0x620>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e0e6      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001836:	4b75      	ldr	r3, [pc, #468]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183a:	2202      	movs	r2, #2
 800183c:	4013      	ands	r3, r2
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x42e>
 8001840:	e013      	b.n	800186a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7ff faef 	bl	8000e24 <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800184a:	e009      	b.n	8001860 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff faea 	bl	8000e24 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	4a6f      	ldr	r2, [pc, #444]	; (8001a14 <HAL_RCC_OscConfig+0x620>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0d1      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001860:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	2202      	movs	r2, #2
 8001866:	4013      	ands	r3, r2
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800186a:	231f      	movs	r3, #31
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001874:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001878:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 800187a:	4967      	ldr	r1, [pc, #412]	; (8001a18 <HAL_RCC_OscConfig+0x624>)
 800187c:	400a      	ands	r2, r1
 800187e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d100      	bne.n	800188a <HAL_RCC_OscConfig+0x496>
 8001888:	e0bb      	b.n	8001a02 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188a:	4b60      	ldr	r3, [pc, #384]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2238      	movs	r2, #56	; 0x38
 8001890:	4013      	ands	r3, r2
 8001892:	2b10      	cmp	r3, #16
 8001894:	d100      	bne.n	8001898 <HAL_RCC_OscConfig+0x4a4>
 8001896:	e07b      	b.n	8001990 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d156      	bne.n	800194e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	4b5a      	ldr	r3, [pc, #360]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80018a6:	495d      	ldr	r1, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x628>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff faba 	bl	8000e24 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff fab5 	bl	8000e24 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e09d      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	049b      	lsls	r3, r3, #18
 80018d0:	4013      	ands	r3, r2
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d4:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <HAL_RCC_OscConfig+0x62c>)
 80018da:	4013      	ands	r3, r2
 80018dc:	0019      	movs	r1, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1a      	ldr	r2, [r3, #32]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	431a      	orrs	r2, r3
 8001902:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001904:	430a      	orrs	r2, r1
 8001906:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	0449      	lsls	r1, r1, #17
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	0549      	lsls	r1, r1, #21
 8001920:	430a      	orrs	r2, r1
 8001922:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fa7e 	bl	8000e24 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff fa79 	bl	8000e24 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e061      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001940:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	049b      	lsls	r3, r3, #18
 8001948:	4013      	ands	r3, r2
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x53a>
 800194c:	e059      	b.n	8001a02 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001954:	4931      	ldr	r1, [pc, #196]	; (8001a1c <HAL_RCC_OscConfig+0x628>)
 8001956:	400a      	ands	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff fa63 	bl	8000e24 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff fa5e 	bl	8000e24 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e046      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	049b      	lsls	r3, r3, #18
 800197e:	4013      	ands	r3, r2
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 8001988:	4926      	ldr	r1, [pc, #152]	; (8001a24 <HAL_RCC_OscConfig+0x630>)
 800198a:	400a      	ands	r2, r1
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	e038      	b.n	8001a02 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e033      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x618>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2203      	movs	r2, #3
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d126      	bne.n	80019fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2270      	movs	r2, #112	; 0x70
 80019b4:	401a      	ands	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d11f      	bne.n	80019fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	23fe      	movs	r3, #254	; 0xfe
 80019c2:	01db      	lsls	r3, r3, #7
 80019c4:	401a      	ands	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d116      	bne.n	80019fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	23f8      	movs	r3, #248	; 0xf8
 80019d4:	039b      	lsls	r3, r3, #14
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d10e      	bne.n	80019fe <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	23e0      	movs	r3, #224	; 0xe0
 80019e4:	051b      	lsls	r3, r3, #20
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	0f5b      	lsrs	r3, r3, #29
 80019f4:	075a      	lsls	r2, r3, #29
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b008      	add	sp, #32
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40007000 	.word	0x40007000
 8001a14:	00001388 	.word	0x00001388
 8001a18:	efffffff 	.word	0xefffffff
 8001a1c:	feffffff 	.word	0xfeffffff
 8001a20:	11c1808c 	.word	0x11c1808c
 8001a24:	eefefffc 	.word	0xeefefffc

08001a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0e9      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2207      	movs	r2, #7
 8001a42:	4013      	ands	r3, r2
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d91e      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2207      	movs	r2, #7
 8001a50:	4393      	bics	r3, r2
 8001a52:	0019      	movs	r1, r3
 8001a54:	4b70      	ldr	r3, [pc, #448]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a5c:	f7ff f9e2 	bl	8000e24 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a64:	e009      	b.n	8001a7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a66:	f7ff f9dd 	bl	8000e24 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4a6a      	ldr	r2, [pc, #424]	; (8001c1c <HAL_RCC_ClockConfig+0x1f4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0ca      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a7a:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2207      	movs	r2, #7
 8001a80:	4013      	ands	r3, r2
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d1ee      	bne.n	8001a66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d015      	beq.n	8001abe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2204      	movs	r2, #4
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d006      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a9c:	4b60      	ldr	r3, [pc, #384]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa2:	21e0      	movs	r1, #224	; 0xe0
 8001aa4:	01c9      	lsls	r1, r1, #7
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	4a5d      	ldr	r2, [pc, #372]	; (8001c24 <HAL_RCC_ClockConfig+0x1fc>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001aba:	430a      	orrs	r2, r1
 8001abc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d057      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad0:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	029b      	lsls	r3, r3, #10
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d12b      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e097      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae8:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	049b      	lsls	r3, r3, #18
 8001af0:	4013      	ands	r3, r2
 8001af2:	d11f      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e08b      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d113      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e07f      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b18:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d108      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e074      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b26:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e06d      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b34:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2207      	movs	r2, #7
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b48:	f7ff f96c 	bl	8000e24 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7ff f967 	bl	8000e24 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a2f      	ldr	r2, [pc, #188]	; (8001c1c <HAL_RCC_ClockConfig+0x1f4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e054      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2238      	movs	r2, #56	; 0x38
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1ec      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	4013      	ands	r3, r2
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d21e      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b98:	f7ff f944 	bl	8000e24 <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ba0:	e009      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba2:	f7ff f93f 	bl	8000e24 <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <HAL_RCC_ClockConfig+0x1f4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e02c      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2207      	movs	r2, #7
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4a15      	ldr	r2, [pc, #84]	; (8001c28 <HAL_RCC_ClockConfig+0x200>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001be2:	f000 f829 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001be6:	0001      	movs	r1, r0
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	220f      	movs	r2, #15
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_RCC_ClockConfig+0x204>)
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	58d3      	ldr	r3, [r2, r3]
 8001bf8:	221f      	movs	r2, #31
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	000a      	movs	r2, r1
 8001bfe:	40da      	lsrs	r2, r3
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_ClockConfig+0x208>)
 8001c02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_ClockConfig+0x20c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff f8af 	bl	8000d6c <HAL_InitTick>
 8001c0e:	0003      	movs	r3, r0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b004      	add	sp, #16
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	00001388 	.word	0x00001388
 8001c20:	40021000 	.word	0x40021000
 8001c24:	fffff0ff 	.word	0xfffff0ff
 8001c28:	ffff8fff 	.word	0xffff8fff
 8001c2c:	080046d8 	.word	0x080046d8
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3e:	4b3c      	ldr	r3, [pc, #240]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2238      	movs	r2, #56	; 0x38
 8001c44:	4013      	ands	r3, r2
 8001c46:	d10f      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c48:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0adb      	lsrs	r3, r3, #11
 8001c4e:	2207      	movs	r2, #7
 8001c50:	4013      	ands	r3, r2
 8001c52:	2201      	movs	r2, #1
 8001c54:	409a      	lsls	r2, r3
 8001c56:	0013      	movs	r3, r2
 8001c58:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	4835      	ldr	r0, [pc, #212]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c5e:	f7fe fa63 	bl	8000128 <__udivsi3>
 8001c62:	0003      	movs	r3, r0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	e05d      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2238      	movs	r2, #56	; 0x38
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c74:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	e054      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2238      	movs	r2, #56	; 0x38
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d138      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c86:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	2207      	movs	r2, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d10d      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	4824      	ldr	r0, [pc, #144]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ca8:	f7fe fa3e 	bl	8000128 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	0019      	movs	r1, r3
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	227f      	movs	r2, #127	; 0x7f
 8001cb8:	4013      	ands	r3, r2
 8001cba:	434b      	muls	r3, r1
 8001cbc:	617b      	str	r3, [r7, #20]
        break;
 8001cbe:	e00d      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	481c      	ldr	r0, [pc, #112]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cc4:	f7fe fa30 	bl	8000128 <__udivsi3>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	0019      	movs	r1, r3
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	227f      	movs	r2, #127	; 0x7f
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	434b      	muls	r3, r1
 8001cd8:	617b      	str	r3, [r7, #20]
        break;
 8001cda:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0f5b      	lsrs	r3, r3, #29
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	6978      	ldr	r0, [r7, #20]
 8001cee:	f7fe fa1b 	bl	8000128 <__udivsi3>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	e015      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2238      	movs	r2, #56	; 0x38
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d103      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2238      	movs	r2, #56	; 0x38
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b18      	cmp	r3, #24
 8001d16:	d103      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d18:	23fa      	movs	r3, #250	; 0xfa
 8001d1a:	01db      	lsls	r3, r3, #7
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	e001      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d24:	693b      	ldr	r3, [r7, #16]
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b006      	add	sp, #24
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	40021000 	.word	0x40021000
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	007a1200 	.word	0x007a1200

08001d3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d54:	f7ff fff2 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d58:	0004      	movs	r4, r0
 8001d5a:	f7ff fb3f 	bl	80013dc <LL_RCC_GetAPB1Prescaler>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	0b1a      	lsrs	r2, r3, #12
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	58d3      	ldr	r3, [r2, r3]
 8001d68:	221f      	movs	r2, #31
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	40dc      	lsrs	r4, r3
 8001d6e:	0023      	movs	r3, r4
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bdb0      	pop	{r4, r5, r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	08004718 	.word	0x08004718

08001d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d84:	2313      	movs	r3, #19
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d8c:	2312      	movs	r3, #18
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	029b      	lsls	r3, r3, #10
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d100      	bne.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001da0:	e0a3      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2011      	movs	r0, #17
 8001da4:	183b      	adds	r3, r7, r0
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001daa:	4bc3      	ldr	r3, [pc, #780]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	055b      	lsls	r3, r3, #21
 8001db2:	4013      	ands	r3, r2
 8001db4:	d110      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4bc0      	ldr	r3, [pc, #768]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dba:	4bbf      	ldr	r3, [pc, #764]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	0549      	lsls	r1, r1, #21
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dc4:	4bbc      	ldr	r3, [pc, #752]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	055b      	lsls	r3, r3, #21
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd2:	183b      	adds	r3, r7, r0
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd8:	4bb8      	ldr	r3, [pc, #736]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4bb7      	ldr	r3, [pc, #732]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	0049      	lsls	r1, r1, #1
 8001de2:	430a      	orrs	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001de6:	f7ff f81d 	bl	8000e24 <HAL_GetTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dee:	e00b      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df0:	f7ff f818 	bl	8000e24 <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d904      	bls.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001dfe:	2313      	movs	r3, #19
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	2203      	movs	r2, #3
 8001e04:	701a      	strb	r2, [r3, #0]
        break;
 8001e06:	e005      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e08:	4bac      	ldr	r3, [pc, #688]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4013      	ands	r3, r2
 8001e12:	d0ed      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001e14:	2313      	movs	r3, #19
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d154      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e1e:	4ba6      	ldr	r3, [pc, #664]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e22:	23c0      	movs	r3, #192	; 0xc0
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4013      	ands	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d019      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d014      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e3a:	4b9f      	ldr	r3, [pc, #636]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	4aa0      	ldr	r2, [pc, #640]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e44:	4b9c      	ldr	r3, [pc, #624]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e48:	4b9b      	ldr	r3, [pc, #620]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e4a:	2180      	movs	r1, #128	; 0x80
 8001e4c:	0249      	lsls	r1, r1, #9
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e52:	4b99      	ldr	r3, [pc, #612]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e56:	4b98      	ldr	r3, [pc, #608]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e58:	499a      	ldr	r1, [pc, #616]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001e5a:	400a      	ands	r2, r1
 8001e5c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e5e:	4b96      	ldr	r3, [pc, #600]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2201      	movs	r2, #1
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d016      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7fe ffda 	bl	8000e24 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e74:	e00c      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7fe ffd5 	bl	8000e24 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	4a91      	ldr	r2, [pc, #580]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d904      	bls.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e86:	2313      	movs	r3, #19
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	701a      	strb	r2, [r3, #0]
            break;
 8001e8e:	e004      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e90:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d0ed      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e9a:	2313      	movs	r3, #19
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ea4:	4b84      	ldr	r3, [pc, #528]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	4a85      	ldr	r2, [pc, #532]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb2:	4b81      	ldr	r3, [pc, #516]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001eb8:	e00c      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eba:	2312      	movs	r3, #18
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	2213      	movs	r2, #19
 8001ec0:	18ba      	adds	r2, r7, r2
 8001ec2:	7812      	ldrb	r2, [r2, #0]
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	e005      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	2213      	movs	r2, #19
 8001ece:	18ba      	adds	r2, r7, r2
 8001ed0:	7812      	ldrb	r2, [r2, #0]
 8001ed2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ed4:	2311      	movs	r3, #17
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d105      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ee2:	4b75      	ldr	r3, [pc, #468]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee4:	4979      	ldr	r1, [pc, #484]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d009      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ef4:	4b70      	ldr	r3, [pc, #448]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef8:	2203      	movs	r2, #3
 8001efa:	4393      	bics	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4b6d      	ldr	r3, [pc, #436]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d009      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f12:	4b69      	ldr	r3, [pc, #420]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	220c      	movs	r2, #12
 8001f18:	4393      	bics	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4b65      	ldr	r3, [pc, #404]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f30:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	4a66      	ldr	r2, [pc, #408]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d009      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f50:	4b59      	ldr	r3, [pc, #356]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	4a5f      	ldr	r2, [pc, #380]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f60:	430a      	orrs	r2, r1
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d009      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f70:	4b51      	ldr	r3, [pc, #324]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	4a58      	ldr	r2, [pc, #352]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69da      	ldr	r2, [r3, #28]
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	01db      	lsls	r3, r3, #7
 8001faa:	4013      	ands	r3, r2
 8001fac:	d015      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fae:	4b42      	ldr	r3, [pc, #264]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	0899      	lsrs	r1, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1a      	ldr	r2, [r3, #32]
 8001fba:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	05db      	lsls	r3, r3, #23
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d106      	bne.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fcc:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	0249      	lsls	r1, r1, #9
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	031b      	lsls	r3, r3, #12
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	2240      	movs	r2, #64	; 0x40
 8001fec:	4393      	bics	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	039b      	lsls	r3, r3, #14
 8002002:	4013      	ands	r3, r2
 8002004:	d016      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002006:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200a:	4a35      	ldr	r2, [pc, #212]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800200c:	4013      	ands	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002016:	430a      	orrs	r2, r1
 8002018:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	03db      	lsls	r3, r3, #15
 8002022:	429a      	cmp	r2, r3
 8002024:	d106      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	0449      	lsls	r1, r1, #17
 8002030:	430a      	orrs	r2, r1
 8002032:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	03db      	lsls	r3, r3, #15
 800203c:	4013      	ands	r3, r2
 800203e:	d016      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002046:	4013      	ands	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002050:	430a      	orrs	r2, r1
 8002052:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	045b      	lsls	r3, r3, #17
 800205c:	429a      	cmp	r2, r3
 800205e:	d106      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002066:	2180      	movs	r1, #128	; 0x80
 8002068:	0449      	lsls	r1, r1, #17
 800206a:	430a      	orrs	r2, r1
 800206c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4013      	ands	r3, r2
 8002078:	d016      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002080:	4013      	ands	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800208a:	430a      	orrs	r2, r1
 800208c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	01db      	lsls	r3, r3, #7
 8002096:	429a      	cmp	r2, r3
 8002098:	d106      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020a0:	2180      	movs	r1, #128	; 0x80
 80020a2:	0249      	lsls	r1, r1, #9
 80020a4:	430a      	orrs	r2, r1
 80020a6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80020a8:	2312      	movs	r3, #18
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	781b      	ldrb	r3, [r3, #0]
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b006      	add	sp, #24
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40007000 	.word	0x40007000
 80020c0:	fffffcff 	.word	0xfffffcff
 80020c4:	fffeffff 	.word	0xfffeffff
 80020c8:	00001388 	.word	0x00001388
 80020cc:	efffffff 	.word	0xefffffff
 80020d0:	fffff3ff 	.word	0xfffff3ff
 80020d4:	fff3ffff 	.word	0xfff3ffff
 80020d8:	ffcfffff 	.word	0xffcfffff
 80020dc:	ffffcfff 	.word	0xffffcfff
 80020e0:	ffbfffff 	.word	0xffbfffff
 80020e4:	feffffff 	.word	0xfeffffff
 80020e8:	ffff3fff 	.word	0xffff3fff

080020ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e04a      	b.n	8002194 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	223d      	movs	r2, #61	; 0x3d
 8002102:	5c9b      	ldrb	r3, [r3, r2]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d107      	bne.n	800211a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	223c      	movs	r2, #60	; 0x3c
 800210e:	2100      	movs	r1, #0
 8002110:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f7fe fccf 	bl	8000ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	223d      	movs	r2, #61	; 0x3d
 800211e:	2102      	movs	r1, #2
 8002120:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3304      	adds	r3, #4
 800212a:	0019      	movs	r1, r3
 800212c:	0010      	movs	r0, r2
 800212e:	f000 fc1f 	bl	8002970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2248      	movs	r2, #72	; 0x48
 8002136:	2101      	movs	r1, #1
 8002138:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	223e      	movs	r2, #62	; 0x3e
 800213e:	2101      	movs	r1, #1
 8002140:	5499      	strb	r1, [r3, r2]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	223f      	movs	r2, #63	; 0x3f
 8002146:	2101      	movs	r1, #1
 8002148:	5499      	strb	r1, [r3, r2]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	2101      	movs	r1, #1
 8002150:	5499      	strb	r1, [r3, r2]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2241      	movs	r2, #65	; 0x41
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2242      	movs	r2, #66	; 0x42
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2243      	movs	r2, #67	; 0x43
 8002166:	2101      	movs	r1, #1
 8002168:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2244      	movs	r2, #68	; 0x44
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2245      	movs	r2, #69	; 0x45
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2246      	movs	r2, #70	; 0x46
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2247      	movs	r2, #71	; 0x47
 8002186:	2101      	movs	r1, #1
 8002188:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	223d      	movs	r2, #61	; 0x3d
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e04a      	b.n	8002244 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	223d      	movs	r2, #61	; 0x3d
 80021b2:	5c9b      	ldrb	r3, [r3, r2]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d107      	bne.n	80021ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	223c      	movs	r2, #60	; 0x3c
 80021be:	2100      	movs	r1, #0
 80021c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 f841 	bl	800224c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	223d      	movs	r2, #61	; 0x3d
 80021ce:	2102      	movs	r1, #2
 80021d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3304      	adds	r3, #4
 80021da:	0019      	movs	r1, r3
 80021dc:	0010      	movs	r0, r2
 80021de:	f000 fbc7 	bl	8002970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2248      	movs	r2, #72	; 0x48
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	223e      	movs	r2, #62	; 0x3e
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	223f      	movs	r2, #63	; 0x3f
 80021f6:	2101      	movs	r1, #1
 80021f8:	5499      	strb	r1, [r3, r2]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2240      	movs	r2, #64	; 0x40
 80021fe:	2101      	movs	r1, #1
 8002200:	5499      	strb	r1, [r3, r2]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2241      	movs	r2, #65	; 0x41
 8002206:	2101      	movs	r1, #1
 8002208:	5499      	strb	r1, [r3, r2]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2242      	movs	r2, #66	; 0x42
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2243      	movs	r2, #67	; 0x43
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2244      	movs	r2, #68	; 0x44
 800221e:	2101      	movs	r1, #1
 8002220:	5499      	strb	r1, [r3, r2]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2245      	movs	r2, #69	; 0x45
 8002226:	2101      	movs	r1, #1
 8002228:	5499      	strb	r1, [r3, r2]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2246      	movs	r2, #70	; 0x46
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2247      	movs	r2, #71	; 0x47
 8002236:	2101      	movs	r1, #1
 8002238:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	223d      	movs	r2, #61	; 0x3d
 800223e:	2101      	movs	r1, #1
 8002240:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002266:	230f      	movs	r3, #15
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d108      	bne.n	8002286 <HAL_TIM_PWM_Start_IT+0x2a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	223e      	movs	r2, #62	; 0x3e
 8002278:	5c9b      	ldrb	r3, [r3, r2]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	4193      	sbcs	r3, r2
 8002282:	b2db      	uxtb	r3, r3
 8002284:	e037      	b.n	80022f6 <HAL_TIM_PWM_Start_IT+0x9a>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d108      	bne.n	800229e <HAL_TIM_PWM_Start_IT+0x42>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	223f      	movs	r2, #63	; 0x3f
 8002290:	5c9b      	ldrb	r3, [r3, r2]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	1e5a      	subs	r2, r3, #1
 8002298:	4193      	sbcs	r3, r2
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e02b      	b.n	80022f6 <HAL_TIM_PWM_Start_IT+0x9a>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d108      	bne.n	80022b6 <HAL_TIM_PWM_Start_IT+0x5a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2240      	movs	r2, #64	; 0x40
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	1e5a      	subs	r2, r3, #1
 80022b0:	4193      	sbcs	r3, r2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	e01f      	b.n	80022f6 <HAL_TIM_PWM_Start_IT+0x9a>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d108      	bne.n	80022ce <HAL_TIM_PWM_Start_IT+0x72>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2241      	movs	r2, #65	; 0x41
 80022c0:	5c9b      	ldrb	r3, [r3, r2]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	1e5a      	subs	r2, r3, #1
 80022c8:	4193      	sbcs	r3, r2
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e013      	b.n	80022f6 <HAL_TIM_PWM_Start_IT+0x9a>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d108      	bne.n	80022e6 <HAL_TIM_PWM_Start_IT+0x8a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2242      	movs	r2, #66	; 0x42
 80022d8:	5c9b      	ldrb	r3, [r3, r2]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	1e5a      	subs	r2, r3, #1
 80022e0:	4193      	sbcs	r3, r2
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	e007      	b.n	80022f6 <HAL_TIM_PWM_Start_IT+0x9a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2243      	movs	r2, #67	; 0x43
 80022ea:	5c9b      	ldrb	r3, [r3, r2]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	4193      	sbcs	r3, r2
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_TIM_PWM_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0ce      	b.n	800249c <HAL_TIM_PWM_Start_IT+0x240>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d104      	bne.n	800230e <HAL_TIM_PWM_Start_IT+0xb2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	223e      	movs	r2, #62	; 0x3e
 8002308:	2102      	movs	r1, #2
 800230a:	5499      	strb	r1, [r3, r2]
 800230c:	e023      	b.n	8002356 <HAL_TIM_PWM_Start_IT+0xfa>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d104      	bne.n	800231e <HAL_TIM_PWM_Start_IT+0xc2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	223f      	movs	r2, #63	; 0x3f
 8002318:	2102      	movs	r1, #2
 800231a:	5499      	strb	r1, [r3, r2]
 800231c:	e01b      	b.n	8002356 <HAL_TIM_PWM_Start_IT+0xfa>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d104      	bne.n	800232e <HAL_TIM_PWM_Start_IT+0xd2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2240      	movs	r2, #64	; 0x40
 8002328:	2102      	movs	r1, #2
 800232a:	5499      	strb	r1, [r3, r2]
 800232c:	e013      	b.n	8002356 <HAL_TIM_PWM_Start_IT+0xfa>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b0c      	cmp	r3, #12
 8002332:	d104      	bne.n	800233e <HAL_TIM_PWM_Start_IT+0xe2>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2241      	movs	r2, #65	; 0x41
 8002338:	2102      	movs	r1, #2
 800233a:	5499      	strb	r1, [r3, r2]
 800233c:	e00b      	b.n	8002356 <HAL_TIM_PWM_Start_IT+0xfa>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b10      	cmp	r3, #16
 8002342:	d104      	bne.n	800234e <HAL_TIM_PWM_Start_IT+0xf2>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2242      	movs	r2, #66	; 0x42
 8002348:	2102      	movs	r1, #2
 800234a:	5499      	strb	r1, [r3, r2]
 800234c:	e003      	b.n	8002356 <HAL_TIM_PWM_Start_IT+0xfa>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2243      	movs	r2, #67	; 0x43
 8002352:	2102      	movs	r1, #2
 8002354:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d02a      	beq.n	80023b2 <HAL_TIM_PWM_Start_IT+0x156>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d830      	bhi.n	80023c4 <HAL_TIM_PWM_Start_IT+0x168>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d01b      	beq.n	80023a0 <HAL_TIM_PWM_Start_IT+0x144>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b08      	cmp	r3, #8
 800236c:	d82a      	bhi.n	80023c4 <HAL_TIM_PWM_Start_IT+0x168>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_TIM_PWM_Start_IT+0x120>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b04      	cmp	r3, #4
 8002378:	d009      	beq.n	800238e <HAL_TIM_PWM_Start_IT+0x132>
 800237a:	e023      	b.n	80023c4 <HAL_TIM_PWM_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2102      	movs	r1, #2
 8002388:	430a      	orrs	r2, r1
 800238a:	60da      	str	r2, [r3, #12]
      break;
 800238c:	e01f      	b.n	80023ce <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2104      	movs	r1, #4
 800239a:	430a      	orrs	r2, r1
 800239c:	60da      	str	r2, [r3, #12]
      break;
 800239e:	e016      	b.n	80023ce <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2108      	movs	r1, #8
 80023ac:	430a      	orrs	r2, r1
 80023ae:	60da      	str	r2, [r3, #12]
      break;
 80023b0:	e00d      	b.n	80023ce <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2110      	movs	r1, #16
 80023be:	430a      	orrs	r2, r1
 80023c0:	60da      	str	r2, [r3, #12]
      break;
 80023c2:	e004      	b.n	80023ce <HAL_TIM_PWM_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 80023c4:	230f      	movs	r3, #15
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
      break;
 80023cc:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80023ce:	230f      	movs	r3, #15
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d15e      	bne.n	8002496 <HAL_TIM_PWM_Start_IT+0x23a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6839      	ldr	r1, [r7, #0]
 80023de:	2201      	movs	r2, #1
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fe09 	bl	8002ff8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2e      	ldr	r2, [pc, #184]	; (80024a4 <HAL_TIM_PWM_Start_IT+0x248>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00e      	beq.n	800240e <HAL_TIM_PWM_Start_IT+0x1b2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2c      	ldr	r2, [pc, #176]	; (80024a8 <HAL_TIM_PWM_Start_IT+0x24c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_TIM_PWM_Start_IT+0x1b2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a2b      	ldr	r2, [pc, #172]	; (80024ac <HAL_TIM_PWM_Start_IT+0x250>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <HAL_TIM_PWM_Start_IT+0x1b2>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <HAL_TIM_PWM_Start_IT+0x254>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_TIM_PWM_Start_IT+0x1b6>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_TIM_PWM_Start_IT+0x1b8>
 8002412:	2300      	movs	r3, #0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_TIM_PWM_Start_IT+0x1ce>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	0209      	lsls	r1, r1, #8
 8002426:	430a      	orrs	r2, r1
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_TIM_PWM_Start_IT+0x248>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00f      	beq.n	8002454 <HAL_TIM_PWM_Start_IT+0x1f8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	05db      	lsls	r3, r3, #23
 800243c:	429a      	cmp	r2, r3
 800243e:	d009      	beq.n	8002454 <HAL_TIM_PWM_Start_IT+0x1f8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_TIM_PWM_Start_IT+0x258>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d004      	beq.n	8002454 <HAL_TIM_PWM_Start_IT+0x1f8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a16      	ldr	r2, [pc, #88]	; (80024a8 <HAL_TIM_PWM_Start_IT+0x24c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d116      	bne.n	8002482 <HAL_TIM_PWM_Start_IT+0x226>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_TIM_PWM_Start_IT+0x25c>)
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b06      	cmp	r3, #6
 8002464:	d016      	beq.n	8002494 <HAL_TIM_PWM_Start_IT+0x238>
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	025b      	lsls	r3, r3, #9
 800246c:	429a      	cmp	r2, r3
 800246e:	d011      	beq.n	8002494 <HAL_TIM_PWM_Start_IT+0x238>
      {
        __HAL_TIM_ENABLE(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2101      	movs	r1, #1
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	e008      	b.n	8002494 <HAL_TIM_PWM_Start_IT+0x238>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2101      	movs	r1, #1
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e000      	b.n	8002496 <HAL_TIM_PWM_Start_IT+0x23a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002494:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002496:	230f      	movs	r3, #15
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	781b      	ldrb	r3, [r3, #0]
}
 800249c:	0018      	movs	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	b004      	add	sp, #16
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40014000 	.word	0x40014000
 80024ac:	40014400 	.word	0x40014400
 80024b0:	40014800 	.word	0x40014800
 80024b4:	40000400 	.word	0x40000400
 80024b8:	00010007 	.word	0x00010007

080024bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2202      	movs	r2, #2
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d124      	bne.n	800251c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2202      	movs	r2, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11d      	bne.n	800251c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2203      	movs	r2, #3
 80024e6:	4252      	negs	r2, r2
 80024e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2203      	movs	r2, #3
 80024f8:	4013      	ands	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fa1e 	bl	8002940 <HAL_TIM_IC_CaptureCallback>
 8002504:	e007      	b.n	8002516 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 fa11 	bl	8002930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	0018      	movs	r0, r3
 8002512:	f000 fa1d 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2204      	movs	r2, #4
 8002524:	4013      	ands	r3, r2
 8002526:	2b04      	cmp	r3, #4
 8002528:	d125      	bne.n	8002576 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2204      	movs	r2, #4
 8002532:	4013      	ands	r3, r2
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11e      	bne.n	8002576 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2205      	movs	r2, #5
 800253e:	4252      	negs	r2, r2
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2202      	movs	r2, #2
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4013      	ands	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f9f1 	bl	8002940 <HAL_TIM_IC_CaptureCallback>
 800255e:	e007      	b.n	8002570 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f9e4 	bl	8002930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f9f0 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2208      	movs	r2, #8
 800257e:	4013      	ands	r3, r2
 8002580:	2b08      	cmp	r3, #8
 8002582:	d124      	bne.n	80025ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2208      	movs	r2, #8
 800258c:	4013      	ands	r3, r2
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11d      	bne.n	80025ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2209      	movs	r2, #9
 8002598:	4252      	negs	r2, r2
 800259a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2204      	movs	r2, #4
 80025a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2203      	movs	r2, #3
 80025aa:	4013      	ands	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 f9c5 	bl	8002940 <HAL_TIM_IC_CaptureCallback>
 80025b6:	e007      	b.n	80025c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 f9b8 	bl	8002930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 f9c4 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2210      	movs	r2, #16
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d125      	bne.n	8002628 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2210      	movs	r2, #16
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d11e      	bne.n	8002628 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2211      	movs	r2, #17
 80025f0:	4252      	negs	r2, r2
 80025f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2208      	movs	r2, #8
 80025f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	23c0      	movs	r3, #192	; 0xc0
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4013      	ands	r3, r2
 8002606:	d004      	beq.n	8002612 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0018      	movs	r0, r3
 800260c:	f000 f998 	bl	8002940 <HAL_TIM_IC_CaptureCallback>
 8002610:	e007      	b.n	8002622 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	0018      	movs	r0, r3
 8002616:	f000 f98b 	bl	8002930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0018      	movs	r0, r3
 800261e:	f000 f997 	bl	8002950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2201      	movs	r2, #1
 8002630:	4013      	ands	r3, r2
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10f      	bne.n	8002656 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	4013      	ands	r3, r2
 8002640:	2b01      	cmp	r3, #1
 8002642:	d108      	bne.n	8002656 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2202      	movs	r2, #2
 800264a:	4252      	negs	r2, r2
 800264c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 f965 	bl	8002920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2280      	movs	r2, #128	; 0x80
 800265e:	4013      	ands	r3, r2
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d10f      	bne.n	8002684 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	4013      	ands	r3, r2
 800266e:	2b80      	cmp	r3, #128	; 0x80
 8002670:	d108      	bne.n	8002684 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2281      	movs	r2, #129	; 0x81
 8002678:	4252      	negs	r2, r2
 800267a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fce5 	bl	800304e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	401a      	ands	r2, r3
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	429a      	cmp	r2, r3
 8002696:	d10e      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b80      	cmp	r3, #128	; 0x80
 80026a4:	d107      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_TIM_IRQHandler+0x260>)
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fcd4 	bl	800305e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2240      	movs	r2, #64	; 0x40
 80026be:	4013      	ands	r3, r2
 80026c0:	2b40      	cmp	r3, #64	; 0x40
 80026c2:	d10f      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2240      	movs	r2, #64	; 0x40
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d108      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2241      	movs	r2, #65	; 0x41
 80026d8:	4252      	negs	r2, r2
 80026da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	0018      	movs	r0, r3
 80026e0:	f000 f93e 	bl	8002960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2220      	movs	r2, #32
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d10f      	bne.n	8002712 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d108      	bne.n	8002712 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2221      	movs	r2, #33	; 0x21
 8002706:	4252      	negs	r2, r2
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	0018      	movs	r0, r3
 800270e:	f000 fc96 	bl	800303e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b002      	add	sp, #8
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	fffffeff 	.word	0xfffffeff

08002720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2317      	movs	r3, #23
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	223c      	movs	r2, #60	; 0x3c
 8002738:	5c9b      	ldrb	r3, [r3, r2]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x22>
 800273e:	2302      	movs	r3, #2
 8002740:	e0e5      	b.n	800290e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	223c      	movs	r2, #60	; 0x3c
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b14      	cmp	r3, #20
 800274e:	d900      	bls.n	8002752 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002750:	e0d1      	b.n	80028f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	009a      	lsls	r2, r3, #2
 8002756:	4b70      	ldr	r3, [pc, #448]	; (8002918 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002758:	18d3      	adds	r3, r2, r3
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	0011      	movs	r1, r2
 8002766:	0018      	movs	r0, r3
 8002768:	f000 f982 	bl	8002a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2108      	movs	r1, #8
 8002778:	430a      	orrs	r2, r1
 800277a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2104      	movs	r1, #4
 8002788:	438a      	bics	r2, r1
 800278a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6999      	ldr	r1, [r3, #24]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	619a      	str	r2, [r3, #24]
      break;
 800279e:	e0af      	b.n	8002900 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 f9eb 	bl	8002b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	0109      	lsls	r1, r1, #4
 80027bc:	430a      	orrs	r2, r1
 80027be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4954      	ldr	r1, [pc, #336]	; (800291c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80027cc:	400a      	ands	r2, r1
 80027ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6999      	ldr	r1, [r3, #24]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	021a      	lsls	r2, r3, #8
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	619a      	str	r2, [r3, #24]
      break;
 80027e4:	e08c      	b.n	8002900 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	0011      	movs	r1, r2
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fa4c 	bl	8002c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2108      	movs	r1, #8
 8002800:	430a      	orrs	r2, r1
 8002802:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2104      	movs	r1, #4
 8002810:	438a      	bics	r2, r1
 8002812:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69d9      	ldr	r1, [r3, #28]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	61da      	str	r2, [r3, #28]
      break;
 8002826:	e06b      	b.n	8002900 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	0011      	movs	r1, r2
 8002830:	0018      	movs	r0, r3
 8002832:	f000 fab3 	bl	8002d9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	0109      	lsls	r1, r1, #4
 8002844:	430a      	orrs	r2, r1
 8002846:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4932      	ldr	r1, [pc, #200]	; (800291c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002854:	400a      	ands	r2, r1
 8002856:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69d9      	ldr	r1, [r3, #28]
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	021a      	lsls	r2, r3, #8
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	61da      	str	r2, [r3, #28]
      break;
 800286c:	e048      	b.n	8002900 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	0011      	movs	r1, r2
 8002876:	0018      	movs	r0, r3
 8002878:	f000 fafa 	bl	8002e70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2108      	movs	r1, #8
 8002888:	430a      	orrs	r2, r1
 800288a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2104      	movs	r1, #4
 8002898:	438a      	bics	r2, r1
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028ae:	e027      	b.n	8002900 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	0011      	movs	r1, r2
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fb39 	bl	8002f30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2180      	movs	r1, #128	; 0x80
 80028ca:	0109      	lsls	r1, r1, #4
 80028cc:	430a      	orrs	r2, r1
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4910      	ldr	r1, [pc, #64]	; (800291c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80028dc:	400a      	ands	r2, r1
 80028de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	021a      	lsls	r2, r3, #8
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028f4:	e004      	b.n	8002900 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80028f6:	2317      	movs	r3, #23
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
      break;
 80028fe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	223c      	movs	r2, #60	; 0x3c
 8002904:	2100      	movs	r1, #0
 8002906:	5499      	strb	r1, [r3, r2]

  return status;
 8002908:	2317      	movs	r3, #23
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	781b      	ldrb	r3, [r3, #0]
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b006      	add	sp, #24
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	08004738 	.word	0x08004738
 800291c:	fffffbff 	.word	0xfffffbff

08002920 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	b002      	add	sp, #8
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}

08002970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a34      	ldr	r2, [pc, #208]	; (8002a54 <TIM_Base_SetConfig+0xe4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d008      	beq.n	800299a <TIM_Base_SetConfig+0x2a>
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	05db      	lsls	r3, r3, #23
 800298e:	429a      	cmp	r2, r3
 8002990:	d003      	beq.n	800299a <TIM_Base_SetConfig+0x2a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a30      	ldr	r2, [pc, #192]	; (8002a58 <TIM_Base_SetConfig+0xe8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d108      	bne.n	80029ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2270      	movs	r2, #112	; 0x70
 800299e:	4393      	bics	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a29      	ldr	r2, [pc, #164]	; (8002a54 <TIM_Base_SetConfig+0xe4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d018      	beq.n	80029e6 <TIM_Base_SetConfig+0x76>
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	05db      	lsls	r3, r3, #23
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d013      	beq.n	80029e6 <TIM_Base_SetConfig+0x76>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <TIM_Base_SetConfig+0xe8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00f      	beq.n	80029e6 <TIM_Base_SetConfig+0x76>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <TIM_Base_SetConfig+0xec>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00b      	beq.n	80029e6 <TIM_Base_SetConfig+0x76>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a23      	ldr	r2, [pc, #140]	; (8002a60 <TIM_Base_SetConfig+0xf0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d007      	beq.n	80029e6 <TIM_Base_SetConfig+0x76>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <TIM_Base_SetConfig+0xf4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d003      	beq.n	80029e6 <TIM_Base_SetConfig+0x76>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <TIM_Base_SetConfig+0xf8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d108      	bne.n	80029f8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <TIM_Base_SetConfig+0xfc>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	4393      	bics	r3, r2
 80029fe:	001a      	movs	r2, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <TIM_Base_SetConfig+0xe4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <TIM_Base_SetConfig+0xce>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a0d      	ldr	r2, [pc, #52]	; (8002a60 <TIM_Base_SetConfig+0xf0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_Base_SetConfig+0xce>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <TIM_Base_SetConfig+0xf4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_Base_SetConfig+0xce>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <TIM_Base_SetConfig+0xf8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d103      	bne.n	8002a46 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	615a      	str	r2, [r3, #20]
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b004      	add	sp, #16
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40002000 	.word	0x40002000
 8002a60:	40014000 	.word	0x40014000
 8002a64:	40014400 	.word	0x40014400
 8002a68:	40014800 	.word	0x40014800
 8002a6c:	fffffcff 	.word	0xfffffcff

08002a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4393      	bics	r3, r2
 8002a82:	001a      	movs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4a32      	ldr	r2, [pc, #200]	; (8002b68 <TIM_OC1_SetConfig+0xf8>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	4393      	bics	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	4393      	bics	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <TIM_OC1_SetConfig+0xfc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00b      	beq.n	8002ae6 <TIM_OC1_SetConfig+0x76>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a27      	ldr	r2, [pc, #156]	; (8002b70 <TIM_OC1_SetConfig+0x100>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <TIM_OC1_SetConfig+0x76>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <TIM_OC1_SetConfig+0x104>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_OC1_SetConfig+0x76>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <TIM_OC1_SetConfig+0x108>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10c      	bne.n	8002b00 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2208      	movs	r2, #8
 8002aea:	4393      	bics	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2204      	movs	r2, #4
 8002afc:	4393      	bics	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a1a      	ldr	r2, [pc, #104]	; (8002b6c <TIM_OC1_SetConfig+0xfc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00b      	beq.n	8002b20 <TIM_OC1_SetConfig+0xb0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <TIM_OC1_SetConfig+0x100>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d007      	beq.n	8002b20 <TIM_OC1_SetConfig+0xb0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <TIM_OC1_SetConfig+0x104>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d003      	beq.n	8002b20 <TIM_OC1_SetConfig+0xb0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <TIM_OC1_SetConfig+0x108>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d111      	bne.n	8002b44 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4a16      	ldr	r2, [pc, #88]	; (8002b7c <TIM_OC1_SetConfig+0x10c>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <TIM_OC1_SetConfig+0x110>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	621a      	str	r2, [r3, #32]
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b006      	add	sp, #24
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	fffeff8f 	.word	0xfffeff8f
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40014000 	.word	0x40014000
 8002b74:	40014400 	.word	0x40014400
 8002b78:	40014800 	.word	0x40014800
 8002b7c:	fffffeff 	.word	0xfffffeff
 8002b80:	fffffdff 	.word	0xfffffdff

08002b84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	2210      	movs	r2, #16
 8002b94:	4393      	bics	r3, r2
 8002b96:	001a      	movs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4a2e      	ldr	r2, [pc, #184]	; (8002c6c <TIM_OC2_SetConfig+0xe8>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a2d      	ldr	r2, [pc, #180]	; (8002c70 <TIM_OC2_SetConfig+0xec>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	4393      	bics	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <TIM_OC2_SetConfig+0xf0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d10d      	bne.n	8002c02 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	4393      	bics	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2240      	movs	r2, #64	; 0x40
 8002bfe:	4393      	bics	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1b      	ldr	r2, [pc, #108]	; (8002c74 <TIM_OC2_SetConfig+0xf0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00b      	beq.n	8002c22 <TIM_OC2_SetConfig+0x9e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a1a      	ldr	r2, [pc, #104]	; (8002c78 <TIM_OC2_SetConfig+0xf4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d007      	beq.n	8002c22 <TIM_OC2_SetConfig+0x9e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a19      	ldr	r2, [pc, #100]	; (8002c7c <TIM_OC2_SetConfig+0xf8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d003      	beq.n	8002c22 <TIM_OC2_SetConfig+0x9e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <TIM_OC2_SetConfig+0xfc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d113      	bne.n	8002c4a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <TIM_OC2_SetConfig+0x100>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <TIM_OC2_SetConfig+0x104>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	621a      	str	r2, [r3, #32]
}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b006      	add	sp, #24
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	feff8fff 	.word	0xfeff8fff
 8002c70:	fffffcff 	.word	0xfffffcff
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40014000 	.word	0x40014000
 8002c7c:	40014400 	.word	0x40014400
 8002c80:	40014800 	.word	0x40014800
 8002c84:	fffffbff 	.word	0xfffffbff
 8002c88:	fffff7ff 	.word	0xfffff7ff

08002c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	4a35      	ldr	r2, [pc, #212]	; (8002d70 <TIM_OC3_SetConfig+0xe4>)
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <TIM_OC3_SetConfig+0xe8>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	4393      	bics	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <TIM_OC3_SetConfig+0xec>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a25      	ldr	r2, [pc, #148]	; (8002d7c <TIM_OC3_SetConfig+0xf0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10d      	bne.n	8002d06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <TIM_OC3_SetConfig+0xf4>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	4a20      	ldr	r2, [pc, #128]	; (8002d84 <TIM_OC3_SetConfig+0xf8>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <TIM_OC3_SetConfig+0xf0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00b      	beq.n	8002d26 <TIM_OC3_SetConfig+0x9a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <TIM_OC3_SetConfig+0xfc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d007      	beq.n	8002d26 <TIM_OC3_SetConfig+0x9a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1c      	ldr	r2, [pc, #112]	; (8002d8c <TIM_OC3_SetConfig+0x100>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <TIM_OC3_SetConfig+0x9a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1b      	ldr	r2, [pc, #108]	; (8002d90 <TIM_OC3_SetConfig+0x104>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d113      	bne.n	8002d4e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <TIM_OC3_SetConfig+0x108>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <TIM_OC3_SetConfig+0x10c>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	621a      	str	r2, [r3, #32]
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b006      	add	sp, #24
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	fffffeff 	.word	0xfffffeff
 8002d74:	fffeff8f 	.word	0xfffeff8f
 8002d78:	fffffdff 	.word	0xfffffdff
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	fffff7ff 	.word	0xfffff7ff
 8002d84:	fffffbff 	.word	0xfffffbff
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800
 8002d94:	ffffefff 	.word	0xffffefff
 8002d98:	ffffdfff 	.word	0xffffdfff

08002d9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4a28      	ldr	r2, [pc, #160]	; (8002e4c <TIM_OC4_SetConfig+0xb0>)
 8002dac:	401a      	ands	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a22      	ldr	r2, [pc, #136]	; (8002e50 <TIM_OC4_SetConfig+0xb4>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <TIM_OC4_SetConfig+0xb8>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <TIM_OC4_SetConfig+0xbc>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	031b      	lsls	r3, r3, #12
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <TIM_OC4_SetConfig+0xc0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00b      	beq.n	8002e14 <TIM_OC4_SetConfig+0x78>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <TIM_OC4_SetConfig+0xc4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <TIM_OC4_SetConfig+0x78>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <TIM_OC4_SetConfig+0xc8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_OC4_SetConfig+0x78>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <TIM_OC4_SetConfig+0xcc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d109      	bne.n	8002e28 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <TIM_OC4_SetConfig+0xd0>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	621a      	str	r2, [r3, #32]
}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b006      	add	sp, #24
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	ffffefff 	.word	0xffffefff
 8002e50:	feff8fff 	.word	0xfeff8fff
 8002e54:	fffffcff 	.word	0xfffffcff
 8002e58:	ffffdfff 	.word	0xffffdfff
 8002e5c:	40012c00 	.word	0x40012c00
 8002e60:	40014000 	.word	0x40014000
 8002e64:	40014400 	.word	0x40014400
 8002e68:	40014800 	.word	0x40014800
 8002e6c:	ffffbfff 	.word	0xffffbfff

08002e70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4a25      	ldr	r2, [pc, #148]	; (8002f14 <TIM_OC5_SetConfig+0xa4>)
 8002e80:	401a      	ands	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <TIM_OC5_SetConfig+0xa8>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <TIM_OC5_SetConfig+0xac>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <TIM_OC5_SetConfig+0xb0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00b      	beq.n	8002ede <TIM_OC5_SetConfig+0x6e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a16      	ldr	r2, [pc, #88]	; (8002f24 <TIM_OC5_SetConfig+0xb4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d007      	beq.n	8002ede <TIM_OC5_SetConfig+0x6e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <TIM_OC5_SetConfig+0xb8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d003      	beq.n	8002ede <TIM_OC5_SetConfig+0x6e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <TIM_OC5_SetConfig+0xbc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d109      	bne.n	8002ef2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <TIM_OC5_SetConfig+0xa4>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	621a      	str	r2, [r3, #32]
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b006      	add	sp, #24
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	fffeffff 	.word	0xfffeffff
 8002f18:	fffeff8f 	.word	0xfffeff8f
 8002f1c:	fffdffff 	.word	0xfffdffff
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40014000 	.word	0x40014000
 8002f28:	40014400 	.word	0x40014400
 8002f2c:	40014800 	.word	0x40014800

08002f30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <TIM_OC6_SetConfig+0xa8>)
 8002f40:	401a      	ands	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a20      	ldr	r2, [pc, #128]	; (8002fdc <TIM_OC6_SetConfig+0xac>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <TIM_OC6_SetConfig+0xb0>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	051b      	lsls	r3, r3, #20
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <TIM_OC6_SetConfig+0xb4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00b      	beq.n	8002fa0 <TIM_OC6_SetConfig+0x70>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <TIM_OC6_SetConfig+0xb8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d007      	beq.n	8002fa0 <TIM_OC6_SetConfig+0x70>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a16      	ldr	r2, [pc, #88]	; (8002fec <TIM_OC6_SetConfig+0xbc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_OC6_SetConfig+0x70>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <TIM_OC6_SetConfig+0xc0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d109      	bne.n	8002fb4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <TIM_OC6_SetConfig+0xc4>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	029b      	lsls	r3, r3, #10
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	621a      	str	r2, [r3, #32]
}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b006      	add	sp, #24
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	ffefffff 	.word	0xffefffff
 8002fdc:	feff8fff 	.word	0xfeff8fff
 8002fe0:	ffdfffff 	.word	0xffdfffff
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800
 8002ff4:	fffbffff 	.word	0xfffbffff

08002ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	221f      	movs	r2, #31
 8003008:	4013      	ands	r3, r2
 800300a:	2201      	movs	r2, #1
 800300c:	409a      	lsls	r2, r3
 800300e:	0013      	movs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	43d2      	mvns	r2, r2
 800301a:	401a      	ands	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1a      	ldr	r2, [r3, #32]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	211f      	movs	r1, #31
 8003028:	400b      	ands	r3, r1
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4099      	lsls	r1, r3
 800302e:	000b      	movs	r3, r1
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	621a      	str	r2, [r3, #32]
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b006      	add	sp, #24
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b002      	add	sp, #8
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b002      	add	sp, #8
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e046      	b.n	8003110 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2284      	movs	r2, #132	; 0x84
 8003086:	589b      	ldr	r3, [r3, r2]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d107      	bne.n	800309c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0018      	movs	r0, r3
 8003098:	f7fd fd74 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2284      	movs	r2, #132	; 0x84
 80030a0:	2124      	movs	r1, #36	; 0x24
 80030a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	438a      	bics	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 f8dc 	bl	8003274 <UART_SetConfig>
 80030bc:	0003      	movs	r3, r0
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e024      	b.n	8003110 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f000 fbab 	bl	800382c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	490d      	ldr	r1, [pc, #52]	; (8003118 <HAL_UART_Init+0xa8>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	212a      	movs	r1, #42	; 0x2a
 80030f2:	438a      	bics	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0018      	movs	r0, r3
 800310a:	f000 fc43 	bl	8003994 <UART_CheckIdleState>
 800310e:	0003      	movs	r3, r0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}
 8003118:	ffffb7ff 	.word	0xffffb7ff

0800311c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	1dbb      	adds	r3, r7, #6
 800312a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2284      	movs	r2, #132	; 0x84
 8003130:	589b      	ldr	r3, [r3, r2]
 8003132:	2b20      	cmp	r3, #32
 8003134:	d000      	beq.n	8003138 <HAL_UART_Transmit+0x1c>
 8003136:	e097      	b.n	8003268 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_UART_Transmit+0x2a>
 800313e:	1dbb      	adds	r3, r7, #6
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e08f      	b.n	800326a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	015b      	lsls	r3, r3, #5
 8003152:	429a      	cmp	r2, r3
 8003154:	d109      	bne.n	800316a <HAL_UART_Transmit+0x4e>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2201      	movs	r2, #1
 8003162:	4013      	ands	r3, r2
 8003164:	d001      	beq.n	800316a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e07f      	b.n	800326a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2280      	movs	r2, #128	; 0x80
 800316e:	5c9b      	ldrb	r3, [r3, r2]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_UART_Transmit+0x5c>
 8003174:	2302      	movs	r3, #2
 8003176:	e078      	b.n	800326a <HAL_UART_Transmit+0x14e>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	2101      	movs	r1, #1
 800317e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	228c      	movs	r2, #140	; 0x8c
 8003184:	2100      	movs	r1, #0
 8003186:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2284      	movs	r2, #132	; 0x84
 800318c:	2121      	movs	r1, #33	; 0x21
 800318e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003190:	f7fd fe48 	bl	8000e24 <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1dba      	adds	r2, r7, #6
 800319c:	2154      	movs	r1, #84	; 0x54
 800319e:	8812      	ldrh	r2, [r2, #0]
 80031a0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1dba      	adds	r2, r7, #6
 80031a6:	2156      	movs	r1, #86	; 0x56
 80031a8:	8812      	ldrh	r2, [r2, #0]
 80031aa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	015b      	lsls	r3, r3, #5
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d108      	bne.n	80031ca <HAL_UART_Transmit+0xae>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d104      	bne.n	80031ca <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	e003      	b.n	80031d2 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2280      	movs	r2, #128	; 0x80
 80031d6:	2100      	movs	r1, #0
 80031d8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80031da:	e02c      	b.n	8003236 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	0013      	movs	r3, r2
 80031e6:	2200      	movs	r2, #0
 80031e8:	2180      	movs	r1, #128	; 0x80
 80031ea:	f000 fc1d 	bl	8003a28 <UART_WaitOnFlagUntilTimeout>
 80031ee:	1e03      	subs	r3, r0, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e039      	b.n	800326a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10b      	bne.n	8003214 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	001a      	movs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	05d2      	lsls	r2, r2, #23
 8003208:	0dd2      	lsrs	r2, r2, #23
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	3302      	adds	r3, #2
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	e007      	b.n	8003224 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	781a      	ldrb	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2256      	movs	r2, #86	; 0x56
 8003228:	5a9b      	ldrh	r3, [r3, r2]
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b299      	uxth	r1, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2256      	movs	r2, #86	; 0x56
 8003234:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2256      	movs	r2, #86	; 0x56
 800323a:	5a9b      	ldrh	r3, [r3, r2]
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1cc      	bne.n	80031dc <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	0013      	movs	r3, r2
 800324c:	2200      	movs	r2, #0
 800324e:	2140      	movs	r1, #64	; 0x40
 8003250:	f000 fbea 	bl	8003a28 <UART_WaitOnFlagUntilTimeout>
 8003254:	1e03      	subs	r3, r0, #0
 8003256:	d001      	beq.n	800325c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e006      	b.n	800326a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2284      	movs	r2, #132	; 0x84
 8003260:	2120      	movs	r1, #32
 8003262:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	e000      	b.n	800326a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
  }
}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	b008      	add	sp, #32
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	b5b0      	push	{r4, r5, r7, lr}
 8003276:	b090      	sub	sp, #64	; 0x40
 8003278:	af00      	add	r7, sp, #0
 800327a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800327c:	231a      	movs	r3, #26
 800327e:	2220      	movs	r2, #32
 8003280:	4694      	mov	ip, r2
 8003282:	44bc      	add	ip, r7
 8003284:	4463      	add	r3, ip
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	431a      	orrs	r2, r3
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	431a      	orrs	r2, r3
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	4313      	orrs	r3, r2
 80032a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4ab9      	ldr	r2, [pc, #740]	; (8003590 <UART_SetConfig+0x31c>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	0019      	movs	r1, r3
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4ab5      	ldr	r2, [pc, #724]	; (8003594 <UART_SetConfig+0x320>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	0018      	movs	r0, r3
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	68d9      	ldr	r1, [r3, #12]
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	0003      	movs	r3, r0
 80032ce:	430b      	orrs	r3, r1
 80032d0:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4aae      	ldr	r2, [pc, #696]	; (8003598 <UART_SetConfig+0x324>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032e8:	4313      	orrs	r3, r2
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	4aaa      	ldr	r2, [pc, #680]	; (800359c <UART_SetConfig+0x328>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	0019      	movs	r1, r3
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fe:	430b      	orrs	r3, r1
 8003300:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	220f      	movs	r2, #15
 800330a:	4393      	bics	r3, r2
 800330c:	0018      	movs	r0, r3
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	0003      	movs	r3, r0
 8003318:	430b      	orrs	r3, r1
 800331a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a9f      	ldr	r2, [pc, #636]	; (80035a0 <UART_SetConfig+0x32c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d136      	bne.n	8003394 <UART_SetConfig+0x120>
 8003326:	4b9f      	ldr	r3, [pc, #636]	; (80035a4 <UART_SetConfig+0x330>)
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	2203      	movs	r2, #3
 800332c:	4013      	ands	r3, r2
 800332e:	2b03      	cmp	r3, #3
 8003330:	d020      	beq.n	8003374 <UART_SetConfig+0x100>
 8003332:	d827      	bhi.n	8003384 <UART_SetConfig+0x110>
 8003334:	2b02      	cmp	r3, #2
 8003336:	d00d      	beq.n	8003354 <UART_SetConfig+0xe0>
 8003338:	d824      	bhi.n	8003384 <UART_SetConfig+0x110>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <UART_SetConfig+0xd0>
 800333e:	2b01      	cmp	r3, #1
 8003340:	d010      	beq.n	8003364 <UART_SetConfig+0xf0>
 8003342:	e01f      	b.n	8003384 <UART_SetConfig+0x110>
 8003344:	231b      	movs	r3, #27
 8003346:	2220      	movs	r2, #32
 8003348:	4694      	mov	ip, r2
 800334a:	44bc      	add	ip, r7
 800334c:	4463      	add	r3, ip
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e0c5      	b.n	80034e0 <UART_SetConfig+0x26c>
 8003354:	231b      	movs	r3, #27
 8003356:	2220      	movs	r2, #32
 8003358:	4694      	mov	ip, r2
 800335a:	44bc      	add	ip, r7
 800335c:	4463      	add	r3, ip
 800335e:	2202      	movs	r2, #2
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e0bd      	b.n	80034e0 <UART_SetConfig+0x26c>
 8003364:	231b      	movs	r3, #27
 8003366:	2220      	movs	r2, #32
 8003368:	4694      	mov	ip, r2
 800336a:	44bc      	add	ip, r7
 800336c:	4463      	add	r3, ip
 800336e:	2204      	movs	r2, #4
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e0b5      	b.n	80034e0 <UART_SetConfig+0x26c>
 8003374:	231b      	movs	r3, #27
 8003376:	2220      	movs	r2, #32
 8003378:	4694      	mov	ip, r2
 800337a:	44bc      	add	ip, r7
 800337c:	4463      	add	r3, ip
 800337e:	2208      	movs	r2, #8
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e0ad      	b.n	80034e0 <UART_SetConfig+0x26c>
 8003384:	231b      	movs	r3, #27
 8003386:	2220      	movs	r2, #32
 8003388:	4694      	mov	ip, r2
 800338a:	44bc      	add	ip, r7
 800338c:	4463      	add	r3, ip
 800338e:	2210      	movs	r2, #16
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e0a5      	b.n	80034e0 <UART_SetConfig+0x26c>
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a83      	ldr	r2, [pc, #524]	; (80035a8 <UART_SetConfig+0x334>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d136      	bne.n	800340c <UART_SetConfig+0x198>
 800339e:	4b81      	ldr	r3, [pc, #516]	; (80035a4 <UART_SetConfig+0x330>)
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	220c      	movs	r2, #12
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	d020      	beq.n	80033ec <UART_SetConfig+0x178>
 80033aa:	d827      	bhi.n	80033fc <UART_SetConfig+0x188>
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d00d      	beq.n	80033cc <UART_SetConfig+0x158>
 80033b0:	d824      	bhi.n	80033fc <UART_SetConfig+0x188>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <UART_SetConfig+0x148>
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d010      	beq.n	80033dc <UART_SetConfig+0x168>
 80033ba:	e01f      	b.n	80033fc <UART_SetConfig+0x188>
 80033bc:	231b      	movs	r3, #27
 80033be:	2220      	movs	r2, #32
 80033c0:	4694      	mov	ip, r2
 80033c2:	44bc      	add	ip, r7
 80033c4:	4463      	add	r3, ip
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	e089      	b.n	80034e0 <UART_SetConfig+0x26c>
 80033cc:	231b      	movs	r3, #27
 80033ce:	2220      	movs	r2, #32
 80033d0:	4694      	mov	ip, r2
 80033d2:	44bc      	add	ip, r7
 80033d4:	4463      	add	r3, ip
 80033d6:	2202      	movs	r2, #2
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	e081      	b.n	80034e0 <UART_SetConfig+0x26c>
 80033dc:	231b      	movs	r3, #27
 80033de:	2220      	movs	r2, #32
 80033e0:	4694      	mov	ip, r2
 80033e2:	44bc      	add	ip, r7
 80033e4:	4463      	add	r3, ip
 80033e6:	2204      	movs	r2, #4
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e079      	b.n	80034e0 <UART_SetConfig+0x26c>
 80033ec:	231b      	movs	r3, #27
 80033ee:	2220      	movs	r2, #32
 80033f0:	4694      	mov	ip, r2
 80033f2:	44bc      	add	ip, r7
 80033f4:	4463      	add	r3, ip
 80033f6:	2208      	movs	r2, #8
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e071      	b.n	80034e0 <UART_SetConfig+0x26c>
 80033fc:	231b      	movs	r3, #27
 80033fe:	2220      	movs	r2, #32
 8003400:	4694      	mov	ip, r2
 8003402:	44bc      	add	ip, r7
 8003404:	4463      	add	r3, ip
 8003406:	2210      	movs	r2, #16
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	e069      	b.n	80034e0 <UART_SetConfig+0x26c>
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a66      	ldr	r2, [pc, #408]	; (80035ac <UART_SetConfig+0x338>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d107      	bne.n	8003426 <UART_SetConfig+0x1b2>
 8003416:	231b      	movs	r3, #27
 8003418:	2220      	movs	r2, #32
 800341a:	4694      	mov	ip, r2
 800341c:	44bc      	add	ip, r7
 800341e:	4463      	add	r3, ip
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	e05c      	b.n	80034e0 <UART_SetConfig+0x26c>
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a61      	ldr	r2, [pc, #388]	; (80035b0 <UART_SetConfig+0x33c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d107      	bne.n	8003440 <UART_SetConfig+0x1cc>
 8003430:	231b      	movs	r3, #27
 8003432:	2220      	movs	r2, #32
 8003434:	4694      	mov	ip, r2
 8003436:	44bc      	add	ip, r7
 8003438:	4463      	add	r3, ip
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	e04f      	b.n	80034e0 <UART_SetConfig+0x26c>
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a54      	ldr	r2, [pc, #336]	; (8003598 <UART_SetConfig+0x324>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d143      	bne.n	80034d2 <UART_SetConfig+0x25e>
 800344a:	4b56      	ldr	r3, [pc, #344]	; (80035a4 <UART_SetConfig+0x330>)
 800344c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800344e:	23c0      	movs	r3, #192	; 0xc0
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	4013      	ands	r3, r2
 8003454:	22c0      	movs	r2, #192	; 0xc0
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	4293      	cmp	r3, r2
 800345a:	d02a      	beq.n	80034b2 <UART_SetConfig+0x23e>
 800345c:	22c0      	movs	r2, #192	; 0xc0
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	4293      	cmp	r3, r2
 8003462:	d82e      	bhi.n	80034c2 <UART_SetConfig+0x24e>
 8003464:	2280      	movs	r2, #128	; 0x80
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	4293      	cmp	r3, r2
 800346a:	d012      	beq.n	8003492 <UART_SetConfig+0x21e>
 800346c:	2280      	movs	r2, #128	; 0x80
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	4293      	cmp	r3, r2
 8003472:	d826      	bhi.n	80034c2 <UART_SetConfig+0x24e>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <UART_SetConfig+0x20e>
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	00d2      	lsls	r2, r2, #3
 800347c:	4293      	cmp	r3, r2
 800347e:	d010      	beq.n	80034a2 <UART_SetConfig+0x22e>
 8003480:	e01f      	b.n	80034c2 <UART_SetConfig+0x24e>
 8003482:	231b      	movs	r3, #27
 8003484:	2220      	movs	r2, #32
 8003486:	4694      	mov	ip, r2
 8003488:	44bc      	add	ip, r7
 800348a:	4463      	add	r3, ip
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e026      	b.n	80034e0 <UART_SetConfig+0x26c>
 8003492:	231b      	movs	r3, #27
 8003494:	2220      	movs	r2, #32
 8003496:	4694      	mov	ip, r2
 8003498:	44bc      	add	ip, r7
 800349a:	4463      	add	r3, ip
 800349c:	2202      	movs	r2, #2
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	e01e      	b.n	80034e0 <UART_SetConfig+0x26c>
 80034a2:	231b      	movs	r3, #27
 80034a4:	2220      	movs	r2, #32
 80034a6:	4694      	mov	ip, r2
 80034a8:	44bc      	add	ip, r7
 80034aa:	4463      	add	r3, ip
 80034ac:	2204      	movs	r2, #4
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	e016      	b.n	80034e0 <UART_SetConfig+0x26c>
 80034b2:	231b      	movs	r3, #27
 80034b4:	2220      	movs	r2, #32
 80034b6:	4694      	mov	ip, r2
 80034b8:	44bc      	add	ip, r7
 80034ba:	4463      	add	r3, ip
 80034bc:	2208      	movs	r2, #8
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e00e      	b.n	80034e0 <UART_SetConfig+0x26c>
 80034c2:	231b      	movs	r3, #27
 80034c4:	2220      	movs	r2, #32
 80034c6:	4694      	mov	ip, r2
 80034c8:	44bc      	add	ip, r7
 80034ca:	4463      	add	r3, ip
 80034cc:	2210      	movs	r2, #16
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	e006      	b.n	80034e0 <UART_SetConfig+0x26c>
 80034d2:	231b      	movs	r3, #27
 80034d4:	2220      	movs	r2, #32
 80034d6:	4694      	mov	ip, r2
 80034d8:	44bc      	add	ip, r7
 80034da:	4463      	add	r3, ip
 80034dc:	2210      	movs	r2, #16
 80034de:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UART_SetConfig+0x324>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d000      	beq.n	80034ec <UART_SetConfig+0x278>
 80034ea:	e0ad      	b.n	8003648 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034ec:	231b      	movs	r3, #27
 80034ee:	2220      	movs	r2, #32
 80034f0:	4694      	mov	ip, r2
 80034f2:	44bc      	add	ip, r7
 80034f4:	4463      	add	r3, ip
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d015      	beq.n	8003528 <UART_SetConfig+0x2b4>
 80034fc:	dc18      	bgt.n	8003530 <UART_SetConfig+0x2bc>
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d00d      	beq.n	800351e <UART_SetConfig+0x2aa>
 8003502:	dc15      	bgt.n	8003530 <UART_SetConfig+0x2bc>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <UART_SetConfig+0x29a>
 8003508:	2b02      	cmp	r3, #2
 800350a:	d005      	beq.n	8003518 <UART_SetConfig+0x2a4>
 800350c:	e010      	b.n	8003530 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800350e:	f7fe fc1f 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003512:	0003      	movs	r3, r0
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003516:	e015      	b.n	8003544 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003518:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <UART_SetConfig+0x340>)
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800351c:	e012      	b.n	8003544 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351e:	f7fe fb8b 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8003522:	0003      	movs	r3, r0
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003526:	e00d      	b.n	8003544 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800352e:	e009      	b.n	8003544 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003534:	231a      	movs	r3, #26
 8003536:	2220      	movs	r2, #32
 8003538:	4694      	mov	ip, r2
 800353a:	44bc      	add	ip, r7
 800353c:	4463      	add	r3, ip
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
        break;
 8003542:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003546:	2b00      	cmp	r3, #0
 8003548:	d100      	bne.n	800354c <UART_SetConfig+0x2d8>
 800354a:	e153      	b.n	80037f4 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <UART_SetConfig+0x344>)
 8003552:	0052      	lsls	r2, r2, #1
 8003554:	5ad3      	ldrh	r3, [r2, r3]
 8003556:	0019      	movs	r1, r3
 8003558:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800355a:	f7fc fde5 	bl	8000128 <__udivsi3>
 800355e:	0003      	movs	r3, r0
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	0013      	movs	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	189b      	adds	r3, r3, r2
 800356c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800356e:	429a      	cmp	r2, r3
 8003570:	d305      	bcc.n	800357e <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800357a:	429a      	cmp	r2, r3
 800357c:	d91e      	bls.n	80035bc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800357e:	231a      	movs	r3, #26
 8003580:	2220      	movs	r2, #32
 8003582:	4694      	mov	ip, r2
 8003584:	44bc      	add	ip, r7
 8003586:	4463      	add	r3, ip
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e132      	b.n	80037f4 <UART_SetConfig+0x580>
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	cfff69f3 	.word	0xcfff69f3
 8003594:	ffffcfff 	.word	0xffffcfff
 8003598:	40008000 	.word	0x40008000
 800359c:	11fff4ff 	.word	0x11fff4ff
 80035a0:	40013800 	.word	0x40013800
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40004400 	.word	0x40004400
 80035ac:	40004800 	.word	0x40004800
 80035b0:	40004c00 	.word	0x40004c00
 80035b4:	00f42400 	.word	0x00f42400
 80035b8:	0800478c 	.word	0x0800478c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	2300      	movs	r3, #0
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c8:	4b96      	ldr	r3, [pc, #600]	; (8003824 <UART_SetConfig+0x5b0>)
 80035ca:	0052      	lsls	r2, r2, #1
 80035cc:	5ad3      	ldrh	r3, [r2, r3]
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	69b8      	ldr	r0, [r7, #24]
 80035da:	69f9      	ldr	r1, [r7, #28]
 80035dc:	f7fc ff1a 	bl	8000414 <__aeabi_uldivmod>
 80035e0:	0002      	movs	r2, r0
 80035e2:	000b      	movs	r3, r1
 80035e4:	0e11      	lsrs	r1, r2, #24
 80035e6:	021d      	lsls	r5, r3, #8
 80035e8:	430d      	orrs	r5, r1
 80035ea:	0214      	lsls	r4, r2, #8
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68b8      	ldr	r0, [r7, #8]
 80035fa:	68f9      	ldr	r1, [r7, #12]
 80035fc:	1900      	adds	r0, r0, r4
 80035fe:	4169      	adcs	r1, r5
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f7fc ff01 	bl	8000414 <__aeabi_uldivmod>
 8003612:	0002      	movs	r2, r0
 8003614:	000b      	movs	r3, r1
 8003616:	0013      	movs	r3, r2
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800361a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361c:	23c0      	movs	r3, #192	; 0xc0
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	429a      	cmp	r2, r3
 8003622:	d309      	bcc.n	8003638 <UART_SetConfig+0x3c4>
 8003624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	035b      	lsls	r3, r3, #13
 800362a:	429a      	cmp	r2, r3
 800362c:	d204      	bcs.n	8003638 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	e0dd      	b.n	80037f4 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8003638:	231a      	movs	r3, #26
 800363a:	2220      	movs	r2, #32
 800363c:	4694      	mov	ip, r2
 800363e:	44bc      	add	ip, r7
 8003640:	4463      	add	r3, ip
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e0d5      	b.n	80037f4 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	429a      	cmp	r2, r3
 8003652:	d000      	beq.n	8003656 <UART_SetConfig+0x3e2>
 8003654:	e073      	b.n	800373e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003656:	231b      	movs	r3, #27
 8003658:	2220      	movs	r2, #32
 800365a:	4694      	mov	ip, r2
 800365c:	44bc      	add	ip, r7
 800365e:	4463      	add	r3, ip
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b08      	cmp	r3, #8
 8003664:	d015      	beq.n	8003692 <UART_SetConfig+0x41e>
 8003666:	dc18      	bgt.n	800369a <UART_SetConfig+0x426>
 8003668:	2b04      	cmp	r3, #4
 800366a:	d00d      	beq.n	8003688 <UART_SetConfig+0x414>
 800366c:	dc15      	bgt.n	800369a <UART_SetConfig+0x426>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <UART_SetConfig+0x404>
 8003672:	2b02      	cmp	r3, #2
 8003674:	d005      	beq.n	8003682 <UART_SetConfig+0x40e>
 8003676:	e010      	b.n	800369a <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003678:	f7fe fb6a 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 800367c:	0003      	movs	r3, r0
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003680:	e015      	b.n	80036ae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003682:	4b69      	ldr	r3, [pc, #420]	; (8003828 <UART_SetConfig+0x5b4>)
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003686:	e012      	b.n	80036ae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003688:	f7fe fad6 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 800368c:	0003      	movs	r3, r0
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003690:	e00d      	b.n	80036ae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003698:	e009      	b.n	80036ae <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800369e:	231a      	movs	r3, #26
 80036a0:	2220      	movs	r2, #32
 80036a2:	4694      	mov	ip, r2
 80036a4:	44bc      	add	ip, r7
 80036a6:	4463      	add	r3, ip
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
        break;
 80036ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d100      	bne.n	80036b6 <UART_SetConfig+0x442>
 80036b4:	e09e      	b.n	80037f4 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ba:	4b5a      	ldr	r3, [pc, #360]	; (8003824 <UART_SetConfig+0x5b0>)
 80036bc:	0052      	lsls	r2, r2, #1
 80036be:	5ad3      	ldrh	r3, [r2, r3]
 80036c0:	0019      	movs	r1, r3
 80036c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036c4:	f7fc fd30 	bl	8000128 <__udivsi3>
 80036c8:	0003      	movs	r3, r0
 80036ca:	005a      	lsls	r2, r3, #1
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	18d2      	adds	r2, r2, r3
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	0019      	movs	r1, r3
 80036da:	0010      	movs	r0, r2
 80036dc:	f7fc fd24 	bl	8000128 <__udivsi3>
 80036e0:	0003      	movs	r3, r0
 80036e2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	2b0f      	cmp	r3, #15
 80036e8:	d921      	bls.n	800372e <UART_SetConfig+0x4ba>
 80036ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	025b      	lsls	r3, r3, #9
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d21c      	bcs.n	800372e <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	200e      	movs	r0, #14
 80036fa:	2420      	movs	r4, #32
 80036fc:	193b      	adds	r3, r7, r4
 80036fe:	181b      	adds	r3, r3, r0
 8003700:	210f      	movs	r1, #15
 8003702:	438a      	bics	r2, r1
 8003704:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	2207      	movs	r2, #7
 800370e:	4013      	ands	r3, r2
 8003710:	b299      	uxth	r1, r3
 8003712:	193b      	adds	r3, r7, r4
 8003714:	181b      	adds	r3, r3, r0
 8003716:	193a      	adds	r2, r7, r4
 8003718:	1812      	adds	r2, r2, r0
 800371a:	8812      	ldrh	r2, [r2, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	193a      	adds	r2, r7, r4
 8003726:	1812      	adds	r2, r2, r0
 8003728:	8812      	ldrh	r2, [r2, #0]
 800372a:	60da      	str	r2, [r3, #12]
 800372c:	e062      	b.n	80037f4 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 800372e:	231a      	movs	r3, #26
 8003730:	2220      	movs	r2, #32
 8003732:	4694      	mov	ip, r2
 8003734:	44bc      	add	ip, r7
 8003736:	4463      	add	r3, ip
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	e05a      	b.n	80037f4 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 800373e:	231b      	movs	r3, #27
 8003740:	2220      	movs	r2, #32
 8003742:	4694      	mov	ip, r2
 8003744:	44bc      	add	ip, r7
 8003746:	4463      	add	r3, ip
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b08      	cmp	r3, #8
 800374c:	d015      	beq.n	800377a <UART_SetConfig+0x506>
 800374e:	dc18      	bgt.n	8003782 <UART_SetConfig+0x50e>
 8003750:	2b04      	cmp	r3, #4
 8003752:	d00d      	beq.n	8003770 <UART_SetConfig+0x4fc>
 8003754:	dc15      	bgt.n	8003782 <UART_SetConfig+0x50e>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <UART_SetConfig+0x4ec>
 800375a:	2b02      	cmp	r3, #2
 800375c:	d005      	beq.n	800376a <UART_SetConfig+0x4f6>
 800375e:	e010      	b.n	8003782 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003760:	f7fe faf6 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003764:	0003      	movs	r3, r0
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003768:	e015      	b.n	8003796 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800376a:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <UART_SetConfig+0x5b4>)
 800376c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800376e:	e012      	b.n	8003796 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003770:	f7fe fa62 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8003774:	0003      	movs	r3, r0
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003778:	e00d      	b.n	8003796 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003780:	e009      	b.n	8003796 <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003786:	231a      	movs	r3, #26
 8003788:	2220      	movs	r2, #32
 800378a:	4694      	mov	ip, r2
 800378c:	44bc      	add	ip, r7
 800378e:	4463      	add	r3, ip
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
        break;
 8003794:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003798:	2b00      	cmp	r3, #0
 800379a:	d02b      	beq.n	80037f4 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a0:	4b20      	ldr	r3, [pc, #128]	; (8003824 <UART_SetConfig+0x5b0>)
 80037a2:	0052      	lsls	r2, r2, #1
 80037a4:	5ad3      	ldrh	r3, [r2, r3]
 80037a6:	0019      	movs	r1, r3
 80037a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037aa:	f7fc fcbd 	bl	8000128 <__udivsi3>
 80037ae:	0003      	movs	r3, r0
 80037b0:	001a      	movs	r2, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	18d2      	adds	r2, r2, r3
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	0019      	movs	r1, r3
 80037c0:	0010      	movs	r0, r2
 80037c2:	f7fc fcb1 	bl	8000128 <__udivsi3>
 80037c6:	0003      	movs	r3, r0
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	2b0f      	cmp	r3, #15
 80037ce:	d90a      	bls.n	80037e6 <UART_SetConfig+0x572>
 80037d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	025b      	lsls	r3, r3, #9
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d205      	bcs.n	80037e6 <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	b29a      	uxth	r2, r3
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	e006      	b.n	80037f4 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 80037e6:	231a      	movs	r3, #26
 80037e8:	2220      	movs	r2, #32
 80037ea:	4694      	mov	ip, r2
 80037ec:	44bc      	add	ip, r7
 80037ee:	4463      	add	r3, ip
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	226a      	movs	r2, #106	; 0x6a
 80037f8:	2101      	movs	r1, #1
 80037fa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	2268      	movs	r2, #104	; 0x68
 8003800:	2101      	movs	r1, #1
 8003802:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	2200      	movs	r2, #0
 8003808:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	2200      	movs	r2, #0
 800380e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003810:	231a      	movs	r3, #26
 8003812:	2220      	movs	r2, #32
 8003814:	4694      	mov	ip, r2
 8003816:	44bc      	add	ip, r7
 8003818:	4463      	add	r3, ip
 800381a:	781b      	ldrb	r3, [r3, #0]
}
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	b010      	add	sp, #64	; 0x40
 8003822:	bdb0      	pop	{r4, r5, r7, pc}
 8003824:	0800478c 	.word	0x0800478c
 8003828:	00f42400 	.word	0x00f42400

0800382c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	2201      	movs	r2, #1
 800383a:	4013      	ands	r3, r2
 800383c:	d00b      	beq.n	8003856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a4a      	ldr	r2, [pc, #296]	; (8003970 <UART_AdvFeatureConfig+0x144>)
 8003846:	4013      	ands	r3, r2
 8003848:	0019      	movs	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	2202      	movs	r2, #2
 800385c:	4013      	ands	r3, r2
 800385e:	d00b      	beq.n	8003878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a43      	ldr	r2, [pc, #268]	; (8003974 <UART_AdvFeatureConfig+0x148>)
 8003868:	4013      	ands	r3, r2
 800386a:	0019      	movs	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	2204      	movs	r2, #4
 800387e:	4013      	ands	r3, r2
 8003880:	d00b      	beq.n	800389a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a3b      	ldr	r2, [pc, #236]	; (8003978 <UART_AdvFeatureConfig+0x14c>)
 800388a:	4013      	ands	r3, r2
 800388c:	0019      	movs	r1, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	2208      	movs	r2, #8
 80038a0:	4013      	ands	r3, r2
 80038a2:	d00b      	beq.n	80038bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4a34      	ldr	r2, [pc, #208]	; (800397c <UART_AdvFeatureConfig+0x150>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	0019      	movs	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	2210      	movs	r2, #16
 80038c2:	4013      	ands	r3, r2
 80038c4:	d00b      	beq.n	80038de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a2c      	ldr	r2, [pc, #176]	; (8003980 <UART_AdvFeatureConfig+0x154>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	0019      	movs	r1, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	2220      	movs	r2, #32
 80038e4:	4013      	ands	r3, r2
 80038e6:	d00b      	beq.n	8003900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4a25      	ldr	r2, [pc, #148]	; (8003984 <UART_AdvFeatureConfig+0x158>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	2240      	movs	r2, #64	; 0x40
 8003906:	4013      	ands	r3, r2
 8003908:	d01d      	beq.n	8003946 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <UART_AdvFeatureConfig+0x15c>)
 8003912:	4013      	ands	r3, r2
 8003914:	0019      	movs	r1, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003926:	2380      	movs	r3, #128	; 0x80
 8003928:	035b      	lsls	r3, r3, #13
 800392a:	429a      	cmp	r2, r3
 800392c:	d10b      	bne.n	8003946 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a15      	ldr	r2, [pc, #84]	; (800398c <UART_AdvFeatureConfig+0x160>)
 8003936:	4013      	ands	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	2280      	movs	r2, #128	; 0x80
 800394c:	4013      	ands	r3, r2
 800394e:	d00b      	beq.n	8003968 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <UART_AdvFeatureConfig+0x164>)
 8003958:	4013      	ands	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]
  }
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}
 8003970:	fffdffff 	.word	0xfffdffff
 8003974:	fffeffff 	.word	0xfffeffff
 8003978:	fffbffff 	.word	0xfffbffff
 800397c:	ffff7fff 	.word	0xffff7fff
 8003980:	ffffefff 	.word	0xffffefff
 8003984:	ffffdfff 	.word	0xffffdfff
 8003988:	ffefffff 	.word	0xffefffff
 800398c:	ff9fffff 	.word	0xff9fffff
 8003990:	fff7ffff 	.word	0xfff7ffff

08003994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af02      	add	r7, sp, #8
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	228c      	movs	r2, #140	; 0x8c
 80039a0:	2100      	movs	r1, #0
 80039a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a4:	f7fd fa3e 	bl	8000e24 <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2208      	movs	r2, #8
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d10c      	bne.n	80039d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	0391      	lsls	r1, r2, #14
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <UART_CheckIdleState+0x90>)
 80039c4:	9200      	str	r2, [sp, #0]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f000 f82e 	bl	8003a28 <UART_WaitOnFlagUntilTimeout>
 80039cc:	1e03      	subs	r3, r0, #0
 80039ce:	d001      	beq.n	80039d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e023      	b.n	8003a1c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2204      	movs	r2, #4
 80039dc:	4013      	ands	r3, r2
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d10c      	bne.n	80039fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2280      	movs	r2, #128	; 0x80
 80039e6:	03d1      	lsls	r1, r2, #15
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4a0e      	ldr	r2, [pc, #56]	; (8003a24 <UART_CheckIdleState+0x90>)
 80039ec:	9200      	str	r2, [sp, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f000 f81a 	bl	8003a28 <UART_WaitOnFlagUntilTimeout>
 80039f4:	1e03      	subs	r3, r0, #0
 80039f6:	d001      	beq.n	80039fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e00f      	b.n	8003a1c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2284      	movs	r2, #132	; 0x84
 8003a00:	2120      	movs	r1, #32
 8003a02:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2288      	movs	r2, #136	; 0x88
 8003a08:	2120      	movs	r1, #32
 8003a0a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	2100      	movs	r1, #0
 8003a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b004      	add	sp, #16
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	01ffffff 	.word	0x01ffffff

08003a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b094      	sub	sp, #80	; 0x50
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	1dfb      	adds	r3, r7, #7
 8003a36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a38:	e0a7      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	d100      	bne.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a40:	e0a3      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fd f9ef 	bl	8000e24 <HAL_GetTick>
 8003a46:	0002      	movs	r2, r0
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d13f      	bne.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a58:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a60:	647b      	str	r3, [r7, #68]	; 0x44
 8003a62:	2301      	movs	r3, #1
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	f383 8810 	msr	PRIMASK, r3
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	494e      	ldr	r1, [pc, #312]	; (8003bb4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a7a:	400a      	ands	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a80:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	f383 8810 	msr	PRIMASK, r3
}
 8003a88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	643b      	str	r3, [r7, #64]	; 0x40
 8003a94:	2301      	movs	r3, #1
 8003a96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	f383 8810 	msr	PRIMASK, r3
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2101      	movs	r1, #1
 8003aac:	438a      	bics	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab6:	f383 8810 	msr	PRIMASK, r3
}
 8003aba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2284      	movs	r2, #132	; 0x84
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2288      	movs	r2, #136	; 0x88
 8003ac8:	2120      	movs	r1, #32
 8003aca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e069      	b.n	8003bac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d052      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	401a      	ands	r2, r3
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d148      	bne.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2280      	movs	r2, #128	; 0x80
 8003afe:	0112      	lsls	r2, r2, #4
 8003b00:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b02:	f3ef 8310 	mrs	r3, PRIMASK
 8003b06:	613b      	str	r3, [r7, #16]
  return(result);
 8003b08:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4924      	ldr	r1, [pc, #144]	; (8003bb4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b24:	400a      	ands	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f383 8810 	msr	PRIMASK, r3
}
 8003b32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b34:	f3ef 8310 	mrs	r3, PRIMASK
 8003b38:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b3a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b3e:	2301      	movs	r3, #1
 8003b40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f383 8810 	msr	PRIMASK, r3
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2101      	movs	r1, #1
 8003b56:	438a      	bics	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	f383 8810 	msr	PRIMASK, r3
}
 8003b64:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2284      	movs	r2, #132	; 0x84
 8003b6a:	2120      	movs	r1, #32
 8003b6c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2288      	movs	r2, #136	; 0x88
 8003b72:	2120      	movs	r1, #32
 8003b74:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	228c      	movs	r2, #140	; 0x8c
 8003b7a:	2120      	movs	r1, #32
 8003b7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e010      	b.n	8003bac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	425a      	negs	r2, r3
 8003b9a:	4153      	adcs	r3, r2
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	1dfb      	adds	r3, r7, #7
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d100      	bne.n	8003baa <UART_WaitOnFlagUntilTimeout+0x182>
 8003ba8:	e747      	b.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b014      	add	sp, #80	; 0x50
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	fffffe5f 	.word	0xfffffe5f

08003bb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	5c9b      	ldrb	r3, [r3, r2]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_UARTEx_DisableFifoMode+0x16>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e027      	b.n	8003c1e <HAL_UARTEx_DisableFifoMode+0x66>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2280      	movs	r2, #128	; 0x80
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2284      	movs	r2, #132	; 0x84
 8003bda:	2124      	movs	r1, #36	; 0x24
 8003bdc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	438a      	bics	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a0b      	ldr	r2, [pc, #44]	; (8003c28 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2284      	movs	r2, #132	; 0x84
 8003c10:	2120      	movs	r1, #32
 8003c12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	0018      	movs	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b004      	add	sp, #16
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	dfffffff 	.word	0xdfffffff

08003c2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	5c9b      	ldrb	r3, [r3, r2]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e02e      	b.n	8003ca2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2280      	movs	r2, #128	; 0x80
 8003c48:	2101      	movs	r1, #1
 8003c4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2284      	movs	r2, #132	; 0x84
 8003c50:	2124      	movs	r1, #36	; 0x24
 8003c52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2101      	movs	r1, #1
 8003c68:	438a      	bics	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	08d9      	lsrs	r1, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	0018      	movs	r0, r3
 8003c84:	f000 f854 	bl	8003d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2284      	movs	r2, #132	; 0x84
 8003c94:	2120      	movs	r1, #32
 8003c96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2280      	movs	r2, #128	; 0x80
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b004      	add	sp, #16
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	5c9b      	ldrb	r3, [r3, r2]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e02f      	b.n	8003d24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2280      	movs	r2, #128	; 0x80
 8003cc8:	2101      	movs	r1, #1
 8003cca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2284      	movs	r2, #132	; 0x84
 8003cd0:	2124      	movs	r1, #36	; 0x24
 8003cd2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	438a      	bics	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 f813 	bl	8003d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2284      	movs	r2, #132	; 0x84
 8003d16:	2120      	movs	r1, #32
 8003d18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	2100      	movs	r1, #0
 8003d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	0018      	movs	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b004      	add	sp, #16
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	f1ffffff 	.word	0xf1ffffff

08003d30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d108      	bne.n	8003d52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	226a      	movs	r2, #106	; 0x6a
 8003d44:	2101      	movs	r1, #1
 8003d46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2268      	movs	r2, #104	; 0x68
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d50:	e043      	b.n	8003dda <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d52:	260f      	movs	r6, #15
 8003d54:	19bb      	adds	r3, r7, r6
 8003d56:	2208      	movs	r2, #8
 8003d58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d5a:	200e      	movs	r0, #14
 8003d5c:	183b      	adds	r3, r7, r0
 8003d5e:	2208      	movs	r2, #8
 8003d60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	0e5b      	lsrs	r3, r3, #25
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	240d      	movs	r4, #13
 8003d6e:	193b      	adds	r3, r7, r4
 8003d70:	2107      	movs	r1, #7
 8003d72:	400a      	ands	r2, r1
 8003d74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	0f5b      	lsrs	r3, r3, #29
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	250c      	movs	r5, #12
 8003d82:	197b      	adds	r3, r7, r5
 8003d84:	2107      	movs	r1, #7
 8003d86:	400a      	ands	r2, r1
 8003d88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d8a:	183b      	adds	r3, r7, r0
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	197a      	adds	r2, r7, r5
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	4914      	ldr	r1, [pc, #80]	; (8003de4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003d94:	5c8a      	ldrb	r2, [r1, r2]
 8003d96:	435a      	muls	r2, r3
 8003d98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d9a:	197b      	adds	r3, r7, r5
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003da0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003da2:	0019      	movs	r1, r3
 8003da4:	f7fc fa4a 	bl	800023c <__divsi3>
 8003da8:	0003      	movs	r3, r0
 8003daa:	b299      	uxth	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	226a      	movs	r2, #106	; 0x6a
 8003db0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003db2:	19bb      	adds	r3, r7, r6
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	193a      	adds	r2, r7, r4
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	490a      	ldr	r1, [pc, #40]	; (8003de4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003dbc:	5c8a      	ldrb	r2, [r1, r2]
 8003dbe:	435a      	muls	r2, r3
 8003dc0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003dc2:	193b      	adds	r3, r7, r4
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003dc8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dca:	0019      	movs	r1, r3
 8003dcc:	f7fc fa36 	bl	800023c <__divsi3>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	b299      	uxth	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2268      	movs	r2, #104	; 0x68
 8003dd8:	5299      	strh	r1, [r3, r2]
}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b005      	add	sp, #20
 8003de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	080047a4 	.word	0x080047a4
 8003de8:	080047ac 	.word	0x080047ac

08003dec <__errno>:
 8003dec:	4b01      	ldr	r3, [pc, #4]	; (8003df4 <__errno+0x8>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	2000000c 	.word	0x2000000c

08003df8 <__libc_init_array>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	2600      	movs	r6, #0
 8003dfc:	4d0c      	ldr	r5, [pc, #48]	; (8003e30 <__libc_init_array+0x38>)
 8003dfe:	4c0d      	ldr	r4, [pc, #52]	; (8003e34 <__libc_init_array+0x3c>)
 8003e00:	1b64      	subs	r4, r4, r5
 8003e02:	10a4      	asrs	r4, r4, #2
 8003e04:	42a6      	cmp	r6, r4
 8003e06:	d109      	bne.n	8003e1c <__libc_init_array+0x24>
 8003e08:	2600      	movs	r6, #0
 8003e0a:	f000 fc47 	bl	800469c <_init>
 8003e0e:	4d0a      	ldr	r5, [pc, #40]	; (8003e38 <__libc_init_array+0x40>)
 8003e10:	4c0a      	ldr	r4, [pc, #40]	; (8003e3c <__libc_init_array+0x44>)
 8003e12:	1b64      	subs	r4, r4, r5
 8003e14:	10a4      	asrs	r4, r4, #2
 8003e16:	42a6      	cmp	r6, r4
 8003e18:	d105      	bne.n	8003e26 <__libc_init_array+0x2e>
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	00b3      	lsls	r3, r6, #2
 8003e1e:	58eb      	ldr	r3, [r5, r3]
 8003e20:	4798      	blx	r3
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7ee      	b.n	8003e04 <__libc_init_array+0xc>
 8003e26:	00b3      	lsls	r3, r6, #2
 8003e28:	58eb      	ldr	r3, [r5, r3]
 8003e2a:	4798      	blx	r3
 8003e2c:	3601      	adds	r6, #1
 8003e2e:	e7f2      	b.n	8003e16 <__libc_init_array+0x1e>
 8003e30:	080047f0 	.word	0x080047f0
 8003e34:	080047f0 	.word	0x080047f0
 8003e38:	080047f0 	.word	0x080047f0
 8003e3c:	080047f4 	.word	0x080047f4

08003e40 <memset>:
 8003e40:	0003      	movs	r3, r0
 8003e42:	1882      	adds	r2, r0, r2
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d100      	bne.n	8003e4a <memset+0xa>
 8003e48:	4770      	bx	lr
 8003e4a:	7019      	strb	r1, [r3, #0]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	e7f9      	b.n	8003e44 <memset+0x4>

08003e50 <siprintf>:
 8003e50:	b40e      	push	{r1, r2, r3}
 8003e52:	b500      	push	{lr}
 8003e54:	490b      	ldr	r1, [pc, #44]	; (8003e84 <siprintf+0x34>)
 8003e56:	b09c      	sub	sp, #112	; 0x70
 8003e58:	ab1d      	add	r3, sp, #116	; 0x74
 8003e5a:	9002      	str	r0, [sp, #8]
 8003e5c:	9006      	str	r0, [sp, #24]
 8003e5e:	9107      	str	r1, [sp, #28]
 8003e60:	9104      	str	r1, [sp, #16]
 8003e62:	4809      	ldr	r0, [pc, #36]	; (8003e88 <siprintf+0x38>)
 8003e64:	4909      	ldr	r1, [pc, #36]	; (8003e8c <siprintf+0x3c>)
 8003e66:	cb04      	ldmia	r3!, {r2}
 8003e68:	9105      	str	r1, [sp, #20]
 8003e6a:	6800      	ldr	r0, [r0, #0]
 8003e6c:	a902      	add	r1, sp, #8
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	f000 f870 	bl	8003f54 <_svfiprintf_r>
 8003e74:	2300      	movs	r3, #0
 8003e76:	9a02      	ldr	r2, [sp, #8]
 8003e78:	7013      	strb	r3, [r2, #0]
 8003e7a:	b01c      	add	sp, #112	; 0x70
 8003e7c:	bc08      	pop	{r3}
 8003e7e:	b003      	add	sp, #12
 8003e80:	4718      	bx	r3
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	7fffffff 	.word	0x7fffffff
 8003e88:	2000000c 	.word	0x2000000c
 8003e8c:	ffff0208 	.word	0xffff0208

08003e90 <__ssputs_r>:
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e92:	688e      	ldr	r6, [r1, #8]
 8003e94:	b085      	sub	sp, #20
 8003e96:	0007      	movs	r7, r0
 8003e98:	000c      	movs	r4, r1
 8003e9a:	9203      	str	r2, [sp, #12]
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	429e      	cmp	r6, r3
 8003ea0:	d83c      	bhi.n	8003f1c <__ssputs_r+0x8c>
 8003ea2:	2390      	movs	r3, #144	; 0x90
 8003ea4:	898a      	ldrh	r2, [r1, #12]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	421a      	tst	r2, r3
 8003eaa:	d034      	beq.n	8003f16 <__ssputs_r+0x86>
 8003eac:	2503      	movs	r5, #3
 8003eae:	6909      	ldr	r1, [r1, #16]
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	1a5b      	subs	r3, r3, r1
 8003eb4:	9302      	str	r3, [sp, #8]
 8003eb6:	6963      	ldr	r3, [r4, #20]
 8003eb8:	9802      	ldr	r0, [sp, #8]
 8003eba:	435d      	muls	r5, r3
 8003ebc:	0feb      	lsrs	r3, r5, #31
 8003ebe:	195d      	adds	r5, r3, r5
 8003ec0:	9b01      	ldr	r3, [sp, #4]
 8003ec2:	106d      	asrs	r5, r5, #1
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	181b      	adds	r3, r3, r0
 8003ec8:	42ab      	cmp	r3, r5
 8003eca:	d900      	bls.n	8003ece <__ssputs_r+0x3e>
 8003ecc:	001d      	movs	r5, r3
 8003ece:	0553      	lsls	r3, r2, #21
 8003ed0:	d532      	bpl.n	8003f38 <__ssputs_r+0xa8>
 8003ed2:	0029      	movs	r1, r5
 8003ed4:	0038      	movs	r0, r7
 8003ed6:	f000 fb31 	bl	800453c <_malloc_r>
 8003eda:	1e06      	subs	r6, r0, #0
 8003edc:	d109      	bne.n	8003ef2 <__ssputs_r+0x62>
 8003ede:	230c      	movs	r3, #12
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	2340      	movs	r3, #64	; 0x40
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	89a2      	ldrh	r2, [r4, #12]
 8003ee8:	4240      	negs	r0, r0
 8003eea:	4313      	orrs	r3, r2
 8003eec:	81a3      	strh	r3, [r4, #12]
 8003eee:	b005      	add	sp, #20
 8003ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef2:	9a02      	ldr	r2, [sp, #8]
 8003ef4:	6921      	ldr	r1, [r4, #16]
 8003ef6:	f000 faba 	bl	800446e <memcpy>
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <__ssputs_r+0xc0>)
 8003efe:	401a      	ands	r2, r3
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	4313      	orrs	r3, r2
 8003f04:	81a3      	strh	r3, [r4, #12]
 8003f06:	9b02      	ldr	r3, [sp, #8]
 8003f08:	6126      	str	r6, [r4, #16]
 8003f0a:	18f6      	adds	r6, r6, r3
 8003f0c:	6026      	str	r6, [r4, #0]
 8003f0e:	6165      	str	r5, [r4, #20]
 8003f10:	9e01      	ldr	r6, [sp, #4]
 8003f12:	1aed      	subs	r5, r5, r3
 8003f14:	60a5      	str	r5, [r4, #8]
 8003f16:	9b01      	ldr	r3, [sp, #4]
 8003f18:	429e      	cmp	r6, r3
 8003f1a:	d900      	bls.n	8003f1e <__ssputs_r+0x8e>
 8003f1c:	9e01      	ldr	r6, [sp, #4]
 8003f1e:	0032      	movs	r2, r6
 8003f20:	9903      	ldr	r1, [sp, #12]
 8003f22:	6820      	ldr	r0, [r4, #0]
 8003f24:	f000 faac 	bl	8004480 <memmove>
 8003f28:	68a3      	ldr	r3, [r4, #8]
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	1b9b      	subs	r3, r3, r6
 8003f2e:	60a3      	str	r3, [r4, #8]
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	199e      	adds	r6, r3, r6
 8003f34:	6026      	str	r6, [r4, #0]
 8003f36:	e7da      	b.n	8003eee <__ssputs_r+0x5e>
 8003f38:	002a      	movs	r2, r5
 8003f3a:	0038      	movs	r0, r7
 8003f3c:	f000 fb5c 	bl	80045f8 <_realloc_r>
 8003f40:	1e06      	subs	r6, r0, #0
 8003f42:	d1e0      	bne.n	8003f06 <__ssputs_r+0x76>
 8003f44:	0038      	movs	r0, r7
 8003f46:	6921      	ldr	r1, [r4, #16]
 8003f48:	f000 faae 	bl	80044a8 <_free_r>
 8003f4c:	e7c7      	b.n	8003ede <__ssputs_r+0x4e>
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	fffffb7f 	.word	0xfffffb7f

08003f54 <_svfiprintf_r>:
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f56:	b0a1      	sub	sp, #132	; 0x84
 8003f58:	9003      	str	r0, [sp, #12]
 8003f5a:	001d      	movs	r5, r3
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	000f      	movs	r7, r1
 8003f60:	0016      	movs	r6, r2
 8003f62:	061b      	lsls	r3, r3, #24
 8003f64:	d511      	bpl.n	8003f8a <_svfiprintf_r+0x36>
 8003f66:	690b      	ldr	r3, [r1, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10e      	bne.n	8003f8a <_svfiprintf_r+0x36>
 8003f6c:	2140      	movs	r1, #64	; 0x40
 8003f6e:	f000 fae5 	bl	800453c <_malloc_r>
 8003f72:	6038      	str	r0, [r7, #0]
 8003f74:	6138      	str	r0, [r7, #16]
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d105      	bne.n	8003f86 <_svfiprintf_r+0x32>
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	9a03      	ldr	r2, [sp, #12]
 8003f7e:	3801      	subs	r0, #1
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	b021      	add	sp, #132	; 0x84
 8003f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f86:	2340      	movs	r3, #64	; 0x40
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	ac08      	add	r4, sp, #32
 8003f8e:	6163      	str	r3, [r4, #20]
 8003f90:	3320      	adds	r3, #32
 8003f92:	7663      	strb	r3, [r4, #25]
 8003f94:	3310      	adds	r3, #16
 8003f96:	76a3      	strb	r3, [r4, #26]
 8003f98:	9507      	str	r5, [sp, #28]
 8003f9a:	0035      	movs	r5, r6
 8003f9c:	782b      	ldrb	r3, [r5, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <_svfiprintf_r+0x52>
 8003fa2:	2b25      	cmp	r3, #37	; 0x25
 8003fa4:	d147      	bne.n	8004036 <_svfiprintf_r+0xe2>
 8003fa6:	1bab      	subs	r3, r5, r6
 8003fa8:	9305      	str	r3, [sp, #20]
 8003faa:	42b5      	cmp	r5, r6
 8003fac:	d00c      	beq.n	8003fc8 <_svfiprintf_r+0x74>
 8003fae:	0032      	movs	r2, r6
 8003fb0:	0039      	movs	r1, r7
 8003fb2:	9803      	ldr	r0, [sp, #12]
 8003fb4:	f7ff ff6c 	bl	8003e90 <__ssputs_r>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d100      	bne.n	8003fbe <_svfiprintf_r+0x6a>
 8003fbc:	e0ae      	b.n	800411c <_svfiprintf_r+0x1c8>
 8003fbe:	6962      	ldr	r2, [r4, #20]
 8003fc0:	9b05      	ldr	r3, [sp, #20]
 8003fc2:	4694      	mov	ip, r2
 8003fc4:	4463      	add	r3, ip
 8003fc6:	6163      	str	r3, [r4, #20]
 8003fc8:	782b      	ldrb	r3, [r5, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d100      	bne.n	8003fd0 <_svfiprintf_r+0x7c>
 8003fce:	e0a5      	b.n	800411c <_svfiprintf_r+0x1c8>
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	4252      	negs	r2, r2
 8003fd6:	6062      	str	r2, [r4, #4]
 8003fd8:	a904      	add	r1, sp, #16
 8003fda:	3254      	adds	r2, #84	; 0x54
 8003fdc:	1852      	adds	r2, r2, r1
 8003fde:	1c6e      	adds	r6, r5, #1
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	60e3      	str	r3, [r4, #12]
 8003fe4:	60a3      	str	r3, [r4, #8]
 8003fe6:	7013      	strb	r3, [r2, #0]
 8003fe8:	65a3      	str	r3, [r4, #88]	; 0x58
 8003fea:	2205      	movs	r2, #5
 8003fec:	7831      	ldrb	r1, [r6, #0]
 8003fee:	4854      	ldr	r0, [pc, #336]	; (8004140 <_svfiprintf_r+0x1ec>)
 8003ff0:	f000 fa32 	bl	8004458 <memchr>
 8003ff4:	1c75      	adds	r5, r6, #1
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d11f      	bne.n	800403a <_svfiprintf_r+0xe6>
 8003ffa:	6822      	ldr	r2, [r4, #0]
 8003ffc:	06d3      	lsls	r3, r2, #27
 8003ffe:	d504      	bpl.n	800400a <_svfiprintf_r+0xb6>
 8004000:	2353      	movs	r3, #83	; 0x53
 8004002:	a904      	add	r1, sp, #16
 8004004:	185b      	adds	r3, r3, r1
 8004006:	2120      	movs	r1, #32
 8004008:	7019      	strb	r1, [r3, #0]
 800400a:	0713      	lsls	r3, r2, #28
 800400c:	d504      	bpl.n	8004018 <_svfiprintf_r+0xc4>
 800400e:	2353      	movs	r3, #83	; 0x53
 8004010:	a904      	add	r1, sp, #16
 8004012:	185b      	adds	r3, r3, r1
 8004014:	212b      	movs	r1, #43	; 0x2b
 8004016:	7019      	strb	r1, [r3, #0]
 8004018:	7833      	ldrb	r3, [r6, #0]
 800401a:	2b2a      	cmp	r3, #42	; 0x2a
 800401c:	d016      	beq.n	800404c <_svfiprintf_r+0xf8>
 800401e:	0035      	movs	r5, r6
 8004020:	2100      	movs	r1, #0
 8004022:	200a      	movs	r0, #10
 8004024:	68e3      	ldr	r3, [r4, #12]
 8004026:	782a      	ldrb	r2, [r5, #0]
 8004028:	1c6e      	adds	r6, r5, #1
 800402a:	3a30      	subs	r2, #48	; 0x30
 800402c:	2a09      	cmp	r2, #9
 800402e:	d94e      	bls.n	80040ce <_svfiprintf_r+0x17a>
 8004030:	2900      	cmp	r1, #0
 8004032:	d111      	bne.n	8004058 <_svfiprintf_r+0x104>
 8004034:	e017      	b.n	8004066 <_svfiprintf_r+0x112>
 8004036:	3501      	adds	r5, #1
 8004038:	e7b0      	b.n	8003f9c <_svfiprintf_r+0x48>
 800403a:	4b41      	ldr	r3, [pc, #260]	; (8004140 <_svfiprintf_r+0x1ec>)
 800403c:	6822      	ldr	r2, [r4, #0]
 800403e:	1ac0      	subs	r0, r0, r3
 8004040:	2301      	movs	r3, #1
 8004042:	4083      	lsls	r3, r0
 8004044:	4313      	orrs	r3, r2
 8004046:	002e      	movs	r6, r5
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	e7ce      	b.n	8003fea <_svfiprintf_r+0x96>
 800404c:	9b07      	ldr	r3, [sp, #28]
 800404e:	1d19      	adds	r1, r3, #4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	9107      	str	r1, [sp, #28]
 8004054:	2b00      	cmp	r3, #0
 8004056:	db01      	blt.n	800405c <_svfiprintf_r+0x108>
 8004058:	930b      	str	r3, [sp, #44]	; 0x2c
 800405a:	e004      	b.n	8004066 <_svfiprintf_r+0x112>
 800405c:	425b      	negs	r3, r3
 800405e:	60e3      	str	r3, [r4, #12]
 8004060:	2302      	movs	r3, #2
 8004062:	4313      	orrs	r3, r2
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	782b      	ldrb	r3, [r5, #0]
 8004068:	2b2e      	cmp	r3, #46	; 0x2e
 800406a:	d10a      	bne.n	8004082 <_svfiprintf_r+0x12e>
 800406c:	786b      	ldrb	r3, [r5, #1]
 800406e:	2b2a      	cmp	r3, #42	; 0x2a
 8004070:	d135      	bne.n	80040de <_svfiprintf_r+0x18a>
 8004072:	9b07      	ldr	r3, [sp, #28]
 8004074:	3502      	adds	r5, #2
 8004076:	1d1a      	adds	r2, r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	9207      	str	r2, [sp, #28]
 800407c:	2b00      	cmp	r3, #0
 800407e:	db2b      	blt.n	80040d8 <_svfiprintf_r+0x184>
 8004080:	9309      	str	r3, [sp, #36]	; 0x24
 8004082:	4e30      	ldr	r6, [pc, #192]	; (8004144 <_svfiprintf_r+0x1f0>)
 8004084:	2203      	movs	r2, #3
 8004086:	0030      	movs	r0, r6
 8004088:	7829      	ldrb	r1, [r5, #0]
 800408a:	f000 f9e5 	bl	8004458 <memchr>
 800408e:	2800      	cmp	r0, #0
 8004090:	d006      	beq.n	80040a0 <_svfiprintf_r+0x14c>
 8004092:	2340      	movs	r3, #64	; 0x40
 8004094:	1b80      	subs	r0, r0, r6
 8004096:	4083      	lsls	r3, r0
 8004098:	6822      	ldr	r2, [r4, #0]
 800409a:	3501      	adds	r5, #1
 800409c:	4313      	orrs	r3, r2
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	7829      	ldrb	r1, [r5, #0]
 80040a2:	2206      	movs	r2, #6
 80040a4:	4828      	ldr	r0, [pc, #160]	; (8004148 <_svfiprintf_r+0x1f4>)
 80040a6:	1c6e      	adds	r6, r5, #1
 80040a8:	7621      	strb	r1, [r4, #24]
 80040aa:	f000 f9d5 	bl	8004458 <memchr>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d03c      	beq.n	800412c <_svfiprintf_r+0x1d8>
 80040b2:	4b26      	ldr	r3, [pc, #152]	; (800414c <_svfiprintf_r+0x1f8>)
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d125      	bne.n	8004104 <_svfiprintf_r+0x1b0>
 80040b8:	2207      	movs	r2, #7
 80040ba:	9b07      	ldr	r3, [sp, #28]
 80040bc:	3307      	adds	r3, #7
 80040be:	4393      	bics	r3, r2
 80040c0:	3308      	adds	r3, #8
 80040c2:	9307      	str	r3, [sp, #28]
 80040c4:	6963      	ldr	r3, [r4, #20]
 80040c6:	9a04      	ldr	r2, [sp, #16]
 80040c8:	189b      	adds	r3, r3, r2
 80040ca:	6163      	str	r3, [r4, #20]
 80040cc:	e765      	b.n	8003f9a <_svfiprintf_r+0x46>
 80040ce:	4343      	muls	r3, r0
 80040d0:	0035      	movs	r5, r6
 80040d2:	2101      	movs	r1, #1
 80040d4:	189b      	adds	r3, r3, r2
 80040d6:	e7a6      	b.n	8004026 <_svfiprintf_r+0xd2>
 80040d8:	2301      	movs	r3, #1
 80040da:	425b      	negs	r3, r3
 80040dc:	e7d0      	b.n	8004080 <_svfiprintf_r+0x12c>
 80040de:	2300      	movs	r3, #0
 80040e0:	200a      	movs	r0, #10
 80040e2:	001a      	movs	r2, r3
 80040e4:	3501      	adds	r5, #1
 80040e6:	6063      	str	r3, [r4, #4]
 80040e8:	7829      	ldrb	r1, [r5, #0]
 80040ea:	1c6e      	adds	r6, r5, #1
 80040ec:	3930      	subs	r1, #48	; 0x30
 80040ee:	2909      	cmp	r1, #9
 80040f0:	d903      	bls.n	80040fa <_svfiprintf_r+0x1a6>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0c5      	beq.n	8004082 <_svfiprintf_r+0x12e>
 80040f6:	9209      	str	r2, [sp, #36]	; 0x24
 80040f8:	e7c3      	b.n	8004082 <_svfiprintf_r+0x12e>
 80040fa:	4342      	muls	r2, r0
 80040fc:	0035      	movs	r5, r6
 80040fe:	2301      	movs	r3, #1
 8004100:	1852      	adds	r2, r2, r1
 8004102:	e7f1      	b.n	80040e8 <_svfiprintf_r+0x194>
 8004104:	ab07      	add	r3, sp, #28
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	003a      	movs	r2, r7
 800410a:	0021      	movs	r1, r4
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <_svfiprintf_r+0x1fc>)
 800410e:	9803      	ldr	r0, [sp, #12]
 8004110:	e000      	b.n	8004114 <_svfiprintf_r+0x1c0>
 8004112:	bf00      	nop
 8004114:	9004      	str	r0, [sp, #16]
 8004116:	9b04      	ldr	r3, [sp, #16]
 8004118:	3301      	adds	r3, #1
 800411a:	d1d3      	bne.n	80040c4 <_svfiprintf_r+0x170>
 800411c:	89bb      	ldrh	r3, [r7, #12]
 800411e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004120:	065b      	lsls	r3, r3, #25
 8004122:	d400      	bmi.n	8004126 <_svfiprintf_r+0x1d2>
 8004124:	e72d      	b.n	8003f82 <_svfiprintf_r+0x2e>
 8004126:	2001      	movs	r0, #1
 8004128:	4240      	negs	r0, r0
 800412a:	e72a      	b.n	8003f82 <_svfiprintf_r+0x2e>
 800412c:	ab07      	add	r3, sp, #28
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	003a      	movs	r2, r7
 8004132:	0021      	movs	r1, r4
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <_svfiprintf_r+0x1fc>)
 8004136:	9803      	ldr	r0, [sp, #12]
 8004138:	f000 f87c 	bl	8004234 <_printf_i>
 800413c:	e7ea      	b.n	8004114 <_svfiprintf_r+0x1c0>
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	080047b4 	.word	0x080047b4
 8004144:	080047ba 	.word	0x080047ba
 8004148:	080047be 	.word	0x080047be
 800414c:	00000000 	.word	0x00000000
 8004150:	08003e91 	.word	0x08003e91

08004154 <_printf_common>:
 8004154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004156:	0015      	movs	r5, r2
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	688a      	ldr	r2, [r1, #8]
 800415c:	690b      	ldr	r3, [r1, #16]
 800415e:	000c      	movs	r4, r1
 8004160:	9000      	str	r0, [sp, #0]
 8004162:	4293      	cmp	r3, r2
 8004164:	da00      	bge.n	8004168 <_printf_common+0x14>
 8004166:	0013      	movs	r3, r2
 8004168:	0022      	movs	r2, r4
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	3243      	adds	r2, #67	; 0x43
 800416e:	7812      	ldrb	r2, [r2, #0]
 8004170:	2a00      	cmp	r2, #0
 8004172:	d001      	beq.n	8004178 <_printf_common+0x24>
 8004174:	3301      	adds	r3, #1
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	069b      	lsls	r3, r3, #26
 800417c:	d502      	bpl.n	8004184 <_printf_common+0x30>
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	3302      	adds	r3, #2
 8004182:	602b      	str	r3, [r5, #0]
 8004184:	6822      	ldr	r2, [r4, #0]
 8004186:	2306      	movs	r3, #6
 8004188:	0017      	movs	r7, r2
 800418a:	401f      	ands	r7, r3
 800418c:	421a      	tst	r2, r3
 800418e:	d027      	beq.n	80041e0 <_printf_common+0x8c>
 8004190:	0023      	movs	r3, r4
 8004192:	3343      	adds	r3, #67	; 0x43
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	1e5a      	subs	r2, r3, #1
 8004198:	4193      	sbcs	r3, r2
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	0692      	lsls	r2, r2, #26
 800419e:	d430      	bmi.n	8004202 <_printf_common+0xae>
 80041a0:	0022      	movs	r2, r4
 80041a2:	9901      	ldr	r1, [sp, #4]
 80041a4:	9800      	ldr	r0, [sp, #0]
 80041a6:	9e08      	ldr	r6, [sp, #32]
 80041a8:	3243      	adds	r2, #67	; 0x43
 80041aa:	47b0      	blx	r6
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d025      	beq.n	80041fc <_printf_common+0xa8>
 80041b0:	2306      	movs	r3, #6
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	682a      	ldr	r2, [r5, #0]
 80041b6:	68e1      	ldr	r1, [r4, #12]
 80041b8:	2500      	movs	r5, #0
 80041ba:	4003      	ands	r3, r0
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d103      	bne.n	80041c8 <_printf_common+0x74>
 80041c0:	1a8d      	subs	r5, r1, r2
 80041c2:	43eb      	mvns	r3, r5
 80041c4:	17db      	asrs	r3, r3, #31
 80041c6:	401d      	ands	r5, r3
 80041c8:	68a3      	ldr	r3, [r4, #8]
 80041ca:	6922      	ldr	r2, [r4, #16]
 80041cc:	4293      	cmp	r3, r2
 80041ce:	dd01      	ble.n	80041d4 <_printf_common+0x80>
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	18ed      	adds	r5, r5, r3
 80041d4:	2700      	movs	r7, #0
 80041d6:	42bd      	cmp	r5, r7
 80041d8:	d120      	bne.n	800421c <_printf_common+0xc8>
 80041da:	2000      	movs	r0, #0
 80041dc:	e010      	b.n	8004200 <_printf_common+0xac>
 80041de:	3701      	adds	r7, #1
 80041e0:	68e3      	ldr	r3, [r4, #12]
 80041e2:	682a      	ldr	r2, [r5, #0]
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	42bb      	cmp	r3, r7
 80041e8:	ddd2      	ble.n	8004190 <_printf_common+0x3c>
 80041ea:	0022      	movs	r2, r4
 80041ec:	2301      	movs	r3, #1
 80041ee:	9901      	ldr	r1, [sp, #4]
 80041f0:	9800      	ldr	r0, [sp, #0]
 80041f2:	9e08      	ldr	r6, [sp, #32]
 80041f4:	3219      	adds	r2, #25
 80041f6:	47b0      	blx	r6
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	d1f0      	bne.n	80041de <_printf_common+0x8a>
 80041fc:	2001      	movs	r0, #1
 80041fe:	4240      	negs	r0, r0
 8004200:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004202:	2030      	movs	r0, #48	; 0x30
 8004204:	18e1      	adds	r1, r4, r3
 8004206:	3143      	adds	r1, #67	; 0x43
 8004208:	7008      	strb	r0, [r1, #0]
 800420a:	0021      	movs	r1, r4
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	3145      	adds	r1, #69	; 0x45
 8004210:	7809      	ldrb	r1, [r1, #0]
 8004212:	18a2      	adds	r2, r4, r2
 8004214:	3243      	adds	r2, #67	; 0x43
 8004216:	3302      	adds	r3, #2
 8004218:	7011      	strb	r1, [r2, #0]
 800421a:	e7c1      	b.n	80041a0 <_printf_common+0x4c>
 800421c:	0022      	movs	r2, r4
 800421e:	2301      	movs	r3, #1
 8004220:	9901      	ldr	r1, [sp, #4]
 8004222:	9800      	ldr	r0, [sp, #0]
 8004224:	9e08      	ldr	r6, [sp, #32]
 8004226:	321a      	adds	r2, #26
 8004228:	47b0      	blx	r6
 800422a:	1c43      	adds	r3, r0, #1
 800422c:	d0e6      	beq.n	80041fc <_printf_common+0xa8>
 800422e:	3701      	adds	r7, #1
 8004230:	e7d1      	b.n	80041d6 <_printf_common+0x82>
	...

08004234 <_printf_i>:
 8004234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004236:	b08b      	sub	sp, #44	; 0x2c
 8004238:	9206      	str	r2, [sp, #24]
 800423a:	000a      	movs	r2, r1
 800423c:	3243      	adds	r2, #67	; 0x43
 800423e:	9307      	str	r3, [sp, #28]
 8004240:	9005      	str	r0, [sp, #20]
 8004242:	9204      	str	r2, [sp, #16]
 8004244:	7e0a      	ldrb	r2, [r1, #24]
 8004246:	000c      	movs	r4, r1
 8004248:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800424a:	2a78      	cmp	r2, #120	; 0x78
 800424c:	d806      	bhi.n	800425c <_printf_i+0x28>
 800424e:	2a62      	cmp	r2, #98	; 0x62
 8004250:	d808      	bhi.n	8004264 <_printf_i+0x30>
 8004252:	2a00      	cmp	r2, #0
 8004254:	d100      	bne.n	8004258 <_printf_i+0x24>
 8004256:	e0c0      	b.n	80043da <_printf_i+0x1a6>
 8004258:	2a58      	cmp	r2, #88	; 0x58
 800425a:	d052      	beq.n	8004302 <_printf_i+0xce>
 800425c:	0026      	movs	r6, r4
 800425e:	3642      	adds	r6, #66	; 0x42
 8004260:	7032      	strb	r2, [r6, #0]
 8004262:	e022      	b.n	80042aa <_printf_i+0x76>
 8004264:	0010      	movs	r0, r2
 8004266:	3863      	subs	r0, #99	; 0x63
 8004268:	2815      	cmp	r0, #21
 800426a:	d8f7      	bhi.n	800425c <_printf_i+0x28>
 800426c:	f7fb ff52 	bl	8000114 <__gnu_thumb1_case_shi>
 8004270:	001f0016 	.word	0x001f0016
 8004274:	fff6fff6 	.word	0xfff6fff6
 8004278:	fff6fff6 	.word	0xfff6fff6
 800427c:	fff6001f 	.word	0xfff6001f
 8004280:	fff6fff6 	.word	0xfff6fff6
 8004284:	00a8fff6 	.word	0x00a8fff6
 8004288:	009a0036 	.word	0x009a0036
 800428c:	fff6fff6 	.word	0xfff6fff6
 8004290:	fff600b9 	.word	0xfff600b9
 8004294:	fff60036 	.word	0xfff60036
 8004298:	009efff6 	.word	0x009efff6
 800429c:	0026      	movs	r6, r4
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	3642      	adds	r6, #66	; 0x42
 80042a2:	1d11      	adds	r1, r2, #4
 80042a4:	6019      	str	r1, [r3, #0]
 80042a6:	6813      	ldr	r3, [r2, #0]
 80042a8:	7033      	strb	r3, [r6, #0]
 80042aa:	2301      	movs	r3, #1
 80042ac:	e0a7      	b.n	80043fe <_printf_i+0x1ca>
 80042ae:	6808      	ldr	r0, [r1, #0]
 80042b0:	6819      	ldr	r1, [r3, #0]
 80042b2:	1d0a      	adds	r2, r1, #4
 80042b4:	0605      	lsls	r5, r0, #24
 80042b6:	d50b      	bpl.n	80042d0 <_printf_i+0x9c>
 80042b8:	680d      	ldr	r5, [r1, #0]
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	2d00      	cmp	r5, #0
 80042be:	da03      	bge.n	80042c8 <_printf_i+0x94>
 80042c0:	232d      	movs	r3, #45	; 0x2d
 80042c2:	9a04      	ldr	r2, [sp, #16]
 80042c4:	426d      	negs	r5, r5
 80042c6:	7013      	strb	r3, [r2, #0]
 80042c8:	4b61      	ldr	r3, [pc, #388]	; (8004450 <_printf_i+0x21c>)
 80042ca:	270a      	movs	r7, #10
 80042cc:	9303      	str	r3, [sp, #12]
 80042ce:	e032      	b.n	8004336 <_printf_i+0x102>
 80042d0:	680d      	ldr	r5, [r1, #0]
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	0641      	lsls	r1, r0, #25
 80042d6:	d5f1      	bpl.n	80042bc <_printf_i+0x88>
 80042d8:	b22d      	sxth	r5, r5
 80042da:	e7ef      	b.n	80042bc <_printf_i+0x88>
 80042dc:	680d      	ldr	r5, [r1, #0]
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	1d08      	adds	r0, r1, #4
 80042e2:	6018      	str	r0, [r3, #0]
 80042e4:	062e      	lsls	r6, r5, #24
 80042e6:	d501      	bpl.n	80042ec <_printf_i+0xb8>
 80042e8:	680d      	ldr	r5, [r1, #0]
 80042ea:	e003      	b.n	80042f4 <_printf_i+0xc0>
 80042ec:	066d      	lsls	r5, r5, #25
 80042ee:	d5fb      	bpl.n	80042e8 <_printf_i+0xb4>
 80042f0:	680d      	ldr	r5, [r1, #0]
 80042f2:	b2ad      	uxth	r5, r5
 80042f4:	4b56      	ldr	r3, [pc, #344]	; (8004450 <_printf_i+0x21c>)
 80042f6:	270a      	movs	r7, #10
 80042f8:	9303      	str	r3, [sp, #12]
 80042fa:	2a6f      	cmp	r2, #111	; 0x6f
 80042fc:	d117      	bne.n	800432e <_printf_i+0xfa>
 80042fe:	2708      	movs	r7, #8
 8004300:	e015      	b.n	800432e <_printf_i+0xfa>
 8004302:	3145      	adds	r1, #69	; 0x45
 8004304:	700a      	strb	r2, [r1, #0]
 8004306:	4a52      	ldr	r2, [pc, #328]	; (8004450 <_printf_i+0x21c>)
 8004308:	9203      	str	r2, [sp, #12]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	6821      	ldr	r1, [r4, #0]
 800430e:	ca20      	ldmia	r2!, {r5}
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	0608      	lsls	r0, r1, #24
 8004314:	d550      	bpl.n	80043b8 <_printf_i+0x184>
 8004316:	07cb      	lsls	r3, r1, #31
 8004318:	d502      	bpl.n	8004320 <_printf_i+0xec>
 800431a:	2320      	movs	r3, #32
 800431c:	4319      	orrs	r1, r3
 800431e:	6021      	str	r1, [r4, #0]
 8004320:	2710      	movs	r7, #16
 8004322:	2d00      	cmp	r5, #0
 8004324:	d103      	bne.n	800432e <_printf_i+0xfa>
 8004326:	2320      	movs	r3, #32
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	439a      	bics	r2, r3
 800432c:	6022      	str	r2, [r4, #0]
 800432e:	0023      	movs	r3, r4
 8004330:	2200      	movs	r2, #0
 8004332:	3343      	adds	r3, #67	; 0x43
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	6863      	ldr	r3, [r4, #4]
 8004338:	60a3      	str	r3, [r4, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	db03      	blt.n	8004346 <_printf_i+0x112>
 800433e:	2204      	movs	r2, #4
 8004340:	6821      	ldr	r1, [r4, #0]
 8004342:	4391      	bics	r1, r2
 8004344:	6021      	str	r1, [r4, #0]
 8004346:	2d00      	cmp	r5, #0
 8004348:	d102      	bne.n	8004350 <_printf_i+0x11c>
 800434a:	9e04      	ldr	r6, [sp, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00c      	beq.n	800436a <_printf_i+0x136>
 8004350:	9e04      	ldr	r6, [sp, #16]
 8004352:	0028      	movs	r0, r5
 8004354:	0039      	movs	r1, r7
 8004356:	f7fb ff6d 	bl	8000234 <__aeabi_uidivmod>
 800435a:	9b03      	ldr	r3, [sp, #12]
 800435c:	3e01      	subs	r6, #1
 800435e:	5c5b      	ldrb	r3, [r3, r1]
 8004360:	7033      	strb	r3, [r6, #0]
 8004362:	002b      	movs	r3, r5
 8004364:	0005      	movs	r5, r0
 8004366:	429f      	cmp	r7, r3
 8004368:	d9f3      	bls.n	8004352 <_printf_i+0x11e>
 800436a:	2f08      	cmp	r7, #8
 800436c:	d109      	bne.n	8004382 <_printf_i+0x14e>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	07db      	lsls	r3, r3, #31
 8004372:	d506      	bpl.n	8004382 <_printf_i+0x14e>
 8004374:	6863      	ldr	r3, [r4, #4]
 8004376:	6922      	ldr	r2, [r4, #16]
 8004378:	4293      	cmp	r3, r2
 800437a:	dc02      	bgt.n	8004382 <_printf_i+0x14e>
 800437c:	2330      	movs	r3, #48	; 0x30
 800437e:	3e01      	subs	r6, #1
 8004380:	7033      	strb	r3, [r6, #0]
 8004382:	9b04      	ldr	r3, [sp, #16]
 8004384:	1b9b      	subs	r3, r3, r6
 8004386:	6123      	str	r3, [r4, #16]
 8004388:	9b07      	ldr	r3, [sp, #28]
 800438a:	0021      	movs	r1, r4
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	9805      	ldr	r0, [sp, #20]
 8004390:	9b06      	ldr	r3, [sp, #24]
 8004392:	aa09      	add	r2, sp, #36	; 0x24
 8004394:	f7ff fede 	bl	8004154 <_printf_common>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d135      	bne.n	8004408 <_printf_i+0x1d4>
 800439c:	2001      	movs	r0, #1
 800439e:	4240      	negs	r0, r0
 80043a0:	b00b      	add	sp, #44	; 0x2c
 80043a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a4:	2220      	movs	r2, #32
 80043a6:	6809      	ldr	r1, [r1, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	6022      	str	r2, [r4, #0]
 80043ac:	0022      	movs	r2, r4
 80043ae:	2178      	movs	r1, #120	; 0x78
 80043b0:	3245      	adds	r2, #69	; 0x45
 80043b2:	7011      	strb	r1, [r2, #0]
 80043b4:	4a27      	ldr	r2, [pc, #156]	; (8004454 <_printf_i+0x220>)
 80043b6:	e7a7      	b.n	8004308 <_printf_i+0xd4>
 80043b8:	0648      	lsls	r0, r1, #25
 80043ba:	d5ac      	bpl.n	8004316 <_printf_i+0xe2>
 80043bc:	b2ad      	uxth	r5, r5
 80043be:	e7aa      	b.n	8004316 <_printf_i+0xe2>
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	680d      	ldr	r5, [r1, #0]
 80043c4:	1d10      	adds	r0, r2, #4
 80043c6:	6949      	ldr	r1, [r1, #20]
 80043c8:	6018      	str	r0, [r3, #0]
 80043ca:	6813      	ldr	r3, [r2, #0]
 80043cc:	062e      	lsls	r6, r5, #24
 80043ce:	d501      	bpl.n	80043d4 <_printf_i+0x1a0>
 80043d0:	6019      	str	r1, [r3, #0]
 80043d2:	e002      	b.n	80043da <_printf_i+0x1a6>
 80043d4:	066d      	lsls	r5, r5, #25
 80043d6:	d5fb      	bpl.n	80043d0 <_printf_i+0x19c>
 80043d8:	8019      	strh	r1, [r3, #0]
 80043da:	2300      	movs	r3, #0
 80043dc:	9e04      	ldr	r6, [sp, #16]
 80043de:	6123      	str	r3, [r4, #16]
 80043e0:	e7d2      	b.n	8004388 <_printf_i+0x154>
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	1d11      	adds	r1, r2, #4
 80043e6:	6019      	str	r1, [r3, #0]
 80043e8:	6816      	ldr	r6, [r2, #0]
 80043ea:	2100      	movs	r1, #0
 80043ec:	0030      	movs	r0, r6
 80043ee:	6862      	ldr	r2, [r4, #4]
 80043f0:	f000 f832 	bl	8004458 <memchr>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d001      	beq.n	80043fc <_printf_i+0x1c8>
 80043f8:	1b80      	subs	r0, r0, r6
 80043fa:	6060      	str	r0, [r4, #4]
 80043fc:	6863      	ldr	r3, [r4, #4]
 80043fe:	6123      	str	r3, [r4, #16]
 8004400:	2300      	movs	r3, #0
 8004402:	9a04      	ldr	r2, [sp, #16]
 8004404:	7013      	strb	r3, [r2, #0]
 8004406:	e7bf      	b.n	8004388 <_printf_i+0x154>
 8004408:	6923      	ldr	r3, [r4, #16]
 800440a:	0032      	movs	r2, r6
 800440c:	9906      	ldr	r1, [sp, #24]
 800440e:	9805      	ldr	r0, [sp, #20]
 8004410:	9d07      	ldr	r5, [sp, #28]
 8004412:	47a8      	blx	r5
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	d0c1      	beq.n	800439c <_printf_i+0x168>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	079b      	lsls	r3, r3, #30
 800441c:	d415      	bmi.n	800444a <_printf_i+0x216>
 800441e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004420:	68e0      	ldr	r0, [r4, #12]
 8004422:	4298      	cmp	r0, r3
 8004424:	dabc      	bge.n	80043a0 <_printf_i+0x16c>
 8004426:	0018      	movs	r0, r3
 8004428:	e7ba      	b.n	80043a0 <_printf_i+0x16c>
 800442a:	0022      	movs	r2, r4
 800442c:	2301      	movs	r3, #1
 800442e:	9906      	ldr	r1, [sp, #24]
 8004430:	9805      	ldr	r0, [sp, #20]
 8004432:	9e07      	ldr	r6, [sp, #28]
 8004434:	3219      	adds	r2, #25
 8004436:	47b0      	blx	r6
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d0af      	beq.n	800439c <_printf_i+0x168>
 800443c:	3501      	adds	r5, #1
 800443e:	68e3      	ldr	r3, [r4, #12]
 8004440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	42ab      	cmp	r3, r5
 8004446:	dcf0      	bgt.n	800442a <_printf_i+0x1f6>
 8004448:	e7e9      	b.n	800441e <_printf_i+0x1ea>
 800444a:	2500      	movs	r5, #0
 800444c:	e7f7      	b.n	800443e <_printf_i+0x20a>
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	080047c5 	.word	0x080047c5
 8004454:	080047d6 	.word	0x080047d6

08004458 <memchr>:
 8004458:	b2c9      	uxtb	r1, r1
 800445a:	1882      	adds	r2, r0, r2
 800445c:	4290      	cmp	r0, r2
 800445e:	d101      	bne.n	8004464 <memchr+0xc>
 8004460:	2000      	movs	r0, #0
 8004462:	4770      	bx	lr
 8004464:	7803      	ldrb	r3, [r0, #0]
 8004466:	428b      	cmp	r3, r1
 8004468:	d0fb      	beq.n	8004462 <memchr+0xa>
 800446a:	3001      	adds	r0, #1
 800446c:	e7f6      	b.n	800445c <memchr+0x4>

0800446e <memcpy>:
 800446e:	2300      	movs	r3, #0
 8004470:	b510      	push	{r4, lr}
 8004472:	429a      	cmp	r2, r3
 8004474:	d100      	bne.n	8004478 <memcpy+0xa>
 8004476:	bd10      	pop	{r4, pc}
 8004478:	5ccc      	ldrb	r4, [r1, r3]
 800447a:	54c4      	strb	r4, [r0, r3]
 800447c:	3301      	adds	r3, #1
 800447e:	e7f8      	b.n	8004472 <memcpy+0x4>

08004480 <memmove>:
 8004480:	b510      	push	{r4, lr}
 8004482:	4288      	cmp	r0, r1
 8004484:	d902      	bls.n	800448c <memmove+0xc>
 8004486:	188b      	adds	r3, r1, r2
 8004488:	4298      	cmp	r0, r3
 800448a:	d303      	bcc.n	8004494 <memmove+0x14>
 800448c:	2300      	movs	r3, #0
 800448e:	e007      	b.n	80044a0 <memmove+0x20>
 8004490:	5c8b      	ldrb	r3, [r1, r2]
 8004492:	5483      	strb	r3, [r0, r2]
 8004494:	3a01      	subs	r2, #1
 8004496:	d2fb      	bcs.n	8004490 <memmove+0x10>
 8004498:	bd10      	pop	{r4, pc}
 800449a:	5ccc      	ldrb	r4, [r1, r3]
 800449c:	54c4      	strb	r4, [r0, r3]
 800449e:	3301      	adds	r3, #1
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d1fa      	bne.n	800449a <memmove+0x1a>
 80044a4:	e7f8      	b.n	8004498 <memmove+0x18>
	...

080044a8 <_free_r>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	0005      	movs	r5, r0
 80044ac:	2900      	cmp	r1, #0
 80044ae:	d010      	beq.n	80044d2 <_free_r+0x2a>
 80044b0:	1f0c      	subs	r4, r1, #4
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	da00      	bge.n	80044ba <_free_r+0x12>
 80044b8:	18e4      	adds	r4, r4, r3
 80044ba:	0028      	movs	r0, r5
 80044bc:	f000 f8d4 	bl	8004668 <__malloc_lock>
 80044c0:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <_free_r+0x90>)
 80044c2:	6813      	ldr	r3, [r2, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <_free_r+0x2c>
 80044c8:	6063      	str	r3, [r4, #4]
 80044ca:	6014      	str	r4, [r2, #0]
 80044cc:	0028      	movs	r0, r5
 80044ce:	f000 f8d3 	bl	8004678 <__malloc_unlock>
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	42a3      	cmp	r3, r4
 80044d6:	d908      	bls.n	80044ea <_free_r+0x42>
 80044d8:	6821      	ldr	r1, [r4, #0]
 80044da:	1860      	adds	r0, r4, r1
 80044dc:	4283      	cmp	r3, r0
 80044de:	d1f3      	bne.n	80044c8 <_free_r+0x20>
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	1841      	adds	r1, r0, r1
 80044e6:	6021      	str	r1, [r4, #0]
 80044e8:	e7ee      	b.n	80044c8 <_free_r+0x20>
 80044ea:	001a      	movs	r2, r3
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <_free_r+0x4e>
 80044f2:	42a3      	cmp	r3, r4
 80044f4:	d9f9      	bls.n	80044ea <_free_r+0x42>
 80044f6:	6811      	ldr	r1, [r2, #0]
 80044f8:	1850      	adds	r0, r2, r1
 80044fa:	42a0      	cmp	r0, r4
 80044fc:	d10b      	bne.n	8004516 <_free_r+0x6e>
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	1809      	adds	r1, r1, r0
 8004502:	1850      	adds	r0, r2, r1
 8004504:	6011      	str	r1, [r2, #0]
 8004506:	4283      	cmp	r3, r0
 8004508:	d1e0      	bne.n	80044cc <_free_r+0x24>
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	1841      	adds	r1, r0, r1
 8004510:	6011      	str	r1, [r2, #0]
 8004512:	6053      	str	r3, [r2, #4]
 8004514:	e7da      	b.n	80044cc <_free_r+0x24>
 8004516:	42a0      	cmp	r0, r4
 8004518:	d902      	bls.n	8004520 <_free_r+0x78>
 800451a:	230c      	movs	r3, #12
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	e7d5      	b.n	80044cc <_free_r+0x24>
 8004520:	6821      	ldr	r1, [r4, #0]
 8004522:	1860      	adds	r0, r4, r1
 8004524:	4283      	cmp	r3, r0
 8004526:	d103      	bne.n	8004530 <_free_r+0x88>
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	1841      	adds	r1, r0, r1
 800452e:	6021      	str	r1, [r4, #0]
 8004530:	6063      	str	r3, [r4, #4]
 8004532:	6054      	str	r4, [r2, #4]
 8004534:	e7ca      	b.n	80044cc <_free_r+0x24>
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	200000a8 	.word	0x200000a8

0800453c <_malloc_r>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	2303      	movs	r3, #3
 8004540:	1ccd      	adds	r5, r1, #3
 8004542:	439d      	bics	r5, r3
 8004544:	3508      	adds	r5, #8
 8004546:	0006      	movs	r6, r0
 8004548:	2d0c      	cmp	r5, #12
 800454a:	d21f      	bcs.n	800458c <_malloc_r+0x50>
 800454c:	250c      	movs	r5, #12
 800454e:	42a9      	cmp	r1, r5
 8004550:	d81e      	bhi.n	8004590 <_malloc_r+0x54>
 8004552:	0030      	movs	r0, r6
 8004554:	f000 f888 	bl	8004668 <__malloc_lock>
 8004558:	4925      	ldr	r1, [pc, #148]	; (80045f0 <_malloc_r+0xb4>)
 800455a:	680a      	ldr	r2, [r1, #0]
 800455c:	0014      	movs	r4, r2
 800455e:	2c00      	cmp	r4, #0
 8004560:	d11a      	bne.n	8004598 <_malloc_r+0x5c>
 8004562:	4f24      	ldr	r7, [pc, #144]	; (80045f4 <_malloc_r+0xb8>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d104      	bne.n	8004574 <_malloc_r+0x38>
 800456a:	0021      	movs	r1, r4
 800456c:	0030      	movs	r0, r6
 800456e:	f000 f869 	bl	8004644 <_sbrk_r>
 8004572:	6038      	str	r0, [r7, #0]
 8004574:	0029      	movs	r1, r5
 8004576:	0030      	movs	r0, r6
 8004578:	f000 f864 	bl	8004644 <_sbrk_r>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d12b      	bne.n	80045d8 <_malloc_r+0x9c>
 8004580:	230c      	movs	r3, #12
 8004582:	0030      	movs	r0, r6
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	f000 f877 	bl	8004678 <__malloc_unlock>
 800458a:	e003      	b.n	8004594 <_malloc_r+0x58>
 800458c:	2d00      	cmp	r5, #0
 800458e:	dade      	bge.n	800454e <_malloc_r+0x12>
 8004590:	230c      	movs	r3, #12
 8004592:	6033      	str	r3, [r6, #0]
 8004594:	2000      	movs	r0, #0
 8004596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	1b5b      	subs	r3, r3, r5
 800459c:	d419      	bmi.n	80045d2 <_malloc_r+0x96>
 800459e:	2b0b      	cmp	r3, #11
 80045a0:	d903      	bls.n	80045aa <_malloc_r+0x6e>
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	18e4      	adds	r4, r4, r3
 80045a6:	6025      	str	r5, [r4, #0]
 80045a8:	e003      	b.n	80045b2 <_malloc_r+0x76>
 80045aa:	6863      	ldr	r3, [r4, #4]
 80045ac:	42a2      	cmp	r2, r4
 80045ae:	d10e      	bne.n	80045ce <_malloc_r+0x92>
 80045b0:	600b      	str	r3, [r1, #0]
 80045b2:	0030      	movs	r0, r6
 80045b4:	f000 f860 	bl	8004678 <__malloc_unlock>
 80045b8:	0020      	movs	r0, r4
 80045ba:	2207      	movs	r2, #7
 80045bc:	300b      	adds	r0, #11
 80045be:	1d23      	adds	r3, r4, #4
 80045c0:	4390      	bics	r0, r2
 80045c2:	1ac2      	subs	r2, r0, r3
 80045c4:	4298      	cmp	r0, r3
 80045c6:	d0e6      	beq.n	8004596 <_malloc_r+0x5a>
 80045c8:	1a1b      	subs	r3, r3, r0
 80045ca:	50a3      	str	r3, [r4, r2]
 80045cc:	e7e3      	b.n	8004596 <_malloc_r+0x5a>
 80045ce:	6053      	str	r3, [r2, #4]
 80045d0:	e7ef      	b.n	80045b2 <_malloc_r+0x76>
 80045d2:	0022      	movs	r2, r4
 80045d4:	6864      	ldr	r4, [r4, #4]
 80045d6:	e7c2      	b.n	800455e <_malloc_r+0x22>
 80045d8:	2303      	movs	r3, #3
 80045da:	1cc4      	adds	r4, r0, #3
 80045dc:	439c      	bics	r4, r3
 80045de:	42a0      	cmp	r0, r4
 80045e0:	d0e1      	beq.n	80045a6 <_malloc_r+0x6a>
 80045e2:	1a21      	subs	r1, r4, r0
 80045e4:	0030      	movs	r0, r6
 80045e6:	f000 f82d 	bl	8004644 <_sbrk_r>
 80045ea:	1c43      	adds	r3, r0, #1
 80045ec:	d1db      	bne.n	80045a6 <_malloc_r+0x6a>
 80045ee:	e7c7      	b.n	8004580 <_malloc_r+0x44>
 80045f0:	200000a8 	.word	0x200000a8
 80045f4:	200000ac 	.word	0x200000ac

080045f8 <_realloc_r>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	0007      	movs	r7, r0
 80045fc:	000d      	movs	r5, r1
 80045fe:	0016      	movs	r6, r2
 8004600:	2900      	cmp	r1, #0
 8004602:	d105      	bne.n	8004610 <_realloc_r+0x18>
 8004604:	0011      	movs	r1, r2
 8004606:	f7ff ff99 	bl	800453c <_malloc_r>
 800460a:	0004      	movs	r4, r0
 800460c:	0020      	movs	r0, r4
 800460e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004610:	2a00      	cmp	r2, #0
 8004612:	d103      	bne.n	800461c <_realloc_r+0x24>
 8004614:	f7ff ff48 	bl	80044a8 <_free_r>
 8004618:	0034      	movs	r4, r6
 800461a:	e7f7      	b.n	800460c <_realloc_r+0x14>
 800461c:	f000 f834 	bl	8004688 <_malloc_usable_size_r>
 8004620:	002c      	movs	r4, r5
 8004622:	42b0      	cmp	r0, r6
 8004624:	d2f2      	bcs.n	800460c <_realloc_r+0x14>
 8004626:	0031      	movs	r1, r6
 8004628:	0038      	movs	r0, r7
 800462a:	f7ff ff87 	bl	800453c <_malloc_r>
 800462e:	1e04      	subs	r4, r0, #0
 8004630:	d0ec      	beq.n	800460c <_realloc_r+0x14>
 8004632:	0029      	movs	r1, r5
 8004634:	0032      	movs	r2, r6
 8004636:	f7ff ff1a 	bl	800446e <memcpy>
 800463a:	0029      	movs	r1, r5
 800463c:	0038      	movs	r0, r7
 800463e:	f7ff ff33 	bl	80044a8 <_free_r>
 8004642:	e7e3      	b.n	800460c <_realloc_r+0x14>

08004644 <_sbrk_r>:
 8004644:	2300      	movs	r3, #0
 8004646:	b570      	push	{r4, r5, r6, lr}
 8004648:	4d06      	ldr	r5, [pc, #24]	; (8004664 <_sbrk_r+0x20>)
 800464a:	0004      	movs	r4, r0
 800464c:	0008      	movs	r0, r1
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	f7fc fb06 	bl	8000c60 <_sbrk>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d103      	bne.n	8004660 <_sbrk_r+0x1c>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d000      	beq.n	8004660 <_sbrk_r+0x1c>
 800465e:	6023      	str	r3, [r4, #0]
 8004660:	bd70      	pop	{r4, r5, r6, pc}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	200002bc 	.word	0x200002bc

08004668 <__malloc_lock>:
 8004668:	b510      	push	{r4, lr}
 800466a:	4802      	ldr	r0, [pc, #8]	; (8004674 <__malloc_lock+0xc>)
 800466c:	f000 f814 	bl	8004698 <__retarget_lock_acquire_recursive>
 8004670:	bd10      	pop	{r4, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	200002c4 	.word	0x200002c4

08004678 <__malloc_unlock>:
 8004678:	b510      	push	{r4, lr}
 800467a:	4802      	ldr	r0, [pc, #8]	; (8004684 <__malloc_unlock+0xc>)
 800467c:	f000 f80d 	bl	800469a <__retarget_lock_release_recursive>
 8004680:	bd10      	pop	{r4, pc}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	200002c4 	.word	0x200002c4

08004688 <_malloc_usable_size_r>:
 8004688:	1f0b      	subs	r3, r1, #4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	1f18      	subs	r0, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	da01      	bge.n	8004696 <_malloc_usable_size_r+0xe>
 8004692:	580b      	ldr	r3, [r1, r0]
 8004694:	18c0      	adds	r0, r0, r3
 8004696:	4770      	bx	lr

08004698 <__retarget_lock_acquire_recursive>:
 8004698:	4770      	bx	lr

0800469a <__retarget_lock_release_recursive>:
 800469a:	4770      	bx	lr

0800469c <_init>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr

080046a8 <_fini>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr
