
Final_DMA_IT_samplingRate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e04  08004e04  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e0c  08004e0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000070  08004e84  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08004e84  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f03  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002691  00000000  00000000  00034f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00037630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000386a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2bb  00000000  00000000  00039628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001351d  00000000  00000000  000538e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab61d  00000000  00000000  00066e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011241d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fac  00000000  00000000  00112470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004d18 	.word	0x08004d18

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08004d18 	.word	0x08004d18

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	1c08      	adds	r0, r1, #0
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fc28 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f824 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f9b0 	bl	80009b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 f990 	bl	8000974 <MX_DMA_Init>
  MX_ADC1_Init();
 8000654:	f000 f898 	bl	8000788 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000658:	f000 f93e 	bl	80008d8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800065c:	f000 f8fe 	bl	800085c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DMA_RegisterCallback(&hadc1, HAL_DMA_XFER_CPLT_CB_ID, &HAL_ADC_ConvCpltCallback);
  HAL_ADC_Start_DMA(&hadc1,value, buffer_size);
 8000660:	4908      	ldr	r1, [pc, #32]	; (8000684 <main+0x44>)
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <main+0x48>)
 8000664:	2232      	movs	r2, #50	; 0x32
 8000666:	0018      	movs	r0, r3
 8000668:	f000 ffa2 	bl	80015b0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <main+0x4c>)
 800066e:	0018      	movs	r0, r3
 8000670:	f002 fefa 	bl	8003468 <HAL_TIM_Base_Start>
  time1 = __HAL_TIM_GET_COUNTER(&htim6);
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <main+0x4c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <main+0x50>)
 800067e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x40>
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	20000284 	.word	0x20000284
 8000688:	200000e8 	.word	0x200000e8
 800068c:	200001a8 	.word	0x200001a8
 8000690:	20000090 	.word	0x20000090

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b0a1      	sub	sp, #132	; 0x84
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	2448      	movs	r4, #72	; 0x48
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2338      	movs	r3, #56	; 0x38
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f003 ff09 	bl	80044bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006aa:	2338      	movs	r3, #56	; 0x38
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	0018      	movs	r0, r3
 80006b0:	2310      	movs	r3, #16
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f003 ff01 	bl	80044bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	0018      	movs	r0, r3
 80006be:	2334      	movs	r3, #52	; 0x34
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f003 fefa 	bl	80044bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 ffab 	bl	8002628 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2202      	movs	r2, #2
 80006d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	0052      	lsls	r2, r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006e0:	0021      	movs	r1, r4
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2240      	movs	r2, #64	; 0x40
 80006ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2202      	movs	r2, #2
 80006f2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2202      	movs	r2, #2
 80006f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2208      	movs	r2, #8
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	0292      	lsls	r2, r2, #10
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0492      	lsls	r2, r2, #18
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	0592      	lsls	r2, r2, #22
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	187b      	adds	r3, r7, r1
 8000720:	0018      	movs	r0, r3
 8000722:	f001 ffcd 	bl	80026c0 <HAL_RCC_OscConfig>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072a:	f000 fa23 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	2138      	movs	r1, #56	; 0x38
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2207      	movs	r2, #7
 8000734:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2202      	movs	r2, #2
 800073a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2102      	movs	r1, #2
 800074c:	0018      	movs	r0, r3
 800074e:	f002 fad1 	bl	8002cf4 <HAL_RCC_ClockConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000756:	f000 fa0d 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4a09      	ldr	r2, [pc, #36]	; (8000784 <SystemClock_Config+0xf0>)
 800075e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	0018      	movs	r0, r3
 8000770:	f002 fc6a 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000778:	f000 f9fc 	bl	8000b74 <Error_Handler>
  }
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b021      	add	sp, #132	; 0x84
 8000782:	bd90      	pop	{r4, r7, pc}
 8000784:	00004002 	.word	0x00004002

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	0018      	movs	r0, r3
 8000792:	230c      	movs	r3, #12
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f003 fe90 	bl	80044bc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <MX_ADC1_Init+0xcc>)
 800079e:	4a2e      	ldr	r2, [pc, #184]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a2:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0612      	lsls	r2, r2, #24
 80007a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007be:	2204      	movs	r2, #4
 80007c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007dc:	2220      	movs	r2, #32
 80007de:	2100      	movs	r1, #0
 80007e0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007f0:	222c      	movs	r2, #44	; 0x2c
 80007f2:	2101      	movs	r1, #1
 80007f4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007fe:	2207      	movs	r2, #7
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_ADC1_Init+0xcc>)
 8000804:	2200      	movs	r2, #0
 8000806:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_ADC1_Init+0xcc>)
 800080a:	223c      	movs	r2, #60	; 0x3c
 800080c:	2100      	movs	r1, #0
 800080e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_ADC1_Init+0xcc>)
 8000812:	2200      	movs	r2, #0
 8000814:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_ADC1_Init+0xcc>)
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fd21 	bl	8001260 <HAL_ADC_Init>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000822:	f000 f9a7 	bl	8000b74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2201      	movs	r2, #1
 800082a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000838:	1d3a      	adds	r2, r7, #4
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_ADC1_Init+0xcc>)
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f000 ff54 	bl	80016ec <HAL_ADC_ConfigChannel>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000848:	f000 f994 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b004      	add	sp, #16
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200000e8 	.word	0x200000e8
 8000858:	40012400 	.word	0x40012400

0800085c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	0018      	movs	r0, r3
 8000866:	230c      	movs	r3, #12
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f003 fe26 	bl	80044bc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_TIM6_Init+0x6c>)
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <MX_TIM6_Init+0x70>)
 8000874:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64000-1;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_TIM6_Init+0x6c>)
 8000878:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <MX_TIM6_Init+0x74>)
 800087a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_TIM6_Init+0x6c>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_TIM6_Init+0x6c>)
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <MX_TIM6_Init+0x78>)
 8000886:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_TIM6_Init+0x6c>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_TIM6_Init+0x6c>)
 8000890:	0018      	movs	r0, r3
 8000892:	f002 fd91 	bl	80033b8 <HAL_TIM_Base_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800089a:	f000 f96b 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008aa:	1d3a      	adds	r2, r7, #4
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_TIM6_Init+0x6c>)
 80008ae:	0011      	movs	r1, r2
 80008b0:	0018      	movs	r0, r3
 80008b2:	f002 fead 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80008ba:	f000 f95b 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b004      	add	sp, #16
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	200001a8 	.word	0x200001a8
 80008cc:	40001000 	.word	0x40001000
 80008d0:	0000f9ff 	.word	0x0000f9ff
 80008d4:	0000ffff 	.word	0x0000ffff

080008d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <MX_USART2_UART_Init+0x94>)
 80008de:	4a24      	ldr	r2, [pc, #144]	; (8000970 <MX_USART2_UART_Init+0x98>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_USART2_UART_Init+0x94>)
 80008e4:	22e1      	movs	r2, #225	; 0xe1
 80008e6:	0252      	lsls	r2, r2, #9
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <MX_USART2_UART_Init+0x94>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_USART2_UART_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_USART2_UART_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_USART2_UART_Init+0x94>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_USART2_UART_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_USART2_UART_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_USART2_UART_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_USART2_UART_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART2_UART_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_USART2_UART_Init+0x94>)
 8000922:	0018      	movs	r0, r3
 8000924:	f002 fee2 	bl	80036ec <HAL_UART_Init>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800092c:	f000 f922 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART2_UART_Init+0x94>)
 8000932:	2100      	movs	r1, #0
 8000934:	0018      	movs	r0, r3
 8000936:	f003 fcb7 	bl	80042a8 <HAL_UARTEx_SetTxFifoThreshold>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800093e:	f000 f919 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_USART2_UART_Init+0x94>)
 8000944:	2100      	movs	r1, #0
 8000946:	0018      	movs	r0, r3
 8000948:	f003 fcee 	bl	8004328 <HAL_UARTEx_SetRxFifoThreshold>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000950:	f000 f910 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <MX_USART2_UART_Init+0x94>)
 8000956:	0018      	movs	r0, r3
 8000958:	f003 fc6c 	bl	8004234 <HAL_UARTEx_DisableFifoMode>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000960:	f000 f908 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	200001f4 	.word	0x200001f4
 8000970:	40004400 	.word	0x40004400

08000974 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_DMA_Init+0x38>)
 800097c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_DMA_Init+0x38>)
 8000980:	2101      	movs	r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	639a      	str	r2, [r3, #56]	; 0x38
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_DMA_Init+0x38>)
 8000988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098a:	2201      	movs	r2, #1
 800098c:	4013      	ands	r3, r2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2009      	movs	r0, #9
 8000998:	f001 fa40 	bl	8001e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800099c:	2009      	movs	r0, #9
 800099e:	f001 fa52 	bl	8001e46 <HAL_NVIC_EnableIRQ>

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	240c      	movs	r4, #12
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	0018      	movs	r0, r3
 80009bc:	2314      	movs	r3, #20
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f003 fd7b 	bl	80044bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009cc:	2104      	movs	r1, #4
 80009ce:	430a      	orrs	r2, r1
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d6:	2204      	movs	r2, #4
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009e4:	2120      	movs	r1, #32
 80009e6:	430a      	orrs	r2, r1
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ee:	2220      	movs	r2, #32
 80009f0:	4013      	ands	r3, r2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_GPIO_Init+0x9c>)
 8000a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a06:	2201      	movs	r2, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	2200      	movs	r2, #0
 8000a14:	2120      	movs	r1, #32
 8000a16:	0018      	movs	r0, r3
 8000a18:	f001 fde8 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a1c:	0021      	movs	r1, r4
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2220      	movs	r2, #32
 8000a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2201      	movs	r2, #1
 8000a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2202      	movs	r2, #2
 8000a34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a36:	187a      	adds	r2, r7, r1
 8000a38:	23a0      	movs	r3, #160	; 0xa0
 8000a3a:	05db      	lsls	r3, r3, #23
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fc70 	bl	8002324 <HAL_GPIO_Init>

}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b009      	add	sp, #36	; 0x24
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a50:	b5b0      	push	{r4, r5, r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
	  time2 = __HAL_TIM_GET_COUNTER(&htim6); // start counting for 1 sec
 8000a58:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a5e:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <HAL_ADC_ConvCpltCallback+0xfc>)
 8000a60:	601a      	str	r2, [r3, #0]
	  count ++;
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <HAL_ADC_ConvCpltCallback+0x100>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <HAL_ADC_ConvCpltCallback+0x100>)
 8000a6a:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<buffer_size; i++){
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e011      	b.n	8000a96 <HAL_ADC_ConvCpltCallback+0x46>
	  	  sum = sum + value[i];
 8000a72:	4b38      	ldr	r3, [pc, #224]	; (8000b54 <HAL_ADC_ConvCpltCallback+0x104>)
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	58d3      	ldr	r3, [r2, r3]
 8000a7a:	001c      	movs	r4, r3
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	001d      	movs	r5, r3
 8000a80:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <HAL_ADC_ConvCpltCallback+0x108>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	1912      	adds	r2, r2, r4
 8000a88:	416b      	adcs	r3, r5
 8000a8a:	4933      	ldr	r1, [pc, #204]	; (8000b58 <HAL_ADC_ConvCpltCallback+0x108>)
 8000a8c:	600a      	str	r2, [r1, #0]
 8000a8e:	604b      	str	r3, [r1, #4]
	  for(int i=0; i<buffer_size; i++){
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	2b31      	cmp	r3, #49	; 0x31
 8000a9a:	ddea      	ble.n	8000a72 <HAL_ADC_ConvCpltCallback+0x22>
//	  AV = sum/50;
//	  //sum = 0;
//	  sprintf(msg,"/ms AV=%d\r\n",AV);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)sum, sizeof(sum), HAL_MAX_DELAY);
//	  sum = 0;
	  if(time2-time1 >= 1000)
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <HAL_ADC_ConvCpltCallback+0xfc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x10c>)
 8000aa2:	8812      	ldrh	r2, [r2, #0]
 8000aa4:	1a9a      	subs	r2, r3, r2
 8000aa6:	23fa      	movs	r3, #250	; 0xfa
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d348      	bcc.n	8000b40 <HAL_ADC_ConvCpltCallback+0xf0>
	  {
		  //sprintf(msg,"sample rate = %ld average = %d time = %d sec\r\n",count*buffer_size,HAL_ADC_GetValue(&hadc1),sec++);
		  sprintf(msg,"SR=%lu",count*buffer_size);
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <HAL_ADC_ConvCpltCallback+0x100>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2232      	movs	r2, #50	; 0x32
 8000ab4:	435a      	muls	r2, r3
 8000ab6:	492a      	ldr	r1, [pc, #168]	; (8000b60 <HAL_ADC_ConvCpltCallback+0x110>)
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <HAL_ADC_ConvCpltCallback+0x114>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f003 fd06 	bl	80044cc <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <HAL_ADC_ConvCpltCallback+0x114>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fb1e 	bl	8000104 <strlen>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	2301      	movs	r3, #1
 8000ace:	425b      	negs	r3, r3
 8000ad0:	4924      	ldr	r1, [pc, #144]	; (8000b64 <HAL_ADC_ConvCpltCallback+0x114>)
 8000ad2:	4825      	ldr	r0, [pc, #148]	; (8000b68 <HAL_ADC_ConvCpltCallback+0x118>)
 8000ad4:	f002 fe60 	bl	8003798 <HAL_UART_Transmit>

//		  for(int i=0; i<buffer_size; i++){
//			  sum = sum + value[i];
//		  }

		  AV = sum/(count*buffer_size);
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_ADC_ConvCpltCallback+0x108>)
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	6859      	ldr	r1, [r3, #4]
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_ADC_ConvCpltCallback+0x100>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2232      	movs	r2, #50	; 0x32
 8000ae4:	4353      	muls	r3, r2
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f7ff fc90 	bl	8000414 <__aeabi_uldivmod>
 8000af4:	0002      	movs	r2, r0
 8000af6:	000b      	movs	r3, r1
 8000af8:	491c      	ldr	r1, [pc, #112]	; (8000b6c <HAL_ADC_ConvCpltCallback+0x11c>)
 8000afa:	600a      	str	r2, [r1, #0]
 8000afc:	604b      	str	r3, [r1, #4]
		  sprintf(msg,"/ms AV=%lu\r\n",AV);
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <HAL_ADC_ConvCpltCallback+0x11c>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	491a      	ldr	r1, [pc, #104]	; (8000b70 <HAL_ADC_ConvCpltCallback+0x120>)
 8000b06:	4817      	ldr	r0, [pc, #92]	; (8000b64 <HAL_ADC_ConvCpltCallback+0x114>)
 8000b08:	f003 fce0 	bl	80044cc <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_ADC_ConvCpltCallback+0x114>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f7ff faf8 	bl	8000104 <strlen>
 8000b14:	0003      	movs	r3, r0
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	2301      	movs	r3, #1
 8000b1a:	425b      	negs	r3, r3
 8000b1c:	4911      	ldr	r1, [pc, #68]	; (8000b64 <HAL_ADC_ConvCpltCallback+0x114>)
 8000b1e:	4812      	ldr	r0, [pc, #72]	; (8000b68 <HAL_ADC_ConvCpltCallback+0x118>)
 8000b20:	f002 fe3a 	bl	8003798 <HAL_UART_Transmit>
//		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

//		  sprintf(msg,"(time took %d sec)\r\n",sec++);
//		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

		  count = 0;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_ADC_ConvCpltCallback+0x100>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
		  sum = 0;
 8000b2a:	490b      	ldr	r1, [pc, #44]	; (8000b58 <HAL_ADC_ConvCpltCallback+0x108>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2300      	movs	r3, #0
 8000b30:	600a      	str	r2, [r1, #0]
 8000b32:	604b      	str	r3, [r1, #4]
		  time1 = __HAL_TIM_GET_COUNTER(&htim6);
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x10c>)
 8000b3e:	801a      	strh	r2, [r3, #0]
	  }


}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b006      	add	sp, #24
 8000b46:	bdb0      	pop	{r4, r5, r7, pc}
 8000b48:	200001a8 	.word	0x200001a8
 8000b4c:	20000094 	.word	0x20000094
 8000b50:	2000008c 	.word	0x2000008c
 8000b54:	20000284 	.word	0x20000284
 8000b58:	20000098 	.word	0x20000098
 8000b5c:	20000090 	.word	0x20000090
 8000b60:	08004d30 	.word	0x08004d30
 8000b64:	200000b4 	.word	0x200000b4
 8000b68:	200001f4 	.word	0x200001f4
 8000b6c:	200000a0 	.word	0x200000a0
 8000b70:	08004d38 	.word	0x08004d38

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	641a      	str	r2, [r3, #64]	; 0x40
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	2201      	movs	r2, #1
 8000b98:	4013      	ands	r3, r2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_MspInit+0x4c>)
 8000ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_MspInit+0x4c>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	0549      	lsls	r1, r1, #21
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	055b      	lsls	r3, r3, #21
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000bba:	23c0      	movs	r3, #192	; 0xc0
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 f9f0 	bl	8000fa4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b08b      	sub	sp, #44	; 0x2c
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	2414      	movs	r4, #20
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	2314      	movs	r3, #20
 8000be0:	001a      	movs	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f003 fc6a 	bl	80044bc <memset>
  if(hadc->Instance==ADC1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d154      	bne.n	8000c9c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <HAL_ADC_MspInit+0xd8>)
 8000bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <HAL_ADC_MspInit+0xd8>)
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	0349      	lsls	r1, r1, #13
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <HAL_ADC_MspInit+0xd8>)
 8000c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	035b      	lsls	r3, r3, #13
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <HAL_ADC_MspInit+0xd8>)
 8000c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <HAL_ADC_MspInit+0xd8>)
 8000c14:	2101      	movs	r1, #1
 8000c16:	430a      	orrs	r2, r1
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <HAL_ADC_MspInit+0xd8>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2201      	movs	r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2203      	movs	r2, #3
 8000c30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	193a      	adds	r2, r7, r4
 8000c3a:	23a0      	movs	r3, #160	; 0xa0
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f001 fb6f 	bl	8002324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_ADC_MspInit+0xe0>)
 8000c4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c4e:	2205      	movs	r2, #5
 8000c50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c76:	2220      	movs	r2, #32
 8000c78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f001 f8fc 	bl	8001e80 <HAL_DMA_Init>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000c8c:	f7ff ff72 	bl	8000b74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c94:	651a      	str	r2, [r3, #80]	; 0x50
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_ADC_MspInit+0xdc>)
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b00b      	add	sp, #44	; 0x2c
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	40012400 	.word	0x40012400
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	2000014c 	.word	0x2000014c
 8000cb0:	40020008 	.word	0x40020008

08000cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <HAL_TIM_Base_MspInit+0x34>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10b      	bne.n	8000cde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_TIM_Base_MspInit+0x38>)
 8000cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_TIM_Base_MspInit+0x38>)
 8000ccc:	2110      	movs	r1, #16
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_TIM_Base_MspInit+0x38>)
 8000cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd6:	2210      	movs	r2, #16
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b004      	add	sp, #16
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	40001000 	.word	0x40001000
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b08b      	sub	sp, #44	; 0x2c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	2414      	movs	r4, #20
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	2314      	movs	r3, #20
 8000d00:	001a      	movs	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	f003 fbda 	bl	80044bc <memset>
  if(huart->Instance==USART2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d130      	bne.n	8000d74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	0289      	lsls	r1, r1, #10
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	029b      	lsls	r3, r3, #10
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	430a      	orrs	r2, r1
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d46:	0021      	movs	r1, r4
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2202      	movs	r2, #2
 8000d52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2201      	movs	r2, #1
 8000d64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	187a      	adds	r2, r7, r1
 8000d68:	23a0      	movs	r3, #160	; 0xa0
 8000d6a:	05db      	lsls	r3, r3, #23
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f001 fad8 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b00b      	add	sp, #44	; 0x2c
 8000d7a:	bd90      	pop	{r4, r7, pc}
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40021000 	.word	0x40021000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da8:	f000 f8e0 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//HAL_UART_Transmit(&huart2, "Transfer completed\r\n", sizeof("Transfer completed\r\n"), HAL_MAX_DELAY);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <DMA1_Channel1_IRQHandler+0x14>)
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f001 f970 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	2000014c 	.word	0x2000014c

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	18d3      	adds	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f003 fb34 	bl	8004468 <__errno>
 8000e00:	0003      	movs	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	425b      	negs	r3, r3
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	18d2      	adds	r2, r2, r3
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <_sbrk+0x64>)
 8000e1c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b006      	add	sp, #24
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20009000 	.word	0x20009000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	200000a8 	.word	0x200000a8
 8000e34:	20000360 	.word	0x20000360

08000e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e48:	f7ff fff6 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	; (8000e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <LoopForever+0xe>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	; (8000e90 <LoopForever+0x16>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e72:	f003 faff 	bl	8004474 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e76:	f7ff fbe3 	bl	8000640 <main>

08000e7a <LoopForever>:

LoopForever:
  b LoopForever
 8000e7a:	e7fe      	b.n	8000e7a <LoopForever>
  ldr   r0, =_estack
 8000e7c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e88:	08004e14 	.word	0x08004e14
  ldr r2, =_sbss
 8000e8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e90:	20000360 	.word	0x20000360

08000e94 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC1_COMP_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x3c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_Init+0x3c>)
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	0049      	lsls	r1, r1, #1
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f810 	bl	8000ed8 <HAL_InitTick>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	e001      	b.n	8000ec8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff fe5c 	bl	8000b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	781b      	ldrb	r3, [r3, #0]
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_InitTick+0x88>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d02b      	beq.n	8000f48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_InitTick+0x8c>)
 8000ef2:	681c      	ldr	r4, [r3, #0]
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_InitTick+0x88>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	0019      	movs	r1, r3
 8000efa:	23fa      	movs	r3, #250	; 0xfa
 8000efc:	0098      	lsls	r0, r3, #2
 8000efe:	f7ff f913 	bl	8000128 <__udivsi3>
 8000f02:	0003      	movs	r3, r0
 8000f04:	0019      	movs	r1, r3
 8000f06:	0020      	movs	r0, r4
 8000f08:	f7ff f90e 	bl	8000128 <__udivsi3>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 ffa9 	bl	8001e66 <HAL_SYSTICK_Config>
 8000f14:	1e03      	subs	r3, r0, #0
 8000f16:	d112      	bne.n	8000f3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d80a      	bhi.n	8000f34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	2301      	movs	r3, #1
 8000f22:	425b      	negs	r3, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 ff78 	bl	8001e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_InitTick+0x90>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e00d      	b.n	8000f50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e008      	b.n	8000f50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f3e:	230f      	movs	r3, #15
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e003      	b.n	8000f50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f48:	230f      	movs	r3, #15
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	781b      	ldrb	r3, [r3, #0]
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b005      	add	sp, #20
 8000f5c:	bd90      	pop	{r4, r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	001a      	movs	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	18d2      	adds	r2, r2, r3
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	2000034c 	.word	0x2000034c

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	2000034c 	.word	0x2000034c

08000fa4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	fffff9ff 	.word	0xfffff9ff

08000fd0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	fe3fffff 	.word	0xfe3fffff

08000ff8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	23e0      	movs	r3, #224	; 0xe0
 8001006:	045b      	lsls	r3, r3, #17
 8001008:	4013      	ands	r3, r2
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}

08001012 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	2104      	movs	r1, #4
 8001026:	400a      	ands	r2, r1
 8001028:	2107      	movs	r1, #7
 800102a:	4091      	lsls	r1, r2
 800102c:	000a      	movs	r2, r1
 800102e:	43d2      	mvns	r2, r2
 8001030:	401a      	ands	r2, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	2104      	movs	r1, #4
 8001036:	400b      	ands	r3, r1
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4099      	lsls	r1, r3
 800103c:	000b      	movs	r3, r1
 800103e:	431a      	orrs	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bd80      	pop	{r7, pc}

0800104c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	2104      	movs	r1, #4
 800105e:	400a      	ands	r2, r1
 8001060:	2107      	movs	r1, #7
 8001062:	4091      	lsls	r1, r2
 8001064:	000a      	movs	r2, r1
 8001066:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2104      	movs	r1, #4
 800106c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800106e:	40da      	lsrs	r2, r3
 8001070:	0013      	movs	r3, r2
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}

0800107a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	23c0      	movs	r3, #192	; 0xc0
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	4013      	ands	r3, r2
 800108c:	d101      	bne.n	8001092 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001092:	2300      	movs	r3, #0
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b002      	add	sp, #8
 800109a:	bd80      	pop	{r7, pc}

0800109c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	211f      	movs	r1, #31
 80010b0:	400a      	ands	r2, r1
 80010b2:	210f      	movs	r1, #15
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	43d2      	mvns	r2, r2
 80010ba:	401a      	ands	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	0e9b      	lsrs	r3, r3, #26
 80010c0:	210f      	movs	r1, #15
 80010c2:	4019      	ands	r1, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	201f      	movs	r0, #31
 80010c8:	4003      	ands	r3, r0
 80010ca:	4099      	lsls	r1, r3
 80010cc:	000b      	movs	r3, r1
 80010ce:	431a      	orrs	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b004      	add	sp, #16
 80010da:	bd80      	pop	{r7, pc}

080010dc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	035b      	lsls	r3, r3, #13
 80010ee:	0b5b      	lsrs	r3, r3, #13
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}

080010fe <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	0352      	lsls	r2, r2, #13
 8001110:	0b52      	lsrs	r2, r2, #13
 8001112:	43d2      	mvns	r2, r2
 8001114:	401a      	ands	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	0212      	lsls	r2, r2, #8
 8001138:	43d2      	mvns	r2, r2
 800113a:	401a      	ands	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	400b      	ands	r3, r1
 8001144:	4904      	ldr	r1, [pc, #16]	; (8001158 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001146:	400b      	ands	r3, r1
 8001148:	431a      	orrs	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b004      	add	sp, #16
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	07ffff00 	.word	0x07ffff00

0800115c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a05      	ldr	r2, [pc, #20]	; (8001180 <LL_ADC_EnableInternalRegulator+0x24>)
 800116a:	4013      	ands	r3, r2
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	0552      	lsls	r2, r2, #21
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	6fffffe8 	.word	0x6fffffe8

08001184 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	055b      	lsls	r3, r3, #21
 8001194:	401a      	ands	r2, r3
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	055b      	lsls	r3, r3, #21
 800119a:	429a      	cmp	r2, r3
 800119c:	d101      	bne.n	80011a2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}

080011ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <LL_ADC_Enable+0x20>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	2201      	movs	r2, #1
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	7fffffe8 	.word	0x7fffffe8

080011d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <LL_ADC_Disable+0x20>)
 80011de:	4013      	ands	r3, r2
 80011e0:	2202      	movs	r2, #2
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	7fffffe8 	.word	0x7fffffe8

080011f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2201      	movs	r2, #1
 8001202:	4013      	ands	r3, r2
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <LL_ADC_IsEnabled+0x18>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <LL_ADC_IsEnabled+0x1a>
 800120c:	2300      	movs	r3, #0
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <LL_ADC_REG_StartConversion+0x20>)
 8001226:	4013      	ands	r3, r2
 8001228:	2204      	movs	r2, #4
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}
 8001238:	7fffffe8 	.word	0x7fffffe8

0800123c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2204      	movs	r2, #4
 800124a:	4013      	ands	r3, r2
 800124c:	2b04      	cmp	r3, #4
 800124e:	d101      	bne.n	8001254 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001254:	2300      	movs	r3, #0
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001268:	231f      	movs	r3, #31
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e17f      	b.n	8001586 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10a      	bne.n	80012a4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fc9d 	bl	8000bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2254      	movs	r2, #84	; 0x54
 80012a0:	2100      	movs	r1, #0
 80012a2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff ff6b 	bl	8001184 <LL_ADC_IsInternalRegulatorEnabled>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d115      	bne.n	80012de <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff ff50 	bl	800115c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012bc:	4bb4      	ldr	r3, [pc, #720]	; (8001590 <HAL_ADC_Init+0x330>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	49b4      	ldr	r1, [pc, #720]	; (8001594 <HAL_ADC_Init+0x334>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7fe ff30 	bl	8000128 <__udivsi3>
 80012c8:	0003      	movs	r3, r0
 80012ca:	3301      	adds	r3, #1
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012d0:	e002      	b.n	80012d8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f9      	bne.n	80012d2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7ff ff4e 	bl	8001184 <LL_ADC_IsInternalRegulatorEnabled>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d10f      	bne.n	800130c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f0:	2210      	movs	r2, #16
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	2201      	movs	r2, #1
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001304:	231f      	movs	r3, #31
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff93 	bl	800123c <LL_ADC_REG_IsConversionOngoing>
 8001316:	0003      	movs	r3, r0
 8001318:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	2210      	movs	r2, #16
 8001320:	4013      	ands	r3, r2
 8001322:	d000      	beq.n	8001326 <HAL_ADC_Init+0xc6>
 8001324:	e122      	b.n	800156c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d000      	beq.n	800132e <HAL_ADC_Init+0xce>
 800132c:	e11e      	b.n	800156c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	4a99      	ldr	r2, [pc, #612]	; (8001598 <HAL_ADC_Init+0x338>)
 8001334:	4013      	ands	r3, r2
 8001336:	2202      	movs	r2, #2
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	0018      	movs	r0, r3
 8001344:	f7ff ff56 	bl	80011f4 <LL_ADC_IsEnabled>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d000      	beq.n	800134e <HAL_ADC_Init+0xee>
 800134c:	e0ad      	b.n	80014aa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e1b      	ldrb	r3, [r3, #24]
 8001356:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001358:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7e5b      	ldrb	r3, [r3, #25]
 800135e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001360:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7e9b      	ldrb	r3, [r3, #26]
 8001366:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001368:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <HAL_ADC_Init+0x118>
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	015b      	lsls	r3, r3, #5
 8001376:	e000      	b.n	800137a <HAL_ADC_Init+0x11a>
 8001378:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800137a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001380:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	da04      	bge.n	8001394 <HAL_ADC_Init+0x134>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	085b      	lsrs	r3, r3, #1
 8001392:	e001      	b.n	8001398 <HAL_ADC_Init+0x138>
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001398:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	212c      	movs	r1, #44	; 0x2c
 800139e:	5c5b      	ldrb	r3, [r3, r1]
 80013a0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80013a2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2220      	movs	r2, #32
 80013ae:	5c9b      	ldrb	r3, [r3, r2]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d115      	bne.n	80013e0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7e9b      	ldrb	r3, [r3, #26]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	0252      	lsls	r2, r2, #9
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	e00b      	b.n	80013e0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013cc:	2220      	movs	r2, #32
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	2201      	movs	r2, #1
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00a      	beq.n	80013fe <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ec:	23e0      	movs	r3, #224	; 0xe0
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013f6:	4313      	orrs	r3, r2
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	4a65      	ldr	r2, [pc, #404]	; (800159c <HAL_ADC_Init+0x33c>)
 8001406:	4013      	ands	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	430a      	orrs	r2, r1
 8001412:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	0f9b      	lsrs	r3, r3, #30
 800141a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001420:	4313      	orrs	r3, r2
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4313      	orrs	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	223c      	movs	r2, #60	; 0x3c
 800142c:	5c9b      	ldrb	r3, [r3, r2]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d111      	bne.n	8001456 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	0f9b      	lsrs	r3, r3, #30
 8001438:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800143e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001444:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800144a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	4313      	orrs	r3, r2
 8001450:	2201      	movs	r2, #1
 8001452:	4313      	orrs	r3, r2
 8001454:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	4a50      	ldr	r2, [pc, #320]	; (80015a0 <HAL_ADC_Init+0x340>)
 800145e:	4013      	ands	r3, r2
 8001460:	0019      	movs	r1, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	430a      	orrs	r2, r1
 800146a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	23c0      	movs	r3, #192	; 0xc0
 8001472:	061b      	lsls	r3, r3, #24
 8001474:	429a      	cmp	r2, r3
 8001476:	d018      	beq.n	80014aa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	05db      	lsls	r3, r3, #23
 8001480:	429a      	cmp	r2, r3
 8001482:	d012      	beq.n	80014aa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	061b      	lsls	r3, r3, #24
 800148c:	429a      	cmp	r2, r3
 800148e:	d00c      	beq.n	80014aa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001490:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <HAL_ADC_Init+0x344>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a44      	ldr	r2, [pc, #272]	; (80015a8 <HAL_ADC_Init+0x348>)
 8001496:	4013      	ands	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	23f0      	movs	r3, #240	; 0xf0
 80014a0:	039b      	lsls	r3, r3, #14
 80014a2:	401a      	ands	r2, r3
 80014a4:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <HAL_ADC_Init+0x344>)
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b2:	001a      	movs	r2, r3
 80014b4:	2100      	movs	r1, #0
 80014b6:	f7ff fdac 	bl	8001012 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c2:	493a      	ldr	r1, [pc, #232]	; (80015ac <HAL_ADC_Init+0x34c>)
 80014c4:	001a      	movs	r2, r3
 80014c6:	f7ff fda4 	bl	8001012 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2110      	movs	r1, #16
 80014de:	4249      	negs	r1, r1
 80014e0:	430a      	orrs	r2, r1
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
 80014e4:	e018      	b.n	8001518 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	039b      	lsls	r3, r3, #14
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d112      	bne.n	8001518 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	221c      	movs	r2, #28
 8001502:	4013      	ands	r3, r2
 8001504:	2210      	movs	r2, #16
 8001506:	4252      	negs	r2, r2
 8001508:	409a      	lsls	r2, r3
 800150a:	0011      	movs	r1, r2
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2100      	movs	r1, #0
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff fd94 	bl	800104c <LL_ADC_GetSamplingTimeCommonChannels>
 8001524:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800152a:	429a      	cmp	r2, r3
 800152c:	d10b      	bne.n	8001546 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001538:	2203      	movs	r2, #3
 800153a:	4393      	bics	r3, r2
 800153c:	2201      	movs	r2, #1
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001544:	e01c      	b.n	8001580 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	2212      	movs	r2, #18
 800154c:	4393      	bics	r3, r2
 800154e:	2210      	movs	r2, #16
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	2201      	movs	r2, #1
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001562:	231f      	movs	r3, #31
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800156a:	e009      	b.n	8001580 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	2210      	movs	r2, #16
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001578:	231f      	movs	r3, #31
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001580:	231f      	movs	r3, #31
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	781b      	ldrb	r3, [r3, #0]
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b008      	add	sp, #32
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	20000000 	.word	0x20000000
 8001594:	00030d40 	.word	0x00030d40
 8001598:	fffffefd 	.word	0xfffffefd
 800159c:	fffe0201 	.word	0xfffe0201
 80015a0:	1ffffc02 	.word	0x1ffffc02
 80015a4:	40012708 	.word	0x40012708
 80015a8:	ffc3ffff 	.word	0xffc3ffff
 80015ac:	07ffff04 	.word	0x07ffff04

080015b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7ff fe3b 	bl	800123c <LL_ADC_REG_IsConversionOngoing>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d16c      	bne.n	80016a4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2254      	movs	r2, #84	; 0x54
 80015ce:	5c9b      	ldrb	r3, [r3, r2]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_Start_DMA+0x28>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e06c      	b.n	80016b2 <HAL_ADC_Start_DMA+0x102>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2254      	movs	r2, #84	; 0x54
 80015dc:	2101      	movs	r1, #1
 80015de:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2201      	movs	r2, #1
 80015e8:	4013      	ands	r3, r2
 80015ea:	d113      	bne.n	8001614 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fdff 	bl	80011f4 <LL_ADC_IsEnabled>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d004      	beq.n	8001604 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff fde6 	bl	80011d0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2101      	movs	r1, #1
 8001610:	430a      	orrs	r2, r1
 8001612:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001614:	2517      	movs	r5, #23
 8001616:	197c      	adds	r4, r7, r5
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	0018      	movs	r0, r3
 800161c:	f000 fa3e 	bl	8001a9c <ADC_Enable>
 8001620:	0003      	movs	r3, r0
 8001622:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001624:	002c      	movs	r4, r5
 8001626:	193b      	adds	r3, r7, r4
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d13e      	bne.n	80016ac <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	4a22      	ldr	r2, [pc, #136]	; (80016bc <HAL_ADC_Start_DMA+0x10c>)
 8001634:	4013      	ands	r3, r2
 8001636:	2280      	movs	r2, #128	; 0x80
 8001638:	0052      	lsls	r2, r2, #1
 800163a:	431a      	orrs	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_ADC_Start_DMA+0x110>)
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <HAL_ADC_Start_DMA+0x114>)
 8001654:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165a:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <HAL_ADC_Start_DMA+0x118>)
 800165c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	221c      	movs	r2, #28
 8001664:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2254      	movs	r2, #84	; 0x54
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2110      	movs	r1, #16
 800167a:	430a      	orrs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3340      	adds	r3, #64	; 0x40
 8001688:	0019      	movs	r1, r3
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	193c      	adds	r4, r7, r4
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f000 fc80 	bl	8001f94 <HAL_DMA_Start_IT>
 8001694:	0003      	movs	r3, r0
 8001696:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0018      	movs	r0, r3
 800169e:	f7ff fdbb 	bl	8001218 <LL_ADC_REG_StartConversion>
 80016a2:	e003      	b.n	80016ac <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016a4:	2317      	movs	r3, #23
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2202      	movs	r2, #2
 80016aa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80016ac:	2317      	movs	r3, #23
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	781b      	ldrb	r3, [r3, #0]
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b006      	add	sp, #24
 80016b8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	fffff0fe 	.word	0xfffff0fe
 80016c0:	08001ba9 	.word	0x08001ba9
 80016c4:	08001c71 	.word	0x08001c71
 80016c8:	08001c8f 	.word	0x08001c8f

080016cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b002      	add	sp, #8
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f6:	2317      	movs	r3, #23
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2254      	movs	r2, #84	; 0x54
 8001706:	5c9b      	ldrb	r3, [r3, r2]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x24>
 800170c:	2302      	movs	r3, #2
 800170e:	e1c0      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x3a6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2254      	movs	r2, #84	; 0x54
 8001714:	2101      	movs	r1, #1
 8001716:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff fd8d 	bl	800123c <LL_ADC_REG_IsConversionOngoing>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d000      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x3c>
 8001726:	e1a3      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d100      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x46>
 8001730:	e143      	b.n	80019ba <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	429a      	cmp	r2, r3
 800173c:	d004      	beq.n	8001748 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001742:	4ac1      	ldr	r2, [pc, #772]	; (8001a48 <HAL_ADC_ConfigChannel+0x35c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d108      	bne.n	800175a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0019      	movs	r1, r3
 8001752:	0010      	movs	r0, r2
 8001754:	f7ff fcc2 	bl	80010dc <LL_ADC_REG_SetSequencerChAdd>
 8001758:	e0c9      	b.n	80018ee <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	211f      	movs	r1, #31
 8001764:	400b      	ands	r3, r1
 8001766:	210f      	movs	r1, #15
 8001768:	4099      	lsls	r1, r3
 800176a:	000b      	movs	r3, r1
 800176c:	43db      	mvns	r3, r3
 800176e:	4013      	ands	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	035b      	lsls	r3, r3, #13
 8001778:	0b5b      	lsrs	r3, r3, #13
 800177a:	d105      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x9c>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0e9b      	lsrs	r3, r3, #26
 8001782:	221f      	movs	r2, #31
 8001784:	4013      	ands	r3, r2
 8001786:	e098      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	4013      	ands	r3, r2
 8001790:	d000      	beq.n	8001794 <HAL_ADC_ConfigChannel+0xa8>
 8001792:	e091      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x1cc>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d000      	beq.n	80017a0 <HAL_ADC_ConfigChannel+0xb4>
 800179e:	e089      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x1c8>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2204      	movs	r2, #4
 80017a6:	4013      	ands	r3, r2
 80017a8:	d000      	beq.n	80017ac <HAL_ADC_ConfigChannel+0xc0>
 80017aa:	e081      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x1c4>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2208      	movs	r2, #8
 80017b2:	4013      	ands	r3, r2
 80017b4:	d000      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0xcc>
 80017b6:	e079      	b.n	80018ac <HAL_ADC_ConfigChannel+0x1c0>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2210      	movs	r2, #16
 80017be:	4013      	ands	r3, r2
 80017c0:	d000      	beq.n	80017c4 <HAL_ADC_ConfigChannel+0xd8>
 80017c2:	e071      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x1bc>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2220      	movs	r2, #32
 80017ca:	4013      	ands	r3, r2
 80017cc:	d000      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xe4>
 80017ce:	e069      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x1b8>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	4013      	ands	r3, r2
 80017d8:	d000      	beq.n	80017dc <HAL_ADC_ConfigChannel+0xf0>
 80017da:	e061      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x1b4>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	4013      	ands	r3, r2
 80017e4:	d000      	beq.n	80017e8 <HAL_ADC_ConfigChannel+0xfc>
 80017e6:	e059      	b.n	800189c <HAL_ADC_ConfigChannel+0x1b0>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4013      	ands	r3, r2
 80017f2:	d151      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1ac>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	d149      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1a8>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4013      	ands	r3, r2
 800180a:	d141      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1a4>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	4013      	ands	r3, r2
 8001816:	d139      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1a0>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	015b      	lsls	r3, r3, #5
 8001820:	4013      	ands	r3, r2
 8001822:	d131      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x19c>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	019b      	lsls	r3, r3, #6
 800182c:	4013      	ands	r3, r2
 800182e:	d129      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x198>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	01db      	lsls	r3, r3, #7
 8001838:	4013      	ands	r3, r2
 800183a:	d121      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x194>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	4013      	ands	r3, r2
 8001846:	d119      	bne.n	800187c <HAL_ADC_ConfigChannel+0x190>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	025b      	lsls	r3, r3, #9
 8001850:	4013      	ands	r3, r2
 8001852:	d111      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x18c>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	029b      	lsls	r3, r3, #10
 800185c:	4013      	ands	r3, r2
 800185e:	d109      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x188>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	02db      	lsls	r3, r3, #11
 8001868:	4013      	ands	r3, r2
 800186a:	d001      	beq.n	8001870 <HAL_ADC_ConfigChannel+0x184>
 800186c:	2312      	movs	r3, #18
 800186e:	e024      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001870:	2300      	movs	r3, #0
 8001872:	e022      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001874:	2311      	movs	r3, #17
 8001876:	e020      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001878:	2310      	movs	r3, #16
 800187a:	e01e      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 800187c:	230f      	movs	r3, #15
 800187e:	e01c      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001880:	230e      	movs	r3, #14
 8001882:	e01a      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001884:	230d      	movs	r3, #13
 8001886:	e018      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001888:	230c      	movs	r3, #12
 800188a:	e016      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 800188c:	230b      	movs	r3, #11
 800188e:	e014      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001890:	230a      	movs	r3, #10
 8001892:	e012      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001894:	2309      	movs	r3, #9
 8001896:	e010      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001898:	2308      	movs	r3, #8
 800189a:	e00e      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 800189c:	2307      	movs	r3, #7
 800189e:	e00c      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018a0:	2306      	movs	r3, #6
 80018a2:	e00a      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018a4:	2305      	movs	r3, #5
 80018a6:	e008      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018a8:	2304      	movs	r3, #4
 80018aa:	e006      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018ac:	2303      	movs	r3, #3
 80018ae:	e004      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018b8:	2300      	movs	r3, #0
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	6852      	ldr	r2, [r2, #4]
 80018be:	201f      	movs	r0, #31
 80018c0:	4002      	ands	r2, r0
 80018c2:	4093      	lsls	r3, r2
 80018c4:	000a      	movs	r2, r1
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d808      	bhi.n	80018ee <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	001a      	movs	r2, r3
 80018ea:	f7ff fbd7 	bl	800109c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	001a      	movs	r2, r3
 80018fc:	f7ff fc12 	bl	8001124 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db00      	blt.n	800190a <HAL_ADC_ConfigChannel+0x21e>
 8001908:	e0bc      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800190a:	4b50      	ldr	r3, [pc, #320]	; (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff fb73 	bl	8000ff8 <LL_ADC_GetCommonPathInternalCh>
 8001912:	0003      	movs	r3, r0
 8001914:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a4d      	ldr	r2, [pc, #308]	; (8001a50 <HAL_ADC_ConfigChannel+0x364>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d122      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001928:	d11d      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	0412      	lsls	r2, r2, #16
 8001930:	4313      	orrs	r3, r2
 8001932:	4a46      	ldr	r2, [pc, #280]	; (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 8001934:	0019      	movs	r1, r3
 8001936:	0010      	movs	r0, r2
 8001938:	f7ff fb4a 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800193c:	4b45      	ldr	r3, [pc, #276]	; (8001a54 <HAL_ADC_ConfigChannel+0x368>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4945      	ldr	r1, [pc, #276]	; (8001a58 <HAL_ADC_ConfigChannel+0x36c>)
 8001942:	0018      	movs	r0, r3
 8001944:	f7fe fbf0 	bl	8000128 <__udivsi3>
 8001948:	0003      	movs	r3, r0
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	0013      	movs	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	189b      	adds	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001956:	e002      	b.n	800195e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3b01      	subs	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f9      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001964:	e08e      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a3c      	ldr	r2, [pc, #240]	; (8001a5c <HAL_ADC_ConfigChannel+0x370>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d10e      	bne.n	800198e <HAL_ADC_ConfigChannel+0x2a2>
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	045b      	lsls	r3, r3, #17
 8001976:	4013      	ands	r3, r2
 8001978:	d109      	bne.n	800198e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	0452      	lsls	r2, r2, #17
 8001980:	4313      	orrs	r3, r2
 8001982:	4a32      	ldr	r2, [pc, #200]	; (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 8001984:	0019      	movs	r1, r3
 8001986:	0010      	movs	r0, r2
 8001988:	f7ff fb22 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
 800198c:	e07a      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a33      	ldr	r2, [pc, #204]	; (8001a60 <HAL_ADC_ConfigChannel+0x374>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d000      	beq.n	800199a <HAL_ADC_ConfigChannel+0x2ae>
 8001998:	e074      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	03db      	lsls	r3, r3, #15
 80019a0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80019a2:	d000      	beq.n	80019a6 <HAL_ADC_ConfigChannel+0x2ba>
 80019a4:	e06e      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	03d2      	lsls	r2, r2, #15
 80019ac:	4313      	orrs	r3, r2
 80019ae:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 80019b0:	0019      	movs	r1, r3
 80019b2:	0010      	movs	r0, r2
 80019b4:	f7ff fb0c 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
 80019b8:	e064      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d004      	beq.n	80019d0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019ca:	4a1f      	ldr	r2, [pc, #124]	; (8001a48 <HAL_ADC_ConfigChannel+0x35c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d107      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0019      	movs	r1, r3
 80019da:	0010      	movs	r0, r2
 80019dc:	f7ff fb8f 	bl	80010fe <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da4d      	bge.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7ff fb04 	bl	8000ff8 <LL_ADC_GetCommonPathInternalCh>
 80019f0:	0003      	movs	r3, r0
 80019f2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_ADC_ConfigChannel+0x364>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d108      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4a18      	ldr	r2, [pc, #96]	; (8001a64 <HAL_ADC_ConfigChannel+0x378>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 8001a06:	0019      	movs	r1, r3
 8001a08:	0010      	movs	r0, r2
 8001a0a:	f7ff fae1 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
 8001a0e:	e039      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_ADC_ConfigChannel+0x370>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d108      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <HAL_ADC_ConfigChannel+0x37c>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 8001a22:	0019      	movs	r1, r3
 8001a24:	0010      	movs	r0, r2
 8001a26:	f7ff fad3 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
 8001a2a:	e02b      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_ADC_ConfigChannel+0x374>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d126      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <HAL_ADC_ConfigChannel+0x380>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 8001a3e:	0019      	movs	r1, r3
 8001a40:	0010      	movs	r0, r2
 8001a42:	f7ff fac5 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
 8001a46:	e01d      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
 8001a48:	80000004 	.word	0x80000004
 8001a4c:	40012708 	.word	0x40012708
 8001a50:	b0001000 	.word	0xb0001000
 8001a54:	20000000 	.word	0x20000000
 8001a58:	00030d40 	.word	0x00030d40
 8001a5c:	b8004000 	.word	0xb8004000
 8001a60:	b4002000 	.word	0xb4002000
 8001a64:	ff7fffff 	.word	0xff7fffff
 8001a68:	feffffff 	.word	0xfeffffff
 8001a6c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	2220      	movs	r2, #32
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a7c:	2317      	movs	r3, #23
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2254      	movs	r2, #84	; 0x54
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001a8c:	2317      	movs	r3, #23
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	781b      	ldrb	r3, [r3, #0]
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b006      	add	sp, #24
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)

08001a9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7ff fba1 	bl	80011f4 <LL_ADC_IsEnabled>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d000      	beq.n	8001ab8 <ADC_Enable+0x1c>
 8001ab6:	e069      	b.n	8001b8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	4a36      	ldr	r2, [pc, #216]	; (8001b98 <ADC_Enable+0xfc>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d00d      	beq.n	8001ae0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	2210      	movs	r2, #16
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e056      	b.n	8001b8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff fb61 	bl	80011ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <ADC_Enable+0x100>)
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff fa83 	bl	8000ff8 <LL_ADC_GetCommonPathInternalCh>
 8001af2:	0002      	movs	r2, r0
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	041b      	lsls	r3, r3, #16
 8001af8:	4013      	ands	r3, r2
 8001afa:	d00f      	beq.n	8001b1c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <ADC_Enable+0x104>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4928      	ldr	r1, [pc, #160]	; (8001ba4 <ADC_Enable+0x108>)
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7fe fb10 	bl	8000128 <__udivsi3>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b0e:	e002      	b.n	8001b16 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7e5b      	ldrb	r3, [r3, #25]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d033      	beq.n	8001b8c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001b24:	f7ff fa34 	bl	8000f90 <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b2c:	e027      	b.n	8001b7e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7ff fb5e 	bl	80011f4 <LL_ADC_IsEnabled>
 8001b38:	1e03      	subs	r3, r0, #0
 8001b3a:	d104      	bne.n	8001b46 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff fb33 	bl	80011ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b46:	f7ff fa23 	bl	8000f90 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d914      	bls.n	8001b7e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d00d      	beq.n	8001b7e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	2210      	movs	r2, #16
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	2201      	movs	r2, #1
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e007      	b.n	8001b8e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d1d0      	bne.n	8001b2e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b004      	add	sp, #16
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	80000017 	.word	0x80000017
 8001b9c:	40012708 	.word	0x40012708
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	00030d40 	.word	0x00030d40

08001ba8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	2250      	movs	r2, #80	; 0x50
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d141      	bne.n	8001c44 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f7ff fa51 	bl	800107a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bd8:	1e03      	subs	r3, r0, #0
 8001bda:	d02e      	beq.n	8001c3a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	7e9b      	ldrb	r3, [r3, #26]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d12a      	bne.n	8001c3a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2208      	movs	r2, #8
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d123      	bne.n	8001c3a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f7ff fb20 	bl	800123c <LL_ADC_REG_IsConversionOngoing>
 8001bfc:	1e03      	subs	r3, r0, #0
 8001bfe:	d110      	bne.n	8001c22 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	210c      	movs	r1, #12
 8001c0c:	438a      	bics	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <ADC_DMAConvCplt+0xc4>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	2201      	movs	r2, #1
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	659a      	str	r2, [r3, #88]	; 0x58
 8001c20:	e00b      	b.n	8001c3a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	2220      	movs	r2, #32
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c32:	2201      	movs	r2, #1
 8001c34:	431a      	orrs	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7fe ff07 	bl	8000a50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c42:	e00f      	b.n	8001c64 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	2210      	movs	r2, #16
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d004      	beq.n	8001c58 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff fd43 	bl	80016dc <HAL_ADC_ErrorCallback>
}
 8001c56:	e005      	b.n	8001c64 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	0010      	movs	r0, r2
 8001c62:	4798      	blx	r3
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b004      	add	sp, #16
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	fffffefe 	.word	0xfffffefe

08001c70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff fd23 	bl	80016cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b004      	add	sp, #16
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	2240      	movs	r2, #64	; 0x40
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	2204      	movs	r2, #4
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f7ff fd10 	bl	80016dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b004      	add	sp, #16
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	0002      	movs	r2, r0
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8001cd6:	d809      	bhi.n	8001cec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	001a      	movs	r2, r3
 8001cde:	231f      	movs	r3, #31
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_EnableIRQ+0x30>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	4091      	lsls	r1, r2
 8001ce8:	000a      	movs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	0002      	movs	r2, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	1dfb      	adds	r3, r7, #7
 8001d04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	1dfb      	adds	r3, r7, #7
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d0c:	d828      	bhi.n	8001d60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d0e:	4a2f      	ldr	r2, [pc, #188]	; (8001dcc <__NVIC_SetPriority+0xd4>)
 8001d10:	1dfb      	adds	r3, r7, #7
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	33c0      	adds	r3, #192	; 0xc0
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	589b      	ldr	r3, [r3, r2]
 8001d1e:	1dfa      	adds	r2, r7, #7
 8001d20:	7812      	ldrb	r2, [r2, #0]
 8001d22:	0011      	movs	r1, r2
 8001d24:	2203      	movs	r2, #3
 8001d26:	400a      	ands	r2, r1
 8001d28:	00d2      	lsls	r2, r2, #3
 8001d2a:	21ff      	movs	r1, #255	; 0xff
 8001d2c:	4091      	lsls	r1, r2
 8001d2e:	000a      	movs	r2, r1
 8001d30:	43d2      	mvns	r2, r2
 8001d32:	401a      	ands	r2, r3
 8001d34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	019b      	lsls	r3, r3, #6
 8001d3a:	22ff      	movs	r2, #255	; 0xff
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	0018      	movs	r0, r3
 8001d44:	2303      	movs	r3, #3
 8001d46:	4003      	ands	r3, r0
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d4c:	481f      	ldr	r0, [pc, #124]	; (8001dcc <__NVIC_SetPriority+0xd4>)
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	430a      	orrs	r2, r1
 8001d58:	33c0      	adds	r3, #192	; 0xc0
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d5e:	e031      	b.n	8001dc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d60:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <__NVIC_SetPriority+0xd8>)
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	0019      	movs	r1, r3
 8001d68:	230f      	movs	r3, #15
 8001d6a:	400b      	ands	r3, r1
 8001d6c:	3b08      	subs	r3, #8
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3306      	adds	r3, #6
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	18d3      	adds	r3, r2, r3
 8001d76:	3304      	adds	r3, #4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	1dfa      	adds	r2, r7, #7
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	0011      	movs	r1, r2
 8001d80:	2203      	movs	r2, #3
 8001d82:	400a      	ands	r2, r1
 8001d84:	00d2      	lsls	r2, r2, #3
 8001d86:	21ff      	movs	r1, #255	; 0xff
 8001d88:	4091      	lsls	r1, r2
 8001d8a:	000a      	movs	r2, r1
 8001d8c:	43d2      	mvns	r2, r2
 8001d8e:	401a      	ands	r2, r3
 8001d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	019b      	lsls	r3, r3, #6
 8001d96:	22ff      	movs	r2, #255	; 0xff
 8001d98:	401a      	ands	r2, r3
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	2303      	movs	r3, #3
 8001da2:	4003      	ands	r3, r0
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001da8:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <__NVIC_SetPriority+0xd8>)
 8001daa:	1dfb      	adds	r3, r7, #7
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	001c      	movs	r4, r3
 8001db0:	230f      	movs	r3, #15
 8001db2:	4023      	ands	r3, r4
 8001db4:	3b08      	subs	r3, #8
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	430a      	orrs	r2, r1
 8001dba:	3306      	adds	r3, #6
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	18c3      	adds	r3, r0, r3
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	601a      	str	r2, [r3, #0]
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b003      	add	sp, #12
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	1e5a      	subs	r2, r3, #1
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	045b      	lsls	r3, r3, #17
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d301      	bcc.n	8001dec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de8:	2301      	movs	r3, #1
 8001dea:	e010      	b.n	8001e0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <SysTick_Config+0x44>)
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	3a01      	subs	r2, #1
 8001df2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df4:	2301      	movs	r3, #1
 8001df6:	425b      	negs	r3, r3
 8001df8:	2103      	movs	r1, #3
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f7ff ff7c 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x44>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x44>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	210f      	movs	r1, #15
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	1c02      	adds	r2, r0, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b25b      	sxtb	r3, r3
 8001e36:	0011      	movs	r1, r2
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff ff5d 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b004      	add	sp, #16
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	1dfb      	adds	r3, r7, #7
 8001e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f7ff ff33 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b002      	add	sp, #8
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7ff ffaf 	bl	8001dd4 <SysTick_Config>
 8001e76:	0003      	movs	r3, r0
}
 8001e78:	0018      	movs	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b002      	add	sp, #8
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e077      	b.n	8001f82 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a3d      	ldr	r2, [pc, #244]	; (8001f8c <HAL_DMA_Init+0x10c>)
 8001e98:	4694      	mov	ip, r2
 8001e9a:	4463      	add	r3, ip
 8001e9c:	2114      	movs	r1, #20
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7fe f942 	bl	8000128 <__udivsi3>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	009a      	lsls	r2, r3, #2
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2225      	movs	r2, #37	; 0x25
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4934      	ldr	r1, [pc, #208]	; (8001f90 <HAL_DMA_Init+0x110>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6819      	ldr	r1, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f000 f9c1 	bl	8002284 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	01db      	lsls	r3, r3, #7
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d102      	bne.n	8001f14 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	213f      	movs	r1, #63	; 0x3f
 8001f1e:	400a      	ands	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d011      	beq.n	8001f58 <HAL_DMA_Init+0xd8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d80d      	bhi.n	8001f58 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 f9cc 	bl	80022dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	e008      	b.n	8001f6a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2225      	movs	r2, #37	; 0x25
 8001f74:	2101      	movs	r1, #1
 8001f76:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2224      	movs	r2, #36	; 0x24
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b002      	add	sp, #8
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	bffdfff8 	.word	0xbffdfff8
 8001f90:	ffff800f 	.word	0xffff800f

08001f94 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2317      	movs	r3, #23
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2224      	movs	r2, #36	; 0x24
 8001fae:	5c9b      	ldrb	r3, [r3, r2]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_DMA_Start_IT+0x24>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e06f      	b.n	8002098 <HAL_DMA_Start_IT+0x104>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2225      	movs	r2, #37	; 0x25
 8001fc4:	5c9b      	ldrb	r3, [r3, r2]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d157      	bne.n	800207c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2225      	movs	r2, #37	; 0x25
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f907 	bl	8002204 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	210e      	movs	r1, #14
 800200a:	430a      	orrs	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e00f      	b.n	8002030 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2104      	movs	r1, #4
 800201c:	438a      	bics	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	210a      	movs	r1, #10
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	025b      	lsls	r3, r3, #9
 800203a:	4013      	ands	r3, r2
 800203c:	d008      	beq.n	8002050 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	2180      	movs	r1, #128	; 0x80
 800204a:	0049      	lsls	r1, r1, #1
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	0049      	lsls	r1, r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2101      	movs	r1, #1
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e00a      	b.n	8002092 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2224      	movs	r2, #36	; 0x24
 8002086:	2100      	movs	r1, #0
 8002088:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800208a:	2317      	movs	r3, #23
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002092:	2317      	movs	r3, #23
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	781b      	ldrb	r3, [r3, #0]
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b006      	add	sp, #24
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80020a8:	4b55      	ldr	r3, [pc, #340]	; (8002200 <HAL_DMA_IRQHandler+0x160>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	221c      	movs	r2, #28
 80020bc:	4013      	ands	r3, r2
 80020be:	2204      	movs	r2, #4
 80020c0:	409a      	lsls	r2, r3
 80020c2:	0013      	movs	r3, r2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4013      	ands	r3, r2
 80020c8:	d027      	beq.n	800211a <HAL_DMA_IRQHandler+0x7a>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2204      	movs	r2, #4
 80020ce:	4013      	ands	r3, r2
 80020d0:	d023      	beq.n	800211a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2220      	movs	r2, #32
 80020da:	4013      	ands	r3, r2
 80020dc:	d107      	bne.n	80020ee <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2104      	movs	r1, #4
 80020ea:	438a      	bics	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80020ee:	4b44      	ldr	r3, [pc, #272]	; (8002200 <HAL_DMA_IRQHandler+0x160>)
 80020f0:	6859      	ldr	r1, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	221c      	movs	r2, #28
 80020f8:	4013      	ands	r3, r2
 80020fa:	2204      	movs	r2, #4
 80020fc:	409a      	lsls	r2, r3
 80020fe:	4b40      	ldr	r3, [pc, #256]	; (8002200 <HAL_DMA_IRQHandler+0x160>)
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	2b00      	cmp	r3, #0
 800210a:	d100      	bne.n	800210e <HAL_DMA_IRQHandler+0x6e>
 800210c:	e073      	b.n	80021f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	0010      	movs	r0, r2
 8002116:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002118:	e06d      	b.n	80021f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	221c      	movs	r2, #28
 8002120:	4013      	ands	r3, r2
 8002122:	2202      	movs	r2, #2
 8002124:	409a      	lsls	r2, r3
 8002126:	0013      	movs	r3, r2
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	d02e      	beq.n	800218c <HAL_DMA_IRQHandler+0xec>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2202      	movs	r2, #2
 8002132:	4013      	ands	r3, r2
 8002134:	d02a      	beq.n	800218c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2220      	movs	r2, #32
 800213e:	4013      	ands	r3, r2
 8002140:	d10b      	bne.n	800215a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	210a      	movs	r1, #10
 800214e:	438a      	bics	r2, r1
 8002150:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2225      	movs	r2, #37	; 0x25
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_DMA_IRQHandler+0x160>)
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	221c      	movs	r2, #28
 8002164:	4013      	ands	r3, r2
 8002166:	2202      	movs	r2, #2
 8002168:	409a      	lsls	r2, r3
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_DMA_IRQHandler+0x160>)
 800216c:	430a      	orrs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	; 0x24
 8002174:	2100      	movs	r1, #0
 8002176:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d03a      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	0010      	movs	r0, r2
 8002188:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800218a:	e034      	b.n	80021f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	221c      	movs	r2, #28
 8002192:	4013      	ands	r3, r2
 8002194:	2208      	movs	r2, #8
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	d02b      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x158>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2208      	movs	r2, #8
 80021a4:	4013      	ands	r3, r2
 80021a6:	d027      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	210e      	movs	r1, #14
 80021b4:	438a      	bics	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_DMA_IRQHandler+0x160>)
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	221c      	movs	r2, #28
 80021c2:	4013      	ands	r3, r2
 80021c4:	2201      	movs	r2, #1
 80021c6:	409a      	lsls	r2, r3
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_DMA_IRQHandler+0x160>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2225      	movs	r2, #37	; 0x25
 80021d8:	2101      	movs	r1, #1
 80021da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2224      	movs	r2, #36	; 0x24
 80021e0:	2100      	movs	r1, #0
 80021e2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	0010      	movs	r0, r2
 80021f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	46c0      	nop			; (mov r8, r8)
}
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b004      	add	sp, #16
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40020000 	.word	0x40020000

08002204 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800221a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002220:	2b00      	cmp	r3, #0
 8002222:	d004      	beq.n	800222e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800222c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <DMA_SetConfig+0x7c>)
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	221c      	movs	r2, #28
 8002238:	4013      	ands	r3, r2
 800223a:	2201      	movs	r2, #1
 800223c:	409a      	lsls	r2, r3
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <DMA_SetConfig+0x7c>)
 8002240:	430a      	orrs	r2, r1
 8002242:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b10      	cmp	r3, #16
 8002252:	d108      	bne.n	8002266 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002264:	e007      	b.n	8002276 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	60da      	str	r2, [r3, #12]
}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	b004      	add	sp, #16
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	40020000 	.word	0x40020000

08002284 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002294:	4694      	mov	ip, r2
 8002296:	4463      	add	r3, ip
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	001a      	movs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	001a      	movs	r2, r3
 80022a6:	23ff      	movs	r3, #255	; 0xff
 80022a8:	4013      	ands	r3, r2
 80022aa:	3b08      	subs	r3, #8
 80022ac:	2114      	movs	r1, #20
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7fd ff3a 	bl	8000128 <__udivsi3>
 80022b4:	0003      	movs	r3, r0
 80022b6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80022bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	221f      	movs	r2, #31
 80022c2:	4013      	ands	r3, r2
 80022c4:	2201      	movs	r2, #1
 80022c6:	409a      	lsls	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b004      	add	sp, #16
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	10008200 	.word	0x10008200
 80022d8:	40020880 	.word	0x40020880

080022dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	223f      	movs	r2, #63	; 0x3f
 80022ea:	4013      	ands	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022f2:	4694      	mov	ip, r2
 80022f4:	4463      	add	r3, ip
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	001a      	movs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002302:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3b01      	subs	r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	4013      	ands	r3, r2
 800230c:	2201      	movs	r2, #1
 800230e:	409a      	lsls	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b004      	add	sp, #16
 800231a:	bd80      	pop	{r7, pc}
 800231c:	1000823f 	.word	0x1000823f
 8002320:	40020940 	.word	0x40020940

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002332:	e147      	b.n	80025c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2101      	movs	r1, #1
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4091      	lsls	r1, r2
 800233e:	000a      	movs	r2, r1
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d100      	bne.n	800234c <HAL_GPIO_Init+0x28>
 800234a:	e138      	b.n	80025be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2203      	movs	r2, #3
 8002352:	4013      	ands	r3, r2
 8002354:	2b01      	cmp	r3, #1
 8002356:	d005      	beq.n	8002364 <HAL_GPIO_Init+0x40>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2203      	movs	r2, #3
 800235e:	4013      	ands	r3, r2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d130      	bne.n	80023c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	409a      	lsls	r2, r3
 8002372:	0013      	movs	r3, r2
 8002374:	43da      	mvns	r2, r3
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	409a      	lsls	r2, r3
 8002386:	0013      	movs	r3, r2
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239a:	2201      	movs	r2, #1
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	43da      	mvns	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	2201      	movs	r2, #1
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2203      	movs	r2, #3
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d017      	beq.n	8002402 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	43da      	mvns	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2203      	movs	r2, #3
 8002408:	4013      	ands	r3, r2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d123      	bne.n	8002456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	58d3      	ldr	r3, [r2, r3]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2207      	movs	r2, #7
 8002420:	4013      	ands	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	409a      	lsls	r2, r3
 8002428:	0013      	movs	r3, r2
 800242a:	43da      	mvns	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2107      	movs	r1, #7
 800243a:	400b      	ands	r3, r1
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	6939      	ldr	r1, [r7, #16]
 8002454:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	409a      	lsls	r2, r3
 8002464:	0013      	movs	r3, r2
 8002466:	43da      	mvns	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2203      	movs	r2, #3
 8002474:	401a      	ands	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	409a      	lsls	r2, r3
 800247c:	0013      	movs	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	23c0      	movs	r3, #192	; 0xc0
 8002490:	029b      	lsls	r3, r3, #10
 8002492:	4013      	ands	r3, r2
 8002494:	d100      	bne.n	8002498 <HAL_GPIO_Init+0x174>
 8002496:	e092      	b.n	80025be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002498:	4a50      	ldr	r2, [pc, #320]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3318      	adds	r3, #24
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	589b      	ldr	r3, [r3, r2]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2203      	movs	r2, #3
 80024aa:	4013      	ands	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	220f      	movs	r2, #15
 80024b0:	409a      	lsls	r2, r3
 80024b2:	0013      	movs	r3, r2
 80024b4:	43da      	mvns	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	23a0      	movs	r3, #160	; 0xa0
 80024c0:	05db      	lsls	r3, r3, #23
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d013      	beq.n	80024ee <HAL_GPIO_Init+0x1ca>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a45      	ldr	r2, [pc, #276]	; (80025e0 <HAL_GPIO_Init+0x2bc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00d      	beq.n	80024ea <HAL_GPIO_Init+0x1c6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a44      	ldr	r2, [pc, #272]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <HAL_GPIO_Init+0x1c2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a43      	ldr	r2, [pc, #268]	; (80025e8 <HAL_GPIO_Init+0x2c4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d101      	bne.n	80024e2 <HAL_GPIO_Init+0x1be>
 80024de:	2303      	movs	r3, #3
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x1cc>
 80024e2:	2305      	movs	r3, #5
 80024e4:	e004      	b.n	80024f0 <HAL_GPIO_Init+0x1cc>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e002      	b.n	80024f0 <HAL_GPIO_Init+0x1cc>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_GPIO_Init+0x1cc>
 80024ee:	2300      	movs	r3, #0
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	2103      	movs	r1, #3
 80024f4:	400a      	ands	r2, r1
 80024f6:	00d2      	lsls	r2, r2, #3
 80024f8:	4093      	lsls	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002500:	4936      	ldr	r1, [pc, #216]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3318      	adds	r3, #24
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800250e:	4b33      	ldr	r3, [pc, #204]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43da      	mvns	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	035b      	lsls	r3, r3, #13
 8002526:	4013      	ands	r3, r2
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002532:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43da      	mvns	r2, r3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	039b      	lsls	r3, r3, #14
 8002550:	4013      	ands	r3, r2
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002562:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 8002564:	2384      	movs	r3, #132	; 0x84
 8002566:	58d3      	ldr	r3, [r2, r3]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43da      	mvns	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	4013      	ands	r3, r2
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002588:	4914      	ldr	r1, [pc, #80]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 800258a:	2284      	movs	r2, #132	; 0x84
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002590:	4a12      	ldr	r2, [pc, #72]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	58d3      	ldr	r3, [r2, r3]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	43da      	mvns	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	025b      	lsls	r3, r3, #9
 80025aa:	4013      	ands	r3, r2
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025b6:	4909      	ldr	r1, [pc, #36]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 80025b8:	2280      	movs	r2, #128	; 0x80
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	40da      	lsrs	r2, r3
 80025cc:	1e13      	subs	r3, r2, #0
 80025ce:	d000      	beq.n	80025d2 <HAL_GPIO_Init+0x2ae>
 80025d0:	e6b0      	b.n	8002334 <HAL_GPIO_Init+0x10>
  }
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b006      	add	sp, #24
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021800 	.word	0x40021800
 80025e0:	50000400 	.word	0x50000400
 80025e4:	50000800 	.word	0x50000800
 80025e8:	50000c00 	.word	0x50000c00

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	0008      	movs	r0, r1
 80025f6:	0011      	movs	r1, r2
 80025f8:	1cbb      	adds	r3, r7, #2
 80025fa:	1c02      	adds	r2, r0, #0
 80025fc:	801a      	strh	r2, [r3, #0]
 80025fe:	1c7b      	adds	r3, r7, #1
 8002600:	1c0a      	adds	r2, r1, #0
 8002602:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002604:	1c7b      	adds	r3, r7, #1
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800260c:	1cbb      	adds	r3, r7, #2
 800260e:	881a      	ldrh	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002616:	1cbb      	adds	r3, r7, #2
 8002618:	881a      	ldrh	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	b002      	add	sp, #8
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a19      	ldr	r2, [pc, #100]	; (800269c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d11f      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	0013      	movs	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	189b      	adds	r3, r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4912      	ldr	r1, [pc, #72]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800265a:	0018      	movs	r0, r3
 800265c:	f7fd fd64 	bl	8000128 <__udivsi3>
 8002660:	0003      	movs	r3, r0
 8002662:	3301      	adds	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002666:	e008      	b.n	800267a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3b01      	subs	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e001      	b.n	800267a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e009      	b.n	800268e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	401a      	ands	r2, r3
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	429a      	cmp	r2, r3
 800268a:	d0ed      	beq.n	8002668 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	40007000 	.word	0x40007000
 800269c:	fffff9ff 	.word	0xfffff9ff
 80026a0:	20000000 	.word	0x20000000
 80026a4:	000f4240 	.word	0x000f4240

080026a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	23e0      	movs	r3, #224	; 0xe0
 80026b2:	01db      	lsls	r3, r3, #7
 80026b4:	4013      	ands	r3, r2
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e2fe      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	d100      	bne.n	80026de <HAL_RCC_OscConfig+0x1e>
 80026dc:	e07c      	b.n	80027d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026de:	4bc3      	ldr	r3, [pc, #780]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2238      	movs	r2, #56	; 0x38
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e8:	4bc0      	ldr	r3, [pc, #768]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2203      	movs	r2, #3
 80026ee:	4013      	ands	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d102      	bne.n	80026fe <HAL_RCC_OscConfig+0x3e>
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d002      	beq.n	8002704 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d10b      	bne.n	800271c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	4bb9      	ldr	r3, [pc, #740]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	029b      	lsls	r3, r3, #10
 800270c:	4013      	ands	r3, r2
 800270e:	d062      	beq.n	80027d6 <HAL_RCC_OscConfig+0x116>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d15e      	bne.n	80027d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e2d9      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	025b      	lsls	r3, r3, #9
 8002724:	429a      	cmp	r2, r3
 8002726:	d107      	bne.n	8002738 <HAL_RCC_OscConfig+0x78>
 8002728:	4bb0      	ldr	r3, [pc, #704]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4baf      	ldr	r3, [pc, #700]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	0249      	lsls	r1, r1, #9
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e020      	b.n	800277a <HAL_RCC_OscConfig+0xba>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	23a0      	movs	r3, #160	; 0xa0
 800273e:	02db      	lsls	r3, r3, #11
 8002740:	429a      	cmp	r2, r3
 8002742:	d10e      	bne.n	8002762 <HAL_RCC_OscConfig+0xa2>
 8002744:	4ba9      	ldr	r3, [pc, #676]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4ba8      	ldr	r3, [pc, #672]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	02c9      	lsls	r1, r1, #11
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	4ba6      	ldr	r3, [pc, #664]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4ba5      	ldr	r3, [pc, #660]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002758:	2180      	movs	r1, #128	; 0x80
 800275a:	0249      	lsls	r1, r1, #9
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e00b      	b.n	800277a <HAL_RCC_OscConfig+0xba>
 8002762:	4ba2      	ldr	r3, [pc, #648]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4ba1      	ldr	r3, [pc, #644]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002768:	49a1      	ldr	r1, [pc, #644]	; (80029f0 <HAL_RCC_OscConfig+0x330>)
 800276a:	400a      	ands	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	4b9f      	ldr	r3, [pc, #636]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b9e      	ldr	r3, [pc, #632]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002774:	499f      	ldr	r1, [pc, #636]	; (80029f4 <HAL_RCC_OscConfig+0x334>)
 8002776:	400a      	ands	r2, r1
 8002778:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d014      	beq.n	80027ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7fe fc05 	bl	8000f90 <HAL_GetTick>
 8002786:	0003      	movs	r3, r0
 8002788:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800278c:	f7fe fc00 	bl	8000f90 <HAL_GetTick>
 8002790:	0002      	movs	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e298      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279e:	4b93      	ldr	r3, [pc, #588]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	029b      	lsls	r3, r3, #10
 80027a6:	4013      	ands	r3, r2
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0xcc>
 80027aa:	e015      	b.n	80027d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fbf0 	bl	8000f90 <HAL_GetTick>
 80027b0:	0003      	movs	r3, r0
 80027b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b6:	f7fe fbeb 	bl	8000f90 <HAL_GetTick>
 80027ba:	0002      	movs	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	; 0x64
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e283      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c8:	4b88      	ldr	r3, [pc, #544]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	4013      	ands	r3, r2
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0xf6>
 80027d4:	e000      	b.n	80027d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2202      	movs	r2, #2
 80027de:	4013      	ands	r3, r2
 80027e0:	d100      	bne.n	80027e4 <HAL_RCC_OscConfig+0x124>
 80027e2:	e099      	b.n	8002918 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e4:	4b81      	ldr	r3, [pc, #516]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2238      	movs	r2, #56	; 0x38
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ee:	4b7f      	ldr	r3, [pc, #508]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2203      	movs	r2, #3
 80027f4:	4013      	ands	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_OscConfig+0x144>
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d002      	beq.n	800280a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d135      	bne.n	8002876 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800280a:	4b78      	ldr	r3, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4013      	ands	r3, r2
 8002814:	d005      	beq.n	8002822 <HAL_RCC_OscConfig+0x162>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e256      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	4b72      	ldr	r3, [pc, #456]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a74      	ldr	r2, [pc, #464]	; (80029f8 <HAL_RCC_OscConfig+0x338>)
 8002828:	4013      	ands	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	021a      	lsls	r2, r3, #8
 8002832:	4b6e      	ldr	r3, [pc, #440]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002834:	430a      	orrs	r2, r1
 8002836:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d112      	bne.n	8002864 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800283e:	4b6b      	ldr	r3, [pc, #428]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <HAL_RCC_OscConfig+0x33c>)
 8002844:	4013      	ands	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	4b67      	ldr	r3, [pc, #412]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002852:	4b66      	ldr	r3, [pc, #408]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	0adb      	lsrs	r3, r3, #11
 8002858:	2207      	movs	r2, #7
 800285a:	4013      	ands	r3, r2
 800285c:	4a68      	ldr	r2, [pc, #416]	; (8002a00 <HAL_RCC_OscConfig+0x340>)
 800285e:	40da      	lsrs	r2, r3
 8002860:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <HAL_RCC_OscConfig+0x344>)
 8002862:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002864:	4b68      	ldr	r3, [pc, #416]	; (8002a08 <HAL_RCC_OscConfig+0x348>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0018      	movs	r0, r3
 800286a:	f7fe fb35 	bl	8000ed8 <HAL_InitTick>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d051      	beq.n	8002916 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e22c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d030      	beq.n	80028e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800287e:	4b5b      	ldr	r3, [pc, #364]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a5e      	ldr	r2, [pc, #376]	; (80029fc <HAL_RCC_OscConfig+0x33c>)
 8002884:	4013      	ands	r3, r2
 8002886:	0019      	movs	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	4b57      	ldr	r3, [pc, #348]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002892:	4b56      	ldr	r3, [pc, #344]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b55      	ldr	r3, [pc, #340]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	0049      	lsls	r1, r1, #1
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fb76 	bl	8000f90 <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028aa:	f7fe fb71 	bl	8000f90 <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e209      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028bc:	4b4b      	ldr	r3, [pc, #300]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4013      	ands	r3, r2
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c8:	4b48      	ldr	r3, [pc, #288]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a4a      	ldr	r2, [pc, #296]	; (80029f8 <HAL_RCC_OscConfig+0x338>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	021a      	lsls	r2, r3, #8
 80028d8:	4b44      	ldr	r3, [pc, #272]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	e01b      	b.n	8002918 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80028e0:	4b42      	ldr	r3, [pc, #264]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b41      	ldr	r3, [pc, #260]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80028e6:	4949      	ldr	r1, [pc, #292]	; (8002a0c <HAL_RCC_OscConfig+0x34c>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fb50 	bl	8000f90 <HAL_GetTick>
 80028f0:	0003      	movs	r3, r0
 80028f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f6:	f7fe fb4b 	bl	8000f90 <HAL_GetTick>
 80028fa:	0002      	movs	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e1e3      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002908:	4b38      	ldr	r3, [pc, #224]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4013      	ands	r3, r2
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x236>
 8002914:	e000      	b.n	8002918 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002916:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2208      	movs	r2, #8
 800291e:	4013      	ands	r3, r2
 8002920:	d047      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002922:	4b32      	ldr	r3, [pc, #200]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2238      	movs	r2, #56	; 0x38
 8002928:	4013      	ands	r3, r2
 800292a:	2b18      	cmp	r3, #24
 800292c:	d10a      	bne.n	8002944 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800292e:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002932:	2202      	movs	r2, #2
 8002934:	4013      	ands	r3, r2
 8002936:	d03c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d138      	bne.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e1c5      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d019      	beq.n	8002980 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 800294e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002952:	2101      	movs	r1, #1
 8002954:	430a      	orrs	r2, r1
 8002956:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fb1a 	bl	8000f90 <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002962:	f7fe fb15 	bl	8000f90 <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1ad      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002974:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002978:	2202      	movs	r2, #2
 800297a:	4013      	ands	r3, r2
 800297c:	d0f1      	beq.n	8002962 <HAL_RCC_OscConfig+0x2a2>
 800297e:	e018      	b.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002982:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 8002986:	2101      	movs	r1, #1
 8002988:	438a      	bics	r2, r1
 800298a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fb00 	bl	8000f90 <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002996:	f7fe fafb 	bl	8000f90 <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e193      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80029aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ac:	2202      	movs	r2, #2
 80029ae:	4013      	ands	r3, r2
 80029b0:	d1f1      	bne.n	8002996 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2204      	movs	r2, #4
 80029b8:	4013      	ands	r3, r2
 80029ba:	d100      	bne.n	80029be <HAL_RCC_OscConfig+0x2fe>
 80029bc:	e0c6      	b.n	8002b4c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029be:	231f      	movs	r3, #31
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2238      	movs	r2, #56	; 0x38
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d11e      	bne.n	8002a10 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_RCC_OscConfig+0x32c>)
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	2202      	movs	r2, #2
 80029d8:	4013      	ands	r3, r2
 80029da:	d100      	bne.n	80029de <HAL_RCC_OscConfig+0x31e>
 80029dc:	e0b6      	b.n	8002b4c <HAL_RCC_OscConfig+0x48c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d000      	beq.n	80029e8 <HAL_RCC_OscConfig+0x328>
 80029e6:	e0b1      	b.n	8002b4c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e171      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
 80029ec:	40021000 	.word	0x40021000
 80029f0:	fffeffff 	.word	0xfffeffff
 80029f4:	fffbffff 	.word	0xfffbffff
 80029f8:	ffff80ff 	.word	0xffff80ff
 80029fc:	ffffc7ff 	.word	0xffffc7ff
 8002a00:	00f42400 	.word	0x00f42400
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000004 	.word	0x20000004
 8002a0c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a10:	4bb1      	ldr	r3, [pc, #708]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	055b      	lsls	r3, r3, #21
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_OscConfig+0x360>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_RCC_OscConfig+0x362>
 8002a20:	2300      	movs	r3, #0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d011      	beq.n	8002a4a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4bac      	ldr	r3, [pc, #688]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a2a:	4bab      	ldr	r3, [pc, #684]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002a2c:	2180      	movs	r1, #128	; 0x80
 8002a2e:	0549      	lsls	r1, r1, #21
 8002a30:	430a      	orrs	r2, r1
 8002a32:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a34:	4ba8      	ldr	r3, [pc, #672]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	055b      	lsls	r3, r3, #21
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a42:	231f      	movs	r3, #31
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4a:	4ba4      	ldr	r3, [pc, #656]	; (8002cdc <HAL_RCC_OscConfig+0x61c>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4013      	ands	r3, r2
 8002a54:	d11a      	bne.n	8002a8c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a56:	4ba1      	ldr	r3, [pc, #644]	; (8002cdc <HAL_RCC_OscConfig+0x61c>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4ba0      	ldr	r3, [pc, #640]	; (8002cdc <HAL_RCC_OscConfig+0x61c>)
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	0049      	lsls	r1, r1, #1
 8002a60:	430a      	orrs	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a64:	f7fe fa94 	bl	8000f90 <HAL_GetTick>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe fa8f 	bl	8000f90 <HAL_GetTick>
 8002a72:	0002      	movs	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e127      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a80:	4b96      	ldr	r3, [pc, #600]	; (8002cdc <HAL_RCC_OscConfig+0x61c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x3e2>
 8002a94:	4b90      	ldr	r3, [pc, #576]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002a96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a98:	4b8f      	ldr	r3, [pc, #572]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aa0:	e01c      	b.n	8002adc <HAL_RCC_OscConfig+0x41c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x404>
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002aac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aae:	4b8a      	ldr	r3, [pc, #552]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ab6:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002ab8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aba:	4b87      	ldr	r3, [pc, #540]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002abc:	2101      	movs	r1, #1
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0x41c>
 8002ac4:	4b84      	ldr	r3, [pc, #528]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002ac6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ac8:	4b83      	ldr	r3, [pc, #524]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002aca:	2101      	movs	r1, #1
 8002acc:	438a      	bics	r2, r1
 8002ace:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ad0:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ad4:	4b80      	ldr	r3, [pc, #512]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	438a      	bics	r2, r1
 8002ada:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d014      	beq.n	8002b0e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fa54 	bl	8000f90 <HAL_GetTick>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aec:	e009      	b.n	8002b02 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aee:	f7fe fa4f 	bl	8000f90 <HAL_GetTick>
 8002af2:	0002      	movs	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	4a79      	ldr	r2, [pc, #484]	; (8002ce0 <HAL_RCC_OscConfig+0x620>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0e6      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b02:	4b75      	ldr	r3, [pc, #468]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	2202      	movs	r2, #2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x42e>
 8002b0c:	e013      	b.n	8002b36 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fa3f 	bl	8000f90 <HAL_GetTick>
 8002b12:	0003      	movs	r3, r0
 8002b14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b16:	e009      	b.n	8002b2c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe fa3a 	bl	8000f90 <HAL_GetTick>
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	4a6f      	ldr	r2, [pc, #444]	; (8002ce0 <HAL_RCC_OscConfig+0x620>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0d1      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b2c:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2202      	movs	r2, #2
 8002b32:	4013      	ands	r3, r2
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b36:	231f      	movs	r3, #31
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b40:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b44:	4b64      	ldr	r3, [pc, #400]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002b46:	4967      	ldr	r1, [pc, #412]	; (8002ce4 <HAL_RCC_OscConfig+0x624>)
 8002b48:	400a      	ands	r2, r1
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d100      	bne.n	8002b56 <HAL_RCC_OscConfig+0x496>
 8002b54:	e0bb      	b.n	8002cce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b56:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2238      	movs	r2, #56	; 0x38
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d100      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4a4>
 8002b62:	e07b      	b.n	8002c5c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d156      	bne.n	8002c1a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6c:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002b72:	495d      	ldr	r1, [pc, #372]	; (8002ce8 <HAL_RCC_OscConfig+0x628>)
 8002b74:	400a      	ands	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fa0a 	bl	8000f90 <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe fa05 	bl	8000f90 <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e09d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	049b      	lsls	r3, r3, #18
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba0:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4a51      	ldr	r2, [pc, #324]	; (8002cec <HAL_RCC_OscConfig+0x62c>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1a      	ldr	r2, [r3, #32]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	4b42      	ldr	r3, [pc, #264]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd4:	4b40      	ldr	r3, [pc, #256]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	0449      	lsls	r1, r1, #17
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	0549      	lsls	r1, r1, #21
 8002bec:	430a      	orrs	r2, r1
 8002bee:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f9ce 	bl	8000f90 <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe f9c9 	bl	8000f90 <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e061      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	049b      	lsls	r3, r3, #18
 8002c14:	4013      	ands	r3, r2
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x53a>
 8002c18:	e059      	b.n	8002cce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002c20:	4931      	ldr	r1, [pc, #196]	; (8002ce8 <HAL_RCC_OscConfig+0x628>)
 8002c22:	400a      	ands	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe f9b3 	bl	8000f90 <HAL_GetTick>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fe f9ae 	bl	8000f90 <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e046      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c42:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	049b      	lsls	r3, r3, #18
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c4e:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002c54:	4926      	ldr	r1, [pc, #152]	; (8002cf0 <HAL_RCC_OscConfig+0x630>)
 8002c56:	400a      	ands	r2, r1
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	e038      	b.n	8002cce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e033      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_RCC_OscConfig+0x618>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2203      	movs	r2, #3
 8002c72:	401a      	ands	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d126      	bne.n	8002cca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2270      	movs	r2, #112	; 0x70
 8002c80:	401a      	ands	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d11f      	bne.n	8002cca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	23fe      	movs	r3, #254	; 0xfe
 8002c8e:	01db      	lsls	r3, r3, #7
 8002c90:	401a      	ands	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d116      	bne.n	8002cca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	23f8      	movs	r3, #248	; 0xf8
 8002ca0:	039b      	lsls	r3, r3, #14
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d10e      	bne.n	8002cca <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	23e0      	movs	r3, #224	; 0xe0
 8002cb0:	051b      	lsls	r3, r3, #20
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	0f5b      	lsrs	r3, r3, #29
 8002cc0:	075a      	lsls	r2, r3, #29
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b008      	add	sp, #32
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	00001388 	.word	0x00001388
 8002ce4:	efffffff 	.word	0xefffffff
 8002ce8:	feffffff 	.word	0xfeffffff
 8002cec:	11c1808c 	.word	0x11c1808c
 8002cf0:	eefefffc 	.word	0xeefefffc

08002cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0e9      	b.n	8002edc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d08:	4b76      	ldr	r3, [pc, #472]	; (8002ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	4013      	ands	r3, r2
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d91e      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b73      	ldr	r3, [pc, #460]	; (8002ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	4393      	bics	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	4b70      	ldr	r3, [pc, #448]	; (8002ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d28:	f7fe f932 	bl	8000f90 <HAL_GetTick>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d30:	e009      	b.n	8002d46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d32:	f7fe f92d 	bl	8000f90 <HAL_GetTick>
 8002d36:	0002      	movs	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	4a6a      	ldr	r2, [pc, #424]	; (8002ee8 <HAL_RCC_ClockConfig+0x1f4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0ca      	b.n	8002edc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d46:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1ee      	bne.n	8002d32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d015      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2204      	movs	r2, #4
 8002d64:	4013      	ands	r3, r2
 8002d66:	d006      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d68:	4b60      	ldr	r3, [pc, #384]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	4b5f      	ldr	r3, [pc, #380]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002d6e:	21e0      	movs	r1, #224	; 0xe0
 8002d70:	01c9      	lsls	r1, r1, #7
 8002d72:	430a      	orrs	r2, r1
 8002d74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d76:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	4a5d      	ldr	r2, [pc, #372]	; (8002ef0 <HAL_RCC_ClockConfig+0x1fc>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	0019      	movs	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	4b59      	ldr	r3, [pc, #356]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	4013      	ands	r3, r2
 8002d92:	d057      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9c:	4b53      	ldr	r3, [pc, #332]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	4013      	ands	r3, r2
 8002da6:	d12b      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e097      	b.n	8002edc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db4:	4b4d      	ldr	r3, [pc, #308]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	049b      	lsls	r3, r3, #18
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d11f      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e08b      	b.n	8002edc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dcc:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d113      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e07f      	b.n	8002edc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de4:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de8:	2202      	movs	r2, #2
 8002dea:	4013      	ands	r3, r2
 8002dec:	d108      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e074      	b.n	8002edc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df2:	4b3e      	ldr	r3, [pc, #248]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2202      	movs	r2, #2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e06d      	b.n	8002edc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e00:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2207      	movs	r2, #7
 8002e06:	4393      	bics	r3, r2
 8002e08:	0019      	movs	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	4b37      	ldr	r3, [pc, #220]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e14:	f7fe f8bc 	bl	8000f90 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1c:	e009      	b.n	8002e32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1e:	f7fe f8b7 	bl	8000f90 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	4a2f      	ldr	r2, [pc, #188]	; (8002ee8 <HAL_RCC_ClockConfig+0x1f4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e054      	b.n	8002edc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	4b2e      	ldr	r3, [pc, #184]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2238      	movs	r2, #56	; 0x38
 8002e38:	401a      	ands	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1ec      	bne.n	8002e1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e44:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2207      	movs	r2, #7
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d21e      	bcs.n	8002e90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2207      	movs	r2, #7
 8002e58:	4393      	bics	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e64:	f7fe f894 	bl	8000f90 <HAL_GetTick>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e6c:	e009      	b.n	8002e82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6e:	f7fe f88f 	bl	8000f90 <HAL_GetTick>
 8002e72:	0002      	movs	r2, r0
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	4a1b      	ldr	r2, [pc, #108]	; (8002ee8 <HAL_RCC_ClockConfig+0x1f4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e02c      	b.n	8002edc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2207      	movs	r2, #7
 8002e88:	4013      	ands	r3, r2
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d1ee      	bne.n	8002e6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2204      	movs	r2, #4
 8002e96:	4013      	ands	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e9a:	4b14      	ldr	r3, [pc, #80]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_RCC_ClockConfig+0x200>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002eae:	f000 f829 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002eb2:	0001      	movs	r1, r0
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_RCC_ClockConfig+0x1f8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	220f      	movs	r2, #15
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <HAL_RCC_ClockConfig+0x204>)
 8002ec0:	0092      	lsls	r2, r2, #2
 8002ec2:	58d3      	ldr	r3, [r2, r3]
 8002ec4:	221f      	movs	r2, #31
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	000a      	movs	r2, r1
 8002eca:	40da      	lsrs	r2, r3
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_ClockConfig+0x208>)
 8002ece:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_ClockConfig+0x20c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7fd ffff 	bl	8000ed8 <HAL_InitTick>
 8002eda:	0003      	movs	r3, r0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b004      	add	sp, #16
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40022000 	.word	0x40022000
 8002ee8:	00001388 	.word	0x00001388
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	fffff0ff 	.word	0xfffff0ff
 8002ef4:	ffff8fff 	.word	0xffff8fff
 8002ef8:	08004d48 	.word	0x08004d48
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000004 	.word	0x20000004

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2238      	movs	r2, #56	; 0x38
 8002f10:	4013      	ands	r3, r2
 8002f12:	d10f      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0adb      	lsrs	r3, r3, #11
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2201      	movs	r2, #1
 8002f20:	409a      	lsls	r2, r3
 8002f22:	0013      	movs	r3, r2
 8002f24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f26:	6839      	ldr	r1, [r7, #0]
 8002f28:	4835      	ldr	r0, [pc, #212]	; (8003000 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f2a:	f7fd f8fd 	bl	8000128 <__udivsi3>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	e05d      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f34:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2238      	movs	r2, #56	; 0x38
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d102      	bne.n	8002f46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f40:	4b30      	ldr	r3, [pc, #192]	; (8003004 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	e054      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f46:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2238      	movs	r2, #56	; 0x38
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d138      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f52:	4b2a      	ldr	r3, [pc, #168]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2203      	movs	r2, #3
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	2207      	movs	r2, #7
 8002f64:	4013      	ands	r3, r2
 8002f66:	3301      	adds	r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d10d      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	4824      	ldr	r0, [pc, #144]	; (8003004 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f74:	f7fd f8d8 	bl	8000128 <__udivsi3>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	227f      	movs	r2, #127	; 0x7f
 8002f84:	4013      	ands	r3, r2
 8002f86:	434b      	muls	r3, r1
 8002f88:	617b      	str	r3, [r7, #20]
        break;
 8002f8a:	e00d      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	481c      	ldr	r0, [pc, #112]	; (8003000 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f90:	f7fd f8ca 	bl	8000128 <__udivsi3>
 8002f94:	0003      	movs	r3, r0
 8002f96:	0019      	movs	r1, r3
 8002f98:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	227f      	movs	r2, #127	; 0x7f
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	434b      	muls	r3, r1
 8002fa4:	617b      	str	r3, [r7, #20]
        break;
 8002fa6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	0f5b      	lsrs	r3, r3, #29
 8002fae:	2207      	movs	r2, #7
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	6978      	ldr	r0, [r7, #20]
 8002fba:	f7fd f8b5 	bl	8000128 <__udivsi3>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	e015      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fc4:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2238      	movs	r2, #56	; 0x38
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d103      	bne.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	e00b      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2238      	movs	r2, #56	; 0x38
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b18      	cmp	r3, #24
 8002fe2:	d103      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002fe4:	23fa      	movs	r3, #250	; 0xfa
 8002fe6:	01db      	lsls	r3, r3, #7
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e001      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ff0:	693b      	ldr	r3, [r7, #16]
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b006      	add	sp, #24
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	40021000 	.word	0x40021000
 8003000:	00f42400 	.word	0x00f42400
 8003004:	007a1200 	.word	0x007a1200

08003008 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800300c:	4b02      	ldr	r3, [pc, #8]	; (8003018 <HAL_RCC_GetHCLKFreq+0x10>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	20000000 	.word	0x20000000

0800301c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003020:	f7ff fff2 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003024:	0004      	movs	r4, r0
 8003026:	f7ff fb3f 	bl	80026a8 <LL_RCC_GetAPB1Prescaler>
 800302a:	0003      	movs	r3, r0
 800302c:	0b1a      	lsrs	r2, r3, #12
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003030:	0092      	lsls	r2, r2, #2
 8003032:	58d3      	ldr	r3, [r2, r3]
 8003034:	221f      	movs	r2, #31
 8003036:	4013      	ands	r3, r2
 8003038:	40dc      	lsrs	r4, r3
 800303a:	0023      	movs	r3, r4
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	bdb0      	pop	{r4, r5, r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	08004d88 	.word	0x08004d88

08003048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003050:	2313      	movs	r3, #19
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003058:	2312      	movs	r3, #18
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	029b      	lsls	r3, r3, #10
 8003068:	4013      	ands	r3, r2
 800306a:	d100      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800306c:	e0a3      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2011      	movs	r0, #17
 8003070:	183b      	adds	r3, r7, r0
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003076:	4bc3      	ldr	r3, [pc, #780]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	055b      	lsls	r3, r3, #21
 800307e:	4013      	ands	r3, r2
 8003080:	d110      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	4bc0      	ldr	r3, [pc, #768]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003086:	4bbf      	ldr	r3, [pc, #764]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	0549      	lsls	r1, r1, #21
 800308c:	430a      	orrs	r2, r1
 800308e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003090:	4bbc      	ldr	r3, [pc, #752]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	055b      	lsls	r3, r3, #21
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309e:	183b      	adds	r3, r7, r0
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a4:	4bb8      	ldr	r3, [pc, #736]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4bb7      	ldr	r3, [pc, #732]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	0049      	lsls	r1, r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b2:	f7fd ff6d 	bl	8000f90 <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ba:	e00b      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030bc:	f7fd ff68 	bl	8000f90 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d904      	bls.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80030ca:	2313      	movs	r3, #19
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2203      	movs	r2, #3
 80030d0:	701a      	strb	r2, [r3, #0]
        break;
 80030d2:	e005      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d4:	4bac      	ldr	r3, [pc, #688]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4013      	ands	r3, r2
 80030de:	d0ed      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030e0:	2313      	movs	r3, #19
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d154      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030ea:	4ba6      	ldr	r3, [pc, #664]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030ee:	23c0      	movs	r3, #192	; 0xc0
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4013      	ands	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d019      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	429a      	cmp	r2, r3
 8003104:	d014      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003106:	4b9f      	ldr	r3, [pc, #636]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	4aa0      	ldr	r2, [pc, #640]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800310c:	4013      	ands	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003110:	4b9c      	ldr	r3, [pc, #624]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003114:	4b9b      	ldr	r3, [pc, #620]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003116:	2180      	movs	r1, #128	; 0x80
 8003118:	0249      	lsls	r1, r1, #9
 800311a:	430a      	orrs	r2, r1
 800311c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800311e:	4b99      	ldr	r3, [pc, #612]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003120:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003122:	4b98      	ldr	r3, [pc, #608]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003124:	499a      	ldr	r1, [pc, #616]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003126:	400a      	ands	r2, r1
 8003128:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800312a:	4b96      	ldr	r3, [pc, #600]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2201      	movs	r2, #1
 8003134:	4013      	ands	r3, r2
 8003136:	d016      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fd ff2a 	bl	8000f90 <HAL_GetTick>
 800313c:	0003      	movs	r3, r0
 800313e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003140:	e00c      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fd ff25 	bl	8000f90 <HAL_GetTick>
 8003146:	0002      	movs	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	4a91      	ldr	r2, [pc, #580]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d904      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003152:	2313      	movs	r3, #19
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2203      	movs	r2, #3
 8003158:	701a      	strb	r2, [r3, #0]
            break;
 800315a:	e004      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315c:	4b89      	ldr	r3, [pc, #548]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	2202      	movs	r2, #2
 8003162:	4013      	ands	r3, r2
 8003164:	d0ed      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003166:	2313      	movs	r3, #19
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003170:	4b84      	ldr	r3, [pc, #528]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	4a85      	ldr	r2, [pc, #532]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003176:	4013      	ands	r3, r2
 8003178:	0019      	movs	r1, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317e:	4b81      	ldr	r3, [pc, #516]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003180:	430a      	orrs	r2, r1
 8003182:	65da      	str	r2, [r3, #92]	; 0x5c
 8003184:	e00c      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003186:	2312      	movs	r3, #18
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	2213      	movs	r2, #19
 800318c:	18ba      	adds	r2, r7, r2
 800318e:	7812      	ldrb	r2, [r2, #0]
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e005      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003194:	2312      	movs	r3, #18
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2213      	movs	r2, #19
 800319a:	18ba      	adds	r2, r7, r2
 800319c:	7812      	ldrb	r2, [r2, #0]
 800319e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a0:	2311      	movs	r3, #17
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d105      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ae:	4b75      	ldr	r3, [pc, #468]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b0:	4979      	ldr	r1, [pc, #484]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80031b2:	400a      	ands	r2, r1
 80031b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2201      	movs	r2, #1
 80031bc:	4013      	ands	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031c0:	4b70      	ldr	r3, [pc, #448]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	2203      	movs	r2, #3
 80031c6:	4393      	bics	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031d0:	430a      	orrs	r2, r1
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2202      	movs	r2, #2
 80031da:	4013      	ands	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031de:	4b69      	ldr	r3, [pc, #420]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	220c      	movs	r2, #12
 80031e4:	4393      	bics	r3, r2
 80031e6:	0019      	movs	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ee:	430a      	orrs	r2, r1
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2210      	movs	r2, #16
 80031f8:	4013      	ands	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031fc:	4b61      	ldr	r3, [pc, #388]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	4a66      	ldr	r2, [pc, #408]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003202:	4013      	ands	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	4b5e      	ldr	r3, [pc, #376]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800320c:	430a      	orrs	r2, r1
 800320e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4013      	ands	r3, r2
 800321a:	d009      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800321c:	4b59      	ldr	r3, [pc, #356]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	4a5f      	ldr	r2, [pc, #380]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003222:	4013      	ands	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	4b56      	ldr	r3, [pc, #344]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800322c:	430a      	orrs	r2, r1
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4013      	ands	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800323c:	4b51      	ldr	r3, [pc, #324]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	4a58      	ldr	r2, [pc, #352]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003242:	4013      	ands	r3, r2
 8003244:	0019      	movs	r1, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	4b4e      	ldr	r3, [pc, #312]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800324c:	430a      	orrs	r2, r1
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2220      	movs	r2, #32
 8003256:	4013      	ands	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800325a:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	4a52      	ldr	r2, [pc, #328]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003260:	4013      	ands	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	4b46      	ldr	r3, [pc, #280]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800326a:	430a      	orrs	r2, r1
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	01db      	lsls	r3, r3, #7
 8003276:	4013      	ands	r3, r2
 8003278:	d015      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800327a:	4b42      	ldr	r3, [pc, #264]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	0899      	lsrs	r1, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1a      	ldr	r2, [r3, #32]
 8003286:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003288:	430a      	orrs	r2, r1
 800328a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1a      	ldr	r2, [r3, #32]
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	05db      	lsls	r3, r3, #23
 8003294:	429a      	cmp	r2, r3
 8003296:	d106      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003298:	4b3a      	ldr	r3, [pc, #232]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	0249      	lsls	r1, r1, #9
 80032a2:	430a      	orrs	r2, r1
 80032a4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	031b      	lsls	r3, r3, #12
 80032ae:	4013      	ands	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032b2:	4b34      	ldr	r3, [pc, #208]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	2240      	movs	r2, #64	; 0x40
 80032b8:	4393      	bics	r3, r2
 80032ba:	0019      	movs	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c0:	4b30      	ldr	r3, [pc, #192]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032c2:	430a      	orrs	r2, r1
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	039b      	lsls	r3, r3, #14
 80032ce:	4013      	ands	r3, r2
 80032d0:	d016      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032d2:	4b2c      	ldr	r3, [pc, #176]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	4a35      	ldr	r2, [pc, #212]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032d8:	4013      	ands	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e0:	4b28      	ldr	r3, [pc, #160]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032e2:	430a      	orrs	r2, r1
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	03db      	lsls	r3, r3, #15
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d106      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032f8:	2180      	movs	r1, #128	; 0x80
 80032fa:	0449      	lsls	r1, r1, #17
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	03db      	lsls	r3, r3, #15
 8003308:	4013      	ands	r3, r2
 800330a:	d016      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800330c:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	4a27      	ldr	r2, [pc, #156]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331a:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800331c:	430a      	orrs	r2, r1
 800331e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	2380      	movs	r3, #128	; 0x80
 8003326:	045b      	lsls	r3, r3, #17
 8003328:	429a      	cmp	r2, r3
 800332a:	d106      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800332c:	4b15      	ldr	r3, [pc, #84]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	4b14      	ldr	r3, [pc, #80]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003332:	2180      	movs	r1, #128	; 0x80
 8003334:	0449      	lsls	r1, r1, #17
 8003336:	430a      	orrs	r2, r1
 8003338:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	4013      	ands	r3, r2
 8003344:	d016      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003346:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334a:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800334c:	4013      	ands	r3, r2
 800334e:	0019      	movs	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003356:	430a      	orrs	r2, r1
 8003358:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	01db      	lsls	r3, r3, #7
 8003362:	429a      	cmp	r2, r3
 8003364:	d106      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	0249      	lsls	r1, r1, #9
 8003370:	430a      	orrs	r2, r1
 8003372:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003374:	2312      	movs	r3, #18
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	781b      	ldrb	r3, [r3, #0]
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b006      	add	sp, #24
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	40021000 	.word	0x40021000
 8003388:	40007000 	.word	0x40007000
 800338c:	fffffcff 	.word	0xfffffcff
 8003390:	fffeffff 	.word	0xfffeffff
 8003394:	00001388 	.word	0x00001388
 8003398:	efffffff 	.word	0xefffffff
 800339c:	fffff3ff 	.word	0xfffff3ff
 80033a0:	fff3ffff 	.word	0xfff3ffff
 80033a4:	ffcfffff 	.word	0xffcfffff
 80033a8:	ffffcfff 	.word	0xffffcfff
 80033ac:	ffbfffff 	.word	0xffbfffff
 80033b0:	feffffff 	.word	0xfeffffff
 80033b4:	ffff3fff 	.word	0xffff3fff

080033b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e04a      	b.n	8003460 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	223d      	movs	r2, #61	; 0x3d
 80033ce:	5c9b      	ldrb	r3, [r3, r2]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d107      	bne.n	80033e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	223c      	movs	r2, #60	; 0x3c
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7fd fc67 	bl	8000cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223d      	movs	r2, #61	; 0x3d
 80033ea:	2102      	movs	r1, #2
 80033ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3304      	adds	r3, #4
 80033f6:	0019      	movs	r1, r3
 80033f8:	0010      	movs	r0, r2
 80033fa:	f000 f889 	bl	8003510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2248      	movs	r2, #72	; 0x48
 8003402:	2101      	movs	r1, #1
 8003404:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	223e      	movs	r2, #62	; 0x3e
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	223f      	movs	r2, #63	; 0x3f
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2240      	movs	r2, #64	; 0x40
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2241      	movs	r2, #65	; 0x41
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2242      	movs	r2, #66	; 0x42
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2243      	movs	r2, #67	; 0x43
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2244      	movs	r2, #68	; 0x44
 800343a:	2101      	movs	r1, #1
 800343c:	5499      	strb	r1, [r3, r2]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2245      	movs	r2, #69	; 0x45
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2246      	movs	r2, #70	; 0x46
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2247      	movs	r2, #71	; 0x47
 8003452:	2101      	movs	r1, #1
 8003454:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	223d      	movs	r2, #61	; 0x3d
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	223d      	movs	r2, #61	; 0x3d
 8003474:	5c9b      	ldrb	r3, [r3, r2]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d001      	beq.n	8003480 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e03a      	b.n	80034f6 <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	223d      	movs	r2, #61	; 0x3d
 8003484:	2102      	movs	r1, #2
 8003486:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <HAL_TIM_Base_Start+0x98>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00f      	beq.n	80034b2 <HAL_TIM_Base_Start+0x4a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	05db      	lsls	r3, r3, #23
 800349a:	429a      	cmp	r2, r3
 800349c:	d009      	beq.n	80034b2 <HAL_TIM_Base_Start+0x4a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a18      	ldr	r2, [pc, #96]	; (8003504 <HAL_TIM_Base_Start+0x9c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d004      	beq.n	80034b2 <HAL_TIM_Base_Start+0x4a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a16      	ldr	r2, [pc, #88]	; (8003508 <HAL_TIM_Base_Start+0xa0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d116      	bne.n	80034e0 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <HAL_TIM_Base_Start+0xa4>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d016      	beq.n	80034f2 <HAL_TIM_Base_Start+0x8a>
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	025b      	lsls	r3, r3, #9
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d011      	beq.n	80034f2 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2101      	movs	r1, #1
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034de:	e008      	b.n	80034f2 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2101      	movs	r1, #1
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e000      	b.n	80034f4 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b004      	add	sp, #16
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40000400 	.word	0x40000400
 8003508:	40014000 	.word	0x40014000
 800350c:	00010007 	.word	0x00010007

08003510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <TIM_Base_SetConfig+0xe4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d008      	beq.n	800353a <TIM_Base_SetConfig+0x2a>
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	05db      	lsls	r3, r3, #23
 800352e:	429a      	cmp	r2, r3
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0x2a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a30      	ldr	r2, [pc, #192]	; (80035f8 <TIM_Base_SetConfig+0xe8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2270      	movs	r2, #112	; 0x70
 800353e:	4393      	bics	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <TIM_Base_SetConfig+0xe4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d018      	beq.n	8003586 <TIM_Base_SetConfig+0x76>
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	05db      	lsls	r3, r3, #23
 800355a:	429a      	cmp	r2, r3
 800355c:	d013      	beq.n	8003586 <TIM_Base_SetConfig+0x76>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <TIM_Base_SetConfig+0xe8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <TIM_Base_SetConfig+0x76>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a24      	ldr	r2, [pc, #144]	; (80035fc <TIM_Base_SetConfig+0xec>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0x76>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a23      	ldr	r2, [pc, #140]	; (8003600 <TIM_Base_SetConfig+0xf0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0x76>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a22      	ldr	r2, [pc, #136]	; (8003604 <TIM_Base_SetConfig+0xf4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0x76>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a21      	ldr	r2, [pc, #132]	; (8003608 <TIM_Base_SetConfig+0xf8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4a20      	ldr	r2, [pc, #128]	; (800360c <TIM_Base_SetConfig+0xfc>)
 800358a:	4013      	ands	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	4393      	bics	r3, r2
 800359e:	001a      	movs	r2, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <TIM_Base_SetConfig+0xe4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00b      	beq.n	80035de <TIM_Base_SetConfig+0xce>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a0d      	ldr	r2, [pc, #52]	; (8003600 <TIM_Base_SetConfig+0xf0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <TIM_Base_SetConfig+0xce>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <TIM_Base_SetConfig+0xf4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_Base_SetConfig+0xce>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <TIM_Base_SetConfig+0xf8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d103      	bne.n	80035e6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	615a      	str	r2, [r3, #20]
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b004      	add	sp, #16
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40002000 	.word	0x40002000
 8003600:	40014000 	.word	0x40014000
 8003604:	40014400 	.word	0x40014400
 8003608:	40014800 	.word	0x40014800
 800360c:	fffffcff 	.word	0xfffffcff

08003610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	223c      	movs	r2, #60	; 0x3c
 800361e:	5c9b      	ldrb	r3, [r3, r2]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e055      	b.n	80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	223c      	movs	r2, #60	; 0x3c
 800362c:	2101      	movs	r1, #1
 800362e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	223d      	movs	r2, #61	; 0x3d
 8003634:	2102      	movs	r1, #2
 8003636:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a23      	ldr	r2, [pc, #140]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d108      	bne.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a22      	ldr	r2, [pc, #136]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003656:	4013      	ands	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2270      	movs	r2, #112	; 0x70
 8003668:	4393      	bics	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00f      	beq.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	05db      	lsls	r3, r3, #23
 8003690:	429a      	cmp	r2, r3
 8003692:	d009      	beq.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10c      	bne.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	4393      	bics	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	223d      	movs	r2, #61	; 0x3d
 80036c6:	2101      	movs	r1, #1
 80036c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	223c      	movs	r2, #60	; 0x3c
 80036ce:	2100      	movs	r1, #0
 80036d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b004      	add	sp, #16
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	ff0fffff 	.word	0xff0fffff
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40014000 	.word	0x40014000

080036ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e046      	b.n	800378c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2284      	movs	r2, #132	; 0x84
 8003702:	589b      	ldr	r3, [r3, r2]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d107      	bne.n	8003718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2280      	movs	r2, #128	; 0x80
 800370c:	2100      	movs	r1, #0
 800370e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0018      	movs	r0, r3
 8003714:	f7fd faec 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2284      	movs	r2, #132	; 0x84
 800371c:	2124      	movs	r1, #36	; 0x24
 800371e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2101      	movs	r1, #1
 800372c:	438a      	bics	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f8dc 	bl	80038f0 <UART_SetConfig>
 8003738:	0003      	movs	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e024      	b.n	800378c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	0018      	movs	r0, r3
 800374e:	f000 fbab 	bl	8003ea8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	490d      	ldr	r1, [pc, #52]	; (8003794 <HAL_UART_Init+0xa8>)
 800375e:	400a      	ands	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	212a      	movs	r1, #42	; 0x2a
 800376e:	438a      	bics	r2, r1
 8003770:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2101      	movs	r1, #1
 800377e:	430a      	orrs	r2, r1
 8003780:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0018      	movs	r0, r3
 8003786:	f000 fc43 	bl	8004010 <UART_CheckIdleState>
 800378a:	0003      	movs	r3, r0
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}
 8003794:	ffffb7ff 	.word	0xffffb7ff

08003798 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	1dbb      	adds	r3, r7, #6
 80037a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2284      	movs	r2, #132	; 0x84
 80037ac:	589b      	ldr	r3, [r3, r2]
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d000      	beq.n	80037b4 <HAL_UART_Transmit+0x1c>
 80037b2:	e097      	b.n	80038e4 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_UART_Transmit+0x2a>
 80037ba:	1dbb      	adds	r3, r7, #6
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e08f      	b.n	80038e6 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	2380      	movs	r3, #128	; 0x80
 80037cc:	015b      	lsls	r3, r3, #5
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d109      	bne.n	80037e6 <HAL_UART_Transmit+0x4e>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d105      	bne.n	80037e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2201      	movs	r2, #1
 80037de:	4013      	ands	r3, r2
 80037e0:	d001      	beq.n	80037e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07f      	b.n	80038e6 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	5c9b      	ldrb	r3, [r3, r2]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Transmit+0x5c>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e078      	b.n	80038e6 <HAL_UART_Transmit+0x14e>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	2101      	movs	r1, #1
 80037fa:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	228c      	movs	r2, #140	; 0x8c
 8003800:	2100      	movs	r1, #0
 8003802:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2284      	movs	r2, #132	; 0x84
 8003808:	2121      	movs	r1, #33	; 0x21
 800380a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800380c:	f7fd fbc0 	bl	8000f90 <HAL_GetTick>
 8003810:	0003      	movs	r3, r0
 8003812:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1dba      	adds	r2, r7, #6
 8003818:	2154      	movs	r1, #84	; 0x54
 800381a:	8812      	ldrh	r2, [r2, #0]
 800381c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1dba      	adds	r2, r7, #6
 8003822:	2156      	movs	r1, #86	; 0x56
 8003824:	8812      	ldrh	r2, [r2, #0]
 8003826:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	015b      	lsls	r3, r3, #5
 8003830:	429a      	cmp	r2, r3
 8003832:	d108      	bne.n	8003846 <HAL_UART_Transmit+0xae>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d104      	bne.n	8003846 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	e003      	b.n	800384e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2280      	movs	r2, #128	; 0x80
 8003852:	2100      	movs	r1, #0
 8003854:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003856:	e02c      	b.n	80038b2 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	0013      	movs	r3, r2
 8003862:	2200      	movs	r2, #0
 8003864:	2180      	movs	r1, #128	; 0x80
 8003866:	f000 fc1d 	bl	80040a4 <UART_WaitOnFlagUntilTimeout>
 800386a:	1e03      	subs	r3, r0, #0
 800386c:	d001      	beq.n	8003872 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e039      	b.n	80038e6 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	001a      	movs	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	05d2      	lsls	r2, r2, #23
 8003884:	0dd2      	lsrs	r2, r2, #23
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	3302      	adds	r3, #2
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	e007      	b.n	80038a0 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3301      	adds	r3, #1
 800389e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2256      	movs	r2, #86	; 0x56
 80038a4:	5a9b      	ldrh	r3, [r3, r2]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b299      	uxth	r1, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2256      	movs	r2, #86	; 0x56
 80038b0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2256      	movs	r2, #86	; 0x56
 80038b6:	5a9b      	ldrh	r3, [r3, r2]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1cc      	bne.n	8003858 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	0013      	movs	r3, r2
 80038c8:	2200      	movs	r2, #0
 80038ca:	2140      	movs	r1, #64	; 0x40
 80038cc:	f000 fbea 	bl	80040a4 <UART_WaitOnFlagUntilTimeout>
 80038d0:	1e03      	subs	r3, r0, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e006      	b.n	80038e6 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2284      	movs	r2, #132	; 0x84
 80038dc:	2120      	movs	r1, #32
 80038de:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
  }
}
 80038e6:	0018      	movs	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b008      	add	sp, #32
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f0:	b5b0      	push	{r4, r5, r7, lr}
 80038f2:	b090      	sub	sp, #64	; 0x40
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038f8:	231a      	movs	r3, #26
 80038fa:	2220      	movs	r2, #32
 80038fc:	4694      	mov	ip, r2
 80038fe:	44bc      	add	ip, r7
 8003900:	4463      	add	r3, ip
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	431a      	orrs	r2, r3
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	431a      	orrs	r2, r3
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4313      	orrs	r3, r2
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4ab9      	ldr	r2, [pc, #740]	; (8003c0c <UART_SetConfig+0x31c>)
 8003926:	4013      	ands	r3, r2
 8003928:	0019      	movs	r1, r3
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003930:	430b      	orrs	r3, r1
 8003932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4ab5      	ldr	r2, [pc, #724]	; (8003c10 <UART_SetConfig+0x320>)
 800393c:	4013      	ands	r3, r2
 800393e:	0018      	movs	r0, r3
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	68d9      	ldr	r1, [r3, #12]
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	0003      	movs	r3, r0
 800394a:	430b      	orrs	r3, r1
 800394c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4aae      	ldr	r2, [pc, #696]	; (8003c14 <UART_SetConfig+0x324>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003964:	4313      	orrs	r3, r2
 8003966:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	4aaa      	ldr	r2, [pc, #680]	; (8003c18 <UART_SetConfig+0x328>)
 8003970:	4013      	ands	r3, r2
 8003972:	0019      	movs	r1, r3
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397a:	430b      	orrs	r3, r1
 800397c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	220f      	movs	r2, #15
 8003986:	4393      	bics	r3, r2
 8003988:	0018      	movs	r0, r3
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	0003      	movs	r3, r0
 8003994:	430b      	orrs	r3, r1
 8003996:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a9f      	ldr	r2, [pc, #636]	; (8003c1c <UART_SetConfig+0x32c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d136      	bne.n	8003a10 <UART_SetConfig+0x120>
 80039a2:	4b9f      	ldr	r3, [pc, #636]	; (8003c20 <UART_SetConfig+0x330>)
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	2203      	movs	r2, #3
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d020      	beq.n	80039f0 <UART_SetConfig+0x100>
 80039ae:	d827      	bhi.n	8003a00 <UART_SetConfig+0x110>
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d00d      	beq.n	80039d0 <UART_SetConfig+0xe0>
 80039b4:	d824      	bhi.n	8003a00 <UART_SetConfig+0x110>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <UART_SetConfig+0xd0>
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d010      	beq.n	80039e0 <UART_SetConfig+0xf0>
 80039be:	e01f      	b.n	8003a00 <UART_SetConfig+0x110>
 80039c0:	231b      	movs	r3, #27
 80039c2:	2220      	movs	r2, #32
 80039c4:	4694      	mov	ip, r2
 80039c6:	44bc      	add	ip, r7
 80039c8:	4463      	add	r3, ip
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e0c5      	b.n	8003b5c <UART_SetConfig+0x26c>
 80039d0:	231b      	movs	r3, #27
 80039d2:	2220      	movs	r2, #32
 80039d4:	4694      	mov	ip, r2
 80039d6:	44bc      	add	ip, r7
 80039d8:	4463      	add	r3, ip
 80039da:	2202      	movs	r2, #2
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	e0bd      	b.n	8003b5c <UART_SetConfig+0x26c>
 80039e0:	231b      	movs	r3, #27
 80039e2:	2220      	movs	r2, #32
 80039e4:	4694      	mov	ip, r2
 80039e6:	44bc      	add	ip, r7
 80039e8:	4463      	add	r3, ip
 80039ea:	2204      	movs	r2, #4
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e0b5      	b.n	8003b5c <UART_SetConfig+0x26c>
 80039f0:	231b      	movs	r3, #27
 80039f2:	2220      	movs	r2, #32
 80039f4:	4694      	mov	ip, r2
 80039f6:	44bc      	add	ip, r7
 80039f8:	4463      	add	r3, ip
 80039fa:	2208      	movs	r2, #8
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e0ad      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003a00:	231b      	movs	r3, #27
 8003a02:	2220      	movs	r2, #32
 8003a04:	4694      	mov	ip, r2
 8003a06:	44bc      	add	ip, r7
 8003a08:	4463      	add	r3, ip
 8003a0a:	2210      	movs	r2, #16
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	e0a5      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a83      	ldr	r2, [pc, #524]	; (8003c24 <UART_SetConfig+0x334>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d136      	bne.n	8003a88 <UART_SetConfig+0x198>
 8003a1a:	4b81      	ldr	r3, [pc, #516]	; (8003c20 <UART_SetConfig+0x330>)
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	220c      	movs	r2, #12
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d020      	beq.n	8003a68 <UART_SetConfig+0x178>
 8003a26:	d827      	bhi.n	8003a78 <UART_SetConfig+0x188>
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d00d      	beq.n	8003a48 <UART_SetConfig+0x158>
 8003a2c:	d824      	bhi.n	8003a78 <UART_SetConfig+0x188>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <UART_SetConfig+0x148>
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d010      	beq.n	8003a58 <UART_SetConfig+0x168>
 8003a36:	e01f      	b.n	8003a78 <UART_SetConfig+0x188>
 8003a38:	231b      	movs	r3, #27
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	4694      	mov	ip, r2
 8003a3e:	44bc      	add	ip, r7
 8003a40:	4463      	add	r3, ip
 8003a42:	2200      	movs	r2, #0
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e089      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003a48:	231b      	movs	r3, #27
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	4694      	mov	ip, r2
 8003a4e:	44bc      	add	ip, r7
 8003a50:	4463      	add	r3, ip
 8003a52:	2202      	movs	r2, #2
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	e081      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003a58:	231b      	movs	r3, #27
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	4694      	mov	ip, r2
 8003a5e:	44bc      	add	ip, r7
 8003a60:	4463      	add	r3, ip
 8003a62:	2204      	movs	r2, #4
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e079      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003a68:	231b      	movs	r3, #27
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	4694      	mov	ip, r2
 8003a6e:	44bc      	add	ip, r7
 8003a70:	4463      	add	r3, ip
 8003a72:	2208      	movs	r2, #8
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e071      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003a78:	231b      	movs	r3, #27
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	4694      	mov	ip, r2
 8003a7e:	44bc      	add	ip, r7
 8003a80:	4463      	add	r3, ip
 8003a82:	2210      	movs	r2, #16
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e069      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a66      	ldr	r2, [pc, #408]	; (8003c28 <UART_SetConfig+0x338>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d107      	bne.n	8003aa2 <UART_SetConfig+0x1b2>
 8003a92:	231b      	movs	r3, #27
 8003a94:	2220      	movs	r2, #32
 8003a96:	4694      	mov	ip, r2
 8003a98:	44bc      	add	ip, r7
 8003a9a:	4463      	add	r3, ip
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e05c      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a61      	ldr	r2, [pc, #388]	; (8003c2c <UART_SetConfig+0x33c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d107      	bne.n	8003abc <UART_SetConfig+0x1cc>
 8003aac:	231b      	movs	r3, #27
 8003aae:	2220      	movs	r2, #32
 8003ab0:	4694      	mov	ip, r2
 8003ab2:	44bc      	add	ip, r7
 8003ab4:	4463      	add	r3, ip
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	e04f      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a54      	ldr	r2, [pc, #336]	; (8003c14 <UART_SetConfig+0x324>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d143      	bne.n	8003b4e <UART_SetConfig+0x25e>
 8003ac6:	4b56      	ldr	r3, [pc, #344]	; (8003c20 <UART_SetConfig+0x330>)
 8003ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aca:	23c0      	movs	r3, #192	; 0xc0
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	4013      	ands	r3, r2
 8003ad0:	22c0      	movs	r2, #192	; 0xc0
 8003ad2:	0112      	lsls	r2, r2, #4
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d02a      	beq.n	8003b2e <UART_SetConfig+0x23e>
 8003ad8:	22c0      	movs	r2, #192	; 0xc0
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d82e      	bhi.n	8003b3e <UART_SetConfig+0x24e>
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	0112      	lsls	r2, r2, #4
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d012      	beq.n	8003b0e <UART_SetConfig+0x21e>
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	0112      	lsls	r2, r2, #4
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d826      	bhi.n	8003b3e <UART_SetConfig+0x24e>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d004      	beq.n	8003afe <UART_SetConfig+0x20e>
 8003af4:	2280      	movs	r2, #128	; 0x80
 8003af6:	00d2      	lsls	r2, r2, #3
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d010      	beq.n	8003b1e <UART_SetConfig+0x22e>
 8003afc:	e01f      	b.n	8003b3e <UART_SetConfig+0x24e>
 8003afe:	231b      	movs	r3, #27
 8003b00:	2220      	movs	r2, #32
 8003b02:	4694      	mov	ip, r2
 8003b04:	44bc      	add	ip, r7
 8003b06:	4463      	add	r3, ip
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	e026      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003b0e:	231b      	movs	r3, #27
 8003b10:	2220      	movs	r2, #32
 8003b12:	4694      	mov	ip, r2
 8003b14:	44bc      	add	ip, r7
 8003b16:	4463      	add	r3, ip
 8003b18:	2202      	movs	r2, #2
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e01e      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003b1e:	231b      	movs	r3, #27
 8003b20:	2220      	movs	r2, #32
 8003b22:	4694      	mov	ip, r2
 8003b24:	44bc      	add	ip, r7
 8003b26:	4463      	add	r3, ip
 8003b28:	2204      	movs	r2, #4
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	e016      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003b2e:	231b      	movs	r3, #27
 8003b30:	2220      	movs	r2, #32
 8003b32:	4694      	mov	ip, r2
 8003b34:	44bc      	add	ip, r7
 8003b36:	4463      	add	r3, ip
 8003b38:	2208      	movs	r2, #8
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e00e      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003b3e:	231b      	movs	r3, #27
 8003b40:	2220      	movs	r2, #32
 8003b42:	4694      	mov	ip, r2
 8003b44:	44bc      	add	ip, r7
 8003b46:	4463      	add	r3, ip
 8003b48:	2210      	movs	r2, #16
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e006      	b.n	8003b5c <UART_SetConfig+0x26c>
 8003b4e:	231b      	movs	r3, #27
 8003b50:	2220      	movs	r2, #32
 8003b52:	4694      	mov	ip, r2
 8003b54:	44bc      	add	ip, r7
 8003b56:	4463      	add	r3, ip
 8003b58:	2210      	movs	r2, #16
 8003b5a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	; (8003c14 <UART_SetConfig+0x324>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d000      	beq.n	8003b68 <UART_SetConfig+0x278>
 8003b66:	e0ad      	b.n	8003cc4 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b68:	231b      	movs	r3, #27
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	4694      	mov	ip, r2
 8003b6e:	44bc      	add	ip, r7
 8003b70:	4463      	add	r3, ip
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d015      	beq.n	8003ba4 <UART_SetConfig+0x2b4>
 8003b78:	dc18      	bgt.n	8003bac <UART_SetConfig+0x2bc>
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d00d      	beq.n	8003b9a <UART_SetConfig+0x2aa>
 8003b7e:	dc15      	bgt.n	8003bac <UART_SetConfig+0x2bc>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <UART_SetConfig+0x29a>
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d005      	beq.n	8003b94 <UART_SetConfig+0x2a4>
 8003b88:	e010      	b.n	8003bac <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b8a:	f7ff fa47 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b92:	e015      	b.n	8003bc0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b94:	4b26      	ldr	r3, [pc, #152]	; (8003c30 <UART_SetConfig+0x340>)
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b98:	e012      	b.n	8003bc0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b9a:	f7ff f9b3 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ba2:	e00d      	b.n	8003bc0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003baa:	e009      	b.n	8003bc0 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003bb0:	231a      	movs	r3, #26
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	4694      	mov	ip, r2
 8003bb6:	44bc      	add	ip, r7
 8003bb8:	4463      	add	r3, ip
 8003bba:	2201      	movs	r2, #1
 8003bbc:	701a      	strb	r2, [r3, #0]
        break;
 8003bbe:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d100      	bne.n	8003bc8 <UART_SetConfig+0x2d8>
 8003bc6:	e153      	b.n	8003e70 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bcc:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <UART_SetConfig+0x344>)
 8003bce:	0052      	lsls	r2, r2, #1
 8003bd0:	5ad3      	ldrh	r3, [r2, r3]
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bd6:	f7fc faa7 	bl	8000128 <__udivsi3>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	0013      	movs	r3, r2
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	189b      	adds	r3, r3, r2
 8003be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d305      	bcc.n	8003bfa <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d91e      	bls.n	8003c38 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003bfa:	231a      	movs	r3, #26
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	4694      	mov	ip, r2
 8003c00:	44bc      	add	ip, r7
 8003c02:	4463      	add	r3, ip
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e132      	b.n	8003e70 <UART_SetConfig+0x580>
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	cfff69f3 	.word	0xcfff69f3
 8003c10:	ffffcfff 	.word	0xffffcfff
 8003c14:	40008000 	.word	0x40008000
 8003c18:	11fff4ff 	.word	0x11fff4ff
 8003c1c:	40013800 	.word	0x40013800
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40004400 	.word	0x40004400
 8003c28:	40004800 	.word	0x40004800
 8003c2c:	40004c00 	.word	0x40004c00
 8003c30:	00f42400 	.word	0x00f42400
 8003c34:	08004da8 	.word	0x08004da8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c44:	4b96      	ldr	r3, [pc, #600]	; (8003ea0 <UART_SetConfig+0x5b0>)
 8003c46:	0052      	lsls	r2, r2, #1
 8003c48:	5ad3      	ldrh	r3, [r2, r3]
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	69b8      	ldr	r0, [r7, #24]
 8003c56:	69f9      	ldr	r1, [r7, #28]
 8003c58:	f7fc fbdc 	bl	8000414 <__aeabi_uldivmod>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	000b      	movs	r3, r1
 8003c60:	0e11      	lsrs	r1, r2, #24
 8003c62:	021d      	lsls	r5, r3, #8
 8003c64:	430d      	orrs	r5, r1
 8003c66:	0214      	lsls	r4, r2, #8
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68b8      	ldr	r0, [r7, #8]
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	1900      	adds	r0, r0, r4
 8003c7a:	4169      	adcs	r1, r5
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f7fc fbc3 	bl	8000414 <__aeabi_uldivmod>
 8003c8e:	0002      	movs	r2, r0
 8003c90:	000b      	movs	r3, r1
 8003c92:	0013      	movs	r3, r2
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c98:	23c0      	movs	r3, #192	; 0xc0
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d309      	bcc.n	8003cb4 <UART_SetConfig+0x3c4>
 8003ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	035b      	lsls	r3, r3, #13
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d204      	bcs.n	8003cb4 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	e0dd      	b.n	8003e70 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8003cb4:	231a      	movs	r3, #26
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	4694      	mov	ip, r2
 8003cba:	44bc      	add	ip, r7
 8003cbc:	4463      	add	r3, ip
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e0d5      	b.n	8003e70 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d000      	beq.n	8003cd2 <UART_SetConfig+0x3e2>
 8003cd0:	e073      	b.n	8003dba <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003cd2:	231b      	movs	r3, #27
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	4694      	mov	ip, r2
 8003cd8:	44bc      	add	ip, r7
 8003cda:	4463      	add	r3, ip
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d015      	beq.n	8003d0e <UART_SetConfig+0x41e>
 8003ce2:	dc18      	bgt.n	8003d16 <UART_SetConfig+0x426>
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d00d      	beq.n	8003d04 <UART_SetConfig+0x414>
 8003ce8:	dc15      	bgt.n	8003d16 <UART_SetConfig+0x426>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <UART_SetConfig+0x404>
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d005      	beq.n	8003cfe <UART_SetConfig+0x40e>
 8003cf2:	e010      	b.n	8003d16 <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf4:	f7ff f992 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cfc:	e015      	b.n	8003d2a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cfe:	4b69      	ldr	r3, [pc, #420]	; (8003ea4 <UART_SetConfig+0x5b4>)
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d02:	e012      	b.n	8003d2a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d04:	f7ff f8fe 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d0c:	e00d      	b.n	8003d2a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d14:	e009      	b.n	8003d2a <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003d1a:	231a      	movs	r3, #26
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	4694      	mov	ip, r2
 8003d20:	44bc      	add	ip, r7
 8003d22:	4463      	add	r3, ip
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
        break;
 8003d28:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d100      	bne.n	8003d32 <UART_SetConfig+0x442>
 8003d30:	e09e      	b.n	8003e70 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d36:	4b5a      	ldr	r3, [pc, #360]	; (8003ea0 <UART_SetConfig+0x5b0>)
 8003d38:	0052      	lsls	r2, r2, #1
 8003d3a:	5ad3      	ldrh	r3, [r2, r3]
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d40:	f7fc f9f2 	bl	8000128 <__udivsi3>
 8003d44:	0003      	movs	r3, r0
 8003d46:	005a      	lsls	r2, r3, #1
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	18d2      	adds	r2, r2, r3
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	0019      	movs	r1, r3
 8003d56:	0010      	movs	r0, r2
 8003d58:	f7fc f9e6 	bl	8000128 <__udivsi3>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	2b0f      	cmp	r3, #15
 8003d64:	d921      	bls.n	8003daa <UART_SetConfig+0x4ba>
 8003d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	025b      	lsls	r3, r3, #9
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d21c      	bcs.n	8003daa <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	200e      	movs	r0, #14
 8003d76:	2420      	movs	r4, #32
 8003d78:	193b      	adds	r3, r7, r4
 8003d7a:	181b      	adds	r3, r3, r0
 8003d7c:	210f      	movs	r1, #15
 8003d7e:	438a      	bics	r2, r1
 8003d80:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	085b      	lsrs	r3, r3, #1
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2207      	movs	r2, #7
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	b299      	uxth	r1, r3
 8003d8e:	193b      	adds	r3, r7, r4
 8003d90:	181b      	adds	r3, r3, r0
 8003d92:	193a      	adds	r2, r7, r4
 8003d94:	1812      	adds	r2, r2, r0
 8003d96:	8812      	ldrh	r2, [r2, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	193a      	adds	r2, r7, r4
 8003da2:	1812      	adds	r2, r2, r0
 8003da4:	8812      	ldrh	r2, [r2, #0]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	e062      	b.n	8003e70 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8003daa:	231a      	movs	r3, #26
 8003dac:	2220      	movs	r2, #32
 8003dae:	4694      	mov	ip, r2
 8003db0:	44bc      	add	ip, r7
 8003db2:	4463      	add	r3, ip
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	e05a      	b.n	8003e70 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dba:	231b      	movs	r3, #27
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	4694      	mov	ip, r2
 8003dc0:	44bc      	add	ip, r7
 8003dc2:	4463      	add	r3, ip
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d015      	beq.n	8003df6 <UART_SetConfig+0x506>
 8003dca:	dc18      	bgt.n	8003dfe <UART_SetConfig+0x50e>
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d00d      	beq.n	8003dec <UART_SetConfig+0x4fc>
 8003dd0:	dc15      	bgt.n	8003dfe <UART_SetConfig+0x50e>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <UART_SetConfig+0x4ec>
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d005      	beq.n	8003de6 <UART_SetConfig+0x4f6>
 8003dda:	e010      	b.n	8003dfe <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7ff f91e 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8003de0:	0003      	movs	r3, r0
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003de4:	e015      	b.n	8003e12 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de6:	4b2f      	ldr	r3, [pc, #188]	; (8003ea4 <UART_SetConfig+0x5b4>)
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dea:	e012      	b.n	8003e12 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dec:	f7ff f88a 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8003df0:	0003      	movs	r3, r0
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003df4:	e00d      	b.n	8003e12 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dfc:	e009      	b.n	8003e12 <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003e02:	231a      	movs	r3, #26
 8003e04:	2220      	movs	r2, #32
 8003e06:	4694      	mov	ip, r2
 8003e08:	44bc      	add	ip, r7
 8003e0a:	4463      	add	r3, ip
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
        break;
 8003e10:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d02b      	beq.n	8003e70 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e1c:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <UART_SetConfig+0x5b0>)
 8003e1e:	0052      	lsls	r2, r2, #1
 8003e20:	5ad3      	ldrh	r3, [r2, r3]
 8003e22:	0019      	movs	r1, r3
 8003e24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e26:	f7fc f97f 	bl	8000128 <__udivsi3>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	18d2      	adds	r2, r2, r3
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	0010      	movs	r0, r2
 8003e3e:	f7fc f973 	bl	8000128 <__udivsi3>
 8003e42:	0003      	movs	r3, r0
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	2b0f      	cmp	r3, #15
 8003e4a:	d90a      	bls.n	8003e62 <UART_SetConfig+0x572>
 8003e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	025b      	lsls	r3, r3, #9
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d205      	bcs.n	8003e62 <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	e006      	b.n	8003e70 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8003e62:	231a      	movs	r3, #26
 8003e64:	2220      	movs	r2, #32
 8003e66:	4694      	mov	ip, r2
 8003e68:	44bc      	add	ip, r7
 8003e6a:	4463      	add	r3, ip
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	226a      	movs	r2, #106	; 0x6a
 8003e74:	2101      	movs	r1, #1
 8003e76:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	2268      	movs	r2, #104	; 0x68
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	2200      	movs	r2, #0
 8003e84:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	2200      	movs	r2, #0
 8003e8a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003e8c:	231a      	movs	r3, #26
 8003e8e:	2220      	movs	r2, #32
 8003e90:	4694      	mov	ip, r2
 8003e92:	44bc      	add	ip, r7
 8003e94:	4463      	add	r3, ip
 8003e96:	781b      	ldrb	r3, [r3, #0]
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b010      	add	sp, #64	; 0x40
 8003e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea0:	08004da8 	.word	0x08004da8
 8003ea4:	00f42400 	.word	0x00f42400

08003ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d00b      	beq.n	8003ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a4a      	ldr	r2, [pc, #296]	; (8003fec <UART_AdvFeatureConfig+0x144>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	0019      	movs	r1, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d00b      	beq.n	8003ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4a43      	ldr	r2, [pc, #268]	; (8003ff0 <UART_AdvFeatureConfig+0x148>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	2204      	movs	r2, #4
 8003efa:	4013      	ands	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4a3b      	ldr	r2, [pc, #236]	; (8003ff4 <UART_AdvFeatureConfig+0x14c>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	0019      	movs	r1, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4a34      	ldr	r2, [pc, #208]	; (8003ff8 <UART_AdvFeatureConfig+0x150>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d00b      	beq.n	8003f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a2c      	ldr	r2, [pc, #176]	; (8003ffc <UART_AdvFeatureConfig+0x154>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	2220      	movs	r2, #32
 8003f60:	4013      	ands	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4a25      	ldr	r2, [pc, #148]	; (8004000 <UART_AdvFeatureConfig+0x158>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	2240      	movs	r2, #64	; 0x40
 8003f82:	4013      	ands	r3, r2
 8003f84:	d01d      	beq.n	8003fc2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <UART_AdvFeatureConfig+0x15c>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	035b      	lsls	r3, r3, #13
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d10b      	bne.n	8003fc2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4a15      	ldr	r2, [pc, #84]	; (8004008 <UART_AdvFeatureConfig+0x160>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	0019      	movs	r1, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	2280      	movs	r2, #128	; 0x80
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d00b      	beq.n	8003fe4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4a0e      	ldr	r2, [pc, #56]	; (800400c <UART_AdvFeatureConfig+0x164>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	0019      	movs	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]
  }
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	fffdffff 	.word	0xfffdffff
 8003ff0:	fffeffff 	.word	0xfffeffff
 8003ff4:	fffbffff 	.word	0xfffbffff
 8003ff8:	ffff7fff 	.word	0xffff7fff
 8003ffc:	ffffefff 	.word	0xffffefff
 8004000:	ffffdfff 	.word	0xffffdfff
 8004004:	ffefffff 	.word	0xffefffff
 8004008:	ff9fffff 	.word	0xff9fffff
 800400c:	fff7ffff 	.word	0xfff7ffff

08004010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af02      	add	r7, sp, #8
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	228c      	movs	r2, #140	; 0x8c
 800401c:	2100      	movs	r1, #0
 800401e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004020:	f7fc ffb6 	bl	8000f90 <HAL_GetTick>
 8004024:	0003      	movs	r3, r0
 8004026:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2208      	movs	r2, #8
 8004030:	4013      	ands	r3, r2
 8004032:	2b08      	cmp	r3, #8
 8004034:	d10c      	bne.n	8004050 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	0391      	lsls	r1, r2, #14
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <UART_CheckIdleState+0x90>)
 8004040:	9200      	str	r2, [sp, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	f000 f82e 	bl	80040a4 <UART_WaitOnFlagUntilTimeout>
 8004048:	1e03      	subs	r3, r0, #0
 800404a:	d001      	beq.n	8004050 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e023      	b.n	8004098 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2204      	movs	r2, #4
 8004058:	4013      	ands	r3, r2
 800405a:	2b04      	cmp	r3, #4
 800405c:	d10c      	bne.n	8004078 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	03d1      	lsls	r1, r2, #15
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <UART_CheckIdleState+0x90>)
 8004068:	9200      	str	r2, [sp, #0]
 800406a:	2200      	movs	r2, #0
 800406c:	f000 f81a 	bl	80040a4 <UART_WaitOnFlagUntilTimeout>
 8004070:	1e03      	subs	r3, r0, #0
 8004072:	d001      	beq.n	8004078 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e00f      	b.n	8004098 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2284      	movs	r2, #132	; 0x84
 800407c:	2120      	movs	r1, #32
 800407e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2288      	movs	r2, #136	; 0x88
 8004084:	2120      	movs	r1, #32
 8004086:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2280      	movs	r2, #128	; 0x80
 8004092:	2100      	movs	r1, #0
 8004094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	0018      	movs	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	b004      	add	sp, #16
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	01ffffff 	.word	0x01ffffff

080040a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b094      	sub	sp, #80	; 0x50
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	1dfb      	adds	r3, r7, #7
 80040b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b4:	e0a7      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b8:	3301      	adds	r3, #1
 80040ba:	d100      	bne.n	80040be <UART_WaitOnFlagUntilTimeout+0x1a>
 80040bc:	e0a3      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040be:	f7fc ff67 	bl	8000f90 <HAL_GetTick>
 80040c2:	0002      	movs	r2, r0
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d302      	bcc.n	80040d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d13f      	bne.n	8004154 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d4:	f3ef 8310 	mrs	r3, PRIMASK
 80040d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040dc:	647b      	str	r3, [r7, #68]	; 0x44
 80040de:	2301      	movs	r3, #1
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	f383 8810 	msr	PRIMASK, r3
}
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	494e      	ldr	r1, [pc, #312]	; (8004230 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80040f6:	400a      	ands	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040fc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	f383 8810 	msr	PRIMASK, r3
}
 8004104:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004106:	f3ef 8310 	mrs	r3, PRIMASK
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800410c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410e:	643b      	str	r3, [r7, #64]	; 0x40
 8004110:	2301      	movs	r3, #1
 8004112:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	f383 8810 	msr	PRIMASK, r3
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2101      	movs	r1, #1
 8004128:	438a      	bics	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004132:	f383 8810 	msr	PRIMASK, r3
}
 8004136:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2284      	movs	r2, #132	; 0x84
 800413c:	2120      	movs	r1, #32
 800413e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2288      	movs	r2, #136	; 0x88
 8004144:	2120      	movs	r1, #32
 8004146:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2280      	movs	r2, #128	; 0x80
 800414c:	2100      	movs	r1, #0
 800414e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e069      	b.n	8004228 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2204      	movs	r2, #4
 800415c:	4013      	ands	r3, r2
 800415e:	d052      	beq.n	8004206 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	401a      	ands	r2, r3
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	429a      	cmp	r2, r3
 8004172:	d148      	bne.n	8004206 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2280      	movs	r2, #128	; 0x80
 800417a:	0112      	lsls	r2, r2, #4
 800417c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800417e:	f3ef 8310 	mrs	r3, PRIMASK
 8004182:	613b      	str	r3, [r7, #16]
  return(result);
 8004184:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004188:	2301      	movs	r3, #1
 800418a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f383 8810 	msr	PRIMASK, r3
}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4924      	ldr	r1, [pc, #144]	; (8004230 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f383 8810 	msr	PRIMASK, r3
}
 80041ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b0:	f3ef 8310 	mrs	r3, PRIMASK
 80041b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80041b6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ba:	2301      	movs	r3, #1
 80041bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	f383 8810 	msr	PRIMASK, r3
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2101      	movs	r1, #1
 80041d2:	438a      	bics	r2, r1
 80041d4:	609a      	str	r2, [r3, #8]
 80041d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	f383 8810 	msr	PRIMASK, r3
}
 80041e0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2284      	movs	r2, #132	; 0x84
 80041e6:	2120      	movs	r1, #32
 80041e8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2288      	movs	r2, #136	; 0x88
 80041ee:	2120      	movs	r1, #32
 80041f0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	228c      	movs	r2, #140	; 0x8c
 80041f6:	2120      	movs	r1, #32
 80041f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2280      	movs	r2, #128	; 0x80
 80041fe:	2100      	movs	r1, #0
 8004200:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e010      	b.n	8004228 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	4013      	ands	r3, r2
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	425a      	negs	r2, r3
 8004216:	4153      	adcs	r3, r2
 8004218:	b2db      	uxtb	r3, r3
 800421a:	001a      	movs	r2, r3
 800421c:	1dfb      	adds	r3, r7, #7
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d100      	bne.n	8004226 <UART_WaitOnFlagUntilTimeout+0x182>
 8004224:	e747      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	0018      	movs	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	b014      	add	sp, #80	; 0x50
 800422e:	bd80      	pop	{r7, pc}
 8004230:	fffffe5f 	.word	0xfffffe5f

08004234 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2280      	movs	r2, #128	; 0x80
 8004240:	5c9b      	ldrb	r3, [r3, r2]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_UARTEx_DisableFifoMode+0x16>
 8004246:	2302      	movs	r3, #2
 8004248:	e027      	b.n	800429a <HAL_UARTEx_DisableFifoMode+0x66>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2280      	movs	r2, #128	; 0x80
 800424e:	2101      	movs	r1, #1
 8004250:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2284      	movs	r2, #132	; 0x84
 8004256:	2124      	movs	r1, #36	; 0x24
 8004258:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2101      	movs	r1, #1
 800426e:	438a      	bics	r2, r1
 8004270:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4a0b      	ldr	r2, [pc, #44]	; (80042a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004276:	4013      	ands	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2284      	movs	r2, #132	; 0x84
 800428c:	2120      	movs	r1, #32
 800428e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2280      	movs	r2, #128	; 0x80
 8004294:	2100      	movs	r1, #0
 8004296:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b004      	add	sp, #16
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	dfffffff 	.word	0xdfffffff

080042a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2280      	movs	r2, #128	; 0x80
 80042b6:	5c9b      	ldrb	r3, [r3, r2]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80042bc:	2302      	movs	r3, #2
 80042be:	e02e      	b.n	800431e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	2101      	movs	r1, #1
 80042c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2284      	movs	r2, #132	; 0x84
 80042cc:	2124      	movs	r1, #36	; 0x24
 80042ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2101      	movs	r1, #1
 80042e4:	438a      	bics	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	08d9      	lsrs	r1, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 f854 	bl	80043ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2284      	movs	r2, #132	; 0x84
 8004310:	2120      	movs	r1, #32
 8004312:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	2100      	movs	r1, #0
 800431a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	0018      	movs	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	b004      	add	sp, #16
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2280      	movs	r2, #128	; 0x80
 8004336:	5c9b      	ldrb	r3, [r3, r2]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800433c:	2302      	movs	r3, #2
 800433e:	e02f      	b.n	80043a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2280      	movs	r2, #128	; 0x80
 8004344:	2101      	movs	r1, #1
 8004346:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2284      	movs	r2, #132	; 0x84
 800434c:	2124      	movs	r1, #36	; 0x24
 800434e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2101      	movs	r1, #1
 8004364:	438a      	bics	r2, r1
 8004366:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4a0e      	ldr	r2, [pc, #56]	; (80043a8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004370:	4013      	ands	r3, r2
 8004372:	0019      	movs	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 f813 	bl	80043ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2284      	movs	r2, #132	; 0x84
 8004392:	2120      	movs	r1, #32
 8004394:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2280      	movs	r2, #128	; 0x80
 800439a:	2100      	movs	r1, #0
 800439c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	0018      	movs	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b004      	add	sp, #16
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	f1ffffff 	.word	0xf1ffffff

080043ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80043ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d108      	bne.n	80043ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	226a      	movs	r2, #106	; 0x6a
 80043c0:	2101      	movs	r1, #1
 80043c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2268      	movs	r2, #104	; 0x68
 80043c8:	2101      	movs	r1, #1
 80043ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80043cc:	e043      	b.n	8004456 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80043ce:	260f      	movs	r6, #15
 80043d0:	19bb      	adds	r3, r7, r6
 80043d2:	2208      	movs	r2, #8
 80043d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80043d6:	200e      	movs	r0, #14
 80043d8:	183b      	adds	r3, r7, r0
 80043da:	2208      	movs	r2, #8
 80043dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	0e5b      	lsrs	r3, r3, #25
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	240d      	movs	r4, #13
 80043ea:	193b      	adds	r3, r7, r4
 80043ec:	2107      	movs	r1, #7
 80043ee:	400a      	ands	r2, r1
 80043f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	0f5b      	lsrs	r3, r3, #29
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	250c      	movs	r5, #12
 80043fe:	197b      	adds	r3, r7, r5
 8004400:	2107      	movs	r1, #7
 8004402:	400a      	ands	r2, r1
 8004404:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004406:	183b      	adds	r3, r7, r0
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	197a      	adds	r2, r7, r5
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	4914      	ldr	r1, [pc, #80]	; (8004460 <UARTEx_SetNbDataToProcess+0xb4>)
 8004410:	5c8a      	ldrb	r2, [r1, r2]
 8004412:	435a      	muls	r2, r3
 8004414:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004416:	197b      	adds	r3, r7, r5
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <UARTEx_SetNbDataToProcess+0xb8>)
 800441c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800441e:	0019      	movs	r1, r3
 8004420:	f7fb ff0c 	bl	800023c <__divsi3>
 8004424:	0003      	movs	r3, r0
 8004426:	b299      	uxth	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	226a      	movs	r2, #106	; 0x6a
 800442c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800442e:	19bb      	adds	r3, r7, r6
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	193a      	adds	r2, r7, r4
 8004434:	7812      	ldrb	r2, [r2, #0]
 8004436:	490a      	ldr	r1, [pc, #40]	; (8004460 <UARTEx_SetNbDataToProcess+0xb4>)
 8004438:	5c8a      	ldrb	r2, [r1, r2]
 800443a:	435a      	muls	r2, r3
 800443c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800443e:	193b      	adds	r3, r7, r4
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	4a08      	ldr	r2, [pc, #32]	; (8004464 <UARTEx_SetNbDataToProcess+0xb8>)
 8004444:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004446:	0019      	movs	r1, r3
 8004448:	f7fb fef8 	bl	800023c <__divsi3>
 800444c:	0003      	movs	r3, r0
 800444e:	b299      	uxth	r1, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2268      	movs	r2, #104	; 0x68
 8004454:	5299      	strh	r1, [r3, r2]
}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	46bd      	mov	sp, r7
 800445a:	b005      	add	sp, #20
 800445c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	08004dc0 	.word	0x08004dc0
 8004464:	08004dc8 	.word	0x08004dc8

08004468 <__errno>:
 8004468:	4b01      	ldr	r3, [pc, #4]	; (8004470 <__errno+0x8>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	4770      	bx	lr
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	2000000c 	.word	0x2000000c

08004474 <__libc_init_array>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	2600      	movs	r6, #0
 8004478:	4d0c      	ldr	r5, [pc, #48]	; (80044ac <__libc_init_array+0x38>)
 800447a:	4c0d      	ldr	r4, [pc, #52]	; (80044b0 <__libc_init_array+0x3c>)
 800447c:	1b64      	subs	r4, r4, r5
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	42a6      	cmp	r6, r4
 8004482:	d109      	bne.n	8004498 <__libc_init_array+0x24>
 8004484:	2600      	movs	r6, #0
 8004486:	f000 fc47 	bl	8004d18 <_init>
 800448a:	4d0a      	ldr	r5, [pc, #40]	; (80044b4 <__libc_init_array+0x40>)
 800448c:	4c0a      	ldr	r4, [pc, #40]	; (80044b8 <__libc_init_array+0x44>)
 800448e:	1b64      	subs	r4, r4, r5
 8004490:	10a4      	asrs	r4, r4, #2
 8004492:	42a6      	cmp	r6, r4
 8004494:	d105      	bne.n	80044a2 <__libc_init_array+0x2e>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	00b3      	lsls	r3, r6, #2
 800449a:	58eb      	ldr	r3, [r5, r3]
 800449c:	4798      	blx	r3
 800449e:	3601      	adds	r6, #1
 80044a0:	e7ee      	b.n	8004480 <__libc_init_array+0xc>
 80044a2:	00b3      	lsls	r3, r6, #2
 80044a4:	58eb      	ldr	r3, [r5, r3]
 80044a6:	4798      	blx	r3
 80044a8:	3601      	adds	r6, #1
 80044aa:	e7f2      	b.n	8004492 <__libc_init_array+0x1e>
 80044ac:	08004e0c 	.word	0x08004e0c
 80044b0:	08004e0c 	.word	0x08004e0c
 80044b4:	08004e0c 	.word	0x08004e0c
 80044b8:	08004e10 	.word	0x08004e10

080044bc <memset>:
 80044bc:	0003      	movs	r3, r0
 80044be:	1882      	adds	r2, r0, r2
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	7019      	strb	r1, [r3, #0]
 80044c8:	3301      	adds	r3, #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <siprintf>:
 80044cc:	b40e      	push	{r1, r2, r3}
 80044ce:	b500      	push	{lr}
 80044d0:	490b      	ldr	r1, [pc, #44]	; (8004500 <siprintf+0x34>)
 80044d2:	b09c      	sub	sp, #112	; 0x70
 80044d4:	ab1d      	add	r3, sp, #116	; 0x74
 80044d6:	9002      	str	r0, [sp, #8]
 80044d8:	9006      	str	r0, [sp, #24]
 80044da:	9107      	str	r1, [sp, #28]
 80044dc:	9104      	str	r1, [sp, #16]
 80044de:	4809      	ldr	r0, [pc, #36]	; (8004504 <siprintf+0x38>)
 80044e0:	4909      	ldr	r1, [pc, #36]	; (8004508 <siprintf+0x3c>)
 80044e2:	cb04      	ldmia	r3!, {r2}
 80044e4:	9105      	str	r1, [sp, #20]
 80044e6:	6800      	ldr	r0, [r0, #0]
 80044e8:	a902      	add	r1, sp, #8
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	f000 f870 	bl	80045d0 <_svfiprintf_r>
 80044f0:	2300      	movs	r3, #0
 80044f2:	9a02      	ldr	r2, [sp, #8]
 80044f4:	7013      	strb	r3, [r2, #0]
 80044f6:	b01c      	add	sp, #112	; 0x70
 80044f8:	bc08      	pop	{r3}
 80044fa:	b003      	add	sp, #12
 80044fc:	4718      	bx	r3
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	7fffffff 	.word	0x7fffffff
 8004504:	2000000c 	.word	0x2000000c
 8004508:	ffff0208 	.word	0xffff0208

0800450c <__ssputs_r>:
 800450c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450e:	688e      	ldr	r6, [r1, #8]
 8004510:	b085      	sub	sp, #20
 8004512:	0007      	movs	r7, r0
 8004514:	000c      	movs	r4, r1
 8004516:	9203      	str	r2, [sp, #12]
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	429e      	cmp	r6, r3
 800451c:	d83c      	bhi.n	8004598 <__ssputs_r+0x8c>
 800451e:	2390      	movs	r3, #144	; 0x90
 8004520:	898a      	ldrh	r2, [r1, #12]
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	421a      	tst	r2, r3
 8004526:	d034      	beq.n	8004592 <__ssputs_r+0x86>
 8004528:	2503      	movs	r5, #3
 800452a:	6909      	ldr	r1, [r1, #16]
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	1a5b      	subs	r3, r3, r1
 8004530:	9302      	str	r3, [sp, #8]
 8004532:	6963      	ldr	r3, [r4, #20]
 8004534:	9802      	ldr	r0, [sp, #8]
 8004536:	435d      	muls	r5, r3
 8004538:	0feb      	lsrs	r3, r5, #31
 800453a:	195d      	adds	r5, r3, r5
 800453c:	9b01      	ldr	r3, [sp, #4]
 800453e:	106d      	asrs	r5, r5, #1
 8004540:	3301      	adds	r3, #1
 8004542:	181b      	adds	r3, r3, r0
 8004544:	42ab      	cmp	r3, r5
 8004546:	d900      	bls.n	800454a <__ssputs_r+0x3e>
 8004548:	001d      	movs	r5, r3
 800454a:	0553      	lsls	r3, r2, #21
 800454c:	d532      	bpl.n	80045b4 <__ssputs_r+0xa8>
 800454e:	0029      	movs	r1, r5
 8004550:	0038      	movs	r0, r7
 8004552:	f000 fb31 	bl	8004bb8 <_malloc_r>
 8004556:	1e06      	subs	r6, r0, #0
 8004558:	d109      	bne.n	800456e <__ssputs_r+0x62>
 800455a:	230c      	movs	r3, #12
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	2340      	movs	r3, #64	; 0x40
 8004560:	2001      	movs	r0, #1
 8004562:	89a2      	ldrh	r2, [r4, #12]
 8004564:	4240      	negs	r0, r0
 8004566:	4313      	orrs	r3, r2
 8004568:	81a3      	strh	r3, [r4, #12]
 800456a:	b005      	add	sp, #20
 800456c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800456e:	9a02      	ldr	r2, [sp, #8]
 8004570:	6921      	ldr	r1, [r4, #16]
 8004572:	f000 faba 	bl	8004aea <memcpy>
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	4a14      	ldr	r2, [pc, #80]	; (80045cc <__ssputs_r+0xc0>)
 800457a:	401a      	ands	r2, r3
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	4313      	orrs	r3, r2
 8004580:	81a3      	strh	r3, [r4, #12]
 8004582:	9b02      	ldr	r3, [sp, #8]
 8004584:	6126      	str	r6, [r4, #16]
 8004586:	18f6      	adds	r6, r6, r3
 8004588:	6026      	str	r6, [r4, #0]
 800458a:	6165      	str	r5, [r4, #20]
 800458c:	9e01      	ldr	r6, [sp, #4]
 800458e:	1aed      	subs	r5, r5, r3
 8004590:	60a5      	str	r5, [r4, #8]
 8004592:	9b01      	ldr	r3, [sp, #4]
 8004594:	429e      	cmp	r6, r3
 8004596:	d900      	bls.n	800459a <__ssputs_r+0x8e>
 8004598:	9e01      	ldr	r6, [sp, #4]
 800459a:	0032      	movs	r2, r6
 800459c:	9903      	ldr	r1, [sp, #12]
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	f000 faac 	bl	8004afc <memmove>
 80045a4:	68a3      	ldr	r3, [r4, #8]
 80045a6:	2000      	movs	r0, #0
 80045a8:	1b9b      	subs	r3, r3, r6
 80045aa:	60a3      	str	r3, [r4, #8]
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	199e      	adds	r6, r3, r6
 80045b0:	6026      	str	r6, [r4, #0]
 80045b2:	e7da      	b.n	800456a <__ssputs_r+0x5e>
 80045b4:	002a      	movs	r2, r5
 80045b6:	0038      	movs	r0, r7
 80045b8:	f000 fb5c 	bl	8004c74 <_realloc_r>
 80045bc:	1e06      	subs	r6, r0, #0
 80045be:	d1e0      	bne.n	8004582 <__ssputs_r+0x76>
 80045c0:	0038      	movs	r0, r7
 80045c2:	6921      	ldr	r1, [r4, #16]
 80045c4:	f000 faae 	bl	8004b24 <_free_r>
 80045c8:	e7c7      	b.n	800455a <__ssputs_r+0x4e>
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	fffffb7f 	.word	0xfffffb7f

080045d0 <_svfiprintf_r>:
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d2:	b0a1      	sub	sp, #132	; 0x84
 80045d4:	9003      	str	r0, [sp, #12]
 80045d6:	001d      	movs	r5, r3
 80045d8:	898b      	ldrh	r3, [r1, #12]
 80045da:	000f      	movs	r7, r1
 80045dc:	0016      	movs	r6, r2
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	d511      	bpl.n	8004606 <_svfiprintf_r+0x36>
 80045e2:	690b      	ldr	r3, [r1, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10e      	bne.n	8004606 <_svfiprintf_r+0x36>
 80045e8:	2140      	movs	r1, #64	; 0x40
 80045ea:	f000 fae5 	bl	8004bb8 <_malloc_r>
 80045ee:	6038      	str	r0, [r7, #0]
 80045f0:	6138      	str	r0, [r7, #16]
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d105      	bne.n	8004602 <_svfiprintf_r+0x32>
 80045f6:	230c      	movs	r3, #12
 80045f8:	9a03      	ldr	r2, [sp, #12]
 80045fa:	3801      	subs	r0, #1
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	b021      	add	sp, #132	; 0x84
 8004600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004602:	2340      	movs	r3, #64	; 0x40
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	2300      	movs	r3, #0
 8004608:	ac08      	add	r4, sp, #32
 800460a:	6163      	str	r3, [r4, #20]
 800460c:	3320      	adds	r3, #32
 800460e:	7663      	strb	r3, [r4, #25]
 8004610:	3310      	adds	r3, #16
 8004612:	76a3      	strb	r3, [r4, #26]
 8004614:	9507      	str	r5, [sp, #28]
 8004616:	0035      	movs	r5, r6
 8004618:	782b      	ldrb	r3, [r5, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <_svfiprintf_r+0x52>
 800461e:	2b25      	cmp	r3, #37	; 0x25
 8004620:	d147      	bne.n	80046b2 <_svfiprintf_r+0xe2>
 8004622:	1bab      	subs	r3, r5, r6
 8004624:	9305      	str	r3, [sp, #20]
 8004626:	42b5      	cmp	r5, r6
 8004628:	d00c      	beq.n	8004644 <_svfiprintf_r+0x74>
 800462a:	0032      	movs	r2, r6
 800462c:	0039      	movs	r1, r7
 800462e:	9803      	ldr	r0, [sp, #12]
 8004630:	f7ff ff6c 	bl	800450c <__ssputs_r>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d100      	bne.n	800463a <_svfiprintf_r+0x6a>
 8004638:	e0ae      	b.n	8004798 <_svfiprintf_r+0x1c8>
 800463a:	6962      	ldr	r2, [r4, #20]
 800463c:	9b05      	ldr	r3, [sp, #20]
 800463e:	4694      	mov	ip, r2
 8004640:	4463      	add	r3, ip
 8004642:	6163      	str	r3, [r4, #20]
 8004644:	782b      	ldrb	r3, [r5, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d100      	bne.n	800464c <_svfiprintf_r+0x7c>
 800464a:	e0a5      	b.n	8004798 <_svfiprintf_r+0x1c8>
 800464c:	2201      	movs	r2, #1
 800464e:	2300      	movs	r3, #0
 8004650:	4252      	negs	r2, r2
 8004652:	6062      	str	r2, [r4, #4]
 8004654:	a904      	add	r1, sp, #16
 8004656:	3254      	adds	r2, #84	; 0x54
 8004658:	1852      	adds	r2, r2, r1
 800465a:	1c6e      	adds	r6, r5, #1
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	60e3      	str	r3, [r4, #12]
 8004660:	60a3      	str	r3, [r4, #8]
 8004662:	7013      	strb	r3, [r2, #0]
 8004664:	65a3      	str	r3, [r4, #88]	; 0x58
 8004666:	2205      	movs	r2, #5
 8004668:	7831      	ldrb	r1, [r6, #0]
 800466a:	4854      	ldr	r0, [pc, #336]	; (80047bc <_svfiprintf_r+0x1ec>)
 800466c:	f000 fa32 	bl	8004ad4 <memchr>
 8004670:	1c75      	adds	r5, r6, #1
 8004672:	2800      	cmp	r0, #0
 8004674:	d11f      	bne.n	80046b6 <_svfiprintf_r+0xe6>
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	06d3      	lsls	r3, r2, #27
 800467a:	d504      	bpl.n	8004686 <_svfiprintf_r+0xb6>
 800467c:	2353      	movs	r3, #83	; 0x53
 800467e:	a904      	add	r1, sp, #16
 8004680:	185b      	adds	r3, r3, r1
 8004682:	2120      	movs	r1, #32
 8004684:	7019      	strb	r1, [r3, #0]
 8004686:	0713      	lsls	r3, r2, #28
 8004688:	d504      	bpl.n	8004694 <_svfiprintf_r+0xc4>
 800468a:	2353      	movs	r3, #83	; 0x53
 800468c:	a904      	add	r1, sp, #16
 800468e:	185b      	adds	r3, r3, r1
 8004690:	212b      	movs	r1, #43	; 0x2b
 8004692:	7019      	strb	r1, [r3, #0]
 8004694:	7833      	ldrb	r3, [r6, #0]
 8004696:	2b2a      	cmp	r3, #42	; 0x2a
 8004698:	d016      	beq.n	80046c8 <_svfiprintf_r+0xf8>
 800469a:	0035      	movs	r5, r6
 800469c:	2100      	movs	r1, #0
 800469e:	200a      	movs	r0, #10
 80046a0:	68e3      	ldr	r3, [r4, #12]
 80046a2:	782a      	ldrb	r2, [r5, #0]
 80046a4:	1c6e      	adds	r6, r5, #1
 80046a6:	3a30      	subs	r2, #48	; 0x30
 80046a8:	2a09      	cmp	r2, #9
 80046aa:	d94e      	bls.n	800474a <_svfiprintf_r+0x17a>
 80046ac:	2900      	cmp	r1, #0
 80046ae:	d111      	bne.n	80046d4 <_svfiprintf_r+0x104>
 80046b0:	e017      	b.n	80046e2 <_svfiprintf_r+0x112>
 80046b2:	3501      	adds	r5, #1
 80046b4:	e7b0      	b.n	8004618 <_svfiprintf_r+0x48>
 80046b6:	4b41      	ldr	r3, [pc, #260]	; (80047bc <_svfiprintf_r+0x1ec>)
 80046b8:	6822      	ldr	r2, [r4, #0]
 80046ba:	1ac0      	subs	r0, r0, r3
 80046bc:	2301      	movs	r3, #1
 80046be:	4083      	lsls	r3, r0
 80046c0:	4313      	orrs	r3, r2
 80046c2:	002e      	movs	r6, r5
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	e7ce      	b.n	8004666 <_svfiprintf_r+0x96>
 80046c8:	9b07      	ldr	r3, [sp, #28]
 80046ca:	1d19      	adds	r1, r3, #4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	9107      	str	r1, [sp, #28]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	db01      	blt.n	80046d8 <_svfiprintf_r+0x108>
 80046d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80046d6:	e004      	b.n	80046e2 <_svfiprintf_r+0x112>
 80046d8:	425b      	negs	r3, r3
 80046da:	60e3      	str	r3, [r4, #12]
 80046dc:	2302      	movs	r3, #2
 80046de:	4313      	orrs	r3, r2
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	782b      	ldrb	r3, [r5, #0]
 80046e4:	2b2e      	cmp	r3, #46	; 0x2e
 80046e6:	d10a      	bne.n	80046fe <_svfiprintf_r+0x12e>
 80046e8:	786b      	ldrb	r3, [r5, #1]
 80046ea:	2b2a      	cmp	r3, #42	; 0x2a
 80046ec:	d135      	bne.n	800475a <_svfiprintf_r+0x18a>
 80046ee:	9b07      	ldr	r3, [sp, #28]
 80046f0:	3502      	adds	r5, #2
 80046f2:	1d1a      	adds	r2, r3, #4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	9207      	str	r2, [sp, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db2b      	blt.n	8004754 <_svfiprintf_r+0x184>
 80046fc:	9309      	str	r3, [sp, #36]	; 0x24
 80046fe:	4e30      	ldr	r6, [pc, #192]	; (80047c0 <_svfiprintf_r+0x1f0>)
 8004700:	2203      	movs	r2, #3
 8004702:	0030      	movs	r0, r6
 8004704:	7829      	ldrb	r1, [r5, #0]
 8004706:	f000 f9e5 	bl	8004ad4 <memchr>
 800470a:	2800      	cmp	r0, #0
 800470c:	d006      	beq.n	800471c <_svfiprintf_r+0x14c>
 800470e:	2340      	movs	r3, #64	; 0x40
 8004710:	1b80      	subs	r0, r0, r6
 8004712:	4083      	lsls	r3, r0
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	3501      	adds	r5, #1
 8004718:	4313      	orrs	r3, r2
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	7829      	ldrb	r1, [r5, #0]
 800471e:	2206      	movs	r2, #6
 8004720:	4828      	ldr	r0, [pc, #160]	; (80047c4 <_svfiprintf_r+0x1f4>)
 8004722:	1c6e      	adds	r6, r5, #1
 8004724:	7621      	strb	r1, [r4, #24]
 8004726:	f000 f9d5 	bl	8004ad4 <memchr>
 800472a:	2800      	cmp	r0, #0
 800472c:	d03c      	beq.n	80047a8 <_svfiprintf_r+0x1d8>
 800472e:	4b26      	ldr	r3, [pc, #152]	; (80047c8 <_svfiprintf_r+0x1f8>)
 8004730:	2b00      	cmp	r3, #0
 8004732:	d125      	bne.n	8004780 <_svfiprintf_r+0x1b0>
 8004734:	2207      	movs	r2, #7
 8004736:	9b07      	ldr	r3, [sp, #28]
 8004738:	3307      	adds	r3, #7
 800473a:	4393      	bics	r3, r2
 800473c:	3308      	adds	r3, #8
 800473e:	9307      	str	r3, [sp, #28]
 8004740:	6963      	ldr	r3, [r4, #20]
 8004742:	9a04      	ldr	r2, [sp, #16]
 8004744:	189b      	adds	r3, r3, r2
 8004746:	6163      	str	r3, [r4, #20]
 8004748:	e765      	b.n	8004616 <_svfiprintf_r+0x46>
 800474a:	4343      	muls	r3, r0
 800474c:	0035      	movs	r5, r6
 800474e:	2101      	movs	r1, #1
 8004750:	189b      	adds	r3, r3, r2
 8004752:	e7a6      	b.n	80046a2 <_svfiprintf_r+0xd2>
 8004754:	2301      	movs	r3, #1
 8004756:	425b      	negs	r3, r3
 8004758:	e7d0      	b.n	80046fc <_svfiprintf_r+0x12c>
 800475a:	2300      	movs	r3, #0
 800475c:	200a      	movs	r0, #10
 800475e:	001a      	movs	r2, r3
 8004760:	3501      	adds	r5, #1
 8004762:	6063      	str	r3, [r4, #4]
 8004764:	7829      	ldrb	r1, [r5, #0]
 8004766:	1c6e      	adds	r6, r5, #1
 8004768:	3930      	subs	r1, #48	; 0x30
 800476a:	2909      	cmp	r1, #9
 800476c:	d903      	bls.n	8004776 <_svfiprintf_r+0x1a6>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0c5      	beq.n	80046fe <_svfiprintf_r+0x12e>
 8004772:	9209      	str	r2, [sp, #36]	; 0x24
 8004774:	e7c3      	b.n	80046fe <_svfiprintf_r+0x12e>
 8004776:	4342      	muls	r2, r0
 8004778:	0035      	movs	r5, r6
 800477a:	2301      	movs	r3, #1
 800477c:	1852      	adds	r2, r2, r1
 800477e:	e7f1      	b.n	8004764 <_svfiprintf_r+0x194>
 8004780:	ab07      	add	r3, sp, #28
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	003a      	movs	r2, r7
 8004786:	0021      	movs	r1, r4
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <_svfiprintf_r+0x1fc>)
 800478a:	9803      	ldr	r0, [sp, #12]
 800478c:	e000      	b.n	8004790 <_svfiprintf_r+0x1c0>
 800478e:	bf00      	nop
 8004790:	9004      	str	r0, [sp, #16]
 8004792:	9b04      	ldr	r3, [sp, #16]
 8004794:	3301      	adds	r3, #1
 8004796:	d1d3      	bne.n	8004740 <_svfiprintf_r+0x170>
 8004798:	89bb      	ldrh	r3, [r7, #12]
 800479a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800479c:	065b      	lsls	r3, r3, #25
 800479e:	d400      	bmi.n	80047a2 <_svfiprintf_r+0x1d2>
 80047a0:	e72d      	b.n	80045fe <_svfiprintf_r+0x2e>
 80047a2:	2001      	movs	r0, #1
 80047a4:	4240      	negs	r0, r0
 80047a6:	e72a      	b.n	80045fe <_svfiprintf_r+0x2e>
 80047a8:	ab07      	add	r3, sp, #28
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	003a      	movs	r2, r7
 80047ae:	0021      	movs	r1, r4
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <_svfiprintf_r+0x1fc>)
 80047b2:	9803      	ldr	r0, [sp, #12]
 80047b4:	f000 f87c 	bl	80048b0 <_printf_i>
 80047b8:	e7ea      	b.n	8004790 <_svfiprintf_r+0x1c0>
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	08004dd0 	.word	0x08004dd0
 80047c0:	08004dd6 	.word	0x08004dd6
 80047c4:	08004dda 	.word	0x08004dda
 80047c8:	00000000 	.word	0x00000000
 80047cc:	0800450d 	.word	0x0800450d

080047d0 <_printf_common>:
 80047d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047d2:	0015      	movs	r5, r2
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	688a      	ldr	r2, [r1, #8]
 80047d8:	690b      	ldr	r3, [r1, #16]
 80047da:	000c      	movs	r4, r1
 80047dc:	9000      	str	r0, [sp, #0]
 80047de:	4293      	cmp	r3, r2
 80047e0:	da00      	bge.n	80047e4 <_printf_common+0x14>
 80047e2:	0013      	movs	r3, r2
 80047e4:	0022      	movs	r2, r4
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	3243      	adds	r2, #67	; 0x43
 80047ea:	7812      	ldrb	r2, [r2, #0]
 80047ec:	2a00      	cmp	r2, #0
 80047ee:	d001      	beq.n	80047f4 <_printf_common+0x24>
 80047f0:	3301      	adds	r3, #1
 80047f2:	602b      	str	r3, [r5, #0]
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	069b      	lsls	r3, r3, #26
 80047f8:	d502      	bpl.n	8004800 <_printf_common+0x30>
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	3302      	adds	r3, #2
 80047fe:	602b      	str	r3, [r5, #0]
 8004800:	6822      	ldr	r2, [r4, #0]
 8004802:	2306      	movs	r3, #6
 8004804:	0017      	movs	r7, r2
 8004806:	401f      	ands	r7, r3
 8004808:	421a      	tst	r2, r3
 800480a:	d027      	beq.n	800485c <_printf_common+0x8c>
 800480c:	0023      	movs	r3, r4
 800480e:	3343      	adds	r3, #67	; 0x43
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	1e5a      	subs	r2, r3, #1
 8004814:	4193      	sbcs	r3, r2
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	0692      	lsls	r2, r2, #26
 800481a:	d430      	bmi.n	800487e <_printf_common+0xae>
 800481c:	0022      	movs	r2, r4
 800481e:	9901      	ldr	r1, [sp, #4]
 8004820:	9800      	ldr	r0, [sp, #0]
 8004822:	9e08      	ldr	r6, [sp, #32]
 8004824:	3243      	adds	r2, #67	; 0x43
 8004826:	47b0      	blx	r6
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d025      	beq.n	8004878 <_printf_common+0xa8>
 800482c:	2306      	movs	r3, #6
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	682a      	ldr	r2, [r5, #0]
 8004832:	68e1      	ldr	r1, [r4, #12]
 8004834:	2500      	movs	r5, #0
 8004836:	4003      	ands	r3, r0
 8004838:	2b04      	cmp	r3, #4
 800483a:	d103      	bne.n	8004844 <_printf_common+0x74>
 800483c:	1a8d      	subs	r5, r1, r2
 800483e:	43eb      	mvns	r3, r5
 8004840:	17db      	asrs	r3, r3, #31
 8004842:	401d      	ands	r5, r3
 8004844:	68a3      	ldr	r3, [r4, #8]
 8004846:	6922      	ldr	r2, [r4, #16]
 8004848:	4293      	cmp	r3, r2
 800484a:	dd01      	ble.n	8004850 <_printf_common+0x80>
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	18ed      	adds	r5, r5, r3
 8004850:	2700      	movs	r7, #0
 8004852:	42bd      	cmp	r5, r7
 8004854:	d120      	bne.n	8004898 <_printf_common+0xc8>
 8004856:	2000      	movs	r0, #0
 8004858:	e010      	b.n	800487c <_printf_common+0xac>
 800485a:	3701      	adds	r7, #1
 800485c:	68e3      	ldr	r3, [r4, #12]
 800485e:	682a      	ldr	r2, [r5, #0]
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	42bb      	cmp	r3, r7
 8004864:	ddd2      	ble.n	800480c <_printf_common+0x3c>
 8004866:	0022      	movs	r2, r4
 8004868:	2301      	movs	r3, #1
 800486a:	9901      	ldr	r1, [sp, #4]
 800486c:	9800      	ldr	r0, [sp, #0]
 800486e:	9e08      	ldr	r6, [sp, #32]
 8004870:	3219      	adds	r2, #25
 8004872:	47b0      	blx	r6
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d1f0      	bne.n	800485a <_printf_common+0x8a>
 8004878:	2001      	movs	r0, #1
 800487a:	4240      	negs	r0, r0
 800487c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800487e:	2030      	movs	r0, #48	; 0x30
 8004880:	18e1      	adds	r1, r4, r3
 8004882:	3143      	adds	r1, #67	; 0x43
 8004884:	7008      	strb	r0, [r1, #0]
 8004886:	0021      	movs	r1, r4
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	3145      	adds	r1, #69	; 0x45
 800488c:	7809      	ldrb	r1, [r1, #0]
 800488e:	18a2      	adds	r2, r4, r2
 8004890:	3243      	adds	r2, #67	; 0x43
 8004892:	3302      	adds	r3, #2
 8004894:	7011      	strb	r1, [r2, #0]
 8004896:	e7c1      	b.n	800481c <_printf_common+0x4c>
 8004898:	0022      	movs	r2, r4
 800489a:	2301      	movs	r3, #1
 800489c:	9901      	ldr	r1, [sp, #4]
 800489e:	9800      	ldr	r0, [sp, #0]
 80048a0:	9e08      	ldr	r6, [sp, #32]
 80048a2:	321a      	adds	r2, #26
 80048a4:	47b0      	blx	r6
 80048a6:	1c43      	adds	r3, r0, #1
 80048a8:	d0e6      	beq.n	8004878 <_printf_common+0xa8>
 80048aa:	3701      	adds	r7, #1
 80048ac:	e7d1      	b.n	8004852 <_printf_common+0x82>
	...

080048b0 <_printf_i>:
 80048b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b2:	b08b      	sub	sp, #44	; 0x2c
 80048b4:	9206      	str	r2, [sp, #24]
 80048b6:	000a      	movs	r2, r1
 80048b8:	3243      	adds	r2, #67	; 0x43
 80048ba:	9307      	str	r3, [sp, #28]
 80048bc:	9005      	str	r0, [sp, #20]
 80048be:	9204      	str	r2, [sp, #16]
 80048c0:	7e0a      	ldrb	r2, [r1, #24]
 80048c2:	000c      	movs	r4, r1
 80048c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80048c6:	2a78      	cmp	r2, #120	; 0x78
 80048c8:	d806      	bhi.n	80048d8 <_printf_i+0x28>
 80048ca:	2a62      	cmp	r2, #98	; 0x62
 80048cc:	d808      	bhi.n	80048e0 <_printf_i+0x30>
 80048ce:	2a00      	cmp	r2, #0
 80048d0:	d100      	bne.n	80048d4 <_printf_i+0x24>
 80048d2:	e0c0      	b.n	8004a56 <_printf_i+0x1a6>
 80048d4:	2a58      	cmp	r2, #88	; 0x58
 80048d6:	d052      	beq.n	800497e <_printf_i+0xce>
 80048d8:	0026      	movs	r6, r4
 80048da:	3642      	adds	r6, #66	; 0x42
 80048dc:	7032      	strb	r2, [r6, #0]
 80048de:	e022      	b.n	8004926 <_printf_i+0x76>
 80048e0:	0010      	movs	r0, r2
 80048e2:	3863      	subs	r0, #99	; 0x63
 80048e4:	2815      	cmp	r0, #21
 80048e6:	d8f7      	bhi.n	80048d8 <_printf_i+0x28>
 80048e8:	f7fb fc14 	bl	8000114 <__gnu_thumb1_case_shi>
 80048ec:	001f0016 	.word	0x001f0016
 80048f0:	fff6fff6 	.word	0xfff6fff6
 80048f4:	fff6fff6 	.word	0xfff6fff6
 80048f8:	fff6001f 	.word	0xfff6001f
 80048fc:	fff6fff6 	.word	0xfff6fff6
 8004900:	00a8fff6 	.word	0x00a8fff6
 8004904:	009a0036 	.word	0x009a0036
 8004908:	fff6fff6 	.word	0xfff6fff6
 800490c:	fff600b9 	.word	0xfff600b9
 8004910:	fff60036 	.word	0xfff60036
 8004914:	009efff6 	.word	0x009efff6
 8004918:	0026      	movs	r6, r4
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	3642      	adds	r6, #66	; 0x42
 800491e:	1d11      	adds	r1, r2, #4
 8004920:	6019      	str	r1, [r3, #0]
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	7033      	strb	r3, [r6, #0]
 8004926:	2301      	movs	r3, #1
 8004928:	e0a7      	b.n	8004a7a <_printf_i+0x1ca>
 800492a:	6808      	ldr	r0, [r1, #0]
 800492c:	6819      	ldr	r1, [r3, #0]
 800492e:	1d0a      	adds	r2, r1, #4
 8004930:	0605      	lsls	r5, r0, #24
 8004932:	d50b      	bpl.n	800494c <_printf_i+0x9c>
 8004934:	680d      	ldr	r5, [r1, #0]
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	2d00      	cmp	r5, #0
 800493a:	da03      	bge.n	8004944 <_printf_i+0x94>
 800493c:	232d      	movs	r3, #45	; 0x2d
 800493e:	9a04      	ldr	r2, [sp, #16]
 8004940:	426d      	negs	r5, r5
 8004942:	7013      	strb	r3, [r2, #0]
 8004944:	4b61      	ldr	r3, [pc, #388]	; (8004acc <_printf_i+0x21c>)
 8004946:	270a      	movs	r7, #10
 8004948:	9303      	str	r3, [sp, #12]
 800494a:	e032      	b.n	80049b2 <_printf_i+0x102>
 800494c:	680d      	ldr	r5, [r1, #0]
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	0641      	lsls	r1, r0, #25
 8004952:	d5f1      	bpl.n	8004938 <_printf_i+0x88>
 8004954:	b22d      	sxth	r5, r5
 8004956:	e7ef      	b.n	8004938 <_printf_i+0x88>
 8004958:	680d      	ldr	r5, [r1, #0]
 800495a:	6819      	ldr	r1, [r3, #0]
 800495c:	1d08      	adds	r0, r1, #4
 800495e:	6018      	str	r0, [r3, #0]
 8004960:	062e      	lsls	r6, r5, #24
 8004962:	d501      	bpl.n	8004968 <_printf_i+0xb8>
 8004964:	680d      	ldr	r5, [r1, #0]
 8004966:	e003      	b.n	8004970 <_printf_i+0xc0>
 8004968:	066d      	lsls	r5, r5, #25
 800496a:	d5fb      	bpl.n	8004964 <_printf_i+0xb4>
 800496c:	680d      	ldr	r5, [r1, #0]
 800496e:	b2ad      	uxth	r5, r5
 8004970:	4b56      	ldr	r3, [pc, #344]	; (8004acc <_printf_i+0x21c>)
 8004972:	270a      	movs	r7, #10
 8004974:	9303      	str	r3, [sp, #12]
 8004976:	2a6f      	cmp	r2, #111	; 0x6f
 8004978:	d117      	bne.n	80049aa <_printf_i+0xfa>
 800497a:	2708      	movs	r7, #8
 800497c:	e015      	b.n	80049aa <_printf_i+0xfa>
 800497e:	3145      	adds	r1, #69	; 0x45
 8004980:	700a      	strb	r2, [r1, #0]
 8004982:	4a52      	ldr	r2, [pc, #328]	; (8004acc <_printf_i+0x21c>)
 8004984:	9203      	str	r2, [sp, #12]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	6821      	ldr	r1, [r4, #0]
 800498a:	ca20      	ldmia	r2!, {r5}
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	0608      	lsls	r0, r1, #24
 8004990:	d550      	bpl.n	8004a34 <_printf_i+0x184>
 8004992:	07cb      	lsls	r3, r1, #31
 8004994:	d502      	bpl.n	800499c <_printf_i+0xec>
 8004996:	2320      	movs	r3, #32
 8004998:	4319      	orrs	r1, r3
 800499a:	6021      	str	r1, [r4, #0]
 800499c:	2710      	movs	r7, #16
 800499e:	2d00      	cmp	r5, #0
 80049a0:	d103      	bne.n	80049aa <_printf_i+0xfa>
 80049a2:	2320      	movs	r3, #32
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	439a      	bics	r2, r3
 80049a8:	6022      	str	r2, [r4, #0]
 80049aa:	0023      	movs	r3, r4
 80049ac:	2200      	movs	r2, #0
 80049ae:	3343      	adds	r3, #67	; 0x43
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	6863      	ldr	r3, [r4, #4]
 80049b4:	60a3      	str	r3, [r4, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	db03      	blt.n	80049c2 <_printf_i+0x112>
 80049ba:	2204      	movs	r2, #4
 80049bc:	6821      	ldr	r1, [r4, #0]
 80049be:	4391      	bics	r1, r2
 80049c0:	6021      	str	r1, [r4, #0]
 80049c2:	2d00      	cmp	r5, #0
 80049c4:	d102      	bne.n	80049cc <_printf_i+0x11c>
 80049c6:	9e04      	ldr	r6, [sp, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <_printf_i+0x136>
 80049cc:	9e04      	ldr	r6, [sp, #16]
 80049ce:	0028      	movs	r0, r5
 80049d0:	0039      	movs	r1, r7
 80049d2:	f7fb fc2f 	bl	8000234 <__aeabi_uidivmod>
 80049d6:	9b03      	ldr	r3, [sp, #12]
 80049d8:	3e01      	subs	r6, #1
 80049da:	5c5b      	ldrb	r3, [r3, r1]
 80049dc:	7033      	strb	r3, [r6, #0]
 80049de:	002b      	movs	r3, r5
 80049e0:	0005      	movs	r5, r0
 80049e2:	429f      	cmp	r7, r3
 80049e4:	d9f3      	bls.n	80049ce <_printf_i+0x11e>
 80049e6:	2f08      	cmp	r7, #8
 80049e8:	d109      	bne.n	80049fe <_printf_i+0x14e>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	07db      	lsls	r3, r3, #31
 80049ee:	d506      	bpl.n	80049fe <_printf_i+0x14e>
 80049f0:	6863      	ldr	r3, [r4, #4]
 80049f2:	6922      	ldr	r2, [r4, #16]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	dc02      	bgt.n	80049fe <_printf_i+0x14e>
 80049f8:	2330      	movs	r3, #48	; 0x30
 80049fa:	3e01      	subs	r6, #1
 80049fc:	7033      	strb	r3, [r6, #0]
 80049fe:	9b04      	ldr	r3, [sp, #16]
 8004a00:	1b9b      	subs	r3, r3, r6
 8004a02:	6123      	str	r3, [r4, #16]
 8004a04:	9b07      	ldr	r3, [sp, #28]
 8004a06:	0021      	movs	r1, r4
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	9805      	ldr	r0, [sp, #20]
 8004a0c:	9b06      	ldr	r3, [sp, #24]
 8004a0e:	aa09      	add	r2, sp, #36	; 0x24
 8004a10:	f7ff fede 	bl	80047d0 <_printf_common>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d135      	bne.n	8004a84 <_printf_i+0x1d4>
 8004a18:	2001      	movs	r0, #1
 8004a1a:	4240      	negs	r0, r0
 8004a1c:	b00b      	add	sp, #44	; 0x2c
 8004a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a20:	2220      	movs	r2, #32
 8004a22:	6809      	ldr	r1, [r1, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	6022      	str	r2, [r4, #0]
 8004a28:	0022      	movs	r2, r4
 8004a2a:	2178      	movs	r1, #120	; 0x78
 8004a2c:	3245      	adds	r2, #69	; 0x45
 8004a2e:	7011      	strb	r1, [r2, #0]
 8004a30:	4a27      	ldr	r2, [pc, #156]	; (8004ad0 <_printf_i+0x220>)
 8004a32:	e7a7      	b.n	8004984 <_printf_i+0xd4>
 8004a34:	0648      	lsls	r0, r1, #25
 8004a36:	d5ac      	bpl.n	8004992 <_printf_i+0xe2>
 8004a38:	b2ad      	uxth	r5, r5
 8004a3a:	e7aa      	b.n	8004992 <_printf_i+0xe2>
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	680d      	ldr	r5, [r1, #0]
 8004a40:	1d10      	adds	r0, r2, #4
 8004a42:	6949      	ldr	r1, [r1, #20]
 8004a44:	6018      	str	r0, [r3, #0]
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	062e      	lsls	r6, r5, #24
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0x1a0>
 8004a4c:	6019      	str	r1, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <_printf_i+0x1a6>
 8004a50:	066d      	lsls	r5, r5, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0x19c>
 8004a54:	8019      	strh	r1, [r3, #0]
 8004a56:	2300      	movs	r3, #0
 8004a58:	9e04      	ldr	r6, [sp, #16]
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	e7d2      	b.n	8004a04 <_printf_i+0x154>
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	1d11      	adds	r1, r2, #4
 8004a62:	6019      	str	r1, [r3, #0]
 8004a64:	6816      	ldr	r6, [r2, #0]
 8004a66:	2100      	movs	r1, #0
 8004a68:	0030      	movs	r0, r6
 8004a6a:	6862      	ldr	r2, [r4, #4]
 8004a6c:	f000 f832 	bl	8004ad4 <memchr>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d001      	beq.n	8004a78 <_printf_i+0x1c8>
 8004a74:	1b80      	subs	r0, r0, r6
 8004a76:	6060      	str	r0, [r4, #4]
 8004a78:	6863      	ldr	r3, [r4, #4]
 8004a7a:	6123      	str	r3, [r4, #16]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	9a04      	ldr	r2, [sp, #16]
 8004a80:	7013      	strb	r3, [r2, #0]
 8004a82:	e7bf      	b.n	8004a04 <_printf_i+0x154>
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	0032      	movs	r2, r6
 8004a88:	9906      	ldr	r1, [sp, #24]
 8004a8a:	9805      	ldr	r0, [sp, #20]
 8004a8c:	9d07      	ldr	r5, [sp, #28]
 8004a8e:	47a8      	blx	r5
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d0c1      	beq.n	8004a18 <_printf_i+0x168>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	079b      	lsls	r3, r3, #30
 8004a98:	d415      	bmi.n	8004ac6 <_printf_i+0x216>
 8004a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a9c:	68e0      	ldr	r0, [r4, #12]
 8004a9e:	4298      	cmp	r0, r3
 8004aa0:	dabc      	bge.n	8004a1c <_printf_i+0x16c>
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	e7ba      	b.n	8004a1c <_printf_i+0x16c>
 8004aa6:	0022      	movs	r2, r4
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	9906      	ldr	r1, [sp, #24]
 8004aac:	9805      	ldr	r0, [sp, #20]
 8004aae:	9e07      	ldr	r6, [sp, #28]
 8004ab0:	3219      	adds	r2, #25
 8004ab2:	47b0      	blx	r6
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d0af      	beq.n	8004a18 <_printf_i+0x168>
 8004ab8:	3501      	adds	r5, #1
 8004aba:	68e3      	ldr	r3, [r4, #12]
 8004abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	42ab      	cmp	r3, r5
 8004ac2:	dcf0      	bgt.n	8004aa6 <_printf_i+0x1f6>
 8004ac4:	e7e9      	b.n	8004a9a <_printf_i+0x1ea>
 8004ac6:	2500      	movs	r5, #0
 8004ac8:	e7f7      	b.n	8004aba <_printf_i+0x20a>
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	08004de1 	.word	0x08004de1
 8004ad0:	08004df2 	.word	0x08004df2

08004ad4 <memchr>:
 8004ad4:	b2c9      	uxtb	r1, r1
 8004ad6:	1882      	adds	r2, r0, r2
 8004ad8:	4290      	cmp	r0, r2
 8004ada:	d101      	bne.n	8004ae0 <memchr+0xc>
 8004adc:	2000      	movs	r0, #0
 8004ade:	4770      	bx	lr
 8004ae0:	7803      	ldrb	r3, [r0, #0]
 8004ae2:	428b      	cmp	r3, r1
 8004ae4:	d0fb      	beq.n	8004ade <memchr+0xa>
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	e7f6      	b.n	8004ad8 <memchr+0x4>

08004aea <memcpy>:
 8004aea:	2300      	movs	r3, #0
 8004aec:	b510      	push	{r4, lr}
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d100      	bne.n	8004af4 <memcpy+0xa>
 8004af2:	bd10      	pop	{r4, pc}
 8004af4:	5ccc      	ldrb	r4, [r1, r3]
 8004af6:	54c4      	strb	r4, [r0, r3]
 8004af8:	3301      	adds	r3, #1
 8004afa:	e7f8      	b.n	8004aee <memcpy+0x4>

08004afc <memmove>:
 8004afc:	b510      	push	{r4, lr}
 8004afe:	4288      	cmp	r0, r1
 8004b00:	d902      	bls.n	8004b08 <memmove+0xc>
 8004b02:	188b      	adds	r3, r1, r2
 8004b04:	4298      	cmp	r0, r3
 8004b06:	d303      	bcc.n	8004b10 <memmove+0x14>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e007      	b.n	8004b1c <memmove+0x20>
 8004b0c:	5c8b      	ldrb	r3, [r1, r2]
 8004b0e:	5483      	strb	r3, [r0, r2]
 8004b10:	3a01      	subs	r2, #1
 8004b12:	d2fb      	bcs.n	8004b0c <memmove+0x10>
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	5ccc      	ldrb	r4, [r1, r3]
 8004b18:	54c4      	strb	r4, [r0, r3]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1fa      	bne.n	8004b16 <memmove+0x1a>
 8004b20:	e7f8      	b.n	8004b14 <memmove+0x18>
	...

08004b24 <_free_r>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	0005      	movs	r5, r0
 8004b28:	2900      	cmp	r1, #0
 8004b2a:	d010      	beq.n	8004b4e <_free_r+0x2a>
 8004b2c:	1f0c      	subs	r4, r1, #4
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	da00      	bge.n	8004b36 <_free_r+0x12>
 8004b34:	18e4      	adds	r4, r4, r3
 8004b36:	0028      	movs	r0, r5
 8004b38:	f000 f8d4 	bl	8004ce4 <__malloc_lock>
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <_free_r+0x90>)
 8004b3e:	6813      	ldr	r3, [r2, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <_free_r+0x2c>
 8004b44:	6063      	str	r3, [r4, #4]
 8004b46:	6014      	str	r4, [r2, #0]
 8004b48:	0028      	movs	r0, r5
 8004b4a:	f000 f8d3 	bl	8004cf4 <__malloc_unlock>
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d908      	bls.n	8004b66 <_free_r+0x42>
 8004b54:	6821      	ldr	r1, [r4, #0]
 8004b56:	1860      	adds	r0, r4, r1
 8004b58:	4283      	cmp	r3, r0
 8004b5a:	d1f3      	bne.n	8004b44 <_free_r+0x20>
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	1841      	adds	r1, r0, r1
 8004b62:	6021      	str	r1, [r4, #0]
 8004b64:	e7ee      	b.n	8004b44 <_free_r+0x20>
 8004b66:	001a      	movs	r2, r3
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <_free_r+0x4e>
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	d9f9      	bls.n	8004b66 <_free_r+0x42>
 8004b72:	6811      	ldr	r1, [r2, #0]
 8004b74:	1850      	adds	r0, r2, r1
 8004b76:	42a0      	cmp	r0, r4
 8004b78:	d10b      	bne.n	8004b92 <_free_r+0x6e>
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	1809      	adds	r1, r1, r0
 8004b7e:	1850      	adds	r0, r2, r1
 8004b80:	6011      	str	r1, [r2, #0]
 8004b82:	4283      	cmp	r3, r0
 8004b84:	d1e0      	bne.n	8004b48 <_free_r+0x24>
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	1841      	adds	r1, r0, r1
 8004b8c:	6011      	str	r1, [r2, #0]
 8004b8e:	6053      	str	r3, [r2, #4]
 8004b90:	e7da      	b.n	8004b48 <_free_r+0x24>
 8004b92:	42a0      	cmp	r0, r4
 8004b94:	d902      	bls.n	8004b9c <_free_r+0x78>
 8004b96:	230c      	movs	r3, #12
 8004b98:	602b      	str	r3, [r5, #0]
 8004b9a:	e7d5      	b.n	8004b48 <_free_r+0x24>
 8004b9c:	6821      	ldr	r1, [r4, #0]
 8004b9e:	1860      	adds	r0, r4, r1
 8004ba0:	4283      	cmp	r3, r0
 8004ba2:	d103      	bne.n	8004bac <_free_r+0x88>
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	1841      	adds	r1, r0, r1
 8004baa:	6021      	str	r1, [r4, #0]
 8004bac:	6063      	str	r3, [r4, #4]
 8004bae:	6054      	str	r4, [r2, #4]
 8004bb0:	e7ca      	b.n	8004b48 <_free_r+0x24>
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	200000ac 	.word	0x200000ac

08004bb8 <_malloc_r>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	2303      	movs	r3, #3
 8004bbc:	1ccd      	adds	r5, r1, #3
 8004bbe:	439d      	bics	r5, r3
 8004bc0:	3508      	adds	r5, #8
 8004bc2:	0006      	movs	r6, r0
 8004bc4:	2d0c      	cmp	r5, #12
 8004bc6:	d21f      	bcs.n	8004c08 <_malloc_r+0x50>
 8004bc8:	250c      	movs	r5, #12
 8004bca:	42a9      	cmp	r1, r5
 8004bcc:	d81e      	bhi.n	8004c0c <_malloc_r+0x54>
 8004bce:	0030      	movs	r0, r6
 8004bd0:	f000 f888 	bl	8004ce4 <__malloc_lock>
 8004bd4:	4925      	ldr	r1, [pc, #148]	; (8004c6c <_malloc_r+0xb4>)
 8004bd6:	680a      	ldr	r2, [r1, #0]
 8004bd8:	0014      	movs	r4, r2
 8004bda:	2c00      	cmp	r4, #0
 8004bdc:	d11a      	bne.n	8004c14 <_malloc_r+0x5c>
 8004bde:	4f24      	ldr	r7, [pc, #144]	; (8004c70 <_malloc_r+0xb8>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <_malloc_r+0x38>
 8004be6:	0021      	movs	r1, r4
 8004be8:	0030      	movs	r0, r6
 8004bea:	f000 f869 	bl	8004cc0 <_sbrk_r>
 8004bee:	6038      	str	r0, [r7, #0]
 8004bf0:	0029      	movs	r1, r5
 8004bf2:	0030      	movs	r0, r6
 8004bf4:	f000 f864 	bl	8004cc0 <_sbrk_r>
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d12b      	bne.n	8004c54 <_malloc_r+0x9c>
 8004bfc:	230c      	movs	r3, #12
 8004bfe:	0030      	movs	r0, r6
 8004c00:	6033      	str	r3, [r6, #0]
 8004c02:	f000 f877 	bl	8004cf4 <__malloc_unlock>
 8004c06:	e003      	b.n	8004c10 <_malloc_r+0x58>
 8004c08:	2d00      	cmp	r5, #0
 8004c0a:	dade      	bge.n	8004bca <_malloc_r+0x12>
 8004c0c:	230c      	movs	r3, #12
 8004c0e:	6033      	str	r3, [r6, #0]
 8004c10:	2000      	movs	r0, #0
 8004c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	1b5b      	subs	r3, r3, r5
 8004c18:	d419      	bmi.n	8004c4e <_malloc_r+0x96>
 8004c1a:	2b0b      	cmp	r3, #11
 8004c1c:	d903      	bls.n	8004c26 <_malloc_r+0x6e>
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	18e4      	adds	r4, r4, r3
 8004c22:	6025      	str	r5, [r4, #0]
 8004c24:	e003      	b.n	8004c2e <_malloc_r+0x76>
 8004c26:	6863      	ldr	r3, [r4, #4]
 8004c28:	42a2      	cmp	r2, r4
 8004c2a:	d10e      	bne.n	8004c4a <_malloc_r+0x92>
 8004c2c:	600b      	str	r3, [r1, #0]
 8004c2e:	0030      	movs	r0, r6
 8004c30:	f000 f860 	bl	8004cf4 <__malloc_unlock>
 8004c34:	0020      	movs	r0, r4
 8004c36:	2207      	movs	r2, #7
 8004c38:	300b      	adds	r0, #11
 8004c3a:	1d23      	adds	r3, r4, #4
 8004c3c:	4390      	bics	r0, r2
 8004c3e:	1ac2      	subs	r2, r0, r3
 8004c40:	4298      	cmp	r0, r3
 8004c42:	d0e6      	beq.n	8004c12 <_malloc_r+0x5a>
 8004c44:	1a1b      	subs	r3, r3, r0
 8004c46:	50a3      	str	r3, [r4, r2]
 8004c48:	e7e3      	b.n	8004c12 <_malloc_r+0x5a>
 8004c4a:	6053      	str	r3, [r2, #4]
 8004c4c:	e7ef      	b.n	8004c2e <_malloc_r+0x76>
 8004c4e:	0022      	movs	r2, r4
 8004c50:	6864      	ldr	r4, [r4, #4]
 8004c52:	e7c2      	b.n	8004bda <_malloc_r+0x22>
 8004c54:	2303      	movs	r3, #3
 8004c56:	1cc4      	adds	r4, r0, #3
 8004c58:	439c      	bics	r4, r3
 8004c5a:	42a0      	cmp	r0, r4
 8004c5c:	d0e1      	beq.n	8004c22 <_malloc_r+0x6a>
 8004c5e:	1a21      	subs	r1, r4, r0
 8004c60:	0030      	movs	r0, r6
 8004c62:	f000 f82d 	bl	8004cc0 <_sbrk_r>
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	d1db      	bne.n	8004c22 <_malloc_r+0x6a>
 8004c6a:	e7c7      	b.n	8004bfc <_malloc_r+0x44>
 8004c6c:	200000ac 	.word	0x200000ac
 8004c70:	200000b0 	.word	0x200000b0

08004c74 <_realloc_r>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	0007      	movs	r7, r0
 8004c78:	000d      	movs	r5, r1
 8004c7a:	0016      	movs	r6, r2
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	d105      	bne.n	8004c8c <_realloc_r+0x18>
 8004c80:	0011      	movs	r1, r2
 8004c82:	f7ff ff99 	bl	8004bb8 <_malloc_r>
 8004c86:	0004      	movs	r4, r0
 8004c88:	0020      	movs	r0, r4
 8004c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	d103      	bne.n	8004c98 <_realloc_r+0x24>
 8004c90:	f7ff ff48 	bl	8004b24 <_free_r>
 8004c94:	0034      	movs	r4, r6
 8004c96:	e7f7      	b.n	8004c88 <_realloc_r+0x14>
 8004c98:	f000 f834 	bl	8004d04 <_malloc_usable_size_r>
 8004c9c:	002c      	movs	r4, r5
 8004c9e:	42b0      	cmp	r0, r6
 8004ca0:	d2f2      	bcs.n	8004c88 <_realloc_r+0x14>
 8004ca2:	0031      	movs	r1, r6
 8004ca4:	0038      	movs	r0, r7
 8004ca6:	f7ff ff87 	bl	8004bb8 <_malloc_r>
 8004caa:	1e04      	subs	r4, r0, #0
 8004cac:	d0ec      	beq.n	8004c88 <_realloc_r+0x14>
 8004cae:	0029      	movs	r1, r5
 8004cb0:	0032      	movs	r2, r6
 8004cb2:	f7ff ff1a 	bl	8004aea <memcpy>
 8004cb6:	0029      	movs	r1, r5
 8004cb8:	0038      	movs	r0, r7
 8004cba:	f7ff ff33 	bl	8004b24 <_free_r>
 8004cbe:	e7e3      	b.n	8004c88 <_realloc_r+0x14>

08004cc0 <_sbrk_r>:
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	b570      	push	{r4, r5, r6, lr}
 8004cc4:	4d06      	ldr	r5, [pc, #24]	; (8004ce0 <_sbrk_r+0x20>)
 8004cc6:	0004      	movs	r4, r0
 8004cc8:	0008      	movs	r0, r1
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fc f87e 	bl	8000dcc <_sbrk>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d103      	bne.n	8004cdc <_sbrk_r+0x1c>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d000      	beq.n	8004cdc <_sbrk_r+0x1c>
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	bd70      	pop	{r4, r5, r6, pc}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	20000350 	.word	0x20000350

08004ce4 <__malloc_lock>:
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4802      	ldr	r0, [pc, #8]	; (8004cf0 <__malloc_lock+0xc>)
 8004ce8:	f000 f814 	bl	8004d14 <__retarget_lock_acquire_recursive>
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	20000358 	.word	0x20000358

08004cf4 <__malloc_unlock>:
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	4802      	ldr	r0, [pc, #8]	; (8004d00 <__malloc_unlock+0xc>)
 8004cf8:	f000 f80d 	bl	8004d16 <__retarget_lock_release_recursive>
 8004cfc:	bd10      	pop	{r4, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	20000358 	.word	0x20000358

08004d04 <_malloc_usable_size_r>:
 8004d04:	1f0b      	subs	r3, r1, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	1f18      	subs	r0, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da01      	bge.n	8004d12 <_malloc_usable_size_r+0xe>
 8004d0e:	580b      	ldr	r3, [r1, r0]
 8004d10:	18c0      	adds	r0, r0, r3
 8004d12:	4770      	bx	lr

08004d14 <__retarget_lock_acquire_recursive>:
 8004d14:	4770      	bx	lr

08004d16 <__retarget_lock_release_recursive>:
 8004d16:	4770      	bx	lr

08004d18 <_init>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1e:	bc08      	pop	{r3}
 8004d20:	469e      	mov	lr, r3
 8004d22:	4770      	bx	lr

08004d24 <_fini>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr
