
ADC_with_DMA_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004200  08004200  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004208  08004208  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000000c  0800421c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  0800421c  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144c6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fd  00000000  00000000  000344fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  000369f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00037a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f7b  00000000  00000000  000389d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013034  00000000  00000000  0005294b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab151  00000000  00000000  0006597f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00110ad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bec  00000000  00000000  00110b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004098 	.word	0x08004098

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004098 	.word	0x08004098

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	1c08      	adds	r0, r1, #0
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	469b      	mov	fp, r3
 8000476:	d433      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000478:	465a      	mov	r2, fp
 800047a:	4653      	mov	r3, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83a      	bhi.n	8000502 <__udivmoddi4+0xc2>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e078      	b.n	8000584 <__udivmoddi4+0x144>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e075      	b.n	800058a <__udivmoddi4+0x14a>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e028      	b.n	800050a <__udivmoddi4+0xca>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	2320      	movs	r3, #32
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4652      	mov	r2, sl
 80004e8:	40da      	lsrs	r2, r3
 80004ea:	4641      	mov	r1, r8
 80004ec:	0013      	movs	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	408a      	lsls	r2, r1
 80004f2:	0017      	movs	r7, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	431f      	orrs	r7, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	4093      	lsls	r3, r2
 80004fc:	001e      	movs	r6, r3
 80004fe:	42af      	cmp	r7, r5
 8000500:	d9c4      	bls.n	800048c <__udivmoddi4+0x4c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0d9      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000510:	07fb      	lsls	r3, r7, #31
 8000512:	0872      	lsrs	r2, r6, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4646      	mov	r6, r8
 8000518:	087b      	lsrs	r3, r7, #1
 800051a:	e00e      	b.n	800053a <__udivmoddi4+0xfa>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d101      	bne.n	8000524 <__udivmoddi4+0xe4>
 8000520:	42a2      	cmp	r2, r4
 8000522:	d80c      	bhi.n	800053e <__udivmoddi4+0xfe>
 8000524:	1aa4      	subs	r4, r4, r2
 8000526:	419d      	sbcs	r5, r3
 8000528:	2001      	movs	r0, #1
 800052a:	1924      	adds	r4, r4, r4
 800052c:	416d      	adcs	r5, r5
 800052e:	2100      	movs	r1, #0
 8000530:	3e01      	subs	r6, #1
 8000532:	1824      	adds	r4, r4, r0
 8000534:	414d      	adcs	r5, r1
 8000536:	2e00      	cmp	r6, #0
 8000538:	d006      	beq.n	8000548 <__udivmoddi4+0x108>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d9ee      	bls.n	800051c <__udivmoddi4+0xdc>
 800053e:	3e01      	subs	r6, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1f8      	bne.n	800053a <__udivmoddi4+0xfa>
 8000548:	9800      	ldr	r0, [sp, #0]
 800054a:	9901      	ldr	r1, [sp, #4]
 800054c:	465b      	mov	r3, fp
 800054e:	1900      	adds	r0, r0, r4
 8000550:	4169      	adcs	r1, r5
 8000552:	2b00      	cmp	r3, #0
 8000554:	db24      	blt.n	80005a0 <__udivmoddi4+0x160>
 8000556:	002b      	movs	r3, r5
 8000558:	465a      	mov	r2, fp
 800055a:	4644      	mov	r4, r8
 800055c:	40d3      	lsrs	r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	40e2      	lsrs	r2, r4
 8000562:	001c      	movs	r4, r3
 8000564:	465b      	mov	r3, fp
 8000566:	0015      	movs	r5, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	db2a      	blt.n	80005c2 <__udivmoddi4+0x182>
 800056c:	0026      	movs	r6, r4
 800056e:	409e      	lsls	r6, r3
 8000570:	0033      	movs	r3, r6
 8000572:	0026      	movs	r6, r4
 8000574:	4647      	mov	r7, r8
 8000576:	40be      	lsls	r6, r7
 8000578:	0032      	movs	r2, r6
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	4199      	sbcs	r1, r3
 800057e:	9000      	str	r0, [sp, #0]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	e79f      	b.n	80004c4 <__udivmoddi4+0x84>
 8000584:	42a3      	cmp	r3, r4
 8000586:	d8bc      	bhi.n	8000502 <__udivmoddi4+0xc2>
 8000588:	e783      	b.n	8000492 <__udivmoddi4+0x52>
 800058a:	4642      	mov	r2, r8
 800058c:	2320      	movs	r3, #32
 800058e:	2100      	movs	r1, #0
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	40da      	lsrs	r2, r3
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	e786      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	4646      	mov	r6, r8
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0023      	movs	r3, r4
 80005ae:	40f3      	lsrs	r3, r6
 80005b0:	4644      	mov	r4, r8
 80005b2:	4313      	orrs	r3, r2
 80005b4:	002a      	movs	r2, r5
 80005b6:	40e2      	lsrs	r2, r4
 80005b8:	001c      	movs	r4, r3
 80005ba:	465b      	mov	r3, fp
 80005bc:	0015      	movs	r5, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dad4      	bge.n	800056c <__udivmoddi4+0x12c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	002f      	movs	r7, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	0026      	movs	r6, r4
 80005ca:	4097      	lsls	r7, r2
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	40de      	lsrs	r6, r3
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7cd      	b.n	8000572 <__udivmoddi4+0x132>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	1c08      	adds	r0, r1, #0
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	b091      	sub	sp, #68	; 0x44
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t raw;
	char msg[10];
	char mayuri[] = "DMA is working properly , you can move now\r\n";
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4a2e      	ldr	r2, [pc, #184]	; (80006f0 <main+0xc4>)
 8000636:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000638:	c313      	stmia	r3!, {r0, r1, r4}
 800063a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800063c:	c313      	stmia	r3!, {r0, r1, r4}
 800063e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000640:	c313      	stmia	r3!, {r0, r1, r4}
 8000642:	ca03      	ldmia	r2!, {r0, r1}
 8000644:	c303      	stmia	r3!, {r0, r1}
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fbed 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f85b 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f9d9 	bl	8000a08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000656:	f000 f8bb 	bl	80007d0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800065a:	f000 f961 	bl	8000920 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800065e:	f000 f9ad 	bl	80009bc <MX_DMA_Init>
  MX_TIM6_Init();
 8000662:	f000 f91f 	bl	80008a4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_adc1, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 8000666:	4a23      	ldr	r2, [pc, #140]	; (80006f4 <main+0xc8>)
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <main+0xcc>)
 800066a:	2100      	movs	r1, #0
 800066c:	0018      	movs	r0, r3
 800066e:	f001 fbb9 	bl	8001de4 <HAL_DMA_RegisterCallback>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  huart2.Instance->CR3 |= USART_CR3_DMAT;
 8000672:	4b22      	ldr	r3, [pc, #136]	; (80006fc <main+0xd0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <main+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	430a      	orrs	r2, r1
 8000680:	609a      	str	r2, [r3, #8]

	  HAL_DMA_Start_IT(&hdma_adc1, (uint32_t)msg,
 8000682:	2234      	movs	r2, #52	; 0x34
 8000684:	18bc      	adds	r4, r7, r2
	  			  (uint32_t)&huart2.Instance->TDR, strlen(msg));
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <main+0xd0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3328      	adds	r3, #40	; 0x28
	  HAL_DMA_Start_IT(&hdma_adc1, (uint32_t)msg,
 800068c:	001d      	movs	r5, r3
	  			  (uint32_t)&huart2.Instance->TDR, strlen(msg));
 800068e:	0016      	movs	r6, r2
 8000690:	18bb      	adds	r3, r7, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff fd36 	bl	8000104 <strlen>
 8000698:	0003      	movs	r3, r0
	  HAL_DMA_Start_IT(&hdma_adc1, (uint32_t)msg,
 800069a:	4817      	ldr	r0, [pc, #92]	; (80006f8 <main+0xcc>)
 800069c:	002a      	movs	r2, r5
 800069e:	0021      	movs	r1, r4
 80006a0:	f001 fa68 	bl	8001b74 <HAL_DMA_Start_IT>

	  if(HAL_DMA_Start_IT(&hdma_adc1, (uint32_t)msg,
 80006a4:	0032      	movs	r2, r6
 80006a6:	18bc      	adds	r4, r7, r2
			  (uint32_t)&huart2.Instance->TDR, strlen(msg)) != HAL_OK){
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <main+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3328      	adds	r3, #40	; 0x28
	  if(HAL_DMA_Start_IT(&hdma_adc1, (uint32_t)msg,
 80006ae:	001d      	movs	r5, r3
			  (uint32_t)&huart2.Instance->TDR, strlen(msg)) != HAL_OK){
 80006b0:	18bb      	adds	r3, r7, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f7ff fd26 	bl	8000104 <strlen>
 80006b8:	0003      	movs	r3, r0
	  if(HAL_DMA_Start_IT(&hdma_adc1, (uint32_t)msg,
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <main+0xcc>)
 80006bc:	002a      	movs	r2, r5
 80006be:	0021      	movs	r1, r4
 80006c0:	f001 fa58 	bl	8001b74 <HAL_DMA_Start_IT>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d006      	beq.n	80006d6 <main+0xaa>
		  /* ADC conversion start error */
		      HAL_UART_Transmit(&huart2, "Error in DMA generation\r\n", sizeof("Error in DMA generation\r\n"), HAL_MAX_DELAY);
 80006c8:	2301      	movs	r3, #1
 80006ca:	425b      	negs	r3, r3
 80006cc:	490c      	ldr	r1, [pc, #48]	; (8000700 <main+0xd4>)
 80006ce:	480b      	ldr	r0, [pc, #44]	; (80006fc <main+0xd0>)
 80006d0:	221a      	movs	r2, #26
 80006d2:	f002 fe4d 	bl	8003370 <HAL_UART_Transmit>
	  }

	  HAL_UART_Transmit(&huart2, "Code is runing\r\n", sizeof("Code is runing\r\n"), HAL_MAX_DELAY);
 80006d6:	2301      	movs	r3, #1
 80006d8:	425b      	negs	r3, r3
 80006da:	490a      	ldr	r1, [pc, #40]	; (8000704 <main+0xd8>)
 80006dc:	4807      	ldr	r0, [pc, #28]	; (80006fc <main+0xd0>)
 80006de:	2211      	movs	r2, #17
 80006e0:	f002 fe46 	bl	8003370 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80006e4:	23fa      	movs	r3, #250	; 0xfa
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fc23 	bl	8000f34 <HAL_Delay>
	  huart2.Instance->CR3 |= USART_CR3_DMAT;
 80006ee:	e7c0      	b.n	8000672 <main+0x46>
 80006f0:	080040e0 	.word	0x080040e0
 80006f4:	08000aa9 	.word	0x08000aa9
 80006f8:	200000e8 	.word	0x200000e8
 80006fc:	20000190 	.word	0x20000190
 8000700:	080040b0 	.word	0x080040b0
 8000704:	080040cc 	.word	0x080040cc

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b0a1      	sub	sp, #132	; 0x84
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	2448      	movs	r4, #72	; 0x48
 8000710:	193b      	adds	r3, r7, r4
 8000712:	0018      	movs	r0, r3
 8000714:	2338      	movs	r3, #56	; 0x38
 8000716:	001a      	movs	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f003 fcb5 	bl	8004088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071e:	2338      	movs	r3, #56	; 0x38
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	0018      	movs	r0, r3
 8000724:	2310      	movs	r3, #16
 8000726:	001a      	movs	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f003 fcad 	bl	8004088 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	0018      	movs	r0, r3
 8000732:	2334      	movs	r3, #52	; 0x34
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f003 fca6 	bl	8004088 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fdb1 	bl	80022a8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2202      	movs	r2, #2
 800074a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	0052      	lsls	r2, r2, #1
 8000752:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2240      	movs	r2, #64	; 0x40
 800075e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	193b      	adds	r3, r7, r4
 8000768:	0018      	movs	r0, r3
 800076a:	f001 fde9 	bl	8002340 <HAL_RCC_OscConfig>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000772:	f000 f9ad 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	2138      	movs	r1, #56	; 0x38
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2207      	movs	r2, #7
 800077c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2100      	movs	r1, #0
 8000794:	0018      	movs	r0, r3
 8000796:	f002 f8ed 	bl	8002974 <HAL_RCC_ClockConfig>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800079e:	f000 f997 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <SystemClock_Config+0xc4>)
 80007a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	0018      	movs	r0, r3
 80007b8:	f002 fa86 	bl	8002cc8 <HAL_RCCEx_PeriphCLKConfig>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007c0:	f000 f986 	bl	8000ad0 <Error_Handler>
  }
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b021      	add	sp, #132	; 0x84
 80007ca:	bd90      	pop	{r4, r7, pc}
 80007cc:	00004002 	.word	0x00004002

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	0018      	movs	r0, r3
 80007da:	230c      	movs	r3, #12
 80007dc:	001a      	movs	r2, r3
 80007de:	2100      	movs	r1, #0
 80007e0:	f003 fc52 	bl	8004088 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007e4:	4b2d      	ldr	r3, [pc, #180]	; (800089c <MX_ADC1_Init+0xcc>)
 80007e6:	4a2e      	ldr	r2, [pc, #184]	; (80008a0 <MX_ADC1_Init+0xd0>)
 80007e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <MX_ADC1_Init+0xcc>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	05d2      	lsls	r2, r2, #23
 80007f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007f2:	4b2a      	ldr	r3, [pc, #168]	; (800089c <MX_ADC1_Init+0xcc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <MX_ADC1_Init+0xcc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <MX_ADC1_Init+0xcc>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <MX_ADC1_Init+0xcc>)
 8000806:	2204      	movs	r2, #4
 8000808:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <MX_ADC1_Init+0xcc>)
 800080c:	2200      	movs	r2, #0
 800080e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_ADC1_Init+0xcc>)
 8000812:	2200      	movs	r2, #0
 8000814:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <MX_ADC1_Init+0xcc>)
 8000818:	2201      	movs	r2, #1
 800081a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_ADC1_Init+0xcc>)
 800081e:	2201      	movs	r2, #1
 8000820:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_ADC1_Init+0xcc>)
 8000824:	2220      	movs	r2, #32
 8000826:	2100      	movs	r1, #0
 8000828:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_ADC1_Init+0xcc>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_ADC1_Init+0xcc>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_ADC1_Init+0xcc>)
 8000838:	222c      	movs	r2, #44	; 0x2c
 800083a:	2100      	movs	r1, #0
 800083c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_ADC1_Init+0xcc>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_ADC1_Init+0xcc>)
 8000846:	2200      	movs	r2, #0
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_ADC1_Init+0xcc>)
 800084c:	2200      	movs	r2, #0
 800084e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_ADC1_Init+0xcc>)
 8000852:	223c      	movs	r2, #60	; 0x3c
 8000854:	2100      	movs	r1, #0
 8000856:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_ADC1_Init+0xcc>)
 800085a:	2200      	movs	r2, #0
 800085c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_ADC1_Init+0xcc>)
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fc9f 	bl	80011a4 <HAL_ADC_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800086a:	f000 f931 	bl	8000ad0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2201      	movs	r2, #1
 8000872:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000880:	1d3a      	adds	r2, r7, #4
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_ADC1_Init+0xcc>)
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fe34 	bl	80014f4 <HAL_ADC_ConfigChannel>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000890:	f000 f91e 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b004      	add	sp, #16
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000028 	.word	0x20000028
 80008a0:	40012400 	.word	0x40012400

080008a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	0018      	movs	r0, r3
 80008ae:	230c      	movs	r3, #12
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f003 fbe8 	bl	8004088 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_TIM6_Init+0x6c>)
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <MX_TIM6_Init+0x70>)
 80008bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_TIM6_Init+0x6c>)
 80008c0:	4a15      	ldr	r2, [pc, #84]	; (8000918 <MX_TIM6_Init+0x74>)
 80008c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_TIM6_Init+0x6c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_TIM6_Init+0x6c>)
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <MX_TIM6_Init+0x78>)
 80008ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_TIM6_Init+0x6c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_TIM6_Init+0x6c>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 fbad 	bl	8003038 <HAL_TIM_Base_Init>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80008e2:	f000 f8f5 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008f2:	1d3a      	adds	r2, r7, #4
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_TIM6_Init+0x6c>)
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f002 fc75 	bl	80031e8 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000902:	f000 f8e5 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b004      	add	sp, #16
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	20000144 	.word	0x20000144
 8000914:	40001000 	.word	0x40001000
 8000918:	00003e7f 	.word	0x00003e7f
 800091c:	0000ffff 	.word	0x0000ffff

08000920 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000926:	4a24      	ldr	r2, [pc, #144]	; (80009b8 <MX_USART2_UART_Init+0x98>)
 8000928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800092c:	22e1      	movs	r2, #225	; 0xe1
 800092e:	0252      	lsls	r2, r2, #9
 8000930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800096a:	0018      	movs	r0, r3
 800096c:	f002 fcaa 	bl	80032c4 <HAL_UART_Init>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 f8ac 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800097a:	2100      	movs	r1, #0
 800097c:	0018      	movs	r0, r3
 800097e:	f003 fa7f 	bl	8003e80 <HAL_UARTEx_SetTxFifoThreshold>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000986:	f000 f8a3 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800098c:	2100      	movs	r1, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f003 fab6 	bl	8003f00 <HAL_UARTEx_SetRxFifoThreshold>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 f89a 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f003 fa34 	bl	8003e0c <HAL_UARTEx_DisableFifoMode>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 f892 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	20000190 	.word	0x20000190
 80009b8:	40004400 	.word	0x40004400

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_DMA_Init+0x48>)
 80009c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_DMA_Init+0x48>)
 80009c8:	2101      	movs	r1, #1
 80009ca:	430a      	orrs	r2, r1
 80009cc:	639a      	str	r2, [r3, #56]	; 0x38
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_DMA_Init+0x48>)
 80009d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d2:	2201      	movs	r2, #1
 80009d4:	4013      	ands	r3, r2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2009      	movs	r0, #9
 80009e0:	f001 f80c 	bl	80019fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009e4:	2009      	movs	r0, #9
 80009e6:	f001 f81e 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	200a      	movs	r0, #10
 80009f0:	f001 f804 	bl	80019fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80009f4:	200a      	movs	r0, #10
 80009f6:	f001 f816 	bl	8001a26 <HAL_NVIC_EnableIRQ>

}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40021000 	.word	0x40021000

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	240c      	movs	r4, #12
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	0018      	movs	r0, r3
 8000a14:	2314      	movs	r3, #20
 8000a16:	001a      	movs	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f003 fb35 	bl	8004088 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_GPIO_Init+0x9c>)
 8000a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_GPIO_Init+0x9c>)
 8000a24:	2104      	movs	r1, #4
 8000a26:	430a      	orrs	r2, r1
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_GPIO_Init+0x9c>)
 8000a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2e:	2204      	movs	r2, #4
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_GPIO_Init+0x9c>)
 8000a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_GPIO_Init+0x9c>)
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_GPIO_Init+0x9c>)
 8000a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a46:	2220      	movs	r2, #32
 8000a48:	4013      	ands	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_GPIO_Init+0x9c>)
 8000a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_GPIO_Init+0x9c>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_GPIO_Init+0x9c>)
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a66:	23a0      	movs	r3, #160	; 0xa0
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2120      	movs	r1, #32
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f001 fbfc 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a74:	0021      	movs	r1, r4
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2220      	movs	r2, #32
 8000a7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2201      	movs	r2, #1
 8000a80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	187a      	adds	r2, r7, r1
 8000a90:	23a0      	movs	r3, #160	; 0xa0
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 fa84 	bl	8001fa4 <HAL_GPIO_Init>

}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b009      	add	sp, #36	; 0x24
 8000aa2:	bd90      	pop	{r4, r7, pc}
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <DMATransferComplete>:

/* USER CODE BEGIN 4 */
void DMATransferComplete(DMA_HandleTypeDef *hdma){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	//Disable UART DMA mode
	//huart2.Instance->CR3 &= ~USART_CR3_DMAT;
	//static int count;
	//count++;
	//HAL_UART_Transmit(&huart2, (uint8_t*)count, sizeof(count), 1000);
	HAL_UART_Transmit(&huart2, "Transfer completed\r\n", sizeof("Transfer completed\r\n"), HAL_MAX_DELAY);
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	425b      	negs	r3, r3
 8000ab4:	4904      	ldr	r1, [pc, #16]	; (8000ac8 <DMATransferComplete+0x20>)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <DMATransferComplete+0x24>)
 8000ab8:	2215      	movs	r2, #21
 8000aba:	f002 fc59 	bl	8003370 <HAL_UART_Transmit>
	//Toggle LD2

}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	08004110 	.word	0x08004110
 8000acc:	20000190 	.word	0x20000190

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	430a      	orrs	r2, r1
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	2201      	movs	r2, #1
 8000af4:	4013      	ands	r3, r2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_MspInit+0x4c>)
 8000afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0549      	lsls	r1, r1, #21
 8000b04:	430a      	orrs	r2, r1
 8000b06:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	055b      	lsls	r3, r3, #21
 8000b10:	4013      	ands	r3, r2
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000b16:	23c0      	movs	r3, #192	; 0xc0
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fa2e 	bl	8000f7c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	2414      	movs	r4, #20
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f003 faa2 	bl	8004088 <memset>
  if(hadc->Instance==ADC1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a2d      	ldr	r2, [pc, #180]	; (8000c00 <HAL_ADC_MspInit+0xd4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d154      	bne.n	8000bf8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b4e:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0349      	lsls	r1, r1, #13
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b5c:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	035b      	lsls	r3, r3, #13
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	430a      	orrs	r2, r1
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	193a      	adds	r2, r7, r4
 8000b96:	23a0      	movs	r3, #160	; 0xa0
 8000b98:	05db      	lsls	r3, r3, #23
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f001 fa01 	bl	8001fa4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <HAL_ADC_MspInit+0xe0>)
 8000ba6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000baa:	2205      	movs	r2, #5
 8000bac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	0092      	lsls	r2, r2, #2
 8000bc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 ff3e 	bl	8001a60 <HAL_DMA_Init>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000be8:	f7ff ff72 	bl	8000ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bf0:	651a      	str	r2, [r3, #80]	; 0x50
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b00b      	add	sp, #44	; 0x2c
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	40012400 	.word	0x40012400
 8000c04:	40021000 	.word	0x40021000
 8000c08:	200000e8 	.word	0x200000e8
 8000c0c:	40020008 	.word	0x40020008

08000c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <HAL_TIM_Base_MspInit+0x34>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10b      	bne.n	8000c3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_TIM_Base_MspInit+0x38>)
 8000c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_TIM_Base_MspInit+0x38>)
 8000c28:	2110      	movs	r1, #16
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_TIM_Base_MspInit+0x38>)
 8000c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c32:	2210      	movs	r2, #16
 8000c34:	4013      	ands	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	40001000 	.word	0x40001000
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b08b      	sub	sp, #44	; 0x2c
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	2414      	movs	r4, #20
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	0018      	movs	r0, r3
 8000c5a:	2314      	movs	r3, #20
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f003 fa12 	bl	8004088 <memset>
  if(huart->Instance==USART2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a31      	ldr	r2, [pc, #196]	; (8000d30 <HAL_UART_MspInit+0xe4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d15b      	bne.n	8000d26 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <HAL_UART_MspInit+0xe8>)
 8000c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c72:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <HAL_UART_MspInit+0xe8>)
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	0289      	lsls	r1, r1, #10
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <HAL_UART_MspInit+0xe8>)
 8000c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	029b      	lsls	r3, r3, #10
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <HAL_UART_MspInit+0xe8>)
 8000c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <HAL_UART_MspInit+0xe8>)
 8000c90:	2101      	movs	r1, #1
 8000c92:	430a      	orrs	r2, r1
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
 8000c96:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <HAL_UART_MspInit+0xe8>)
 8000c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ca2:	0021      	movs	r1, r4
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2202      	movs	r2, #2
 8000cae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	187a      	adds	r2, r7, r1
 8000cc4:	23a0      	movs	r3, #160	; 0xa0
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f001 f96a 	bl	8001fa4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000cd2:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <HAL_UART_MspInit+0xf0>)
 8000cd4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000cd8:	2235      	movs	r2, #53	; 0x35
 8000cda:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000cde:	2210      	movs	r2, #16
 8000ce0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	0092      	lsls	r2, r2, #2
 8000cf4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000d00:	2220      	movs	r2, #32
 8000d02:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f000 fea7 	bl	8001a60 <HAL_DMA_Init>
 8000d12:	1e03      	subs	r3, r0, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d16:	f7ff fedb 	bl	8000ad0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000d1e:	679a      	str	r2, [r3, #120]	; 0x78
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_UART_MspInit+0xec>)
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b00b      	add	sp, #44	; 0x2c
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40021000 	.word	0x40021000
 8000d38:	2000008c 	.word	0x2000008c
 8000d3c:	4002001c 	.word	0x4002001c

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f8ca 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	HAL_UART_Transmit(&huart2, "Hello from DMA1_Channel1_IRQHandler\r\n", sizeof("Hello from DMA1_Channel1_IRQHandler\r\n"), HAL_MAX_DELAY);
 8000d74:	2301      	movs	r3, #1
 8000d76:	425b      	negs	r3, r3
 8000d78:	4905      	ldr	r1, [pc, #20]	; (8000d90 <DMA1_Channel1_IRQHandler+0x20>)
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <DMA1_Channel1_IRQHandler+0x24>)
 8000d7c:	2226      	movs	r2, #38	; 0x26
 8000d7e:	f002 faf7 	bl	8003370 <HAL_UART_Transmit>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <DMA1_Channel1_IRQHandler+0x28>)
 8000d84:	0018      	movs	r0, r3
 8000d86:	f000 ff7b 	bl	8001c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	08004128 	.word	0x08004128
 8000d94:	20000190 	.word	0x20000190
 8000d98:	200000e8 	.word	0x200000e8

08000d9c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	HAL_UART_Transmit(&huart2, "Hello from DMA1_Channel2_IRQHandler\r\n", sizeof("Hello from DMA1_Channel2_IRQHandler\r\n"), HAL_MAX_DELAY);
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	4905      	ldr	r1, [pc, #20]	; (8000dbc <DMA1_Channel2_3_IRQHandler+0x20>)
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <DMA1_Channel2_3_IRQHandler+0x24>)
 8000da8:	2226      	movs	r2, #38	; 0x26
 8000daa:	f002 fae1 	bl	8003370 <HAL_UART_Transmit>
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <DMA1_Channel2_3_IRQHandler+0x28>)
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 ff65 	bl	8001c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	08004150 	.word	0x08004150
 8000dc0:	20000190 	.word	0x20000190
 8000dc4:	2000008c 	.word	0x2000008c

08000dc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd8:	f7ff fff6 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	; (8000e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <LoopForever+0xe>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	; (8000e20 <LoopForever+0x16>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e02:	f003 f91d 	bl	8004040 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e06:	f7ff fc11 	bl	800062c <main>

08000e0a <LoopForever>:

LoopForever:
  b LoopForever
 8000e0a:	e7fe      	b.n	8000e0a <LoopForever>
  ldr   r0, =_estack
 8000e0c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e18:	08004210 	.word	0x08004210
  ldr r2, =_sbss
 8000e1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e20:	20000224 	.word	0x20000224

08000e24 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC1_COMP_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_Init+0x3c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_Init+0x3c>)
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	0049      	lsls	r1, r1, #1
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f810 	bl	8000e68 <HAL_InitTick>
 8000e48:	1e03      	subs	r3, r0, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	e001      	b.n	8000e58 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fe42 	bl	8000adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	781b      	ldrb	r3, [r3, #0]
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e70:	230f      	movs	r3, #15
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <HAL_InitTick+0x88>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d02b      	beq.n	8000ed8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_InitTick+0x8c>)
 8000e82:	681c      	ldr	r4, [r3, #0]
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HAL_InitTick+0x88>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	0019      	movs	r1, r3
 8000e8a:	23fa      	movs	r3, #250	; 0xfa
 8000e8c:	0098      	lsls	r0, r3, #2
 8000e8e:	f7ff f941 	bl	8000114 <__udivsi3>
 8000e92:	0003      	movs	r3, r0
 8000e94:	0019      	movs	r1, r3
 8000e96:	0020      	movs	r0, r4
 8000e98:	f7ff f93c 	bl	8000114 <__udivsi3>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 fdd1 	bl	8001a46 <HAL_SYSTICK_Config>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d112      	bne.n	8000ece <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d80a      	bhi.n	8000ec4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 fda0 	bl	80019fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_InitTick+0x90>)
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e00d      	b.n	8000ee0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
 8000ecc:	e008      	b.n	8000ee0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ece:	230f      	movs	r3, #15
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e003      	b.n	8000ee0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed8:	230f      	movs	r3, #15
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	781b      	ldrb	r3, [r3, #0]
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b005      	add	sp, #20
 8000eec:	bd90      	pop	{r4, r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_IncTick+0x1c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	001a      	movs	r2, r3
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x20>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	18d2      	adds	r2, r2, r3
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_IncTick+0x20>)
 8000f0e:	601a      	str	r2, [r3, #0]
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000220 	.word	0x20000220

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <HAL_GetTick+0x10>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	20000220 	.word	0x20000220

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff fff0 	bl	8000f20 <HAL_GetTick>
 8000f40:	0003      	movs	r3, r0
 8000f42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_Delay+0x44>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	001a      	movs	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	f7ff ffe0 	bl	8000f20 <HAL_GetTick>
 8000f60:	0002      	movs	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b004      	add	sp, #16
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	20000008 	.word	0x20000008

08000f7c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	fffff9ff 	.word	0xfffff9ff

08000fa8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000fb8:	401a      	ands	r2, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b002      	add	sp, #8
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	fe3fffff 	.word	0xfe3fffff

08000fd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	23e0      	movs	r3, #224	; 0xe0
 8000fde:	045b      	lsls	r3, r3, #17
 8000fe0:	4013      	ands	r3, r2
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	400a      	ands	r2, r1
 8001000:	2107      	movs	r1, #7
 8001002:	4091      	lsls	r1, r2
 8001004:	000a      	movs	r2, r1
 8001006:	43d2      	mvns	r2, r2
 8001008:	401a      	ands	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	2104      	movs	r1, #4
 800100e:	400b      	ands	r3, r1
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4099      	lsls	r1, r3
 8001014:	000b      	movs	r3, r1
 8001016:	431a      	orrs	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b004      	add	sp, #16
 8001022:	bd80      	pop	{r7, pc}

08001024 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	2104      	movs	r1, #4
 8001036:	400a      	ands	r2, r1
 8001038:	2107      	movs	r1, #7
 800103a:	4091      	lsls	r1, r2
 800103c:	000a      	movs	r2, r1
 800103e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	2104      	movs	r1, #4
 8001044:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001046:	40da      	lsrs	r2, r3
 8001048:	0013      	movs	r3, r2
}
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}

08001052 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	211f      	movs	r1, #31
 8001066:	400a      	ands	r2, r1
 8001068:	210f      	movs	r1, #15
 800106a:	4091      	lsls	r1, r2
 800106c:	000a      	movs	r2, r1
 800106e:	43d2      	mvns	r2, r2
 8001070:	401a      	ands	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	0e9b      	lsrs	r3, r3, #26
 8001076:	210f      	movs	r1, #15
 8001078:	4019      	ands	r1, r3
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	201f      	movs	r0, #31
 800107e:	4003      	ands	r3, r0
 8001080:	4099      	lsls	r1, r3
 8001082:	000b      	movs	r3, r1
 8001084:	431a      	orrs	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b004      	add	sp, #16
 8001090:	bd80      	pop	{r7, pc}

08001092 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	035b      	lsls	r3, r3, #13
 80010a4:	0b5b      	lsrs	r3, r3, #13
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	0352      	lsls	r2, r2, #13
 80010c6:	0b52      	lsrs	r2, r2, #13
 80010c8:	43d2      	mvns	r2, r2
 80010ca:	401a      	ands	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	0212      	lsls	r2, r2, #8
 80010ec:	43d2      	mvns	r2, r2
 80010ee:	401a      	ands	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	400b      	ands	r3, r1
 80010f8:	4904      	ldr	r1, [pc, #16]	; (800110c <LL_ADC_SetChannelSamplingTime+0x34>)
 80010fa:	400b      	ands	r3, r1
 80010fc:	431a      	orrs	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b004      	add	sp, #16
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	07ffff00 	.word	0x07ffff00

08001110 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4a05      	ldr	r2, [pc, #20]	; (8001134 <LL_ADC_EnableInternalRegulator+0x24>)
 800111e:	4013      	ands	r3, r2
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	0552      	lsls	r2, r2, #21
 8001124:	431a      	orrs	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	6fffffe8 	.word	0x6fffffe8

08001138 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	055b      	lsls	r3, r3, #21
 8001148:	401a      	ands	r2, r3
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	055b      	lsls	r3, r3, #21
 800114e:	429a      	cmp	r2, r3
 8001150:	d101      	bne.n	8001156 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001156:	2300      	movs	r3, #0
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}

08001160 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2201      	movs	r2, #1
 800116e:	4013      	ands	r3, r2
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <LL_ADC_IsEnabled+0x18>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <LL_ADC_IsEnabled+0x1a>
 8001178:	2300      	movs	r3, #0
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}

08001182 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2204      	movs	r2, #4
 8001190:	4013      	ands	r3, r2
 8001192:	2b04      	cmp	r3, #4
 8001194:	d101      	bne.n	800119a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800119a:	2300      	movs	r3, #0
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ac:	231f      	movs	r3, #31
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e17f      	b.n	80014ca <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10a      	bne.n	80011e8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff fca9 	bl	8000b2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2254      	movs	r2, #84	; 0x54
 80011e4:	2100      	movs	r1, #0
 80011e6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff ffa3 	bl	8001138 <LL_ADC_IsInternalRegulatorEnabled>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d115      	bne.n	8001222 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff ff88 	bl	8001110 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001200:	4bb4      	ldr	r3, [pc, #720]	; (80014d4 <HAL_ADC_Init+0x330>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	49b4      	ldr	r1, [pc, #720]	; (80014d8 <HAL_ADC_Init+0x334>)
 8001206:	0018      	movs	r0, r3
 8001208:	f7fe ff84 	bl	8000114 <__udivsi3>
 800120c:	0003      	movs	r3, r0
 800120e:	3301      	adds	r3, #1
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001214:	e002      	b.n	800121c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3b01      	subs	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f9      	bne.n	8001216 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff ff86 	bl	8001138 <LL_ADC_IsInternalRegulatorEnabled>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d10f      	bne.n	8001250 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001234:	2210      	movs	r2, #16
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001240:	2201      	movs	r2, #1
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001248:	231f      	movs	r3, #31
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff94 	bl	8001182 <LL_ADC_REG_IsConversionOngoing>
 800125a:	0003      	movs	r3, r0
 800125c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	2210      	movs	r2, #16
 8001264:	4013      	ands	r3, r2
 8001266:	d000      	beq.n	800126a <HAL_ADC_Init+0xc6>
 8001268:	e122      	b.n	80014b0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d000      	beq.n	8001272 <HAL_ADC_Init+0xce>
 8001270:	e11e      	b.n	80014b0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	4a99      	ldr	r2, [pc, #612]	; (80014dc <HAL_ADC_Init+0x338>)
 8001278:	4013      	ands	r3, r2
 800127a:	2202      	movs	r2, #2
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff ff6a 	bl	8001160 <LL_ADC_IsEnabled>
 800128c:	1e03      	subs	r3, r0, #0
 800128e:	d000      	beq.n	8001292 <HAL_ADC_Init+0xee>
 8001290:	e0ad      	b.n	80013ee <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7e1b      	ldrb	r3, [r3, #24]
 800129a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800129c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7e5b      	ldrb	r3, [r3, #25]
 80012a2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012a4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7e9b      	ldrb	r3, [r3, #26]
 80012aa:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012ac:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <HAL_ADC_Init+0x118>
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	015b      	lsls	r3, r3, #5
 80012ba:	e000      	b.n	80012be <HAL_ADC_Init+0x11a>
 80012bc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012be:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012c4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	da04      	bge.n	80012d8 <HAL_ADC_Init+0x134>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	e001      	b.n	80012dc <HAL_ADC_Init+0x138>
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80012dc:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	212c      	movs	r1, #44	; 0x2c
 80012e2:	5c5b      	ldrb	r3, [r3, r1]
 80012e4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012e6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2220      	movs	r2, #32
 80012f2:	5c9b      	ldrb	r3, [r3, r2]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d115      	bne.n	8001324 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7e9b      	ldrb	r3, [r3, #26]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d105      	bne.n	800130c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	0252      	lsls	r2, r2, #9
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	e00b      	b.n	8001324 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	2220      	movs	r2, #32
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131c:	2201      	movs	r2, #1
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00a      	beq.n	8001342 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001330:	23e0      	movs	r3, #224	; 0xe0
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800133a:	4313      	orrs	r3, r2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4a65      	ldr	r2, [pc, #404]	; (80014e0 <HAL_ADC_Init+0x33c>)
 800134a:	4013      	ands	r3, r2
 800134c:	0019      	movs	r1, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	430a      	orrs	r2, r1
 8001356:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	0f9b      	lsrs	r3, r3, #30
 800135e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001364:	4313      	orrs	r3, r2
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4313      	orrs	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	223c      	movs	r2, #60	; 0x3c
 8001370:	5c9b      	ldrb	r3, [r3, r2]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d111      	bne.n	800139a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	0f9b      	lsrs	r3, r3, #30
 800137c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001382:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001388:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800138e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	4313      	orrs	r3, r2
 8001394:	2201      	movs	r2, #1
 8001396:	4313      	orrs	r3, r2
 8001398:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a50      	ldr	r2, [pc, #320]	; (80014e4 <HAL_ADC_Init+0x340>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	0019      	movs	r1, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	23c0      	movs	r3, #192	; 0xc0
 80013b6:	061b      	lsls	r3, r3, #24
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d018      	beq.n	80013ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	05db      	lsls	r3, r3, #23
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d012      	beq.n	80013ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	061b      	lsls	r3, r3, #24
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d00c      	beq.n	80013ee <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80013d4:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <HAL_ADC_Init+0x344>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a44      	ldr	r2, [pc, #272]	; (80014ec <HAL_ADC_Init+0x348>)
 80013da:	4013      	ands	r3, r2
 80013dc:	0019      	movs	r1, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	23f0      	movs	r3, #240	; 0xf0
 80013e4:	039b      	lsls	r3, r3, #14
 80013e6:	401a      	ands	r2, r3
 80013e8:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_ADC_Init+0x344>)
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f6:	001a      	movs	r2, r3
 80013f8:	2100      	movs	r1, #0
 80013fa:	f7ff fdf6 	bl	8000fea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001406:	493a      	ldr	r1, [pc, #232]	; (80014f0 <HAL_ADC_Init+0x34c>)
 8001408:	001a      	movs	r2, r3
 800140a:	f7ff fdee 	bl	8000fea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d109      	bne.n	800142a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2110      	movs	r1, #16
 8001422:	4249      	negs	r1, r1
 8001424:	430a      	orrs	r2, r1
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
 8001428:	e018      	b.n	800145c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	039b      	lsls	r3, r3, #14
 8001432:	429a      	cmp	r2, r3
 8001434:	d112      	bne.n	800145c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	3b01      	subs	r3, #1
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	221c      	movs	r2, #28
 8001446:	4013      	ands	r3, r2
 8001448:	2210      	movs	r2, #16
 800144a:	4252      	negs	r2, r2
 800144c:	409a      	lsls	r2, r3
 800144e:	0011      	movs	r1, r2
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2100      	movs	r1, #0
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff fdde 	bl	8001024 <LL_ADC_GetSamplingTimeCommonChannels>
 8001468:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800146e:	429a      	cmp	r2, r3
 8001470:	d10b      	bne.n	800148a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	2203      	movs	r2, #3
 800147e:	4393      	bics	r3, r2
 8001480:	2201      	movs	r2, #1
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001488:	e01c      	b.n	80014c4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	2212      	movs	r2, #18
 8001490:	4393      	bics	r3, r2
 8001492:	2210      	movs	r2, #16
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149e:	2201      	movs	r2, #1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80014a6:	231f      	movs	r3, #31
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80014ae:	e009      	b.n	80014c4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	2210      	movs	r2, #16
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014bc:	231f      	movs	r3, #31
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80014c4:	231f      	movs	r3, #31
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	781b      	ldrb	r3, [r3, #0]
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b008      	add	sp, #32
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	20000000 	.word	0x20000000
 80014d8:	00030d40 	.word	0x00030d40
 80014dc:	fffffefd 	.word	0xfffffefd
 80014e0:	fffe0201 	.word	0xfffe0201
 80014e4:	1ffffc02 	.word	0x1ffffc02
 80014e8:	40012708 	.word	0x40012708
 80014ec:	ffc3ffff 	.word	0xffc3ffff
 80014f0:	07ffff04 	.word	0x07ffff04

080014f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014fe:	2317      	movs	r3, #23
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2254      	movs	r2, #84	; 0x54
 800150e:	5c9b      	ldrb	r3, [r3, r2]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x24>
 8001514:	2302      	movs	r3, #2
 8001516:	e1c0      	b.n	800189a <HAL_ADC_ConfigChannel+0x3a6>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2254      	movs	r2, #84	; 0x54
 800151c:	2101      	movs	r1, #1
 800151e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff fe2c 	bl	8001182 <LL_ADC_REG_IsConversionOngoing>
 800152a:	1e03      	subs	r3, r0, #0
 800152c:	d000      	beq.n	8001530 <HAL_ADC_ConfigChannel+0x3c>
 800152e:	e1a3      	b.n	8001878 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d100      	bne.n	800153a <HAL_ADC_ConfigChannel+0x46>
 8001538:	e143      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	429a      	cmp	r2, r3
 8001544:	d004      	beq.n	8001550 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800154a:	4ac1      	ldr	r2, [pc, #772]	; (8001850 <HAL_ADC_ConfigChannel+0x35c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d108      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0019      	movs	r1, r3
 800155a:	0010      	movs	r0, r2
 800155c:	f7ff fd99 	bl	8001092 <LL_ADC_REG_SetSequencerChAdd>
 8001560:	e0c9      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	211f      	movs	r1, #31
 800156c:	400b      	ands	r3, r1
 800156e:	210f      	movs	r1, #15
 8001570:	4099      	lsls	r1, r3
 8001572:	000b      	movs	r3, r1
 8001574:	43db      	mvns	r3, r3
 8001576:	4013      	ands	r3, r2
 8001578:	0019      	movs	r1, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	035b      	lsls	r3, r3, #13
 8001580:	0b5b      	lsrs	r3, r3, #13
 8001582:	d105      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x9c>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0e9b      	lsrs	r3, r3, #26
 800158a:	221f      	movs	r2, #31
 800158c:	4013      	ands	r3, r2
 800158e:	e098      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2201      	movs	r2, #1
 8001596:	4013      	ands	r3, r2
 8001598:	d000      	beq.n	800159c <HAL_ADC_ConfigChannel+0xa8>
 800159a:	e091      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x1cc>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2202      	movs	r2, #2
 80015a2:	4013      	ands	r3, r2
 80015a4:	d000      	beq.n	80015a8 <HAL_ADC_ConfigChannel+0xb4>
 80015a6:	e089      	b.n	80016bc <HAL_ADC_ConfigChannel+0x1c8>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2204      	movs	r2, #4
 80015ae:	4013      	ands	r3, r2
 80015b0:	d000      	beq.n	80015b4 <HAL_ADC_ConfigChannel+0xc0>
 80015b2:	e081      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x1c4>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2208      	movs	r2, #8
 80015ba:	4013      	ands	r3, r2
 80015bc:	d000      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xcc>
 80015be:	e079      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x1c0>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2210      	movs	r2, #16
 80015c6:	4013      	ands	r3, r2
 80015c8:	d000      	beq.n	80015cc <HAL_ADC_ConfigChannel+0xd8>
 80015ca:	e071      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x1bc>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2220      	movs	r2, #32
 80015d2:	4013      	ands	r3, r2
 80015d4:	d000      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0xe4>
 80015d6:	e069      	b.n	80016ac <HAL_ADC_ConfigChannel+0x1b8>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2240      	movs	r2, #64	; 0x40
 80015de:	4013      	ands	r3, r2
 80015e0:	d000      	beq.n	80015e4 <HAL_ADC_ConfigChannel+0xf0>
 80015e2:	e061      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x1b4>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	4013      	ands	r3, r2
 80015ec:	d000      	beq.n	80015f0 <HAL_ADC_ConfigChannel+0xfc>
 80015ee:	e059      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x1b0>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4013      	ands	r3, r2
 80015fa:	d151      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x1ac>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d149      	bne.n	800169c <HAL_ADC_ConfigChannel+0x1a8>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4013      	ands	r3, r2
 8001612:	d141      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x1a4>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4013      	ands	r3, r2
 800161e:	d139      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x1a0>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	015b      	lsls	r3, r3, #5
 8001628:	4013      	ands	r3, r2
 800162a:	d131      	bne.n	8001690 <HAL_ADC_ConfigChannel+0x19c>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	019b      	lsls	r3, r3, #6
 8001634:	4013      	ands	r3, r2
 8001636:	d129      	bne.n	800168c <HAL_ADC_ConfigChannel+0x198>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	01db      	lsls	r3, r3, #7
 8001640:	4013      	ands	r3, r2
 8001642:	d121      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x194>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	4013      	ands	r3, r2
 800164e:	d119      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x190>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	025b      	lsls	r3, r3, #9
 8001658:	4013      	ands	r3, r2
 800165a:	d111      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x18c>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	029b      	lsls	r3, r3, #10
 8001664:	4013      	ands	r3, r2
 8001666:	d109      	bne.n	800167c <HAL_ADC_ConfigChannel+0x188>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	02db      	lsls	r3, r3, #11
 8001670:	4013      	ands	r3, r2
 8001672:	d001      	beq.n	8001678 <HAL_ADC_ConfigChannel+0x184>
 8001674:	2312      	movs	r3, #18
 8001676:	e024      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001678:	2300      	movs	r3, #0
 800167a:	e022      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 800167c:	2311      	movs	r3, #17
 800167e:	e020      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001680:	2310      	movs	r3, #16
 8001682:	e01e      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001684:	230f      	movs	r3, #15
 8001686:	e01c      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001688:	230e      	movs	r3, #14
 800168a:	e01a      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 800168c:	230d      	movs	r3, #13
 800168e:	e018      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001690:	230c      	movs	r3, #12
 8001692:	e016      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001694:	230b      	movs	r3, #11
 8001696:	e014      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001698:	230a      	movs	r3, #10
 800169a:	e012      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 800169c:	2309      	movs	r3, #9
 800169e:	e010      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 80016a0:	2308      	movs	r3, #8
 80016a2:	e00e      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 80016a4:	2307      	movs	r3, #7
 80016a6:	e00c      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 80016a8:	2306      	movs	r3, #6
 80016aa:	e00a      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 80016ac:	2305      	movs	r3, #5
 80016ae:	e008      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 80016b0:	2304      	movs	r3, #4
 80016b2:	e006      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 80016b4:	2303      	movs	r3, #3
 80016b6:	e004      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e002      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1ce>
 80016c0:	2300      	movs	r3, #0
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	6852      	ldr	r2, [r2, #4]
 80016c6:	201f      	movs	r0, #31
 80016c8:	4002      	ands	r2, r0
 80016ca:	4093      	lsls	r3, r2
 80016cc:	000a      	movs	r2, r1
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d808      	bhi.n	80016f6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	001a      	movs	r2, r3
 80016f2:	f7ff fcae 	bl	8001052 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	001a      	movs	r2, r3
 8001704:	f7ff fce8 	bl	80010d8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db00      	blt.n	8001712 <HAL_ADC_ConfigChannel+0x21e>
 8001710:	e0bc      	b.n	800188c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001712:	4b50      	ldr	r3, [pc, #320]	; (8001854 <HAL_ADC_ConfigChannel+0x360>)
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff fc5b 	bl	8000fd0 <LL_ADC_GetCommonPathInternalCh>
 800171a:	0003      	movs	r3, r0
 800171c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a4d      	ldr	r2, [pc, #308]	; (8001858 <HAL_ADC_ConfigChannel+0x364>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d122      	bne.n	800176e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001730:	d11d      	bne.n	800176e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	0412      	lsls	r2, r2, #16
 8001738:	4313      	orrs	r3, r2
 800173a:	4a46      	ldr	r2, [pc, #280]	; (8001854 <HAL_ADC_ConfigChannel+0x360>)
 800173c:	0019      	movs	r1, r3
 800173e:	0010      	movs	r0, r2
 8001740:	f7ff fc32 	bl	8000fa8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001744:	4b45      	ldr	r3, [pc, #276]	; (800185c <HAL_ADC_ConfigChannel+0x368>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4945      	ldr	r1, [pc, #276]	; (8001860 <HAL_ADC_ConfigChannel+0x36c>)
 800174a:	0018      	movs	r0, r3
 800174c:	f7fe fce2 	bl	8000114 <__udivsi3>
 8001750:	0003      	movs	r3, r0
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	0013      	movs	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	189b      	adds	r3, r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800175e:	e002      	b.n	8001766 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3b01      	subs	r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f9      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800176c:	e08e      	b.n	800188c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a3c      	ldr	r2, [pc, #240]	; (8001864 <HAL_ADC_ConfigChannel+0x370>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d10e      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x2a2>
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	045b      	lsls	r3, r3, #17
 800177e:	4013      	ands	r3, r2
 8001780:	d109      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	0452      	lsls	r2, r2, #17
 8001788:	4313      	orrs	r3, r2
 800178a:	4a32      	ldr	r2, [pc, #200]	; (8001854 <HAL_ADC_ConfigChannel+0x360>)
 800178c:	0019      	movs	r1, r3
 800178e:	0010      	movs	r0, r2
 8001790:	f7ff fc0a 	bl	8000fa8 <LL_ADC_SetCommonPathInternalCh>
 8001794:	e07a      	b.n	800188c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a33      	ldr	r2, [pc, #204]	; (8001868 <HAL_ADC_ConfigChannel+0x374>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d000      	beq.n	80017a2 <HAL_ADC_ConfigChannel+0x2ae>
 80017a0:	e074      	b.n	800188c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	03db      	lsls	r3, r3, #15
 80017a8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80017aa:	d000      	beq.n	80017ae <HAL_ADC_ConfigChannel+0x2ba>
 80017ac:	e06e      	b.n	800188c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	03d2      	lsls	r2, r2, #15
 80017b4:	4313      	orrs	r3, r2
 80017b6:	4a27      	ldr	r2, [pc, #156]	; (8001854 <HAL_ADC_ConfigChannel+0x360>)
 80017b8:	0019      	movs	r1, r3
 80017ba:	0010      	movs	r0, r2
 80017bc:	f7ff fbf4 	bl	8000fa8 <LL_ADC_SetCommonPathInternalCh>
 80017c0:	e064      	b.n	800188c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	061b      	lsls	r3, r3, #24
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d004      	beq.n	80017d8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <HAL_ADC_ConfigChannel+0x35c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d107      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0019      	movs	r1, r3
 80017e2:	0010      	movs	r0, r2
 80017e4:	f7ff fc66 	bl	80010b4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	da4d      	bge.n	800188c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_ADC_ConfigChannel+0x360>)
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7ff fbec 	bl	8000fd0 <LL_ADC_GetCommonPathInternalCh>
 80017f8:	0003      	movs	r3, r0
 80017fa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_ADC_ConfigChannel+0x364>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d108      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4a18      	ldr	r2, [pc, #96]	; (800186c <HAL_ADC_ConfigChannel+0x378>)
 800180a:	4013      	ands	r3, r2
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <HAL_ADC_ConfigChannel+0x360>)
 800180e:	0019      	movs	r1, r3
 8001810:	0010      	movs	r0, r2
 8001812:	f7ff fbc9 	bl	8000fa8 <LL_ADC_SetCommonPathInternalCh>
 8001816:	e039      	b.n	800188c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a11      	ldr	r2, [pc, #68]	; (8001864 <HAL_ADC_ConfigChannel+0x370>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d108      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4a12      	ldr	r2, [pc, #72]	; (8001870 <HAL_ADC_ConfigChannel+0x37c>)
 8001826:	4013      	ands	r3, r2
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_ADC_ConfigChannel+0x360>)
 800182a:	0019      	movs	r1, r3
 800182c:	0010      	movs	r0, r2
 800182e:	f7ff fbbb 	bl	8000fa8 <LL_ADC_SetCommonPathInternalCh>
 8001832:	e02b      	b.n	800188c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_ADC_ConfigChannel+0x374>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d126      	bne.n	800188c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <HAL_ADC_ConfigChannel+0x380>)
 8001842:	4013      	ands	r3, r2
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_ADC_ConfigChannel+0x360>)
 8001846:	0019      	movs	r1, r3
 8001848:	0010      	movs	r0, r2
 800184a:	f7ff fbad 	bl	8000fa8 <LL_ADC_SetCommonPathInternalCh>
 800184e:	e01d      	b.n	800188c <HAL_ADC_ConfigChannel+0x398>
 8001850:	80000004 	.word	0x80000004
 8001854:	40012708 	.word	0x40012708
 8001858:	b0001000 	.word	0xb0001000
 800185c:	20000000 	.word	0x20000000
 8001860:	00030d40 	.word	0x00030d40
 8001864:	b8004000 	.word	0xb8004000
 8001868:	b4002000 	.word	0xb4002000
 800186c:	ff7fffff 	.word	0xff7fffff
 8001870:	feffffff 	.word	0xfeffffff
 8001874:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	2220      	movs	r2, #32
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001884:	2317      	movs	r3, #23
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2254      	movs	r2, #84	; 0x54
 8001890:	2100      	movs	r1, #0
 8001892:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001894:	2317      	movs	r3, #23
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	781b      	ldrb	r3, [r3, #0]
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b006      	add	sp, #24
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	0002      	movs	r2, r0
 80018ac:	1dfb      	adds	r3, r7, #7
 80018ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	1dfb      	adds	r3, r7, #7
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b7f      	cmp	r3, #127	; 0x7f
 80018b6:	d809      	bhi.n	80018cc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b8:	1dfb      	adds	r3, r7, #7
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	001a      	movs	r2, r3
 80018be:	231f      	movs	r3, #31
 80018c0:	401a      	ands	r2, r3
 80018c2:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_EnableIRQ+0x30>)
 80018c4:	2101      	movs	r1, #1
 80018c6:	4091      	lsls	r1, r2
 80018c8:	000a      	movs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	0002      	movs	r2, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	1dfb      	adds	r3, r7, #7
 80018e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b7f      	cmp	r3, #127	; 0x7f
 80018ec:	d828      	bhi.n	8001940 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ee:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <__NVIC_SetPriority+0xd4>)
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	33c0      	adds	r3, #192	; 0xc0
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	589b      	ldr	r3, [r3, r2]
 80018fe:	1dfa      	adds	r2, r7, #7
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	0011      	movs	r1, r2
 8001904:	2203      	movs	r2, #3
 8001906:	400a      	ands	r2, r1
 8001908:	00d2      	lsls	r2, r2, #3
 800190a:	21ff      	movs	r1, #255	; 0xff
 800190c:	4091      	lsls	r1, r2
 800190e:	000a      	movs	r2, r1
 8001910:	43d2      	mvns	r2, r2
 8001912:	401a      	ands	r2, r3
 8001914:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	019b      	lsls	r3, r3, #6
 800191a:	22ff      	movs	r2, #255	; 0xff
 800191c:	401a      	ands	r2, r3
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	0018      	movs	r0, r3
 8001924:	2303      	movs	r3, #3
 8001926:	4003      	ands	r3, r0
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800192c:	481f      	ldr	r0, [pc, #124]	; (80019ac <__NVIC_SetPriority+0xd4>)
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	b25b      	sxtb	r3, r3
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	430a      	orrs	r2, r1
 8001938:	33c0      	adds	r3, #192	; 0xc0
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800193e:	e031      	b.n	80019a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <__NVIC_SetPriority+0xd8>)
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	0019      	movs	r1, r3
 8001948:	230f      	movs	r3, #15
 800194a:	400b      	ands	r3, r1
 800194c:	3b08      	subs	r3, #8
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3306      	adds	r3, #6
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	18d3      	adds	r3, r2, r3
 8001956:	3304      	adds	r3, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	1dfa      	adds	r2, r7, #7
 800195c:	7812      	ldrb	r2, [r2, #0]
 800195e:	0011      	movs	r1, r2
 8001960:	2203      	movs	r2, #3
 8001962:	400a      	ands	r2, r1
 8001964:	00d2      	lsls	r2, r2, #3
 8001966:	21ff      	movs	r1, #255	; 0xff
 8001968:	4091      	lsls	r1, r2
 800196a:	000a      	movs	r2, r1
 800196c:	43d2      	mvns	r2, r2
 800196e:	401a      	ands	r2, r3
 8001970:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	019b      	lsls	r3, r3, #6
 8001976:	22ff      	movs	r2, #255	; 0xff
 8001978:	401a      	ands	r2, r3
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	0018      	movs	r0, r3
 8001980:	2303      	movs	r3, #3
 8001982:	4003      	ands	r3, r0
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001988:	4809      	ldr	r0, [pc, #36]	; (80019b0 <__NVIC_SetPriority+0xd8>)
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	001c      	movs	r4, r3
 8001990:	230f      	movs	r3, #15
 8001992:	4023      	ands	r3, r4
 8001994:	3b08      	subs	r3, #8
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	430a      	orrs	r2, r1
 800199a:	3306      	adds	r3, #6
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	18c3      	adds	r3, r0, r3
 80019a0:	3304      	adds	r3, #4
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b003      	add	sp, #12
 80019aa:	bd90      	pop	{r4, r7, pc}
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1e5a      	subs	r2, r3, #1
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	045b      	lsls	r3, r3, #17
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d301      	bcc.n	80019cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c8:	2301      	movs	r3, #1
 80019ca:	e010      	b.n	80019ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <SysTick_Config+0x44>)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	3a01      	subs	r2, #1
 80019d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d4:	2301      	movs	r3, #1
 80019d6:	425b      	negs	r3, r3
 80019d8:	2103      	movs	r1, #3
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff ff7c 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <SysTick_Config+0x44>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SysTick_Config+0x44>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	210f      	movs	r1, #15
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	1c02      	adds	r2, r0, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff ff33 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b002      	add	sp, #8
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff ffaf 	bl	80019b4 <SysTick_Config>
 8001a56:	0003      	movs	r3, r0
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e077      	b.n	8001b62 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a3d      	ldr	r2, [pc, #244]	; (8001b6c <HAL_DMA_Init+0x10c>)
 8001a78:	4694      	mov	ip, r2
 8001a7a:	4463      	add	r3, ip
 8001a7c:	2114      	movs	r1, #20
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7fe fb48 	bl	8000114 <__udivsi3>
 8001a84:	0003      	movs	r3, r0
 8001a86:	009a      	lsls	r2, r3, #2
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2225      	movs	r2, #37	; 0x25
 8001a90:	2102      	movs	r1, #2
 8001a92:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4934      	ldr	r1, [pc, #208]	; (8001b70 <HAL_DMA_Init+0x110>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6819      	ldr	r1, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	0018      	movs	r0, r3
 8001ade:	f000 fa11 	bl	8001f04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	01db      	lsls	r3, r3, #7
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d102      	bne.n	8001af4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afc:	213f      	movs	r1, #63	; 0x3f
 8001afe:	400a      	ands	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b0a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d011      	beq.n	8001b38 <HAL_DMA_Init+0xd8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d80d      	bhi.n	8001b38 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f000 fa1c 	bl	8001f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	e008      	b.n	8001b4a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2225      	movs	r2, #37	; 0x25
 8001b54:	2101      	movs	r1, #1
 8001b56:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2224      	movs	r2, #36	; 0x24
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b002      	add	sp, #8
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	bffdfff8 	.word	0xbffdfff8
 8001b70:	ffff800f 	.word	0xffff800f

08001b74 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b82:	2317      	movs	r3, #23
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2224      	movs	r2, #36	; 0x24
 8001b8e:	5c9b      	ldrb	r3, [r3, r2]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA_Start_IT+0x24>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e06f      	b.n	8001c78 <HAL_DMA_Start_IT+0x104>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2225      	movs	r2, #37	; 0x25
 8001ba4:	5c9b      	ldrb	r3, [r3, r2]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d157      	bne.n	8001c5c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2225      	movs	r2, #37	; 0x25
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	438a      	bics	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	68b9      	ldr	r1, [r7, #8]
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f957 	bl	8001e84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	210e      	movs	r1, #14
 8001bea:	430a      	orrs	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	e00f      	b.n	8001c10 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	210a      	movs	r1, #10
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d008      	beq.n	8001c30 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	0049      	lsls	r1, r1, #1
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	0049      	lsls	r1, r1, #1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e00a      	b.n	8001c72 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2224      	movs	r2, #36	; 0x24
 8001c66:	2100      	movs	r1, #0
 8001c68:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001c6a:	2317      	movs	r3, #23
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001c72:	2317      	movs	r3, #23
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	781b      	ldrb	r3, [r3, #0]
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b006      	add	sp, #24
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001c88:	4b55      	ldr	r3, [pc, #340]	; (8001de0 <HAL_DMA_IRQHandler+0x160>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	221c      	movs	r2, #28
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	0013      	movs	r3, r2
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d027      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x7a>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2204      	movs	r2, #4
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d023      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d107      	bne.n	8001cce <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2104      	movs	r1, #4
 8001cca:	438a      	bics	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001cce:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <HAL_DMA_IRQHandler+0x160>)
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	221c      	movs	r2, #28
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2204      	movs	r2, #4
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <HAL_DMA_IRQHandler+0x160>)
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d100      	bne.n	8001cee <HAL_DMA_IRQHandler+0x6e>
 8001cec:	e073      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	0010      	movs	r0, r2
 8001cf6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001cf8:	e06d      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	221c      	movs	r2, #28
 8001d00:	4013      	ands	r3, r2
 8001d02:	2202      	movs	r2, #2
 8001d04:	409a      	lsls	r2, r3
 8001d06:	0013      	movs	r3, r2
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d02e      	beq.n	8001d6c <HAL_DMA_IRQHandler+0xec>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2202      	movs	r2, #2
 8001d12:	4013      	ands	r3, r2
 8001d14:	d02a      	beq.n	8001d6c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d10b      	bne.n	8001d3a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	210a      	movs	r1, #10
 8001d2e:	438a      	bics	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2225      	movs	r2, #37	; 0x25
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_DMA_IRQHandler+0x160>)
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	221c      	movs	r2, #28
 8001d44:	4013      	ands	r3, r2
 8001d46:	2202      	movs	r2, #2
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_DMA_IRQHandler+0x160>)
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2224      	movs	r2, #36	; 0x24
 8001d54:	2100      	movs	r1, #0
 8001d56:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d03a      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	0010      	movs	r0, r2
 8001d68:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001d6a:	e034      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	221c      	movs	r2, #28
 8001d72:	4013      	ands	r3, r2
 8001d74:	2208      	movs	r2, #8
 8001d76:	409a      	lsls	r2, r3
 8001d78:	0013      	movs	r3, r2
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d02b      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x158>
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2208      	movs	r2, #8
 8001d84:	4013      	ands	r3, r2
 8001d86:	d027      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	210e      	movs	r1, #14
 8001d94:	438a      	bics	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_DMA_IRQHandler+0x160>)
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	221c      	movs	r2, #28
 8001da2:	4013      	ands	r3, r2
 8001da4:	2201      	movs	r2, #1
 8001da6:	409a      	lsls	r2, r3
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_DMA_IRQHandler+0x160>)
 8001daa:	430a      	orrs	r2, r1
 8001dac:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2225      	movs	r2, #37	; 0x25
 8001db8:	2101      	movs	r1, #1
 8001dba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2224      	movs	r2, #36	; 0x24
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	0010      	movs	r0, r2
 8001dd4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46c0      	nop			; (mov r8, r8)
}
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b004      	add	sp, #16
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40020000 	.word	0x40020000

08001de4 <HAL_DMA_RegisterCallback>:
  * @param pCallback Pointer to private callback function which has pointer to
  *                  a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	230b      	movs	r3, #11
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	1c0a      	adds	r2, r1, #0
 8001df4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2317      	movs	r3, #23
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2224      	movs	r2, #36	; 0x24
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_DMA_RegisterCallback+0x28>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e037      	b.n	8001e7c <HAL_DMA_RegisterCallback+0x98>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2224      	movs	r2, #36	; 0x24
 8001e10:	2101      	movs	r1, #1
 8001e12:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2225      	movs	r2, #37	; 0x25
 8001e18:	5c9b      	ldrb	r3, [r3, r2]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d122      	bne.n	8001e66 <HAL_DMA_RegisterCallback+0x82>
  {
    switch (CallbackID)
 8001e20:	230b      	movs	r3, #11
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d014      	beq.n	8001e54 <HAL_DMA_RegisterCallback+0x70>
 8001e2a:	dc17      	bgt.n	8001e5c <HAL_DMA_RegisterCallback+0x78>
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d00d      	beq.n	8001e4c <HAL_DMA_RegisterCallback+0x68>
 8001e30:	dc14      	bgt.n	8001e5c <HAL_DMA_RegisterCallback+0x78>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <HAL_DMA_RegisterCallback+0x58>
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d004      	beq.n	8001e44 <HAL_DMA_RegisterCallback+0x60>
 8001e3a:	e00f      	b.n	8001e5c <HAL_DMA_RegisterCallback+0x78>
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8001e42:	e014      	b.n	8001e6e <HAL_DMA_RegisterCallback+0x8a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8001e4a:	e010      	b.n	8001e6e <HAL_DMA_RegisterCallback+0x8a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8001e52:	e00c      	b.n	8001e6e <HAL_DMA_RegisterCallback+0x8a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8001e5a:	e008      	b.n	8001e6e <HAL_DMA_RegisterCallback+0x8a>

      default:
        status = HAL_ERROR;
 8001e5c:	2317      	movs	r3, #23
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
        break;
 8001e64:	e003      	b.n	8001e6e <HAL_DMA_RegisterCallback+0x8a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e66:	2317      	movs	r3, #23
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2224      	movs	r2, #36	; 0x24
 8001e72:	2100      	movs	r1, #0
 8001e74:	5499      	strb	r1, [r3, r2]

  return status;
 8001e76:	2317      	movs	r3, #23
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	781b      	ldrb	r3, [r3, #0]
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b006      	add	sp, #24
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e9a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001eac:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <DMA_SetConfig+0x7c>)
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	221c      	movs	r2, #28
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2201      	movs	r2, #1
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <DMA_SetConfig+0x7c>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d108      	bne.n	8001ee6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ee4:	e007      	b.n	8001ef6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	60da      	str	r2, [r3, #12]
}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b004      	add	sp, #16
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	40020000 	.word	0x40020000

08001f04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	4a10      	ldr	r2, [pc, #64]	; (8001f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001f14:	4694      	mov	ip, r2
 8001f16:	4463      	add	r3, ip
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	001a      	movs	r2, r3
 8001f26:	23ff      	movs	r3, #255	; 0xff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	3b08      	subs	r3, #8
 8001f2c:	2114      	movs	r1, #20
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7fe f8f0 	bl	8000114 <__udivsi3>
 8001f34:	0003      	movs	r3, r0
 8001f36:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001f3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	221f      	movs	r2, #31
 8001f42:	4013      	ands	r3, r2
 8001f44:	2201      	movs	r2, #1
 8001f46:	409a      	lsls	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b004      	add	sp, #16
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	10008200 	.word	0x10008200
 8001f58:	40020880 	.word	0x40020880

08001f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	223f      	movs	r2, #63	; 0x3f
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f72:	4694      	mov	ip, r2
 8001f74:	4463      	add	r3, ip
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	001a      	movs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b004      	add	sp, #16
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	1000823f 	.word	0x1000823f
 8001fa0:	40020940 	.word	0x40020940

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb2:	e147      	b.n	8002244 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2101      	movs	r1, #1
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4091      	lsls	r1, r2
 8001fbe:	000a      	movs	r2, r1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d100      	bne.n	8001fcc <HAL_GPIO_Init+0x28>
 8001fca:	e138      	b.n	800223e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d005      	beq.n	8001fe4 <HAL_GPIO_Init+0x40>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2203      	movs	r2, #3
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d130      	bne.n	8002046 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	0013      	movs	r3, r2
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	409a      	lsls	r2, r3
 8002006:	0013      	movs	r3, r2
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800201a:	2201      	movs	r2, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
 8002020:	0013      	movs	r3, r2
 8002022:	43da      	mvns	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	2201      	movs	r2, #1
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
 8002038:	0013      	movs	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2203      	movs	r2, #3
 800204c:	4013      	ands	r3, r2
 800204e:	2b03      	cmp	r3, #3
 8002050:	d017      	beq.n	8002082 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	409a      	lsls	r2, r3
 8002060:	0013      	movs	r3, r2
 8002062:	43da      	mvns	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	409a      	lsls	r2, r3
 8002074:	0013      	movs	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2203      	movs	r2, #3
 8002088:	4013      	ands	r3, r2
 800208a:	2b02      	cmp	r3, #2
 800208c:	d123      	bne.n	80020d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	08da      	lsrs	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3208      	adds	r2, #8
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	58d3      	ldr	r3, [r2, r3]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2207      	movs	r2, #7
 80020a0:	4013      	ands	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	43da      	mvns	r2, r3
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2107      	movs	r1, #7
 80020ba:	400b      	ands	r3, r1
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	409a      	lsls	r2, r3
 80020c0:	0013      	movs	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	0092      	lsls	r2, r2, #2
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	409a      	lsls	r2, r3
 80020e4:	0013      	movs	r3, r2
 80020e6:	43da      	mvns	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2203      	movs	r2, #3
 80020f4:	401a      	ands	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	409a      	lsls	r2, r3
 80020fc:	0013      	movs	r3, r2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	23c0      	movs	r3, #192	; 0xc0
 8002110:	029b      	lsls	r3, r3, #10
 8002112:	4013      	ands	r3, r2
 8002114:	d100      	bne.n	8002118 <HAL_GPIO_Init+0x174>
 8002116:	e092      	b.n	800223e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002118:	4a50      	ldr	r2, [pc, #320]	; (800225c <HAL_GPIO_Init+0x2b8>)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3318      	adds	r3, #24
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	589b      	ldr	r3, [r3, r2]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2203      	movs	r2, #3
 800212a:	4013      	ands	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	220f      	movs	r2, #15
 8002130:	409a      	lsls	r2, r3
 8002132:	0013      	movs	r3, r2
 8002134:	43da      	mvns	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	23a0      	movs	r3, #160	; 0xa0
 8002140:	05db      	lsls	r3, r3, #23
 8002142:	429a      	cmp	r2, r3
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0x1ca>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a45      	ldr	r2, [pc, #276]	; (8002260 <HAL_GPIO_Init+0x2bc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00d      	beq.n	800216a <HAL_GPIO_Init+0x1c6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a44      	ldr	r2, [pc, #272]	; (8002264 <HAL_GPIO_Init+0x2c0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <HAL_GPIO_Init+0x1c2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a43      	ldr	r2, [pc, #268]	; (8002268 <HAL_GPIO_Init+0x2c4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_GPIO_Init+0x1be>
 800215e:	2303      	movs	r3, #3
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x1cc>
 8002162:	2305      	movs	r3, #5
 8002164:	e004      	b.n	8002170 <HAL_GPIO_Init+0x1cc>
 8002166:	2302      	movs	r3, #2
 8002168:	e002      	b.n	8002170 <HAL_GPIO_Init+0x1cc>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_GPIO_Init+0x1cc>
 800216e:	2300      	movs	r3, #0
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	2103      	movs	r1, #3
 8002174:	400a      	ands	r2, r1
 8002176:	00d2      	lsls	r2, r2, #3
 8002178:	4093      	lsls	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002180:	4936      	ldr	r1, [pc, #216]	; (800225c <HAL_GPIO_Init+0x2b8>)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3318      	adds	r3, #24
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800218e:	4b33      	ldr	r3, [pc, #204]	; (800225c <HAL_GPIO_Init+0x2b8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43da      	mvns	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	035b      	lsls	r3, r3, #13
 80021a6:	4013      	ands	r3, r2
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021b2:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_GPIO_Init+0x2b8>)
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_GPIO_Init+0x2b8>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	43da      	mvns	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	039b      	lsls	r3, r3, #14
 80021d0:	4013      	ands	r3, r2
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <HAL_GPIO_Init+0x2b8>)
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021e2:	4a1e      	ldr	r2, [pc, #120]	; (800225c <HAL_GPIO_Init+0x2b8>)
 80021e4:	2384      	movs	r3, #132	; 0x84
 80021e6:	58d3      	ldr	r3, [r2, r3]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43da      	mvns	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	029b      	lsls	r3, r3, #10
 80021fc:	4013      	ands	r3, r2
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002208:	4914      	ldr	r1, [pc, #80]	; (800225c <HAL_GPIO_Init+0x2b8>)
 800220a:	2284      	movs	r2, #132	; 0x84
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <HAL_GPIO_Init+0x2b8>)
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	58d3      	ldr	r3, [r2, r3]
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	43da      	mvns	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	025b      	lsls	r3, r3, #9
 800222a:	4013      	ands	r3, r2
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002236:	4909      	ldr	r1, [pc, #36]	; (800225c <HAL_GPIO_Init+0x2b8>)
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	40da      	lsrs	r2, r3
 800224c:	1e13      	subs	r3, r2, #0
 800224e:	d000      	beq.n	8002252 <HAL_GPIO_Init+0x2ae>
 8002250:	e6b0      	b.n	8001fb4 <HAL_GPIO_Init+0x10>
  }
}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b006      	add	sp, #24
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021800 	.word	0x40021800
 8002260:	50000400 	.word	0x50000400
 8002264:	50000800 	.word	0x50000800
 8002268:	50000c00 	.word	0x50000c00

0800226c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	0008      	movs	r0, r1
 8002276:	0011      	movs	r1, r2
 8002278:	1cbb      	adds	r3, r7, #2
 800227a:	1c02      	adds	r2, r0, #0
 800227c:	801a      	strh	r2, [r3, #0]
 800227e:	1c7b      	adds	r3, r7, #1
 8002280:	1c0a      	adds	r2, r1, #0
 8002282:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002284:	1c7b      	adds	r3, r7, #1
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d004      	beq.n	8002296 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800228c:	1cbb      	adds	r3, r7, #2
 800228e:	881a      	ldrh	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002294:	e003      	b.n	800229e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002296:	1cbb      	adds	r3, r7, #2
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b002      	add	sp, #8
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d11f      	bne.n	800230c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	0013      	movs	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	189b      	adds	r3, r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4912      	ldr	r1, [pc, #72]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80022da:	0018      	movs	r0, r3
 80022dc:	f7fd ff1a 	bl	8000114 <__udivsi3>
 80022e0:	0003      	movs	r3, r0
 80022e2:	3301      	adds	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022e6:	e008      	b.n	80022fa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e001      	b.n	80022fa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e009      	b.n	800230e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	401a      	ands	r2, r3
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	429a      	cmp	r2, r3
 800230a:	d0ed      	beq.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	40007000 	.word	0x40007000
 800231c:	fffff9ff 	.word	0xfffff9ff
 8002320:	20000000 	.word	0x20000000
 8002324:	000f4240 	.word	0x000f4240

08002328 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <LL_RCC_GetAPB1Prescaler+0x14>)
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	23e0      	movs	r3, #224	; 0xe0
 8002332:	01db      	lsls	r3, r3, #7
 8002334:	4013      	ands	r3, r2
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e2fe      	b.n	8002950 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2201      	movs	r2, #1
 8002358:	4013      	ands	r3, r2
 800235a:	d100      	bne.n	800235e <HAL_RCC_OscConfig+0x1e>
 800235c:	e07c      	b.n	8002458 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235e:	4bc3      	ldr	r3, [pc, #780]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2238      	movs	r2, #56	; 0x38
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002368:	4bc0      	ldr	r3, [pc, #768]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2203      	movs	r2, #3
 800236e:	4013      	ands	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b10      	cmp	r3, #16
 8002376:	d102      	bne.n	800237e <HAL_RCC_OscConfig+0x3e>
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d002      	beq.n	8002384 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d10b      	bne.n	800239c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	4bb9      	ldr	r3, [pc, #740]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	029b      	lsls	r3, r3, #10
 800238c:	4013      	ands	r3, r2
 800238e:	d062      	beq.n	8002456 <HAL_RCC_OscConfig+0x116>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d15e      	bne.n	8002456 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e2d9      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	025b      	lsls	r3, r3, #9
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_OscConfig+0x78>
 80023a8:	4bb0      	ldr	r3, [pc, #704]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4baf      	ldr	r3, [pc, #700]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	0249      	lsls	r1, r1, #9
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e020      	b.n	80023fa <HAL_RCC_OscConfig+0xba>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	23a0      	movs	r3, #160	; 0xa0
 80023be:	02db      	lsls	r3, r3, #11
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d10e      	bne.n	80023e2 <HAL_RCC_OscConfig+0xa2>
 80023c4:	4ba9      	ldr	r3, [pc, #676]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4ba8      	ldr	r3, [pc, #672]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	02c9      	lsls	r1, r1, #11
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	4ba6      	ldr	r3, [pc, #664]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4ba5      	ldr	r3, [pc, #660]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	0249      	lsls	r1, r1, #9
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e00b      	b.n	80023fa <HAL_RCC_OscConfig+0xba>
 80023e2:	4ba2      	ldr	r3, [pc, #648]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4ba1      	ldr	r3, [pc, #644]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80023e8:	49a1      	ldr	r1, [pc, #644]	; (8002670 <HAL_RCC_OscConfig+0x330>)
 80023ea:	400a      	ands	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	4b9f      	ldr	r3, [pc, #636]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b9e      	ldr	r3, [pc, #632]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80023f4:	499f      	ldr	r1, [pc, #636]	; (8002674 <HAL_RCC_OscConfig+0x334>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d014      	beq.n	800242c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7fe fd8d 	bl	8000f20 <HAL_GetTick>
 8002406:	0003      	movs	r3, r0
 8002408:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7fe fd88 	bl	8000f20 <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e298      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241e:	4b93      	ldr	r3, [pc, #588]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	029b      	lsls	r3, r3, #10
 8002426:	4013      	ands	r3, r2
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0xcc>
 800242a:	e015      	b.n	8002458 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fd78 	bl	8000f20 <HAL_GetTick>
 8002430:	0003      	movs	r3, r0
 8002432:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002436:	f7fe fd73 	bl	8000f20 <HAL_GetTick>
 800243a:	0002      	movs	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b64      	cmp	r3, #100	; 0x64
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e283      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002448:	4b88      	ldr	r3, [pc, #544]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	029b      	lsls	r3, r3, #10
 8002450:	4013      	ands	r3, r2
 8002452:	d1f0      	bne.n	8002436 <HAL_RCC_OscConfig+0xf6>
 8002454:	e000      	b.n	8002458 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002456:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2202      	movs	r2, #2
 800245e:	4013      	ands	r3, r2
 8002460:	d100      	bne.n	8002464 <HAL_RCC_OscConfig+0x124>
 8002462:	e099      	b.n	8002598 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002464:	4b81      	ldr	r3, [pc, #516]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2238      	movs	r2, #56	; 0x38
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800246e:	4b7f      	ldr	r3, [pc, #508]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2203      	movs	r2, #3
 8002474:	4013      	ands	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b10      	cmp	r3, #16
 800247c:	d102      	bne.n	8002484 <HAL_RCC_OscConfig+0x144>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d002      	beq.n	800248a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d135      	bne.n	80024f6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248a:	4b78      	ldr	r3, [pc, #480]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4013      	ands	r3, r2
 8002494:	d005      	beq.n	80024a2 <HAL_RCC_OscConfig+0x162>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e256      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	4b72      	ldr	r3, [pc, #456]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a74      	ldr	r2, [pc, #464]	; (8002678 <HAL_RCC_OscConfig+0x338>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	021a      	lsls	r2, r3, #8
 80024b2:	4b6e      	ldr	r3, [pc, #440]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80024b4:	430a      	orrs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d112      	bne.n	80024e4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024be:	4b6b      	ldr	r3, [pc, #428]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x33c>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	4b67      	ldr	r3, [pc, #412]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80024d2:	4b66      	ldr	r3, [pc, #408]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	0adb      	lsrs	r3, r3, #11
 80024d8:	2207      	movs	r2, #7
 80024da:	4013      	ands	r3, r2
 80024dc:	4a68      	ldr	r2, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x340>)
 80024de:	40da      	lsrs	r2, r3
 80024e0:	4b68      	ldr	r3, [pc, #416]	; (8002684 <HAL_RCC_OscConfig+0x344>)
 80024e2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x348>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7fe fcbd 	bl	8000e68 <HAL_InitTick>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d051      	beq.n	8002596 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e22c      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d030      	beq.n	8002560 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024fe:	4b5b      	ldr	r3, [pc, #364]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a5e      	ldr	r2, [pc, #376]	; (800267c <HAL_RCC_OscConfig+0x33c>)
 8002504:	4013      	ands	r3, r2
 8002506:	0019      	movs	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	4b57      	ldr	r3, [pc, #348]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002512:	4b56      	ldr	r3, [pc, #344]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b55      	ldr	r3, [pc, #340]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0049      	lsls	r1, r1, #1
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe fcfe 	bl	8000f20 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252a:	f7fe fcf9 	bl	8000f20 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e209      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253c:	4b4b      	ldr	r3, [pc, #300]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4013      	ands	r3, r2
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002548:	4b48      	ldr	r3, [pc, #288]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a4a      	ldr	r2, [pc, #296]	; (8002678 <HAL_RCC_OscConfig+0x338>)
 800254e:	4013      	ands	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	021a      	lsls	r2, r3, #8
 8002558:	4b44      	ldr	r3, [pc, #272]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	e01b      	b.n	8002598 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002560:	4b42      	ldr	r3, [pc, #264]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002566:	4949      	ldr	r1, [pc, #292]	; (800268c <HAL_RCC_OscConfig+0x34c>)
 8002568:	400a      	ands	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe fcd8 	bl	8000f20 <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002576:	f7fe fcd3 	bl	8000f20 <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1e3      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002588:	4b38      	ldr	r3, [pc, #224]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4013      	ands	r3, r2
 8002592:	d1f0      	bne.n	8002576 <HAL_RCC_OscConfig+0x236>
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002596:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2208      	movs	r2, #8
 800259e:	4013      	ands	r3, r2
 80025a0:	d047      	beq.n	8002632 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025a2:	4b32      	ldr	r3, [pc, #200]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2238      	movs	r2, #56	; 0x38
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b18      	cmp	r3, #24
 80025ac:	d10a      	bne.n	80025c4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025ae:	4b2f      	ldr	r3, [pc, #188]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80025b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d03c      	beq.n	8002632 <HAL_RCC_OscConfig+0x2f2>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d138      	bne.n	8002632 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e1c5      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d019      	beq.n	8002600 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80025cc:	4b27      	ldr	r3, [pc, #156]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80025ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025d0:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	430a      	orrs	r2, r1
 80025d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fca2 	bl	8000f20 <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e2:	f7fe fc9d 	bl	8000f20 <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1ad      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 80025f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f8:	2202      	movs	r2, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	d0f1      	beq.n	80025e2 <HAL_RCC_OscConfig+0x2a2>
 80025fe:	e018      	b.n	8002632 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002602:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002606:	2101      	movs	r1, #1
 8002608:	438a      	bics	r2, r1
 800260a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fc88 	bl	8000f20 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002616:	f7fe fc83 	bl	8000f20 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e193      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	2202      	movs	r2, #2
 800262e:	4013      	ands	r3, r2
 8002630:	d1f1      	bne.n	8002616 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2204      	movs	r2, #4
 8002638:	4013      	ands	r3, r2
 800263a:	d100      	bne.n	800263e <HAL_RCC_OscConfig+0x2fe>
 800263c:	e0c6      	b.n	80027cc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263e:	231f      	movs	r3, #31
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2238      	movs	r2, #56	; 0x38
 800264c:	4013      	ands	r3, r2
 800264e:	2b20      	cmp	r3, #32
 8002650:	d11e      	bne.n	8002690 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_RCC_OscConfig+0x32c>)
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	2202      	movs	r2, #2
 8002658:	4013      	ands	r3, r2
 800265a:	d100      	bne.n	800265e <HAL_RCC_OscConfig+0x31e>
 800265c:	e0b6      	b.n	80027cc <HAL_RCC_OscConfig+0x48c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d000      	beq.n	8002668 <HAL_RCC_OscConfig+0x328>
 8002666:	e0b1      	b.n	80027cc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e171      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
 800266c:	40021000 	.word	0x40021000
 8002670:	fffeffff 	.word	0xfffeffff
 8002674:	fffbffff 	.word	0xfffbffff
 8002678:	ffff80ff 	.word	0xffff80ff
 800267c:	ffffc7ff 	.word	0xffffc7ff
 8002680:	00f42400 	.word	0x00f42400
 8002684:	20000000 	.word	0x20000000
 8002688:	20000004 	.word	0x20000004
 800268c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002690:	4bb1      	ldr	r3, [pc, #708]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	055b      	lsls	r3, r3, #21
 8002698:	4013      	ands	r3, r2
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_OscConfig+0x360>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x362>
 80026a0:	2300      	movs	r3, #0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d011      	beq.n	80026ca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4bac      	ldr	r3, [pc, #688]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80026a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026aa:	4bab      	ldr	r3, [pc, #684]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	0549      	lsls	r1, r1, #21
 80026b0:	430a      	orrs	r2, r1
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80026b4:	4ba8      	ldr	r3, [pc, #672]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80026b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	055b      	lsls	r3, r3, #21
 80026bc:	4013      	ands	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80026c2:	231f      	movs	r3, #31
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ca:	4ba4      	ldr	r3, [pc, #656]	; (800295c <HAL_RCC_OscConfig+0x61c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	d11a      	bne.n	800270c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d6:	4ba1      	ldr	r3, [pc, #644]	; (800295c <HAL_RCC_OscConfig+0x61c>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4ba0      	ldr	r3, [pc, #640]	; (800295c <HAL_RCC_OscConfig+0x61c>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0049      	lsls	r1, r1, #1
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fc1c 	bl	8000f20 <HAL_GetTick>
 80026e8:	0003      	movs	r3, r0
 80026ea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7fe fc17 	bl	8000f20 <HAL_GetTick>
 80026f2:	0002      	movs	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e127      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002700:	4b96      	ldr	r3, [pc, #600]	; (800295c <HAL_RCC_OscConfig+0x61c>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x3e2>
 8002714:	4b90      	ldr	r3, [pc, #576]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002716:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002718:	4b8f      	ldr	r3, [pc, #572]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 800271a:	2101      	movs	r1, #1
 800271c:	430a      	orrs	r2, r1
 800271e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002720:	e01c      	b.n	800275c <HAL_RCC_OscConfig+0x41c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b05      	cmp	r3, #5
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x404>
 800272a:	4b8b      	ldr	r3, [pc, #556]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 800272c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800272e:	4b8a      	ldr	r3, [pc, #552]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002730:	2104      	movs	r1, #4
 8002732:	430a      	orrs	r2, r1
 8002734:	65da      	str	r2, [r3, #92]	; 0x5c
 8002736:	4b88      	ldr	r3, [pc, #544]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002738:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800273a:	4b87      	ldr	r3, [pc, #540]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 800273c:	2101      	movs	r1, #1
 800273e:	430a      	orrs	r2, r1
 8002740:	65da      	str	r2, [r3, #92]	; 0x5c
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0x41c>
 8002744:	4b84      	ldr	r3, [pc, #528]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002746:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002748:	4b83      	ldr	r3, [pc, #524]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 800274a:	2101      	movs	r1, #1
 800274c:	438a      	bics	r2, r1
 800274e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002750:	4b81      	ldr	r3, [pc, #516]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002752:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002754:	4b80      	ldr	r3, [pc, #512]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002756:	2104      	movs	r1, #4
 8002758:	438a      	bics	r2, r1
 800275a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d014      	beq.n	800278e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fbdc 	bl	8000f20 <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276c:	e009      	b.n	8002782 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fbd7 	bl	8000f20 <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	4a79      	ldr	r2, [pc, #484]	; (8002960 <HAL_RCC_OscConfig+0x620>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0e6      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	4b75      	ldr	r3, [pc, #468]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	2202      	movs	r2, #2
 8002788:	4013      	ands	r3, r2
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x42e>
 800278c:	e013      	b.n	80027b6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fbc7 	bl	8000f20 <HAL_GetTick>
 8002792:	0003      	movs	r3, r0
 8002794:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002796:	e009      	b.n	80027ac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe fbc2 	bl	8000f20 <HAL_GetTick>
 800279c:	0002      	movs	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	4a6f      	ldr	r2, [pc, #444]	; (8002960 <HAL_RCC_OscConfig+0x620>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e0d1      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ac:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2202      	movs	r2, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027b6:	231f      	movs	r3, #31
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d105      	bne.n	80027cc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027c0:	4b65      	ldr	r3, [pc, #404]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80027c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c4:	4b64      	ldr	r3, [pc, #400]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80027c6:	4967      	ldr	r1, [pc, #412]	; (8002964 <HAL_RCC_OscConfig+0x624>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d100      	bne.n	80027d6 <HAL_RCC_OscConfig+0x496>
 80027d4:	e0bb      	b.n	800294e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d6:	4b60      	ldr	r3, [pc, #384]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2238      	movs	r2, #56	; 0x38
 80027dc:	4013      	ands	r3, r2
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d100      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4a4>
 80027e2:	e07b      	b.n	80028dc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d156      	bne.n	800289a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	4b5a      	ldr	r3, [pc, #360]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b59      	ldr	r3, [pc, #356]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80027f2:	495d      	ldr	r1, [pc, #372]	; (8002968 <HAL_RCC_OscConfig+0x628>)
 80027f4:	400a      	ands	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fb92 	bl	8000f20 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002802:	f7fe fb8d 	bl	8000f20 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e09d      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002814:	4b50      	ldr	r3, [pc, #320]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	049b      	lsls	r3, r3, #18
 800281c:	4013      	ands	r3, r2
 800281e:	d1f0      	bne.n	8002802 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002820:	4b4d      	ldr	r3, [pc, #308]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a51      	ldr	r2, [pc, #324]	; (800296c <HAL_RCC_OscConfig+0x62c>)
 8002826:	4013      	ands	r3, r2
 8002828:	0019      	movs	r1, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1a      	ldr	r2, [r3, #32]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	431a      	orrs	r2, r3
 800284e:	4b42      	ldr	r3, [pc, #264]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002850:	430a      	orrs	r2, r1
 8002852:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002854:	4b40      	ldr	r3, [pc, #256]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	0449      	lsls	r1, r1, #17
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	4b3c      	ldr	r3, [pc, #240]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	0549      	lsls	r1, r1, #21
 800286c:	430a      	orrs	r2, r1
 800286e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fb56 	bl	8000f20 <HAL_GetTick>
 8002874:	0003      	movs	r3, r0
 8002876:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe fb51 	bl	8000f20 <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e061      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288c:	4b32      	ldr	r3, [pc, #200]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	049b      	lsls	r3, r3, #18
 8002894:	4013      	ands	r3, r2
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x53a>
 8002898:	e059      	b.n	800294e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80028a0:	4931      	ldr	r1, [pc, #196]	; (8002968 <HAL_RCC_OscConfig+0x628>)
 80028a2:	400a      	ands	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fb3b 	bl	8000f20 <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe fb36 	bl	8000f20 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e046      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c2:	4b25      	ldr	r3, [pc, #148]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	049b      	lsls	r3, r3, #18
 80028ca:	4013      	ands	r3, r2
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80028ce:	4b22      	ldr	r3, [pc, #136]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80028d4:	4926      	ldr	r1, [pc, #152]	; (8002970 <HAL_RCC_OscConfig+0x630>)
 80028d6:	400a      	ands	r2, r1
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	e038      	b.n	800294e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e033      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x618>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2203      	movs	r2, #3
 80028f2:	401a      	ands	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d126      	bne.n	800294a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2270      	movs	r2, #112	; 0x70
 8002900:	401a      	ands	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d11f      	bne.n	800294a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	23fe      	movs	r3, #254	; 0xfe
 800290e:	01db      	lsls	r3, r3, #7
 8002910:	401a      	ands	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d116      	bne.n	800294a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	23f8      	movs	r3, #248	; 0xf8
 8002920:	039b      	lsls	r3, r3, #14
 8002922:	401a      	ands	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d10e      	bne.n	800294a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	23e0      	movs	r3, #224	; 0xe0
 8002930:	051b      	lsls	r3, r3, #20
 8002932:	401a      	ands	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	0f5b      	lsrs	r3, r3, #29
 8002940:	075a      	lsls	r2, r3, #29
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b008      	add	sp, #32
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	40007000 	.word	0x40007000
 8002960:	00001388 	.word	0x00001388
 8002964:	efffffff 	.word	0xefffffff
 8002968:	feffffff 	.word	0xfeffffff
 800296c:	11c1808c 	.word	0x11c1808c
 8002970:	eefefffc 	.word	0xeefefffc

08002974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0e9      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2207      	movs	r2, #7
 800298e:	4013      	ands	r3, r2
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d91e      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2207      	movs	r2, #7
 800299c:	4393      	bics	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029a8:	f7fe faba 	bl	8000f20 <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029b0:	e009      	b.n	80029c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b2:	f7fe fab5 	bl	8000f20 <HAL_GetTick>
 80029b6:	0002      	movs	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	4a6a      	ldr	r2, [pc, #424]	; (8002b68 <HAL_RCC_ClockConfig+0x1f4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0ca      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029c6:	4b67      	ldr	r3, [pc, #412]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2207      	movs	r2, #7
 80029cc:	4013      	ands	r3, r2
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1ee      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2202      	movs	r2, #2
 80029da:	4013      	ands	r3, r2
 80029dc:	d015      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2204      	movs	r2, #4
 80029e4:	4013      	ands	r3, r2
 80029e6:	d006      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029e8:	4b60      	ldr	r3, [pc, #384]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	4b5f      	ldr	r3, [pc, #380]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 80029ee:	21e0      	movs	r1, #224	; 0xe0
 80029f0:	01c9      	lsls	r1, r1, #7
 80029f2:	430a      	orrs	r2, r1
 80029f4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	4a5d      	ldr	r2, [pc, #372]	; (8002b70 <HAL_RCC_ClockConfig+0x1fc>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002a06:	430a      	orrs	r2, r1
 8002a08:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4013      	ands	r3, r2
 8002a12:	d057      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	029b      	lsls	r3, r3, #10
 8002a24:	4013      	ands	r3, r2
 8002a26:	d12b      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e097      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a34:	4b4d      	ldr	r3, [pc, #308]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	049b      	lsls	r3, r3, #18
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d11f      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e08b      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a4c:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4013      	ands	r3, r2
 8002a56:	d113      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e07f      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a64:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a68:	2202      	movs	r2, #2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e074      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a72:	4b3e      	ldr	r3, [pc, #248]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	2202      	movs	r2, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e06d      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a80:	4b3a      	ldr	r3, [pc, #232]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2207      	movs	r2, #7
 8002a86:	4393      	bics	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4b37      	ldr	r3, [pc, #220]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002a90:	430a      	orrs	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a94:	f7fe fa44 	bl	8000f20 <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9e:	f7fe fa3f 	bl	8000f20 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <HAL_RCC_ClockConfig+0x1f4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e054      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	4b2e      	ldr	r3, [pc, #184]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2238      	movs	r2, #56	; 0x38
 8002ab8:	401a      	ands	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d1ec      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2207      	movs	r2, #7
 8002aca:	4013      	ands	r3, r2
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d21e      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2207      	movs	r2, #7
 8002ad8:	4393      	bics	r3, r2
 8002ada:	0019      	movs	r1, r3
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fa1c 	bl	8000f20 <HAL_GetTick>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aec:	e009      	b.n	8002b02 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aee:	f7fe fa17 	bl	8000f20 <HAL_GetTick>
 8002af2:	0002      	movs	r2, r0
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <HAL_RCC_ClockConfig+0x1f4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e02c      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2207      	movs	r2, #7
 8002b08:	4013      	ands	r3, r2
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1ee      	bne.n	8002aee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2204      	movs	r2, #4
 8002b16:	4013      	ands	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <HAL_RCC_ClockConfig+0x200>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b2e:	f000 f829 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b32:	0001      	movs	r1, r0
 8002b34:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <HAL_RCC_ClockConfig+0x204>)
 8002b40:	0092      	lsls	r2, r2, #2
 8002b42:	58d3      	ldr	r3, [r2, r3]
 8002b44:	221f      	movs	r2, #31
 8002b46:	4013      	ands	r3, r2
 8002b48:	000a      	movs	r2, r1
 8002b4a:	40da      	lsrs	r2, r3
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_ClockConfig+0x208>)
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_ClockConfig+0x20c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7fe f987 	bl	8000e68 <HAL_InitTick>
 8002b5a:	0003      	movs	r3, r0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b004      	add	sp, #16
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40022000 	.word	0x40022000
 8002b68:	00001388 	.word	0x00001388
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	fffff0ff 	.word	0xfffff0ff
 8002b74:	ffff8fff 	.word	0xffff8fff
 8002b78:	08004178 	.word	0x08004178
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004

08002b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b8a:	4b3c      	ldr	r3, [pc, #240]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2238      	movs	r2, #56	; 0x38
 8002b90:	4013      	ands	r3, r2
 8002b92:	d10f      	bne.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b94:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0adb      	lsrs	r3, r3, #11
 8002b9a:	2207      	movs	r2, #7
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	0013      	movs	r3, r2
 8002ba4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ba6:	6839      	ldr	r1, [r7, #0]
 8002ba8:	4835      	ldr	r0, [pc, #212]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002baa:	f7fd fab3 	bl	8000114 <__udivsi3>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	e05d      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb4:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2238      	movs	r2, #56	; 0x38
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d102      	bne.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bc0:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x100>)
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	e054      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc6:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2238      	movs	r2, #56	; 0x38
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b10      	cmp	r3, #16
 8002bd0:	d138      	bne.n	8002c44 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002bd2:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	2207      	movs	r2, #7
 8002be4:	4013      	ands	r3, r2
 8002be6:	3301      	adds	r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d10d      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	4824      	ldr	r0, [pc, #144]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x100>)
 8002bf4:	f7fd fa8e 	bl	8000114 <__udivsi3>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	227f      	movs	r2, #127	; 0x7f
 8002c04:	4013      	ands	r3, r2
 8002c06:	434b      	muls	r3, r1
 8002c08:	617b      	str	r3, [r7, #20]
        break;
 8002c0a:	e00d      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	481c      	ldr	r0, [pc, #112]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c10:	f7fd fa80 	bl	8000114 <__udivsi3>
 8002c14:	0003      	movs	r3, r0
 8002c16:	0019      	movs	r1, r3
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	227f      	movs	r2, #127	; 0x7f
 8002c20:	4013      	ands	r3, r2
 8002c22:	434b      	muls	r3, r1
 8002c24:	617b      	str	r3, [r7, #20]
        break;
 8002c26:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c28:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	0f5b      	lsrs	r3, r3, #29
 8002c2e:	2207      	movs	r2, #7
 8002c30:	4013      	ands	r3, r2
 8002c32:	3301      	adds	r3, #1
 8002c34:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	6978      	ldr	r0, [r7, #20]
 8002c3a:	f7fd fa6b 	bl	8000114 <__udivsi3>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	e015      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2238      	movs	r2, #56	; 0x38
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d103      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2238      	movs	r2, #56	; 0x38
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b18      	cmp	r3, #24
 8002c62:	d103      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c64:	23fa      	movs	r3, #250	; 0xfa
 8002c66:	01db      	lsls	r3, r3, #7
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	e001      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c70:	693b      	ldr	r3, [r7, #16]
}
 8002c72:	0018      	movs	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b006      	add	sp, #24
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	00f42400 	.word	0x00f42400
 8002c84:	007a1200 	.word	0x007a1200

08002c88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c8c:	4b02      	ldr	r3, [pc, #8]	; (8002c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	20000000 	.word	0x20000000

08002c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c9c:	b5b0      	push	{r4, r5, r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ca0:	f7ff fff2 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ca4:	0004      	movs	r4, r0
 8002ca6:	f7ff fb3f 	bl	8002328 <LL_RCC_GetAPB1Prescaler>
 8002caa:	0003      	movs	r3, r0
 8002cac:	0b1a      	lsrs	r2, r3, #12
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cb0:	0092      	lsls	r2, r2, #2
 8002cb2:	58d3      	ldr	r3, [r2, r3]
 8002cb4:	221f      	movs	r2, #31
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	40dc      	lsrs	r4, r3
 8002cba:	0023      	movs	r3, r4
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	080041b8 	.word	0x080041b8

08002cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002cd0:	2313      	movs	r3, #19
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd8:	2312      	movs	r3, #18
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d100      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002cec:	e0a3      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cee:	2011      	movs	r0, #17
 8002cf0:	183b      	adds	r3, r7, r0
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4bc3      	ldr	r3, [pc, #780]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	055b      	lsls	r3, r3, #21
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d110      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4bc0      	ldr	r3, [pc, #768]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d06:	4bbf      	ldr	r3, [pc, #764]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	0549      	lsls	r1, r1, #21
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d10:	4bbc      	ldr	r3, [pc, #752]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	055b      	lsls	r3, r3, #21
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1e:	183b      	adds	r3, r7, r0
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d24:	4bb8      	ldr	r3, [pc, #736]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4bb7      	ldr	r3, [pc, #732]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	0049      	lsls	r1, r1, #1
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d32:	f7fe f8f5 	bl	8000f20 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3c:	f7fe f8f0 	bl	8000f20 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d904      	bls.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002d4a:	2313      	movs	r3, #19
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	2203      	movs	r2, #3
 8002d50:	701a      	strb	r2, [r3, #0]
        break;
 8002d52:	e005      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d54:	4bac      	ldr	r3, [pc, #688]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d0ed      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002d60:	2313      	movs	r3, #19
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d154      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d6a:	4ba6      	ldr	r3, [pc, #664]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d6e:	23c0      	movs	r3, #192	; 0xc0
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4013      	ands	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d019      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d014      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d86:	4b9f      	ldr	r3, [pc, #636]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	4aa0      	ldr	r2, [pc, #640]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d90:	4b9c      	ldr	r3, [pc, #624]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d94:	4b9b      	ldr	r3, [pc, #620]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	0249      	lsls	r1, r1, #9
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d9e:	4b99      	ldr	r3, [pc, #612]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002da2:	4b98      	ldr	r3, [pc, #608]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da4:	499a      	ldr	r1, [pc, #616]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002da6:	400a      	ands	r2, r1
 8002da8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002daa:	4b96      	ldr	r3, [pc, #600]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	d016      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe f8b2 	bl	8000f20 <HAL_GetTick>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc0:	e00c      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe f8ad 	bl	8000f20 <HAL_GetTick>
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	4a91      	ldr	r2, [pc, #580]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d904      	bls.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002dd2:	2313      	movs	r3, #19
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	701a      	strb	r2, [r3, #0]
            break;
 8002dda:	e004      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ddc:	4b89      	ldr	r3, [pc, #548]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	2202      	movs	r2, #2
 8002de2:	4013      	ands	r3, r2
 8002de4:	d0ed      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002de6:	2313      	movs	r3, #19
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10a      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df0:	4b84      	ldr	r3, [pc, #528]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df4:	4a85      	ldr	r2, [pc, #532]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfe:	4b81      	ldr	r3, [pc, #516]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e00:	430a      	orrs	r2, r1
 8002e02:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e04:	e00c      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e06:	2312      	movs	r3, #18
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	2213      	movs	r2, #19
 8002e0c:	18ba      	adds	r2, r7, r2
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	e005      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e14:	2312      	movs	r3, #18
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	2213      	movs	r2, #19
 8002e1a:	18ba      	adds	r2, r7, r2
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e20:	2311      	movs	r3, #17
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b76      	ldr	r3, [pc, #472]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e2e:	4b75      	ldr	r3, [pc, #468]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e30:	4979      	ldr	r1, [pc, #484]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002e32:	400a      	ands	r2, r1
 8002e34:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e40:	4b70      	ldr	r3, [pc, #448]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	2203      	movs	r2, #3
 8002e46:	4393      	bics	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4b6d      	ldr	r3, [pc, #436]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e50:	430a      	orrs	r2, r1
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e5e:	4b69      	ldr	r3, [pc, #420]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	220c      	movs	r2, #12
 8002e64:	4393      	bics	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	4b65      	ldr	r3, [pc, #404]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2210      	movs	r2, #16
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d009      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e7c:	4b61      	ldr	r3, [pc, #388]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	4a66      	ldr	r2, [pc, #408]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	4b5e      	ldr	r3, [pc, #376]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9c:	4b59      	ldr	r3, [pc, #356]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	4a5f      	ldr	r2, [pc, #380]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	4b56      	ldr	r3, [pc, #344]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eac:	430a      	orrs	r2, r1
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ebc:	4b51      	ldr	r3, [pc, #324]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	4b4e      	ldr	r3, [pc, #312]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d009      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eda:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	4b46      	ldr	r3, [pc, #280]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eea:	430a      	orrs	r2, r1
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	01db      	lsls	r3, r3, #7
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d015      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002efa:	4b42      	ldr	r3, [pc, #264]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	0899      	lsrs	r1, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1a      	ldr	r2, [r3, #32]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	05db      	lsls	r3, r3, #23
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d106      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f18:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	0249      	lsls	r1, r1, #9
 8002f22:	430a      	orrs	r2, r1
 8002f24:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	031b      	lsls	r3, r3, #12
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d009      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f32:	4b34      	ldr	r3, [pc, #208]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	2240      	movs	r2, #64	; 0x40
 8002f38:	4393      	bics	r3, r2
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f40:	4b30      	ldr	r3, [pc, #192]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f42:	430a      	orrs	r2, r1
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	039b      	lsls	r3, r3, #14
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d016      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f52:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	4a35      	ldr	r2, [pc, #212]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f60:	4b28      	ldr	r3, [pc, #160]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f62:	430a      	orrs	r2, r1
 8002f64:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	03db      	lsls	r3, r3, #15
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d106      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f72:	4b24      	ldr	r3, [pc, #144]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	4b23      	ldr	r3, [pc, #140]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f78:	2180      	movs	r1, #128	; 0x80
 8002f7a:	0449      	lsls	r1, r1, #17
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	03db      	lsls	r3, r3, #15
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d016      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	4a27      	ldr	r2, [pc, #156]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	045b      	lsls	r3, r3, #17
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d106      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fb2:	2180      	movs	r1, #128	; 0x80
 8002fb4:	0449      	lsls	r1, r1, #17
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d016      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	01db      	lsls	r3, r3, #7
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	0249      	lsls	r1, r1, #9
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ff4:	2312      	movs	r3, #18
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	781b      	ldrb	r3, [r3, #0]
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b006      	add	sp, #24
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	40021000 	.word	0x40021000
 8003008:	40007000 	.word	0x40007000
 800300c:	fffffcff 	.word	0xfffffcff
 8003010:	fffeffff 	.word	0xfffeffff
 8003014:	00001388 	.word	0x00001388
 8003018:	efffffff 	.word	0xefffffff
 800301c:	fffff3ff 	.word	0xfffff3ff
 8003020:	fff3ffff 	.word	0xfff3ffff
 8003024:	ffcfffff 	.word	0xffcfffff
 8003028:	ffffcfff 	.word	0xffffcfff
 800302c:	ffbfffff 	.word	0xffbfffff
 8003030:	feffffff 	.word	0xfeffffff
 8003034:	ffff3fff 	.word	0xffff3fff

08003038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e04a      	b.n	80030e0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	223d      	movs	r2, #61	; 0x3d
 800304e:	5c9b      	ldrb	r3, [r3, r2]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d107      	bne.n	8003066 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	223c      	movs	r2, #60	; 0x3c
 800305a:	2100      	movs	r1, #0
 800305c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0018      	movs	r0, r3
 8003062:	f7fd fdd5 	bl	8000c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	223d      	movs	r2, #61	; 0x3d
 800306a:	2102      	movs	r1, #2
 800306c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	0019      	movs	r1, r3
 8003078:	0010      	movs	r0, r2
 800307a:	f000 f835 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2248      	movs	r2, #72	; 0x48
 8003082:	2101      	movs	r1, #1
 8003084:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	223e      	movs	r2, #62	; 0x3e
 800308a:	2101      	movs	r1, #1
 800308c:	5499      	strb	r1, [r3, r2]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	223f      	movs	r2, #63	; 0x3f
 8003092:	2101      	movs	r1, #1
 8003094:	5499      	strb	r1, [r3, r2]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2240      	movs	r2, #64	; 0x40
 800309a:	2101      	movs	r1, #1
 800309c:	5499      	strb	r1, [r3, r2]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2241      	movs	r2, #65	; 0x41
 80030a2:	2101      	movs	r1, #1
 80030a4:	5499      	strb	r1, [r3, r2]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2242      	movs	r2, #66	; 0x42
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2243      	movs	r2, #67	; 0x43
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2244      	movs	r2, #68	; 0x44
 80030ba:	2101      	movs	r1, #1
 80030bc:	5499      	strb	r1, [r3, r2]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2245      	movs	r2, #69	; 0x45
 80030c2:	2101      	movs	r1, #1
 80030c4:	5499      	strb	r1, [r3, r2]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2246      	movs	r2, #70	; 0x46
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2247      	movs	r2, #71	; 0x47
 80030d2:	2101      	movs	r1, #1
 80030d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	223d      	movs	r2, #61	; 0x3d
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a34      	ldr	r2, [pc, #208]	; (80031cc <TIM_Base_SetConfig+0xe4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d008      	beq.n	8003112 <TIM_Base_SetConfig+0x2a>
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	05db      	lsls	r3, r3, #23
 8003106:	429a      	cmp	r2, r3
 8003108:	d003      	beq.n	8003112 <TIM_Base_SetConfig+0x2a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a30      	ldr	r2, [pc, #192]	; (80031d0 <TIM_Base_SetConfig+0xe8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2270      	movs	r2, #112	; 0x70
 8003116:	4393      	bics	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a29      	ldr	r2, [pc, #164]	; (80031cc <TIM_Base_SetConfig+0xe4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d018      	beq.n	800315e <TIM_Base_SetConfig+0x76>
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	05db      	lsls	r3, r3, #23
 8003132:	429a      	cmp	r2, r3
 8003134:	d013      	beq.n	800315e <TIM_Base_SetConfig+0x76>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a25      	ldr	r2, [pc, #148]	; (80031d0 <TIM_Base_SetConfig+0xe8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00f      	beq.n	800315e <TIM_Base_SetConfig+0x76>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a24      	ldr	r2, [pc, #144]	; (80031d4 <TIM_Base_SetConfig+0xec>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00b      	beq.n	800315e <TIM_Base_SetConfig+0x76>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a23      	ldr	r2, [pc, #140]	; (80031d8 <TIM_Base_SetConfig+0xf0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <TIM_Base_SetConfig+0x76>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a22      	ldr	r2, [pc, #136]	; (80031dc <TIM_Base_SetConfig+0xf4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <TIM_Base_SetConfig+0x76>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a21      	ldr	r2, [pc, #132]	; (80031e0 <TIM_Base_SetConfig+0xf8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d108      	bne.n	8003170 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a20      	ldr	r2, [pc, #128]	; (80031e4 <TIM_Base_SetConfig+0xfc>)
 8003162:	4013      	ands	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	4393      	bics	r3, r2
 8003176:	001a      	movs	r2, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <TIM_Base_SetConfig+0xe4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00b      	beq.n	80031b6 <TIM_Base_SetConfig+0xce>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <TIM_Base_SetConfig+0xf0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <TIM_Base_SetConfig+0xce>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a0c      	ldr	r2, [pc, #48]	; (80031dc <TIM_Base_SetConfig+0xf4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_Base_SetConfig+0xce>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <TIM_Base_SetConfig+0xf8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d103      	bne.n	80031be <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	615a      	str	r2, [r3, #20]
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b004      	add	sp, #16
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40002000 	.word	0x40002000
 80031d8:	40014000 	.word	0x40014000
 80031dc:	40014400 	.word	0x40014400
 80031e0:	40014800 	.word	0x40014800
 80031e4:	fffffcff 	.word	0xfffffcff

080031e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	223c      	movs	r2, #60	; 0x3c
 80031f6:	5c9b      	ldrb	r3, [r3, r2]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e055      	b.n	80032ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	223c      	movs	r2, #60	; 0x3c
 8003204:	2101      	movs	r1, #1
 8003206:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	223d      	movs	r2, #61	; 0x3d
 800320c:	2102      	movs	r1, #2
 800320e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d108      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2270      	movs	r2, #112	; 0x70
 8003240:	4393      	bics	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00f      	beq.n	8003280 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	05db      	lsls	r3, r3, #23
 8003268:	429a      	cmp	r2, r3
 800326a:	d009      	beq.n	8003280 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a12      	ldr	r2, [pc, #72]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d10c      	bne.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2280      	movs	r2, #128	; 0x80
 8003284:	4393      	bics	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	4313      	orrs	r3, r2
 8003290:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	223d      	movs	r2, #61	; 0x3d
 800329e:	2101      	movs	r1, #1
 80032a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	223c      	movs	r2, #60	; 0x3c
 80032a6:	2100      	movs	r1, #0
 80032a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	0018      	movs	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b004      	add	sp, #16
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	ff0fffff 	.word	0xff0fffff
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40014000 	.word	0x40014000

080032c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e046      	b.n	8003364 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2284      	movs	r2, #132	; 0x84
 80032da:	589b      	ldr	r3, [r3, r2]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d107      	bne.n	80032f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	2100      	movs	r1, #0
 80032e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7fd fcae 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2284      	movs	r2, #132	; 0x84
 80032f4:	2124      	movs	r1, #36	; 0x24
 80032f6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2101      	movs	r1, #1
 8003304:	438a      	bics	r2, r1
 8003306:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 f8dc 	bl	80034c8 <UART_SetConfig>
 8003310:	0003      	movs	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e024      	b.n	8003364 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	0018      	movs	r0, r3
 8003326:	f000 fbab 	bl	8003a80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	490d      	ldr	r1, [pc, #52]	; (800336c <HAL_UART_Init+0xa8>)
 8003336:	400a      	ands	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	212a      	movs	r1, #42	; 0x2a
 8003346:	438a      	bics	r2, r1
 8003348:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2101      	movs	r1, #1
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0018      	movs	r0, r3
 800335e:	f000 fc43 	bl	8003be8 <UART_CheckIdleState>
 8003362:	0003      	movs	r3, r0
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}
 800336c:	ffffb7ff 	.word	0xffffb7ff

08003370 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	1dbb      	adds	r3, r7, #6
 800337e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2284      	movs	r2, #132	; 0x84
 8003384:	589b      	ldr	r3, [r3, r2]
 8003386:	2b20      	cmp	r3, #32
 8003388:	d000      	beq.n	800338c <HAL_UART_Transmit+0x1c>
 800338a:	e097      	b.n	80034bc <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_UART_Transmit+0x2a>
 8003392:	1dbb      	adds	r3, r7, #6
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e08f      	b.n	80034be <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	015b      	lsls	r3, r3, #5
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d109      	bne.n	80033be <HAL_UART_Transmit+0x4e>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d105      	bne.n	80033be <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2201      	movs	r2, #1
 80033b6:	4013      	ands	r3, r2
 80033b8:	d001      	beq.n	80033be <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07f      	b.n	80034be <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2280      	movs	r2, #128	; 0x80
 80033c2:	5c9b      	ldrb	r3, [r3, r2]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_UART_Transmit+0x5c>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e078      	b.n	80034be <HAL_UART_Transmit+0x14e>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	2101      	movs	r1, #1
 80033d2:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	228c      	movs	r2, #140	; 0x8c
 80033d8:	2100      	movs	r1, #0
 80033da:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2284      	movs	r2, #132	; 0x84
 80033e0:	2121      	movs	r1, #33	; 0x21
 80033e2:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033e4:	f7fd fd9c 	bl	8000f20 <HAL_GetTick>
 80033e8:	0003      	movs	r3, r0
 80033ea:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1dba      	adds	r2, r7, #6
 80033f0:	2154      	movs	r1, #84	; 0x54
 80033f2:	8812      	ldrh	r2, [r2, #0]
 80033f4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1dba      	adds	r2, r7, #6
 80033fa:	2156      	movs	r1, #86	; 0x56
 80033fc:	8812      	ldrh	r2, [r2, #0]
 80033fe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	429a      	cmp	r2, r3
 800340a:	d108      	bne.n	800341e <HAL_UART_Transmit+0xae>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	e003      	b.n	8003426 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800342e:	e02c      	b.n	800348a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	0013      	movs	r3, r2
 800343a:	2200      	movs	r2, #0
 800343c:	2180      	movs	r1, #128	; 0x80
 800343e:	f000 fc1d 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 8003442:	1e03      	subs	r3, r0, #0
 8003444:	d001      	beq.n	800344a <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e039      	b.n	80034be <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	001a      	movs	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	05d2      	lsls	r2, r2, #23
 800345c:	0dd2      	lsrs	r2, r2, #23
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	3302      	adds	r3, #2
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	e007      	b.n	8003478 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3301      	adds	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2256      	movs	r2, #86	; 0x56
 800347c:	5a9b      	ldrh	r3, [r3, r2]
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b299      	uxth	r1, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2256      	movs	r2, #86	; 0x56
 8003488:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2256      	movs	r2, #86	; 0x56
 800348e:	5a9b      	ldrh	r3, [r3, r2]
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1cc      	bne.n	8003430 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	0013      	movs	r3, r2
 80034a0:	2200      	movs	r2, #0
 80034a2:	2140      	movs	r1, #64	; 0x40
 80034a4:	f000 fbea 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e006      	b.n	80034be <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2284      	movs	r2, #132	; 0x84
 80034b4:	2120      	movs	r1, #32
 80034b6:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e000      	b.n	80034be <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
  }
}
 80034be:	0018      	movs	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b008      	add	sp, #32
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c8:	b5b0      	push	{r4, r5, r7, lr}
 80034ca:	b090      	sub	sp, #64	; 0x40
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d0:	231a      	movs	r3, #26
 80034d2:	2220      	movs	r2, #32
 80034d4:	4694      	mov	ip, r2
 80034d6:	44bc      	add	ip, r7
 80034d8:	4463      	add	r3, ip
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4ab9      	ldr	r2, [pc, #740]	; (80037e4 <UART_SetConfig+0x31c>)
 80034fe:	4013      	ands	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003508:	430b      	orrs	r3, r1
 800350a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4ab5      	ldr	r2, [pc, #724]	; (80037e8 <UART_SetConfig+0x320>)
 8003514:	4013      	ands	r3, r2
 8003516:	0018      	movs	r0, r3
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	68d9      	ldr	r1, [r3, #12]
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	0003      	movs	r3, r0
 8003522:	430b      	orrs	r3, r1
 8003524:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4aae      	ldr	r2, [pc, #696]	; (80037ec <UART_SetConfig+0x324>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800353c:	4313      	orrs	r3, r2
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	4aaa      	ldr	r2, [pc, #680]	; (80037f0 <UART_SetConfig+0x328>)
 8003548:	4013      	ands	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003552:	430b      	orrs	r3, r1
 8003554:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	220f      	movs	r2, #15
 800355e:	4393      	bics	r3, r2
 8003560:	0018      	movs	r0, r3
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	0003      	movs	r3, r0
 800356c:	430b      	orrs	r3, r1
 800356e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a9f      	ldr	r2, [pc, #636]	; (80037f4 <UART_SetConfig+0x32c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d136      	bne.n	80035e8 <UART_SetConfig+0x120>
 800357a:	4b9f      	ldr	r3, [pc, #636]	; (80037f8 <UART_SetConfig+0x330>)
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	2203      	movs	r2, #3
 8003580:	4013      	ands	r3, r2
 8003582:	2b03      	cmp	r3, #3
 8003584:	d020      	beq.n	80035c8 <UART_SetConfig+0x100>
 8003586:	d827      	bhi.n	80035d8 <UART_SetConfig+0x110>
 8003588:	2b02      	cmp	r3, #2
 800358a:	d00d      	beq.n	80035a8 <UART_SetConfig+0xe0>
 800358c:	d824      	bhi.n	80035d8 <UART_SetConfig+0x110>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <UART_SetConfig+0xd0>
 8003592:	2b01      	cmp	r3, #1
 8003594:	d010      	beq.n	80035b8 <UART_SetConfig+0xf0>
 8003596:	e01f      	b.n	80035d8 <UART_SetConfig+0x110>
 8003598:	231b      	movs	r3, #27
 800359a:	2220      	movs	r2, #32
 800359c:	4694      	mov	ip, r2
 800359e:	44bc      	add	ip, r7
 80035a0:	4463      	add	r3, ip
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e0c5      	b.n	8003734 <UART_SetConfig+0x26c>
 80035a8:	231b      	movs	r3, #27
 80035aa:	2220      	movs	r2, #32
 80035ac:	4694      	mov	ip, r2
 80035ae:	44bc      	add	ip, r7
 80035b0:	4463      	add	r3, ip
 80035b2:	2202      	movs	r2, #2
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e0bd      	b.n	8003734 <UART_SetConfig+0x26c>
 80035b8:	231b      	movs	r3, #27
 80035ba:	2220      	movs	r2, #32
 80035bc:	4694      	mov	ip, r2
 80035be:	44bc      	add	ip, r7
 80035c0:	4463      	add	r3, ip
 80035c2:	2204      	movs	r2, #4
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e0b5      	b.n	8003734 <UART_SetConfig+0x26c>
 80035c8:	231b      	movs	r3, #27
 80035ca:	2220      	movs	r2, #32
 80035cc:	4694      	mov	ip, r2
 80035ce:	44bc      	add	ip, r7
 80035d0:	4463      	add	r3, ip
 80035d2:	2208      	movs	r2, #8
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e0ad      	b.n	8003734 <UART_SetConfig+0x26c>
 80035d8:	231b      	movs	r3, #27
 80035da:	2220      	movs	r2, #32
 80035dc:	4694      	mov	ip, r2
 80035de:	44bc      	add	ip, r7
 80035e0:	4463      	add	r3, ip
 80035e2:	2210      	movs	r2, #16
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e0a5      	b.n	8003734 <UART_SetConfig+0x26c>
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a83      	ldr	r2, [pc, #524]	; (80037fc <UART_SetConfig+0x334>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d136      	bne.n	8003660 <UART_SetConfig+0x198>
 80035f2:	4b81      	ldr	r3, [pc, #516]	; (80037f8 <UART_SetConfig+0x330>)
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	220c      	movs	r2, #12
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d020      	beq.n	8003640 <UART_SetConfig+0x178>
 80035fe:	d827      	bhi.n	8003650 <UART_SetConfig+0x188>
 8003600:	2b08      	cmp	r3, #8
 8003602:	d00d      	beq.n	8003620 <UART_SetConfig+0x158>
 8003604:	d824      	bhi.n	8003650 <UART_SetConfig+0x188>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <UART_SetConfig+0x148>
 800360a:	2b04      	cmp	r3, #4
 800360c:	d010      	beq.n	8003630 <UART_SetConfig+0x168>
 800360e:	e01f      	b.n	8003650 <UART_SetConfig+0x188>
 8003610:	231b      	movs	r3, #27
 8003612:	2220      	movs	r2, #32
 8003614:	4694      	mov	ip, r2
 8003616:	44bc      	add	ip, r7
 8003618:	4463      	add	r3, ip
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	e089      	b.n	8003734 <UART_SetConfig+0x26c>
 8003620:	231b      	movs	r3, #27
 8003622:	2220      	movs	r2, #32
 8003624:	4694      	mov	ip, r2
 8003626:	44bc      	add	ip, r7
 8003628:	4463      	add	r3, ip
 800362a:	2202      	movs	r2, #2
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	e081      	b.n	8003734 <UART_SetConfig+0x26c>
 8003630:	231b      	movs	r3, #27
 8003632:	2220      	movs	r2, #32
 8003634:	4694      	mov	ip, r2
 8003636:	44bc      	add	ip, r7
 8003638:	4463      	add	r3, ip
 800363a:	2204      	movs	r2, #4
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e079      	b.n	8003734 <UART_SetConfig+0x26c>
 8003640:	231b      	movs	r3, #27
 8003642:	2220      	movs	r2, #32
 8003644:	4694      	mov	ip, r2
 8003646:	44bc      	add	ip, r7
 8003648:	4463      	add	r3, ip
 800364a:	2208      	movs	r2, #8
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e071      	b.n	8003734 <UART_SetConfig+0x26c>
 8003650:	231b      	movs	r3, #27
 8003652:	2220      	movs	r2, #32
 8003654:	4694      	mov	ip, r2
 8003656:	44bc      	add	ip, r7
 8003658:	4463      	add	r3, ip
 800365a:	2210      	movs	r2, #16
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e069      	b.n	8003734 <UART_SetConfig+0x26c>
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a66      	ldr	r2, [pc, #408]	; (8003800 <UART_SetConfig+0x338>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d107      	bne.n	800367a <UART_SetConfig+0x1b2>
 800366a:	231b      	movs	r3, #27
 800366c:	2220      	movs	r2, #32
 800366e:	4694      	mov	ip, r2
 8003670:	44bc      	add	ip, r7
 8003672:	4463      	add	r3, ip
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e05c      	b.n	8003734 <UART_SetConfig+0x26c>
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a61      	ldr	r2, [pc, #388]	; (8003804 <UART_SetConfig+0x33c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d107      	bne.n	8003694 <UART_SetConfig+0x1cc>
 8003684:	231b      	movs	r3, #27
 8003686:	2220      	movs	r2, #32
 8003688:	4694      	mov	ip, r2
 800368a:	44bc      	add	ip, r7
 800368c:	4463      	add	r3, ip
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e04f      	b.n	8003734 <UART_SetConfig+0x26c>
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a54      	ldr	r2, [pc, #336]	; (80037ec <UART_SetConfig+0x324>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d143      	bne.n	8003726 <UART_SetConfig+0x25e>
 800369e:	4b56      	ldr	r3, [pc, #344]	; (80037f8 <UART_SetConfig+0x330>)
 80036a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036a2:	23c0      	movs	r3, #192	; 0xc0
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	4013      	ands	r3, r2
 80036a8:	22c0      	movs	r2, #192	; 0xc0
 80036aa:	0112      	lsls	r2, r2, #4
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d02a      	beq.n	8003706 <UART_SetConfig+0x23e>
 80036b0:	22c0      	movs	r2, #192	; 0xc0
 80036b2:	0112      	lsls	r2, r2, #4
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d82e      	bhi.n	8003716 <UART_SetConfig+0x24e>
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	4293      	cmp	r3, r2
 80036be:	d012      	beq.n	80036e6 <UART_SetConfig+0x21e>
 80036c0:	2280      	movs	r2, #128	; 0x80
 80036c2:	0112      	lsls	r2, r2, #4
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d826      	bhi.n	8003716 <UART_SetConfig+0x24e>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <UART_SetConfig+0x20e>
 80036cc:	2280      	movs	r2, #128	; 0x80
 80036ce:	00d2      	lsls	r2, r2, #3
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d010      	beq.n	80036f6 <UART_SetConfig+0x22e>
 80036d4:	e01f      	b.n	8003716 <UART_SetConfig+0x24e>
 80036d6:	231b      	movs	r3, #27
 80036d8:	2220      	movs	r2, #32
 80036da:	4694      	mov	ip, r2
 80036dc:	44bc      	add	ip, r7
 80036de:	4463      	add	r3, ip
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	e026      	b.n	8003734 <UART_SetConfig+0x26c>
 80036e6:	231b      	movs	r3, #27
 80036e8:	2220      	movs	r2, #32
 80036ea:	4694      	mov	ip, r2
 80036ec:	44bc      	add	ip, r7
 80036ee:	4463      	add	r3, ip
 80036f0:	2202      	movs	r2, #2
 80036f2:	701a      	strb	r2, [r3, #0]
 80036f4:	e01e      	b.n	8003734 <UART_SetConfig+0x26c>
 80036f6:	231b      	movs	r3, #27
 80036f8:	2220      	movs	r2, #32
 80036fa:	4694      	mov	ip, r2
 80036fc:	44bc      	add	ip, r7
 80036fe:	4463      	add	r3, ip
 8003700:	2204      	movs	r2, #4
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e016      	b.n	8003734 <UART_SetConfig+0x26c>
 8003706:	231b      	movs	r3, #27
 8003708:	2220      	movs	r2, #32
 800370a:	4694      	mov	ip, r2
 800370c:	44bc      	add	ip, r7
 800370e:	4463      	add	r3, ip
 8003710:	2208      	movs	r2, #8
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	e00e      	b.n	8003734 <UART_SetConfig+0x26c>
 8003716:	231b      	movs	r3, #27
 8003718:	2220      	movs	r2, #32
 800371a:	4694      	mov	ip, r2
 800371c:	44bc      	add	ip, r7
 800371e:	4463      	add	r3, ip
 8003720:	2210      	movs	r2, #16
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e006      	b.n	8003734 <UART_SetConfig+0x26c>
 8003726:	231b      	movs	r3, #27
 8003728:	2220      	movs	r2, #32
 800372a:	4694      	mov	ip, r2
 800372c:	44bc      	add	ip, r7
 800372e:	4463      	add	r3, ip
 8003730:	2210      	movs	r2, #16
 8003732:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <UART_SetConfig+0x324>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d000      	beq.n	8003740 <UART_SetConfig+0x278>
 800373e:	e0ad      	b.n	800389c <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003740:	231b      	movs	r3, #27
 8003742:	2220      	movs	r2, #32
 8003744:	4694      	mov	ip, r2
 8003746:	44bc      	add	ip, r7
 8003748:	4463      	add	r3, ip
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d015      	beq.n	800377c <UART_SetConfig+0x2b4>
 8003750:	dc18      	bgt.n	8003784 <UART_SetConfig+0x2bc>
 8003752:	2b04      	cmp	r3, #4
 8003754:	d00d      	beq.n	8003772 <UART_SetConfig+0x2aa>
 8003756:	dc15      	bgt.n	8003784 <UART_SetConfig+0x2bc>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <UART_SetConfig+0x29a>
 800375c:	2b02      	cmp	r3, #2
 800375e:	d005      	beq.n	800376c <UART_SetConfig+0x2a4>
 8003760:	e010      	b.n	8003784 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003762:	f7ff fa9b 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8003766:	0003      	movs	r3, r0
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800376a:	e015      	b.n	8003798 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800376c:	4b26      	ldr	r3, [pc, #152]	; (8003808 <UART_SetConfig+0x340>)
 800376e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003770:	e012      	b.n	8003798 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003772:	f7ff fa07 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8003776:	0003      	movs	r3, r0
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800377a:	e00d      	b.n	8003798 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003782:	e009      	b.n	8003798 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003788:	231a      	movs	r3, #26
 800378a:	2220      	movs	r2, #32
 800378c:	4694      	mov	ip, r2
 800378e:	44bc      	add	ip, r7
 8003790:	4463      	add	r3, ip
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
        break;
 8003796:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	2b00      	cmp	r3, #0
 800379c:	d100      	bne.n	80037a0 <UART_SetConfig+0x2d8>
 800379e:	e153      	b.n	8003a48 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a4:	4b19      	ldr	r3, [pc, #100]	; (800380c <UART_SetConfig+0x344>)
 80037a6:	0052      	lsls	r2, r2, #1
 80037a8:	5ad3      	ldrh	r3, [r2, r3]
 80037aa:	0019      	movs	r1, r3
 80037ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037ae:	f7fc fcb1 	bl	8000114 <__udivsi3>
 80037b2:	0003      	movs	r3, r0
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	0013      	movs	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	189b      	adds	r3, r3, r2
 80037c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d305      	bcc.n	80037d2 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d91e      	bls.n	8003810 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80037d2:	231a      	movs	r3, #26
 80037d4:	2220      	movs	r2, #32
 80037d6:	4694      	mov	ip, r2
 80037d8:	44bc      	add	ip, r7
 80037da:	4463      	add	r3, ip
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e132      	b.n	8003a48 <UART_SetConfig+0x580>
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	cfff69f3 	.word	0xcfff69f3
 80037e8:	ffffcfff 	.word	0xffffcfff
 80037ec:	40008000 	.word	0x40008000
 80037f0:	11fff4ff 	.word	0x11fff4ff
 80037f4:	40013800 	.word	0x40013800
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40004400 	.word	0x40004400
 8003800:	40004800 	.word	0x40004800
 8003804:	40004c00 	.word	0x40004c00
 8003808:	00f42400 	.word	0x00f42400
 800380c:	080041d8 	.word	0x080041d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800381c:	4b96      	ldr	r3, [pc, #600]	; (8003a78 <UART_SetConfig+0x5b0>)
 800381e:	0052      	lsls	r2, r2, #1
 8003820:	5ad3      	ldrh	r3, [r2, r3]
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	69b8      	ldr	r0, [r7, #24]
 800382e:	69f9      	ldr	r1, [r7, #28]
 8003830:	f7fc fde6 	bl	8000400 <__aeabi_uldivmod>
 8003834:	0002      	movs	r2, r0
 8003836:	000b      	movs	r3, r1
 8003838:	0e11      	lsrs	r1, r2, #24
 800383a:	021d      	lsls	r5, r3, #8
 800383c:	430d      	orrs	r5, r1
 800383e:	0214      	lsls	r4, r2, #8
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68b8      	ldr	r0, [r7, #8]
 800384e:	68f9      	ldr	r1, [r7, #12]
 8003850:	1900      	adds	r0, r0, r4
 8003852:	4169      	adcs	r1, r5
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f7fc fdcd 	bl	8000400 <__aeabi_uldivmod>
 8003866:	0002      	movs	r2, r0
 8003868:	000b      	movs	r3, r1
 800386a:	0013      	movs	r3, r2
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800386e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003870:	23c0      	movs	r3, #192	; 0xc0
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	429a      	cmp	r2, r3
 8003876:	d309      	bcc.n	800388c <UART_SetConfig+0x3c4>
 8003878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	035b      	lsls	r3, r3, #13
 800387e:	429a      	cmp	r2, r3
 8003880:	d204      	bcs.n	800388c <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	e0dd      	b.n	8003a48 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 800388c:	231a      	movs	r3, #26
 800388e:	2220      	movs	r2, #32
 8003890:	4694      	mov	ip, r2
 8003892:	44bc      	add	ip, r7
 8003894:	4463      	add	r3, ip
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e0d5      	b.n	8003a48 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d000      	beq.n	80038aa <UART_SetConfig+0x3e2>
 80038a8:	e073      	b.n	8003992 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80038aa:	231b      	movs	r3, #27
 80038ac:	2220      	movs	r2, #32
 80038ae:	4694      	mov	ip, r2
 80038b0:	44bc      	add	ip, r7
 80038b2:	4463      	add	r3, ip
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d015      	beq.n	80038e6 <UART_SetConfig+0x41e>
 80038ba:	dc18      	bgt.n	80038ee <UART_SetConfig+0x426>
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d00d      	beq.n	80038dc <UART_SetConfig+0x414>
 80038c0:	dc15      	bgt.n	80038ee <UART_SetConfig+0x426>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <UART_SetConfig+0x404>
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d005      	beq.n	80038d6 <UART_SetConfig+0x40e>
 80038ca:	e010      	b.n	80038ee <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038cc:	f7ff f9e6 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 80038d0:	0003      	movs	r3, r0
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038d4:	e015      	b.n	8003902 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d6:	4b69      	ldr	r3, [pc, #420]	; (8003a7c <UART_SetConfig+0x5b4>)
 80038d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038da:	e012      	b.n	8003902 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038dc:	f7ff f952 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 80038e0:	0003      	movs	r3, r0
 80038e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038e4:	e00d      	b.n	8003902 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038ec:	e009      	b.n	8003902 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80038f2:	231a      	movs	r3, #26
 80038f4:	2220      	movs	r2, #32
 80038f6:	4694      	mov	ip, r2
 80038f8:	44bc      	add	ip, r7
 80038fa:	4463      	add	r3, ip
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
        break;
 8003900:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	2b00      	cmp	r3, #0
 8003906:	d100      	bne.n	800390a <UART_SetConfig+0x442>
 8003908:	e09e      	b.n	8003a48 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800390e:	4b5a      	ldr	r3, [pc, #360]	; (8003a78 <UART_SetConfig+0x5b0>)
 8003910:	0052      	lsls	r2, r2, #1
 8003912:	5ad3      	ldrh	r3, [r2, r3]
 8003914:	0019      	movs	r1, r3
 8003916:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003918:	f7fc fbfc 	bl	8000114 <__udivsi3>
 800391c:	0003      	movs	r3, r0
 800391e:	005a      	lsls	r2, r3, #1
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	18d2      	adds	r2, r2, r3
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0019      	movs	r1, r3
 800392e:	0010      	movs	r0, r2
 8003930:	f7fc fbf0 	bl	8000114 <__udivsi3>
 8003934:	0003      	movs	r3, r0
 8003936:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	2b0f      	cmp	r3, #15
 800393c:	d921      	bls.n	8003982 <UART_SetConfig+0x4ba>
 800393e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	025b      	lsls	r3, r3, #9
 8003944:	429a      	cmp	r2, r3
 8003946:	d21c      	bcs.n	8003982 <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	b29a      	uxth	r2, r3
 800394c:	200e      	movs	r0, #14
 800394e:	2420      	movs	r4, #32
 8003950:	193b      	adds	r3, r7, r4
 8003952:	181b      	adds	r3, r3, r0
 8003954:	210f      	movs	r1, #15
 8003956:	438a      	bics	r2, r1
 8003958:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	085b      	lsrs	r3, r3, #1
 800395e:	b29b      	uxth	r3, r3
 8003960:	2207      	movs	r2, #7
 8003962:	4013      	ands	r3, r2
 8003964:	b299      	uxth	r1, r3
 8003966:	193b      	adds	r3, r7, r4
 8003968:	181b      	adds	r3, r3, r0
 800396a:	193a      	adds	r2, r7, r4
 800396c:	1812      	adds	r2, r2, r0
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	193a      	adds	r2, r7, r4
 800397a:	1812      	adds	r2, r2, r0
 800397c:	8812      	ldrh	r2, [r2, #0]
 800397e:	60da      	str	r2, [r3, #12]
 8003980:	e062      	b.n	8003a48 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8003982:	231a      	movs	r3, #26
 8003984:	2220      	movs	r2, #32
 8003986:	4694      	mov	ip, r2
 8003988:	44bc      	add	ip, r7
 800398a:	4463      	add	r3, ip
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e05a      	b.n	8003a48 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003992:	231b      	movs	r3, #27
 8003994:	2220      	movs	r2, #32
 8003996:	4694      	mov	ip, r2
 8003998:	44bc      	add	ip, r7
 800399a:	4463      	add	r3, ip
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d015      	beq.n	80039ce <UART_SetConfig+0x506>
 80039a2:	dc18      	bgt.n	80039d6 <UART_SetConfig+0x50e>
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d00d      	beq.n	80039c4 <UART_SetConfig+0x4fc>
 80039a8:	dc15      	bgt.n	80039d6 <UART_SetConfig+0x50e>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <UART_SetConfig+0x4ec>
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d005      	beq.n	80039be <UART_SetConfig+0x4f6>
 80039b2:	e010      	b.n	80039d6 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b4:	f7ff f972 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 80039b8:	0003      	movs	r3, r0
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039bc:	e015      	b.n	80039ea <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039be:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <UART_SetConfig+0x5b4>)
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039c2:	e012      	b.n	80039ea <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c4:	f7ff f8de 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 80039c8:	0003      	movs	r3, r0
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039cc:	e00d      	b.n	80039ea <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039d4:	e009      	b.n	80039ea <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80039da:	231a      	movs	r3, #26
 80039dc:	2220      	movs	r2, #32
 80039de:	4694      	mov	ip, r2
 80039e0:	44bc      	add	ip, r7
 80039e2:	4463      	add	r3, ip
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
        break;
 80039e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d02b      	beq.n	8003a48 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f4:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <UART_SetConfig+0x5b0>)
 80039f6:	0052      	lsls	r2, r2, #1
 80039f8:	5ad3      	ldrh	r3, [r2, r3]
 80039fa:	0019      	movs	r1, r3
 80039fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039fe:	f7fc fb89 	bl	8000114 <__udivsi3>
 8003a02:	0003      	movs	r3, r0
 8003a04:	001a      	movs	r2, r3
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	18d2      	adds	r2, r2, r3
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0019      	movs	r1, r3
 8003a14:	0010      	movs	r0, r2
 8003a16:	f7fc fb7d 	bl	8000114 <__udivsi3>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	d90a      	bls.n	8003a3a <UART_SetConfig+0x572>
 8003a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	025b      	lsls	r3, r3, #9
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d205      	bcs.n	8003a3a <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	e006      	b.n	8003a48 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8003a3a:	231a      	movs	r3, #26
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	4694      	mov	ip, r2
 8003a40:	44bc      	add	ip, r7
 8003a42:	4463      	add	r3, ip
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	226a      	movs	r2, #106	; 0x6a
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	2268      	movs	r2, #104	; 0x68
 8003a54:	2101      	movs	r1, #1
 8003a56:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	2200      	movs	r2, #0
 8003a62:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003a64:	231a      	movs	r3, #26
 8003a66:	2220      	movs	r2, #32
 8003a68:	4694      	mov	ip, r2
 8003a6a:	44bc      	add	ip, r7
 8003a6c:	4463      	add	r3, ip
 8003a6e:	781b      	ldrb	r3, [r3, #0]
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b010      	add	sp, #64	; 0x40
 8003a76:	bdb0      	pop	{r4, r5, r7, pc}
 8003a78:	080041d8 	.word	0x080041d8
 8003a7c:	00f42400 	.word	0x00f42400

08003a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d00b      	beq.n	8003aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a4a      	ldr	r2, [pc, #296]	; (8003bc4 <UART_AdvFeatureConfig+0x144>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	0019      	movs	r1, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	2202      	movs	r2, #2
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d00b      	beq.n	8003acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4a43      	ldr	r2, [pc, #268]	; (8003bc8 <UART_AdvFeatureConfig+0x148>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	0019      	movs	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d00b      	beq.n	8003aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <UART_AdvFeatureConfig+0x14c>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	2208      	movs	r2, #8
 8003af4:	4013      	ands	r3, r2
 8003af6:	d00b      	beq.n	8003b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4a34      	ldr	r2, [pc, #208]	; (8003bd0 <UART_AdvFeatureConfig+0x150>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	2210      	movs	r2, #16
 8003b16:	4013      	ands	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a2c      	ldr	r2, [pc, #176]	; (8003bd4 <UART_AdvFeatureConfig+0x154>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	2220      	movs	r2, #32
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4a25      	ldr	r2, [pc, #148]	; (8003bd8 <UART_AdvFeatureConfig+0x158>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	2240      	movs	r2, #64	; 0x40
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d01d      	beq.n	8003b9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <UART_AdvFeatureConfig+0x15c>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	0019      	movs	r1, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	035b      	lsls	r3, r3, #13
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d10b      	bne.n	8003b9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <UART_AdvFeatureConfig+0x160>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d00b      	beq.n	8003bbc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4a0e      	ldr	r2, [pc, #56]	; (8003be4 <UART_AdvFeatureConfig+0x164>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	0019      	movs	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	fffdffff 	.word	0xfffdffff
 8003bc8:	fffeffff 	.word	0xfffeffff
 8003bcc:	fffbffff 	.word	0xfffbffff
 8003bd0:	ffff7fff 	.word	0xffff7fff
 8003bd4:	ffffefff 	.word	0xffffefff
 8003bd8:	ffffdfff 	.word	0xffffdfff
 8003bdc:	ffefffff 	.word	0xffefffff
 8003be0:	ff9fffff 	.word	0xff9fffff
 8003be4:	fff7ffff 	.word	0xfff7ffff

08003be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	228c      	movs	r2, #140	; 0x8c
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bf8:	f7fd f992 	bl	8000f20 <HAL_GetTick>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2208      	movs	r2, #8
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d10c      	bne.n	8003c28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2280      	movs	r2, #128	; 0x80
 8003c12:	0391      	lsls	r1, r2, #14
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <UART_CheckIdleState+0x90>)
 8003c18:	9200      	str	r2, [sp, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f000 f82e 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 8003c20:	1e03      	subs	r3, r0, #0
 8003c22:	d001      	beq.n	8003c28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e023      	b.n	8003c70 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d10c      	bne.n	8003c50 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	03d1      	lsls	r1, r2, #15
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <UART_CheckIdleState+0x90>)
 8003c40:	9200      	str	r2, [sp, #0]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f000 f81a 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 8003c48:	1e03      	subs	r3, r0, #0
 8003c4a:	d001      	beq.n	8003c50 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e00f      	b.n	8003c70 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2284      	movs	r2, #132	; 0x84
 8003c54:	2120      	movs	r1, #32
 8003c56:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2288      	movs	r2, #136	; 0x88
 8003c5c:	2120      	movs	r1, #32
 8003c5e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2280      	movs	r2, #128	; 0x80
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	0018      	movs	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b004      	add	sp, #16
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	01ffffff 	.word	0x01ffffff

08003c7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b094      	sub	sp, #80	; 0x50
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	1dfb      	adds	r3, r7, #7
 8003c8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8c:	e0a7      	b.n	8003dde <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c90:	3301      	adds	r3, #1
 8003c92:	d100      	bne.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003c94:	e0a3      	b.n	8003dde <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c96:	f7fd f943 	bl	8000f20 <HAL_GetTick>
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d302      	bcc.n	8003cac <UART_WaitOnFlagUntilTimeout+0x30>
 8003ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d13f      	bne.n	8003d2c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cac:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	494e      	ldr	r1, [pc, #312]	; (8003e08 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003cce:	400a      	ands	r2, r1
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	f383 8810 	msr	PRIMASK, r3
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cde:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce8:	2301      	movs	r3, #1
 8003cea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	f383 8810 	msr	PRIMASK, r3
}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2101      	movs	r1, #1
 8003d00:	438a      	bics	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0a:	f383 8810 	msr	PRIMASK, r3
}
 8003d0e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2284      	movs	r2, #132	; 0x84
 8003d14:	2120      	movs	r1, #32
 8003d16:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2288      	movs	r2, #136	; 0x88
 8003d1c:	2120      	movs	r1, #32
 8003d1e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2280      	movs	r2, #128	; 0x80
 8003d24:	2100      	movs	r1, #0
 8003d26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e069      	b.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2204      	movs	r2, #4
 8003d34:	4013      	ands	r3, r2
 8003d36:	d052      	beq.n	8003dde <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69da      	ldr	r2, [r3, #28]
 8003d3e:	2380      	movs	r3, #128	; 0x80
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	401a      	ands	r2, r3
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d148      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d56:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5a:	613b      	str	r3, [r7, #16]
  return(result);
 8003d5c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f383 8810 	msr	PRIMASK, r3
}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4924      	ldr	r1, [pc, #144]	; (8003e08 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003d78:	400a      	ands	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f383 8810 	msr	PRIMASK, r3
}
 8003d86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d88:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d8e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d92:	2301      	movs	r3, #1
 8003d94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f383 8810 	msr	PRIMASK, r3
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	438a      	bics	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	f383 8810 	msr	PRIMASK, r3
}
 8003db8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2284      	movs	r2, #132	; 0x84
 8003dbe:	2120      	movs	r1, #32
 8003dc0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2288      	movs	r2, #136	; 0x88
 8003dc6:	2120      	movs	r1, #32
 8003dc8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	228c      	movs	r2, #140	; 0x8c
 8003dce:	2120      	movs	r1, #32
 8003dd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2280      	movs	r2, #128	; 0x80
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e010      	b.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	4013      	ands	r3, r2
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	425a      	negs	r2, r3
 8003dee:	4153      	adcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	001a      	movs	r2, r3
 8003df4:	1dfb      	adds	r3, r7, #7
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d100      	bne.n	8003dfe <UART_WaitOnFlagUntilTimeout+0x182>
 8003dfc:	e747      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b014      	add	sp, #80	; 0x50
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	fffffe5f 	.word	0xfffffe5f

08003e0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	5c9b      	ldrb	r3, [r3, r2]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_UARTEx_DisableFifoMode+0x16>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e027      	b.n	8003e72 <HAL_UARTEx_DisableFifoMode+0x66>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	2101      	movs	r1, #1
 8003e28:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2284      	movs	r2, #132	; 0x84
 8003e2e:	2124      	movs	r1, #36	; 0x24
 8003e30:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2101      	movs	r1, #1
 8003e46:	438a      	bics	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4a0b      	ldr	r2, [pc, #44]	; (8003e7c <HAL_UARTEx_DisableFifoMode+0x70>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2284      	movs	r2, #132	; 0x84
 8003e64:	2120      	movs	r1, #32
 8003e66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2280      	movs	r2, #128	; 0x80
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	0018      	movs	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b004      	add	sp, #16
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	dfffffff 	.word	0xdfffffff

08003e80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2280      	movs	r2, #128	; 0x80
 8003e8e:	5c9b      	ldrb	r3, [r3, r2]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e02e      	b.n	8003ef6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2284      	movs	r2, #132	; 0x84
 8003ea4:	2124      	movs	r1, #36	; 0x24
 8003ea6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2101      	movs	r1, #1
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	08d9      	lsrs	r1, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 f854 	bl	8003f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2284      	movs	r2, #132	; 0x84
 8003ee8:	2120      	movs	r1, #32
 8003eea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2280      	movs	r2, #128	; 0x80
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b004      	add	sp, #16
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2280      	movs	r2, #128	; 0x80
 8003f0e:	5c9b      	ldrb	r3, [r3, r2]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e02f      	b.n	8003f78 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2284      	movs	r2, #132	; 0x84
 8003f24:	2124      	movs	r1, #36	; 0x24
 8003f26:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	438a      	bics	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	4a0e      	ldr	r2, [pc, #56]	; (8003f80 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f000 f813 	bl	8003f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2284      	movs	r2, #132	; 0x84
 8003f6a:	2120      	movs	r1, #32
 8003f6c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	2100      	movs	r1, #0
 8003f74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	0018      	movs	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b004      	add	sp, #16
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	f1ffffff 	.word	0xf1ffffff

08003f84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d108      	bne.n	8003fa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	226a      	movs	r2, #106	; 0x6a
 8003f98:	2101      	movs	r1, #1
 8003f9a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2268      	movs	r2, #104	; 0x68
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003fa4:	e043      	b.n	800402e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003fa6:	260f      	movs	r6, #15
 8003fa8:	19bb      	adds	r3, r7, r6
 8003faa:	2208      	movs	r2, #8
 8003fac:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003fae:	200e      	movs	r0, #14
 8003fb0:	183b      	adds	r3, r7, r0
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	0e5b      	lsrs	r3, r3, #25
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	240d      	movs	r4, #13
 8003fc2:	193b      	adds	r3, r7, r4
 8003fc4:	2107      	movs	r1, #7
 8003fc6:	400a      	ands	r2, r1
 8003fc8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	0f5b      	lsrs	r3, r3, #29
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	250c      	movs	r5, #12
 8003fd6:	197b      	adds	r3, r7, r5
 8003fd8:	2107      	movs	r1, #7
 8003fda:	400a      	ands	r2, r1
 8003fdc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fde:	183b      	adds	r3, r7, r0
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	197a      	adds	r2, r7, r5
 8003fe4:	7812      	ldrb	r2, [r2, #0]
 8003fe6:	4914      	ldr	r1, [pc, #80]	; (8004038 <UARTEx_SetNbDataToProcess+0xb4>)
 8003fe8:	5c8a      	ldrb	r2, [r1, r2]
 8003fea:	435a      	muls	r2, r3
 8003fec:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	4a12      	ldr	r2, [pc, #72]	; (800403c <UARTEx_SetNbDataToProcess+0xb8>)
 8003ff4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	f7fc f916 	bl	8000228 <__divsi3>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	b299      	uxth	r1, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	226a      	movs	r2, #106	; 0x6a
 8004004:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004006:	19bb      	adds	r3, r7, r6
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	193a      	adds	r2, r7, r4
 800400c:	7812      	ldrb	r2, [r2, #0]
 800400e:	490a      	ldr	r1, [pc, #40]	; (8004038 <UARTEx_SetNbDataToProcess+0xb4>)
 8004010:	5c8a      	ldrb	r2, [r1, r2]
 8004012:	435a      	muls	r2, r3
 8004014:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004016:	193b      	adds	r3, r7, r4
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	4a08      	ldr	r2, [pc, #32]	; (800403c <UARTEx_SetNbDataToProcess+0xb8>)
 800401c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800401e:	0019      	movs	r1, r3
 8004020:	f7fc f902 	bl	8000228 <__divsi3>
 8004024:	0003      	movs	r3, r0
 8004026:	b299      	uxth	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2268      	movs	r2, #104	; 0x68
 800402c:	5299      	strh	r1, [r3, r2]
}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	b005      	add	sp, #20
 8004034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	080041f0 	.word	0x080041f0
 800403c:	080041f8 	.word	0x080041f8

08004040 <__libc_init_array>:
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	2600      	movs	r6, #0
 8004044:	4d0c      	ldr	r5, [pc, #48]	; (8004078 <__libc_init_array+0x38>)
 8004046:	4c0d      	ldr	r4, [pc, #52]	; (800407c <__libc_init_array+0x3c>)
 8004048:	1b64      	subs	r4, r4, r5
 800404a:	10a4      	asrs	r4, r4, #2
 800404c:	42a6      	cmp	r6, r4
 800404e:	d109      	bne.n	8004064 <__libc_init_array+0x24>
 8004050:	2600      	movs	r6, #0
 8004052:	f000 f821 	bl	8004098 <_init>
 8004056:	4d0a      	ldr	r5, [pc, #40]	; (8004080 <__libc_init_array+0x40>)
 8004058:	4c0a      	ldr	r4, [pc, #40]	; (8004084 <__libc_init_array+0x44>)
 800405a:	1b64      	subs	r4, r4, r5
 800405c:	10a4      	asrs	r4, r4, #2
 800405e:	42a6      	cmp	r6, r4
 8004060:	d105      	bne.n	800406e <__libc_init_array+0x2e>
 8004062:	bd70      	pop	{r4, r5, r6, pc}
 8004064:	00b3      	lsls	r3, r6, #2
 8004066:	58eb      	ldr	r3, [r5, r3]
 8004068:	4798      	blx	r3
 800406a:	3601      	adds	r6, #1
 800406c:	e7ee      	b.n	800404c <__libc_init_array+0xc>
 800406e:	00b3      	lsls	r3, r6, #2
 8004070:	58eb      	ldr	r3, [r5, r3]
 8004072:	4798      	blx	r3
 8004074:	3601      	adds	r6, #1
 8004076:	e7f2      	b.n	800405e <__libc_init_array+0x1e>
 8004078:	08004208 	.word	0x08004208
 800407c:	08004208 	.word	0x08004208
 8004080:	08004208 	.word	0x08004208
 8004084:	0800420c 	.word	0x0800420c

08004088 <memset>:
 8004088:	0003      	movs	r3, r0
 800408a:	1882      	adds	r2, r0, r2
 800408c:	4293      	cmp	r3, r2
 800408e:	d100      	bne.n	8004092 <memset+0xa>
 8004090:	4770      	bx	lr
 8004092:	7019      	strb	r1, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	e7f9      	b.n	800408c <memset+0x4>

08004098 <_init>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409e:	bc08      	pop	{r3}
 80040a0:	469e      	mov	lr, r3
 80040a2:	4770      	bx	lr

080040a4 <_fini>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr
