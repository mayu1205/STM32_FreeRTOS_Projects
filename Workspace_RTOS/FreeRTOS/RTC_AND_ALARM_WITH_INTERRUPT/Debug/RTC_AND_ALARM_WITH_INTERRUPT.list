
RTC_AND_ALARM_WITH_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004754  08004754  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004754  08004754  00014754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800475c  0800475c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000070  080047d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080047d4  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001317f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024eb  00000000  00000000  00033217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00035708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000364b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001931d  00000000  00000000  00037180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118ed  00000000  00000000  0005049d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fe2c  00000000  00000000  00061d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101bb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034bc  00000000  00000000  00101c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800465c 	.word	0x0800465c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800465c 	.word	0x0800465c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	1c08      	adds	r0, r1, #0
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <get_time>:
	  //backup register to store time and date
	 // HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32f2);
}

void get_time(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af02      	add	r7, sp, #8
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000646:	0039      	movs	r1, r7
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <get_time+0xa0>)
 800064a:	2200      	movs	r2, #0
 800064c:	0018      	movs	r0, r3
 800064e:	f002 f873 	bl	8002738 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000652:	2514      	movs	r5, #20
 8000654:	1979      	adds	r1, r7, r5
 8000656:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <get_time+0xa0>)
 8000658:	2200      	movs	r2, #0
 800065a:	0018      	movs	r0, r3
 800065c:	f002 f95a 	bl	8002914 <HAL_RTC_GetDate>

/* Display time Format: hh:mm:ss */
 sprintf((char*)time,"%02d:%02d:%02d\r\n",15+gTime.Hours, 19+gTime.Minutes, gTime.Seconds);
 8000660:	003b      	movs	r3, r7
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	330f      	adds	r3, #15
 8000666:	001a      	movs	r2, r3
 8000668:	003b      	movs	r3, r7
 800066a:	785b      	ldrb	r3, [r3, #1]
 800066c:	3313      	adds	r3, #19
 800066e:	001c      	movs	r4, r3
 8000670:	003b      	movs	r3, r7
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	491b      	ldr	r1, [pc, #108]	; (80006e4 <get_time+0xa4>)
 8000676:	481c      	ldr	r0, [pc, #112]	; (80006e8 <get_time+0xa8>)
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	0023      	movs	r3, r4
 800067c:	f003 fbc8 	bl	8003e10 <siprintf>
 HAL_UART_Transmit(&huart2, time, strlen((char*)time), HAL_MAX_DELAY);
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <get_time+0xa8>)
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff fd3e 	bl	8000104 <strlen>
 8000688:	0003      	movs	r3, r0
 800068a:	b29a      	uxth	r2, r3
 800068c:	2301      	movs	r3, #1
 800068e:	425b      	negs	r3, r3
 8000690:	4915      	ldr	r1, [pc, #84]	; (80006e8 <get_time+0xa8>)
 8000692:	4816      	ldr	r0, [pc, #88]	; (80006ec <get_time+0xac>)
 8000694:	f002 fd22 	bl	80030dc <HAL_UART_Transmit>
 //HAL_UART_Transmit(&huart2, "stuck2\r\n", sizeof("stuck2\r\n"), 1000);

 //HAL_UART_Transmit(&huart2, i2cTxData, sizeof(i2cTxData), 1000);

/* Display date Format: dd-mm-yy */
 sprintf((char*)date,"%02d-%02d-%2d\r\n",8+gDate.Date, 9+gDate.Month, 2023 + gDate.Year);
 8000698:	197b      	adds	r3, r7, r5
 800069a:	789b      	ldrb	r3, [r3, #2]
 800069c:	3308      	adds	r3, #8
 800069e:	001a      	movs	r2, r3
 80006a0:	197b      	adds	r3, r7, r5
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	3309      	adds	r3, #9
 80006a6:	001c      	movs	r4, r3
 80006a8:	197b      	adds	r3, r7, r5
 80006aa:	78db      	ldrb	r3, [r3, #3]
 80006ac:	4910      	ldr	r1, [pc, #64]	; (80006f0 <get_time+0xb0>)
 80006ae:	468c      	mov	ip, r1
 80006b0:	4463      	add	r3, ip
 80006b2:	4910      	ldr	r1, [pc, #64]	; (80006f4 <get_time+0xb4>)
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <get_time+0xb8>)
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	0023      	movs	r3, r4
 80006ba:	f003 fba9 	bl	8003e10 <siprintf>
 //HAL_I2C_Master_Receive(&hi2c1, 0, time, strlen((char*)time), HAL_MAX_DELAY);
 HAL_UART_Transmit(&huart2, date, strlen((char*)date), HAL_MAX_DELAY);
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <get_time+0xb8>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f7ff fd1f 	bl	8000104 <strlen>
 80006c6:	0003      	movs	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	2301      	movs	r3, #1
 80006cc:	425b      	negs	r3, r3
 80006ce:	490a      	ldr	r1, [pc, #40]	; (80006f8 <get_time+0xb8>)
 80006d0:	4806      	ldr	r0, [pc, #24]	; (80006ec <get_time+0xac>)
 80006d2:	f002 fd03 	bl	80030dc <HAL_UART_Transmit>



}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b006      	add	sp, #24
 80006dc:	bdb0      	pop	{r4, r5, r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	200000f0 	.word	0x200000f0
 80006e4:	08004674 	.word	0x08004674
 80006e8:	2000011c 	.word	0x2000011c
 80006ec:	20000128 	.word	0x20000128
 80006f0:	000007e7 	.word	0x000007e7
 80006f4:	08004688 	.word	0x08004688
 80006f8:	200001b8 	.word	0x200001b8

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fbab 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f80f 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 f9ab 	bl	8000a64 <MX_GPIO_Init>
  MX_RTC_Init();
 800070e:	f000 f8b7 	bl	8000880 <MX_RTC_Init>
  MX_I2C1_Init();
 8000712:	f000 f875 	bl	8000800 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000716:	f000 f957 	bl	80009c8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 get_time();
 800071a:	f7ff ff91 	bl	8000640 <get_time>
	 HAL_Delay(100);
 800071e:	2064      	movs	r0, #100	; 0x64
 8000720:	f000 fc22 	bl	8000f68 <HAL_Delay>
	 get_time();
 8000724:	e7f9      	b.n	800071a <main+0x1e>
	...

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b0a1      	sub	sp, #132	; 0x84
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	2448      	movs	r4, #72	; 0x48
 8000730:	193b      	adds	r3, r7, r4
 8000732:	0018      	movs	r0, r3
 8000734:	2338      	movs	r3, #56	; 0x38
 8000736:	001a      	movs	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	f003 fb61 	bl	8003e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073e:	2338      	movs	r3, #56	; 0x38
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	0018      	movs	r0, r3
 8000744:	2310      	movs	r3, #16
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f003 fb59 	bl	8003e00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	0018      	movs	r0, r3
 8000752:	2334      	movs	r3, #52	; 0x34
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f003 fb52 	bl	8003e00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	0018      	movs	r0, r3
 8000762:	f000 ffe3 	bl	800172c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	220a      	movs	r2, #10
 800076a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	0052      	lsls	r2, r2, #1
 8000772:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000774:	0021      	movs	r1, r4
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2240      	movs	r2, #64	; 0x40
 8000780:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2201      	movs	r2, #1
 8000786:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	187b      	adds	r3, r7, r1
 8000790:	0018      	movs	r0, r3
 8000792:	f001 f817 	bl	80017c4 <HAL_RCC_OscConfig>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800079a:	f000 f9e3 	bl	8000b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	2138      	movs	r1, #56	; 0x38
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2207      	movs	r2, #7
 80007a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2100      	movs	r1, #0
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fb1b 	bl	8001df8 <HAL_RCC_ClockConfig>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007c6:	f000 f9cd 	bl	8000b64 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <SystemClock_Config+0xd4>)
 80007ce:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 fcb0 	bl	800214c <HAL_RCCEx_PeriphCLKConfig>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007f0:	f000 f9b8 	bl	8000b64 <Error_Handler>
  }
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b021      	add	sp, #132	; 0x84
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	00020022 	.word	0x00020022

08000800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_I2C1_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_I2C1_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_I2C1_Init+0x74>)
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <MX_I2C1_Init+0x7c>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_I2C1_Init+0x74>)
 8000818:	2201      	movs	r2, #1
 800081a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_I2C1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_I2C1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_I2C1_Init+0x74>)
 800083c:	0018      	movs	r0, r3
 800083e:	f000 fe47 	bl	80014d0 <HAL_I2C_Init>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000846:	f000 f98d 	bl	8000b64 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_I2C1_Init+0x74>)
 800084c:	2100      	movs	r1, #0
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fed4 	bl	80015fc <HAL_I2CEx_ConfigAnalogFilter>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000858:	f000 f984 	bl	8000b64 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <MX_I2C1_Init+0x74>)
 800085e:	2100      	movs	r1, #0
 8000860:	0018      	movs	r0, r3
 8000862:	f000 ff17 	bl	8001694 <HAL_I2CEx_ConfigDigitalFilter>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f97b 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000098 	.word	0x20000098
 8000878:	40005400 	.word	0x40005400
 800087c:	00303d5b 	.word	0x00303d5b

08000880 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b090      	sub	sp, #64	; 0x40
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000886:	232c      	movs	r3, #44	; 0x2c
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	0018      	movs	r0, r3
 800088c:	2314      	movs	r3, #20
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f003 fab5 	bl	8003e00 <memset>
  RTC_DateTypeDef sDate = {0};
 8000896:	2328      	movs	r3, #40	; 0x28
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800089e:	003b      	movs	r3, r7
 80008a0:	0018      	movs	r0, r3
 80008a2:	2328      	movs	r3, #40	; 0x28
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f003 faaa 	bl	8003e00 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008ac:	4b44      	ldr	r3, [pc, #272]	; (80009c0 <MX_RTC_Init+0x140>)
 80008ae:	4a45      	ldr	r2, [pc, #276]	; (80009c4 <MX_RTC_Init+0x144>)
 80008b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008b2:	4b43      	ldr	r3, [pc, #268]	; (80009c0 <MX_RTC_Init+0x140>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80008b8:	4b41      	ldr	r3, [pc, #260]	; (80009c0 <MX_RTC_Init+0x140>)
 80008ba:	227f      	movs	r2, #127	; 0x7f
 80008bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80008be:	4b40      	ldr	r3, [pc, #256]	; (80009c0 <MX_RTC_Init+0x140>)
 80008c0:	22ff      	movs	r2, #255	; 0xff
 80008c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008c4:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <MX_RTC_Init+0x140>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008ca:	4b3d      	ldr	r3, [pc, #244]	; (80009c0 <MX_RTC_Init+0x140>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008d0:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <MX_RTC_Init+0x140>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008d6:	4b3a      	ldr	r3, [pc, #232]	; (80009c0 <MX_RTC_Init+0x140>)
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	05d2      	lsls	r2, r2, #23
 80008dc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008de:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <MX_RTC_Init+0x140>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008e4:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <MX_RTC_Init+0x140>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 fde8 	bl	80024bc <HAL_RTC_Init>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80008f0:	f000 f938 	bl	8000b64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008f4:	212c      	movs	r1, #44	; 0x2c
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800091a:	1879      	adds	r1, r7, r1
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_RTC_Init+0x140>)
 800091e:	2201      	movs	r2, #1
 8000920:	0018      	movs	r0, r3
 8000922:	f001 fe61 	bl	80025e8 <HAL_RTC_SetTime>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800092a:	f000 f91b 	bl	8000b64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800092e:	2128      	movs	r1, #40	; 0x28
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2201      	movs	r2, #1
 800093a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2201      	movs	r2, #1
 8000940:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000948:	1879      	adds	r1, r7, r1
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_RTC_Init+0x140>)
 800094c:	2201      	movs	r2, #1
 800094e:	0018      	movs	r0, r3
 8000950:	f001 ff4e 	bl	80027f0 <HAL_RTC_SetDate>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000958:	f000 f904 	bl	8000b64 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800095c:	003b      	movs	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000962:	003b      	movs	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8000968:	003b      	movs	r3, r7
 800096a:	2201      	movs	r2, #1
 800096c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800096e:	003b      	movs	r3, r7
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000974:	003b      	movs	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800097a:	003b      	movs	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000980:	003b      	movs	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000986:	003b      	movs	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800098c:	003b      	movs	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000992:	003b      	movs	r3, r7
 8000994:	2220      	movs	r2, #32
 8000996:	2101      	movs	r1, #1
 8000998:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800099a:	003b      	movs	r3, r7
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009a2:	0039      	movs	r1, r7
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_RTC_Init+0x140>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 f801 	bl	80029b0 <HAL_RTC_SetAlarm_IT>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80009b2:	f000 f8d7 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b010      	add	sp, #64	; 0x40
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	200000f0 	.word	0x200000f0
 80009c4:	40002800 	.word	0x40002800

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 80009ce:	4a24      	ldr	r2, [pc, #144]	; (8000a60 <MX_USART2_UART_Init+0x98>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d2:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 80009d4:	22e1      	movs	r2, #225	; 0xe1
 80009d6:	0252      	lsls	r2, r2, #9
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 fb0c 	bl	8003030 <HAL_UART_Init>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a1c:	f000 f8a2 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	0018      	movs	r0, r3
 8000a26:	f003 f8e1 	bl	8003bec <HAL_UARTEx_SetTxFifoThreshold>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2e:	f000 f899 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f003 f918 	bl	8003c6c <HAL_UARTEx_SetRxFifoThreshold>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a40:	f000 f890 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f003 f896 	bl	8003b78 <HAL_UARTEx_DisableFifoMode>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f888 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000128 	.word	0x20000128
 8000a60:	40004400 	.word	0x40004400

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	240c      	movs	r4, #12
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	0018      	movs	r0, r3
 8000a70:	2314      	movs	r3, #20
 8000a72:	001a      	movs	r2, r3
 8000a74:	2100      	movs	r1, #0
 8000a76:	f003 f9c3 	bl	8003e00 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <MX_GPIO_Init+0x9c>)
 8000a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <MX_GPIO_Init+0x9c>)
 8000a80:	2104      	movs	r1, #4
 8000a82:	430a      	orrs	r2, r1
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <MX_GPIO_Init+0x9c>)
 8000a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_GPIO_Init+0x9c>)
 8000a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_GPIO_Init+0x9c>)
 8000a98:	2120      	movs	r1, #32
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_GPIO_Init+0x9c>)
 8000aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_GPIO_Init+0x9c>)
 8000aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_GPIO_Init+0x9c>)
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_GPIO_Init+0x9c>)
 8000ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aba:	2201      	movs	r2, #1
 8000abc:	4013      	ands	r3, r2
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ac2:	23a0      	movs	r3, #160	; 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2120      	movs	r1, #32
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 fcc8 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ad0:	0021      	movs	r1, r4
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2220      	movs	r2, #32
 8000ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2201      	movs	r2, #1
 8000adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000aea:	187a      	adds	r2, r7, r1
 8000aec:	23a0      	movs	r3, #160	; 0xa0
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 fb50 	bl	8001198 <HAL_GPIO_Init>

}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b009      	add	sp, #36	; 0x24
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b08d      	sub	sp, #52	; 0x34
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	005a      	lsls	r2, r3, #1
 8000b10:	2408      	movs	r4, #8
 8000b12:	1939      	adds	r1, r7, r4
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	2300      	movs	r3, #0
 8000b18:	f002 f88a 	bl	8002c30 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8000b1c:	0022      	movs	r2, r4
 8000b1e:	18bb      	adds	r3, r7, r2
 8000b20:	789b      	ldrb	r3, [r3, #2]
 8000b22:	2b3a      	cmp	r3, #58	; 0x3a
 8000b24:	d903      	bls.n	8000b2e <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8000b26:	18bb      	adds	r3, r7, r2
 8000b28:	2200      	movs	r2, #0
 8000b2a:	709a      	strb	r2, [r3, #2]
 8000b2c:	e006      	b.n	8000b3c <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8000b2e:	2108      	movs	r1, #8
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	789b      	ldrb	r3, [r3, #2]
 8000b34:	3301      	adds	r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	2308      	movs	r3, #8
 8000b40:	18f9      	adds	r1, r7, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f001 ff32 	bl	80029b0 <HAL_RTC_SetAlarm_IT>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d1f6      	bne.n	8000b3e <HAL_RTC_AlarmAEventCallback+0x3a>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b50:	23a0      	movs	r3, #160	; 0xa0
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	2120      	movs	r1, #32
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 fc9f 	bl	800149a <HAL_GPIO_TogglePin>
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b00d      	add	sp, #52	; 0x34
 8000b62:	bd90      	pop	{r4, r7, pc}

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	641a      	str	r2, [r3, #64]	; 0x40
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	2201      	movs	r2, #1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	0549      	lsls	r1, r1, #21
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	055b      	lsls	r3, r3, #21
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000baa:	23c0      	movs	r3, #192	; 0xc0
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 f9fe 	bl	8000fb0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b08b      	sub	sp, #44	; 0x2c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	2414      	movs	r4, #20
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2314      	movs	r3, #20
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f003 f914 	bl	8003e00 <memset>
  if(hi2c->Instance==I2C1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <HAL_I2C_MspInit+0x90>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d131      	bne.n	8000c46 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_I2C_MspInit+0x94>)
 8000be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <HAL_I2C_MspInit+0x94>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	430a      	orrs	r2, r1
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_I2C_MspInit+0x94>)
 8000bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	22c0      	movs	r2, #192	; 0xc0
 8000bfe:	00d2      	lsls	r2, r2, #3
 8000c00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c02:	0021      	movs	r1, r4
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2212      	movs	r2, #18
 8000c08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2203      	movs	r2, #3
 8000c14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2206      	movs	r2, #6
 8000c1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	187a      	adds	r2, r7, r1
 8000c1e:	23a0      	movs	r3, #160	; 0xa0
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f000 fab7 	bl	8001198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_I2C_MspInit+0x94>)
 8000c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_I2C_MspInit+0x94>)
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	0389      	lsls	r1, r1, #14
 8000c34:	430a      	orrs	r2, r1
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_I2C_MspInit+0x94>)
 8000c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	039b      	lsls	r3, r3, #14
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b00b      	add	sp, #44	; 0x2c
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40005400 	.word	0x40005400
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a11      	ldr	r2, [pc, #68]	; (8000cac <HAL_RTC_MspInit+0x54>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d11c      	bne.n	8000ca4 <HAL_RTC_MspInit+0x4c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_RTC_MspInit+0x58>)
 8000c6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_RTC_MspInit+0x58>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0209      	lsls	r1, r1, #8
 8000c74:	430a      	orrs	r2, r1
 8000c76:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_RTC_MspInit+0x58>)
 8000c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_RTC_MspInit+0x58>)
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	00c9      	lsls	r1, r1, #3
 8000c82:	430a      	orrs	r2, r1
 8000c84:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_RTC_MspInit+0x58>)
 8000c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f000 fa4b 	bl	8001134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f000 fa5d 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b004      	add	sp, #16
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40002800 	.word	0x40002800
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b08b      	sub	sp, #44	; 0x2c
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	2414      	movs	r4, #20
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2314      	movs	r3, #20
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f003 f89a 	bl	8003e00 <memset>
  if(huart->Instance==USART2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <HAL_UART_MspInit+0x8c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d130      	bne.n	8000d38 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_UART_MspInit+0x90>)
 8000cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_UART_MspInit+0x90>)
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	0289      	lsls	r1, r1, #10
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0x90>)
 8000ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	029b      	lsls	r3, r3, #10
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_UART_MspInit+0x90>)
 8000cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_UART_MspInit+0x90>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0x90>)
 8000d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d02:	2201      	movs	r2, #1
 8000d04:	4013      	ands	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d0a:	0021      	movs	r1, r4
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2202      	movs	r2, #2
 8000d16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2201      	movs	r2, #1
 8000d28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	187a      	adds	r2, r7, r1
 8000d2c:	23a0      	movs	r3, #160	; 0xa0
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	0011      	movs	r1, r2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fa30 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b00b      	add	sp, #44	; 0x2c
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40021000 	.word	0x40021000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d58:	46c0      	nop			; (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f8e0 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <RTC_TAMP_IRQHandler+0x14>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f002 f81c 	bl	8002dbc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	200000f0 	.word	0x200000f0

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	18d3      	adds	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f002 fff4 	bl	8003dac <__errno>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	425b      	negs	r3, r3
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	18d2      	adds	r2, r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <_sbrk+0x64>)
 8000de0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b006      	add	sp, #24
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20009000 	.word	0x20009000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	2000008c 	.word	0x2000008c
 8000df8:	200001d8 	.word	0x200001d8

08000dfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e0c:	f7ff fff6 	bl	8000dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	; (8000e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <LoopForever+0xe>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	; (8000e54 <LoopForever+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e36:	f002 ffbf 	bl	8003db8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e3a:	f7ff fc5f 	bl	80006fc <main>

08000e3e <LoopForever>:

LoopForever:
  b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   r0, =_estack
 8000e40:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e4c:	08004764 	.word	0x08004764
  ldr r2, =_sbss
 8000e50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e54:	200001d8 	.word	0x200001d8

08000e58 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_COMP_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x3c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_Init+0x3c>)
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	0049      	lsls	r1, r1, #1
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f810 	bl	8000e9c <HAL_InitTick>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e001      	b.n	8000e8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fe72 	bl	8000b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_InitTick+0x88>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d02b      	beq.n	8000f0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <HAL_InitTick+0x8c>)
 8000eb6:	681c      	ldr	r4, [r3, #0]
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_InitTick+0x88>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	23fa      	movs	r3, #250	; 0xfa
 8000ec0:	0098      	lsls	r0, r3, #2
 8000ec2:	f7ff f931 	bl	8000128 <__udivsi3>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	0019      	movs	r1, r3
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f7ff f92c 	bl	8000128 <__udivsi3>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 f953 	bl	800117e <HAL_SYSTICK_Config>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d112      	bne.n	8000f02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d80a      	bhi.n	8000ef8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 f922 	bl	8001134 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_InitTick+0x90>)
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e00d      	b.n	8000f14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ef8:	230f      	movs	r3, #15
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e008      	b.n	8000f14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f02:	230f      	movs	r3, #15
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e003      	b.n	8000f14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	781b      	ldrb	r3, [r3, #0]
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b005      	add	sp, #20
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x1c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	001a      	movs	r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_IncTick+0x20>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	18d2      	adds	r2, r2, r3
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_IncTick+0x20>)
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	200001c4 	.word	0x200001c4

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <HAL_GetTick+0x10>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	200001c4 	.word	0x200001c4

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff fff0 	bl	8000f54 <HAL_GetTick>
 8000f74:	0003      	movs	r3, r0
 8000f76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	001a      	movs	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	189b      	adds	r3, r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	f7ff ffe0 	bl	8000f54 <HAL_GetTick>
 8000f94:	0002      	movs	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b004      	add	sp, #16
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	20000008 	.word	0x20000008

08000fb0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	fffff9ff 	.word	0xfffff9ff

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b7f      	cmp	r3, #127	; 0x7f
 8000fee:	d809      	bhi.n	8001004 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	231f      	movs	r3, #31
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_EnableIRQ+0x30>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4091      	lsls	r1, r2
 8001000:	000a      	movs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	0002      	movs	r2, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b7f      	cmp	r3, #127	; 0x7f
 8001024:	d828      	bhi.n	8001078 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001026:	4a2f      	ldr	r2, [pc, #188]	; (80010e4 <__NVIC_SetPriority+0xd4>)
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b25b      	sxtb	r3, r3
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	33c0      	adds	r3, #192	; 0xc0
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	589b      	ldr	r3, [r3, r2]
 8001036:	1dfa      	adds	r2, r7, #7
 8001038:	7812      	ldrb	r2, [r2, #0]
 800103a:	0011      	movs	r1, r2
 800103c:	2203      	movs	r2, #3
 800103e:	400a      	ands	r2, r1
 8001040:	00d2      	lsls	r2, r2, #3
 8001042:	21ff      	movs	r1, #255	; 0xff
 8001044:	4091      	lsls	r1, r2
 8001046:	000a      	movs	r2, r1
 8001048:	43d2      	mvns	r2, r2
 800104a:	401a      	ands	r2, r3
 800104c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	019b      	lsls	r3, r3, #6
 8001052:	22ff      	movs	r2, #255	; 0xff
 8001054:	401a      	ands	r2, r3
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	0018      	movs	r0, r3
 800105c:	2303      	movs	r3, #3
 800105e:	4003      	ands	r3, r0
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001064:	481f      	ldr	r0, [pc, #124]	; (80010e4 <__NVIC_SetPriority+0xd4>)
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	430a      	orrs	r2, r1
 8001070:	33c0      	adds	r3, #192	; 0xc0
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001076:	e031      	b.n	80010dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <__NVIC_SetPriority+0xd8>)
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	0019      	movs	r1, r3
 8001080:	230f      	movs	r3, #15
 8001082:	400b      	ands	r3, r1
 8001084:	3b08      	subs	r3, #8
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3306      	adds	r3, #6
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	18d3      	adds	r3, r2, r3
 800108e:	3304      	adds	r3, #4
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	1dfa      	adds	r2, r7, #7
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	0011      	movs	r1, r2
 8001098:	2203      	movs	r2, #3
 800109a:	400a      	ands	r2, r1
 800109c:	00d2      	lsls	r2, r2, #3
 800109e:	21ff      	movs	r1, #255	; 0xff
 80010a0:	4091      	lsls	r1, r2
 80010a2:	000a      	movs	r2, r1
 80010a4:	43d2      	mvns	r2, r2
 80010a6:	401a      	ands	r2, r3
 80010a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	019b      	lsls	r3, r3, #6
 80010ae:	22ff      	movs	r2, #255	; 0xff
 80010b0:	401a      	ands	r2, r3
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	0018      	movs	r0, r3
 80010b8:	2303      	movs	r3, #3
 80010ba:	4003      	ands	r3, r0
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <__NVIC_SetPriority+0xd8>)
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	001c      	movs	r4, r3
 80010c8:	230f      	movs	r3, #15
 80010ca:	4023      	ands	r3, r4
 80010cc:	3b08      	subs	r3, #8
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	430a      	orrs	r2, r1
 80010d2:	3306      	adds	r3, #6
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	18c3      	adds	r3, r0, r3
 80010d8:	3304      	adds	r3, #4
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b003      	add	sp, #12
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1e5a      	subs	r2, r3, #1
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	045b      	lsls	r3, r3, #17
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d301      	bcc.n	8001104 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001100:	2301      	movs	r3, #1
 8001102:	e010      	b.n	8001126 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <SysTick_Config+0x44>)
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	3a01      	subs	r2, #1
 800110a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110c:	2301      	movs	r3, #1
 800110e:	425b      	negs	r3, r3
 8001110:	2103      	movs	r1, #3
 8001112:	0018      	movs	r0, r3
 8001114:	f7ff ff7c 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <SysTick_Config+0x44>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <SysTick_Config+0x44>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	210f      	movs	r1, #15
 8001140:	187b      	adds	r3, r7, r1
 8001142:	1c02      	adds	r2, r0, #0
 8001144:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	187b      	adds	r3, r7, r1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b25b      	sxtb	r3, r3
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff ff5d 	bl	8001010 <__NVIC_SetPriority>
}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b004      	add	sp, #16
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	0002      	movs	r2, r0
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b25b      	sxtb	r3, r3
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff ff33 	bl	8000fdc <__NVIC_EnableIRQ>
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff ffaf 	bl	80010ec <SysTick_Config>
 800118e:	0003      	movs	r3, r0
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a6:	e147      	b.n	8001438 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4091      	lsls	r1, r2
 80011b2:	000a      	movs	r2, r1
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d100      	bne.n	80011c0 <HAL_GPIO_Init+0x28>
 80011be:	e138      	b.n	8001432 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d005      	beq.n	80011d8 <HAL_GPIO_Init+0x40>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2203      	movs	r2, #3
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d130      	bne.n	800123a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	409a      	lsls	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	43da      	mvns	r2, r3
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	409a      	lsls	r2, r3
 80011fa:	0013      	movs	r3, r2
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120e:	2201      	movs	r2, #1
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	2201      	movs	r2, #1
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
 800122c:	0013      	movs	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2203      	movs	r2, #3
 8001240:	4013      	ands	r3, r2
 8001242:	2b03      	cmp	r3, #3
 8001244:	d017      	beq.n	8001276 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2203      	movs	r2, #3
 800127c:	4013      	ands	r3, r2
 800127e:	2b02      	cmp	r3, #2
 8001280:	d123      	bne.n	80012ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	58d3      	ldr	r3, [r2, r3]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2207      	movs	r2, #7
 8001294:	4013      	ands	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	43da      	mvns	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2107      	movs	r1, #7
 80012ae:	400b      	ands	r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	6939      	ldr	r1, [r7, #16]
 80012c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2203      	movs	r2, #3
 80012e8:	401a      	ands	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	23c0      	movs	r3, #192	; 0xc0
 8001304:	029b      	lsls	r3, r3, #10
 8001306:	4013      	ands	r3, r2
 8001308:	d100      	bne.n	800130c <HAL_GPIO_Init+0x174>
 800130a:	e092      	b.n	8001432 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800130c:	4a50      	ldr	r2, [pc, #320]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3318      	adds	r3, #24
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	589b      	ldr	r3, [r3, r2]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2203      	movs	r2, #3
 800131e:	4013      	ands	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	220f      	movs	r2, #15
 8001324:	409a      	lsls	r2, r3
 8001326:	0013      	movs	r3, r2
 8001328:	43da      	mvns	r2, r3
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	23a0      	movs	r3, #160	; 0xa0
 8001334:	05db      	lsls	r3, r3, #23
 8001336:	429a      	cmp	r2, r3
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x1ca>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a45      	ldr	r2, [pc, #276]	; (8001454 <HAL_GPIO_Init+0x2bc>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x1c6>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a44      	ldr	r2, [pc, #272]	; (8001458 <HAL_GPIO_Init+0x2c0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x1c2>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a43      	ldr	r2, [pc, #268]	; (800145c <HAL_GPIO_Init+0x2c4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x1be>
 8001352:	2303      	movs	r3, #3
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x1cc>
 8001356:	2305      	movs	r3, #5
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x1cc>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x1cc>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x1cc>
 8001362:	2300      	movs	r3, #0
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	2103      	movs	r1, #3
 8001368:	400a      	ands	r2, r1
 800136a:	00d2      	lsls	r2, r2, #3
 800136c:	4093      	lsls	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001374:	4936      	ldr	r1, [pc, #216]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3318      	adds	r3, #24
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	035b      	lsls	r3, r3, #13
 800139a:	4013      	ands	r3, r2
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	039b      	lsls	r3, r3, #14
 80013c4:	4013      	ands	r3, r2
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013d6:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 80013d8:	2384      	movs	r3, #132	; 0x84
 80013da:	58d3      	ldr	r3, [r2, r3]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43da      	mvns	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	029b      	lsls	r3, r3, #10
 80013f0:	4013      	ands	r3, r2
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013fc:	4914      	ldr	r1, [pc, #80]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 80013fe:	2284      	movs	r2, #132	; 0x84
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	58d3      	ldr	r3, [r2, r3]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43da      	mvns	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	025b      	lsls	r3, r3, #9
 800141e:	4013      	ands	r3, r2
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800142a:	4909      	ldr	r1, [pc, #36]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	40da      	lsrs	r2, r3
 8001440:	1e13      	subs	r3, r2, #0
 8001442:	d000      	beq.n	8001446 <HAL_GPIO_Init+0x2ae>
 8001444:	e6b0      	b.n	80011a8 <HAL_GPIO_Init+0x10>
  }
}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b006      	add	sp, #24
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021800 	.word	0x40021800
 8001454:	50000400 	.word	0x50000400
 8001458:	50000800 	.word	0x50000800
 800145c:	50000c00 	.word	0x50000c00

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	0008      	movs	r0, r1
 800146a:	0011      	movs	r1, r2
 800146c:	1cbb      	adds	r3, r7, #2
 800146e:	1c02      	adds	r2, r0, #0
 8001470:	801a      	strh	r2, [r3, #0]
 8001472:	1c7b      	adds	r3, r7, #1
 8001474:	1c0a      	adds	r2, r1, #0
 8001476:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001478:	1c7b      	adds	r3, r7, #1
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001480:	1cbb      	adds	r3, r7, #2
 8001482:	881a      	ldrh	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001488:	e003      	b.n	8001492 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800148a:	1cbb      	adds	r3, r7, #2
 800148c:	881a      	ldrh	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	b002      	add	sp, #8
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	000a      	movs	r2, r1
 80014a4:	1cbb      	adds	r3, r7, #2
 80014a6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ae:	1cbb      	adds	r3, r7, #2
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4013      	ands	r3, r2
 80014b6:	041a      	lsls	r2, r3, #16
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	1cb9      	adds	r1, r7, #2
 80014be:	8809      	ldrh	r1, [r1, #0]
 80014c0:	400b      	ands	r3, r1
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b004      	add	sp, #16
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e082      	b.n	80015e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2241      	movs	r2, #65	; 0x41
 80014e6:	5c9b      	ldrb	r3, [r3, r2]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2240      	movs	r2, #64	; 0x40
 80014f2:	2100      	movs	r1, #0
 80014f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7ff fb61 	bl	8000bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2241      	movs	r2, #65	; 0x41
 8001502:	2124      	movs	r1, #36	; 0x24
 8001504:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	438a      	bics	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4934      	ldr	r1, [pc, #208]	; (80015f0 <HAL_I2C_Init+0x120>)
 8001520:	400a      	ands	r2, r1
 8001522:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4931      	ldr	r1, [pc, #196]	; (80015f4 <HAL_I2C_Init+0x124>)
 8001530:	400a      	ands	r2, r1
 8001532:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d108      	bne.n	800154e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	0209      	lsls	r1, r1, #8
 8001548:	430a      	orrs	r2, r1
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	e007      	b.n	800155e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2184      	movs	r1, #132	; 0x84
 8001558:	0209      	lsls	r1, r1, #8
 800155a:	430a      	orrs	r2, r1
 800155c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d104      	bne.n	8001570 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	491f      	ldr	r1, [pc, #124]	; (80015f8 <HAL_I2C_Init+0x128>)
 800157c:	430a      	orrs	r2, r1
 800157e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	491a      	ldr	r1, [pc, #104]	; (80015f4 <HAL_I2C_Init+0x124>)
 800158c:	400a      	ands	r2, r1
 800158e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691a      	ldr	r2, [r3, #16]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	431a      	orrs	r2, r3
 800159a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69d9      	ldr	r1, [r3, #28]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1a      	ldr	r2, [r3, #32]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2101      	movs	r1, #1
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2241      	movs	r2, #65	; 0x41
 80015d4:	2120      	movs	r1, #32
 80015d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2242      	movs	r2, #66	; 0x42
 80015e2:	2100      	movs	r1, #0
 80015e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	f0ffffff 	.word	0xf0ffffff
 80015f4:	ffff7fff 	.word	0xffff7fff
 80015f8:	02008000 	.word	0x02008000

080015fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2241      	movs	r2, #65	; 0x41
 800160a:	5c9b      	ldrb	r3, [r3, r2]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b20      	cmp	r3, #32
 8001610:	d138      	bne.n	8001684 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2240      	movs	r2, #64	; 0x40
 8001616:	5c9b      	ldrb	r3, [r3, r2]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800161c:	2302      	movs	r3, #2
 800161e:	e032      	b.n	8001686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2240      	movs	r2, #64	; 0x40
 8001624:	2101      	movs	r1, #1
 8001626:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2241      	movs	r2, #65	; 0x41
 800162c:	2124      	movs	r1, #36	; 0x24
 800162e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2101      	movs	r1, #1
 800163c:	438a      	bics	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4911      	ldr	r1, [pc, #68]	; (8001690 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800164c:	400a      	ands	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6819      	ldr	r1, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2101      	movs	r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2241      	movs	r2, #65	; 0x41
 8001674:	2120      	movs	r1, #32
 8001676:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2240      	movs	r2, #64	; 0x40
 800167c:	2100      	movs	r1, #0
 800167e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	e000      	b.n	8001686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001684:	2302      	movs	r3, #2
  }
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b002      	add	sp, #8
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	ffffefff 	.word	0xffffefff

08001694 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2241      	movs	r2, #65	; 0x41
 80016a2:	5c9b      	ldrb	r3, [r3, r2]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b20      	cmp	r3, #32
 80016a8:	d139      	bne.n	800171e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2240      	movs	r2, #64	; 0x40
 80016ae:	5c9b      	ldrb	r3, [r3, r2]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e033      	b.n	8001720 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2240      	movs	r2, #64	; 0x40
 80016bc:	2101      	movs	r1, #1
 80016be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2241      	movs	r2, #65	; 0x41
 80016c4:	2124      	movs	r1, #36	; 0x24
 80016c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2101      	movs	r1, #1
 80016d4:	438a      	bics	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4a11      	ldr	r2, [pc, #68]	; (8001728 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2241      	movs	r2, #65	; 0x41
 800170e:	2120      	movs	r1, #32
 8001710:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	2100      	movs	r1, #0
 8001718:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800171e:	2302      	movs	r3, #2
  }
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}
 8001728:	fffff0ff 	.word	0xfffff0ff

0800172c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800173a:	4013      	ands	r3, r2
 800173c:	0019      	movs	r1, r3
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	430a      	orrs	r2, r1
 8001744:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d11f      	bne.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	0013      	movs	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	189b      	adds	r3, r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4912      	ldr	r1, [pc, #72]	; (80017a8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800175e:	0018      	movs	r0, r3
 8001760:	f7fe fce2 	bl	8000128 <__udivsi3>
 8001764:	0003      	movs	r3, r0
 8001766:	3301      	adds	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800176a:	e008      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3b01      	subs	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	e001      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e009      	b.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	401a      	ands	r2, r3
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	429a      	cmp	r2, r3
 800178e:	d0ed      	beq.n	800176c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b004      	add	sp, #16
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	40007000 	.word	0x40007000
 80017a0:	fffff9ff 	.word	0xfffff9ff
 80017a4:	20000000 	.word	0x20000000
 80017a8:	000f4240 	.word	0x000f4240

080017ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	23e0      	movs	r3, #224	; 0xe0
 80017b6:	01db      	lsls	r3, r3, #7
 80017b8:	4013      	ands	r3, r2
}
 80017ba:	0018      	movs	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e2fe      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2201      	movs	r2, #1
 80017dc:	4013      	ands	r3, r2
 80017de:	d100      	bne.n	80017e2 <HAL_RCC_OscConfig+0x1e>
 80017e0:	e07c      	b.n	80018dc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e2:	4bc3      	ldr	r3, [pc, #780]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2238      	movs	r2, #56	; 0x38
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ec:	4bc0      	ldr	r3, [pc, #768]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2203      	movs	r2, #3
 80017f2:	4013      	ands	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b10      	cmp	r3, #16
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_OscConfig+0x3e>
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d002      	beq.n	8001808 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b08      	cmp	r3, #8
 8001806:	d10b      	bne.n	8001820 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	4bb9      	ldr	r3, [pc, #740]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	4013      	ands	r3, r2
 8001812:	d062      	beq.n	80018da <HAL_RCC_OscConfig+0x116>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d15e      	bne.n	80018da <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e2d9      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	429a      	cmp	r2, r3
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x78>
 800182c:	4bb0      	ldr	r3, [pc, #704]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4baf      	ldr	r3, [pc, #700]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	0249      	lsls	r1, r1, #9
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e020      	b.n	800187e <HAL_RCC_OscConfig+0xba>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	23a0      	movs	r3, #160	; 0xa0
 8001842:	02db      	lsls	r3, r3, #11
 8001844:	429a      	cmp	r2, r3
 8001846:	d10e      	bne.n	8001866 <HAL_RCC_OscConfig+0xa2>
 8001848:	4ba9      	ldr	r3, [pc, #676]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4ba8      	ldr	r3, [pc, #672]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800184e:	2180      	movs	r1, #128	; 0x80
 8001850:	02c9      	lsls	r1, r1, #11
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	4ba6      	ldr	r3, [pc, #664]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4ba5      	ldr	r3, [pc, #660]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	0249      	lsls	r1, r1, #9
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e00b      	b.n	800187e <HAL_RCC_OscConfig+0xba>
 8001866:	4ba2      	ldr	r3, [pc, #648]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4ba1      	ldr	r3, [pc, #644]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800186c:	49a1      	ldr	r1, [pc, #644]	; (8001af4 <HAL_RCC_OscConfig+0x330>)
 800186e:	400a      	ands	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	4b9f      	ldr	r3, [pc, #636]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b9e      	ldr	r3, [pc, #632]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001878:	499f      	ldr	r1, [pc, #636]	; (8001af8 <HAL_RCC_OscConfig+0x334>)
 800187a:	400a      	ands	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d014      	beq.n	80018b0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff fb65 	bl	8000f54 <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff fb60 	bl	8000f54 <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e298      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a2:	4b93      	ldr	r3, [pc, #588]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	029b      	lsls	r3, r3, #10
 80018aa:	4013      	ands	r3, r2
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0xcc>
 80018ae:	e015      	b.n	80018dc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb50 	bl	8000f54 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ba:	f7ff fb4b 	bl	8000f54 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b64      	cmp	r3, #100	; 0x64
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e283      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018cc:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	4013      	ands	r3, r2
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0xf6>
 80018d8:	e000      	b.n	80018dc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2202      	movs	r2, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d100      	bne.n	80018e8 <HAL_RCC_OscConfig+0x124>
 80018e6:	e099      	b.n	8001a1c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e8:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2238      	movs	r2, #56	; 0x38
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f2:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2203      	movs	r2, #3
 80018f8:	4013      	ands	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d102      	bne.n	8001908 <HAL_RCC_OscConfig+0x144>
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d002      	beq.n	800190e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d135      	bne.n	800197a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800190e:	4b78      	ldr	r3, [pc, #480]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4013      	ands	r3, r2
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x162>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e256      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b72      	ldr	r3, [pc, #456]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a74      	ldr	r2, [pc, #464]	; (8001afc <HAL_RCC_OscConfig+0x338>)
 800192c:	4013      	ands	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	021a      	lsls	r2, r3, #8
 8001936:	4b6e      	ldr	r3, [pc, #440]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d112      	bne.n	8001968 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001942:	4b6b      	ldr	r3, [pc, #428]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6e      	ldr	r2, [pc, #440]	; (8001b00 <HAL_RCC_OscConfig+0x33c>)
 8001948:	4013      	ands	r3, r2
 800194a:	0019      	movs	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001956:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	0adb      	lsrs	r3, r3, #11
 800195c:	2207      	movs	r2, #7
 800195e:	4013      	ands	r3, r2
 8001960:	4a68      	ldr	r2, [pc, #416]	; (8001b04 <HAL_RCC_OscConfig+0x340>)
 8001962:	40da      	lsrs	r2, r3
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <HAL_RCC_OscConfig+0x344>)
 8001966:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001968:	4b68      	ldr	r3, [pc, #416]	; (8001b0c <HAL_RCC_OscConfig+0x348>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff fa95 	bl	8000e9c <HAL_InitTick>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d051      	beq.n	8001a1a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e22c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d030      	beq.n	80019e4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001982:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a5e      	ldr	r2, [pc, #376]	; (8001b00 <HAL_RCC_OscConfig+0x33c>)
 8001988:	4013      	ands	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0049      	lsls	r1, r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff fad6 	bl	8000f54 <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fad1 	bl	8000f54 <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e209      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c0:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a4a      	ldr	r2, [pc, #296]	; (8001afc <HAL_RCC_OscConfig+0x338>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	021a      	lsls	r2, r3, #8
 80019dc:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	e01b      	b.n	8001a1c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019e4:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80019ea:	4949      	ldr	r1, [pc, #292]	; (8001b10 <HAL_RCC_OscConfig+0x34c>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fab0 	bl	8000f54 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff faab 	bl	8000f54 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1e3      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4013      	ands	r3, r2
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x236>
 8001a18:	e000      	b.n	8001a1c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a1a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2208      	movs	r2, #8
 8001a22:	4013      	ands	r3, r2
 8001a24:	d047      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a26:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2238      	movs	r2, #56	; 0x38
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b18      	cmp	r3, #24
 8001a30:	d10a      	bne.n	8001a48 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a36:	2202      	movs	r2, #2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d03c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2f2>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d138      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e1c5      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d019      	beq.n	8001a84 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	2101      	movs	r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fa7a 	bl	8000f54 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff fa75 	bl	8000f54 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1ad      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a78:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d0f1      	beq.n	8001a66 <HAL_RCC_OscConfig+0x2a2>
 8001a82:	e018      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	438a      	bics	r2, r1
 8001a8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff fa60 	bl	8000f54 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fa5b 	bl	8000f54 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e193      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aac:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d1f1      	bne.n	8001a9a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2204      	movs	r2, #4
 8001abc:	4013      	ands	r3, r2
 8001abe:	d100      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2fe>
 8001ac0:	e0c6      	b.n	8001c50 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac2:	231f      	movs	r3, #31
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2238      	movs	r2, #56	; 0x38
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d11e      	bne.n	8001b14 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x31e>
 8001ae0:	e0b6      	b.n	8001c50 <HAL_RCC_OscConfig+0x48c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d000      	beq.n	8001aec <HAL_RCC_OscConfig+0x328>
 8001aea:	e0b1      	b.n	8001c50 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e171      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
 8001af0:	40021000 	.word	0x40021000
 8001af4:	fffeffff 	.word	0xfffeffff
 8001af8:	fffbffff 	.word	0xfffbffff
 8001afc:	ffff80ff 	.word	0xffff80ff
 8001b00:	ffffc7ff 	.word	0xffffc7ff
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b14:	4bb1      	ldr	r3, [pc, #708]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	055b      	lsls	r3, r3, #21
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_OscConfig+0x360>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x362>
 8001b24:	2300      	movs	r3, #0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d011      	beq.n	8001b4e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4bac      	ldr	r3, [pc, #688]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b2e:	4bab      	ldr	r3, [pc, #684]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0549      	lsls	r1, r1, #21
 8001b34:	430a      	orrs	r2, r1
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b38:	4ba8      	ldr	r3, [pc, #672]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	055b      	lsls	r3, r3, #21
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b46:	231f      	movs	r3, #31
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4e:	4ba4      	ldr	r3, [pc, #656]	; (8001de0 <HAL_RCC_OscConfig+0x61c>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	d11a      	bne.n	8001b90 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b5a:	4ba1      	ldr	r3, [pc, #644]	; (8001de0 <HAL_RCC_OscConfig+0x61c>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4ba0      	ldr	r3, [pc, #640]	; (8001de0 <HAL_RCC_OscConfig+0x61c>)
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	0049      	lsls	r1, r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b68:	f7ff f9f4 	bl	8000f54 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b72:	f7ff f9ef 	bl	8000f54 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e127      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b84:	4b96      	ldr	r3, [pc, #600]	; (8001de0 <HAL_RCC_OscConfig+0x61c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x3e2>
 8001b98:	4b90      	ldr	r3, [pc, #576]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b9c:	4b8f      	ldr	r3, [pc, #572]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ba4:	e01c      	b.n	8001be0 <HAL_RCC_OscConfig+0x41c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x404>
 8001bae:	4b8b      	ldr	r3, [pc, #556]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001bb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb2:	4b8a      	ldr	r3, [pc, #552]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bba:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001bbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bbe:	4b87      	ldr	r3, [pc, #540]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0x41c>
 8001bc8:	4b84      	ldr	r3, [pc, #528]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bcc:	4b83      	ldr	r3, [pc, #524]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	438a      	bics	r2, r1
 8001bd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bd4:	4b81      	ldr	r3, [pc, #516]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001bd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bd8:	4b80      	ldr	r3, [pc, #512]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001bda:	2104      	movs	r1, #4
 8001bdc:	438a      	bics	r2, r1
 8001bde:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d014      	beq.n	8001c12 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff f9b4 	bl	8000f54 <HAL_GetTick>
 8001bec:	0003      	movs	r3, r0
 8001bee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf0:	e009      	b.n	8001c06 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff f9af 	bl	8000f54 <HAL_GetTick>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	4a79      	ldr	r2, [pc, #484]	; (8001de4 <HAL_RCC_OscConfig+0x620>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e0e6      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c06:	4b75      	ldr	r3, [pc, #468]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x42e>
 8001c10:	e013      	b.n	8001c3a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff f99f 	bl	8000f54 <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c1a:	e009      	b.n	8001c30 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7ff f99a 	bl	8000f54 <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	4a6f      	ldr	r2, [pc, #444]	; (8001de4 <HAL_RCC_OscConfig+0x620>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0d1      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c30:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	2202      	movs	r2, #2
 8001c36:	4013      	ands	r3, r2
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c3a:	231f      	movs	r3, #31
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c44:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c48:	4b64      	ldr	r3, [pc, #400]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001c4a:	4967      	ldr	r1, [pc, #412]	; (8001de8 <HAL_RCC_OscConfig+0x624>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d100      	bne.n	8001c5a <HAL_RCC_OscConfig+0x496>
 8001c58:	e0bb      	b.n	8001dd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5a:	4b60      	ldr	r3, [pc, #384]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2238      	movs	r2, #56	; 0x38
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d100      	bne.n	8001c68 <HAL_RCC_OscConfig+0x4a4>
 8001c66:	e07b      	b.n	8001d60 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d156      	bne.n	8001d1e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c70:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001c76:	495d      	ldr	r1, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x628>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f96a 	bl	8000f54 <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff f965 	bl	8000f54 <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e09d      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	049b      	lsls	r3, r3, #18
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a51      	ldr	r2, [pc, #324]	; (8001df0 <HAL_RCC_OscConfig+0x62c>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	4b42      	ldr	r3, [pc, #264]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd8:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	0449      	lsls	r1, r1, #17
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0549      	lsls	r1, r1, #21
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f92e 	bl	8000f54 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7ff f929 	bl	8000f54 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e061      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d10:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	049b      	lsls	r3, r3, #18
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x53a>
 8001d1c:	e059      	b.n	8001dd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001d24:	4931      	ldr	r1, [pc, #196]	; (8001dec <HAL_RCC_OscConfig+0x628>)
 8001d26:	400a      	ands	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff f913 	bl	8000f54 <HAL_GetTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d34:	f7ff f90e 	bl	8000f54 <HAL_GetTick>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e046      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d46:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	049b      	lsls	r3, r3, #18
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001d58:	4926      	ldr	r1, [pc, #152]	; (8001df4 <HAL_RCC_OscConfig+0x630>)
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	e038      	b.n	8001dd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e033      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2203      	movs	r2, #3
 8001d76:	401a      	ands	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d126      	bne.n	8001dce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2270      	movs	r2, #112	; 0x70
 8001d84:	401a      	ands	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d11f      	bne.n	8001dce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	23fe      	movs	r3, #254	; 0xfe
 8001d92:	01db      	lsls	r3, r3, #7
 8001d94:	401a      	ands	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d116      	bne.n	8001dce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	23f8      	movs	r3, #248	; 0xf8
 8001da4:	039b      	lsls	r3, r3, #14
 8001da6:	401a      	ands	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d10e      	bne.n	8001dce <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	23e0      	movs	r3, #224	; 0xe0
 8001db4:	051b      	lsls	r3, r3, #20
 8001db6:	401a      	ands	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	0f5b      	lsrs	r3, r3, #29
 8001dc4:	075a      	lsls	r2, r3, #29
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b008      	add	sp, #32
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40007000 	.word	0x40007000
 8001de4:	00001388 	.word	0x00001388
 8001de8:	efffffff 	.word	0xefffffff
 8001dec:	feffffff 	.word	0xfeffffff
 8001df0:	11c1808c 	.word	0x11c1808c
 8001df4:	eefefffc 	.word	0xeefefffc

08001df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0e9      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b76      	ldr	r3, [pc, #472]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2207      	movs	r2, #7
 8001e12:	4013      	ands	r3, r2
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d91e      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b73      	ldr	r3, [pc, #460]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2207      	movs	r2, #7
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	4b70      	ldr	r3, [pc, #448]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e2c:	f7ff f892 	bl	8000f54 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e34:	e009      	b.n	8001e4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e36:	f7ff f88d 	bl	8000f54 <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	4a6a      	ldr	r2, [pc, #424]	; (8001fec <HAL_RCC_ClockConfig+0x1f4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0ca      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e4a:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2207      	movs	r2, #7
 8001e50:	4013      	ands	r3, r2
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d1ee      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d015      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2204      	movs	r2, #4
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d006      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e6c:	4b60      	ldr	r3, [pc, #384]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e72:	21e0      	movs	r1, #224	; 0xe0
 8001e74:	01c9      	lsls	r1, r1, #7
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7a:	4b5d      	ldr	r3, [pc, #372]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	4a5d      	ldr	r2, [pc, #372]	; (8001ff4 <HAL_RCC_ClockConfig+0x1fc>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d057      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	029b      	lsls	r3, r3, #10
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d12b      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e097      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb8:	4b4d      	ldr	r3, [pc, #308]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	049b      	lsls	r3, r3, #18
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d11f      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e08b      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed0:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d113      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e07f      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee8:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eec:	2202      	movs	r2, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d108      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e074      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef6:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e06d      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f04:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2207      	movs	r2, #7
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f18:	f7ff f81c 	bl	8000f54 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f20:	e009      	b.n	8001f36 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7ff f817 	bl	8000f54 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a2f      	ldr	r2, [pc, #188]	; (8001fec <HAL_RCC_ClockConfig+0x1f4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e054      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2238      	movs	r2, #56	; 0x38
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1ec      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	4013      	ands	r3, r2
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d21e      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f68:	f7fe fff4 	bl	8000f54 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f70:	e009      	b.n	8001f86 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f7fe ffef 	bl	8000f54 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4a1b      	ldr	r2, [pc, #108]	; (8001fec <HAL_RCC_ClockConfig+0x1f4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e02c      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1ee      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <HAL_RCC_ClockConfig+0x200>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fb2:	f000 f829 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fb6:	0001      	movs	r1, r0
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_RCC_ClockConfig+0x204>)
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	58d3      	ldr	r3, [r2, r3]
 8001fc8:	221f      	movs	r2, #31
 8001fca:	4013      	ands	r3, r2
 8001fcc:	000a      	movs	r2, r1
 8001fce:	40da      	lsrs	r2, r3
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_ClockConfig+0x208>)
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_ClockConfig+0x20c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7fe ff5f 	bl	8000e9c <HAL_InitTick>
 8001fde:	0003      	movs	r3, r0
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b004      	add	sp, #16
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	00001388 	.word	0x00001388
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	fffff0ff 	.word	0xfffff0ff
 8001ff8:	ffff8fff 	.word	0xffff8fff
 8001ffc:	08004698 	.word	0x08004698
 8002000:	20000000 	.word	0x20000000
 8002004:	20000004 	.word	0x20000004

08002008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800200e:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2238      	movs	r2, #56	; 0x38
 8002014:	4013      	ands	r3, r2
 8002016:	d10f      	bne.n	8002038 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0adb      	lsrs	r3, r3, #11
 800201e:	2207      	movs	r2, #7
 8002020:	4013      	ands	r3, r2
 8002022:	2201      	movs	r2, #1
 8002024:	409a      	lsls	r2, r3
 8002026:	0013      	movs	r3, r2
 8002028:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800202a:	6839      	ldr	r1, [r7, #0]
 800202c:	4835      	ldr	r0, [pc, #212]	; (8002104 <HAL_RCC_GetSysClockFreq+0xfc>)
 800202e:	f7fe f87b 	bl	8000128 <__udivsi3>
 8002032:	0003      	movs	r3, r0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	e05d      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2238      	movs	r2, #56	; 0x38
 800203e:	4013      	ands	r3, r2
 8002040:	2b08      	cmp	r3, #8
 8002042:	d102      	bne.n	800204a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002044:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_RCC_GetSysClockFreq+0x100>)
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	e054      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2238      	movs	r2, #56	; 0x38
 8002050:	4013      	ands	r3, r2
 8002052:	2b10      	cmp	r3, #16
 8002054:	d138      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2203      	movs	r2, #3
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	2207      	movs	r2, #7
 8002068:	4013      	ands	r3, r2
 800206a:	3301      	adds	r3, #1
 800206c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d10d      	bne.n	8002090 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	4824      	ldr	r0, [pc, #144]	; (8002108 <HAL_RCC_GetSysClockFreq+0x100>)
 8002078:	f7fe f856 	bl	8000128 <__udivsi3>
 800207c:	0003      	movs	r3, r0
 800207e:	0019      	movs	r1, r3
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	227f      	movs	r2, #127	; 0x7f
 8002088:	4013      	ands	r3, r2
 800208a:	434b      	muls	r3, r1
 800208c:	617b      	str	r3, [r7, #20]
        break;
 800208e:	e00d      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	481c      	ldr	r0, [pc, #112]	; (8002104 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002094:	f7fe f848 	bl	8000128 <__udivsi3>
 8002098:	0003      	movs	r3, r0
 800209a:	0019      	movs	r1, r3
 800209c:	4b18      	ldr	r3, [pc, #96]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	227f      	movs	r2, #127	; 0x7f
 80020a4:	4013      	ands	r3, r2
 80020a6:	434b      	muls	r3, r1
 80020a8:	617b      	str	r3, [r7, #20]
        break;
 80020aa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020ac:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0f5b      	lsrs	r3, r3, #29
 80020b2:	2207      	movs	r2, #7
 80020b4:	4013      	ands	r3, r2
 80020b6:	3301      	adds	r3, #1
 80020b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	6978      	ldr	r0, [r7, #20]
 80020be:	f7fe f833 	bl	8000128 <__udivsi3>
 80020c2:	0003      	movs	r3, r0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e015      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2238      	movs	r2, #56	; 0x38
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d103      	bne.n	80020dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2238      	movs	r2, #56	; 0x38
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b18      	cmp	r3, #24
 80020e6:	d103      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020e8:	23fa      	movs	r3, #250	; 0xfa
 80020ea:	01db      	lsls	r3, r3, #7
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e001      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020f4:	693b      	ldr	r3, [r7, #16]
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b006      	add	sp, #24
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	40021000 	.word	0x40021000
 8002104:	00f42400 	.word	0x00f42400
 8002108:	007a1200 	.word	0x007a1200

0800210c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <HAL_RCC_GetHCLKFreq+0x10>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	20000000 	.word	0x20000000

08002120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002120:	b5b0      	push	{r4, r5, r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002124:	f7ff fff2 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002128:	0004      	movs	r4, r0
 800212a:	f7ff fb3f 	bl	80017ac <LL_RCC_GetAPB1Prescaler>
 800212e:	0003      	movs	r3, r0
 8002130:	0b1a      	lsrs	r2, r3, #12
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	58d3      	ldr	r3, [r2, r3]
 8002138:	221f      	movs	r2, #31
 800213a:	4013      	ands	r3, r2
 800213c:	40dc      	lsrs	r4, r3
 800213e:	0023      	movs	r3, r4
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	080046d8 	.word	0x080046d8

0800214c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002154:	2313      	movs	r3, #19
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800215c:	2312      	movs	r3, #18
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	029b      	lsls	r3, r3, #10
 800216c:	4013      	ands	r3, r2
 800216e:	d100      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002170:	e0a3      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2011      	movs	r0, #17
 8002174:	183b      	adds	r3, r7, r0
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217a:	4bc3      	ldr	r3, [pc, #780]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800217c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	055b      	lsls	r3, r3, #21
 8002182:	4013      	ands	r3, r2
 8002184:	d110      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4bc0      	ldr	r3, [pc, #768]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800218a:	4bbf      	ldr	r3, [pc, #764]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0549      	lsls	r1, r1, #21
 8002190:	430a      	orrs	r2, r1
 8002192:	63da      	str	r2, [r3, #60]	; 0x3c
 8002194:	4bbc      	ldr	r3, [pc, #752]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	055b      	lsls	r3, r3, #21
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a2:	183b      	adds	r3, r7, r0
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a8:	4bb8      	ldr	r3, [pc, #736]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4bb7      	ldr	r3, [pc, #732]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	0049      	lsls	r1, r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b6:	f7fe fecd 	bl	8000f54 <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021be:	e00b      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c0:	f7fe fec8 	bl	8000f54 <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d904      	bls.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80021ce:	2313      	movs	r3, #19
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	2203      	movs	r2, #3
 80021d4:	701a      	strb	r2, [r3, #0]
        break;
 80021d6:	e005      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d8:	4bac      	ldr	r3, [pc, #688]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4013      	ands	r3, r2
 80021e2:	d0ed      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021e4:	2313      	movs	r3, #19
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d154      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021ee:	4ba6      	ldr	r3, [pc, #664]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021f2:	23c0      	movs	r3, #192	; 0xc0
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4013      	ands	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d019      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	429a      	cmp	r2, r3
 8002208:	d014      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800220a:	4b9f      	ldr	r3, [pc, #636]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	4aa0      	ldr	r2, [pc, #640]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002210:	4013      	ands	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002214:	4b9c      	ldr	r3, [pc, #624]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002216:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002218:	4b9b      	ldr	r3, [pc, #620]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	0249      	lsls	r1, r1, #9
 800221e:	430a      	orrs	r2, r1
 8002220:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002222:	4b99      	ldr	r3, [pc, #612]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002224:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002226:	4b98      	ldr	r3, [pc, #608]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002228:	499a      	ldr	r1, [pc, #616]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800222a:	400a      	ands	r2, r1
 800222c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800222e:	4b96      	ldr	r3, [pc, #600]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2201      	movs	r2, #1
 8002238:	4013      	ands	r3, r2
 800223a:	d016      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fe8a 	bl	8000f54 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002244:	e00c      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fe85 	bl	8000f54 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	4a91      	ldr	r2, [pc, #580]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d904      	bls.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002256:	2313      	movs	r3, #19
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2203      	movs	r2, #3
 800225c:	701a      	strb	r2, [r3, #0]
            break;
 800225e:	e004      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002260:	4b89      	ldr	r3, [pc, #548]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2202      	movs	r2, #2
 8002266:	4013      	ands	r3, r2
 8002268:	d0ed      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800226a:	2313      	movs	r3, #19
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10a      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002274:	4b84      	ldr	r3, [pc, #528]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	4a85      	ldr	r2, [pc, #532]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800227a:	4013      	ands	r3, r2
 800227c:	0019      	movs	r1, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002282:	4b81      	ldr	r3, [pc, #516]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002284:	430a      	orrs	r2, r1
 8002286:	65da      	str	r2, [r3, #92]	; 0x5c
 8002288:	e00c      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800228a:	2312      	movs	r3, #18
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2213      	movs	r2, #19
 8002290:	18ba      	adds	r2, r7, r2
 8002292:	7812      	ldrb	r2, [r2, #0]
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	e005      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002298:	2312      	movs	r3, #18
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	2213      	movs	r2, #19
 800229e:	18ba      	adds	r2, r7, r2
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022a4:	2311      	movs	r3, #17
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d105      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	4b76      	ldr	r3, [pc, #472]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022b2:	4b75      	ldr	r3, [pc, #468]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b4:	4979      	ldr	r1, [pc, #484]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80022b6:	400a      	ands	r2, r1
 80022b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2201      	movs	r2, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022c4:	4b70      	ldr	r3, [pc, #448]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	2203      	movs	r2, #3
 80022ca:	4393      	bics	r3, r2
 80022cc:	0019      	movs	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2202      	movs	r2, #2
 80022de:	4013      	ands	r3, r2
 80022e0:	d009      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022e2:	4b69      	ldr	r3, [pc, #420]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	220c      	movs	r2, #12
 80022e8:	4393      	bics	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b65      	ldr	r3, [pc, #404]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2210      	movs	r2, #16
 80022fc:	4013      	ands	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002300:	4b61      	ldr	r3, [pc, #388]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	4a66      	ldr	r2, [pc, #408]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002306:	4013      	ands	r3, r2
 8002308:	0019      	movs	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002310:	430a      	orrs	r2, r1
 8002312:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4013      	ands	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002320:	4b59      	ldr	r3, [pc, #356]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	4a5f      	ldr	r2, [pc, #380]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002326:	4013      	ands	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	4b56      	ldr	r3, [pc, #344]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002330:	430a      	orrs	r2, r1
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4013      	ands	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002340:	4b51      	ldr	r3, [pc, #324]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002344:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002350:	430a      	orrs	r2, r1
 8002352:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2220      	movs	r2, #32
 800235a:	4013      	ands	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800235e:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236e:	430a      	orrs	r2, r1
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	01db      	lsls	r3, r3, #7
 800237a:	4013      	ands	r3, r2
 800237c:	d015      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800237e:	4b42      	ldr	r3, [pc, #264]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	0899      	lsrs	r1, r3, #2
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1a      	ldr	r2, [r3, #32]
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238c:	430a      	orrs	r2, r1
 800238e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	05db      	lsls	r3, r3, #23
 8002398:	429a      	cmp	r2, r3
 800239a:	d106      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800239c:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	0249      	lsls	r1, r1, #9
 80023a6:	430a      	orrs	r2, r1
 80023a8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	031b      	lsls	r3, r3, #12
 80023b2:	4013      	ands	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c4:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	039b      	lsls	r3, r3, #14
 80023d2:	4013      	ands	r3, r2
 80023d4:	d016      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80023dc:	4013      	ands	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e6:	430a      	orrs	r2, r1
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	03db      	lsls	r3, r3, #15
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d106      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	4b23      	ldr	r3, [pc, #140]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	0449      	lsls	r1, r1, #17
 8002400:	430a      	orrs	r2, r1
 8002402:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	03db      	lsls	r3, r3, #15
 800240c:	4013      	ands	r3, r2
 800240e:	d016      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002414:	4a27      	ldr	r2, [pc, #156]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002416:	4013      	ands	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241e:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002420:	430a      	orrs	r2, r1
 8002422:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	045b      	lsls	r3, r3, #17
 800242c:	429a      	cmp	r2, r3
 800242e:	d106      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002430:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	0449      	lsls	r1, r1, #17
 800243a:	430a      	orrs	r2, r1
 800243c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	4013      	ands	r3, r2
 8002448:	d016      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002450:	4013      	ands	r3, r2
 8002452:	0019      	movs	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245a:	430a      	orrs	r2, r1
 800245c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	01db      	lsls	r3, r3, #7
 8002466:	429a      	cmp	r2, r3
 8002468:	d106      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	0249      	lsls	r1, r1, #9
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002478:	2312      	movs	r3, #18
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	781b      	ldrb	r3, [r3, #0]
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b006      	add	sp, #24
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	40021000 	.word	0x40021000
 800248c:	40007000 	.word	0x40007000
 8002490:	fffffcff 	.word	0xfffffcff
 8002494:	fffeffff 	.word	0xfffeffff
 8002498:	00001388 	.word	0x00001388
 800249c:	efffffff 	.word	0xefffffff
 80024a0:	fffff3ff 	.word	0xfffff3ff
 80024a4:	fff3ffff 	.word	0xfff3ffff
 80024a8:	ffcfffff 	.word	0xffcfffff
 80024ac:	ffffcfff 	.word	0xffffcfff
 80024b0:	ffbfffff 	.word	0xffbfffff
 80024b4:	feffffff 	.word	0xfeffffff
 80024b8:	ffff3fff 	.word	0xffff3fff

080024bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80024bc:	b5b0      	push	{r4, r5, r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024c4:	230f      	movs	r3, #15
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d100      	bne.n	80024d4 <HAL_RTC_Init+0x18>
 80024d2:	e080      	b.n	80025d6 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2229      	movs	r2, #41	; 0x29
 80024d8:	5c9b      	ldrb	r3, [r3, r2]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10b      	bne.n	80024f8 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2228      	movs	r2, #40	; 0x28
 80024e4:	2100      	movs	r1, #0
 80024e6:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2288      	movs	r2, #136	; 0x88
 80024ec:	0212      	lsls	r2, r2, #8
 80024ee:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7fe fbb0 	bl	8000c58 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2229      	movs	r2, #41	; 0x29
 80024fc:	2102      	movs	r1, #2
 80024fe:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	22ca      	movs	r2, #202	; 0xca
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2253      	movs	r2, #83	; 0x53
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002510:	250f      	movs	r5, #15
 8002512:	197c      	adds	r4, r7, r5
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	0018      	movs	r0, r3
 8002518:	f000 fcb5 	bl	8002e86 <RTC_EnterInitMode>
 800251c:	0003      	movs	r3, r0
 800251e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8002520:	0028      	movs	r0, r5
 8002522:	183b      	adds	r3, r7, r0
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d148      	bne.n	80025bc <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	492b      	ldr	r1, [pc, #172]	; (80025e4 <HAL_RTC_Init+0x128>)
 8002536:	400a      	ands	r2, r1
 8002538:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6999      	ldr	r1, [r3, #24]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6912      	ldr	r2, [r2, #16]
 8002560:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6919      	ldr	r1, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	041a      	lsls	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002576:	0005      	movs	r5, r0
 8002578:	183c      	adds	r4, r7, r0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	0018      	movs	r0, r3
 800257e:	f000 fcc5 	bl	8002f0c <RTC_ExitInitMode>
 8002582:	0003      	movs	r3, r0
 8002584:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8002586:	197b      	adds	r3, r7, r5
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699a      	ldr	r2, [r3, #24]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	00d2      	lsls	r2, r2, #3
 800259a:	08d2      	lsrs	r2, r2, #3
 800259c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6999      	ldr	r1, [r3, #24]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	22ff      	movs	r2, #255	; 0xff
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80025c4:	230f      	movs	r3, #15
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2229      	movs	r2, #41	; 0x29
 80025d2:	2101      	movs	r1, #1
 80025d4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80025d6:	230f      	movs	r3, #15
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	781b      	ldrb	r3, [r3, #0]
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bdb0      	pop	{r4, r5, r7, pc}
 80025e4:	fb8fffbf 	.word	0xfb8fffbf

080025e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80025e8:	b5b0      	push	{r4, r5, r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2228      	movs	r2, #40	; 0x28
 80025f8:	5c9b      	ldrb	r3, [r3, r2]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_RTC_SetTime+0x1a>
 80025fe:	2302      	movs	r3, #2
 8002600:	e092      	b.n	8002728 <HAL_RTC_SetTime+0x140>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2228      	movs	r2, #40	; 0x28
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2229      	movs	r2, #41	; 0x29
 800260e:	2102      	movs	r1, #2
 8002610:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	22ca      	movs	r2, #202	; 0xca
 8002618:	625a      	str	r2, [r3, #36]	; 0x24
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2253      	movs	r2, #83	; 0x53
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002622:	2513      	movs	r5, #19
 8002624:	197c      	adds	r4, r7, r5
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	0018      	movs	r0, r3
 800262a:	f000 fc2c 	bl	8002e86 <RTC_EnterInitMode>
 800262e:	0003      	movs	r3, r0
 8002630:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002632:	197b      	adds	r3, r7, r5
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d162      	bne.n	8002700 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d125      	bne.n	800268c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2240      	movs	r2, #64	; 0x40
 8002648:	4013      	ands	r3, r2
 800264a:	d102      	bne.n	8002652 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2200      	movs	r2, #0
 8002650:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 fc9c 	bl	8002f94 <RTC_ByteToBcd2>
 800265c:	0003      	movs	r3, r0
 800265e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	0018      	movs	r0, r3
 8002666:	f000 fc95 	bl	8002f94 <RTC_ByteToBcd2>
 800266a:	0003      	movs	r3, r0
 800266c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800266e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	789b      	ldrb	r3, [r3, #2]
 8002674:	0018      	movs	r0, r3
 8002676:	f000 fc8d 	bl	8002f94 <RTC_ByteToBcd2>
 800267a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800267c:	0022      	movs	r2, r4
 800267e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	78db      	ldrb	r3, [r3, #3]
 8002684:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002686:	4313      	orrs	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e017      	b.n	80026bc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2240      	movs	r2, #64	; 0x40
 8002694:	4013      	ands	r3, r2
 8002696:	d102      	bne.n	800269e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2200      	movs	r2, #0
 800269c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	785b      	ldrb	r3, [r3, #1]
 80026a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026aa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026b0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	78db      	ldrb	r3, [r3, #3]
 80026b6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	491b      	ldr	r1, [pc, #108]	; (8002730 <HAL_RTC_SetTime+0x148>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4918      	ldr	r1, [pc, #96]	; (8002734 <HAL_RTC_SetTime+0x14c>)
 80026d4:	400a      	ands	r2, r1
 80026d6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6999      	ldr	r1, [r3, #24]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026f0:	2313      	movs	r3, #19
 80026f2:	18fc      	adds	r4, r7, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fc08 	bl	8002f0c <RTC_ExitInitMode>
 80026fc:	0003      	movs	r3, r0
 80026fe:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	22ff      	movs	r2, #255	; 0xff
 8002706:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002708:	2313      	movs	r3, #19
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2229      	movs	r2, #41	; 0x29
 8002716:	2101      	movs	r1, #1
 8002718:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2228      	movs	r2, #40	; 0x28
 800271e:	2100      	movs	r1, #0
 8002720:	5499      	strb	r1, [r3, r2]

  return status;
 8002722:	2313      	movs	r3, #19
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	781b      	ldrb	r3, [r3, #0]
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b006      	add	sp, #24
 800272e:	bdb0      	pop	{r4, r5, r7, pc}
 8002730:	007f7f7f 	.word	0x007f7f7f
 8002734:	fffbffff 	.word	0xfffbffff

08002738 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	045b      	lsls	r3, r3, #17
 8002756:	0c5a      	lsrs	r2, r3, #17
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a22      	ldr	r2, [pc, #136]	; (80027ec <HAL_RTC_GetTime+0xb4>)
 8002764:	4013      	ands	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	0c1b      	lsrs	r3, r3, #16
 800276c:	b2db      	uxtb	r3, r3
 800276e:	223f      	movs	r2, #63	; 0x3f
 8002770:	4013      	ands	r3, r2
 8002772:	b2da      	uxtb	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b2db      	uxtb	r3, r3
 800277e:	227f      	movs	r2, #127	; 0x7f
 8002780:	4013      	ands	r3, r2
 8002782:	b2da      	uxtb	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	227f      	movs	r2, #127	; 0x7f
 800278e:	4013      	ands	r3, r2
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	0d9b      	lsrs	r3, r3, #22
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2201      	movs	r2, #1
 800279e:	4013      	ands	r3, r2
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11a      	bne.n	80027e2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 fc17 	bl	8002fe4 <RTC_Bcd2ToByte>
 80027b6:	0003      	movs	r3, r0
 80027b8:	001a      	movs	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	785b      	ldrb	r3, [r3, #1]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f000 fc0e 	bl	8002fe4 <RTC_Bcd2ToByte>
 80027c8:	0003      	movs	r3, r0
 80027ca:	001a      	movs	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	789b      	ldrb	r3, [r3, #2]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f000 fc05 	bl	8002fe4 <RTC_Bcd2ToByte>
 80027da:	0003      	movs	r3, r0
 80027dc:	001a      	movs	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b006      	add	sp, #24
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	007f7f7f 	.word	0x007f7f7f

080027f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80027f0:	b5b0      	push	{r4, r5, r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2228      	movs	r2, #40	; 0x28
 8002800:	5c9b      	ldrb	r3, [r3, r2]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_RTC_SetDate+0x1a>
 8002806:	2302      	movs	r3, #2
 8002808:	e07e      	b.n	8002908 <HAL_RTC_SetDate+0x118>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2228      	movs	r2, #40	; 0x28
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2229      	movs	r2, #41	; 0x29
 8002816:	2102      	movs	r1, #2
 8002818:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10e      	bne.n	800283e <HAL_RTC_SetDate+0x4e>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	001a      	movs	r2, r3
 8002826:	2310      	movs	r3, #16
 8002828:	4013      	ands	r3, r2
 800282a:	d008      	beq.n	800283e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	785b      	ldrb	r3, [r3, #1]
 8002830:	2210      	movs	r2, #16
 8002832:	4393      	bics	r3, r2
 8002834:	b2db      	uxtb	r3, r3
 8002836:	330a      	adds	r3, #10
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d11c      	bne.n	800287e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	78db      	ldrb	r3, [r3, #3]
 8002848:	0018      	movs	r0, r3
 800284a:	f000 fba3 	bl	8002f94 <RTC_ByteToBcd2>
 800284e:	0003      	movs	r3, r0
 8002850:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	785b      	ldrb	r3, [r3, #1]
 8002856:	0018      	movs	r0, r3
 8002858:	f000 fb9c 	bl	8002f94 <RTC_ByteToBcd2>
 800285c:	0003      	movs	r3, r0
 800285e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002860:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	789b      	ldrb	r3, [r3, #2]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 fb94 	bl	8002f94 <RTC_ByteToBcd2>
 800286c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800286e:	0022      	movs	r2, r4
 8002870:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	e00e      	b.n	800289c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	78db      	ldrb	r3, [r3, #3]
 8002882:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	785b      	ldrb	r3, [r3, #1]
 8002888:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800288a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002890:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	22ca      	movs	r2, #202	; 0xca
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2253      	movs	r2, #83	; 0x53
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80028ac:	2513      	movs	r5, #19
 80028ae:	197c      	adds	r4, r7, r5
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	0018      	movs	r0, r3
 80028b4:	f000 fae7 	bl	8002e86 <RTC_EnterInitMode>
 80028b8:	0003      	movs	r3, r0
 80028ba:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80028bc:	0028      	movs	r0, r5
 80028be:	183b      	adds	r3, r7, r0
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4910      	ldr	r1, [pc, #64]	; (8002910 <HAL_RTC_SetDate+0x120>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028d2:	183c      	adds	r4, r7, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 fb18 	bl	8002f0c <RTC_ExitInitMode>
 80028dc:	0003      	movs	r3, r0
 80028de:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80028e8:	2313      	movs	r3, #19
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2229      	movs	r2, #41	; 0x29
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2228      	movs	r2, #40	; 0x28
 80028fe:	2100      	movs	r1, #0
 8002900:	5499      	strb	r1, [r3, r2]

  return status;
 8002902:	2313      	movs	r3, #19
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	781b      	ldrb	r3, [r3, #0]
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b006      	add	sp, #24
 800290e:	bdb0      	pop	{r4, r5, r7, pc}
 8002910:	00ffff3f 	.word	0x00ffff3f

08002914 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a21      	ldr	r2, [pc, #132]	; (80029ac <HAL_RTC_GetDate+0x98>)
 8002928:	4013      	ands	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	0c1b      	lsrs	r3, r3, #16
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	b2db      	uxtb	r3, r3
 800293c:	221f      	movs	r2, #31
 800293e:	4013      	ands	r3, r2
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	223f      	movs	r2, #63	; 0x3f
 800294c:	4013      	ands	r3, r2
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	0b5b      	lsrs	r3, r3, #13
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2207      	movs	r2, #7
 800295c:	4013      	ands	r3, r2
 800295e:	b2da      	uxtb	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d11a      	bne.n	80029a0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	78db      	ldrb	r3, [r3, #3]
 800296e:	0018      	movs	r0, r3
 8002970:	f000 fb38 	bl	8002fe4 <RTC_Bcd2ToByte>
 8002974:	0003      	movs	r3, r0
 8002976:	001a      	movs	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	785b      	ldrb	r3, [r3, #1]
 8002980:	0018      	movs	r0, r3
 8002982:	f000 fb2f 	bl	8002fe4 <RTC_Bcd2ToByte>
 8002986:	0003      	movs	r3, r0
 8002988:	001a      	movs	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	789b      	ldrb	r3, [r3, #2]
 8002992:	0018      	movs	r0, r3
 8002994:	f000 fb26 	bl	8002fe4 <RTC_Bcd2ToByte>
 8002998:	0003      	movs	r3, r0
 800299a:	001a      	movs	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	0018      	movs	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b006      	add	sp, #24
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	00ffff3f 	.word	0x00ffff3f

080029b0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2228      	movs	r2, #40	; 0x28
 80029c0:	5c9b      	ldrb	r3, [r3, r2]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_RTC_SetAlarm_IT+0x1a>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e127      	b.n	8002c1a <HAL_RTC_SetAlarm_IT+0x26a>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2228      	movs	r2, #40	; 0x28
 80029ce:	2101      	movs	r1, #1
 80029d0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2229      	movs	r2, #41	; 0x29
 80029d6:	2102      	movs	r1, #2
 80029d8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d136      	bne.n	8002a4e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2240      	movs	r2, #64	; 0x40
 80029e8:	4013      	ands	r3, r2
 80029ea:	d102      	bne.n	80029f2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2200      	movs	r2, #0
 80029f0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f000 facc 	bl	8002f94 <RTC_ByteToBcd2>
 80029fc:	0003      	movs	r3, r0
 80029fe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 fac5 	bl	8002f94 <RTC_ByteToBcd2>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002a0e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	789b      	ldrb	r3, [r3, #2]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 fabd 	bl	8002f94 <RTC_ByteToBcd2>
 8002a1a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002a1c:	0022      	movs	r2, r4
 8002a1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	78db      	ldrb	r3, [r3, #3]
 8002a24:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002a26:	431a      	orrs	r2, r3
 8002a28:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	5c9b      	ldrb	r3, [r3, r2]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 faaf 	bl	8002f94 <RTC_ByteToBcd2>
 8002a36:	0003      	movs	r3, r0
 8002a38:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002a3a:	0022      	movs	r2, r4
 8002a3c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002a42:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	e022      	b.n	8002a94 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	4013      	ands	r3, r2
 8002a58:	d102      	bne.n	8002a60 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	785b      	ldrb	r3, [r3, #1]
 8002a6a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002a6c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002a72:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	78db      	ldrb	r3, [r3, #3]
 8002a78:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002a7a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2120      	movs	r1, #32
 8002a80:	5c5b      	ldrb	r3, [r3, r1]
 8002a82:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002a84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002a8a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	22ca      	movs	r2, #202	; 0xca
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2253      	movs	r2, #83	; 0x53
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d14c      	bne.n	8002b56 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4957      	ldr	r1, [pc, #348]	; (8002c24 <HAL_RTC_SetAlarm_IT+0x274>)
 8002ac8:	400a      	ands	r2, r1
 8002aca:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002adc:	f7fe fa3a 	bl	8000f54 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002ae4:	e016      	b.n	8002b14 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ae6:	f7fe fa35 	bl	8000f54 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	1ad2      	subs	r2, r2, r3
 8002af0:	23fa      	movs	r3, #250	; 0xfa
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d90d      	bls.n	8002b14 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	22ff      	movs	r2, #255	; 0xff
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2229      	movs	r2, #41	; 0x29
 8002b04:	2103      	movs	r1, #3
 8002b06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2228      	movs	r2, #40	; 0x28
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e082      	b.n	8002c1a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d0e2      	beq.n	8002ae6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2180      	movs	r1, #128	; 0x80
 8002b3c:	0049      	lsls	r1, r1, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	0149      	lsls	r1, r1, #5
 8002b50:	430a      	orrs	r2, r1
 8002b52:	619a      	str	r2, [r3, #24]
 8002b54:	e04b      	b.n	8002bee <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4931      	ldr	r1, [pc, #196]	; (8002c28 <HAL_RTC_SetAlarm_IT+0x278>)
 8002b62:	400a      	ands	r2, r1
 8002b64:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2102      	movs	r1, #2
 8002b72:	430a      	orrs	r2, r1
 8002b74:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002b76:	f7fe f9ed 	bl	8000f54 <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b7e:	e016      	b.n	8002bae <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b80:	f7fe f9e8 	bl	8000f54 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad2      	subs	r2, r2, r3
 8002b8a:	23fa      	movs	r3, #250	; 0xfa
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d90d      	bls.n	8002bae <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2229      	movs	r2, #41	; 0x29
 8002b9e:	2103      	movs	r1, #3
 8002ba0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2228      	movs	r2, #40	; 0x28
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e035      	b.n	8002c1a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d0e2      	beq.n	8002b80 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	0089      	lsls	r1, r1, #2
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2180      	movs	r1, #128	; 0x80
 8002be8:	0189      	lsls	r1, r1, #6
 8002bea:	430a      	orrs	r2, r1
 8002bec:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	58d3      	ldr	r3, [r2, r3]
 8002bf4:	490d      	ldr	r1, [pc, #52]	; (8002c2c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	0312      	lsls	r2, r2, #12
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	2280      	movs	r2, #128	; 0x80
 8002bfe:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	22ff      	movs	r2, #255	; 0xff
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2229      	movs	r2, #41	; 0x29
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2228      	movs	r2, #40	; 0x28
 8002c14:	2100      	movs	r1, #0
 8002c16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b009      	add	sp, #36	; 0x24
 8002c20:	bd90      	pop	{r4, r7, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	fffffeff 	.word	0xfffffeff
 8002c28:	fffffdff 	.word	0xfffffdff
 8002c2c:	40021800 	.word	0x40021800

08002c30 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d144      	bne.n	8002cd2 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2280      	movs	r2, #128	; 0x80
 8002c4c:	0052      	lsls	r2, r2, #1
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	045b      	lsls	r3, r3, #17
 8002c60:	0c5b      	lsrs	r3, r3, #17
 8002c62:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	223f      	movs	r2, #63	; 0x3f
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	227f      	movs	r2, #127	; 0x7f
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	227f      	movs	r2, #127	; 0x7f
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	0d9b      	lsrs	r3, r3, #22
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	0e1b      	lsrs	r3, r3, #24
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	223f      	movs	r2, #63	; 0x3f
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	b2d9      	uxtb	r1, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	05db      	lsls	r3, r3, #23
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	4a3b      	ldr	r2, [pc, #236]	; (8002db8 <HAL_RTC_GetAlarm+0x188>)
 8002cca:	401a      	ands	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	615a      	str	r2, [r3, #20]
 8002cd0:	e043      	b.n	8002d5a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	0092      	lsls	r2, r2, #2
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	045b      	lsls	r3, r3, #17
 8002cea:	0c5b      	lsrs	r3, r3, #17
 8002cec:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	223f      	movs	r2, #63	; 0x3f
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	227f      	movs	r2, #127	; 0x7f
 8002d06:	4013      	ands	r3, r2
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	227f      	movs	r2, #127	; 0x7f
 8002d14:	4013      	ands	r3, r2
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	0d9b      	lsrs	r3, r3, #22
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2201      	movs	r2, #1
 8002d24:	4013      	ands	r3, r2
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	0e1b      	lsrs	r3, r3, #24
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	223f      	movs	r2, #63	; 0x3f
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	b2d9      	uxtb	r1, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2220      	movs	r2, #32
 8002d42:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	05db      	lsls	r3, r3, #23
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <HAL_RTC_GetAlarm+0x188>)
 8002d54:	401a      	ands	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d125      	bne.n	8002dac <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 f93d 	bl	8002fe4 <RTC_Bcd2ToByte>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 f934 	bl	8002fe4 <RTC_Bcd2ToByte>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	001a      	movs	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	789b      	ldrb	r3, [r3, #2]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f92b 	bl	8002fe4 <RTC_Bcd2ToByte>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	001a      	movs	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	5c9b      	ldrb	r3, [r3, r2]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f000 f921 	bl	8002fe4 <RTC_Bcd2ToByte>
 8002da2:	0003      	movs	r3, r0
 8002da4:	0019      	movs	r1, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2220      	movs	r2, #32
 8002daa:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b006      	add	sp, #24
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	80808080 	.word	0x80808080

08002dbc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	015b      	lsls	r3, r3, #5
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d011      	beq.n	8002df6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2101      	movs	r1, #1
 8002dea:	430a      	orrs	r2, r1
 8002dec:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7fd fe87 	bl	8000b04 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	019b      	lsls	r3, r3, #6
 8002e00:	4013      	ands	r3, r2
 8002e02:	d011      	beq.n	8002e28 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d00b      	beq.n	8002e28 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 f8fb 	bl	800301e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2229      	movs	r2, #41	; 0x29
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	5499      	strb	r1, [r3, r2]
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	21a0      	movs	r1, #160	; 0xa0
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002e50:	f7fe f880 	bl	8000f54 <HAL_GetTick>
 8002e54:	0003      	movs	r3, r0
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002e58:	e00a      	b.n	8002e70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e5a:	f7fe f87b 	bl	8000f54 <HAL_GetTick>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad2      	subs	r2, r2, r3
 8002e64:	23fa      	movs	r3, #250	; 0xfa
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d901      	bls.n	8002e70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e006      	b.n	8002e7e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d0ee      	beq.n	8002e5a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b004      	add	sp, #16
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002e8e:	230f      	movs	r3, #15
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2240      	movs	r2, #64	; 0x40
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d12c      	bne.n	8002efc <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002eb2:	f7fe f84f 	bl	8000f54 <HAL_GetTick>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002eba:	e014      	b.n	8002ee6 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ebc:	f7fe f84a 	bl	8000f54 <HAL_GetTick>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad2      	subs	r2, r2, r3
 8002ec6:	200f      	movs	r0, #15
 8002ec8:	183b      	adds	r3, r7, r0
 8002eca:	1839      	adds	r1, r7, r0
 8002ecc:	7809      	ldrb	r1, [r1, #0]
 8002ece:	7019      	strb	r1, [r3, #0]
 8002ed0:	23fa      	movs	r3, #250	; 0xfa
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d906      	bls.n	8002ee6 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002ed8:	183b      	adds	r3, r7, r0
 8002eda:	2203      	movs	r2, #3
 8002edc:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2229      	movs	r2, #41	; 0x29
 8002ee2:	2103      	movs	r1, #3
 8002ee4:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2240      	movs	r2, #64	; 0x40
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d104      	bne.n	8002efc <RTC_EnterInitMode+0x76>
 8002ef2:	230f      	movs	r3, #15
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d1df      	bne.n	8002ebc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002efc:	230f      	movs	r3, #15
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	781b      	ldrb	r3, [r3, #0]
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b004      	add	sp, #16
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f14:	240f      	movs	r4, #15
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002f1c:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <RTC_ExitInitMode+0x84>)
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <RTC_ExitInitMode+0x84>)
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	438a      	bics	r2, r1
 8002f26:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <RTC_ExitInitMode+0x84>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d10d      	bne.n	8002f4e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f7ff ff7f 	bl	8002e38 <HAL_RTC_WaitForSynchro>
 8002f3a:	1e03      	subs	r3, r0, #0
 8002f3c:	d021      	beq.n	8002f82 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2229      	movs	r2, #41	; 0x29
 8002f42:	2103      	movs	r1, #3
 8002f44:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	2203      	movs	r2, #3
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e019      	b.n	8002f82 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <RTC_ExitInitMode+0x84>)
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <RTC_ExitInitMode+0x84>)
 8002f54:	2120      	movs	r1, #32
 8002f56:	438a      	bics	r2, r1
 8002f58:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff ff6b 	bl	8002e38 <HAL_RTC_WaitForSynchro>
 8002f62:	1e03      	subs	r3, r0, #0
 8002f64:	d007      	beq.n	8002f76 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2229      	movs	r2, #41	; 0x29
 8002f6a:	2103      	movs	r1, #3
 8002f6c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002f6e:	230f      	movs	r3, #15
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	2203      	movs	r2, #3
 8002f74:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <RTC_ExitInitMode+0x84>)
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <RTC_ExitInitMode+0x84>)
 8002f7c:	2120      	movs	r1, #32
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002f82:	230f      	movs	r3, #15
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	781b      	ldrb	r3, [r3, #0]
}
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b005      	add	sp, #20
 8002f8e:	bd90      	pop	{r4, r7, pc}
 8002f90:	40002800 	.word	0x40002800

08002f94 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	1dfb      	adds	r3, r7, #7
 8002f9e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002fa4:	230b      	movs	r3, #11
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	1dfa      	adds	r2, r7, #7
 8002faa:	7812      	ldrb	r2, [r2, #0]
 8002fac:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002fae:	e008      	b.n	8002fc2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002fb6:	220b      	movs	r2, #11
 8002fb8:	18bb      	adds	r3, r7, r2
 8002fba:	18ba      	adds	r2, r7, r2
 8002fbc:	7812      	ldrb	r2, [r2, #0]
 8002fbe:	3a0a      	subs	r2, #10
 8002fc0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002fc2:	210b      	movs	r1, #11
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b09      	cmp	r3, #9
 8002fca:	d8f1      	bhi.n	8002fb0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b2db      	uxtb	r3, r3
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b004      	add	sp, #16
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	0002      	movs	r2, r0
 8002fec:	1dfb      	adds	r3, r7, #7
 8002fee:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002ff0:	1dfb      	adds	r3, r7, #7
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	0013      	movs	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	189b      	adds	r3, r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	1dfb      	adds	r3, r7, #7
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	210f      	movs	r1, #15
 800300e:	400b      	ands	r3, r1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	18d3      	adds	r3, r2, r3
 8003014:	b2db      	uxtb	r3, r3
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	b002      	add	sp, #8
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e046      	b.n	80030d0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2284      	movs	r2, #132	; 0x84
 8003046:	589b      	ldr	r3, [r3, r2]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2280      	movs	r2, #128	; 0x80
 8003050:	2100      	movs	r1, #0
 8003052:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f7fd fe2c 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2284      	movs	r2, #132	; 0x84
 8003060:	2124      	movs	r1, #36	; 0x24
 8003062:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2101      	movs	r1, #1
 8003070:	438a      	bics	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	0018      	movs	r0, r3
 8003078:	f000 f8dc 	bl	8003234 <UART_SetConfig>
 800307c:	0003      	movs	r3, r0
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e024      	b.n	80030d0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f000 fbab 	bl	80037ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	490d      	ldr	r1, [pc, #52]	; (80030d8 <HAL_UART_Init+0xa8>)
 80030a2:	400a      	ands	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	212a      	movs	r1, #42	; 0x2a
 80030b2:	438a      	bics	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2101      	movs	r1, #1
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f000 fc43 	bl	8003954 <UART_CheckIdleState>
 80030ce:	0003      	movs	r3, r0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	ffffb7ff 	.word	0xffffb7ff

080030dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	1dbb      	adds	r3, r7, #6
 80030ea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2284      	movs	r2, #132	; 0x84
 80030f0:	589b      	ldr	r3, [r3, r2]
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d000      	beq.n	80030f8 <HAL_UART_Transmit+0x1c>
 80030f6:	e097      	b.n	8003228 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_Transmit+0x2a>
 80030fe:	1dbb      	adds	r3, r7, #6
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e08f      	b.n	800322a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	015b      	lsls	r3, r3, #5
 8003112:	429a      	cmp	r2, r3
 8003114:	d109      	bne.n	800312a <HAL_UART_Transmit+0x4e>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2201      	movs	r2, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d001      	beq.n	800312a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07f      	b.n	800322a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	5c9b      	ldrb	r3, [r3, r2]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_UART_Transmit+0x5c>
 8003134:	2302      	movs	r3, #2
 8003136:	e078      	b.n	800322a <HAL_UART_Transmit+0x14e>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2280      	movs	r2, #128	; 0x80
 800313c:	2101      	movs	r1, #1
 800313e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	228c      	movs	r2, #140	; 0x8c
 8003144:	2100      	movs	r1, #0
 8003146:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2284      	movs	r2, #132	; 0x84
 800314c:	2121      	movs	r1, #33	; 0x21
 800314e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003150:	f7fd ff00 	bl	8000f54 <HAL_GetTick>
 8003154:	0003      	movs	r3, r0
 8003156:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1dba      	adds	r2, r7, #6
 800315c:	2154      	movs	r1, #84	; 0x54
 800315e:	8812      	ldrh	r2, [r2, #0]
 8003160:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1dba      	adds	r2, r7, #6
 8003166:	2156      	movs	r1, #86	; 0x56
 8003168:	8812      	ldrh	r2, [r2, #0]
 800316a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	015b      	lsls	r3, r3, #5
 8003174:	429a      	cmp	r2, r3
 8003176:	d108      	bne.n	800318a <HAL_UART_Transmit+0xae>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	e003      	b.n	8003192 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	2100      	movs	r1, #0
 8003198:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800319a:	e02c      	b.n	80031f6 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	0013      	movs	r3, r2
 80031a6:	2200      	movs	r2, #0
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	f000 fc1d 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 80031ae:	1e03      	subs	r3, r0, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e039      	b.n	800322a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	001a      	movs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	05d2      	lsls	r2, r2, #23
 80031c8:	0dd2      	lsrs	r2, r2, #23
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	3302      	adds	r3, #2
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	e007      	b.n	80031e4 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2256      	movs	r2, #86	; 0x56
 80031e8:	5a9b      	ldrh	r3, [r3, r2]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b299      	uxth	r1, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2256      	movs	r2, #86	; 0x56
 80031f4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2256      	movs	r2, #86	; 0x56
 80031fa:	5a9b      	ldrh	r3, [r3, r2]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1cc      	bne.n	800319c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	0013      	movs	r3, r2
 800320c:	2200      	movs	r2, #0
 800320e:	2140      	movs	r1, #64	; 0x40
 8003210:	f000 fbea 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d001      	beq.n	800321c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e006      	b.n	800322a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2284      	movs	r2, #132	; 0x84
 8003220:	2120      	movs	r1, #32
 8003222:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b008      	add	sp, #32
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003234:	b5b0      	push	{r4, r5, r7, lr}
 8003236:	b090      	sub	sp, #64	; 0x40
 8003238:	af00      	add	r7, sp, #0
 800323a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800323c:	231a      	movs	r3, #26
 800323e:	2220      	movs	r2, #32
 8003240:	4694      	mov	ip, r2
 8003242:	44bc      	add	ip, r7
 8003244:	4463      	add	r3, ip
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	431a      	orrs	r2, r3
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	431a      	orrs	r2, r3
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4313      	orrs	r3, r2
 8003260:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4ab9      	ldr	r2, [pc, #740]	; (8003550 <UART_SetConfig+0x31c>)
 800326a:	4013      	ands	r3, r2
 800326c:	0019      	movs	r1, r3
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003274:	430b      	orrs	r3, r1
 8003276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4ab5      	ldr	r2, [pc, #724]	; (8003554 <UART_SetConfig+0x320>)
 8003280:	4013      	ands	r3, r2
 8003282:	0018      	movs	r0, r3
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	68d9      	ldr	r1, [r3, #12]
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	0003      	movs	r3, r0
 800328e:	430b      	orrs	r3, r1
 8003290:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4aae      	ldr	r2, [pc, #696]	; (8003558 <UART_SetConfig+0x324>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d004      	beq.n	80032ac <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032a8:	4313      	orrs	r3, r2
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4aaa      	ldr	r2, [pc, #680]	; (800355c <UART_SetConfig+0x328>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	0019      	movs	r1, r3
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032be:	430b      	orrs	r3, r1
 80032c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	220f      	movs	r2, #15
 80032ca:	4393      	bics	r3, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	0003      	movs	r3, r0
 80032d8:	430b      	orrs	r3, r1
 80032da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a9f      	ldr	r2, [pc, #636]	; (8003560 <UART_SetConfig+0x32c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d136      	bne.n	8003354 <UART_SetConfig+0x120>
 80032e6:	4b9f      	ldr	r3, [pc, #636]	; (8003564 <UART_SetConfig+0x330>)
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	2203      	movs	r2, #3
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d020      	beq.n	8003334 <UART_SetConfig+0x100>
 80032f2:	d827      	bhi.n	8003344 <UART_SetConfig+0x110>
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d00d      	beq.n	8003314 <UART_SetConfig+0xe0>
 80032f8:	d824      	bhi.n	8003344 <UART_SetConfig+0x110>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <UART_SetConfig+0xd0>
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d010      	beq.n	8003324 <UART_SetConfig+0xf0>
 8003302:	e01f      	b.n	8003344 <UART_SetConfig+0x110>
 8003304:	231b      	movs	r3, #27
 8003306:	2220      	movs	r2, #32
 8003308:	4694      	mov	ip, r2
 800330a:	44bc      	add	ip, r7
 800330c:	4463      	add	r3, ip
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e0c5      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003314:	231b      	movs	r3, #27
 8003316:	2220      	movs	r2, #32
 8003318:	4694      	mov	ip, r2
 800331a:	44bc      	add	ip, r7
 800331c:	4463      	add	r3, ip
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e0bd      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003324:	231b      	movs	r3, #27
 8003326:	2220      	movs	r2, #32
 8003328:	4694      	mov	ip, r2
 800332a:	44bc      	add	ip, r7
 800332c:	4463      	add	r3, ip
 800332e:	2204      	movs	r2, #4
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e0b5      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003334:	231b      	movs	r3, #27
 8003336:	2220      	movs	r2, #32
 8003338:	4694      	mov	ip, r2
 800333a:	44bc      	add	ip, r7
 800333c:	4463      	add	r3, ip
 800333e:	2208      	movs	r2, #8
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e0ad      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003344:	231b      	movs	r3, #27
 8003346:	2220      	movs	r2, #32
 8003348:	4694      	mov	ip, r2
 800334a:	44bc      	add	ip, r7
 800334c:	4463      	add	r3, ip
 800334e:	2210      	movs	r2, #16
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e0a5      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a83      	ldr	r2, [pc, #524]	; (8003568 <UART_SetConfig+0x334>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d136      	bne.n	80033cc <UART_SetConfig+0x198>
 800335e:	4b81      	ldr	r3, [pc, #516]	; (8003564 <UART_SetConfig+0x330>)
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	220c      	movs	r2, #12
 8003364:	4013      	ands	r3, r2
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d020      	beq.n	80033ac <UART_SetConfig+0x178>
 800336a:	d827      	bhi.n	80033bc <UART_SetConfig+0x188>
 800336c:	2b08      	cmp	r3, #8
 800336e:	d00d      	beq.n	800338c <UART_SetConfig+0x158>
 8003370:	d824      	bhi.n	80033bc <UART_SetConfig+0x188>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <UART_SetConfig+0x148>
 8003376:	2b04      	cmp	r3, #4
 8003378:	d010      	beq.n	800339c <UART_SetConfig+0x168>
 800337a:	e01f      	b.n	80033bc <UART_SetConfig+0x188>
 800337c:	231b      	movs	r3, #27
 800337e:	2220      	movs	r2, #32
 8003380:	4694      	mov	ip, r2
 8003382:	44bc      	add	ip, r7
 8003384:	4463      	add	r3, ip
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e089      	b.n	80034a0 <UART_SetConfig+0x26c>
 800338c:	231b      	movs	r3, #27
 800338e:	2220      	movs	r2, #32
 8003390:	4694      	mov	ip, r2
 8003392:	44bc      	add	ip, r7
 8003394:	4463      	add	r3, ip
 8003396:	2202      	movs	r2, #2
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e081      	b.n	80034a0 <UART_SetConfig+0x26c>
 800339c:	231b      	movs	r3, #27
 800339e:	2220      	movs	r2, #32
 80033a0:	4694      	mov	ip, r2
 80033a2:	44bc      	add	ip, r7
 80033a4:	4463      	add	r3, ip
 80033a6:	2204      	movs	r2, #4
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e079      	b.n	80034a0 <UART_SetConfig+0x26c>
 80033ac:	231b      	movs	r3, #27
 80033ae:	2220      	movs	r2, #32
 80033b0:	4694      	mov	ip, r2
 80033b2:	44bc      	add	ip, r7
 80033b4:	4463      	add	r3, ip
 80033b6:	2208      	movs	r2, #8
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e071      	b.n	80034a0 <UART_SetConfig+0x26c>
 80033bc:	231b      	movs	r3, #27
 80033be:	2220      	movs	r2, #32
 80033c0:	4694      	mov	ip, r2
 80033c2:	44bc      	add	ip, r7
 80033c4:	4463      	add	r3, ip
 80033c6:	2210      	movs	r2, #16
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	e069      	b.n	80034a0 <UART_SetConfig+0x26c>
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a66      	ldr	r2, [pc, #408]	; (800356c <UART_SetConfig+0x338>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d107      	bne.n	80033e6 <UART_SetConfig+0x1b2>
 80033d6:	231b      	movs	r3, #27
 80033d8:	2220      	movs	r2, #32
 80033da:	4694      	mov	ip, r2
 80033dc:	44bc      	add	ip, r7
 80033de:	4463      	add	r3, ip
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	e05c      	b.n	80034a0 <UART_SetConfig+0x26c>
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a61      	ldr	r2, [pc, #388]	; (8003570 <UART_SetConfig+0x33c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d107      	bne.n	8003400 <UART_SetConfig+0x1cc>
 80033f0:	231b      	movs	r3, #27
 80033f2:	2220      	movs	r2, #32
 80033f4:	4694      	mov	ip, r2
 80033f6:	44bc      	add	ip, r7
 80033f8:	4463      	add	r3, ip
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
 80033fe:	e04f      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a54      	ldr	r2, [pc, #336]	; (8003558 <UART_SetConfig+0x324>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d143      	bne.n	8003492 <UART_SetConfig+0x25e>
 800340a:	4b56      	ldr	r3, [pc, #344]	; (8003564 <UART_SetConfig+0x330>)
 800340c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800340e:	23c0      	movs	r3, #192	; 0xc0
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	4013      	ands	r3, r2
 8003414:	22c0      	movs	r2, #192	; 0xc0
 8003416:	0112      	lsls	r2, r2, #4
 8003418:	4293      	cmp	r3, r2
 800341a:	d02a      	beq.n	8003472 <UART_SetConfig+0x23e>
 800341c:	22c0      	movs	r2, #192	; 0xc0
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	4293      	cmp	r3, r2
 8003422:	d82e      	bhi.n	8003482 <UART_SetConfig+0x24e>
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	0112      	lsls	r2, r2, #4
 8003428:	4293      	cmp	r3, r2
 800342a:	d012      	beq.n	8003452 <UART_SetConfig+0x21e>
 800342c:	2280      	movs	r2, #128	; 0x80
 800342e:	0112      	lsls	r2, r2, #4
 8003430:	4293      	cmp	r3, r2
 8003432:	d826      	bhi.n	8003482 <UART_SetConfig+0x24e>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <UART_SetConfig+0x20e>
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	00d2      	lsls	r2, r2, #3
 800343c:	4293      	cmp	r3, r2
 800343e:	d010      	beq.n	8003462 <UART_SetConfig+0x22e>
 8003440:	e01f      	b.n	8003482 <UART_SetConfig+0x24e>
 8003442:	231b      	movs	r3, #27
 8003444:	2220      	movs	r2, #32
 8003446:	4694      	mov	ip, r2
 8003448:	44bc      	add	ip, r7
 800344a:	4463      	add	r3, ip
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	e026      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003452:	231b      	movs	r3, #27
 8003454:	2220      	movs	r2, #32
 8003456:	4694      	mov	ip, r2
 8003458:	44bc      	add	ip, r7
 800345a:	4463      	add	r3, ip
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e01e      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003462:	231b      	movs	r3, #27
 8003464:	2220      	movs	r2, #32
 8003466:	4694      	mov	ip, r2
 8003468:	44bc      	add	ip, r7
 800346a:	4463      	add	r3, ip
 800346c:	2204      	movs	r2, #4
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	e016      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003472:	231b      	movs	r3, #27
 8003474:	2220      	movs	r2, #32
 8003476:	4694      	mov	ip, r2
 8003478:	44bc      	add	ip, r7
 800347a:	4463      	add	r3, ip
 800347c:	2208      	movs	r2, #8
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e00e      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003482:	231b      	movs	r3, #27
 8003484:	2220      	movs	r2, #32
 8003486:	4694      	mov	ip, r2
 8003488:	44bc      	add	ip, r7
 800348a:	4463      	add	r3, ip
 800348c:	2210      	movs	r2, #16
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e006      	b.n	80034a0 <UART_SetConfig+0x26c>
 8003492:	231b      	movs	r3, #27
 8003494:	2220      	movs	r2, #32
 8003496:	4694      	mov	ip, r2
 8003498:	44bc      	add	ip, r7
 800349a:	4463      	add	r3, ip
 800349c:	2210      	movs	r2, #16
 800349e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a2c      	ldr	r2, [pc, #176]	; (8003558 <UART_SetConfig+0x324>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d000      	beq.n	80034ac <UART_SetConfig+0x278>
 80034aa:	e0ad      	b.n	8003608 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034ac:	231b      	movs	r3, #27
 80034ae:	2220      	movs	r2, #32
 80034b0:	4694      	mov	ip, r2
 80034b2:	44bc      	add	ip, r7
 80034b4:	4463      	add	r3, ip
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d015      	beq.n	80034e8 <UART_SetConfig+0x2b4>
 80034bc:	dc18      	bgt.n	80034f0 <UART_SetConfig+0x2bc>
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d00d      	beq.n	80034de <UART_SetConfig+0x2aa>
 80034c2:	dc15      	bgt.n	80034f0 <UART_SetConfig+0x2bc>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <UART_SetConfig+0x29a>
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d005      	beq.n	80034d8 <UART_SetConfig+0x2a4>
 80034cc:	e010      	b.n	80034f0 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ce:	f7fe fe27 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 80034d2:	0003      	movs	r3, r0
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034d6:	e015      	b.n	8003504 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d8:	4b26      	ldr	r3, [pc, #152]	; (8003574 <UART_SetConfig+0x340>)
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034dc:	e012      	b.n	8003504 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034de:	f7fe fd93 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 80034e2:	0003      	movs	r3, r0
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034e6:	e00d      	b.n	8003504 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034ee:	e009      	b.n	8003504 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034f4:	231a      	movs	r3, #26
 80034f6:	2220      	movs	r2, #32
 80034f8:	4694      	mov	ip, r2
 80034fa:	44bc      	add	ip, r7
 80034fc:	4463      	add	r3, ip
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
        break;
 8003502:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003506:	2b00      	cmp	r3, #0
 8003508:	d100      	bne.n	800350c <UART_SetConfig+0x2d8>
 800350a:	e153      	b.n	80037b4 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <UART_SetConfig+0x344>)
 8003512:	0052      	lsls	r2, r2, #1
 8003514:	5ad3      	ldrh	r3, [r2, r3]
 8003516:	0019      	movs	r1, r3
 8003518:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800351a:	f7fc fe05 	bl	8000128 <__udivsi3>
 800351e:	0003      	movs	r3, r0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	0013      	movs	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	189b      	adds	r3, r3, r2
 800352c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800352e:	429a      	cmp	r2, r3
 8003530:	d305      	bcc.n	800353e <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353a:	429a      	cmp	r2, r3
 800353c:	d91e      	bls.n	800357c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800353e:	231a      	movs	r3, #26
 8003540:	2220      	movs	r2, #32
 8003542:	4694      	mov	ip, r2
 8003544:	44bc      	add	ip, r7
 8003546:	4463      	add	r3, ip
 8003548:	2201      	movs	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	e132      	b.n	80037b4 <UART_SetConfig+0x580>
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	cfff69f3 	.word	0xcfff69f3
 8003554:	ffffcfff 	.word	0xffffcfff
 8003558:	40008000 	.word	0x40008000
 800355c:	11fff4ff 	.word	0x11fff4ff
 8003560:	40013800 	.word	0x40013800
 8003564:	40021000 	.word	0x40021000
 8003568:	40004400 	.word	0x40004400
 800356c:	40004800 	.word	0x40004800
 8003570:	40004c00 	.word	0x40004c00
 8003574:	00f42400 	.word	0x00f42400
 8003578:	080046f8 	.word	0x080046f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003588:	4b96      	ldr	r3, [pc, #600]	; (80037e4 <UART_SetConfig+0x5b0>)
 800358a:	0052      	lsls	r2, r2, #1
 800358c:	5ad3      	ldrh	r3, [r2, r3]
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	69b8      	ldr	r0, [r7, #24]
 800359a:	69f9      	ldr	r1, [r7, #28]
 800359c:	f7fc ff3a 	bl	8000414 <__aeabi_uldivmod>
 80035a0:	0002      	movs	r2, r0
 80035a2:	000b      	movs	r3, r1
 80035a4:	0e11      	lsrs	r1, r2, #24
 80035a6:	021d      	lsls	r5, r3, #8
 80035a8:	430d      	orrs	r5, r1
 80035aa:	0214      	lsls	r4, r2, #8
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68b8      	ldr	r0, [r7, #8]
 80035ba:	68f9      	ldr	r1, [r7, #12]
 80035bc:	1900      	adds	r0, r0, r4
 80035be:	4169      	adcs	r1, r5
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f7fc ff21 	bl	8000414 <__aeabi_uldivmod>
 80035d2:	0002      	movs	r2, r0
 80035d4:	000b      	movs	r3, r1
 80035d6:	0013      	movs	r3, r2
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035dc:	23c0      	movs	r3, #192	; 0xc0
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d309      	bcc.n	80035f8 <UART_SetConfig+0x3c4>
 80035e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	035b      	lsls	r3, r3, #13
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d204      	bcs.n	80035f8 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	e0dd      	b.n	80037b4 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 80035f8:	231a      	movs	r3, #26
 80035fa:	2220      	movs	r2, #32
 80035fc:	4694      	mov	ip, r2
 80035fe:	44bc      	add	ip, r7
 8003600:	4463      	add	r3, ip
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	e0d5      	b.n	80037b4 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	429a      	cmp	r2, r3
 8003612:	d000      	beq.n	8003616 <UART_SetConfig+0x3e2>
 8003614:	e073      	b.n	80036fe <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003616:	231b      	movs	r3, #27
 8003618:	2220      	movs	r2, #32
 800361a:	4694      	mov	ip, r2
 800361c:	44bc      	add	ip, r7
 800361e:	4463      	add	r3, ip
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b08      	cmp	r3, #8
 8003624:	d015      	beq.n	8003652 <UART_SetConfig+0x41e>
 8003626:	dc18      	bgt.n	800365a <UART_SetConfig+0x426>
 8003628:	2b04      	cmp	r3, #4
 800362a:	d00d      	beq.n	8003648 <UART_SetConfig+0x414>
 800362c:	dc15      	bgt.n	800365a <UART_SetConfig+0x426>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <UART_SetConfig+0x404>
 8003632:	2b02      	cmp	r3, #2
 8003634:	d005      	beq.n	8003642 <UART_SetConfig+0x40e>
 8003636:	e010      	b.n	800365a <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003638:	f7fe fd72 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 800363c:	0003      	movs	r3, r0
 800363e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003640:	e015      	b.n	800366e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003642:	4b69      	ldr	r3, [pc, #420]	; (80037e8 <UART_SetConfig+0x5b4>)
 8003644:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003646:	e012      	b.n	800366e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003648:	f7fe fcde 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 800364c:	0003      	movs	r3, r0
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003650:	e00d      	b.n	800366e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003658:	e009      	b.n	800366e <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800365e:	231a      	movs	r3, #26
 8003660:	2220      	movs	r2, #32
 8003662:	4694      	mov	ip, r2
 8003664:	44bc      	add	ip, r7
 8003666:	4463      	add	r3, ip
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
        break;
 800366c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	2b00      	cmp	r3, #0
 8003672:	d100      	bne.n	8003676 <UART_SetConfig+0x442>
 8003674:	e09e      	b.n	80037b4 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800367a:	4b5a      	ldr	r3, [pc, #360]	; (80037e4 <UART_SetConfig+0x5b0>)
 800367c:	0052      	lsls	r2, r2, #1
 800367e:	5ad3      	ldrh	r3, [r2, r3]
 8003680:	0019      	movs	r1, r3
 8003682:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003684:	f7fc fd50 	bl	8000128 <__udivsi3>
 8003688:	0003      	movs	r3, r0
 800368a:	005a      	lsls	r2, r3, #1
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	18d2      	adds	r2, r2, r3
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	0019      	movs	r1, r3
 800369a:	0010      	movs	r0, r2
 800369c:	f7fc fd44 	bl	8000128 <__udivsi3>
 80036a0:	0003      	movs	r3, r0
 80036a2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	d921      	bls.n	80036ee <UART_SetConfig+0x4ba>
 80036aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	025b      	lsls	r3, r3, #9
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d21c      	bcs.n	80036ee <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	200e      	movs	r0, #14
 80036ba:	2420      	movs	r4, #32
 80036bc:	193b      	adds	r3, r7, r4
 80036be:	181b      	adds	r3, r3, r0
 80036c0:	210f      	movs	r1, #15
 80036c2:	438a      	bics	r2, r1
 80036c4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2207      	movs	r2, #7
 80036ce:	4013      	ands	r3, r2
 80036d0:	b299      	uxth	r1, r3
 80036d2:	193b      	adds	r3, r7, r4
 80036d4:	181b      	adds	r3, r3, r0
 80036d6:	193a      	adds	r2, r7, r4
 80036d8:	1812      	adds	r2, r2, r0
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	193a      	adds	r2, r7, r4
 80036e6:	1812      	adds	r2, r2, r0
 80036e8:	8812      	ldrh	r2, [r2, #0]
 80036ea:	60da      	str	r2, [r3, #12]
 80036ec:	e062      	b.n	80037b4 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 80036ee:	231a      	movs	r3, #26
 80036f0:	2220      	movs	r2, #32
 80036f2:	4694      	mov	ip, r2
 80036f4:	44bc      	add	ip, r7
 80036f6:	4463      	add	r3, ip
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e05a      	b.n	80037b4 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036fe:	231b      	movs	r3, #27
 8003700:	2220      	movs	r2, #32
 8003702:	4694      	mov	ip, r2
 8003704:	44bc      	add	ip, r7
 8003706:	4463      	add	r3, ip
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b08      	cmp	r3, #8
 800370c:	d015      	beq.n	800373a <UART_SetConfig+0x506>
 800370e:	dc18      	bgt.n	8003742 <UART_SetConfig+0x50e>
 8003710:	2b04      	cmp	r3, #4
 8003712:	d00d      	beq.n	8003730 <UART_SetConfig+0x4fc>
 8003714:	dc15      	bgt.n	8003742 <UART_SetConfig+0x50e>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <UART_SetConfig+0x4ec>
 800371a:	2b02      	cmp	r3, #2
 800371c:	d005      	beq.n	800372a <UART_SetConfig+0x4f6>
 800371e:	e010      	b.n	8003742 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7fe fcfe 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8003724:	0003      	movs	r3, r0
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003728:	e015      	b.n	8003756 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800372a:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <UART_SetConfig+0x5b4>)
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800372e:	e012      	b.n	8003756 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003730:	f7fe fc6a 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8003734:	0003      	movs	r3, r0
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003738:	e00d      	b.n	8003756 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003740:	e009      	b.n	8003756 <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003746:	231a      	movs	r3, #26
 8003748:	2220      	movs	r2, #32
 800374a:	4694      	mov	ip, r2
 800374c:	44bc      	add	ip, r7
 800374e:	4463      	add	r3, ip
 8003750:	2201      	movs	r2, #1
 8003752:	701a      	strb	r2, [r3, #0]
        break;
 8003754:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02b      	beq.n	80037b4 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003760:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <UART_SetConfig+0x5b0>)
 8003762:	0052      	lsls	r2, r2, #1
 8003764:	5ad3      	ldrh	r3, [r2, r3]
 8003766:	0019      	movs	r1, r3
 8003768:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800376a:	f7fc fcdd 	bl	8000128 <__udivsi3>
 800376e:	0003      	movs	r3, r0
 8003770:	001a      	movs	r2, r3
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	18d2      	adds	r2, r2, r3
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	0019      	movs	r1, r3
 8003780:	0010      	movs	r0, r2
 8003782:	f7fc fcd1 	bl	8000128 <__udivsi3>
 8003786:	0003      	movs	r3, r0
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	2b0f      	cmp	r3, #15
 800378e:	d90a      	bls.n	80037a6 <UART_SetConfig+0x572>
 8003790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	025b      	lsls	r3, r3, #9
 8003796:	429a      	cmp	r2, r3
 8003798:	d205      	bcs.n	80037a6 <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	b29a      	uxth	r2, r3
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60da      	str	r2, [r3, #12]
 80037a4:	e006      	b.n	80037b4 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 80037a6:	231a      	movs	r3, #26
 80037a8:	2220      	movs	r2, #32
 80037aa:	4694      	mov	ip, r2
 80037ac:	44bc      	add	ip, r7
 80037ae:	4463      	add	r3, ip
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	226a      	movs	r2, #106	; 0x6a
 80037b8:	2101      	movs	r1, #1
 80037ba:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	2268      	movs	r2, #104	; 0x68
 80037c0:	2101      	movs	r1, #1
 80037c2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	2200      	movs	r2, #0
 80037c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	2200      	movs	r2, #0
 80037ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80037d0:	231a      	movs	r3, #26
 80037d2:	2220      	movs	r2, #32
 80037d4:	4694      	mov	ip, r2
 80037d6:	44bc      	add	ip, r7
 80037d8:	4463      	add	r3, ip
 80037da:	781b      	ldrb	r3, [r3, #0]
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b010      	add	sp, #64	; 0x40
 80037e2:	bdb0      	pop	{r4, r5, r7, pc}
 80037e4:	080046f8 	.word	0x080046f8
 80037e8:	00f42400 	.word	0x00f42400

080037ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	2201      	movs	r2, #1
 80037fa:	4013      	ands	r3, r2
 80037fc:	d00b      	beq.n	8003816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a4a      	ldr	r2, [pc, #296]	; (8003930 <UART_AdvFeatureConfig+0x144>)
 8003806:	4013      	ands	r3, r2
 8003808:	0019      	movs	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	2202      	movs	r2, #2
 800381c:	4013      	ands	r3, r2
 800381e:	d00b      	beq.n	8003838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4a43      	ldr	r2, [pc, #268]	; (8003934 <UART_AdvFeatureConfig+0x148>)
 8003828:	4013      	ands	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	2204      	movs	r2, #4
 800383e:	4013      	ands	r3, r2
 8003840:	d00b      	beq.n	800385a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4a3b      	ldr	r2, [pc, #236]	; (8003938 <UART_AdvFeatureConfig+0x14c>)
 800384a:	4013      	ands	r3, r2
 800384c:	0019      	movs	r1, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	2208      	movs	r2, #8
 8003860:	4013      	ands	r3, r2
 8003862:	d00b      	beq.n	800387c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4a34      	ldr	r2, [pc, #208]	; (800393c <UART_AdvFeatureConfig+0x150>)
 800386c:	4013      	ands	r3, r2
 800386e:	0019      	movs	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	2210      	movs	r2, #16
 8003882:	4013      	ands	r3, r2
 8003884:	d00b      	beq.n	800389e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <UART_AdvFeatureConfig+0x154>)
 800388e:	4013      	ands	r3, r2
 8003890:	0019      	movs	r1, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	2220      	movs	r2, #32
 80038a4:	4013      	ands	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	4a25      	ldr	r2, [pc, #148]	; (8003944 <UART_AdvFeatureConfig+0x158>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	0019      	movs	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	2240      	movs	r2, #64	; 0x40
 80038c6:	4013      	ands	r3, r2
 80038c8:	d01d      	beq.n	8003906 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <UART_AdvFeatureConfig+0x15c>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	035b      	lsls	r3, r3, #13
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d10b      	bne.n	8003906 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4a15      	ldr	r2, [pc, #84]	; (800394c <UART_AdvFeatureConfig+0x160>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	0019      	movs	r1, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2280      	movs	r2, #128	; 0x80
 800390c:	4013      	ands	r3, r2
 800390e:	d00b      	beq.n	8003928 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <UART_AdvFeatureConfig+0x164>)
 8003918:	4013      	ands	r3, r2
 800391a:	0019      	movs	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}
 8003930:	fffdffff 	.word	0xfffdffff
 8003934:	fffeffff 	.word	0xfffeffff
 8003938:	fffbffff 	.word	0xfffbffff
 800393c:	ffff7fff 	.word	0xffff7fff
 8003940:	ffffefff 	.word	0xffffefff
 8003944:	ffffdfff 	.word	0xffffdfff
 8003948:	ffefffff 	.word	0xffefffff
 800394c:	ff9fffff 	.word	0xff9fffff
 8003950:	fff7ffff 	.word	0xfff7ffff

08003954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af02      	add	r7, sp, #8
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	228c      	movs	r2, #140	; 0x8c
 8003960:	2100      	movs	r1, #0
 8003962:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003964:	f7fd faf6 	bl	8000f54 <HAL_GetTick>
 8003968:	0003      	movs	r3, r0
 800396a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2208      	movs	r2, #8
 8003974:	4013      	ands	r3, r2
 8003976:	2b08      	cmp	r3, #8
 8003978:	d10c      	bne.n	8003994 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2280      	movs	r2, #128	; 0x80
 800397e:	0391      	lsls	r1, r2, #14
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <UART_CheckIdleState+0x90>)
 8003984:	9200      	str	r2, [sp, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	f000 f82e 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 800398c:	1e03      	subs	r3, r0, #0
 800398e:	d001      	beq.n	8003994 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e023      	b.n	80039dc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2204      	movs	r2, #4
 800399c:	4013      	ands	r3, r2
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d10c      	bne.n	80039bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	03d1      	lsls	r1, r2, #15
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <UART_CheckIdleState+0x90>)
 80039ac:	9200      	str	r2, [sp, #0]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f000 f81a 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 80039b4:	1e03      	subs	r3, r0, #0
 80039b6:	d001      	beq.n	80039bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e00f      	b.n	80039dc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2284      	movs	r2, #132	; 0x84
 80039c0:	2120      	movs	r1, #32
 80039c2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2288      	movs	r2, #136	; 0x88
 80039c8:	2120      	movs	r1, #32
 80039ca:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	2100      	movs	r1, #0
 80039d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b004      	add	sp, #16
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	01ffffff 	.word	0x01ffffff

080039e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b094      	sub	sp, #80	; 0x50
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f8:	e0a7      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039fc:	3301      	adds	r3, #1
 80039fe:	d100      	bne.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a00:	e0a3      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7fd faa7 	bl	8000f54 <HAL_GetTick>
 8003a06:	0002      	movs	r2, r0
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d13f      	bne.n	8003a98 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a18:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a20:	647b      	str	r3, [r7, #68]	; 0x44
 8003a22:	2301      	movs	r3, #1
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	494e      	ldr	r1, [pc, #312]	; (8003b74 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a40:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	f383 8810 	msr	PRIMASK, r3
}
 8003a48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a52:	643b      	str	r3, [r7, #64]	; 0x40
 8003a54:	2301      	movs	r3, #1
 8003a56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5a:	f383 8810 	msr	PRIMASK, r3
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	438a      	bics	r2, r1
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a76:	f383 8810 	msr	PRIMASK, r3
}
 8003a7a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2284      	movs	r2, #132	; 0x84
 8003a80:	2120      	movs	r1, #32
 8003a82:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2288      	movs	r2, #136	; 0x88
 8003a88:	2120      	movs	r1, #32
 8003a8a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2280      	movs	r2, #128	; 0x80
 8003a90:	2100      	movs	r1, #0
 8003a92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e069      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d052      	beq.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	401a      	ands	r2, r3
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d148      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	0112      	lsls	r2, r2, #4
 8003ac0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ac8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4924      	ldr	r1, [pc, #144]	; (8003b74 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f383 8810 	msr	PRIMASK, r3
}
 8003af2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af4:	f3ef 8310 	mrs	r3, PRIMASK
 8003af8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003afa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003afe:	2301      	movs	r3, #1
 8003b00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	f383 8810 	msr	PRIMASK, r3
}
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	438a      	bics	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]
 8003b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	f383 8810 	msr	PRIMASK, r3
}
 8003b24:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2284      	movs	r2, #132	; 0x84
 8003b2a:	2120      	movs	r1, #32
 8003b2c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2288      	movs	r2, #136	; 0x88
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	228c      	movs	r2, #140	; 0x8c
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2280      	movs	r2, #128	; 0x80
 8003b42:	2100      	movs	r1, #0
 8003b44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e010      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4013      	ands	r3, r2
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	425a      	negs	r2, r3
 8003b5a:	4153      	adcs	r3, r2
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	001a      	movs	r2, r3
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d100      	bne.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x182>
 8003b68:	e747      	b.n	80039fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b014      	add	sp, #80	; 0x50
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	fffffe5f 	.word	0xfffffe5f

08003b78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	5c9b      	ldrb	r3, [r3, r2]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_UARTEx_DisableFifoMode+0x16>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e027      	b.n	8003bde <HAL_UARTEx_DisableFifoMode+0x66>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	2101      	movs	r1, #1
 8003b94:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2284      	movs	r2, #132	; 0x84
 8003b9a:	2124      	movs	r1, #36	; 0x24
 8003b9c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	438a      	bics	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2284      	movs	r2, #132	; 0x84
 8003bd0:	2120      	movs	r1, #32
 8003bd2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2280      	movs	r2, #128	; 0x80
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b004      	add	sp, #16
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	dfffffff 	.word	0xdfffffff

08003bec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2280      	movs	r2, #128	; 0x80
 8003bfa:	5c9b      	ldrb	r3, [r3, r2]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e02e      	b.n	8003c62 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	2101      	movs	r1, #1
 8003c0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2284      	movs	r2, #132	; 0x84
 8003c10:	2124      	movs	r1, #36	; 0x24
 8003c12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2101      	movs	r1, #1
 8003c28:	438a      	bics	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	08d9      	lsrs	r1, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 f854 	bl	8003cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2284      	movs	r2, #132	; 0x84
 8003c54:	2120      	movs	r1, #32
 8003c56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2280      	movs	r2, #128	; 0x80
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	0018      	movs	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b004      	add	sp, #16
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2280      	movs	r2, #128	; 0x80
 8003c7a:	5c9b      	ldrb	r3, [r3, r2]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e02f      	b.n	8003ce4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	2101      	movs	r1, #1
 8003c8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2284      	movs	r2, #132	; 0x84
 8003c90:	2124      	movs	r1, #36	; 0x24
 8003c92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	438a      	bics	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 f813 	bl	8003cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2284      	movs	r2, #132	; 0x84
 8003cd6:	2120      	movs	r1, #32
 8003cd8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	2100      	movs	r1, #0
 8003ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b004      	add	sp, #16
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	f1ffffff 	.word	0xf1ffffff

08003cf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d108      	bne.n	8003d12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	226a      	movs	r2, #106	; 0x6a
 8003d04:	2101      	movs	r1, #1
 8003d06:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2268      	movs	r2, #104	; 0x68
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d10:	e043      	b.n	8003d9a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d12:	260f      	movs	r6, #15
 8003d14:	19bb      	adds	r3, r7, r6
 8003d16:	2208      	movs	r2, #8
 8003d18:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d1a:	200e      	movs	r0, #14
 8003d1c:	183b      	adds	r3, r7, r0
 8003d1e:	2208      	movs	r2, #8
 8003d20:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	0e5b      	lsrs	r3, r3, #25
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	240d      	movs	r4, #13
 8003d2e:	193b      	adds	r3, r7, r4
 8003d30:	2107      	movs	r1, #7
 8003d32:	400a      	ands	r2, r1
 8003d34:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	0f5b      	lsrs	r3, r3, #29
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	250c      	movs	r5, #12
 8003d42:	197b      	adds	r3, r7, r5
 8003d44:	2107      	movs	r1, #7
 8003d46:	400a      	ands	r2, r1
 8003d48:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d4a:	183b      	adds	r3, r7, r0
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	197a      	adds	r2, r7, r5
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	4914      	ldr	r1, [pc, #80]	; (8003da4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003d54:	5c8a      	ldrb	r2, [r1, r2]
 8003d56:	435a      	muls	r2, r3
 8003d58:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d5a:	197b      	adds	r3, r7, r5
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003d60:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d62:	0019      	movs	r1, r3
 8003d64:	f7fc fa6a 	bl	800023c <__divsi3>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	b299      	uxth	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	226a      	movs	r2, #106	; 0x6a
 8003d70:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d72:	19bb      	adds	r3, r7, r6
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	193a      	adds	r2, r7, r4
 8003d78:	7812      	ldrb	r2, [r2, #0]
 8003d7a:	490a      	ldr	r1, [pc, #40]	; (8003da4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003d7c:	5c8a      	ldrb	r2, [r1, r2]
 8003d7e:	435a      	muls	r2, r3
 8003d80:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003d88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d8a:	0019      	movs	r1, r3
 8003d8c:	f7fc fa56 	bl	800023c <__divsi3>
 8003d90:	0003      	movs	r3, r0
 8003d92:	b299      	uxth	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2268      	movs	r2, #104	; 0x68
 8003d98:	5299      	strh	r1, [r3, r2]
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b005      	add	sp, #20
 8003da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	08004710 	.word	0x08004710
 8003da8:	08004718 	.word	0x08004718

08003dac <__errno>:
 8003dac:	4b01      	ldr	r3, [pc, #4]	; (8003db4 <__errno+0x8>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	4770      	bx	lr
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	2000000c 	.word	0x2000000c

08003db8 <__libc_init_array>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	2600      	movs	r6, #0
 8003dbc:	4d0c      	ldr	r5, [pc, #48]	; (8003df0 <__libc_init_array+0x38>)
 8003dbe:	4c0d      	ldr	r4, [pc, #52]	; (8003df4 <__libc_init_array+0x3c>)
 8003dc0:	1b64      	subs	r4, r4, r5
 8003dc2:	10a4      	asrs	r4, r4, #2
 8003dc4:	42a6      	cmp	r6, r4
 8003dc6:	d109      	bne.n	8003ddc <__libc_init_array+0x24>
 8003dc8:	2600      	movs	r6, #0
 8003dca:	f000 fc47 	bl	800465c <_init>
 8003dce:	4d0a      	ldr	r5, [pc, #40]	; (8003df8 <__libc_init_array+0x40>)
 8003dd0:	4c0a      	ldr	r4, [pc, #40]	; (8003dfc <__libc_init_array+0x44>)
 8003dd2:	1b64      	subs	r4, r4, r5
 8003dd4:	10a4      	asrs	r4, r4, #2
 8003dd6:	42a6      	cmp	r6, r4
 8003dd8:	d105      	bne.n	8003de6 <__libc_init_array+0x2e>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	00b3      	lsls	r3, r6, #2
 8003dde:	58eb      	ldr	r3, [r5, r3]
 8003de0:	4798      	blx	r3
 8003de2:	3601      	adds	r6, #1
 8003de4:	e7ee      	b.n	8003dc4 <__libc_init_array+0xc>
 8003de6:	00b3      	lsls	r3, r6, #2
 8003de8:	58eb      	ldr	r3, [r5, r3]
 8003dea:	4798      	blx	r3
 8003dec:	3601      	adds	r6, #1
 8003dee:	e7f2      	b.n	8003dd6 <__libc_init_array+0x1e>
 8003df0:	0800475c 	.word	0x0800475c
 8003df4:	0800475c 	.word	0x0800475c
 8003df8:	0800475c 	.word	0x0800475c
 8003dfc:	08004760 	.word	0x08004760

08003e00 <memset>:
 8003e00:	0003      	movs	r3, r0
 8003e02:	1882      	adds	r2, r0, r2
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d100      	bne.n	8003e0a <memset+0xa>
 8003e08:	4770      	bx	lr
 8003e0a:	7019      	strb	r1, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	e7f9      	b.n	8003e04 <memset+0x4>

08003e10 <siprintf>:
 8003e10:	b40e      	push	{r1, r2, r3}
 8003e12:	b500      	push	{lr}
 8003e14:	490b      	ldr	r1, [pc, #44]	; (8003e44 <siprintf+0x34>)
 8003e16:	b09c      	sub	sp, #112	; 0x70
 8003e18:	ab1d      	add	r3, sp, #116	; 0x74
 8003e1a:	9002      	str	r0, [sp, #8]
 8003e1c:	9006      	str	r0, [sp, #24]
 8003e1e:	9107      	str	r1, [sp, #28]
 8003e20:	9104      	str	r1, [sp, #16]
 8003e22:	4809      	ldr	r0, [pc, #36]	; (8003e48 <siprintf+0x38>)
 8003e24:	4909      	ldr	r1, [pc, #36]	; (8003e4c <siprintf+0x3c>)
 8003e26:	cb04      	ldmia	r3!, {r2}
 8003e28:	9105      	str	r1, [sp, #20]
 8003e2a:	6800      	ldr	r0, [r0, #0]
 8003e2c:	a902      	add	r1, sp, #8
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	f000 f870 	bl	8003f14 <_svfiprintf_r>
 8003e34:	2300      	movs	r3, #0
 8003e36:	9a02      	ldr	r2, [sp, #8]
 8003e38:	7013      	strb	r3, [r2, #0]
 8003e3a:	b01c      	add	sp, #112	; 0x70
 8003e3c:	bc08      	pop	{r3}
 8003e3e:	b003      	add	sp, #12
 8003e40:	4718      	bx	r3
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	7fffffff 	.word	0x7fffffff
 8003e48:	2000000c 	.word	0x2000000c
 8003e4c:	ffff0208 	.word	0xffff0208

08003e50 <__ssputs_r>:
 8003e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e52:	688e      	ldr	r6, [r1, #8]
 8003e54:	b085      	sub	sp, #20
 8003e56:	0007      	movs	r7, r0
 8003e58:	000c      	movs	r4, r1
 8003e5a:	9203      	str	r2, [sp, #12]
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	429e      	cmp	r6, r3
 8003e60:	d83c      	bhi.n	8003edc <__ssputs_r+0x8c>
 8003e62:	2390      	movs	r3, #144	; 0x90
 8003e64:	898a      	ldrh	r2, [r1, #12]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	421a      	tst	r2, r3
 8003e6a:	d034      	beq.n	8003ed6 <__ssputs_r+0x86>
 8003e6c:	2503      	movs	r5, #3
 8003e6e:	6909      	ldr	r1, [r1, #16]
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	1a5b      	subs	r3, r3, r1
 8003e74:	9302      	str	r3, [sp, #8]
 8003e76:	6963      	ldr	r3, [r4, #20]
 8003e78:	9802      	ldr	r0, [sp, #8]
 8003e7a:	435d      	muls	r5, r3
 8003e7c:	0feb      	lsrs	r3, r5, #31
 8003e7e:	195d      	adds	r5, r3, r5
 8003e80:	9b01      	ldr	r3, [sp, #4]
 8003e82:	106d      	asrs	r5, r5, #1
 8003e84:	3301      	adds	r3, #1
 8003e86:	181b      	adds	r3, r3, r0
 8003e88:	42ab      	cmp	r3, r5
 8003e8a:	d900      	bls.n	8003e8e <__ssputs_r+0x3e>
 8003e8c:	001d      	movs	r5, r3
 8003e8e:	0553      	lsls	r3, r2, #21
 8003e90:	d532      	bpl.n	8003ef8 <__ssputs_r+0xa8>
 8003e92:	0029      	movs	r1, r5
 8003e94:	0038      	movs	r0, r7
 8003e96:	f000 fb31 	bl	80044fc <_malloc_r>
 8003e9a:	1e06      	subs	r6, r0, #0
 8003e9c:	d109      	bne.n	8003eb2 <__ssputs_r+0x62>
 8003e9e:	230c      	movs	r3, #12
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	2340      	movs	r3, #64	; 0x40
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	89a2      	ldrh	r2, [r4, #12]
 8003ea8:	4240      	negs	r0, r0
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	81a3      	strh	r3, [r4, #12]
 8003eae:	b005      	add	sp, #20
 8003eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb2:	9a02      	ldr	r2, [sp, #8]
 8003eb4:	6921      	ldr	r1, [r4, #16]
 8003eb6:	f000 faba 	bl	800442e <memcpy>
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <__ssputs_r+0xc0>)
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	81a3      	strh	r3, [r4, #12]
 8003ec6:	9b02      	ldr	r3, [sp, #8]
 8003ec8:	6126      	str	r6, [r4, #16]
 8003eca:	18f6      	adds	r6, r6, r3
 8003ecc:	6026      	str	r6, [r4, #0]
 8003ece:	6165      	str	r5, [r4, #20]
 8003ed0:	9e01      	ldr	r6, [sp, #4]
 8003ed2:	1aed      	subs	r5, r5, r3
 8003ed4:	60a5      	str	r5, [r4, #8]
 8003ed6:	9b01      	ldr	r3, [sp, #4]
 8003ed8:	429e      	cmp	r6, r3
 8003eda:	d900      	bls.n	8003ede <__ssputs_r+0x8e>
 8003edc:	9e01      	ldr	r6, [sp, #4]
 8003ede:	0032      	movs	r2, r6
 8003ee0:	9903      	ldr	r1, [sp, #12]
 8003ee2:	6820      	ldr	r0, [r4, #0]
 8003ee4:	f000 faac 	bl	8004440 <memmove>
 8003ee8:	68a3      	ldr	r3, [r4, #8]
 8003eea:	2000      	movs	r0, #0
 8003eec:	1b9b      	subs	r3, r3, r6
 8003eee:	60a3      	str	r3, [r4, #8]
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	199e      	adds	r6, r3, r6
 8003ef4:	6026      	str	r6, [r4, #0]
 8003ef6:	e7da      	b.n	8003eae <__ssputs_r+0x5e>
 8003ef8:	002a      	movs	r2, r5
 8003efa:	0038      	movs	r0, r7
 8003efc:	f000 fb5c 	bl	80045b8 <_realloc_r>
 8003f00:	1e06      	subs	r6, r0, #0
 8003f02:	d1e0      	bne.n	8003ec6 <__ssputs_r+0x76>
 8003f04:	0038      	movs	r0, r7
 8003f06:	6921      	ldr	r1, [r4, #16]
 8003f08:	f000 faae 	bl	8004468 <_free_r>
 8003f0c:	e7c7      	b.n	8003e9e <__ssputs_r+0x4e>
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	fffffb7f 	.word	0xfffffb7f

08003f14 <_svfiprintf_r>:
 8003f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f16:	b0a1      	sub	sp, #132	; 0x84
 8003f18:	9003      	str	r0, [sp, #12]
 8003f1a:	001d      	movs	r5, r3
 8003f1c:	898b      	ldrh	r3, [r1, #12]
 8003f1e:	000f      	movs	r7, r1
 8003f20:	0016      	movs	r6, r2
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	d511      	bpl.n	8003f4a <_svfiprintf_r+0x36>
 8003f26:	690b      	ldr	r3, [r1, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10e      	bne.n	8003f4a <_svfiprintf_r+0x36>
 8003f2c:	2140      	movs	r1, #64	; 0x40
 8003f2e:	f000 fae5 	bl	80044fc <_malloc_r>
 8003f32:	6038      	str	r0, [r7, #0]
 8003f34:	6138      	str	r0, [r7, #16]
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d105      	bne.n	8003f46 <_svfiprintf_r+0x32>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	9a03      	ldr	r2, [sp, #12]
 8003f3e:	3801      	subs	r0, #1
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	b021      	add	sp, #132	; 0x84
 8003f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f46:	2340      	movs	r3, #64	; 0x40
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	ac08      	add	r4, sp, #32
 8003f4e:	6163      	str	r3, [r4, #20]
 8003f50:	3320      	adds	r3, #32
 8003f52:	7663      	strb	r3, [r4, #25]
 8003f54:	3310      	adds	r3, #16
 8003f56:	76a3      	strb	r3, [r4, #26]
 8003f58:	9507      	str	r5, [sp, #28]
 8003f5a:	0035      	movs	r5, r6
 8003f5c:	782b      	ldrb	r3, [r5, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <_svfiprintf_r+0x52>
 8003f62:	2b25      	cmp	r3, #37	; 0x25
 8003f64:	d147      	bne.n	8003ff6 <_svfiprintf_r+0xe2>
 8003f66:	1bab      	subs	r3, r5, r6
 8003f68:	9305      	str	r3, [sp, #20]
 8003f6a:	42b5      	cmp	r5, r6
 8003f6c:	d00c      	beq.n	8003f88 <_svfiprintf_r+0x74>
 8003f6e:	0032      	movs	r2, r6
 8003f70:	0039      	movs	r1, r7
 8003f72:	9803      	ldr	r0, [sp, #12]
 8003f74:	f7ff ff6c 	bl	8003e50 <__ssputs_r>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d100      	bne.n	8003f7e <_svfiprintf_r+0x6a>
 8003f7c:	e0ae      	b.n	80040dc <_svfiprintf_r+0x1c8>
 8003f7e:	6962      	ldr	r2, [r4, #20]
 8003f80:	9b05      	ldr	r3, [sp, #20]
 8003f82:	4694      	mov	ip, r2
 8003f84:	4463      	add	r3, ip
 8003f86:	6163      	str	r3, [r4, #20]
 8003f88:	782b      	ldrb	r3, [r5, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d100      	bne.n	8003f90 <_svfiprintf_r+0x7c>
 8003f8e:	e0a5      	b.n	80040dc <_svfiprintf_r+0x1c8>
 8003f90:	2201      	movs	r2, #1
 8003f92:	2300      	movs	r3, #0
 8003f94:	4252      	negs	r2, r2
 8003f96:	6062      	str	r2, [r4, #4]
 8003f98:	a904      	add	r1, sp, #16
 8003f9a:	3254      	adds	r2, #84	; 0x54
 8003f9c:	1852      	adds	r2, r2, r1
 8003f9e:	1c6e      	adds	r6, r5, #1
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	60e3      	str	r3, [r4, #12]
 8003fa4:	60a3      	str	r3, [r4, #8]
 8003fa6:	7013      	strb	r3, [r2, #0]
 8003fa8:	65a3      	str	r3, [r4, #88]	; 0x58
 8003faa:	2205      	movs	r2, #5
 8003fac:	7831      	ldrb	r1, [r6, #0]
 8003fae:	4854      	ldr	r0, [pc, #336]	; (8004100 <_svfiprintf_r+0x1ec>)
 8003fb0:	f000 fa32 	bl	8004418 <memchr>
 8003fb4:	1c75      	adds	r5, r6, #1
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	d11f      	bne.n	8003ffa <_svfiprintf_r+0xe6>
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	06d3      	lsls	r3, r2, #27
 8003fbe:	d504      	bpl.n	8003fca <_svfiprintf_r+0xb6>
 8003fc0:	2353      	movs	r3, #83	; 0x53
 8003fc2:	a904      	add	r1, sp, #16
 8003fc4:	185b      	adds	r3, r3, r1
 8003fc6:	2120      	movs	r1, #32
 8003fc8:	7019      	strb	r1, [r3, #0]
 8003fca:	0713      	lsls	r3, r2, #28
 8003fcc:	d504      	bpl.n	8003fd8 <_svfiprintf_r+0xc4>
 8003fce:	2353      	movs	r3, #83	; 0x53
 8003fd0:	a904      	add	r1, sp, #16
 8003fd2:	185b      	adds	r3, r3, r1
 8003fd4:	212b      	movs	r1, #43	; 0x2b
 8003fd6:	7019      	strb	r1, [r3, #0]
 8003fd8:	7833      	ldrb	r3, [r6, #0]
 8003fda:	2b2a      	cmp	r3, #42	; 0x2a
 8003fdc:	d016      	beq.n	800400c <_svfiprintf_r+0xf8>
 8003fde:	0035      	movs	r5, r6
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	200a      	movs	r0, #10
 8003fe4:	68e3      	ldr	r3, [r4, #12]
 8003fe6:	782a      	ldrb	r2, [r5, #0]
 8003fe8:	1c6e      	adds	r6, r5, #1
 8003fea:	3a30      	subs	r2, #48	; 0x30
 8003fec:	2a09      	cmp	r2, #9
 8003fee:	d94e      	bls.n	800408e <_svfiprintf_r+0x17a>
 8003ff0:	2900      	cmp	r1, #0
 8003ff2:	d111      	bne.n	8004018 <_svfiprintf_r+0x104>
 8003ff4:	e017      	b.n	8004026 <_svfiprintf_r+0x112>
 8003ff6:	3501      	adds	r5, #1
 8003ff8:	e7b0      	b.n	8003f5c <_svfiprintf_r+0x48>
 8003ffa:	4b41      	ldr	r3, [pc, #260]	; (8004100 <_svfiprintf_r+0x1ec>)
 8003ffc:	6822      	ldr	r2, [r4, #0]
 8003ffe:	1ac0      	subs	r0, r0, r3
 8004000:	2301      	movs	r3, #1
 8004002:	4083      	lsls	r3, r0
 8004004:	4313      	orrs	r3, r2
 8004006:	002e      	movs	r6, r5
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	e7ce      	b.n	8003faa <_svfiprintf_r+0x96>
 800400c:	9b07      	ldr	r3, [sp, #28]
 800400e:	1d19      	adds	r1, r3, #4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	9107      	str	r1, [sp, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	db01      	blt.n	800401c <_svfiprintf_r+0x108>
 8004018:	930b      	str	r3, [sp, #44]	; 0x2c
 800401a:	e004      	b.n	8004026 <_svfiprintf_r+0x112>
 800401c:	425b      	negs	r3, r3
 800401e:	60e3      	str	r3, [r4, #12]
 8004020:	2302      	movs	r3, #2
 8004022:	4313      	orrs	r3, r2
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	782b      	ldrb	r3, [r5, #0]
 8004028:	2b2e      	cmp	r3, #46	; 0x2e
 800402a:	d10a      	bne.n	8004042 <_svfiprintf_r+0x12e>
 800402c:	786b      	ldrb	r3, [r5, #1]
 800402e:	2b2a      	cmp	r3, #42	; 0x2a
 8004030:	d135      	bne.n	800409e <_svfiprintf_r+0x18a>
 8004032:	9b07      	ldr	r3, [sp, #28]
 8004034:	3502      	adds	r5, #2
 8004036:	1d1a      	adds	r2, r3, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	9207      	str	r2, [sp, #28]
 800403c:	2b00      	cmp	r3, #0
 800403e:	db2b      	blt.n	8004098 <_svfiprintf_r+0x184>
 8004040:	9309      	str	r3, [sp, #36]	; 0x24
 8004042:	4e30      	ldr	r6, [pc, #192]	; (8004104 <_svfiprintf_r+0x1f0>)
 8004044:	2203      	movs	r2, #3
 8004046:	0030      	movs	r0, r6
 8004048:	7829      	ldrb	r1, [r5, #0]
 800404a:	f000 f9e5 	bl	8004418 <memchr>
 800404e:	2800      	cmp	r0, #0
 8004050:	d006      	beq.n	8004060 <_svfiprintf_r+0x14c>
 8004052:	2340      	movs	r3, #64	; 0x40
 8004054:	1b80      	subs	r0, r0, r6
 8004056:	4083      	lsls	r3, r0
 8004058:	6822      	ldr	r2, [r4, #0]
 800405a:	3501      	adds	r5, #1
 800405c:	4313      	orrs	r3, r2
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	7829      	ldrb	r1, [r5, #0]
 8004062:	2206      	movs	r2, #6
 8004064:	4828      	ldr	r0, [pc, #160]	; (8004108 <_svfiprintf_r+0x1f4>)
 8004066:	1c6e      	adds	r6, r5, #1
 8004068:	7621      	strb	r1, [r4, #24]
 800406a:	f000 f9d5 	bl	8004418 <memchr>
 800406e:	2800      	cmp	r0, #0
 8004070:	d03c      	beq.n	80040ec <_svfiprintf_r+0x1d8>
 8004072:	4b26      	ldr	r3, [pc, #152]	; (800410c <_svfiprintf_r+0x1f8>)
 8004074:	2b00      	cmp	r3, #0
 8004076:	d125      	bne.n	80040c4 <_svfiprintf_r+0x1b0>
 8004078:	2207      	movs	r2, #7
 800407a:	9b07      	ldr	r3, [sp, #28]
 800407c:	3307      	adds	r3, #7
 800407e:	4393      	bics	r3, r2
 8004080:	3308      	adds	r3, #8
 8004082:	9307      	str	r3, [sp, #28]
 8004084:	6963      	ldr	r3, [r4, #20]
 8004086:	9a04      	ldr	r2, [sp, #16]
 8004088:	189b      	adds	r3, r3, r2
 800408a:	6163      	str	r3, [r4, #20]
 800408c:	e765      	b.n	8003f5a <_svfiprintf_r+0x46>
 800408e:	4343      	muls	r3, r0
 8004090:	0035      	movs	r5, r6
 8004092:	2101      	movs	r1, #1
 8004094:	189b      	adds	r3, r3, r2
 8004096:	e7a6      	b.n	8003fe6 <_svfiprintf_r+0xd2>
 8004098:	2301      	movs	r3, #1
 800409a:	425b      	negs	r3, r3
 800409c:	e7d0      	b.n	8004040 <_svfiprintf_r+0x12c>
 800409e:	2300      	movs	r3, #0
 80040a0:	200a      	movs	r0, #10
 80040a2:	001a      	movs	r2, r3
 80040a4:	3501      	adds	r5, #1
 80040a6:	6063      	str	r3, [r4, #4]
 80040a8:	7829      	ldrb	r1, [r5, #0]
 80040aa:	1c6e      	adds	r6, r5, #1
 80040ac:	3930      	subs	r1, #48	; 0x30
 80040ae:	2909      	cmp	r1, #9
 80040b0:	d903      	bls.n	80040ba <_svfiprintf_r+0x1a6>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0c5      	beq.n	8004042 <_svfiprintf_r+0x12e>
 80040b6:	9209      	str	r2, [sp, #36]	; 0x24
 80040b8:	e7c3      	b.n	8004042 <_svfiprintf_r+0x12e>
 80040ba:	4342      	muls	r2, r0
 80040bc:	0035      	movs	r5, r6
 80040be:	2301      	movs	r3, #1
 80040c0:	1852      	adds	r2, r2, r1
 80040c2:	e7f1      	b.n	80040a8 <_svfiprintf_r+0x194>
 80040c4:	ab07      	add	r3, sp, #28
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	003a      	movs	r2, r7
 80040ca:	0021      	movs	r1, r4
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <_svfiprintf_r+0x1fc>)
 80040ce:	9803      	ldr	r0, [sp, #12]
 80040d0:	e000      	b.n	80040d4 <_svfiprintf_r+0x1c0>
 80040d2:	bf00      	nop
 80040d4:	9004      	str	r0, [sp, #16]
 80040d6:	9b04      	ldr	r3, [sp, #16]
 80040d8:	3301      	adds	r3, #1
 80040da:	d1d3      	bne.n	8004084 <_svfiprintf_r+0x170>
 80040dc:	89bb      	ldrh	r3, [r7, #12]
 80040de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80040e0:	065b      	lsls	r3, r3, #25
 80040e2:	d400      	bmi.n	80040e6 <_svfiprintf_r+0x1d2>
 80040e4:	e72d      	b.n	8003f42 <_svfiprintf_r+0x2e>
 80040e6:	2001      	movs	r0, #1
 80040e8:	4240      	negs	r0, r0
 80040ea:	e72a      	b.n	8003f42 <_svfiprintf_r+0x2e>
 80040ec:	ab07      	add	r3, sp, #28
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	003a      	movs	r2, r7
 80040f2:	0021      	movs	r1, r4
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <_svfiprintf_r+0x1fc>)
 80040f6:	9803      	ldr	r0, [sp, #12]
 80040f8:	f000 f87c 	bl	80041f4 <_printf_i>
 80040fc:	e7ea      	b.n	80040d4 <_svfiprintf_r+0x1c0>
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	08004720 	.word	0x08004720
 8004104:	08004726 	.word	0x08004726
 8004108:	0800472a 	.word	0x0800472a
 800410c:	00000000 	.word	0x00000000
 8004110:	08003e51 	.word	0x08003e51

08004114 <_printf_common>:
 8004114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004116:	0015      	movs	r5, r2
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	688a      	ldr	r2, [r1, #8]
 800411c:	690b      	ldr	r3, [r1, #16]
 800411e:	000c      	movs	r4, r1
 8004120:	9000      	str	r0, [sp, #0]
 8004122:	4293      	cmp	r3, r2
 8004124:	da00      	bge.n	8004128 <_printf_common+0x14>
 8004126:	0013      	movs	r3, r2
 8004128:	0022      	movs	r2, r4
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	3243      	adds	r2, #67	; 0x43
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	2a00      	cmp	r2, #0
 8004132:	d001      	beq.n	8004138 <_printf_common+0x24>
 8004134:	3301      	adds	r3, #1
 8004136:	602b      	str	r3, [r5, #0]
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	069b      	lsls	r3, r3, #26
 800413c:	d502      	bpl.n	8004144 <_printf_common+0x30>
 800413e:	682b      	ldr	r3, [r5, #0]
 8004140:	3302      	adds	r3, #2
 8004142:	602b      	str	r3, [r5, #0]
 8004144:	6822      	ldr	r2, [r4, #0]
 8004146:	2306      	movs	r3, #6
 8004148:	0017      	movs	r7, r2
 800414a:	401f      	ands	r7, r3
 800414c:	421a      	tst	r2, r3
 800414e:	d027      	beq.n	80041a0 <_printf_common+0x8c>
 8004150:	0023      	movs	r3, r4
 8004152:	3343      	adds	r3, #67	; 0x43
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	1e5a      	subs	r2, r3, #1
 8004158:	4193      	sbcs	r3, r2
 800415a:	6822      	ldr	r2, [r4, #0]
 800415c:	0692      	lsls	r2, r2, #26
 800415e:	d430      	bmi.n	80041c2 <_printf_common+0xae>
 8004160:	0022      	movs	r2, r4
 8004162:	9901      	ldr	r1, [sp, #4]
 8004164:	9800      	ldr	r0, [sp, #0]
 8004166:	9e08      	ldr	r6, [sp, #32]
 8004168:	3243      	adds	r2, #67	; 0x43
 800416a:	47b0      	blx	r6
 800416c:	1c43      	adds	r3, r0, #1
 800416e:	d025      	beq.n	80041bc <_printf_common+0xa8>
 8004170:	2306      	movs	r3, #6
 8004172:	6820      	ldr	r0, [r4, #0]
 8004174:	682a      	ldr	r2, [r5, #0]
 8004176:	68e1      	ldr	r1, [r4, #12]
 8004178:	2500      	movs	r5, #0
 800417a:	4003      	ands	r3, r0
 800417c:	2b04      	cmp	r3, #4
 800417e:	d103      	bne.n	8004188 <_printf_common+0x74>
 8004180:	1a8d      	subs	r5, r1, r2
 8004182:	43eb      	mvns	r3, r5
 8004184:	17db      	asrs	r3, r3, #31
 8004186:	401d      	ands	r5, r3
 8004188:	68a3      	ldr	r3, [r4, #8]
 800418a:	6922      	ldr	r2, [r4, #16]
 800418c:	4293      	cmp	r3, r2
 800418e:	dd01      	ble.n	8004194 <_printf_common+0x80>
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	18ed      	adds	r5, r5, r3
 8004194:	2700      	movs	r7, #0
 8004196:	42bd      	cmp	r5, r7
 8004198:	d120      	bne.n	80041dc <_printf_common+0xc8>
 800419a:	2000      	movs	r0, #0
 800419c:	e010      	b.n	80041c0 <_printf_common+0xac>
 800419e:	3701      	adds	r7, #1
 80041a0:	68e3      	ldr	r3, [r4, #12]
 80041a2:	682a      	ldr	r2, [r5, #0]
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	42bb      	cmp	r3, r7
 80041a8:	ddd2      	ble.n	8004150 <_printf_common+0x3c>
 80041aa:	0022      	movs	r2, r4
 80041ac:	2301      	movs	r3, #1
 80041ae:	9901      	ldr	r1, [sp, #4]
 80041b0:	9800      	ldr	r0, [sp, #0]
 80041b2:	9e08      	ldr	r6, [sp, #32]
 80041b4:	3219      	adds	r2, #25
 80041b6:	47b0      	blx	r6
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d1f0      	bne.n	800419e <_printf_common+0x8a>
 80041bc:	2001      	movs	r0, #1
 80041be:	4240      	negs	r0, r0
 80041c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041c2:	2030      	movs	r0, #48	; 0x30
 80041c4:	18e1      	adds	r1, r4, r3
 80041c6:	3143      	adds	r1, #67	; 0x43
 80041c8:	7008      	strb	r0, [r1, #0]
 80041ca:	0021      	movs	r1, r4
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	3145      	adds	r1, #69	; 0x45
 80041d0:	7809      	ldrb	r1, [r1, #0]
 80041d2:	18a2      	adds	r2, r4, r2
 80041d4:	3243      	adds	r2, #67	; 0x43
 80041d6:	3302      	adds	r3, #2
 80041d8:	7011      	strb	r1, [r2, #0]
 80041da:	e7c1      	b.n	8004160 <_printf_common+0x4c>
 80041dc:	0022      	movs	r2, r4
 80041de:	2301      	movs	r3, #1
 80041e0:	9901      	ldr	r1, [sp, #4]
 80041e2:	9800      	ldr	r0, [sp, #0]
 80041e4:	9e08      	ldr	r6, [sp, #32]
 80041e6:	321a      	adds	r2, #26
 80041e8:	47b0      	blx	r6
 80041ea:	1c43      	adds	r3, r0, #1
 80041ec:	d0e6      	beq.n	80041bc <_printf_common+0xa8>
 80041ee:	3701      	adds	r7, #1
 80041f0:	e7d1      	b.n	8004196 <_printf_common+0x82>
	...

080041f4 <_printf_i>:
 80041f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f6:	b08b      	sub	sp, #44	; 0x2c
 80041f8:	9206      	str	r2, [sp, #24]
 80041fa:	000a      	movs	r2, r1
 80041fc:	3243      	adds	r2, #67	; 0x43
 80041fe:	9307      	str	r3, [sp, #28]
 8004200:	9005      	str	r0, [sp, #20]
 8004202:	9204      	str	r2, [sp, #16]
 8004204:	7e0a      	ldrb	r2, [r1, #24]
 8004206:	000c      	movs	r4, r1
 8004208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800420a:	2a78      	cmp	r2, #120	; 0x78
 800420c:	d806      	bhi.n	800421c <_printf_i+0x28>
 800420e:	2a62      	cmp	r2, #98	; 0x62
 8004210:	d808      	bhi.n	8004224 <_printf_i+0x30>
 8004212:	2a00      	cmp	r2, #0
 8004214:	d100      	bne.n	8004218 <_printf_i+0x24>
 8004216:	e0c0      	b.n	800439a <_printf_i+0x1a6>
 8004218:	2a58      	cmp	r2, #88	; 0x58
 800421a:	d052      	beq.n	80042c2 <_printf_i+0xce>
 800421c:	0026      	movs	r6, r4
 800421e:	3642      	adds	r6, #66	; 0x42
 8004220:	7032      	strb	r2, [r6, #0]
 8004222:	e022      	b.n	800426a <_printf_i+0x76>
 8004224:	0010      	movs	r0, r2
 8004226:	3863      	subs	r0, #99	; 0x63
 8004228:	2815      	cmp	r0, #21
 800422a:	d8f7      	bhi.n	800421c <_printf_i+0x28>
 800422c:	f7fb ff72 	bl	8000114 <__gnu_thumb1_case_shi>
 8004230:	001f0016 	.word	0x001f0016
 8004234:	fff6fff6 	.word	0xfff6fff6
 8004238:	fff6fff6 	.word	0xfff6fff6
 800423c:	fff6001f 	.word	0xfff6001f
 8004240:	fff6fff6 	.word	0xfff6fff6
 8004244:	00a8fff6 	.word	0x00a8fff6
 8004248:	009a0036 	.word	0x009a0036
 800424c:	fff6fff6 	.word	0xfff6fff6
 8004250:	fff600b9 	.word	0xfff600b9
 8004254:	fff60036 	.word	0xfff60036
 8004258:	009efff6 	.word	0x009efff6
 800425c:	0026      	movs	r6, r4
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	3642      	adds	r6, #66	; 0x42
 8004262:	1d11      	adds	r1, r2, #4
 8004264:	6019      	str	r1, [r3, #0]
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	7033      	strb	r3, [r6, #0]
 800426a:	2301      	movs	r3, #1
 800426c:	e0a7      	b.n	80043be <_printf_i+0x1ca>
 800426e:	6808      	ldr	r0, [r1, #0]
 8004270:	6819      	ldr	r1, [r3, #0]
 8004272:	1d0a      	adds	r2, r1, #4
 8004274:	0605      	lsls	r5, r0, #24
 8004276:	d50b      	bpl.n	8004290 <_printf_i+0x9c>
 8004278:	680d      	ldr	r5, [r1, #0]
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	2d00      	cmp	r5, #0
 800427e:	da03      	bge.n	8004288 <_printf_i+0x94>
 8004280:	232d      	movs	r3, #45	; 0x2d
 8004282:	9a04      	ldr	r2, [sp, #16]
 8004284:	426d      	negs	r5, r5
 8004286:	7013      	strb	r3, [r2, #0]
 8004288:	4b61      	ldr	r3, [pc, #388]	; (8004410 <_printf_i+0x21c>)
 800428a:	270a      	movs	r7, #10
 800428c:	9303      	str	r3, [sp, #12]
 800428e:	e032      	b.n	80042f6 <_printf_i+0x102>
 8004290:	680d      	ldr	r5, [r1, #0]
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	0641      	lsls	r1, r0, #25
 8004296:	d5f1      	bpl.n	800427c <_printf_i+0x88>
 8004298:	b22d      	sxth	r5, r5
 800429a:	e7ef      	b.n	800427c <_printf_i+0x88>
 800429c:	680d      	ldr	r5, [r1, #0]
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	1d08      	adds	r0, r1, #4
 80042a2:	6018      	str	r0, [r3, #0]
 80042a4:	062e      	lsls	r6, r5, #24
 80042a6:	d501      	bpl.n	80042ac <_printf_i+0xb8>
 80042a8:	680d      	ldr	r5, [r1, #0]
 80042aa:	e003      	b.n	80042b4 <_printf_i+0xc0>
 80042ac:	066d      	lsls	r5, r5, #25
 80042ae:	d5fb      	bpl.n	80042a8 <_printf_i+0xb4>
 80042b0:	680d      	ldr	r5, [r1, #0]
 80042b2:	b2ad      	uxth	r5, r5
 80042b4:	4b56      	ldr	r3, [pc, #344]	; (8004410 <_printf_i+0x21c>)
 80042b6:	270a      	movs	r7, #10
 80042b8:	9303      	str	r3, [sp, #12]
 80042ba:	2a6f      	cmp	r2, #111	; 0x6f
 80042bc:	d117      	bne.n	80042ee <_printf_i+0xfa>
 80042be:	2708      	movs	r7, #8
 80042c0:	e015      	b.n	80042ee <_printf_i+0xfa>
 80042c2:	3145      	adds	r1, #69	; 0x45
 80042c4:	700a      	strb	r2, [r1, #0]
 80042c6:	4a52      	ldr	r2, [pc, #328]	; (8004410 <_printf_i+0x21c>)
 80042c8:	9203      	str	r2, [sp, #12]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	6821      	ldr	r1, [r4, #0]
 80042ce:	ca20      	ldmia	r2!, {r5}
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	0608      	lsls	r0, r1, #24
 80042d4:	d550      	bpl.n	8004378 <_printf_i+0x184>
 80042d6:	07cb      	lsls	r3, r1, #31
 80042d8:	d502      	bpl.n	80042e0 <_printf_i+0xec>
 80042da:	2320      	movs	r3, #32
 80042dc:	4319      	orrs	r1, r3
 80042de:	6021      	str	r1, [r4, #0]
 80042e0:	2710      	movs	r7, #16
 80042e2:	2d00      	cmp	r5, #0
 80042e4:	d103      	bne.n	80042ee <_printf_i+0xfa>
 80042e6:	2320      	movs	r3, #32
 80042e8:	6822      	ldr	r2, [r4, #0]
 80042ea:	439a      	bics	r2, r3
 80042ec:	6022      	str	r2, [r4, #0]
 80042ee:	0023      	movs	r3, r4
 80042f0:	2200      	movs	r2, #0
 80042f2:	3343      	adds	r3, #67	; 0x43
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	6863      	ldr	r3, [r4, #4]
 80042f8:	60a3      	str	r3, [r4, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	db03      	blt.n	8004306 <_printf_i+0x112>
 80042fe:	2204      	movs	r2, #4
 8004300:	6821      	ldr	r1, [r4, #0]
 8004302:	4391      	bics	r1, r2
 8004304:	6021      	str	r1, [r4, #0]
 8004306:	2d00      	cmp	r5, #0
 8004308:	d102      	bne.n	8004310 <_printf_i+0x11c>
 800430a:	9e04      	ldr	r6, [sp, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <_printf_i+0x136>
 8004310:	9e04      	ldr	r6, [sp, #16]
 8004312:	0028      	movs	r0, r5
 8004314:	0039      	movs	r1, r7
 8004316:	f7fb ff8d 	bl	8000234 <__aeabi_uidivmod>
 800431a:	9b03      	ldr	r3, [sp, #12]
 800431c:	3e01      	subs	r6, #1
 800431e:	5c5b      	ldrb	r3, [r3, r1]
 8004320:	7033      	strb	r3, [r6, #0]
 8004322:	002b      	movs	r3, r5
 8004324:	0005      	movs	r5, r0
 8004326:	429f      	cmp	r7, r3
 8004328:	d9f3      	bls.n	8004312 <_printf_i+0x11e>
 800432a:	2f08      	cmp	r7, #8
 800432c:	d109      	bne.n	8004342 <_printf_i+0x14e>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	07db      	lsls	r3, r3, #31
 8004332:	d506      	bpl.n	8004342 <_printf_i+0x14e>
 8004334:	6863      	ldr	r3, [r4, #4]
 8004336:	6922      	ldr	r2, [r4, #16]
 8004338:	4293      	cmp	r3, r2
 800433a:	dc02      	bgt.n	8004342 <_printf_i+0x14e>
 800433c:	2330      	movs	r3, #48	; 0x30
 800433e:	3e01      	subs	r6, #1
 8004340:	7033      	strb	r3, [r6, #0]
 8004342:	9b04      	ldr	r3, [sp, #16]
 8004344:	1b9b      	subs	r3, r3, r6
 8004346:	6123      	str	r3, [r4, #16]
 8004348:	9b07      	ldr	r3, [sp, #28]
 800434a:	0021      	movs	r1, r4
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	9805      	ldr	r0, [sp, #20]
 8004350:	9b06      	ldr	r3, [sp, #24]
 8004352:	aa09      	add	r2, sp, #36	; 0x24
 8004354:	f7ff fede 	bl	8004114 <_printf_common>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d135      	bne.n	80043c8 <_printf_i+0x1d4>
 800435c:	2001      	movs	r0, #1
 800435e:	4240      	negs	r0, r0
 8004360:	b00b      	add	sp, #44	; 0x2c
 8004362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004364:	2220      	movs	r2, #32
 8004366:	6809      	ldr	r1, [r1, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	6022      	str	r2, [r4, #0]
 800436c:	0022      	movs	r2, r4
 800436e:	2178      	movs	r1, #120	; 0x78
 8004370:	3245      	adds	r2, #69	; 0x45
 8004372:	7011      	strb	r1, [r2, #0]
 8004374:	4a27      	ldr	r2, [pc, #156]	; (8004414 <_printf_i+0x220>)
 8004376:	e7a7      	b.n	80042c8 <_printf_i+0xd4>
 8004378:	0648      	lsls	r0, r1, #25
 800437a:	d5ac      	bpl.n	80042d6 <_printf_i+0xe2>
 800437c:	b2ad      	uxth	r5, r5
 800437e:	e7aa      	b.n	80042d6 <_printf_i+0xe2>
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	680d      	ldr	r5, [r1, #0]
 8004384:	1d10      	adds	r0, r2, #4
 8004386:	6949      	ldr	r1, [r1, #20]
 8004388:	6018      	str	r0, [r3, #0]
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	062e      	lsls	r6, r5, #24
 800438e:	d501      	bpl.n	8004394 <_printf_i+0x1a0>
 8004390:	6019      	str	r1, [r3, #0]
 8004392:	e002      	b.n	800439a <_printf_i+0x1a6>
 8004394:	066d      	lsls	r5, r5, #25
 8004396:	d5fb      	bpl.n	8004390 <_printf_i+0x19c>
 8004398:	8019      	strh	r1, [r3, #0]
 800439a:	2300      	movs	r3, #0
 800439c:	9e04      	ldr	r6, [sp, #16]
 800439e:	6123      	str	r3, [r4, #16]
 80043a0:	e7d2      	b.n	8004348 <_printf_i+0x154>
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	1d11      	adds	r1, r2, #4
 80043a6:	6019      	str	r1, [r3, #0]
 80043a8:	6816      	ldr	r6, [r2, #0]
 80043aa:	2100      	movs	r1, #0
 80043ac:	0030      	movs	r0, r6
 80043ae:	6862      	ldr	r2, [r4, #4]
 80043b0:	f000 f832 	bl	8004418 <memchr>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d001      	beq.n	80043bc <_printf_i+0x1c8>
 80043b8:	1b80      	subs	r0, r0, r6
 80043ba:	6060      	str	r0, [r4, #4]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	6123      	str	r3, [r4, #16]
 80043c0:	2300      	movs	r3, #0
 80043c2:	9a04      	ldr	r2, [sp, #16]
 80043c4:	7013      	strb	r3, [r2, #0]
 80043c6:	e7bf      	b.n	8004348 <_printf_i+0x154>
 80043c8:	6923      	ldr	r3, [r4, #16]
 80043ca:	0032      	movs	r2, r6
 80043cc:	9906      	ldr	r1, [sp, #24]
 80043ce:	9805      	ldr	r0, [sp, #20]
 80043d0:	9d07      	ldr	r5, [sp, #28]
 80043d2:	47a8      	blx	r5
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d0c1      	beq.n	800435c <_printf_i+0x168>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	079b      	lsls	r3, r3, #30
 80043dc:	d415      	bmi.n	800440a <_printf_i+0x216>
 80043de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e0:	68e0      	ldr	r0, [r4, #12]
 80043e2:	4298      	cmp	r0, r3
 80043e4:	dabc      	bge.n	8004360 <_printf_i+0x16c>
 80043e6:	0018      	movs	r0, r3
 80043e8:	e7ba      	b.n	8004360 <_printf_i+0x16c>
 80043ea:	0022      	movs	r2, r4
 80043ec:	2301      	movs	r3, #1
 80043ee:	9906      	ldr	r1, [sp, #24]
 80043f0:	9805      	ldr	r0, [sp, #20]
 80043f2:	9e07      	ldr	r6, [sp, #28]
 80043f4:	3219      	adds	r2, #25
 80043f6:	47b0      	blx	r6
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d0af      	beq.n	800435c <_printf_i+0x168>
 80043fc:	3501      	adds	r5, #1
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	42ab      	cmp	r3, r5
 8004406:	dcf0      	bgt.n	80043ea <_printf_i+0x1f6>
 8004408:	e7e9      	b.n	80043de <_printf_i+0x1ea>
 800440a:	2500      	movs	r5, #0
 800440c:	e7f7      	b.n	80043fe <_printf_i+0x20a>
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	08004731 	.word	0x08004731
 8004414:	08004742 	.word	0x08004742

08004418 <memchr>:
 8004418:	b2c9      	uxtb	r1, r1
 800441a:	1882      	adds	r2, r0, r2
 800441c:	4290      	cmp	r0, r2
 800441e:	d101      	bne.n	8004424 <memchr+0xc>
 8004420:	2000      	movs	r0, #0
 8004422:	4770      	bx	lr
 8004424:	7803      	ldrb	r3, [r0, #0]
 8004426:	428b      	cmp	r3, r1
 8004428:	d0fb      	beq.n	8004422 <memchr+0xa>
 800442a:	3001      	adds	r0, #1
 800442c:	e7f6      	b.n	800441c <memchr+0x4>

0800442e <memcpy>:
 800442e:	2300      	movs	r3, #0
 8004430:	b510      	push	{r4, lr}
 8004432:	429a      	cmp	r2, r3
 8004434:	d100      	bne.n	8004438 <memcpy+0xa>
 8004436:	bd10      	pop	{r4, pc}
 8004438:	5ccc      	ldrb	r4, [r1, r3]
 800443a:	54c4      	strb	r4, [r0, r3]
 800443c:	3301      	adds	r3, #1
 800443e:	e7f8      	b.n	8004432 <memcpy+0x4>

08004440 <memmove>:
 8004440:	b510      	push	{r4, lr}
 8004442:	4288      	cmp	r0, r1
 8004444:	d902      	bls.n	800444c <memmove+0xc>
 8004446:	188b      	adds	r3, r1, r2
 8004448:	4298      	cmp	r0, r3
 800444a:	d303      	bcc.n	8004454 <memmove+0x14>
 800444c:	2300      	movs	r3, #0
 800444e:	e007      	b.n	8004460 <memmove+0x20>
 8004450:	5c8b      	ldrb	r3, [r1, r2]
 8004452:	5483      	strb	r3, [r0, r2]
 8004454:	3a01      	subs	r2, #1
 8004456:	d2fb      	bcs.n	8004450 <memmove+0x10>
 8004458:	bd10      	pop	{r4, pc}
 800445a:	5ccc      	ldrb	r4, [r1, r3]
 800445c:	54c4      	strb	r4, [r0, r3]
 800445e:	3301      	adds	r3, #1
 8004460:	429a      	cmp	r2, r3
 8004462:	d1fa      	bne.n	800445a <memmove+0x1a>
 8004464:	e7f8      	b.n	8004458 <memmove+0x18>
	...

08004468 <_free_r>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	0005      	movs	r5, r0
 800446c:	2900      	cmp	r1, #0
 800446e:	d010      	beq.n	8004492 <_free_r+0x2a>
 8004470:	1f0c      	subs	r4, r1, #4
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	da00      	bge.n	800447a <_free_r+0x12>
 8004478:	18e4      	adds	r4, r4, r3
 800447a:	0028      	movs	r0, r5
 800447c:	f000 f8d4 	bl	8004628 <__malloc_lock>
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <_free_r+0x90>)
 8004482:	6813      	ldr	r3, [r2, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <_free_r+0x2c>
 8004488:	6063      	str	r3, [r4, #4]
 800448a:	6014      	str	r4, [r2, #0]
 800448c:	0028      	movs	r0, r5
 800448e:	f000 f8d3 	bl	8004638 <__malloc_unlock>
 8004492:	bd70      	pop	{r4, r5, r6, pc}
 8004494:	42a3      	cmp	r3, r4
 8004496:	d908      	bls.n	80044aa <_free_r+0x42>
 8004498:	6821      	ldr	r1, [r4, #0]
 800449a:	1860      	adds	r0, r4, r1
 800449c:	4283      	cmp	r3, r0
 800449e:	d1f3      	bne.n	8004488 <_free_r+0x20>
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	1841      	adds	r1, r0, r1
 80044a6:	6021      	str	r1, [r4, #0]
 80044a8:	e7ee      	b.n	8004488 <_free_r+0x20>
 80044aa:	001a      	movs	r2, r3
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <_free_r+0x4e>
 80044b2:	42a3      	cmp	r3, r4
 80044b4:	d9f9      	bls.n	80044aa <_free_r+0x42>
 80044b6:	6811      	ldr	r1, [r2, #0]
 80044b8:	1850      	adds	r0, r2, r1
 80044ba:	42a0      	cmp	r0, r4
 80044bc:	d10b      	bne.n	80044d6 <_free_r+0x6e>
 80044be:	6820      	ldr	r0, [r4, #0]
 80044c0:	1809      	adds	r1, r1, r0
 80044c2:	1850      	adds	r0, r2, r1
 80044c4:	6011      	str	r1, [r2, #0]
 80044c6:	4283      	cmp	r3, r0
 80044c8:	d1e0      	bne.n	800448c <_free_r+0x24>
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	1841      	adds	r1, r0, r1
 80044d0:	6011      	str	r1, [r2, #0]
 80044d2:	6053      	str	r3, [r2, #4]
 80044d4:	e7da      	b.n	800448c <_free_r+0x24>
 80044d6:	42a0      	cmp	r0, r4
 80044d8:	d902      	bls.n	80044e0 <_free_r+0x78>
 80044da:	230c      	movs	r3, #12
 80044dc:	602b      	str	r3, [r5, #0]
 80044de:	e7d5      	b.n	800448c <_free_r+0x24>
 80044e0:	6821      	ldr	r1, [r4, #0]
 80044e2:	1860      	adds	r0, r4, r1
 80044e4:	4283      	cmp	r3, r0
 80044e6:	d103      	bne.n	80044f0 <_free_r+0x88>
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	1841      	adds	r1, r0, r1
 80044ee:	6021      	str	r1, [r4, #0]
 80044f0:	6063      	str	r3, [r4, #4]
 80044f2:	6054      	str	r4, [r2, #4]
 80044f4:	e7ca      	b.n	800448c <_free_r+0x24>
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	20000090 	.word	0x20000090

080044fc <_malloc_r>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	2303      	movs	r3, #3
 8004500:	1ccd      	adds	r5, r1, #3
 8004502:	439d      	bics	r5, r3
 8004504:	3508      	adds	r5, #8
 8004506:	0006      	movs	r6, r0
 8004508:	2d0c      	cmp	r5, #12
 800450a:	d21f      	bcs.n	800454c <_malloc_r+0x50>
 800450c:	250c      	movs	r5, #12
 800450e:	42a9      	cmp	r1, r5
 8004510:	d81e      	bhi.n	8004550 <_malloc_r+0x54>
 8004512:	0030      	movs	r0, r6
 8004514:	f000 f888 	bl	8004628 <__malloc_lock>
 8004518:	4925      	ldr	r1, [pc, #148]	; (80045b0 <_malloc_r+0xb4>)
 800451a:	680a      	ldr	r2, [r1, #0]
 800451c:	0014      	movs	r4, r2
 800451e:	2c00      	cmp	r4, #0
 8004520:	d11a      	bne.n	8004558 <_malloc_r+0x5c>
 8004522:	4f24      	ldr	r7, [pc, #144]	; (80045b4 <_malloc_r+0xb8>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <_malloc_r+0x38>
 800452a:	0021      	movs	r1, r4
 800452c:	0030      	movs	r0, r6
 800452e:	f000 f869 	bl	8004604 <_sbrk_r>
 8004532:	6038      	str	r0, [r7, #0]
 8004534:	0029      	movs	r1, r5
 8004536:	0030      	movs	r0, r6
 8004538:	f000 f864 	bl	8004604 <_sbrk_r>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d12b      	bne.n	8004598 <_malloc_r+0x9c>
 8004540:	230c      	movs	r3, #12
 8004542:	0030      	movs	r0, r6
 8004544:	6033      	str	r3, [r6, #0]
 8004546:	f000 f877 	bl	8004638 <__malloc_unlock>
 800454a:	e003      	b.n	8004554 <_malloc_r+0x58>
 800454c:	2d00      	cmp	r5, #0
 800454e:	dade      	bge.n	800450e <_malloc_r+0x12>
 8004550:	230c      	movs	r3, #12
 8004552:	6033      	str	r3, [r6, #0]
 8004554:	2000      	movs	r0, #0
 8004556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	1b5b      	subs	r3, r3, r5
 800455c:	d419      	bmi.n	8004592 <_malloc_r+0x96>
 800455e:	2b0b      	cmp	r3, #11
 8004560:	d903      	bls.n	800456a <_malloc_r+0x6e>
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	18e4      	adds	r4, r4, r3
 8004566:	6025      	str	r5, [r4, #0]
 8004568:	e003      	b.n	8004572 <_malloc_r+0x76>
 800456a:	6863      	ldr	r3, [r4, #4]
 800456c:	42a2      	cmp	r2, r4
 800456e:	d10e      	bne.n	800458e <_malloc_r+0x92>
 8004570:	600b      	str	r3, [r1, #0]
 8004572:	0030      	movs	r0, r6
 8004574:	f000 f860 	bl	8004638 <__malloc_unlock>
 8004578:	0020      	movs	r0, r4
 800457a:	2207      	movs	r2, #7
 800457c:	300b      	adds	r0, #11
 800457e:	1d23      	adds	r3, r4, #4
 8004580:	4390      	bics	r0, r2
 8004582:	1ac2      	subs	r2, r0, r3
 8004584:	4298      	cmp	r0, r3
 8004586:	d0e6      	beq.n	8004556 <_malloc_r+0x5a>
 8004588:	1a1b      	subs	r3, r3, r0
 800458a:	50a3      	str	r3, [r4, r2]
 800458c:	e7e3      	b.n	8004556 <_malloc_r+0x5a>
 800458e:	6053      	str	r3, [r2, #4]
 8004590:	e7ef      	b.n	8004572 <_malloc_r+0x76>
 8004592:	0022      	movs	r2, r4
 8004594:	6864      	ldr	r4, [r4, #4]
 8004596:	e7c2      	b.n	800451e <_malloc_r+0x22>
 8004598:	2303      	movs	r3, #3
 800459a:	1cc4      	adds	r4, r0, #3
 800459c:	439c      	bics	r4, r3
 800459e:	42a0      	cmp	r0, r4
 80045a0:	d0e1      	beq.n	8004566 <_malloc_r+0x6a>
 80045a2:	1a21      	subs	r1, r4, r0
 80045a4:	0030      	movs	r0, r6
 80045a6:	f000 f82d 	bl	8004604 <_sbrk_r>
 80045aa:	1c43      	adds	r3, r0, #1
 80045ac:	d1db      	bne.n	8004566 <_malloc_r+0x6a>
 80045ae:	e7c7      	b.n	8004540 <_malloc_r+0x44>
 80045b0:	20000090 	.word	0x20000090
 80045b4:	20000094 	.word	0x20000094

080045b8 <_realloc_r>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	0007      	movs	r7, r0
 80045bc:	000d      	movs	r5, r1
 80045be:	0016      	movs	r6, r2
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d105      	bne.n	80045d0 <_realloc_r+0x18>
 80045c4:	0011      	movs	r1, r2
 80045c6:	f7ff ff99 	bl	80044fc <_malloc_r>
 80045ca:	0004      	movs	r4, r0
 80045cc:	0020      	movs	r0, r4
 80045ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d0:	2a00      	cmp	r2, #0
 80045d2:	d103      	bne.n	80045dc <_realloc_r+0x24>
 80045d4:	f7ff ff48 	bl	8004468 <_free_r>
 80045d8:	0034      	movs	r4, r6
 80045da:	e7f7      	b.n	80045cc <_realloc_r+0x14>
 80045dc:	f000 f834 	bl	8004648 <_malloc_usable_size_r>
 80045e0:	002c      	movs	r4, r5
 80045e2:	42b0      	cmp	r0, r6
 80045e4:	d2f2      	bcs.n	80045cc <_realloc_r+0x14>
 80045e6:	0031      	movs	r1, r6
 80045e8:	0038      	movs	r0, r7
 80045ea:	f7ff ff87 	bl	80044fc <_malloc_r>
 80045ee:	1e04      	subs	r4, r0, #0
 80045f0:	d0ec      	beq.n	80045cc <_realloc_r+0x14>
 80045f2:	0029      	movs	r1, r5
 80045f4:	0032      	movs	r2, r6
 80045f6:	f7ff ff1a 	bl	800442e <memcpy>
 80045fa:	0029      	movs	r1, r5
 80045fc:	0038      	movs	r0, r7
 80045fe:	f7ff ff33 	bl	8004468 <_free_r>
 8004602:	e7e3      	b.n	80045cc <_realloc_r+0x14>

08004604 <_sbrk_r>:
 8004604:	2300      	movs	r3, #0
 8004606:	b570      	push	{r4, r5, r6, lr}
 8004608:	4d06      	ldr	r5, [pc, #24]	; (8004624 <_sbrk_r+0x20>)
 800460a:	0004      	movs	r4, r0
 800460c:	0008      	movs	r0, r1
 800460e:	602b      	str	r3, [r5, #0]
 8004610:	f7fc fbbe 	bl	8000d90 <_sbrk>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d103      	bne.n	8004620 <_sbrk_r+0x1c>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d000      	beq.n	8004620 <_sbrk_r+0x1c>
 800461e:	6023      	str	r3, [r4, #0]
 8004620:	bd70      	pop	{r4, r5, r6, pc}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	200001c8 	.word	0x200001c8

08004628 <__malloc_lock>:
 8004628:	b510      	push	{r4, lr}
 800462a:	4802      	ldr	r0, [pc, #8]	; (8004634 <__malloc_lock+0xc>)
 800462c:	f000 f814 	bl	8004658 <__retarget_lock_acquire_recursive>
 8004630:	bd10      	pop	{r4, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	200001d0 	.word	0x200001d0

08004638 <__malloc_unlock>:
 8004638:	b510      	push	{r4, lr}
 800463a:	4802      	ldr	r0, [pc, #8]	; (8004644 <__malloc_unlock+0xc>)
 800463c:	f000 f80d 	bl	800465a <__retarget_lock_release_recursive>
 8004640:	bd10      	pop	{r4, pc}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	200001d0 	.word	0x200001d0

08004648 <_malloc_usable_size_r>:
 8004648:	1f0b      	subs	r3, r1, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	1f18      	subs	r0, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	da01      	bge.n	8004656 <_malloc_usable_size_r+0xe>
 8004652:	580b      	ldr	r3, [r1, r0]
 8004654:	18c0      	adds	r0, r0, r3
 8004656:	4770      	bx	lr

08004658 <__retarget_lock_acquire_recursive>:
 8004658:	4770      	bx	lr

0800465a <__retarget_lock_release_recursive>:
 800465a:	4770      	bx	lr

0800465c <_init>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr

08004668 <_fini>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr
