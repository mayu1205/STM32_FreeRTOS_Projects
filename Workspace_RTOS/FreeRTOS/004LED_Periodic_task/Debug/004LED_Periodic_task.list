
004LED_Periodic_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c10  08003c10  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003c10  08003c10  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c10  08003c10  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e04  20000014  08003c2c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e18  08003c2c  00021e18  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a9d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002981  00000000  00000000  00032ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00035460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00036440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ba4  00000000  00000000  000372f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112dc  00000000  00000000  00050e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3ff1  00000000  00000000  00062178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00106169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  001061bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b48 	.word	0x08003b48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003b48 	.word	0x08003b48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f9fb 	bl	8000620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f82b 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f871 	bl	8000314 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(Taskfunc1,"Task-1",200,NULL,2,&task1_handle);
 8000232:	4910      	ldr	r1, [pc, #64]	; (8000274 <main+0x54>)
 8000234:	4810      	ldr	r0, [pc, #64]	; (8000278 <main+0x58>)
 8000236:	2308      	movs	r3, #8
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	9301      	str	r3, [sp, #4]
 800023c:	2302      	movs	r3, #2
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2300      	movs	r3, #0
 8000242:	22c8      	movs	r2, #200	; 0xc8
 8000244:	f001 ffc3 	bl	80021ce <xTaskCreate>
 8000248:	0003      	movs	r3, r0
 800024a:	60fb      	str	r3, [r7, #12]
  configASSERT(status = pdPASS);
 800024c:	2301      	movs	r3, #1
 800024e:	60fb      	str	r3, [r7, #12]

  status = xTaskCreate(Taskfunc2,"Task-2",200,NULL,2,&task2_handle);
 8000250:	490a      	ldr	r1, [pc, #40]	; (800027c <main+0x5c>)
 8000252:	480b      	ldr	r0, [pc, #44]	; (8000280 <main+0x60>)
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	2302      	movs	r3, #2
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	2300      	movs	r3, #0
 800025e:	22c8      	movs	r2, #200	; 0xc8
 8000260:	f001 ffb5 	bl	80021ce <xTaskCreate>
 8000264:	0003      	movs	r3, r0
 8000266:	60fb      	str	r3, [r7, #12]
  configASSERT(status = pdPASS);
 8000268:	2301      	movs	r3, #1
 800026a:	60fb      	str	r3, [r7, #12]

  vTaskStartScheduler();
 800026c:	f002 f968 	bl	8002540 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000270:	e7fe      	b.n	8000270 <main+0x50>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	08003b60 	.word	0x08003b60
 8000278:	08000409 	.word	0x08000409
 800027c:	08003b68 	.word	0x08003b68
 8000280:	08000437 	.word	0x08000437

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b093      	sub	sp, #76	; 0x4c
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	2410      	movs	r4, #16
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	2338      	movs	r3, #56	; 0x38
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f003 fc4e 	bl	8003b36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	003b      	movs	r3, r7
 800029c:	0018      	movs	r0, r3
 800029e:	2310      	movs	r3, #16
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f003 fc47 	bl	8003b36 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fc53 	bl	8000b58 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	2202      	movs	r2, #2
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	0052      	lsls	r2, r2, #1
 80002be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2240      	movs	r2, #64	; 0x40
 80002ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2200      	movs	r2, #0
 80002d0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fc8b 	bl	8000bf0 <HAL_RCC_OscConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002de:	f000 f8d3 	bl	8000488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	003b      	movs	r3, r7
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e8:	003b      	movs	r3, r7
 80002ea:	2200      	movs	r2, #0
 80002ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	003b      	movs	r3, r7
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	003b      	movs	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	003b      	movs	r3, r7
 80002fc:	2100      	movs	r1, #0
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 ff90 	bl	8001224 <HAL_RCC_ClockConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000308:	f000 f8be 	bl	8000488 <Error_Handler>
  }
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b013      	add	sp, #76	; 0x4c
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b089      	sub	sp, #36	; 0x24
 8000318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	240c      	movs	r4, #12
 800031c:	193b      	adds	r3, r7, r4
 800031e:	0018      	movs	r0, r3
 8000320:	2314      	movs	r3, #20
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f003 fc06 	bl	8003b36 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032a:	4b36      	ldr	r3, [pc, #216]	; (8000404 <MX_GPIO_Init+0xf0>)
 800032c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800032e:	4b35      	ldr	r3, [pc, #212]	; (8000404 <MX_GPIO_Init+0xf0>)
 8000330:	2104      	movs	r1, #4
 8000332:	430a      	orrs	r2, r1
 8000334:	635a      	str	r2, [r3, #52]	; 0x34
 8000336:	4b33      	ldr	r3, [pc, #204]	; (8000404 <MX_GPIO_Init+0xf0>)
 8000338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800033a:	2204      	movs	r2, #4
 800033c:	4013      	ands	r3, r2
 800033e:	60bb      	str	r3, [r7, #8]
 8000340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000342:	4b30      	ldr	r3, [pc, #192]	; (8000404 <MX_GPIO_Init+0xf0>)
 8000344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000346:	4b2f      	ldr	r3, [pc, #188]	; (8000404 <MX_GPIO_Init+0xf0>)
 8000348:	2120      	movs	r1, #32
 800034a:	430a      	orrs	r2, r1
 800034c:	635a      	str	r2, [r3, #52]	; 0x34
 800034e:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <MX_GPIO_Init+0xf0>)
 8000350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000352:	2220      	movs	r2, #32
 8000354:	4013      	ands	r3, r2
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	4b2a      	ldr	r3, [pc, #168]	; (8000404 <MX_GPIO_Init+0xf0>)
 800035c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800035e:	4b29      	ldr	r3, [pc, #164]	; (8000404 <MX_GPIO_Init+0xf0>)
 8000360:	2101      	movs	r1, #1
 8000362:	430a      	orrs	r2, r1
 8000364:	635a      	str	r2, [r3, #52]	; 0x34
 8000366:	4b27      	ldr	r3, [pc, #156]	; (8000404 <MX_GPIO_Init+0xf0>)
 8000368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800036a:	2201      	movs	r2, #1
 800036c:	4013      	ands	r3, r2
 800036e:	603b      	str	r3, [r7, #0]
 8000370:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|EX_LED_Pin, GPIO_PIN_RESET);
 8000372:	23a0      	movs	r3, #160	; 0xa0
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	2200      	movs	r2, #0
 8000378:	2160      	movs	r1, #96	; 0x60
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fbb4 	bl	8000ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000380:	193b      	adds	r3, r7, r4
 8000382:	220c      	movs	r2, #12
 8000384:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000386:	193b      	adds	r3, r7, r4
 8000388:	2202      	movs	r2, #2
 800038a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038c:	193b      	adds	r3, r7, r4
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	193b      	adds	r3, r7, r4
 8000394:	2200      	movs	r2, #0
 8000396:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000398:	193b      	adds	r3, r7, r4
 800039a:	2201      	movs	r2, #1
 800039c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039e:	193a      	adds	r2, r7, r4
 80003a0:	23a0      	movs	r3, #160	; 0xa0
 80003a2:	05db      	lsls	r3, r3, #23
 80003a4:	0011      	movs	r1, r2
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 fa3a 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	2220      	movs	r2, #32
 80003b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	193b      	adds	r3, r7, r4
 80003b4:	2201      	movs	r2, #1
 80003b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	2202      	movs	r2, #2
 80003c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80003c4:	193a      	adds	r2, r7, r4
 80003c6:	23a0      	movs	r3, #160	; 0xa0
 80003c8:	05db      	lsls	r3, r3, #23
 80003ca:	0011      	movs	r1, r2
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 fa27 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_LED_Pin */
  GPIO_InitStruct.Pin = EX_LED_Pin;
 80003d2:	0021      	movs	r1, r4
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2240      	movs	r2, #64	; 0x40
 80003d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2201      	movs	r2, #1
 80003de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EX_LED_GPIO_Port, &GPIO_InitStruct);
 80003ec:	187a      	adds	r2, r7, r1
 80003ee:	23a0      	movs	r3, #160	; 0xa0
 80003f0:	05db      	lsls	r3, r3, #23
 80003f2:	0011      	movs	r1, r2
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fa13 	bl	8000820 <HAL_GPIO_Init>

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b009      	add	sp, #36	; 0x24
 8000400:	bd90      	pop	{r4, r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	40021000 	.word	0x40021000

08000408 <Taskfunc1>:

/* USER CODE BEGIN 4 */
static void Taskfunc1(void *parameters)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	TickType_t pxPreviousWakeTime;
	pxPreviousWakeTime = xTaskGetTickCount();
 8000410:	f002 f9ca 	bl	80027a8 <xTaskGetTickCount>
 8000414:	0003      	movs	r3, r0
 8000416:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(EX_LED_GPIO_Port, EX_LED_Pin);
 8000418:	23a0      	movs	r3, #160	; 0xa0
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	2140      	movs	r1, #64	; 0x40
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fb7f 	bl	8000b22 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&pxPreviousWakeTime,pdMS_TO_TICKS(1000));
 8000424:	23fa      	movs	r3, #250	; 0xfa
 8000426:	009a      	lsls	r2, r3, #2
 8000428:	230c      	movs	r3, #12
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	0011      	movs	r1, r2
 800042e:	0018      	movs	r0, r3
 8000430:	f002 f82a 	bl	8002488 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(EX_LED_GPIO_Port, EX_LED_Pin);
 8000434:	e7f0      	b.n	8000418 <Taskfunc1+0x10>

08000436 <Taskfunc2>:
		//vTaskDelay(1000);
	}
}

static void Taskfunc2(void *parameters)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b084      	sub	sp, #16
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
	TickType_t pxPreviousWakeTime;
	pxPreviousWakeTime = xTaskGetTickCount();
 800043e:	f002 f9b3 	bl	80027a8 <xTaskGetTickCount>
 8000442:	0003      	movs	r3, r0
 8000444:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000446:	23a0      	movs	r3, #160	; 0xa0
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	2120      	movs	r1, #32
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fb68 	bl	8000b22 <HAL_GPIO_TogglePin>
	    vTaskDelayUntil(&pxPreviousWakeTime,pdMS_TO_TICKS(1000));
 8000452:	23fa      	movs	r3, #250	; 0xfa
 8000454:	009a      	lsls	r2, r3, #2
 8000456:	230c      	movs	r3, #12
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	0011      	movs	r1, r2
 800045c:	0018      	movs	r0, r3
 800045e:	f002 f813 	bl	8002488 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000462:	e7f0      	b.n	8000446 <Taskfunc2+0x10>

08000464 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d101      	bne.n	800047a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000476:	f000 f8f3 	bl	8000660 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	40001000 	.word	0x40001000

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <Error_Handler+0x8>
	...

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <HAL_MspInit+0x4c>)
 800049c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <HAL_MspInit+0x4c>)
 80004a0:	2101      	movs	r1, #1
 80004a2:	430a      	orrs	r2, r1
 80004a4:	641a      	str	r2, [r3, #64]	; 0x40
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <HAL_MspInit+0x4c>)
 80004a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004aa:	2201      	movs	r2, #1
 80004ac:	4013      	ands	r3, r2
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <HAL_MspInit+0x4c>)
 80004b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <HAL_MspInit+0x4c>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	0549      	lsls	r1, r1, #21
 80004bc:	430a      	orrs	r2, r1
 80004be:	63da      	str	r2, [r3, #60]	; 0x3c
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <HAL_MspInit+0x4c>)
 80004c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	055b      	lsls	r3, r3, #21
 80004c8:	4013      	ands	r3, r2
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80004ce:	23c0      	movs	r3, #192	; 0xc0
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 f8e0 	bl	8000698 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b002      	add	sp, #8
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority ,0);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	0019      	movs	r1, r3
 80004fa:	2011      	movs	r0, #17
 80004fc:	f000 f96a 	bl	80007d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000500:	2011      	movs	r0, #17
 8000502:	f000 f97c 	bl	80007fe <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <HAL_InitTick+0xa4>)
 8000508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <HAL_InitTick+0xa4>)
 800050c:	2110      	movs	r1, #16
 800050e:	430a      	orrs	r2, r1
 8000510:	63da      	str	r2, [r3, #60]	; 0x3c
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <HAL_InitTick+0xa4>)
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	2210      	movs	r2, #16
 8000518:	4013      	ands	r3, r2
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800051e:	230c      	movs	r3, #12
 8000520:	18fa      	adds	r2, r7, r3
 8000522:	2310      	movs	r3, #16
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f001 f825 	bl	8001578 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800052e:	f001 f80d 	bl	800154c <HAL_RCC_GetPCLK1Freq>
 8000532:	0003      	movs	r3, r0
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000538:	4914      	ldr	r1, [pc, #80]	; (800058c <HAL_InitTick+0xa8>)
 800053a:	0018      	movs	r0, r3
 800053c:	f7ff fde4 	bl	8000108 <__udivsi3>
 8000540:	0003      	movs	r3, r0
 8000542:	3b01      	subs	r3, #1
 8000544:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_InitTick+0xac>)
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <HAL_InitTick+0xb0>)
 800054a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <HAL_InitTick+0xac>)
 800054e:	4a12      	ldr	r2, [pc, #72]	; (8000598 <HAL_InitTick+0xb4>)
 8000550:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <HAL_InitTick+0xac>)
 8000554:	6a3a      	ldr	r2, [r7, #32]
 8000556:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <HAL_InitTick+0xac>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <HAL_InitTick+0xac>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <HAL_InitTick+0xac>)
 8000566:	0018      	movs	r0, r3
 8000568:	f001 f830 	bl	80015cc <HAL_TIM_Base_Init>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d105      	bne.n	800057c <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <HAL_InitTick+0xac>)
 8000572:	0018      	movs	r0, r3
 8000574:	f001 f88a 	bl	800168c <HAL_TIM_Base_Start_IT>
 8000578:	0003      	movs	r3, r0
 800057a:	e000      	b.n	800057e <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 800057c:	2301      	movs	r3, #1
}
 800057e:	0018      	movs	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	b00a      	add	sp, #40	; 0x28
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	40021000 	.word	0x40021000
 800058c:	000f4240 	.word	0x000f4240
 8000590:	20001d88 	.word	0x20001d88
 8000594:	40001000 	.word	0x40001000
 8000598:	000003e7 	.word	0x000003e7

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <NMI_Handler+0x4>

080005a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <HardFault_Handler+0x4>

080005a8 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 f8c8 	bl	8001744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	20001d88 	.word	0x20001d88

080005c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d0:	f7ff fff6 	bl	80005c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480c      	ldr	r0, [pc, #48]	; (8000608 <LoopForever+0x6>)
  ldr r1, =_edata
 80005d6:	490d      	ldr	r1, [pc, #52]	; (800060c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <LoopForever+0xe>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ec:	4c0a      	ldr	r4, [pc, #40]	; (8000618 <LoopForever+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fa:	f003 fa6f 	bl	8003adc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80005fe:	f7ff fe0f 	bl	8000220 <main>

08000602 <LoopForever>:

LoopForever:
  b LoopForever
 8000602:	e7fe      	b.n	8000602 <LoopForever>
  ldr   r0, =_estack
 8000604:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000610:	08003c18 	.word	0x08003c18
  ldr r2, =_sbss
 8000614:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000618:	20001e18 	.word	0x20001e18

0800061c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_COMP_IRQHandler>
	...

08000620 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_Init+0x3c>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_Init+0x3c>)
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	0049      	lsls	r1, r1, #1
 8000636:	430a      	orrs	r2, r1
 8000638:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800063a:	2003      	movs	r0, #3
 800063c:	f7ff ff52 	bl	80004e4 <HAL_InitTick>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d003      	beq.n	800064c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	e001      	b.n	8000650 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff ff22 	bl	8000494 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	781b      	ldrb	r3, [r3, #0]
}
 8000654:	0018      	movs	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	b002      	add	sp, #8
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_IncTick+0x1c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	001a      	movs	r2, r3
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x20>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	18d2      	adds	r2, r2, r3
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_IncTick+0x20>)
 8000672:	601a      	str	r2, [r3, #0]
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000008 	.word	0x20000008
 8000680:	20001dd4 	.word	0x20001dd4

08000684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b02      	ldr	r3, [pc, #8]	; (8000694 <HAL_GetTick+0x10>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20001dd4 	.word	0x20001dd4

08000698 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80006a6:	4013      	ands	r3, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	430a      	orrs	r2, r1
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	40010000 	.word	0x40010000
 80006c0:	fffff9ff 	.word	0xfffff9ff

080006c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	0002      	movs	r2, r0
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b7f      	cmp	r3, #127	; 0x7f
 80006d6:	d809      	bhi.n	80006ec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	001a      	movs	r2, r3
 80006de:	231f      	movs	r3, #31
 80006e0:	401a      	ands	r2, r3
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <__NVIC_EnableIRQ+0x30>)
 80006e4:	2101      	movs	r1, #1
 80006e6:	4091      	lsls	r1, r2
 80006e8:	000a      	movs	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b002      	add	sp, #8
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	0002      	movs	r2, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b7f      	cmp	r3, #127	; 0x7f
 800070c:	d828      	bhi.n	8000760 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800070e:	4a2f      	ldr	r2, [pc, #188]	; (80007cc <__NVIC_SetPriority+0xd4>)
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b25b      	sxtb	r3, r3
 8000716:	089b      	lsrs	r3, r3, #2
 8000718:	33c0      	adds	r3, #192	; 0xc0
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	589b      	ldr	r3, [r3, r2]
 800071e:	1dfa      	adds	r2, r7, #7
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	0011      	movs	r1, r2
 8000724:	2203      	movs	r2, #3
 8000726:	400a      	ands	r2, r1
 8000728:	00d2      	lsls	r2, r2, #3
 800072a:	21ff      	movs	r1, #255	; 0xff
 800072c:	4091      	lsls	r1, r2
 800072e:	000a      	movs	r2, r1
 8000730:	43d2      	mvns	r2, r2
 8000732:	401a      	ands	r2, r3
 8000734:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	019b      	lsls	r3, r3, #6
 800073a:	22ff      	movs	r2, #255	; 0xff
 800073c:	401a      	ands	r2, r3
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	0018      	movs	r0, r3
 8000744:	2303      	movs	r3, #3
 8000746:	4003      	ands	r3, r0
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074c:	481f      	ldr	r0, [pc, #124]	; (80007cc <__NVIC_SetPriority+0xd4>)
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b25b      	sxtb	r3, r3
 8000754:	089b      	lsrs	r3, r3, #2
 8000756:	430a      	orrs	r2, r1
 8000758:	33c0      	adds	r3, #192	; 0xc0
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800075e:	e031      	b.n	80007c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <__NVIC_SetPriority+0xd8>)
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	0019      	movs	r1, r3
 8000768:	230f      	movs	r3, #15
 800076a:	400b      	ands	r3, r1
 800076c:	3b08      	subs	r3, #8
 800076e:	089b      	lsrs	r3, r3, #2
 8000770:	3306      	adds	r3, #6
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	18d3      	adds	r3, r2, r3
 8000776:	3304      	adds	r3, #4
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1dfa      	adds	r2, r7, #7
 800077c:	7812      	ldrb	r2, [r2, #0]
 800077e:	0011      	movs	r1, r2
 8000780:	2203      	movs	r2, #3
 8000782:	400a      	ands	r2, r1
 8000784:	00d2      	lsls	r2, r2, #3
 8000786:	21ff      	movs	r1, #255	; 0xff
 8000788:	4091      	lsls	r1, r2
 800078a:	000a      	movs	r2, r1
 800078c:	43d2      	mvns	r2, r2
 800078e:	401a      	ands	r2, r3
 8000790:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	019b      	lsls	r3, r3, #6
 8000796:	22ff      	movs	r2, #255	; 0xff
 8000798:	401a      	ands	r2, r3
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	0018      	movs	r0, r3
 80007a0:	2303      	movs	r3, #3
 80007a2:	4003      	ands	r3, r0
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <__NVIC_SetPriority+0xd8>)
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	001c      	movs	r4, r3
 80007b0:	230f      	movs	r3, #15
 80007b2:	4023      	ands	r3, r4
 80007b4:	3b08      	subs	r3, #8
 80007b6:	089b      	lsrs	r3, r3, #2
 80007b8:	430a      	orrs	r2, r1
 80007ba:	3306      	adds	r3, #6
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	18c3      	adds	r3, r0, r3
 80007c0:	3304      	adds	r3, #4
 80007c2:	601a      	str	r2, [r3, #0]
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b003      	add	sp, #12
 80007ca:	bd90      	pop	{r4, r7, pc}
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60b9      	str	r1, [r7, #8]
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	210f      	movs	r1, #15
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	1c02      	adds	r2, r0, #0
 80007e4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff ff81 	bl	80006f8 <__NVIC_SetPriority>
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b004      	add	sp, #16
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	0002      	movs	r2, r0
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b25b      	sxtb	r3, r3
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ff57 	bl	80006c4 <__NVIC_EnableIRQ>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082e:	e147      	b.n	8000ac0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2101      	movs	r1, #1
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	4091      	lsls	r1, r2
 800083a:	000a      	movs	r2, r1
 800083c:	4013      	ands	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d100      	bne.n	8000848 <HAL_GPIO_Init+0x28>
 8000846:	e138      	b.n	8000aba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2203      	movs	r2, #3
 800084e:	4013      	ands	r3, r2
 8000850:	2b01      	cmp	r3, #1
 8000852:	d005      	beq.n	8000860 <HAL_GPIO_Init+0x40>
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	2203      	movs	r2, #3
 800085a:	4013      	ands	r3, r2
 800085c:	2b02      	cmp	r3, #2
 800085e:	d130      	bne.n	80008c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	2203      	movs	r2, #3
 800086c:	409a      	lsls	r2, r3
 800086e:	0013      	movs	r3, r2
 8000870:	43da      	mvns	r2, r3
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	409a      	lsls	r2, r3
 8000882:	0013      	movs	r3, r2
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	4313      	orrs	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000896:	2201      	movs	r2, #1
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
 800089c:	0013      	movs	r3, r2
 800089e:	43da      	mvns	r2, r3
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	4013      	ands	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	2201      	movs	r2, #1
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
 80008b4:	0013      	movs	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2203      	movs	r2, #3
 80008c8:	4013      	ands	r3, r2
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d017      	beq.n	80008fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	2203      	movs	r2, #3
 80008da:	409a      	lsls	r2, r3
 80008dc:	0013      	movs	r3, r2
 80008de:	43da      	mvns	r2, r3
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	4013      	ands	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	409a      	lsls	r2, r3
 80008f0:	0013      	movs	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2203      	movs	r2, #3
 8000904:	4013      	ands	r3, r2
 8000906:	2b02      	cmp	r3, #2
 8000908:	d123      	bne.n	8000952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	08da      	lsrs	r2, r3, #3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3208      	adds	r2, #8
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	58d3      	ldr	r3, [r2, r3]
 8000916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	2207      	movs	r2, #7
 800091c:	4013      	ands	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	220f      	movs	r2, #15
 8000922:	409a      	lsls	r2, r3
 8000924:	0013      	movs	r3, r2
 8000926:	43da      	mvns	r2, r3
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	691a      	ldr	r2, [r3, #16]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	2107      	movs	r1, #7
 8000936:	400b      	ands	r3, r1
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	409a      	lsls	r2, r3
 800093c:	0013      	movs	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	08da      	lsrs	r2, r3, #3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3208      	adds	r2, #8
 800094c:	0092      	lsls	r2, r2, #2
 800094e:	6939      	ldr	r1, [r7, #16]
 8000950:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	2203      	movs	r2, #3
 800095e:	409a      	lsls	r2, r3
 8000960:	0013      	movs	r3, r2
 8000962:	43da      	mvns	r2, r3
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4013      	ands	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2203      	movs	r2, #3
 8000970:	401a      	ands	r2, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	409a      	lsls	r2, r3
 8000978:	0013      	movs	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685a      	ldr	r2, [r3, #4]
 800098a:	23c0      	movs	r3, #192	; 0xc0
 800098c:	029b      	lsls	r3, r3, #10
 800098e:	4013      	ands	r3, r2
 8000990:	d100      	bne.n	8000994 <HAL_GPIO_Init+0x174>
 8000992:	e092      	b.n	8000aba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000994:	4a50      	ldr	r2, [pc, #320]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	3318      	adds	r3, #24
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	589b      	ldr	r3, [r3, r2]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	2203      	movs	r2, #3
 80009a6:	4013      	ands	r3, r2
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	220f      	movs	r2, #15
 80009ac:	409a      	lsls	r2, r3
 80009ae:	0013      	movs	r3, r2
 80009b0:	43da      	mvns	r2, r3
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	23a0      	movs	r3, #160	; 0xa0
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	429a      	cmp	r2, r3
 80009c0:	d013      	beq.n	80009ea <HAL_GPIO_Init+0x1ca>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a45      	ldr	r2, [pc, #276]	; (8000adc <HAL_GPIO_Init+0x2bc>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d00d      	beq.n	80009e6 <HAL_GPIO_Init+0x1c6>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a44      	ldr	r2, [pc, #272]	; (8000ae0 <HAL_GPIO_Init+0x2c0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d007      	beq.n	80009e2 <HAL_GPIO_Init+0x1c2>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a43      	ldr	r2, [pc, #268]	; (8000ae4 <HAL_GPIO_Init+0x2c4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_GPIO_Init+0x1be>
 80009da:	2303      	movs	r3, #3
 80009dc:	e006      	b.n	80009ec <HAL_GPIO_Init+0x1cc>
 80009de:	2305      	movs	r3, #5
 80009e0:	e004      	b.n	80009ec <HAL_GPIO_Init+0x1cc>
 80009e2:	2302      	movs	r3, #2
 80009e4:	e002      	b.n	80009ec <HAL_GPIO_Init+0x1cc>
 80009e6:	2301      	movs	r3, #1
 80009e8:	e000      	b.n	80009ec <HAL_GPIO_Init+0x1cc>
 80009ea:	2300      	movs	r3, #0
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	2103      	movs	r1, #3
 80009f0:	400a      	ands	r2, r1
 80009f2:	00d2      	lsls	r2, r2, #3
 80009f4:	4093      	lsls	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80009fc:	4936      	ldr	r1, [pc, #216]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	3318      	adds	r3, #24
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a0a:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	43da      	mvns	r2, r3
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	035b      	lsls	r3, r3, #13
 8000a22:	4013      	ands	r3, r2
 8000a24:	d003      	beq.n	8000a2e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	43da      	mvns	r2, r3
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	039b      	lsls	r3, r3, #14
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	d003      	beq.n	8000a58 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 8000a60:	2384      	movs	r3, #132	; 0x84
 8000a62:	58d3      	ldr	r3, [r2, r3]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	43da      	mvns	r2, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	029b      	lsls	r3, r3, #10
 8000a78:	4013      	ands	r3, r2
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a84:	4914      	ldr	r1, [pc, #80]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 8000a86:	2284      	movs	r2, #132	; 0x84
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000a8c:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	58d3      	ldr	r3, [r2, r3]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	43da      	mvns	r2, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	025b      	lsls	r3, r3, #9
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ab2:	4909      	ldr	r1, [pc, #36]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	40da      	lsrs	r2, r3
 8000ac8:	1e13      	subs	r3, r2, #0
 8000aca:	d000      	beq.n	8000ace <HAL_GPIO_Init+0x2ae>
 8000acc:	e6b0      	b.n	8000830 <HAL_GPIO_Init+0x10>
  }
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b006      	add	sp, #24
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	50000400 	.word	0x50000400
 8000ae0:	50000800 	.word	0x50000800
 8000ae4:	50000c00 	.word	0x50000c00

08000ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	0008      	movs	r0, r1
 8000af2:	0011      	movs	r1, r2
 8000af4:	1cbb      	adds	r3, r7, #2
 8000af6:	1c02      	adds	r2, r0, #0
 8000af8:	801a      	strh	r2, [r3, #0]
 8000afa:	1c7b      	adds	r3, r7, #1
 8000afc:	1c0a      	adds	r2, r1, #0
 8000afe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b00:	1c7b      	adds	r3, r7, #1
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d004      	beq.n	8000b12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b08:	1cbb      	adds	r3, r7, #2
 8000b0a:	881a      	ldrh	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b10:	e003      	b.n	8000b1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b12:	1cbb      	adds	r3, r7, #2
 8000b14:	881a      	ldrh	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	1cbb      	adds	r3, r7, #2
 8000b2e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b36:	1cbb      	adds	r3, r7, #2
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	041a      	lsls	r2, r3, #16
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	1cb9      	adds	r1, r7, #2
 8000b46:	8809      	ldrh	r1, [r1, #0]
 8000b48:	400b      	ands	r3, r1
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b004      	add	sp, #16
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	0019      	movs	r1, r3
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d11f      	bne.n	8000bbc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	0013      	movs	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	189b      	adds	r3, r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4912      	ldr	r1, [pc, #72]	; (8000bd4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff fabc 	bl	8000108 <__udivsi3>
 8000b90:	0003      	movs	r3, r0
 8000b92:	3301      	adds	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b96:	e008      	b.n	8000baa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	e001      	b.n	8000baa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e009      	b.n	8000bbe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d0ed      	beq.n	8000b98 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b004      	add	sp, #16
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40007000 	.word	0x40007000
 8000bcc:	fffff9ff 	.word	0xfffff9ff
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	000f4240 	.word	0x000f4240

08000bd8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <LL_RCC_GetAPB1Prescaler+0x14>)
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	23e0      	movs	r3, #224	; 0xe0
 8000be2:	01db      	lsls	r3, r3, #7
 8000be4:	4013      	ands	r3, r2
}
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e2fe      	b.n	8001200 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2201      	movs	r2, #1
 8000c08:	4013      	ands	r3, r2
 8000c0a:	d100      	bne.n	8000c0e <HAL_RCC_OscConfig+0x1e>
 8000c0c:	e07c      	b.n	8000d08 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c0e:	4bc3      	ldr	r3, [pc, #780]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2238      	movs	r2, #56	; 0x38
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c18:	4bc0      	ldr	r3, [pc, #768]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	4013      	ands	r3, r2
 8000c20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	2b10      	cmp	r3, #16
 8000c26:	d102      	bne.n	8000c2e <HAL_RCC_OscConfig+0x3e>
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d002      	beq.n	8000c34 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d10b      	bne.n	8000c4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c34:	4bb9      	ldr	r3, [pc, #740]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	029b      	lsls	r3, r3, #10
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	d062      	beq.n	8000d06 <HAL_RCC_OscConfig+0x116>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d15e      	bne.n	8000d06 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e2d9      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d107      	bne.n	8000c68 <HAL_RCC_OscConfig+0x78>
 8000c58:	4bb0      	ldr	r3, [pc, #704]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4baf      	ldr	r3, [pc, #700]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	0249      	lsls	r1, r1, #9
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e020      	b.n	8000caa <HAL_RCC_OscConfig+0xba>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	23a0      	movs	r3, #160	; 0xa0
 8000c6e:	02db      	lsls	r3, r3, #11
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d10e      	bne.n	8000c92 <HAL_RCC_OscConfig+0xa2>
 8000c74:	4ba9      	ldr	r3, [pc, #676]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4ba8      	ldr	r3, [pc, #672]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	02c9      	lsls	r1, r1, #11
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	4ba6      	ldr	r3, [pc, #664]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4ba5      	ldr	r3, [pc, #660]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0249      	lsls	r1, r1, #9
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	e00b      	b.n	8000caa <HAL_RCC_OscConfig+0xba>
 8000c92:	4ba2      	ldr	r3, [pc, #648]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4ba1      	ldr	r3, [pc, #644]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c98:	49a1      	ldr	r1, [pc, #644]	; (8000f20 <HAL_RCC_OscConfig+0x330>)
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	4b9f      	ldr	r3, [pc, #636]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b9e      	ldr	r3, [pc, #632]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000ca4:	499f      	ldr	r1, [pc, #636]	; (8000f24 <HAL_RCC_OscConfig+0x334>)
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d014      	beq.n	8000cdc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fce7 	bl	8000684 <HAL_GetTick>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cbc:	f7ff fce2 	bl	8000684 <HAL_GetTick>
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b64      	cmp	r3, #100	; 0x64
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e298      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cce:	4b93      	ldr	r3, [pc, #588]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	029b      	lsls	r3, r3, #10
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d0f0      	beq.n	8000cbc <HAL_RCC_OscConfig+0xcc>
 8000cda:	e015      	b.n	8000d08 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fcd2 	bl	8000684 <HAL_GetTick>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce6:	f7ff fccd 	bl	8000684 <HAL_GetTick>
 8000cea:	0002      	movs	r2, r0
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b64      	cmp	r3, #100	; 0x64
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e283      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cf8:	4b88      	ldr	r3, [pc, #544]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	029b      	lsls	r3, r3, #10
 8000d00:	4013      	ands	r3, r2
 8000d02:	d1f0      	bne.n	8000ce6 <HAL_RCC_OscConfig+0xf6>
 8000d04:	e000      	b.n	8000d08 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	4013      	ands	r3, r2
 8000d10:	d100      	bne.n	8000d14 <HAL_RCC_OscConfig+0x124>
 8000d12:	e099      	b.n	8000e48 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d14:	4b81      	ldr	r3, [pc, #516]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	2238      	movs	r2, #56	; 0x38
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d1e:	4b7f      	ldr	r3, [pc, #508]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	2203      	movs	r2, #3
 8000d24:	4013      	ands	r3, r2
 8000d26:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2b10      	cmp	r3, #16
 8000d2c:	d102      	bne.n	8000d34 <HAL_RCC_OscConfig+0x144>
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d002      	beq.n	8000d3a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d135      	bne.n	8000da6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d3a:	4b78      	ldr	r3, [pc, #480]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	4013      	ands	r3, r2
 8000d44:	d005      	beq.n	8000d52 <HAL_RCC_OscConfig+0x162>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e256      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d52:	4b72      	ldr	r3, [pc, #456]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4a74      	ldr	r2, [pc, #464]	; (8000f28 <HAL_RCC_OscConfig+0x338>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	021a      	lsls	r2, r3, #8
 8000d62:	4b6e      	ldr	r3, [pc, #440]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d64:	430a      	orrs	r2, r1
 8000d66:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d112      	bne.n	8000d94 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d6e:	4b6b      	ldr	r3, [pc, #428]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a6e      	ldr	r2, [pc, #440]	; (8000f2c <HAL_RCC_OscConfig+0x33c>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	0019      	movs	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	4b67      	ldr	r3, [pc, #412]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000d82:	4b66      	ldr	r3, [pc, #408]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	0adb      	lsrs	r3, r3, #11
 8000d88:	2207      	movs	r2, #7
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	4a68      	ldr	r2, [pc, #416]	; (8000f30 <HAL_RCC_OscConfig+0x340>)
 8000d8e:	40da      	lsrs	r2, r3
 8000d90:	4b68      	ldr	r3, [pc, #416]	; (8000f34 <HAL_RCC_OscConfig+0x344>)
 8000d92:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000d94:	4b68      	ldr	r3, [pc, #416]	; (8000f38 <HAL_RCC_OscConfig+0x348>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff fba3 	bl	80004e4 <HAL_InitTick>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d051      	beq.n	8000e46 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e22c      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d030      	beq.n	8000e10 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000dae:	4b5b      	ldr	r3, [pc, #364]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a5e      	ldr	r2, [pc, #376]	; (8000f2c <HAL_RCC_OscConfig+0x33c>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	0019      	movs	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	4b57      	ldr	r3, [pc, #348]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000dc2:	4b56      	ldr	r3, [pc, #344]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b55      	ldr	r3, [pc, #340]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	0049      	lsls	r1, r1, #1
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fc58 	bl	8000684 <HAL_GetTick>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dda:	f7ff fc53 	bl	8000684 <HAL_GetTick>
 8000dde:	0002      	movs	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e209      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000dec:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	4013      	ands	r3, r2
 8000df6:	d0f0      	beq.n	8000dda <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df8:	4b48      	ldr	r3, [pc, #288]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a4a      	ldr	r2, [pc, #296]	; (8000f28 <HAL_RCC_OscConfig+0x338>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	0019      	movs	r1, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	021a      	lsls	r2, r3, #8
 8000e08:	4b44      	ldr	r3, [pc, #272]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	e01b      	b.n	8000e48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000e10:	4b42      	ldr	r3, [pc, #264]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b41      	ldr	r3, [pc, #260]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e16:	4949      	ldr	r1, [pc, #292]	; (8000f3c <HAL_RCC_OscConfig+0x34c>)
 8000e18:	400a      	ands	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fc32 	bl	8000684 <HAL_GetTick>
 8000e20:	0003      	movs	r3, r0
 8000e22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e24:	e008      	b.n	8000e38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e26:	f7ff fc2d 	bl	8000684 <HAL_GetTick>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e1e3      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e38:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	4013      	ands	r3, r2
 8000e42:	d1f0      	bne.n	8000e26 <HAL_RCC_OscConfig+0x236>
 8000e44:	e000      	b.n	8000e48 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d047      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000e52:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2238      	movs	r2, #56	; 0x38
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b18      	cmp	r3, #24
 8000e5c:	d10a      	bne.n	8000e74 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e62:	2202      	movs	r2, #2
 8000e64:	4013      	ands	r3, r2
 8000e66:	d03c      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x2f2>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d138      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e1c5      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d019      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e80:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e82:	2101      	movs	r1, #1
 8000e84:	430a      	orrs	r2, r1
 8000e86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e88:	f7ff fbfc 	bl	8000684 <HAL_GetTick>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e92:	f7ff fbf7 	bl	8000684 <HAL_GetTick>
 8000e96:	0002      	movs	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e1ad      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d0f1      	beq.n	8000e92 <HAL_RCC_OscConfig+0x2a2>
 8000eae:	e018      	b.n	8000ee2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000eb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	438a      	bics	r2, r1
 8000eba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fbe2 	bl	8000684 <HAL_GetTick>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec6:	f7ff fbdd 	bl	8000684 <HAL_GetTick>
 8000eca:	0002      	movs	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e193      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000edc:	2202      	movs	r2, #2
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d1f1      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d100      	bne.n	8000eee <HAL_RCC_OscConfig+0x2fe>
 8000eec:	e0c6      	b.n	800107c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eee:	231f      	movs	r3, #31
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2238      	movs	r2, #56	; 0x38
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b20      	cmp	r3, #32
 8000f00:	d11e      	bne.n	8000f40 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f06:	2202      	movs	r2, #2
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d100      	bne.n	8000f0e <HAL_RCC_OscConfig+0x31e>
 8000f0c:	e0b6      	b.n	800107c <HAL_RCC_OscConfig+0x48c>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d000      	beq.n	8000f18 <HAL_RCC_OscConfig+0x328>
 8000f16:	e0b1      	b.n	800107c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e171      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	fffeffff 	.word	0xfffeffff
 8000f24:	fffbffff 	.word	0xfffbffff
 8000f28:	ffff80ff 	.word	0xffff80ff
 8000f2c:	ffffc7ff 	.word	0xffffc7ff
 8000f30:	00f42400 	.word	0x00f42400
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000004 	.word	0x20000004
 8000f3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f40:	4bb1      	ldr	r3, [pc, #708]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	055b      	lsls	r3, r3, #21
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d101      	bne.n	8000f50 <HAL_RCC_OscConfig+0x360>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <HAL_RCC_OscConfig+0x362>
 8000f50:	2300      	movs	r3, #0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d011      	beq.n	8000f7a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	4bac      	ldr	r3, [pc, #688]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5a:	4bab      	ldr	r3, [pc, #684]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	0549      	lsls	r1, r1, #21
 8000f60:	430a      	orrs	r2, r1
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f64:	4ba8      	ldr	r3, [pc, #672]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	055b      	lsls	r3, r3, #21
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000f72:	231f      	movs	r3, #31
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f7a:	4ba4      	ldr	r3, [pc, #656]	; (800120c <HAL_RCC_OscConfig+0x61c>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4013      	ands	r3, r2
 8000f84:	d11a      	bne.n	8000fbc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f86:	4ba1      	ldr	r3, [pc, #644]	; (800120c <HAL_RCC_OscConfig+0x61c>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4ba0      	ldr	r3, [pc, #640]	; (800120c <HAL_RCC_OscConfig+0x61c>)
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	0049      	lsls	r1, r1, #1
 8000f90:	430a      	orrs	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fb76 	bl	8000684 <HAL_GetTick>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f9e:	f7ff fb71 	bl	8000684 <HAL_GetTick>
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e127      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fb0:	4b96      	ldr	r3, [pc, #600]	; (800120c <HAL_RCC_OscConfig+0x61c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d0f0      	beq.n	8000f9e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d106      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x3e2>
 8000fc4:	4b90      	ldr	r3, [pc, #576]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000fc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fc8:	4b8f      	ldr	r3, [pc, #572]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fd0:	e01c      	b.n	800100c <HAL_RCC_OscConfig+0x41c>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x404>
 8000fda:	4b8b      	ldr	r3, [pc, #556]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000fdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fde:	4b8a      	ldr	r3, [pc, #552]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fe6:	4b88      	ldr	r3, [pc, #544]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000fe8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fea:	4b87      	ldr	r3, [pc, #540]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	65da      	str	r2, [r3, #92]	; 0x5c
 8000ff2:	e00b      	b.n	800100c <HAL_RCC_OscConfig+0x41c>
 8000ff4:	4b84      	ldr	r3, [pc, #528]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000ff6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ff8:	4b83      	ldr	r3, [pc, #524]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001000:	4b81      	ldr	r3, [pc, #516]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001002:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001004:	4b80      	ldr	r3, [pc, #512]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001006:	2104      	movs	r1, #4
 8001008:	438a      	bics	r2, r1
 800100a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d014      	beq.n	800103e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001014:	f7ff fb36 	bl	8000684 <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800101c:	e009      	b.n	8001032 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800101e:	f7ff fb31 	bl	8000684 <HAL_GetTick>
 8001022:	0002      	movs	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	4a79      	ldr	r2, [pc, #484]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e0e6      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001032:	4b75      	ldr	r3, [pc, #468]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001036:	2202      	movs	r2, #2
 8001038:	4013      	ands	r3, r2
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x42e>
 800103c:	e013      	b.n	8001066 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103e:	f7ff fb21 	bl	8000684 <HAL_GetTick>
 8001042:	0003      	movs	r3, r0
 8001044:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001046:	e009      	b.n	800105c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001048:	f7ff fb1c 	bl	8000684 <HAL_GetTick>
 800104c:	0002      	movs	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	4a6f      	ldr	r2, [pc, #444]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e0d1      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800105c:	4b6a      	ldr	r3, [pc, #424]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 800105e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001060:	2202      	movs	r2, #2
 8001062:	4013      	ands	r3, r2
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001066:	231f      	movs	r3, #31
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d105      	bne.n	800107c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001070:	4b65      	ldr	r3, [pc, #404]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001074:	4b64      	ldr	r3, [pc, #400]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001076:	4967      	ldr	r1, [pc, #412]	; (8001214 <HAL_RCC_OscConfig+0x624>)
 8001078:	400a      	ands	r2, r1
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d100      	bne.n	8001086 <HAL_RCC_OscConfig+0x496>
 8001084:	e0bb      	b.n	80011fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001086:	4b60      	ldr	r3, [pc, #384]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2238      	movs	r2, #56	; 0x38
 800108c:	4013      	ands	r3, r2
 800108e:	2b10      	cmp	r3, #16
 8001090:	d100      	bne.n	8001094 <HAL_RCC_OscConfig+0x4a4>
 8001092:	e07b      	b.n	800118c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d156      	bne.n	800114a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109c:	4b5a      	ldr	r3, [pc, #360]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b59      	ldr	r3, [pc, #356]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 80010a2:	495d      	ldr	r1, [pc, #372]	; (8001218 <HAL_RCC_OscConfig+0x628>)
 80010a4:	400a      	ands	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a8:	f7ff faec 	bl	8000684 <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b2:	f7ff fae7 	bl	8000684 <HAL_GetTick>
 80010b6:	0002      	movs	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e09d      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010c4:	4b50      	ldr	r3, [pc, #320]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	049b      	lsls	r3, r3, #18
 80010cc:	4013      	ands	r3, r2
 80010ce:	d1f0      	bne.n	80010b2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d0:	4b4d      	ldr	r3, [pc, #308]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <HAL_RCC_OscConfig+0x62c>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	0019      	movs	r1, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a1a      	ldr	r2, [r3, #32]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	431a      	orrs	r2, r3
 80010fe:	4b42      	ldr	r3, [pc, #264]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001100:	430a      	orrs	r2, r1
 8001102:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001104:	4b40      	ldr	r3, [pc, #256]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b3f      	ldr	r3, [pc, #252]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 800110a:	2180      	movs	r1, #128	; 0x80
 800110c:	0449      	lsls	r1, r1, #17
 800110e:	430a      	orrs	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	0549      	lsls	r1, r1, #21
 800111c:	430a      	orrs	r2, r1
 800111e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fab0 	bl	8000684 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112a:	f7ff faab 	bl	8000684 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e061      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800113c:	4b32      	ldr	r3, [pc, #200]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	049b      	lsls	r3, r3, #18
 8001144:	4013      	ands	r3, r2
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x53a>
 8001148:	e059      	b.n	80011fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114a:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001150:	4931      	ldr	r1, [pc, #196]	; (8001218 <HAL_RCC_OscConfig+0x628>)
 8001152:	400a      	ands	r2, r1
 8001154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001156:	f7ff fa95 	bl	8000684 <HAL_GetTick>
 800115a:	0003      	movs	r3, r0
 800115c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001160:	f7ff fa90 	bl	8000684 <HAL_GetTick>
 8001164:	0002      	movs	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e046      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	049b      	lsls	r3, r3, #18
 800117a:	4013      	ands	r3, r2
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 8001184:	4926      	ldr	r1, [pc, #152]	; (8001220 <HAL_RCC_OscConfig+0x630>)
 8001186:	400a      	ands	r2, r1
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	e038      	b.n	80011fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e033      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_RCC_OscConfig+0x618>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2203      	movs	r2, #3
 80011a2:	401a      	ands	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d126      	bne.n	80011fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2270      	movs	r2, #112	; 0x70
 80011b0:	401a      	ands	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d11f      	bne.n	80011fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	23fe      	movs	r3, #254	; 0xfe
 80011be:	01db      	lsls	r3, r3, #7
 80011c0:	401a      	ands	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d116      	bne.n	80011fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	23f8      	movs	r3, #248	; 0xf8
 80011d0:	039b      	lsls	r3, r3, #14
 80011d2:	401a      	ands	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011d8:	429a      	cmp	r2, r3
 80011da:	d10e      	bne.n	80011fa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	23e0      	movs	r3, #224	; 0xe0
 80011e0:	051b      	lsls	r3, r3, #20
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d106      	bne.n	80011fa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	0f5b      	lsrs	r3, r3, #29
 80011f0:	075a      	lsls	r2, r3, #29
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b008      	add	sp, #32
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000
 800120c:	40007000 	.word	0x40007000
 8001210:	00001388 	.word	0x00001388
 8001214:	efffffff 	.word	0xefffffff
 8001218:	feffffff 	.word	0xfeffffff
 800121c:	11c1808c 	.word	0x11c1808c
 8001220:	eefefffc 	.word	0xeefefffc

08001224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0e9      	b.n	800140c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001238:	4b76      	ldr	r3, [pc, #472]	; (8001414 <HAL_RCC_ClockConfig+0x1f0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2207      	movs	r2, #7
 800123e:	4013      	ands	r3, r2
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d91e      	bls.n	8001284 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001246:	4b73      	ldr	r3, [pc, #460]	; (8001414 <HAL_RCC_ClockConfig+0x1f0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2207      	movs	r2, #7
 800124c:	4393      	bics	r3, r2
 800124e:	0019      	movs	r1, r3
 8001250:	4b70      	ldr	r3, [pc, #448]	; (8001414 <HAL_RCC_ClockConfig+0x1f0>)
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001258:	f7ff fa14 	bl	8000684 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001260:	e009      	b.n	8001276 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001262:	f7ff fa0f 	bl	8000684 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	4a6a      	ldr	r2, [pc, #424]	; (8001418 <HAL_RCC_ClockConfig+0x1f4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e0ca      	b.n	800140c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001276:	4b67      	ldr	r3, [pc, #412]	; (8001414 <HAL_RCC_ClockConfig+0x1f0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2207      	movs	r2, #7
 800127c:	4013      	ands	r3, r2
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d1ee      	bne.n	8001262 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2202      	movs	r2, #2
 800128a:	4013      	ands	r3, r2
 800128c:	d015      	beq.n	80012ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2204      	movs	r2, #4
 8001294:	4013      	ands	r3, r2
 8001296:	d006      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001298:	4b60      	ldr	r3, [pc, #384]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	4b5f      	ldr	r3, [pc, #380]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 800129e:	21e0      	movs	r1, #224	; 0xe0
 80012a0:	01c9      	lsls	r1, r1, #7
 80012a2:	430a      	orrs	r2, r1
 80012a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a6:	4b5d      	ldr	r3, [pc, #372]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	4a5d      	ldr	r2, [pc, #372]	; (8001420 <HAL_RCC_ClockConfig+0x1fc>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	4b59      	ldr	r3, [pc, #356]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 80012b6:	430a      	orrs	r2, r1
 80012b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2201      	movs	r2, #1
 80012c0:	4013      	ands	r3, r2
 80012c2:	d057      	beq.n	8001374 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d107      	bne.n	80012dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012cc:	4b53      	ldr	r3, [pc, #332]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	029b      	lsls	r3, r3, #10
 80012d4:	4013      	ands	r3, r2
 80012d6:	d12b      	bne.n	8001330 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e097      	b.n	800140c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d107      	bne.n	80012f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012e4:	4b4d      	ldr	r3, [pc, #308]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	049b      	lsls	r3, r3, #18
 80012ec:	4013      	ands	r3, r2
 80012ee:	d11f      	bne.n	8001330 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e08b      	b.n	800140c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d107      	bne.n	800130c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012fc:	4b47      	ldr	r3, [pc, #284]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4013      	ands	r3, r2
 8001306:	d113      	bne.n	8001330 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e07f      	b.n	800140c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d106      	bne.n	8001322 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001314:	4b41      	ldr	r3, [pc, #260]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 8001316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001318:	2202      	movs	r2, #2
 800131a:	4013      	ands	r3, r2
 800131c:	d108      	bne.n	8001330 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e074      	b.n	800140c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 8001324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001326:	2202      	movs	r2, #2
 8001328:	4013      	ands	r3, r2
 800132a:	d101      	bne.n	8001330 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e06d      	b.n	800140c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001330:	4b3a      	ldr	r3, [pc, #232]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2207      	movs	r2, #7
 8001336:	4393      	bics	r3, r2
 8001338:	0019      	movs	r1, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4b37      	ldr	r3, [pc, #220]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 8001340:	430a      	orrs	r2, r1
 8001342:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001344:	f7ff f99e 	bl	8000684 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134c:	e009      	b.n	8001362 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134e:	f7ff f999 	bl	8000684 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <HAL_RCC_ClockConfig+0x1f4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e054      	b.n	800140c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2238      	movs	r2, #56	; 0x38
 8001368:	401a      	ands	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	429a      	cmp	r2, r3
 8001372:	d1ec      	bne.n	800134e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_RCC_ClockConfig+0x1f0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2207      	movs	r2, #7
 800137a:	4013      	ands	r3, r2
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d21e      	bcs.n	80013c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_ClockConfig+0x1f0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2207      	movs	r2, #7
 8001388:	4393      	bics	r3, r2
 800138a:	0019      	movs	r1, r3
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <HAL_RCC_ClockConfig+0x1f0>)
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001394:	f7ff f976 	bl	8000684 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800139c:	e009      	b.n	80013b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800139e:	f7ff f971 	bl	8000684 <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_RCC_ClockConfig+0x1f4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e02c      	b.n	800140c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_RCC_ClockConfig+0x1f0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2207      	movs	r2, #7
 80013b8:	4013      	ands	r3, r2
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d1ee      	bne.n	800139e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2204      	movs	r2, #4
 80013c6:	4013      	ands	r3, r2
 80013c8:	d009      	beq.n	80013de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_RCC_ClockConfig+0x200>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	0019      	movs	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 80013da:	430a      	orrs	r2, r1
 80013dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80013de:	f000 f829 	bl	8001434 <HAL_RCC_GetSysClockFreq>
 80013e2:	0001      	movs	r1, r0
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_RCC_ClockConfig+0x1f8>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	220f      	movs	r2, #15
 80013ec:	401a      	ands	r2, r3
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_RCC_ClockConfig+0x204>)
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	58d3      	ldr	r3, [r2, r3]
 80013f4:	221f      	movs	r2, #31
 80013f6:	4013      	ands	r3, r2
 80013f8:	000a      	movs	r2, r1
 80013fa:	40da      	lsrs	r2, r3
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_ClockConfig+0x208>)
 80013fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_ClockConfig+0x20c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff f86d 	bl	80004e4 <HAL_InitTick>
 800140a:	0003      	movs	r3, r0
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b004      	add	sp, #16
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40022000 	.word	0x40022000
 8001418:	00001388 	.word	0x00001388
 800141c:	40021000 	.word	0x40021000
 8001420:	fffff0ff 	.word	0xfffff0ff
 8001424:	ffff8fff 	.word	0xffff8fff
 8001428:	08003b88 	.word	0x08003b88
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800143a:	4b3c      	ldr	r3, [pc, #240]	; (800152c <HAL_RCC_GetSysClockFreq+0xf8>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2238      	movs	r2, #56	; 0x38
 8001440:	4013      	ands	r3, r2
 8001442:	d10f      	bne.n	8001464 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0adb      	lsrs	r3, r3, #11
 800144a:	2207      	movs	r2, #7
 800144c:	4013      	ands	r3, r2
 800144e:	2201      	movs	r2, #1
 8001450:	409a      	lsls	r2, r3
 8001452:	0013      	movs	r3, r2
 8001454:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	4835      	ldr	r0, [pc, #212]	; (8001530 <HAL_RCC_GetSysClockFreq+0xfc>)
 800145a:	f7fe fe55 	bl	8000108 <__udivsi3>
 800145e:	0003      	movs	r3, r0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	e05d      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001464:	4b31      	ldr	r3, [pc, #196]	; (800152c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2238      	movs	r2, #56	; 0x38
 800146a:	4013      	ands	r3, r2
 800146c:	2b08      	cmp	r3, #8
 800146e:	d102      	bne.n	8001476 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001470:	4b30      	ldr	r3, [pc, #192]	; (8001534 <HAL_RCC_GetSysClockFreq+0x100>)
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	e054      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001476:	4b2d      	ldr	r3, [pc, #180]	; (800152c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2238      	movs	r2, #56	; 0x38
 800147c:	4013      	ands	r3, r2
 800147e:	2b10      	cmp	r3, #16
 8001480:	d138      	bne.n	80014f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2203      	movs	r2, #3
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_RCC_GetSysClockFreq+0xf8>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	2207      	movs	r2, #7
 8001494:	4013      	ands	r3, r2
 8001496:	3301      	adds	r3, #1
 8001498:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d10d      	bne.n	80014bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	4824      	ldr	r0, [pc, #144]	; (8001534 <HAL_RCC_GetSysClockFreq+0x100>)
 80014a4:	f7fe fe30 	bl	8000108 <__udivsi3>
 80014a8:	0003      	movs	r3, r0
 80014aa:	0019      	movs	r1, r3
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	227f      	movs	r2, #127	; 0x7f
 80014b4:	4013      	ands	r3, r2
 80014b6:	434b      	muls	r3, r1
 80014b8:	617b      	str	r3, [r7, #20]
        break;
 80014ba:	e00d      	b.n	80014d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	481c      	ldr	r0, [pc, #112]	; (8001530 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014c0:	f7fe fe22 	bl	8000108 <__udivsi3>
 80014c4:	0003      	movs	r3, r0
 80014c6:	0019      	movs	r1, r3
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	227f      	movs	r2, #127	; 0x7f
 80014d0:	4013      	ands	r3, r2
 80014d2:	434b      	muls	r3, r1
 80014d4:	617b      	str	r3, [r7, #20]
        break;
 80014d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0f5b      	lsrs	r3, r3, #29
 80014de:	2207      	movs	r2, #7
 80014e0:	4013      	ands	r3, r2
 80014e2:	3301      	adds	r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	6978      	ldr	r0, [r7, #20]
 80014ea:	f7fe fe0d 	bl	8000108 <__udivsi3>
 80014ee:	0003      	movs	r3, r0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	e015      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2238      	movs	r2, #56	; 0x38
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b20      	cmp	r3, #32
 80014fe:	d103      	bne.n	8001508 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_RCC_GetSysClockFreq+0xf8>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2238      	movs	r2, #56	; 0x38
 800150e:	4013      	ands	r3, r2
 8001510:	2b18      	cmp	r3, #24
 8001512:	d103      	bne.n	800151c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001514:	23fa      	movs	r3, #250	; 0xfa
 8001516:	01db      	lsls	r3, r3, #7
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	e001      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001520:	693b      	ldr	r3, [r7, #16]
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	b006      	add	sp, #24
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	40021000 	.word	0x40021000
 8001530:	00f42400 	.word	0x00f42400
 8001534:	007a1200 	.word	0x007a1200

08001538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800153c:	4b02      	ldr	r3, [pc, #8]	; (8001548 <HAL_RCC_GetHCLKFreq+0x10>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	20000000 	.word	0x20000000

0800154c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001550:	f7ff fff2 	bl	8001538 <HAL_RCC_GetHCLKFreq>
 8001554:	0004      	movs	r4, r0
 8001556:	f7ff fb3f 	bl	8000bd8 <LL_RCC_GetAPB1Prescaler>
 800155a:	0003      	movs	r3, r0
 800155c:	0b1a      	lsrs	r2, r3, #12
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	58d3      	ldr	r3, [r2, r3]
 8001564:	221f      	movs	r2, #31
 8001566:	4013      	ands	r3, r2
 8001568:	40dc      	lsrs	r4, r3
 800156a:	0023      	movs	r3, r4
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bdb0      	pop	{r4, r5, r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	08003bc8 	.word	0x08003bc8

08001578 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_RCC_GetClockConfig+0x4c>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2207      	movs	r2, #7
 800158e:	401a      	ands	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_GetClockConfig+0x4c>)
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	23f0      	movs	r3, #240	; 0xf0
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	401a      	ands	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_RCC_GetClockConfig+0x4c>)
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	23e0      	movs	r3, #224	; 0xe0
 80015a8:	01db      	lsls	r3, r3, #7
 80015aa:	401a      	ands	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_RCC_GetClockConfig+0x50>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2207      	movs	r2, #7
 80015b6:	401a      	ands	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	601a      	str	r2, [r3, #0]
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40022000 	.word	0x40022000

080015cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e04a      	b.n	8001674 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	223d      	movs	r2, #61	; 0x3d
 80015e2:	5c9b      	ldrb	r3, [r3, r2]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	223c      	movs	r2, #60	; 0x3c
 80015ee:	2100      	movs	r1, #0
 80015f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 f841 	bl	800167c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	223d      	movs	r2, #61	; 0x3d
 80015fe:	2102      	movs	r1, #2
 8001600:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	0019      	movs	r1, r3
 800160c:	0010      	movs	r0, r2
 800160e:	f000 f9eb 	bl	80019e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2248      	movs	r2, #72	; 0x48
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	223e      	movs	r2, #62	; 0x3e
 800161e:	2101      	movs	r1, #1
 8001620:	5499      	strb	r1, [r3, r2]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	223f      	movs	r2, #63	; 0x3f
 8001626:	2101      	movs	r1, #1
 8001628:	5499      	strb	r1, [r3, r2]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2240      	movs	r2, #64	; 0x40
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2241      	movs	r2, #65	; 0x41
 8001636:	2101      	movs	r1, #1
 8001638:	5499      	strb	r1, [r3, r2]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2242      	movs	r2, #66	; 0x42
 800163e:	2101      	movs	r1, #1
 8001640:	5499      	strb	r1, [r3, r2]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2243      	movs	r2, #67	; 0x43
 8001646:	2101      	movs	r1, #1
 8001648:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2244      	movs	r2, #68	; 0x44
 800164e:	2101      	movs	r1, #1
 8001650:	5499      	strb	r1, [r3, r2]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2245      	movs	r2, #69	; 0x45
 8001656:	2101      	movs	r1, #1
 8001658:	5499      	strb	r1, [r3, r2]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2246      	movs	r2, #70	; 0x46
 800165e:	2101      	movs	r1, #1
 8001660:	5499      	strb	r1, [r3, r2]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2247      	movs	r2, #71	; 0x47
 8001666:	2101      	movs	r1, #1
 8001668:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	223d      	movs	r2, #61	; 0x3d
 800166e:	2101      	movs	r1, #1
 8001670:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	223d      	movs	r2, #61	; 0x3d
 8001698:	5c9b      	ldrb	r3, [r3, r2]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d001      	beq.n	80016a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e042      	b.n	800172a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	223d      	movs	r2, #61	; 0x3d
 80016a8:	2102      	movs	r1, #2
 80016aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2101      	movs	r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <HAL_TIM_Base_Start_IT+0xa8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00f      	beq.n	80016e6 <HAL_TIM_Base_Start_IT+0x5a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d009      	beq.n	80016e6 <HAL_TIM_Base_Start_IT+0x5a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a18      	ldr	r2, [pc, #96]	; (8001738 <HAL_TIM_Base_Start_IT+0xac>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d004      	beq.n	80016e6 <HAL_TIM_Base_Start_IT+0x5a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a16      	ldr	r2, [pc, #88]	; (800173c <HAL_TIM_Base_Start_IT+0xb0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d116      	bne.n	8001714 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_TIM_Base_Start_IT+0xb4>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b06      	cmp	r3, #6
 80016f6:	d016      	beq.n	8001726 <HAL_TIM_Base_Start_IT+0x9a>
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	025b      	lsls	r3, r3, #9
 80016fe:	429a      	cmp	r2, r3
 8001700:	d011      	beq.n	8001726 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001712:	e008      	b.n	8001726 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2101      	movs	r1, #1
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e000      	b.n	8001728 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001726:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b004      	add	sp, #16
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	40012c00 	.word	0x40012c00
 8001738:	40000400 	.word	0x40000400
 800173c:	40014000 	.word	0x40014000
 8001740:	00010007 	.word	0x00010007

08001744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2202      	movs	r2, #2
 8001754:	4013      	ands	r3, r2
 8001756:	2b02      	cmp	r3, #2
 8001758:	d124      	bne.n	80017a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	2b02      	cmp	r3, #2
 8001766:	d11d      	bne.n	80017a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2203      	movs	r2, #3
 800176e:	4252      	negs	r2, r2
 8001770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2203      	movs	r2, #3
 8001780:	4013      	ands	r3, r2
 8001782:	d004      	beq.n	800178e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	0018      	movs	r0, r3
 8001788:	f000 f916 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 800178c:	e007      	b.n	800179e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f000 f909 	bl	80019a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	0018      	movs	r0, r3
 800179a:	f000 f915 	bl	80019c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	2204      	movs	r2, #4
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d125      	bne.n	80017fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2204      	movs	r2, #4
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d11e      	bne.n	80017fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2205      	movs	r2, #5
 80017c6:	4252      	negs	r2, r2
 80017c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2202      	movs	r2, #2
 80017ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	23c0      	movs	r3, #192	; 0xc0
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d004      	beq.n	80017e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f000 f8e9 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 80017e6:	e007      	b.n	80017f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 f8dc 	bl	80019a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 f8e8 	bl	80019c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2208      	movs	r2, #8
 8001806:	4013      	ands	r3, r2
 8001808:	2b08      	cmp	r3, #8
 800180a:	d124      	bne.n	8001856 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2208      	movs	r2, #8
 8001814:	4013      	ands	r3, r2
 8001816:	2b08      	cmp	r3, #8
 8001818:	d11d      	bne.n	8001856 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2209      	movs	r2, #9
 8001820:	4252      	negs	r2, r2
 8001822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2204      	movs	r2, #4
 8001828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	2203      	movs	r2, #3
 8001832:	4013      	ands	r3, r2
 8001834:	d004      	beq.n	8001840 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	0018      	movs	r0, r3
 800183a:	f000 f8bd 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 800183e:	e007      	b.n	8001850 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	0018      	movs	r0, r3
 8001844:	f000 f8b0 	bl	80019a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	0018      	movs	r0, r3
 800184c:	f000 f8bc 	bl	80019c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2210      	movs	r2, #16
 800185e:	4013      	ands	r3, r2
 8001860:	2b10      	cmp	r3, #16
 8001862:	d125      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2210      	movs	r2, #16
 800186c:	4013      	ands	r3, r2
 800186e:	2b10      	cmp	r3, #16
 8001870:	d11e      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2211      	movs	r2, #17
 8001878:	4252      	negs	r2, r2
 800187a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2208      	movs	r2, #8
 8001880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69da      	ldr	r2, [r3, #28]
 8001888:	23c0      	movs	r3, #192	; 0xc0
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d004      	beq.n	800189a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	0018      	movs	r0, r3
 8001894:	f000 f890 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 8001898:	e007      	b.n	80018aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	0018      	movs	r0, r3
 800189e:	f000 f883 	bl	80019a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	0018      	movs	r0, r3
 80018a6:	f000 f88f 	bl	80019c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d10f      	bne.n	80018de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d108      	bne.n	80018de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2202      	movs	r2, #2
 80018d2:	4252      	negs	r2, r2
 80018d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	0018      	movs	r0, r3
 80018da:	f7fe fdc3 	bl	8000464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b80      	cmp	r3, #128	; 0x80
 80018ea:	d10f      	bne.n	800190c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2280      	movs	r2, #128	; 0x80
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b80      	cmp	r3, #128	; 0x80
 80018f8:	d108      	bne.n	800190c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2281      	movs	r2, #129	; 0x81
 8001900:	4252      	negs	r2, r2
 8001902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	0018      	movs	r0, r3
 8001908:	f000 f8f6 	bl	8001af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	401a      	ands	r2, r3
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	429a      	cmp	r2, r3
 800191e:	d10e      	bne.n	800193e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	4013      	ands	r3, r2
 800192a:	2b80      	cmp	r3, #128	; 0x80
 800192c:	d107      	bne.n	800193e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <HAL_TIM_IRQHandler+0x260>)
 8001934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0018      	movs	r0, r3
 800193a:	f000 f8e5 	bl	8001b08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	2240      	movs	r2, #64	; 0x40
 8001946:	4013      	ands	r3, r2
 8001948:	2b40      	cmp	r3, #64	; 0x40
 800194a:	d10f      	bne.n	800196c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2240      	movs	r2, #64	; 0x40
 8001954:	4013      	ands	r3, r2
 8001956:	2b40      	cmp	r3, #64	; 0x40
 8001958:	d108      	bne.n	800196c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2241      	movs	r2, #65	; 0x41
 8001960:	4252      	negs	r2, r2
 8001962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0018      	movs	r0, r3
 8001968:	f000 f836 	bl	80019d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2220      	movs	r2, #32
 8001974:	4013      	ands	r3, r2
 8001976:	2b20      	cmp	r3, #32
 8001978:	d10f      	bne.n	800199a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2220      	movs	r2, #32
 8001982:	4013      	ands	r3, r2
 8001984:	2b20      	cmp	r3, #32
 8001986:	d108      	bne.n	800199a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2221      	movs	r2, #33	; 0x21
 800198e:	4252      	negs	r2, r2
 8001990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	0018      	movs	r0, r3
 8001996:	f000 f8a7 	bl	8001ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	fffffeff 	.word	0xfffffeff

080019a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b002      	add	sp, #8
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019d0:	46c0      	nop			; (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b002      	add	sp, #8
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a34      	ldr	r2, [pc, #208]	; (8001acc <TIM_Base_SetConfig+0xe4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d008      	beq.n	8001a12 <TIM_Base_SetConfig+0x2a>
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	05db      	lsls	r3, r3, #23
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d003      	beq.n	8001a12 <TIM_Base_SetConfig+0x2a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a30      	ldr	r2, [pc, #192]	; (8001ad0 <TIM_Base_SetConfig+0xe8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d108      	bne.n	8001a24 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2270      	movs	r2, #112	; 0x70
 8001a16:	4393      	bics	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a29      	ldr	r2, [pc, #164]	; (8001acc <TIM_Base_SetConfig+0xe4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d018      	beq.n	8001a5e <TIM_Base_SetConfig+0x76>
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	05db      	lsls	r3, r3, #23
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d013      	beq.n	8001a5e <TIM_Base_SetConfig+0x76>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <TIM_Base_SetConfig+0xe8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00f      	beq.n	8001a5e <TIM_Base_SetConfig+0x76>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <TIM_Base_SetConfig+0xec>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00b      	beq.n	8001a5e <TIM_Base_SetConfig+0x76>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <TIM_Base_SetConfig+0xf0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d007      	beq.n	8001a5e <TIM_Base_SetConfig+0x76>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a22      	ldr	r2, [pc, #136]	; (8001adc <TIM_Base_SetConfig+0xf4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d003      	beq.n	8001a5e <TIM_Base_SetConfig+0x76>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a21      	ldr	r2, [pc, #132]	; (8001ae0 <TIM_Base_SetConfig+0xf8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d108      	bne.n	8001a70 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <TIM_Base_SetConfig+0xfc>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	4393      	bics	r3, r2
 8001a76:	001a      	movs	r2, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <TIM_Base_SetConfig+0xe4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00b      	beq.n	8001ab6 <TIM_Base_SetConfig+0xce>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <TIM_Base_SetConfig+0xf0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d007      	beq.n	8001ab6 <TIM_Base_SetConfig+0xce>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <TIM_Base_SetConfig+0xf4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d003      	beq.n	8001ab6 <TIM_Base_SetConfig+0xce>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <TIM_Base_SetConfig+0xf8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d103      	bne.n	8001abe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	615a      	str	r2, [r3, #20]
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b004      	add	sp, #16
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40012c00 	.word	0x40012c00
 8001ad0:	40000400 	.word	0x40000400
 8001ad4:	40002000 	.word	0x40002000
 8001ad8:	40014000 	.word	0x40014000
 8001adc:	40014400 	.word	0x40014400
 8001ae0:	40014800 	.word	0x40014800
 8001ae4:	fffffcff 	.word	0xfffffcff

08001ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b002      	add	sp, #8
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b002      	add	sp, #8
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3308      	adds	r3, #8
 8001b24:	001a      	movs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4252      	negs	r2, r2
 8001b30:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3308      	adds	r3, #8
 8001b36:	001a      	movs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3308      	adds	r3, #8
 8001b40:	001a      	movs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b002      	add	sp, #8
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b002      	add	sp, #8
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	d103      	bne.n	8001b88 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	e00c      	b.n	8001ba2 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3308      	adds	r3, #8
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e002      	b.n	8001b96 <vListInsert+0x2c>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d2f6      	bcs.n	8001b90 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	601a      	str	r2, [r3, #0]
}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b004      	add	sp, #16
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6892      	ldr	r2, [r2, #8]
 8001bec:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6852      	ldr	r2, [r2, #4]
 8001bf6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d103      	bne.n	8001c0a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b004      	add	sp, #16
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001c26:	b5b0      	push	{r4, r5, r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001c30:	2301      	movs	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <xQueueGenericReset+0x1c>
 8001c3e:	b672      	cpsid	i
 8001c40:	e7fe      	b.n	8001c40 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d100      	bne.n	8001c4a <xQueueGenericReset+0x24>
 8001c48:	e06a      	b.n	8001d20 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d066      	beq.n	8001d20 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5a:	2400      	movs	r4, #0
 8001c5c:	0c15      	lsrs	r5, r2, #16
 8001c5e:	0c19      	lsrs	r1, r3, #16
 8001c60:	b2a8      	uxth	r0, r5
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d104      	bne.n	8001c70 <xQueueGenericReset+0x4a>
 8001c66:	b288      	uxth	r0, r1
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d013      	beq.n	8001c94 <xQueueGenericReset+0x6e>
 8001c6c:	1c10      	adds	r0, r2, #0
 8001c6e:	e004      	b.n	8001c7a <xQueueGenericReset+0x54>
 8001c70:	b289      	uxth	r1, r1
 8001c72:	2900      	cmp	r1, #0
 8001c74:	d10d      	bne.n	8001c92 <xQueueGenericReset+0x6c>
 8001c76:	1c29      	adds	r1, r5, #0
 8001c78:	1c18      	adds	r0, r3, #0
 8001c7a:	b292      	uxth	r2, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	435a      	muls	r2, r3
 8001c80:	b283      	uxth	r3, r0
 8001c82:	b289      	uxth	r1, r1
 8001c84:	434b      	muls	r3, r1
 8001c86:	0c12      	lsrs	r2, r2, #16
 8001c88:	189b      	adds	r3, r3, r2
 8001c8a:	141b      	asrs	r3, r3, #16
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d000      	beq.n	8001c94 <xQueueGenericReset+0x6e>
 8001c92:	2401      	movs	r4, #1
 8001c94:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8001c96:	d143      	bne.n	8001d20 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8001c98:	f001 fce2 	bl	8003660 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	434b      	muls	r3, r1
 8001caa:	18d2      	adds	r2, r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc6:	1e59      	subs	r1, r3, #1
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	434b      	muls	r3, r1
 8001cce:	18d2      	adds	r2, r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2244      	movs	r2, #68	; 0x44
 8001cd8:	21ff      	movs	r1, #255	; 0xff
 8001cda:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2245      	movs	r2, #69	; 0x45
 8001ce0:	21ff      	movs	r1, #255	; 0xff
 8001ce2:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10d      	bne.n	8001d06 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d013      	beq.n	8001d1a <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	3310      	adds	r3, #16
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 ff1e 	bl	8002b38 <xTaskRemoveFromEventList>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d00c      	beq.n	8001d1a <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001d00:	f001 fc9e 	bl	8003640 <vPortYield>
 8001d04:	e009      	b.n	8001d1a <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3310      	adds	r3, #16
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7ff ff04 	bl	8001b18 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	3324      	adds	r3, #36	; 0x24
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff feff 	bl	8001b18 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001d1a:	f001 fcb3 	bl	8003684 <vPortExitCritical>
 8001d1e:	e001      	b.n	8001d24 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <xQueueGenericReset+0x108>
 8001d2a:	b672      	cpsid	i
 8001d2c:	e7fe      	b.n	8001d2c <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b004      	add	sp, #16
 8001d36:	bdb0      	pop	{r4, r5, r7, pc}

08001d38 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	b08b      	sub	sp, #44	; 0x2c
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d047      	beq.n	8001de0 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001d50:	2000      	movs	r0, #0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	0c19      	lsrs	r1, r3, #16
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1c1e      	adds	r6, r3, #0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	1c15      	adds	r5, r2, #0
 8001d62:	b28a      	uxth	r2, r1
 8001d64:	2a00      	cmp	r2, #0
 8001d66:	d105      	bne.n	8001d74 <xQueueGenericCreate+0x3c>
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d013      	beq.n	8001d96 <xQueueGenericCreate+0x5e>
 8001d6e:	1c19      	adds	r1, r3, #0
 8001d70:	1c34      	adds	r4, r6, #0
 8001d72:	e003      	b.n	8001d7c <xQueueGenericCreate+0x44>
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10c      	bne.n	8001d94 <xQueueGenericCreate+0x5c>
 8001d7a:	1c2c      	adds	r4, r5, #0
 8001d7c:	b2b3      	uxth	r3, r6
 8001d7e:	b2aa      	uxth	r2, r5
 8001d80:	435a      	muls	r2, r3
 8001d82:	b2a3      	uxth	r3, r4
 8001d84:	b289      	uxth	r1, r1
 8001d86:	434b      	muls	r3, r1
 8001d88:	0c12      	lsrs	r2, r2, #16
 8001d8a:	189b      	adds	r3, r3, r2
 8001d8c:	141b      	asrs	r3, r3, #16
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d000      	beq.n	8001d96 <xQueueGenericCreate+0x5e>
 8001d94:	2001      	movs	r0, #1
 8001d96:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001d98:	d122      	bne.n	8001de0 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001da0:	3351      	adds	r3, #81	; 0x51
 8001da2:	d81d      	bhi.n	8001de0 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	4353      	muls	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	3350      	adds	r3, #80	; 0x50
 8001db0:	0018      	movs	r0, r3
 8001db2:	f001 fced 	bl	8003790 <pvPortMalloc>
 8001db6:	0003      	movs	r3, r0
 8001db8:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d014      	beq.n	8001dea <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3350      	adds	r3, #80	; 0x50
 8001dc8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781c      	ldrb	r4, [r3, #0]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	0023      	movs	r3, r4
 8001dda:	f000 f80b 	bl	8001df4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001dde:	e004      	b.n	8001dea <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <xQueueGenericCreate+0xb2>
 8001de6:	b672      	cpsid	i
 8001de8:	e7fe      	b.n	8001de8 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001dea:	69fb      	ldr	r3, [r7, #28]
    }
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b009      	add	sp, #36	; 0x24
 8001df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001df4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	001a      	movs	r2, r3
 8001e02:	1cfb      	adds	r3, r7, #3
 8001e04:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e002      	b.n	8001e1a <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7ff fefb 	bl	8001c26 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	1cfa      	adds	r2, r7, #3
 8001e34:	214c      	movs	r1, #76	; 0x4c
 8001e36:	7812      	ldrb	r2, [r2, #0]
 8001e38:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b08a      	sub	sp, #40	; 0x28
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <xQueueReceive+0x1e>
 8001e5c:	b672      	cpsid	i
 8001e5e:	e7fe      	b.n	8001e5e <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d103      	bne.n	8001e6e <xQueueReceive+0x2c>
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <xQueueReceive+0x30>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <xQueueReceive+0x32>
 8001e72:	2300      	movs	r3, #0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <xQueueReceive+0x3a>
 8001e78:	b672      	cpsid	i
 8001e7a:	e7fe      	b.n	8001e7a <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e7c:	f001 f846 	bl	8002f0c <xTaskGetSchedulerState>
 8001e80:	1e03      	subs	r3, r0, #0
 8001e82:	d102      	bne.n	8001e8a <xQueueReceive+0x48>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <xQueueReceive+0x4c>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <xQueueReceive+0x4e>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <xQueueReceive+0x56>
 8001e94:	b672      	cpsid	i
 8001e96:	e7fe      	b.n	8001e96 <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001e98:	f001 fbe2 	bl	8003660 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01a      	beq.n	8001ede <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	0011      	movs	r1, r2
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 f87c 	bl	8001fac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	1e5a      	subs	r2, r3, #1
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	3310      	adds	r3, #16
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f000 fe35 	bl	8002b38 <xTaskRemoveFromEventList>
 8001ece:	1e03      	subs	r3, r0, #0
 8001ed0:	d001      	beq.n	8001ed6 <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001ed2:	f001 fbb5 	bl	8003640 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001ed6:	f001 fbd5 	bl	8003684 <vPortExitCritical>
                return pdPASS;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e062      	b.n	8001fa4 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001ee4:	f001 fbce 	bl	8003684 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e05b      	b.n	8001fa4 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001ef2:	2314      	movs	r3, #20
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 fee8 	bl	8002ccc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001efc:	2301      	movs	r3, #1
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f00:	f001 fbc0 	bl	8003684 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f04:	f000 fb5c 	bl	80025c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f08:	f001 fbaa 	bl	8003660 <vPortEnterCritical>
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	2244      	movs	r2, #68	; 0x44
 8001f10:	5c9b      	ldrb	r3, [r3, r2]
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	d103      	bne.n	8001f20 <xQueueReceive+0xde>
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	2244      	movs	r2, #68	; 0x44
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	5499      	strb	r1, [r3, r2]
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	2245      	movs	r2, #69	; 0x45
 8001f24:	5c9b      	ldrb	r3, [r3, r2]
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	d103      	bne.n	8001f34 <xQueueReceive+0xf2>
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	2245      	movs	r2, #69	; 0x45
 8001f30:	2100      	movs	r1, #0
 8001f32:	5499      	strb	r1, [r3, r2]
 8001f34:	f001 fba6 	bl	8003684 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f38:	1d3a      	adds	r2, r7, #4
 8001f3a:	2314      	movs	r3, #20
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	0011      	movs	r1, r2
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 fed7 	bl	8002cf4 <xTaskCheckForTimeOut>
 8001f46:	1e03      	subs	r3, r0, #0
 8001f48:	d11e      	bne.n	8001f88 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f000 f8b1 	bl	80020b4 <prvIsQueueEmpty>
 8001f52:	1e03      	subs	r3, r0, #0
 8001f54:	d011      	beq.n	8001f7a <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	3324      	adds	r3, #36	; 0x24
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	0011      	movs	r1, r2
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f000 fd8e 	bl	8002a80 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	0018      	movs	r0, r3
 8001f68:	f000 f846 	bl	8001ff8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001f6c:	f000 fb34 	bl	80025d8 <xTaskResumeAll>
 8001f70:	1e03      	subs	r3, r0, #0
 8001f72:	d191      	bne.n	8001e98 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 8001f74:	f001 fb64 	bl	8003640 <vPortYield>
 8001f78:	e78e      	b.n	8001e98 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f83b 	bl	8001ff8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001f82:	f000 fb29 	bl	80025d8 <xTaskResumeAll>
 8001f86:	e787      	b.n	8001e98 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f000 f834 	bl	8001ff8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001f90:	f000 fb22 	bl	80025d8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 f88c 	bl	80020b4 <prvIsQueueEmpty>
 8001f9c:	1e03      	subs	r3, r0, #0
 8001f9e:	d100      	bne.n	8001fa2 <xQueueReceive+0x160>
 8001fa0:	e77a      	b.n	8001e98 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001fa2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b00a      	add	sp, #40	; 0x28
 8001faa:	bd80      	pop	{r7, pc}

08001fac <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d018      	beq.n	8001ff0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	18d2      	adds	r2, r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d303      	bcc.n	8001fe0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68d9      	ldr	r1, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	0018      	movs	r0, r3
 8001fec:	f001 fd9a 	bl	8003b24 <memcpy>
    }
}
 8001ff0:	46c0      	nop			; (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002000:	f001 fb2e 	bl	8003660 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002004:	230f      	movs	r3, #15
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	2145      	movs	r1, #69	; 0x45
 800200c:	5c52      	ldrb	r2, [r2, r1]
 800200e:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002010:	e013      	b.n	800203a <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3324      	adds	r3, #36	; 0x24
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fd8a 	bl	8002b38 <xTaskRemoveFromEventList>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d001      	beq.n	800202c <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002028:	f000 feb8 	bl	8002d9c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800202c:	210f      	movs	r1, #15
 800202e:	187b      	adds	r3, r7, r1
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	3b01      	subs	r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	187b      	adds	r3, r7, r1
 8002038:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800203a:	230f      	movs	r3, #15
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b25b      	sxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	dce5      	bgt.n	8002012 <prvUnlockQueue+0x1a>
 8002046:	e000      	b.n	800204a <prvUnlockQueue+0x52>
                    break;
 8002048:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2245      	movs	r2, #69	; 0x45
 800204e:	21ff      	movs	r1, #255	; 0xff
 8002050:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002052:	f001 fb17 	bl	8003684 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002056:	f001 fb03 	bl	8003660 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800205a:	230e      	movs	r3, #14
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	2144      	movs	r1, #68	; 0x44
 8002062:	5c52      	ldrb	r2, [r2, r1]
 8002064:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002066:	e013      	b.n	8002090 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d016      	beq.n	800209e <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3310      	adds	r3, #16
 8002074:	0018      	movs	r0, r3
 8002076:	f000 fd5f 	bl	8002b38 <xTaskRemoveFromEventList>
 800207a:	1e03      	subs	r3, r0, #0
 800207c:	d001      	beq.n	8002082 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 800207e:	f000 fe8d 	bl	8002d9c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002082:	210e      	movs	r1, #14
 8002084:	187b      	adds	r3, r7, r1
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	3b01      	subs	r3, #1
 800208a:	b2da      	uxtb	r2, r3
 800208c:	187b      	adds	r3, r7, r1
 800208e:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002090:	230e      	movs	r3, #14
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b25b      	sxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	dce5      	bgt.n	8002068 <prvUnlockQueue+0x70>
 800209c:	e000      	b.n	80020a0 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 800209e:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2244      	movs	r2, #68	; 0x44
 80020a4:	21ff      	movs	r1, #255	; 0xff
 80020a6:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80020a8:	f001 faec 	bl	8003684 <vPortExitCritical>
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b004      	add	sp, #16
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80020bc:	f001 fad0 	bl	8003660 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80020c8:	2301      	movs	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	e001      	b.n	80020d2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80020d2:	f001 fad7 	bl	8003684 <vPortExitCritical>

    return xReturn;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}

080020e0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <vQueueAddToRegistry+0x18>
 80020f4:	b672      	cpsid	i
 80020f6:	e7fe      	b.n	80020f6 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d025      	beq.n	800214a <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	e01f      	b.n	8002144 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002104:	4a17      	ldr	r2, [pc, #92]	; (8002164 <vQueueAddToRegistry+0x84>)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	18d3      	adds	r3, r2, r3
 800210c:	3304      	adds	r3, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	d105      	bne.n	8002122 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	00da      	lsls	r2, r3, #3
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <vQueueAddToRegistry+0x84>)
 800211c:	18d3      	adds	r3, r2, r3
 800211e:	60bb      	str	r3, [r7, #8]
                    break;
 8002120:	e013      	b.n	800214a <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10a      	bne.n	800213e <vQueueAddToRegistry+0x5e>
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <vQueueAddToRegistry+0x84>)
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	00d2      	lsls	r2, r2, #3
 800212e:	58d3      	ldr	r3, [r2, r3]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	00da      	lsls	r2, r3, #3
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <vQueueAddToRegistry+0x84>)
 800213a:	18d3      	adds	r3, r2, r3
 800213c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3301      	adds	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b07      	cmp	r3, #7
 8002148:	d9dc      	bls.n	8002104 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b004      	add	sp, #16
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20001dd8 	.word	0x20001dd8

08002168 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002178:	f001 fa72 	bl	8003660 <vPortEnterCritical>
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2244      	movs	r2, #68	; 0x44
 8002180:	5c9b      	ldrb	r3, [r3, r2]
 8002182:	b25b      	sxtb	r3, r3
 8002184:	3301      	adds	r3, #1
 8002186:	d103      	bne.n	8002190 <vQueueWaitForMessageRestricted+0x28>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2244      	movs	r2, #68	; 0x44
 800218c:	2100      	movs	r1, #0
 800218e:	5499      	strb	r1, [r3, r2]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2245      	movs	r2, #69	; 0x45
 8002194:	5c9b      	ldrb	r3, [r3, r2]
 8002196:	b25b      	sxtb	r3, r3
 8002198:	3301      	adds	r3, #1
 800219a:	d103      	bne.n	80021a4 <vQueueWaitForMessageRestricted+0x3c>
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2245      	movs	r2, #69	; 0x45
 80021a0:	2100      	movs	r1, #0
 80021a2:	5499      	strb	r1, [r3, r2]
 80021a4:	f001 fa6e 	bl	8003684 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3324      	adds	r3, #36	; 0x24
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f000 fc7f 	bl	8002abc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7ff ff19 	bl	8001ff8 <prvUnlockQueue>
    }
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b006      	add	sp, #24
 80021cc:	bd80      	pop	{r7, pc}

080021ce <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021ce:	b590      	push	{r4, r7, lr}
 80021d0:	b08d      	sub	sp, #52	; 0x34
 80021d2:	af04      	add	r7, sp, #16
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	1dbb      	adds	r3, r7, #6
 80021dc:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021de:	1dbb      	adds	r3, r7, #6
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	0018      	movs	r0, r3
 80021e6:	f001 fad3 	bl	8003790 <pvPortMalloc>
 80021ea:	0003      	movs	r3, r0
 80021ec:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d016      	beq.n	8002222 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021f4:	2064      	movs	r0, #100	; 0x64
 80021f6:	f001 facb 	bl	8003790 <pvPortMalloc>
 80021fa:	0003      	movs	r3, r0
 80021fc:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2264      	movs	r2, #100	; 0x64
 8002208:	2100      	movs	r1, #0
 800220a:	0018      	movs	r0, r3
 800220c:	f001 fc93 	bl	8003b36 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
 8002216:	e006      	b.n	8002226 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	0018      	movs	r0, r3
 800221c:	f001 fb60 	bl	80038e0 <vPortFree>
 8002220:	e001      	b.n	8002226 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d016      	beq.n	800225a <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800222c:	1dbb      	adds	r3, r7, #6
 800222e:	881a      	ldrh	r2, [r3, #0]
 8002230:	683c      	ldr	r4, [r7, #0]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	2300      	movs	r3, #0
 8002238:	9303      	str	r3, [sp, #12]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	0023      	movs	r3, r4
 8002248:	f000 f810 	bl	800226c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f88c 	bl	800236c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002254:	2301      	movs	r3, #1
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e002      	b.n	8002260 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800225a:	2301      	movs	r3, #1
 800225c:	425b      	negs	r3, r3
 800225e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002260:	69bb      	ldr	r3, [r7, #24]
    }
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b009      	add	sp, #36	; 0x24
 8002268:	bd90      	pop	{r4, r7, pc}
	...

0800226c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	001a      	movs	r2, r3
 8002284:	21a5      	movs	r1, #165	; 0xa5
 8002286:	f001 fc56 	bl	8003b36 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4935      	ldr	r1, [pc, #212]	; (8002368 <prvInitialiseNewTask+0xfc>)
 8002292:	468c      	mov	ip, r1
 8002294:	4463      	add	r3, ip
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	18d3      	adds	r3, r2, r3
 800229a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2207      	movs	r2, #7
 80022a0:	4393      	bics	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2207      	movs	r2, #7
 80022a8:	4013      	ands	r3, r2
 80022aa:	d001      	beq.n	80022b0 <prvInitialiseNewTask+0x44>
 80022ac:	b672      	cpsid	i
 80022ae:	e7fe      	b.n	80022ae <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01f      	beq.n	80022f6 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e013      	b.n	80022e4 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	18d3      	adds	r3, r2, r3
 80022c2:	7818      	ldrb	r0, [r3, #0]
 80022c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022c6:	2134      	movs	r1, #52	; 0x34
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	18d3      	adds	r3, r2, r3
 80022cc:	185b      	adds	r3, r3, r1
 80022ce:	1c02      	adds	r2, r0, #0
 80022d0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	18d3      	adds	r3, r2, r3
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b0f      	cmp	r3, #15
 80022e8:	d9e8      	bls.n	80022bc <prvInitialiseNewTask+0x50>
 80022ea:	e000      	b.n	80022ee <prvInitialiseNewTask+0x82>
            {
                break;
 80022ec:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	2243      	movs	r2, #67	; 0x43
 80022f2:	2100      	movs	r1, #0
 80022f4:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	2b37      	cmp	r3, #55	; 0x37
 80022fa:	d901      	bls.n	8002300 <prvInitialiseNewTask+0x94>
 80022fc:	b672      	cpsid	i
 80022fe:	e7fe      	b.n	80022fe <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	2b37      	cmp	r3, #55	; 0x37
 8002304:	d901      	bls.n	800230a <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002306:	2337      	movs	r3, #55	; 0x37
 8002308:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	6a3a      	ldr	r2, [r7, #32]
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	6a3a      	ldr	r2, [r7, #32]
 8002314:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	3304      	adds	r3, #4
 800231a:	0018      	movs	r0, r3
 800231c:	f7ff fc1a 	bl	8001b54 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	3318      	adds	r3, #24
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff fc15 	bl	8001b54 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800232a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800232e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	2238      	movs	r2, #56	; 0x38
 8002334:	1ad2      	subs	r2, r2, r3
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	68f9      	ldr	r1, [r7, #12]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	0018      	movs	r0, r3
 8002348:	f001 f8ec 	bl	8003524 <pxPortInitialiseStack>
 800234c:	0002      	movs	r2, r0
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800235c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	46bd      	mov	sp, r7
 8002362:	b006      	add	sp, #24
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	3fffffff 	.word	0x3fffffff

0800236c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002374:	f001 f974 	bl	8003660 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002378:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <prvAddNewTaskToReadyList+0x104>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	4b3c      	ldr	r3, [pc, #240]	; (8002470 <prvAddNewTaskToReadyList+0x104>)
 8002380:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8002382:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <prvAddNewTaskToReadyList+0x108>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800238a:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <prvAddNewTaskToReadyList+0x108>)
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002390:	4b37      	ldr	r3, [pc, #220]	; (8002470 <prvAddNewTaskToReadyList+0x104>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d110      	bne.n	80023ba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002398:	f000 fd1a 	bl	8002dd0 <prvInitialiseTaskLists>
 800239c:	e00d      	b.n	80023ba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800239e:	4b36      	ldr	r3, [pc, #216]	; (8002478 <prvAddNewTaskToReadyList+0x10c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <prvAddNewTaskToReadyList+0x108>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d802      	bhi.n	80023ba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023b4:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <prvAddNewTaskToReadyList+0x108>)
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023ba:	4b30      	ldr	r3, [pc, #192]	; (800247c <prvAddNewTaskToReadyList+0x110>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	4b2e      	ldr	r3, [pc, #184]	; (800247c <prvAddNewTaskToReadyList+0x110>)
 80023c2:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <prvAddNewTaskToReadyList+0x110>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <prvAddNewTaskToReadyList+0x114>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d903      	bls.n	80023e0 <prvAddNewTaskToReadyList+0x74>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	4b28      	ldr	r3, [pc, #160]	; (8002480 <prvAddNewTaskToReadyList+0x114>)
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e4:	4927      	ldr	r1, [pc, #156]	; (8002484 <prvAddNewTaskToReadyList+0x118>)
 80023e6:	0013      	movs	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	189b      	adds	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	18cb      	adds	r3, r1, r3
 80023f0:	3304      	adds	r3, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	3204      	adds	r2, #4
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	1d1a      	adds	r2, r3, #4
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241a:	0013      	movs	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	189b      	adds	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4a18      	ldr	r2, [pc, #96]	; (8002484 <prvAddNewTaskToReadyList+0x118>)
 8002424:	189a      	adds	r2, r3, r2
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	615a      	str	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242e:	4915      	ldr	r1, [pc, #84]	; (8002484 <prvAddNewTaskToReadyList+0x118>)
 8002430:	0013      	movs	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	189b      	adds	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	585b      	ldr	r3, [r3, r1]
 800243a:	1c58      	adds	r0, r3, #1
 800243c:	4911      	ldr	r1, [pc, #68]	; (8002484 <prvAddNewTaskToReadyList+0x118>)
 800243e:	0013      	movs	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	189b      	adds	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002448:	f001 f91c 	bl	8003684 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <prvAddNewTaskToReadyList+0x10c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <prvAddNewTaskToReadyList+0x108>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	429a      	cmp	r2, r3
 8002460:	d201      	bcs.n	8002466 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002462:	f001 f8ed 	bl	8003640 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b004      	add	sp, #16
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	20000504 	.word	0x20000504
 8002474:	20000030 	.word	0x20000030
 8002478:	20000510 	.word	0x20000510
 800247c:	20000520 	.word	0x20000520
 8002480:	2000050c 	.word	0x2000050c
 8002484:	20000034 	.word	0x20000034

08002488 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <xTaskDelayUntil+0x18>
 800249c:	b672      	cpsid	i
 800249e:	e7fe      	b.n	800249e <xTaskDelayUntil+0x16>
        configASSERT( ( xTimeIncrement > 0U ) );
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <xTaskDelayUntil+0x22>
 80024a6:	b672      	cpsid	i
 80024a8:	e7fe      	b.n	80024a8 <xTaskDelayUntil+0x20>
        configASSERT( uxSchedulerSuspended == 0 );
 80024aa:	4b23      	ldr	r3, [pc, #140]	; (8002538 <xTaskDelayUntil+0xb0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <xTaskDelayUntil+0x2e>
 80024b2:	b672      	cpsid	i
 80024b4:	e7fe      	b.n	80024b4 <xTaskDelayUntil+0x2c>

        vTaskSuspendAll();
 80024b6:	f000 f883 	bl	80025c0 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <xTaskDelayUntil+0xb4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	18d3      	adds	r3, r2, r3
 80024c8:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d20b      	bcs.n	80024ec <xTaskDelayUntil+0x64>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d211      	bcs.n	8002502 <xTaskDelayUntil+0x7a>
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d90d      	bls.n	8002502 <xTaskDelayUntil+0x7a>
                {
                    xShouldDelay = pdTRUE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	e00a      	b.n	8002502 <xTaskDelayUntil+0x7a>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d303      	bcc.n	80024fe <xTaskDelayUntil+0x76>
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d901      	bls.n	8002502 <xTaskDelayUntil+0x7a>
                {
                    xShouldDelay = pdTRUE;
 80024fe:	2301      	movs	r3, #1
 8002500:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <xTaskDelayUntil+0x94>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2100      	movs	r1, #0
 8002516:	0018      	movs	r0, r3
 8002518:	f000 fd14 	bl	8002f44 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800251c:	f000 f85c 	bl	80025d8 <xTaskResumeAll>
 8002520:	0003      	movs	r3, r0
 8002522:	60bb      	str	r3, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <xTaskDelayUntil+0xa6>
        {
            portYIELD_WITHIN_API();
 800252a:	f001 f889 	bl	8003640 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 800252e:	697b      	ldr	r3, [r7, #20]
    }
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b006      	add	sp, #24
 8002536:	bd80      	pop	{r7, pc}
 8002538:	2000052c 	.word	0x2000052c
 800253c:	20000508 	.word	0x20000508

08002540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002546:	4917      	ldr	r1, [pc, #92]	; (80025a4 <vTaskStartScheduler+0x64>)
 8002548:	4817      	ldr	r0, [pc, #92]	; (80025a8 <vTaskStartScheduler+0x68>)
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <vTaskStartScheduler+0x6c>)
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	2300      	movs	r3, #0
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2300      	movs	r3, #0
 8002554:	2280      	movs	r2, #128	; 0x80
 8002556:	f7ff fe3a 	bl	80021ce <xTaskCreate>
 800255a:	0003      	movs	r3, r0
 800255c:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d103      	bne.n	800256c <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8002564:	f000 fd5c 	bl	8003020 <xTimerCreateTimerTask>
 8002568:	0003      	movs	r3, r0
 800256a:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d10d      	bne.n	800258e <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8002572:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <vTaskStartScheduler+0x70>)
 8002576:	2201      	movs	r2, #1
 8002578:	4252      	negs	r2, r2
 800257a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <vTaskStartScheduler+0x74>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <vTaskStartScheduler+0x78>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002588:	f001 f836 	bl	80035f8 <xPortStartScheduler>
 800258c:	e004      	b.n	8002598 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3301      	adds	r3, #1
 8002592:	d101      	bne.n	8002598 <vTaskStartScheduler+0x58>
 8002594:	b672      	cpsid	i
 8002596:	e7fe      	b.n	8002596 <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <vTaskStartScheduler+0x7c>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	08003b70 	.word	0x08003b70
 80025a8:	08002db1 	.word	0x08002db1
 80025ac:	20000528 	.word	0x20000528
 80025b0:	20000524 	.word	0x20000524
 80025b4:	20000510 	.word	0x20000510
 80025b8:	20000508 	.word	0x20000508
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <vTaskSuspendAll+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	4b02      	ldr	r3, [pc, #8]	; (80025d4 <vTaskSuspendAll+0x14>)
 80025cc:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	2000052c 	.word	0x2000052c

080025d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80025e6:	4b68      	ldr	r3, [pc, #416]	; (8002788 <xTaskResumeAll+0x1b0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <xTaskResumeAll+0x1a>
 80025ee:	b672      	cpsid	i
 80025f0:	e7fe      	b.n	80025f0 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80025f2:	f001 f835 	bl	8003660 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025f6:	4b64      	ldr	r3, [pc, #400]	; (8002788 <xTaskResumeAll+0x1b0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	1e5a      	subs	r2, r3, #1
 80025fc:	4b62      	ldr	r3, [pc, #392]	; (8002788 <xTaskResumeAll+0x1b0>)
 80025fe:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002600:	4b61      	ldr	r3, [pc, #388]	; (8002788 <xTaskResumeAll+0x1b0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d000      	beq.n	800260a <xTaskResumeAll+0x32>
 8002608:	e0b7      	b.n	800277a <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800260a:	4b60      	ldr	r3, [pc, #384]	; (800278c <xTaskResumeAll+0x1b4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d100      	bne.n	8002614 <xTaskResumeAll+0x3c>
 8002612:	e0b2      	b.n	800277a <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002614:	e089      	b.n	800272a <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002616:	4b5e      	ldr	r3, [pc, #376]	; (8002790 <xTaskResumeAll+0x1b8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	6a12      	ldr	r2, [r2, #32]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	69d2      	ldr	r2, [r2, #28]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3318      	adds	r3, #24
 8002640:	429a      	cmp	r2, r3
 8002642:	d103      	bne.n	800264c <xTaskResumeAll+0x74>
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	6a1a      	ldr	r2, [r3, #32]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2200      	movs	r2, #0
 8002650:	629a      	str	r2, [r3, #40]	; 0x28
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	1e5a      	subs	r2, r3, #1
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	68d2      	ldr	r2, [r2, #12]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	6892      	ldr	r2, [r2, #8]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3304      	adds	r3, #4
 800267e:	429a      	cmp	r2, r3
 8002680:	d103      	bne.n	800268a <xTaskResumeAll+0xb2>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2200      	movs	r2, #0
 800268e:	615a      	str	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269e:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <xTaskResumeAll+0x1bc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d903      	bls.n	80026ae <xTaskResumeAll+0xd6>
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026aa:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <xTaskResumeAll+0x1bc>)
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b2:	4939      	ldr	r1, [pc, #228]	; (8002798 <xTaskResumeAll+0x1c0>)
 80026b4:	0013      	movs	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	189b      	adds	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	18cb      	adds	r3, r1, r3
 80026be:	3304      	adds	r3, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	3204      	adds	r2, #4
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	1d1a      	adds	r2, r3, #4
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e8:	0013      	movs	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	189b      	adds	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4a29      	ldr	r2, [pc, #164]	; (8002798 <xTaskResumeAll+0x1c0>)
 80026f2:	189a      	adds	r2, r3, r2
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	615a      	str	r2, [r3, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	4926      	ldr	r1, [pc, #152]	; (8002798 <xTaskResumeAll+0x1c0>)
 80026fe:	0013      	movs	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	189b      	adds	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	585b      	ldr	r3, [r3, r1]
 8002708:	1c58      	adds	r0, r3, #1
 800270a:	4923      	ldr	r1, [pc, #140]	; (8002798 <xTaskResumeAll+0x1c0>)
 800270c:	0013      	movs	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	189b      	adds	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <xTaskResumeAll+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	429a      	cmp	r2, r3
 8002722:	d302      	bcc.n	800272a <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <xTaskResumeAll+0x1c8>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <xTaskResumeAll+0x1b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d000      	beq.n	8002734 <xTaskResumeAll+0x15c>
 8002732:	e770      	b.n	8002616 <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800273a:	f000 fbcd 	bl	8002ed8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <xTaskResumeAll+0x1cc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00f      	beq.n	800276a <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800274a:	f000 f83b 	bl	80027c4 <xTaskIncrementTick>
 800274e:	1e03      	subs	r3, r0, #0
 8002750:	d002      	beq.n	8002758 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <xTaskResumeAll+0x1c8>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3b01      	subs	r3, #1
 800275c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f2      	bne.n	800274a <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <xTaskResumeAll+0x1cc>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <xTaskResumeAll+0x1c8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002772:	2301      	movs	r3, #1
 8002774:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002776:	f000 ff63 	bl	8003640 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800277a:	f000 ff83 	bl	8003684 <vPortExitCritical>

    return xAlreadyYielded;
 800277e:	693b      	ldr	r3, [r7, #16]
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b006      	add	sp, #24
 8002786:	bd80      	pop	{r7, pc}
 8002788:	2000052c 	.word	0x2000052c
 800278c:	20000504 	.word	0x20000504
 8002790:	200004c4 	.word	0x200004c4
 8002794:	2000050c 	.word	0x2000050c
 8002798:	20000034 	.word	0x20000034
 800279c:	20000030 	.word	0x20000030
 80027a0:	20000518 	.word	0x20000518
 80027a4:	20000514 	.word	0x20000514

080027a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80027ae:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <xTaskGetTickCount+0x18>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80027b4:	687b      	ldr	r3, [r7, #4]
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b002      	add	sp, #8
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	20000508 	.word	0x20000508

080027c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ce:	4b78      	ldr	r3, [pc, #480]	; (80029b0 <xTaskIncrementTick+0x1ec>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d000      	beq.n	80027d8 <xTaskIncrementTick+0x14>
 80027d6:	e0e0      	b.n	800299a <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027d8:	4b76      	ldr	r3, [pc, #472]	; (80029b4 <xTaskIncrementTick+0x1f0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3301      	adds	r3, #1
 80027de:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027e0:	4b74      	ldr	r3, [pc, #464]	; (80029b4 <xTaskIncrementTick+0x1f0>)
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d117      	bne.n	800281c <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 80027ec:	4b72      	ldr	r3, [pc, #456]	; (80029b8 <xTaskIncrementTick+0x1f4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <xTaskIncrementTick+0x36>
 80027f6:	b672      	cpsid	i
 80027f8:	e7fe      	b.n	80027f8 <xTaskIncrementTick+0x34>
 80027fa:	4b6f      	ldr	r3, [pc, #444]	; (80029b8 <xTaskIncrementTick+0x1f4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <xTaskIncrementTick+0x1f8>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b6c      	ldr	r3, [pc, #432]	; (80029b8 <xTaskIncrementTick+0x1f4>)
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <xTaskIncrementTick+0x1f8>)
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	4b6c      	ldr	r3, [pc, #432]	; (80029c0 <xTaskIncrementTick+0x1fc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <xTaskIncrementTick+0x1fc>)
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f000 fb5e 	bl	8002ed8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800281c:	4b69      	ldr	r3, [pc, #420]	; (80029c4 <xTaskIncrementTick+0x200>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	429a      	cmp	r2, r3
 8002824:	d200      	bcs.n	8002828 <xTaskIncrementTick+0x64>
 8002826:	e0a4      	b.n	8002972 <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002828:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <xTaskIncrementTick+0x1f4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d104      	bne.n	800283c <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002832:	4b64      	ldr	r3, [pc, #400]	; (80029c4 <xTaskIncrementTick+0x200>)
 8002834:	2201      	movs	r2, #1
 8002836:	4252      	negs	r2, r2
 8002838:	601a      	str	r2, [r3, #0]
                    break;
 800283a:	e09a      	b.n	8002972 <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800283c:	4b5e      	ldr	r3, [pc, #376]	; (80029b8 <xTaskIncrementTick+0x1f4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d203      	bcs.n	800285c <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002854:	4b5b      	ldr	r3, [pc, #364]	; (80029c4 <xTaskIncrementTick+0x200>)
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800285a:	e08a      	b.n	8002972 <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	68d2      	ldr	r2, [r2, #12]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	6892      	ldr	r2, [r2, #8]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	3304      	adds	r3, #4
 800287e:	429a      	cmp	r2, r3
 8002880:	d103      	bne.n	800288a <xTaskIncrementTick+0xc6>
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01e      	beq.n	80028e0 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	6a12      	ldr	r2, [r2, #32]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	69d2      	ldr	r2, [r2, #28]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3318      	adds	r3, #24
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d103      	bne.n	80028d0 <xTaskIncrementTick+0x10c>
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2200      	movs	r2, #0
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1e5a      	subs	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <xTaskIncrementTick+0x204>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d903      	bls.n	80028f4 <xTaskIncrementTick+0x130>
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <xTaskIncrementTick+0x204>)
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f8:	4934      	ldr	r1, [pc, #208]	; (80029cc <xTaskIncrementTick+0x208>)
 80028fa:	0013      	movs	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	189b      	adds	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	18cb      	adds	r3, r1, r3
 8002904:	3304      	adds	r3, #4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	3204      	adds	r2, #4
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1d1a      	adds	r2, r3, #4
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292e:	0013      	movs	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	189b      	adds	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4a25      	ldr	r2, [pc, #148]	; (80029cc <xTaskIncrementTick+0x208>)
 8002938:	189a      	adds	r2, r3, r2
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	615a      	str	r2, [r3, #20]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002942:	4922      	ldr	r1, [pc, #136]	; (80029cc <xTaskIncrementTick+0x208>)
 8002944:	0013      	movs	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	189b      	adds	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	585b      	ldr	r3, [r3, r1]
 800294e:	1c58      	adds	r0, r3, #1
 8002950:	491e      	ldr	r1, [pc, #120]	; (80029cc <xTaskIncrementTick+0x208>)
 8002952:	0013      	movs	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	189b      	adds	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <xTaskIncrementTick+0x20c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	429a      	cmp	r2, r3
 8002968:	d800      	bhi.n	800296c <xTaskIncrementTick+0x1a8>
 800296a:	e75d      	b.n	8002828 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 800296c:	2301      	movs	r3, #1
 800296e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002970:	e75a      	b.n	8002828 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <xTaskIncrementTick+0x20c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002978:	4914      	ldr	r1, [pc, #80]	; (80029cc <xTaskIncrementTick+0x208>)
 800297a:	0013      	movs	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	189b      	adds	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	585b      	ldr	r3, [r3, r1]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d901      	bls.n	800298c <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8002988:	2301      	movs	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <xTaskIncrementTick+0x210>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8002994:	2301      	movs	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	e004      	b.n	80029a4 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <xTaskIncrementTick+0x214>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <xTaskIncrementTick+0x214>)
 80029a2:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80029a4:	69fb      	ldr	r3, [r7, #28]
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b008      	add	sp, #32
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	2000052c 	.word	0x2000052c
 80029b4:	20000508 	.word	0x20000508
 80029b8:	200004bc 	.word	0x200004bc
 80029bc:	200004c0 	.word	0x200004c0
 80029c0:	2000051c 	.word	0x2000051c
 80029c4:	20000524 	.word	0x20000524
 80029c8:	2000050c 	.word	0x2000050c
 80029cc:	20000034 	.word	0x20000034
 80029d0:	20000030 	.word	0x20000030
 80029d4:	20000518 	.word	0x20000518
 80029d8:	20000514 	.word	0x20000514

080029dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <vTaskSwitchContext+0x90>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80029ea:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <vTaskSwitchContext+0x94>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80029f0:	e037      	b.n	8002a62 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 80029f2:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <vTaskSwitchContext+0x94>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <vTaskSwitchContext+0x98>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	e007      	b.n	8002a10 <vTaskSwitchContext+0x34>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <vTaskSwitchContext+0x2e>
 8002a06:	b672      	cpsid	i
 8002a08:	e7fe      	b.n	8002a08 <vTaskSwitchContext+0x2c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	4919      	ldr	r1, [pc, #100]	; (8002a78 <vTaskSwitchContext+0x9c>)
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	0013      	movs	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	189b      	adds	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	585b      	ldr	r3, [r3, r1]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0ee      	beq.n	8002a00 <vTaskSwitchContext+0x24>
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	0013      	movs	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	189b      	adds	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <vTaskSwitchContext+0x9c>)
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	3308      	adds	r3, #8
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d104      	bne.n	8002a52 <vTaskSwitchContext+0x76>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <vTaskSwitchContext+0xa0>)
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <vTaskSwitchContext+0x98>)
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	601a      	str	r2, [r3, #0]
}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b002      	add	sp, #8
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	2000052c 	.word	0x2000052c
 8002a70:	20000518 	.word	0x20000518
 8002a74:	2000050c 	.word	0x2000050c
 8002a78:	20000034 	.word	0x20000034
 8002a7c:	20000030 	.word	0x20000030

08002a80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <vTaskPlaceOnEventList+0x14>
 8002a90:	b672      	cpsid	i
 8002a92:	e7fe      	b.n	8002a92 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <vTaskPlaceOnEventList+0x38>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3318      	adds	r3, #24
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0011      	movs	r1, r2
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff f862 	bl	8001b6a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 fa4a 	bl	8002f44 <prvAddCurrentTaskToDelayedList>
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000030 	.word	0x20000030

08002abc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <vTaskPlaceOnEventListRestricted+0x16>
 8002ace:	b672      	cpsid	i
 8002ad0:	e7fe      	b.n	8002ad0 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <vTaskPlaceOnEventListRestricted+0x78>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	61da      	str	r2, [r3, #28]
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <vTaskPlaceOnEventListRestricted+0x78>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	6892      	ldr	r2, [r2, #8]
 8002ae8:	621a      	str	r2, [r3, #32]
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <vTaskPlaceOnEventListRestricted+0x78>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	3218      	adds	r2, #24
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <vTaskPlaceOnEventListRestricted+0x78>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3318      	adds	r3, #24
 8002afc:	001a      	movs	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <vTaskPlaceOnEventListRestricted+0x78>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	425b      	negs	r3, r3
 8002b1e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	0011      	movs	r1, r2
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 fa0c 	bl	8002f44 <prvAddCurrentTaskToDelayedList>
    }
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b006      	add	sp, #24
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000030 	.word	0x20000030

08002b38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <xTaskRemoveFromEventList+0x1a>
 8002b4e:	b672      	cpsid	i
 8002b50:	e7fe      	b.n	8002b50 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	6a12      	ldr	r2, [r2, #32]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	69d2      	ldr	r2, [r2, #28]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	3318      	adds	r3, #24
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d103      	bne.n	8002b80 <xTaskRemoveFromEventList+0x48>
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6a1a      	ldr	r2, [r3, #32]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2200      	movs	r2, #0
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	1e5a      	subs	r2, r3, #1
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b90:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <xTaskRemoveFromEventList+0x17c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d15d      	bne.n	8002c54 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	6892      	ldr	r2, [r2, #8]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d103      	bne.n	8002bc6 <xTaskRemoveFromEventList+0x8e>
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	615a      	str	r2, [r3, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <xTaskRemoveFromEventList+0x180>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d903      	bls.n	8002bea <xTaskRemoveFromEventList+0xb2>
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be6:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <xTaskRemoveFromEventList+0x180>)
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bee:	4933      	ldr	r1, [pc, #204]	; (8002cbc <xTaskRemoveFromEventList+0x184>)
 8002bf0:	0013      	movs	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	189b      	adds	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	18cb      	adds	r3, r1, r3
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	3204      	adds	r2, #4
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1d1a      	adds	r2, r3, #4
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	0013      	movs	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	189b      	adds	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <xTaskRemoveFromEventList+0x184>)
 8002c2e:	189a      	adds	r2, r3, r2
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	615a      	str	r2, [r3, #20]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	4920      	ldr	r1, [pc, #128]	; (8002cbc <xTaskRemoveFromEventList+0x184>)
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	189b      	adds	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	585b      	ldr	r3, [r3, r1]
 8002c44:	1c58      	adds	r0, r3, #1
 8002c46:	491d      	ldr	r1, [pc, #116]	; (8002cbc <xTaskRemoveFromEventList+0x184>)
 8002c48:	0013      	movs	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	189b      	adds	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	5058      	str	r0, [r3, r1]
 8002c52:	e01b      	b.n	8002c8c <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <xTaskRemoveFromEventList+0x188>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	61da      	str	r2, [r3, #28]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	621a      	str	r2, [r3, #32]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	3218      	adds	r2, #24
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	3318      	adds	r3, #24
 8002c76:	001a      	movs	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <xTaskRemoveFromEventList+0x188>)
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <xTaskRemoveFromEventList+0x188>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <xTaskRemoveFromEventList+0x188>)
 8002c8a:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <xTaskRemoveFromEventList+0x18c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d905      	bls.n	8002ca6 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <xTaskRemoveFromEventList+0x190>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e001      	b.n	8002caa <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002caa:	69fb      	ldr	r3, [r7, #28]
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b008      	add	sp, #32
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	2000052c 	.word	0x2000052c
 8002cb8:	2000050c 	.word	0x2000050c
 8002cbc:	20000034 	.word	0x20000034
 8002cc0:	200004c4 	.word	0x200004c4
 8002cc4:	20000030 	.word	0x20000030
 8002cc8:	20000518 	.word	0x20000518

08002ccc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <vTaskInternalSetTimeOutState+0x20>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <vTaskInternalSetTimeOutState+0x24>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	605a      	str	r2, [r3, #4]
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000051c 	.word	0x2000051c
 8002cf0:	20000508 	.word	0x20000508

08002cf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <xTaskCheckForTimeOut+0x14>
 8002d04:	b672      	cpsid	i
 8002d06:	e7fe      	b.n	8002d06 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <xTaskCheckForTimeOut+0x1e>
 8002d0e:	b672      	cpsid	i
 8002d10:	e7fe      	b.n	8002d10 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 8002d12:	f000 fca5 	bl	8003660 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002d16:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <xTaskCheckForTimeOut+0xa0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	d102      	bne.n	8002d34 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e027      	b.n	8002d84 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <xTaskCheckForTimeOut+0xa4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d00a      	beq.n	8002d56 <xTaskCheckForTimeOut+0x62>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d305      	bcc.n	8002d56 <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e016      	b.n	8002d84 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d20c      	bcs.n	8002d7a <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad2      	subs	r2, r2, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f7ff ffac 	bl	8002ccc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e004      	b.n	8002d84 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002d80:	2301      	movs	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002d84:	f000 fc7e 	bl	8003684 <vPortExitCritical>

    return xReturn;
 8002d88:	697b      	ldr	r3, [r7, #20]
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b006      	add	sp, #24
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	20000508 	.word	0x20000508
 8002d98:	2000051c 	.word	0x2000051c

08002d9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002da0:	4b02      	ldr	r3, [pc, #8]	; (8002dac <vTaskMissedYield+0x10>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000518 	.word	0x20000518

08002db0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002db8:	f000 f84e 	bl	8002e58 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <prvIdleTask+0x1c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d9f9      	bls.n	8002db8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002dc4:	f000 fc3c 	bl	8003640 <vPortYield>
        prvCheckTasksWaitingTermination();
 8002dc8:	e7f6      	b.n	8002db8 <prvIdleTask+0x8>
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	20000034 	.word	0x20000034

08002dd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	e00c      	b.n	8002df6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	0013      	movs	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <prvInitialiseTaskLists+0x68>)
 8002de8:	189b      	adds	r3, r3, r2
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7fe fe94 	bl	8001b18 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3301      	adds	r3, #1
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b37      	cmp	r3, #55	; 0x37
 8002dfa:	d9ef      	bls.n	8002ddc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <prvInitialiseTaskLists+0x6c>)
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7fe fe8a 	bl	8001b18 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <prvInitialiseTaskLists+0x70>)
 8002e06:	0018      	movs	r0, r3
 8002e08:	f7fe fe86 	bl	8001b18 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <prvInitialiseTaskLists+0x74>)
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7fe fe82 	bl	8001b18 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <prvInitialiseTaskLists+0x78>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f7fe fe7e 	bl	8001b18 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <prvInitialiseTaskLists+0x7c>)
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f7fe fe7a 	bl	8001b18 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <prvInitialiseTaskLists+0x80>)
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <prvInitialiseTaskLists+0x6c>)
 8002e28:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <prvInitialiseTaskLists+0x84>)
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <prvInitialiseTaskLists+0x70>)
 8002e2e:	601a      	str	r2, [r3, #0]
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000034 	.word	0x20000034
 8002e3c:	20000494 	.word	0x20000494
 8002e40:	200004a8 	.word	0x200004a8
 8002e44:	200004c4 	.word	0x200004c4
 8002e48:	200004d8 	.word	0x200004d8
 8002e4c:	200004f0 	.word	0x200004f0
 8002e50:	200004bc 	.word	0x200004bc
 8002e54:	200004c0 	.word	0x200004c0

08002e58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e5e:	e01a      	b.n	8002e96 <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8002e60:	f000 fbfe 	bl	8003660 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e64:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <prvCheckTasksWaitingTermination+0x50>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7fe feb0 	bl	8001bd6 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <prvCheckTasksWaitingTermination+0x54>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1e5a      	subs	r2, r3, #1
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <prvCheckTasksWaitingTermination+0x54>)
 8002e7e:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <prvCheckTasksWaitingTermination+0x58>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	1e5a      	subs	r2, r3, #1
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <prvCheckTasksWaitingTermination+0x58>)
 8002e88:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8002e8a:	f000 fbfb 	bl	8003684 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f000 f80f 	bl	8002eb4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <prvCheckTasksWaitingTermination+0x58>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e0      	bne.n	8002e60 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200004d8 	.word	0x200004d8
 8002eac:	20000504 	.word	0x20000504
 8002eb0:	200004ec 	.word	0x200004ec

08002eb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f000 fd0d 	bl	80038e0 <vPortFree>
            vPortFree( pxTCB );
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 fd09 	bl	80038e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b002      	add	sp, #8
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <prvResetNextTaskUnblockTime+0x2c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d104      	bne.n	8002ef0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <prvResetNextTaskUnblockTime+0x30>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4252      	negs	r2, r2
 8002eec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002eee:	e005      	b.n	8002efc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <prvResetNextTaskUnblockTime+0x2c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <prvResetNextTaskUnblockTime+0x30>)
 8002efa:	601a      	str	r2, [r3, #0]
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	200004bc 	.word	0x200004bc
 8002f08:	20000524 	.word	0x20000524

08002f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <xTaskGetSchedulerState+0x30>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	e008      	b.n	8002f32 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <xTaskGetSchedulerState+0x34>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	e001      	b.n	8002f32 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002f32:	687b      	ldr	r3, [r7, #4]
    }
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000510 	.word	0x20000510
 8002f40:	2000052c 	.word	0x2000052c

08002f44 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7fe fe3b 	bl	8001bd6 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3301      	adds	r3, #1
 8002f64:	d124      	bne.n	8002fb0 <prvAddCurrentTaskToDelayedList+0x6c>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d021      	beq.n	8002fb0 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f6c:	4b28      	ldr	r3, [pc, #160]	; (8003010 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	4b26      	ldr	r3, [pc, #152]	; (800300c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	6892      	ldr	r2, [r2, #8]
 8002f82:	60da      	str	r2, [r3, #12]
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	3204      	adds	r2, #4
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	1d1a      	adds	r2, r3, #4
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002fa0:	615a      	str	r2, [r3, #20]
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002fae:	e026      	b.n	8002ffe <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	18d3      	adds	r3, r2, r3
 8002fb6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d209      	bcs.n	8002fdc <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <prvAddCurrentTaskToDelayedList+0xd0>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	0010      	movs	r0, r2
 8002fd6:	f7fe fdc8 	bl	8001b6a <vListInsert>
}
 8002fda:	e010      	b.n	8002ffe <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	0010      	movs	r0, r2
 8002fea:	f7fe fdbe 	bl	8001b6a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d202      	bcs.n	8002ffe <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	601a      	str	r2, [r3, #0]
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b006      	add	sp, #24
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	20000508 	.word	0x20000508
 800300c:	20000030 	.word	0x20000030
 8003010:	200004f0 	.word	0x200004f0
 8003014:	200004c0 	.word	0x200004c0
 8003018:	200004bc 	.word	0x200004bc
 800301c:	20000524 	.word	0x20000524

08003020 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800302a:	f000 fa41 	bl	80034b0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <xTimerCreateTimerTask+0x44>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <xTimerCreateTimerTask+0x30>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	005a      	lsls	r2, r3, #1
 800303a:	490b      	ldr	r1, [pc, #44]	; (8003068 <xTimerCreateTimerTask+0x48>)
 800303c:	480b      	ldr	r0, [pc, #44]	; (800306c <xTimerCreateTimerTask+0x4c>)
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <xTimerCreateTimerTask+0x50>)
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	2302      	movs	r3, #2
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	2300      	movs	r3, #0
 8003048:	f7ff f8c1 	bl	80021ce <xTaskCreate>
 800304c:	0003      	movs	r3, r0
 800304e:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <xTimerCreateTimerTask+0x3a>
 8003056:	b672      	cpsid	i
 8003058:	e7fe      	b.n	8003058 <xTimerCreateTimerTask+0x38>
        return xReturn;
 800305a:	687b      	ldr	r3, [r7, #4]
    }
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000560 	.word	0x20000560
 8003068:	08003b78 	.word	0x08003b78
 800306c:	0800311d 	.word	0x0800311d
 8003070:	20000564 	.word	0x20000564

08003074 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003080:	e009      	b.n	8003096 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	18d3      	adds	r3, r2, r3
 800308a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	0010      	movs	r0, r2
 8003094:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	18d1      	adds	r1, r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f8d8 	bl	8003258 <prvInsertTimerInActiveList>
 80030a8:	1e03      	subs	r3, r0, #0
 80030aa:	d1ea      	bne.n	8003082 <prvReloadTimer+0xe>
        }
    }
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b004      	add	sp, #16
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <prvProcessExpiredTimer+0x60>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3304      	adds	r3, #4
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7fe fd80 	bl	8001bd6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2228      	movs	r2, #40	; 0x28
 80030da:	5c9b      	ldrb	r3, [r3, r2]
 80030dc:	001a      	movs	r2, r3
 80030de:	2304      	movs	r3, #4
 80030e0:	4013      	ands	r3, r2
 80030e2:	d006      	beq.n	80030f2 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f7ff ffc2 	bl	8003074 <prvReloadTimer>
 80030f0:	e008      	b.n	8003104 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2228      	movs	r2, #40	; 0x28
 80030f6:	5c9b      	ldrb	r3, [r3, r2]
 80030f8:	2201      	movs	r2, #1
 80030fa:	4393      	bics	r3, r2
 80030fc:	b2d9      	uxtb	r1, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2228      	movs	r2, #40	; 0x28
 8003102:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	0010      	movs	r0, r2
 800310c:	4798      	blx	r3
    }
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	b004      	add	sp, #16
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	20000558 	.word	0x20000558

0800311c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003124:	2308      	movs	r3, #8
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	0018      	movs	r0, r3
 800312a:	f000 f853 	bl	80031d4 <prvGetNextExpireTime>
 800312e:	0003      	movs	r3, r0
 8003130:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	0011      	movs	r1, r2
 8003138:	0018      	movs	r0, r3
 800313a:	f000 f803 	bl	8003144 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800313e:	f000 f8cd 	bl	80032dc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003142:	e7ef      	b.n	8003124 <prvTimerTask+0x8>

08003144 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800314e:	f7ff fa37 	bl	80025c0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003152:	2308      	movs	r3, #8
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	0018      	movs	r0, r3
 8003158:	f000 f85e 	bl	8003218 <prvSampleTimeNow>
 800315c:	0003      	movs	r3, r0
 800315e:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d12b      	bne.n	80031be <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10c      	bne.n	8003186 <prvProcessTimerOrBlockTask+0x42>
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d808      	bhi.n	8003186 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8003174:	f7ff fa30 	bl	80025d8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	0011      	movs	r1, r2
 800317e:	0018      	movs	r0, r3
 8003180:	f7ff ff9a 	bl	80030b8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003184:	e01d      	b.n	80031c2 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <prvProcessTimerOrBlockTask+0x88>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <prvProcessTimerOrBlockTask+0x56>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <prvProcessTimerOrBlockTask+0x58>
 800319a:	2300      	movs	r3, #0
 800319c:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <prvProcessTimerOrBlockTask+0x8c>)
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	0019      	movs	r1, r3
 80031ac:	f7fe ffdc 	bl	8002168 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80031b0:	f7ff fa12 	bl	80025d8 <xTaskResumeAll>
 80031b4:	1e03      	subs	r3, r0, #0
 80031b6:	d104      	bne.n	80031c2 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 80031b8:	f000 fa42 	bl	8003640 <vPortYield>
    }
 80031bc:	e001      	b.n	80031c2 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80031be:	f7ff fa0b 	bl	80025d8 <xTaskResumeAll>
    }
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b004      	add	sp, #16
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	2000055c 	.word	0x2000055c
 80031d0:	20000560 	.word	0x20000560

080031d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <prvGetNextExpireTime+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <prvGetNextExpireTime+0x16>
 80031e6:	2201      	movs	r2, #1
 80031e8:	e000      	b.n	80031ec <prvGetNextExpireTime+0x18>
 80031ea:	2200      	movs	r2, #0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <prvGetNextExpireTime+0x40>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e001      	b.n	8003208 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003208:	68fb      	ldr	r3, [r7, #12]
    }
 800320a:	0018      	movs	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	b004      	add	sp, #16
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	20000558 	.word	0x20000558

08003218 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003220:	f7ff fac2 	bl	80027a8 <xTaskGetTickCount>
 8003224:	0003      	movs	r3, r0
 8003226:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <prvSampleTimeNow+0x3c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	429a      	cmp	r2, r3
 8003230:	d205      	bcs.n	800323e <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8003232:	f000 f915 	bl	8003460 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e002      	b.n	8003244 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <prvSampleTimeNow+0x3c>)
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 800324a:	68fb      	ldr	r3, [r7, #12]
    }
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b004      	add	sp, #16
 8003252:	bd80      	pop	{r7, pc}
 8003254:	20000568 	.word	0x20000568

08003258 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	d812      	bhi.n	80032a4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e01b      	b.n	80032ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <prvInsertTimerInActiveList+0x7c>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3304      	adds	r3, #4
 800329a:	0019      	movs	r1, r3
 800329c:	0010      	movs	r0, r2
 800329e:	f7fe fc64 	bl	8001b6a <vListInsert>
 80032a2:	e012      	b.n	80032ca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d206      	bcs.n	80032ba <prvInsertTimerInActiveList+0x62>
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	e007      	b.n	80032ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032ba:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <prvInsertTimerInActiveList+0x80>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3304      	adds	r3, #4
 80032c2:	0019      	movs	r1, r3
 80032c4:	0010      	movs	r0, r2
 80032c6:	f7fe fc50 	bl	8001b6a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80032ca:	697b      	ldr	r3, [r7, #20]
    }
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b006      	add	sp, #24
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	2000055c 	.word	0x2000055c
 80032d8:	20000558 	.word	0x20000558

080032dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032e2:	e0a9      	b.n	8003438 <prvProcessReceivedCommands+0x15c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80032e4:	1d3b      	adds	r3, r7, #4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da0f      	bge.n	800330c <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	3304      	adds	r3, #4
 80032f0:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <prvProcessReceivedCommands+0x20>
 80032f8:	b672      	cpsid	i
 80032fa:	e7fe      	b.n	80032fa <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	6858      	ldr	r0, [r3, #4]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	0019      	movs	r1, r3
 800330a:	4790      	blx	r2
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	da00      	bge.n	8003316 <prvProcessReceivedCommands+0x3a>
 8003314:	e08f      	b.n	8003436 <prvProcessReceivedCommands+0x15a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <prvProcessReceivedCommands+0x52>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	3304      	adds	r3, #4
 8003328:	0018      	movs	r0, r3
 800332a:	f7fe fc54 	bl	8001bd6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800332e:	003b      	movs	r3, r7
 8003330:	0018      	movs	r0, r3
 8003332:	f7ff ff71 	bl	8003218 <prvSampleTimeNow>
 8003336:	0003      	movs	r3, r0
 8003338:	617b      	str	r3, [r7, #20]

                switch( xMessage.xMessageID )
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b09      	cmp	r3, #9
 8003340:	d900      	bls.n	8003344 <prvProcessReceivedCommands+0x68>
 8003342:	e079      	b.n	8003438 <prvProcessReceivedCommands+0x15c>
 8003344:	009a      	lsls	r2, r3, #2
 8003346:	4b44      	ldr	r3, [pc, #272]	; (8003458 <prvProcessReceivedCommands+0x17c>)
 8003348:	18d3      	adds	r3, r2, r3
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2228      	movs	r2, #40	; 0x28
 8003352:	5c9b      	ldrb	r3, [r3, r2]
 8003354:	2201      	movs	r2, #1
 8003356:	4313      	orrs	r3, r2
 8003358:	b2d9      	uxtb	r1, r3
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2228      	movs	r2, #40	; 0x28
 800335e:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	18d1      	adds	r1, r2, r3
 800336a:	1d3b      	adds	r3, r7, #4
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	69b8      	ldr	r0, [r7, #24]
 8003372:	f7ff ff71 	bl	8003258 <prvInsertTimerInActiveList>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d05e      	beq.n	8003438 <prvProcessReceivedCommands+0x15c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2228      	movs	r2, #40	; 0x28
 800337e:	5c9b      	ldrb	r3, [r3, r2]
 8003380:	001a      	movs	r2, r3
 8003382:	2304      	movs	r3, #4
 8003384:	4013      	ands	r3, r2
 8003386:	d00a      	beq.n	800339e <prvProcessReceivedCommands+0xc2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003388:	1d3b      	adds	r3, r7, #4
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	18d1      	adds	r1, r2, r3
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff fe6c 	bl	8003074 <prvReloadTimer>
 800339c:	e008      	b.n	80033b0 <prvProcessReceivedCommands+0xd4>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2228      	movs	r2, #40	; 0x28
 80033a2:	5c9b      	ldrb	r3, [r3, r2]
 80033a4:	2201      	movs	r2, #1
 80033a6:	4393      	bics	r3, r2
 80033a8:	b2d9      	uxtb	r1, r3
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2228      	movs	r2, #40	; 0x28
 80033ae:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	0010      	movs	r0, r2
 80033b8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80033ba:	e03d      	b.n	8003438 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2228      	movs	r2, #40	; 0x28
 80033c0:	5c9b      	ldrb	r3, [r3, r2]
 80033c2:	2201      	movs	r2, #1
 80033c4:	4393      	bics	r3, r2
 80033c6:	b2d9      	uxtb	r1, r3
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2228      	movs	r2, #40	; 0x28
 80033cc:	5499      	strb	r1, [r3, r2]
                        break;
 80033ce:	e033      	b.n	8003438 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2228      	movs	r2, #40	; 0x28
 80033d4:	5c9b      	ldrb	r3, [r3, r2]
 80033d6:	2201      	movs	r2, #1
 80033d8:	4313      	orrs	r3, r2
 80033da:	b2d9      	uxtb	r1, r3
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2228      	movs	r2, #40	; 0x28
 80033e0:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <prvProcessReceivedCommands+0x11a>
 80033f2:	b672      	cpsid	i
 80033f4:	e7fe      	b.n	80033f4 <prvProcessReceivedCommands+0x118>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	18d1      	adds	r1, r2, r3
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	69b8      	ldr	r0, [r7, #24]
 8003404:	f7ff ff28 	bl	8003258 <prvInsertTimerInActiveList>
                        break;
 8003408:	e016      	b.n	8003438 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2228      	movs	r2, #40	; 0x28
 800340e:	5c9b      	ldrb	r3, [r3, r2]
 8003410:	001a      	movs	r2, r3
 8003412:	2302      	movs	r3, #2
 8003414:	4013      	ands	r3, r2
 8003416:	d104      	bne.n	8003422 <prvProcessReceivedCommands+0x146>
                            {
                                vPortFree( pxTimer );
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	0018      	movs	r0, r3
 800341c:	f000 fa60 	bl	80038e0 <vPortFree>
 8003420:	e00a      	b.n	8003438 <prvProcessReceivedCommands+0x15c>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2228      	movs	r2, #40	; 0x28
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	2201      	movs	r2, #1
 800342a:	4393      	bics	r3, r2
 800342c:	b2d9      	uxtb	r1, r3
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2228      	movs	r2, #40	; 0x28
 8003432:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003434:	e000      	b.n	8003438 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003436:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <prvProcessReceivedCommands+0x180>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1d39      	adds	r1, r7, #4
 800343e:	2200      	movs	r2, #0
 8003440:	0018      	movs	r0, r3
 8003442:	f7fe fcfe 	bl	8001e42 <xQueueReceive>
 8003446:	1e03      	subs	r3, r0, #0
 8003448:	d000      	beq.n	800344c <prvProcessReceivedCommands+0x170>
 800344a:	e74b      	b.n	80032e4 <prvProcessReceivedCommands+0x8>
        }
    }
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b008      	add	sp, #32
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	08003be8 	.word	0x08003be8
 800345c:	20000560 	.word	0x20000560

08003460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003466:	e00b      	b.n	8003480 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <prvSwitchTimerLists+0x48>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003472:	2301      	movs	r3, #1
 8003474:	425a      	negs	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	0011      	movs	r1, r2
 800347a:	0018      	movs	r0, r3
 800347c:	f7ff fe1c 	bl	80030b8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <prvSwitchTimerLists+0x48>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1ee      	bne.n	8003468 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800348a:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <prvSwitchTimerLists+0x48>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <prvSwitchTimerLists+0x4c>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <prvSwitchTimerLists+0x48>)
 8003496:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <prvSwitchTimerLists+0x4c>)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	601a      	str	r2, [r3, #0]
    }
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b002      	add	sp, #8
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	20000558 	.word	0x20000558
 80034ac:	2000055c 	.word	0x2000055c

080034b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80034b4:	f000 f8d4 	bl	8003660 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <prvCheckForValidListAndQueue+0x5c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d120      	bne.n	8003502 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <prvCheckForValidListAndQueue+0x60>)
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fe fb28 	bl	8001b18 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <prvCheckForValidListAndQueue+0x64>)
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7fe fb24 	bl	8001b18 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <prvCheckForValidListAndQueue+0x68>)
 80034d2:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <prvCheckForValidListAndQueue+0x60>)
 80034d4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <prvCheckForValidListAndQueue+0x6c>)
 80034d8:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <prvCheckForValidListAndQueue+0x64>)
 80034da:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80034dc:	2200      	movs	r2, #0
 80034de:	2110      	movs	r1, #16
 80034e0:	200a      	movs	r0, #10
 80034e2:	f7fe fc29 	bl	8001d38 <xQueueGenericCreate>
 80034e6:	0002      	movs	r2, r0
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <prvCheckForValidListAndQueue+0x5c>)
 80034ea:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <prvCheckForValidListAndQueue+0x5c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <prvCheckForValidListAndQueue+0x5c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a09      	ldr	r2, [pc, #36]	; (8003520 <prvCheckForValidListAndQueue+0x70>)
 80034fa:	0011      	movs	r1, r2
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7fe fdef 	bl	80020e0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003502:	f000 f8bf 	bl	8003684 <vPortExitCritical>
    }
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000560 	.word	0x20000560
 8003510:	20000530 	.word	0x20000530
 8003514:	20000544 	.word	0x20000544
 8003518:	20000558 	.word	0x20000558
 800351c:	2000055c 	.word	0x2000055c
 8003520:	08003b80 	.word	0x08003b80

08003524 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3b04      	subs	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	0452      	lsls	r2, r2, #17
 800353c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3b04      	subs	r3, #4
 8003542:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3b04      	subs	r3, #4
 800354e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8003550:	4a08      	ldr	r2, [pc, #32]	; (8003574 <pxPortInitialiseStack+0x50>)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3b14      	subs	r3, #20
 800355a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3b20      	subs	r3, #32
 8003566:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003568:	68fb      	ldr	r3, [r7, #12]
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b004      	add	sp, #16
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	08003579 	.word	0x08003579

08003578 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <prvTaskExitError+0x2c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3301      	adds	r3, #1
 8003588:	d001      	beq.n	800358e <prvTaskExitError+0x16>
 800358a:	b672      	cpsid	i
 800358c:	e7fe      	b.n	800358c <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 800358e:	b672      	cpsid	i

    while( ulDummy == 0 )
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0fc      	beq.n	8003592 <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	b002      	add	sp, #8
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	20000010 	.word	0x20000010

080035a8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 80035c0:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <pxCurrentTCBConst2>)
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	3020      	adds	r0, #32
 80035c8:	f380 8809 	msr	PSP, r0
 80035cc:	2002      	movs	r0, #2
 80035ce:	f380 8814 	msr	CONTROL, r0
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80035d8:	46ae      	mov	lr, r5
 80035da:	bc08      	pop	{r3}
 80035dc:	bc04      	pop	{r2}
 80035de:	b662      	cpsie	i
 80035e0:	4718      	bx	r3
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46c0      	nop			; (mov r8, r8)

080035f0 <pxCurrentTCBConst2>:
 80035f0:	20000030 	.word	0x20000030
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46c0      	nop			; (mov r8, r8)

080035f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80035fc:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <xPortStartScheduler+0x40>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <xPortStartScheduler+0x40>)
 8003602:	21ff      	movs	r1, #255	; 0xff
 8003604:	0409      	lsls	r1, r1, #16
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800360a:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <xPortStartScheduler+0x40>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <xPortStartScheduler+0x40>)
 8003610:	21ff      	movs	r1, #255	; 0xff
 8003612:	0609      	lsls	r1, r1, #24
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003618:	f000 f898 	bl	800374c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <xPortStartScheduler+0x44>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8003622:	f7ff ffcd 	bl	80035c0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003626:	f7ff f9d9 	bl	80029dc <vTaskSwitchContext>
    prvTaskExitError();
 800362a:	f7ff ffa5 	bl	8003578 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800362e:	2300      	movs	r3, #0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	e000ed20 	.word	0xe000ed20
 800363c:	20000010 	.word	0x20000010

08003640 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <vPortYield+0x1c>)
 8003646:	2280      	movs	r2, #128	; 0x80
 8003648:	0552      	lsls	r2, r2, #21
 800364a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800364c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003650:	f3bf 8f6f 	isb	sy
}
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003664:	b672      	cpsid	i
    uxCriticalNesting++;
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <vPortEnterCritical+0x20>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	4b04      	ldr	r3, [pc, #16]	; (8003680 <vPortEnterCritical+0x20>)
 800366e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8003670:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003674:	f3bf 8f6f 	isb	sy
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	20000010 	.word	0x20000010

08003684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <vPortExitCritical+0x2c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <vPortExitCritical+0x10>
 8003690:	b672      	cpsid	i
 8003692:	e7fe      	b.n	8003692 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <vPortExitCritical+0x2c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1e5a      	subs	r2, r3, #1
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <vPortExitCritical+0x2c>)
 800369c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <vPortExitCritical+0x2c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d100      	bne.n	80036a8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80036a6:	b662      	cpsie	i
    }
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	20000010 	.word	0x20000010

080036b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 80036b4:	f3ef 8010 	mrs	r0, PRIMASK
 80036b8:	b672      	cpsid	i
 80036ba:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	0018      	movs	r0, r3

080036c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 80036c0:	f380 8810 	msr	PRIMASK, r0
 80036c4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80036c6:	46c0      	nop			; (mov r8, r8)
	...

080036d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80036d0:	f3ef 8009 	mrs	r0, PSP
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <pxCurrentTCBConst>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	3820      	subs	r0, #32
 80036da:	6010      	str	r0, [r2, #0]
 80036dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80036de:	4644      	mov	r4, r8
 80036e0:	464d      	mov	r5, r9
 80036e2:	4656      	mov	r6, sl
 80036e4:	465f      	mov	r7, fp
 80036e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80036e8:	b508      	push	{r3, lr}
 80036ea:	b672      	cpsid	i
 80036ec:	f7ff f976 	bl	80029dc <vTaskSwitchContext>
 80036f0:	b662      	cpsie	i
 80036f2:	bc0c      	pop	{r2, r3}
 80036f4:	6811      	ldr	r1, [r2, #0]
 80036f6:	6808      	ldr	r0, [r1, #0]
 80036f8:	3010      	adds	r0, #16
 80036fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80036fc:	46a0      	mov	r8, r4
 80036fe:	46a9      	mov	r9, r5
 8003700:	46b2      	mov	sl, r6
 8003702:	46bb      	mov	fp, r7
 8003704:	f380 8809 	msr	PSP, r0
 8003708:	3820      	subs	r0, #32
 800370a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800370c:	4718      	bx	r3
 800370e:	46c0      	nop			; (mov r8, r8)

08003710 <pxCurrentTCBConst>:
 8003710:	20000030 	.word	0x20000030
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	46c0      	nop			; (mov r8, r8)

08003718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800371e:	f7ff ffc9 	bl	80036b4 <ulSetInterruptMaskFromISR>
 8003722:	0003      	movs	r3, r0
 8003724:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003726:	f7ff f84d 	bl	80027c4 <xTaskIncrementTick>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d003      	beq.n	8003736 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <SysTick_Handler+0x30>)
 8003730:	2280      	movs	r2, #128	; 0x80
 8003732:	0552      	lsls	r2, r2, #21
 8003734:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0018      	movs	r0, r3
 800373a:	f7ff ffc1 	bl	80036c0 <vClearInterruptMaskFromISR>
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <vPortSetupTimerInterrupt+0x34>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <vPortSetupTimerInterrupt+0x38>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <vPortSetupTimerInterrupt+0x3c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	22fa      	movs	r2, #250	; 0xfa
 8003762:	0091      	lsls	r1, r2, #2
 8003764:	0018      	movs	r0, r3
 8003766:	f7fc fccf 	bl	8000108 <__udivsi3>
 800376a:	0003      	movs	r3, r0
 800376c:	001a      	movs	r2, r3
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <vPortSetupTimerInterrupt+0x40>)
 8003770:	3a01      	subs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003774:	4b02      	ldr	r3, [pc, #8]	; (8003780 <vPortSetupTimerInterrupt+0x34>)
 8003776:	2207      	movs	r2, #7
 8003778:	601a      	str	r2, [r3, #0]
}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	e000e010 	.word	0xe000e010
 8003784:	e000e018 	.word	0xe000e018
 8003788:	20000000 	.word	0x20000000
 800378c:	e000e014 	.word	0xe000e014

08003790 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800379c:	f7fe ff10 	bl	80025c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80037a0:	4b4a      	ldr	r3, [pc, #296]	; (80038cc <pvPortMalloc+0x13c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80037a8:	f000 f8e6 	bl	8003978 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d012      	beq.n	80037d8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80037b2:	2208      	movs	r2, #8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2107      	movs	r1, #7
 80037b8:	400b      	ands	r3, r1
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	3308      	adds	r3, #8
 80037be:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d804      	bhi.n	80037d4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	18d3      	adds	r3, r2, r3
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	e001      	b.n	80037d8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	db68      	blt.n	80038b0 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d065      	beq.n	80038b0 <pvPortMalloc+0x120>
 80037e4:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <pvPortMalloc+0x140>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d860      	bhi.n	80038b0 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80037ee:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <pvPortMalloc+0x144>)
 80037f0:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80037f2:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <pvPortMalloc+0x144>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037f8:	e004      	b.n	8003804 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d903      	bls.n	8003816 <pvPortMalloc+0x86>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f1      	bne.n	80037fa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003816:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <pvPortMalloc+0x13c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	429a      	cmp	r2, r3
 800381e:	d047      	beq.n	80038b0 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2208      	movs	r2, #8
 8003826:	189b      	adds	r3, r3, r2
 8003828:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	2308      	movs	r3, #8
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	429a      	cmp	r2, r3
 8003840:	d916      	bls.n	8003870 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	18d3      	adds	r3, r2, r3
 8003848:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2207      	movs	r2, #7
 800384e:	4013      	ands	r3, r2
 8003850:	d001      	beq.n	8003856 <pvPortMalloc+0xc6>
 8003852:	b672      	cpsid	i
 8003854:	e7fe      	b.n	8003854 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	1ad2      	subs	r2, r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	0018      	movs	r0, r3
 800386c:	f000 f8de 	bl	8003a2c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003870:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <pvPortMalloc+0x140>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	1ad2      	subs	r2, r2, r3
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <pvPortMalloc+0x140>)
 800387c:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <pvPortMalloc+0x140>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <pvPortMalloc+0x148>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d203      	bcs.n	8003892 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <pvPortMalloc+0x140>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <pvPortMalloc+0x148>)
 8003890:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	0612      	lsls	r2, r2, #24
 800389a:	431a      	orrs	r2, r3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <pvPortMalloc+0x14c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <pvPortMalloc+0x14c>)
 80038ae:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80038b0:	f7fe fe92 	bl	80025d8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2207      	movs	r2, #7
 80038b8:	4013      	ands	r3, r2
 80038ba:	d001      	beq.n	80038c0 <pvPortMalloc+0x130>
 80038bc:	b672      	cpsid	i
 80038be:	e7fe      	b.n	80038be <pvPortMalloc+0x12e>
    return pvReturn;
 80038c0:	697b      	ldr	r3, [r7, #20]
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b008      	add	sp, #32
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	20001d74 	.word	0x20001d74
 80038d0:	20001d78 	.word	0x20001d78
 80038d4:	20001d6c 	.word	0x20001d6c
 80038d8:	20001d7c 	.word	0x20001d7c
 80038dc:	20001d80 	.word	0x20001d80

080038e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d039      	beq.n	8003966 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80038f2:	2308      	movs	r3, #8
 80038f4:	425b      	negs	r3, r3
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	18d3      	adds	r3, r2, r3
 80038fa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	db01      	blt.n	800390c <vPortFree+0x2c>
 8003908:	b672      	cpsid	i
 800390a:	e7fe      	b.n	800390a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <vPortFree+0x38>
 8003914:	b672      	cpsid	i
 8003916:	e7fe      	b.n	8003916 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	0fdb      	lsrs	r3, r3, #31
 800391e:	1c1a      	adds	r2, r3, #0
 8003920:	2301      	movs	r3, #1
 8003922:	4013      	ands	r3, r2
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01d      	beq.n	8003966 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d119      	bne.n	8003966 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	085a      	lsrs	r2, r3, #1
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800393e:	f7fe fe3f 	bl	80025c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <vPortFree+0x90>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	18d2      	adds	r2, r2, r3
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <vPortFree+0x90>)
 800394e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	0018      	movs	r0, r3
 8003954:	f000 f86a 	bl	8003a2c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <vPortFree+0x94>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <vPortFree+0x94>)
 8003960:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8003962:	f7fe fe39 	bl	80025d8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b004      	add	sp, #16
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	20001d78 	.word	0x20001d78
 8003974:	20001d84 	.word	0x20001d84

08003978 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800397e:	23c0      	movs	r3, #192	; 0xc0
 8003980:	015b      	lsls	r3, r3, #5
 8003982:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003984:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <prvHeapInit+0xa0>)
 8003986:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2207      	movs	r2, #7
 800398c:	4013      	ands	r3, r2
 800398e:	d00c      	beq.n	80039aa <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3307      	adds	r3, #7
 8003994:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2207      	movs	r2, #7
 800399a:	4393      	bics	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <prvHeapInit+0xa0>)
 80039a6:	18d3      	adds	r3, r2, r3
 80039a8:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039ae:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <prvHeapInit+0xa4>)
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <prvHeapInit+0xa4>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	18d3      	adds	r3, r2, r3
 80039c0:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80039c2:	2208      	movs	r2, #8
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2207      	movs	r2, #7
 80039ce:	4393      	bics	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <prvHeapInit+0xa8>)
 80039d6:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <prvHeapInit+0xa8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2200      	movs	r2, #0
 80039de:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <prvHeapInit+0xa8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <prvHeapInit+0xa8>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <prvHeapInit+0xac>)
 8003a04:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <prvHeapInit+0xb0>)
 8003a0c:	601a      	str	r2, [r3, #0]
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	2000056c 	.word	0x2000056c
 8003a1c:	20001d6c 	.word	0x20001d6c
 8003a20:	20001d74 	.word	0x20001d74
 8003a24:	20001d7c 	.word	0x20001d7c
 8003a28:	20001d78 	.word	0x20001d78

08003a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <prvInsertBlockIntoFreeList+0xa8>)
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e002      	b.n	8003a40 <prvInsertBlockIntoFreeList+0x14>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d8f7      	bhi.n	8003a3a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	18d3      	adds	r3, r2, r3
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d108      	bne.n	8003a6e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	18d2      	adds	r2, r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	18d2      	adds	r2, r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d118      	bne.n	8003ab4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <prvInsertBlockIntoFreeList+0xac>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d00d      	beq.n	8003aaa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	18d2      	adds	r2, r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e008      	b.n	8003abc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <prvInsertBlockIntoFreeList+0xac>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e003      	b.n	8003abc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d002      	beq.n	8003aca <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b004      	add	sp, #16
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	20001d6c 	.word	0x20001d6c
 8003ad8:	20001d74 	.word	0x20001d74

08003adc <__libc_init_array>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	2600      	movs	r6, #0
 8003ae0:	4d0c      	ldr	r5, [pc, #48]	; (8003b14 <__libc_init_array+0x38>)
 8003ae2:	4c0d      	ldr	r4, [pc, #52]	; (8003b18 <__libc_init_array+0x3c>)
 8003ae4:	1b64      	subs	r4, r4, r5
 8003ae6:	10a4      	asrs	r4, r4, #2
 8003ae8:	42a6      	cmp	r6, r4
 8003aea:	d109      	bne.n	8003b00 <__libc_init_array+0x24>
 8003aec:	2600      	movs	r6, #0
 8003aee:	f000 f82b 	bl	8003b48 <_init>
 8003af2:	4d0a      	ldr	r5, [pc, #40]	; (8003b1c <__libc_init_array+0x40>)
 8003af4:	4c0a      	ldr	r4, [pc, #40]	; (8003b20 <__libc_init_array+0x44>)
 8003af6:	1b64      	subs	r4, r4, r5
 8003af8:	10a4      	asrs	r4, r4, #2
 8003afa:	42a6      	cmp	r6, r4
 8003afc:	d105      	bne.n	8003b0a <__libc_init_array+0x2e>
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	00b3      	lsls	r3, r6, #2
 8003b02:	58eb      	ldr	r3, [r5, r3]
 8003b04:	4798      	blx	r3
 8003b06:	3601      	adds	r6, #1
 8003b08:	e7ee      	b.n	8003ae8 <__libc_init_array+0xc>
 8003b0a:	00b3      	lsls	r3, r6, #2
 8003b0c:	58eb      	ldr	r3, [r5, r3]
 8003b0e:	4798      	blx	r3
 8003b10:	3601      	adds	r6, #1
 8003b12:	e7f2      	b.n	8003afa <__libc_init_array+0x1e>
 8003b14:	08003c10 	.word	0x08003c10
 8003b18:	08003c10 	.word	0x08003c10
 8003b1c:	08003c10 	.word	0x08003c10
 8003b20:	08003c14 	.word	0x08003c14

08003b24 <memcpy>:
 8003b24:	2300      	movs	r3, #0
 8003b26:	b510      	push	{r4, lr}
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d100      	bne.n	8003b2e <memcpy+0xa>
 8003b2c:	bd10      	pop	{r4, pc}
 8003b2e:	5ccc      	ldrb	r4, [r1, r3]
 8003b30:	54c4      	strb	r4, [r0, r3]
 8003b32:	3301      	adds	r3, #1
 8003b34:	e7f8      	b.n	8003b28 <memcpy+0x4>

08003b36 <memset>:
 8003b36:	0003      	movs	r3, r0
 8003b38:	1882      	adds	r2, r0, r2
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d100      	bne.n	8003b40 <memset+0xa>
 8003b3e:	4770      	bx	lr
 8003b40:	7019      	strb	r1, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	e7f9      	b.n	8003b3a <memset+0x4>
	...

08003b48 <_init>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr

08003b54 <_fini>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr
