
Day10_BLE2_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008714  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a50  08008a50  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008a50  08008a50  00018a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a58  08008a58  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a58  08008a58  00018a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a5c  08008a5c  00018a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000098  08008af8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  08008af8  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a871  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049a3  00000000  00000000  0004a939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0004f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00050988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e4cf  00000000  00000000  00051e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef33  00000000  00000000  0008031f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001049aa  00000000  00000000  0009f252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a3bfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006654  00000000  00000000  001a3c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800888c 	.word	0x0800888c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800888c 	.word	0x0800888c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_d2f>:
 8000648:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800064c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000650:	bf24      	itt	cs
 8000652:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000656:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800065a:	d90d      	bls.n	8000678 <__aeabi_d2f+0x30>
 800065c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000660:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000664:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000668:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800066c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000670:	bf08      	it	eq
 8000672:	f020 0001 	biceq.w	r0, r0, #1
 8000676:	4770      	bx	lr
 8000678:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800067c:	d121      	bne.n	80006c2 <__aeabi_d2f+0x7a>
 800067e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000682:	bfbc      	itt	lt
 8000684:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000688:	4770      	bxlt	lr
 800068a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000692:	f1c2 0218 	rsb	r2, r2, #24
 8000696:	f1c2 0c20 	rsb	ip, r2, #32
 800069a:	fa10 f30c 	lsls.w	r3, r0, ip
 800069e:	fa20 f002 	lsr.w	r0, r0, r2
 80006a2:	bf18      	it	ne
 80006a4:	f040 0001 	orrne.w	r0, r0, #1
 80006a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006b4:	ea40 000c 	orr.w	r0, r0, ip
 80006b8:	fa23 f302 	lsr.w	r3, r3, r2
 80006bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006c0:	e7cc      	b.n	800065c <__aeabi_d2f+0x14>
 80006c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006c6:	d107      	bne.n	80006d8 <__aeabi_d2f+0x90>
 80006c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006cc:	bf1e      	ittt	ne
 80006ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006d6:	4770      	bxne	lr
 80006d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <__aeabi_uldivmod>:
 80006e8:	b953      	cbnz	r3, 8000700 <__aeabi_uldivmod+0x18>
 80006ea:	b94a      	cbnz	r2, 8000700 <__aeabi_uldivmod+0x18>
 80006ec:	2900      	cmp	r1, #0
 80006ee:	bf08      	it	eq
 80006f0:	2800      	cmpeq	r0, #0
 80006f2:	bf1c      	itt	ne
 80006f4:	f04f 31ff 	movne.w	r1, #4294967295
 80006f8:	f04f 30ff 	movne.w	r0, #4294967295
 80006fc:	f000 b96e 	b.w	80009dc <__aeabi_idiv0>
 8000700:	f1ad 0c08 	sub.w	ip, sp, #8
 8000704:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000708:	f000 f806 	bl	8000718 <__udivmoddi4>
 800070c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000714:	b004      	add	sp, #16
 8000716:	4770      	bx	lr

08000718 <__udivmoddi4>:
 8000718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800071c:	9d08      	ldr	r5, [sp, #32]
 800071e:	4604      	mov	r4, r0
 8000720:	468c      	mov	ip, r1
 8000722:	2b00      	cmp	r3, #0
 8000724:	f040 8083 	bne.w	800082e <__udivmoddi4+0x116>
 8000728:	428a      	cmp	r2, r1
 800072a:	4617      	mov	r7, r2
 800072c:	d947      	bls.n	80007be <__udivmoddi4+0xa6>
 800072e:	fab2 f282 	clz	r2, r2
 8000732:	b142      	cbz	r2, 8000746 <__udivmoddi4+0x2e>
 8000734:	f1c2 0020 	rsb	r0, r2, #32
 8000738:	fa24 f000 	lsr.w	r0, r4, r0
 800073c:	4091      	lsls	r1, r2
 800073e:	4097      	lsls	r7, r2
 8000740:	ea40 0c01 	orr.w	ip, r0, r1
 8000744:	4094      	lsls	r4, r2
 8000746:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800074a:	0c23      	lsrs	r3, r4, #16
 800074c:	fbbc f6f8 	udiv	r6, ip, r8
 8000750:	fa1f fe87 	uxth.w	lr, r7
 8000754:	fb08 c116 	mls	r1, r8, r6, ip
 8000758:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800075c:	fb06 f10e 	mul.w	r1, r6, lr
 8000760:	4299      	cmp	r1, r3
 8000762:	d909      	bls.n	8000778 <__udivmoddi4+0x60>
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	f106 30ff 	add.w	r0, r6, #4294967295
 800076a:	f080 8119 	bcs.w	80009a0 <__udivmoddi4+0x288>
 800076e:	4299      	cmp	r1, r3
 8000770:	f240 8116 	bls.w	80009a0 <__udivmoddi4+0x288>
 8000774:	3e02      	subs	r6, #2
 8000776:	443b      	add	r3, r7
 8000778:	1a5b      	subs	r3, r3, r1
 800077a:	b2a4      	uxth	r4, r4
 800077c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000780:	fb08 3310 	mls	r3, r8, r0, r3
 8000784:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000788:	fb00 fe0e 	mul.w	lr, r0, lr
 800078c:	45a6      	cmp	lr, r4
 800078e:	d909      	bls.n	80007a4 <__udivmoddi4+0x8c>
 8000790:	193c      	adds	r4, r7, r4
 8000792:	f100 33ff 	add.w	r3, r0, #4294967295
 8000796:	f080 8105 	bcs.w	80009a4 <__udivmoddi4+0x28c>
 800079a:	45a6      	cmp	lr, r4
 800079c:	f240 8102 	bls.w	80009a4 <__udivmoddi4+0x28c>
 80007a0:	3802      	subs	r0, #2
 80007a2:	443c      	add	r4, r7
 80007a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007a8:	eba4 040e 	sub.w	r4, r4, lr
 80007ac:	2600      	movs	r6, #0
 80007ae:	b11d      	cbz	r5, 80007b8 <__udivmoddi4+0xa0>
 80007b0:	40d4      	lsrs	r4, r2
 80007b2:	2300      	movs	r3, #0
 80007b4:	e9c5 4300 	strd	r4, r3, [r5]
 80007b8:	4631      	mov	r1, r6
 80007ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007be:	b902      	cbnz	r2, 80007c2 <__udivmoddi4+0xaa>
 80007c0:	deff      	udf	#255	; 0xff
 80007c2:	fab2 f282 	clz	r2, r2
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d150      	bne.n	800086c <__udivmoddi4+0x154>
 80007ca:	1bcb      	subs	r3, r1, r7
 80007cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007d0:	fa1f f887 	uxth.w	r8, r7
 80007d4:	2601      	movs	r6, #1
 80007d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007da:	0c21      	lsrs	r1, r4, #16
 80007dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007e4:	fb08 f30c 	mul.w	r3, r8, ip
 80007e8:	428b      	cmp	r3, r1
 80007ea:	d907      	bls.n	80007fc <__udivmoddi4+0xe4>
 80007ec:	1879      	adds	r1, r7, r1
 80007ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007f2:	d202      	bcs.n	80007fa <__udivmoddi4+0xe2>
 80007f4:	428b      	cmp	r3, r1
 80007f6:	f200 80e9 	bhi.w	80009cc <__udivmoddi4+0x2b4>
 80007fa:	4684      	mov	ip, r0
 80007fc:	1ac9      	subs	r1, r1, r3
 80007fe:	b2a3      	uxth	r3, r4
 8000800:	fbb1 f0fe 	udiv	r0, r1, lr
 8000804:	fb0e 1110 	mls	r1, lr, r0, r1
 8000808:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800080c:	fb08 f800 	mul.w	r8, r8, r0
 8000810:	45a0      	cmp	r8, r4
 8000812:	d907      	bls.n	8000824 <__udivmoddi4+0x10c>
 8000814:	193c      	adds	r4, r7, r4
 8000816:	f100 33ff 	add.w	r3, r0, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x10a>
 800081c:	45a0      	cmp	r8, r4
 800081e:	f200 80d9 	bhi.w	80009d4 <__udivmoddi4+0x2bc>
 8000822:	4618      	mov	r0, r3
 8000824:	eba4 0408 	sub.w	r4, r4, r8
 8000828:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800082c:	e7bf      	b.n	80007ae <__udivmoddi4+0x96>
 800082e:	428b      	cmp	r3, r1
 8000830:	d909      	bls.n	8000846 <__udivmoddi4+0x12e>
 8000832:	2d00      	cmp	r5, #0
 8000834:	f000 80b1 	beq.w	800099a <__udivmoddi4+0x282>
 8000838:	2600      	movs	r6, #0
 800083a:	e9c5 0100 	strd	r0, r1, [r5]
 800083e:	4630      	mov	r0, r6
 8000840:	4631      	mov	r1, r6
 8000842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000846:	fab3 f683 	clz	r6, r3
 800084a:	2e00      	cmp	r6, #0
 800084c:	d14a      	bne.n	80008e4 <__udivmoddi4+0x1cc>
 800084e:	428b      	cmp	r3, r1
 8000850:	d302      	bcc.n	8000858 <__udivmoddi4+0x140>
 8000852:	4282      	cmp	r2, r0
 8000854:	f200 80b8 	bhi.w	80009c8 <__udivmoddi4+0x2b0>
 8000858:	1a84      	subs	r4, r0, r2
 800085a:	eb61 0103 	sbc.w	r1, r1, r3
 800085e:	2001      	movs	r0, #1
 8000860:	468c      	mov	ip, r1
 8000862:	2d00      	cmp	r5, #0
 8000864:	d0a8      	beq.n	80007b8 <__udivmoddi4+0xa0>
 8000866:	e9c5 4c00 	strd	r4, ip, [r5]
 800086a:	e7a5      	b.n	80007b8 <__udivmoddi4+0xa0>
 800086c:	f1c2 0320 	rsb	r3, r2, #32
 8000870:	fa20 f603 	lsr.w	r6, r0, r3
 8000874:	4097      	lsls	r7, r2
 8000876:	fa01 f002 	lsl.w	r0, r1, r2
 800087a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800087e:	40d9      	lsrs	r1, r3
 8000880:	4330      	orrs	r0, r6
 8000882:	0c03      	lsrs	r3, r0, #16
 8000884:	fbb1 f6fe 	udiv	r6, r1, lr
 8000888:	fa1f f887 	uxth.w	r8, r7
 800088c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000890:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000894:	fb06 f108 	mul.w	r1, r6, r8
 8000898:	4299      	cmp	r1, r3
 800089a:	fa04 f402 	lsl.w	r4, r4, r2
 800089e:	d909      	bls.n	80008b4 <__udivmoddi4+0x19c>
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008a6:	f080 808d 	bcs.w	80009c4 <__udivmoddi4+0x2ac>
 80008aa:	4299      	cmp	r1, r3
 80008ac:	f240 808a 	bls.w	80009c4 <__udivmoddi4+0x2ac>
 80008b0:	3e02      	subs	r6, #2
 80008b2:	443b      	add	r3, r7
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	b281      	uxth	r1, r0
 80008b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c4:	fb00 f308 	mul.w	r3, r0, r8
 80008c8:	428b      	cmp	r3, r1
 80008ca:	d907      	bls.n	80008dc <__udivmoddi4+0x1c4>
 80008cc:	1879      	adds	r1, r7, r1
 80008ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80008d2:	d273      	bcs.n	80009bc <__udivmoddi4+0x2a4>
 80008d4:	428b      	cmp	r3, r1
 80008d6:	d971      	bls.n	80009bc <__udivmoddi4+0x2a4>
 80008d8:	3802      	subs	r0, #2
 80008da:	4439      	add	r1, r7
 80008dc:	1acb      	subs	r3, r1, r3
 80008de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008e2:	e778      	b.n	80007d6 <__udivmoddi4+0xbe>
 80008e4:	f1c6 0c20 	rsb	ip, r6, #32
 80008e8:	fa03 f406 	lsl.w	r4, r3, r6
 80008ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80008f0:	431c      	orrs	r4, r3
 80008f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008f6:	fa01 f306 	lsl.w	r3, r1, r6
 80008fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000902:	431f      	orrs	r7, r3
 8000904:	0c3b      	lsrs	r3, r7, #16
 8000906:	fbb1 f9fe 	udiv	r9, r1, lr
 800090a:	fa1f f884 	uxth.w	r8, r4
 800090e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000912:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000916:	fb09 fa08 	mul.w	sl, r9, r8
 800091a:	458a      	cmp	sl, r1
 800091c:	fa02 f206 	lsl.w	r2, r2, r6
 8000920:	fa00 f306 	lsl.w	r3, r0, r6
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x220>
 8000926:	1861      	adds	r1, r4, r1
 8000928:	f109 30ff 	add.w	r0, r9, #4294967295
 800092c:	d248      	bcs.n	80009c0 <__udivmoddi4+0x2a8>
 800092e:	458a      	cmp	sl, r1
 8000930:	d946      	bls.n	80009c0 <__udivmoddi4+0x2a8>
 8000932:	f1a9 0902 	sub.w	r9, r9, #2
 8000936:	4421      	add	r1, r4
 8000938:	eba1 010a 	sub.w	r1, r1, sl
 800093c:	b2bf      	uxth	r7, r7
 800093e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000942:	fb0e 1110 	mls	r1, lr, r0, r1
 8000946:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800094a:	fb00 f808 	mul.w	r8, r0, r8
 800094e:	45b8      	cmp	r8, r7
 8000950:	d907      	bls.n	8000962 <__udivmoddi4+0x24a>
 8000952:	19e7      	adds	r7, r4, r7
 8000954:	f100 31ff 	add.w	r1, r0, #4294967295
 8000958:	d22e      	bcs.n	80009b8 <__udivmoddi4+0x2a0>
 800095a:	45b8      	cmp	r8, r7
 800095c:	d92c      	bls.n	80009b8 <__udivmoddi4+0x2a0>
 800095e:	3802      	subs	r0, #2
 8000960:	4427      	add	r7, r4
 8000962:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000966:	eba7 0708 	sub.w	r7, r7, r8
 800096a:	fba0 8902 	umull	r8, r9, r0, r2
 800096e:	454f      	cmp	r7, r9
 8000970:	46c6      	mov	lr, r8
 8000972:	4649      	mov	r1, r9
 8000974:	d31a      	bcc.n	80009ac <__udivmoddi4+0x294>
 8000976:	d017      	beq.n	80009a8 <__udivmoddi4+0x290>
 8000978:	b15d      	cbz	r5, 8000992 <__udivmoddi4+0x27a>
 800097a:	ebb3 020e 	subs.w	r2, r3, lr
 800097e:	eb67 0701 	sbc.w	r7, r7, r1
 8000982:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000986:	40f2      	lsrs	r2, r6
 8000988:	ea4c 0202 	orr.w	r2, ip, r2
 800098c:	40f7      	lsrs	r7, r6
 800098e:	e9c5 2700 	strd	r2, r7, [r5]
 8000992:	2600      	movs	r6, #0
 8000994:	4631      	mov	r1, r6
 8000996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e70b      	b.n	80007b8 <__udivmoddi4+0xa0>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e9      	b.n	8000778 <__udivmoddi4+0x60>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6fd      	b.n	80007a4 <__udivmoddi4+0x8c>
 80009a8:	4543      	cmp	r3, r8
 80009aa:	d2e5      	bcs.n	8000978 <__udivmoddi4+0x260>
 80009ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80009b0:	eb69 0104 	sbc.w	r1, r9, r4
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7df      	b.n	8000978 <__udivmoddi4+0x260>
 80009b8:	4608      	mov	r0, r1
 80009ba:	e7d2      	b.n	8000962 <__udivmoddi4+0x24a>
 80009bc:	4660      	mov	r0, ip
 80009be:	e78d      	b.n	80008dc <__udivmoddi4+0x1c4>
 80009c0:	4681      	mov	r9, r0
 80009c2:	e7b9      	b.n	8000938 <__udivmoddi4+0x220>
 80009c4:	4666      	mov	r6, ip
 80009c6:	e775      	b.n	80008b4 <__udivmoddi4+0x19c>
 80009c8:	4630      	mov	r0, r6
 80009ca:	e74a      	b.n	8000862 <__udivmoddi4+0x14a>
 80009cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009d0:	4439      	add	r1, r7
 80009d2:	e713      	b.n	80007fc <__udivmoddi4+0xe4>
 80009d4:	3802      	subs	r0, #2
 80009d6:	443c      	add	r4, r7
 80009d8:	e724      	b.n	8000824 <__udivmoddi4+0x10c>
 80009da:	bf00      	nop

080009dc <__aeabi_idiv0>:
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop

080009e0 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <MX_BlueNRG_MS_Init+0x124>)
 80009e8:	617b      	str	r3, [r7, #20]
 //User_Init();

  /* Get the User Button initial state */
 // user_button_init_state = BSP_PB_GetState(BUTTON_KEY);

  hci_init(user_notify, NULL);
 80009ea:	2100      	movs	r1, #0
 80009ec:	4846      	ldr	r0, [pc, #280]	; (8000b08 <MX_BlueNRG_MS_Init+0x128>)
 80009ee:	f006 fb9f 	bl	8007130 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80009f2:	1dba      	adds	r2, r7, #6
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f006 fa0c 	bl	8006e18 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000a00:	f006 fa4e 	bl	8006ea0 <hci_reset>
  HAL_Delay(100);
 8000a04:	2064      	movs	r0, #100	; 0x64
 8000a06:	f002 fee3 	bl	80037d0 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000a0a:	7a3b      	ldrb	r3, [r7, #8]
 8000a0c:	2b30      	cmp	r3, #48	; 0x30
 8000a0e:	d902      	bls.n	8000a16 <MX_BlueNRG_MS_Init+0x36>
    bnrg_expansion_board = IDB05A1;
 8000a10:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <MX_BlueNRG_MS_Init+0x12c>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000a16:	f107 0209 	add.w	r2, r7, #9
 8000a1a:	4b3d      	ldr	r3, [pc, #244]	; (8000b10 <MX_BlueNRG_MS_Init+0x130>)
 8000a1c:	2106      	movs	r1, #6
 8000a1e:	2080      	movs	r0, #128	; 0x80
 8000a20:	f006 f974 	bl	8006d0c <aci_hal_read_config_data>
 8000a24:	4603      	mov	r3, r0
 8000a26:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000a28:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <MX_BlueNRG_MS_Init+0x130>)
 8000a2a:	795b      	ldrb	r3, [r3, #5]
 8000a2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000a30:	2bc0      	cmp	r3, #192	; 0xc0
 8000a32:	d000      	beq.n	8000a36 <MX_BlueNRG_MS_Init+0x56>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000a34:	e7fe      	b.n	8000a34 <MX_BlueNRG_MS_Init+0x54>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000a36:	f005 ff29 	bl	800688c <aci_gatt_init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <MX_BlueNRG_MS_Init+0x12c>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d110      	bne.n	8000a68 <MX_BlueNRG_MS_Init+0x88>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a46:	f107 020e 	add.w	r2, r7, #14
 8000a4a:	f107 030a 	add.w	r3, r7, #10
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	4613      	mov	r3, r2
 8000a58:	2207      	movs	r2, #7
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f005 fce3 	bl	8006428 <aci_gap_init_IDB05A1>
 8000a62:	4603      	mov	r3, r0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	e00a      	b.n	8000a7e <MX_BlueNRG_MS_Init+0x9e>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a68:	f107 030a 	add.w	r3, r7, #10
 8000a6c:	f107 020c 	add.w	r2, r7, #12
 8000a70:	f107 010e 	add.w	r1, r7, #14
 8000a74:	2001      	movs	r0, #1
 8000a76:	f005 fd27 	bl	80064c8 <aci_gap_init_IDB04A1>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a7e:	89fc      	ldrh	r4, [r7, #14]
 8000a80:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff fba4 	bl	80001d0 <strlen>
 8000a88:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	4613      	mov	r3, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	4629      	mov	r1, r5
 8000a96:	4620      	mov	r0, r4
 8000a98:	f006 f879 	bl	8006b8e <aci_gatt_update_char_value>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	613b      	str	r3, [r7, #16]
  if (ret) {
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d000      	beq.n	8000aa8 <MX_BlueNRG_MS_Init+0xc8>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8000aa6:	e7fe      	b.n	8000aa6 <MX_BlueNRG_MS_Init+0xc6>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	9303      	str	r3, [sp, #12]
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <MX_BlueNRG_MS_Init+0x134>)
 8000aae:	9302      	str	r3, [sp, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	9301      	str	r3, [sp, #4]
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2307      	movs	r3, #7
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f005 fe3b 	bl	800673a <aci_gap_set_auth_requirement>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d000      	beq.n	8000ad0 <MX_BlueNRG_MS_Init+0xf0>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8000ace:	e7fe      	b.n	8000ace <MX_BlueNRG_MS_Init+0xee>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8000ad0:	f001 f822 	bl	8001b18 <Add_HWServW2ST_Service>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d000      	beq.n	8000ae0 <MX_BlueNRG_MS_Init+0x100>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8000ade:	e7fe      	b.n	8000ade <MX_BlueNRG_MS_Init+0xfe>
  }

  ret = Add_SWServW2ST_Service();
 8000ae0:	f001 f8f2 	bl	8001cc8 <Add_SWServW2ST_Service>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d000      	beq.n	8000af0 <MX_BlueNRG_MS_Init+0x110>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8000aee:	e7fe      	b.n	8000aee <MX_BlueNRG_MS_Init+0x10e>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000af0:	2104      	movs	r1, #4
 8000af2:	2001      	movs	r0, #1
 8000af4:	f006 f95f 	bl	8006db6 <aci_hal_set_tx_power_level>
 8000af8:	4603      	mov	r3, r0
 8000afa:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bdb0      	pop	{r4, r5, r7, pc}
 8000b04:	080088a4 	.word	0x080088a4
 8000b08:	08002285 	.word	0x08002285
 8000b0c:	200000b4 	.word	0x200000b4
 8000b10:	200004f4 	.word	0x200004f4
 8000b14:	0001e240 	.word	0x0001e240

08000b18 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000b1c:	f000 f804 	bl	8000b28 <User_Process>
  hci_user_evt_proc();
 8000b20:	f006 fc82 	bl	8007428 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <User_Process+0xb0>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d004      	beq.n	8000b42 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8000b38:	f001 fb30 	bl	800219c <Set_DeviceConnectable>
    set_connectable = FALSE;
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <User_Process+0xb0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
    /* Debouncing */
    HAL_Delay(50);
#endif
   // BSP_LED_Toggle(LED2);

    if (connected)
 8000b42:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <User_Process+0xb4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d042      	beq.n	8000bd0 <User_Process+0xa8>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8000b4a:	f002 fe35 	bl	80037b8 <HAL_GetTick>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f006 fe39 	bl	80077c8 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8000b56:	463a      	mov	r2, r7
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f84b 	bl	8000bf8 <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8000b62:	edd7 7a00 	vldr	s15, [r7]
 8000b66:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000be0 <User_Process+0xb8>
 8000b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b6e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000b72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b76:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b82:	ee17 3a90 	vmov	r3, s15
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	4619      	mov	r1, r3
 8000b8a:	ee16 0a90 	vmov	r0, s13
 8000b8e:	f001 fabf 	bl	8002110 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <User_Process+0xbc>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f8b8 	bl	8000d0c <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 8000b9c:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <User_Process+0xc0>)
 8000b9e:	4913      	ldr	r1, [pc, #76]	; (8000bec <User_Process+0xc4>)
 8000ba0:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <User_Process+0xc8>)
 8000ba2:	f001 f925 	bl	8001df0 <Acc_Update>
      Quat_Update(&q_axes);
 8000ba6:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <User_Process+0xcc>)
 8000ba8:	f001 f9ac 	bl	8001f04 <Quat_Update>

      counter ++;
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <User_Process+0xbc>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <User_Process+0xbc>)
 8000bb4:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <User_Process+0xbc>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b28      	cmp	r3, #40	; 0x28
 8000bbc:	d104      	bne.n	8000bc8 <User_Process+0xa0>
        counter = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <User_Process+0xbc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8000bc4:	f000 febe 	bl	8001944 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8000bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bcc:	f002 fe00 	bl	80037d0 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	200000c8 	.word	0x200000c8
 8000be0:	42c80000 	.word	0x42c80000
 8000be4:	200000c0 	.word	0x200000c0
 8000be8:	200000e4 	.word	0x200000e4
 8000bec:	200000d8 	.word	0x200000d8
 8000bf0:	200000cc 	.word	0x200000cc
 8000bf4:	200000f0 	.word	0x200000f0

08000bf8 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	 BSP_TSENSOR_Init();
 8000c02:	f002 fac1 	bl	8003188 <BSP_TSENSOR_Init>
	 BSP_PSENSOR_Init();
 8000c06:	f002 fa91 	bl	800312c <BSP_PSENSOR_Init>
	 temperature_value = BSP_TSENSOR_ReadTemp();
 8000c0a:	f002 fad9 	bl	80031c0 <BSP_TSENSOR_ReadTemp>
 8000c0e:	eef0 7a40 	vmov.f32	s15, s0
 8000c12:	4b3b      	ldr	r3, [pc, #236]	; (8000d00 <Set_Random_Environmental_Values+0x108>)
 8000c14:	edc3 7a00 	vstr	s15, [r3]
	 pressure_value = BSP_PSENSOR_ReadPressure();
 8000c18:	f002 faa8 	bl	800316c <BSP_PSENSOR_ReadPressure>
 8000c1c:	eef0 7a40 	vmov.f32	s15, s0
 8000c20:	4b38      	ldr	r3, [pc, #224]	; (8000d04 <Set_Random_Environmental_Values+0x10c>)
 8000c22:	edc3 7a00 	vstr	s15, [r3]
	 int preInt1 = pressure_value;
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <Set_Random_Environmental_Values+0x10c>)
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c30:	ee17 3a90 	vmov	r3, s15
 8000c34:	61fb      	str	r3, [r7, #28]
	 float preFrac = pressure_value - preInt1;
 8000c36:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <Set_Random_Environmental_Values+0x10c>)
 8000c38:	ed93 7a00 	vldr	s14, [r3]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	ee07 3a90 	vmov	s15, r3
 8000c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c4a:	edc7 7a06 	vstr	s15, [r7, #24]
	 int preInt2 = trunc(preFrac * 100);
 8000c4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c52:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000d08 <Set_Random_Environmental_Values+0x110>
 8000c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c5a:	ee17 0a90 	vmov	r0, s15
 8000c5e:	f7ff fc73 	bl	8000548 <__aeabi_f2d>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	ec43 2b10 	vmov	d0, r2, r3
 8000c6a:	f007 fddd 	bl	8008828 <trunc>
 8000c6e:	ec53 2b10 	vmov	r2, r3, d0
 8000c72:	4610      	mov	r0, r2
 8000c74:	4619      	mov	r1, r3
 8000c76:	f7ff fcbf 	bl	80005f8 <__aeabi_d2iz>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	617b      	str	r3, [r7, #20]

	 int tempInt1 = temperature_value;
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <Set_Random_Environmental_Values+0x108>)
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c88:	ee17 3a90 	vmov	r3, s15
 8000c8c:	613b      	str	r3, [r7, #16]
	 float tempFrac = temperature_value - tempInt1;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <Set_Random_Environmental_Values+0x108>)
 8000c90:	ed93 7a00 	vldr	s14, [r3]
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	ee07 3a90 	vmov	s15, r3
 8000c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ca2:	edc7 7a03 	vstr	s15, [r7, #12]
	 int tempInt2 = trunc(tempFrac * 100);
 8000ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000caa:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000d08 <Set_Random_Environmental_Values+0x110>
 8000cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb2:	ee17 0a90 	vmov	r0, s15
 8000cb6:	f7ff fc47 	bl	8000548 <__aeabi_f2d>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	ec43 2b10 	vmov	d0, r2, r3
 8000cc2:	f007 fdb1 	bl	8008828 <trunc>
 8000cc6:	ec53 2b10 	vmov	r2, r3, d0
 8000cca:	4610      	mov	r0, r2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f7ff fc93 	bl	80005f8 <__aeabi_d2iz>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60bb      	str	r3, [r7, #8]
	 *data_t = tempInt1;
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	edc3 7a00 	vstr	s15, [r3]
	 *data_p =preInt1;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	ee07 3a90 	vmov	s15, r3
 8000cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	edc3 7a00 	vstr	s15, [r3]
//  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
//  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
}
 8000cf6:	bf00      	nop
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000bc 	.word	0x200000bc
 8000d04:	200000b8 	.word	0x200000b8
 8000d08:	42c80000 	.word	0x42c80000

08000d0c <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8000d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d10:	b0e9      	sub	sp, #420	; 0x1a4
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8000d18:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000d1c:	2b13      	cmp	r3, #19
 8000d1e:	f200 82ef 	bhi.w	8001300 <Set_Random_Motion_Values+0x5f4>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8000d22:	f006 fd7f 	bl	8007824 <rand>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000d2e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000d32:	461a      	mov	r2, r3
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	fb02 f501 	mul.w	r5, r2, r1
 8000d3c:	fb00 f403 	mul.w	r4, r0, r3
 8000d40:	442c      	add	r4, r5
 8000d42:	fba0 0102 	umull	r0, r1, r0, r2
 8000d46:	1863      	adds	r3, r4, r1
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	1894      	adds	r4, r2, r2
 8000d50:	65bc      	str	r4, [r7, #88]	; 0x58
 8000d52:	415b      	adcs	r3, r3
 8000d54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000d5a:	eb12 0a00 	adds.w	sl, r2, r0
 8000d5e:	eb43 0b01 	adc.w	fp, r3, r1
 8000d62:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	4650      	mov	r0, sl
 8000d6c:	4659      	mov	r1, fp
 8000d6e:	f7ff fcbb 	bl	80006e8 <__aeabi_uldivmod>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	f112 010a 	adds.w	r1, r2, #10
 8000d7a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8000d7e:	f143 0300 	adc.w	r3, r3, #0
 8000d82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000d86:	4be2      	ldr	r3, [pc, #904]	; (8001110 <Set_Random_Motion_Values+0x404>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d90:	4413      	add	r3, r2
 8000d92:	461a      	mov	r2, r3
 8000d94:	4bde      	ldr	r3, [pc, #888]	; (8001110 <Set_Random_Motion_Values+0x404>)
 8000d96:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8000d98:	f006 fd44 	bl	8007824 <rand>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000da4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000da8:	461a      	mov	r2, r3
 8000daa:	f04f 0300 	mov.w	r3, #0
 8000dae:	fb02 f501 	mul.w	r5, r2, r1
 8000db2:	fb00 f403 	mul.w	r4, r0, r3
 8000db6:	442c      	add	r4, r5
 8000db8:	fba0 8902 	umull	r8, r9, r0, r2
 8000dbc:	eb04 0309 	add.w	r3, r4, r9
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	4642      	mov	r2, r8
 8000dc4:	464b      	mov	r3, r9
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	f04f 0100 	mov.w	r1, #0
 8000dce:	0099      	lsls	r1, r3, #2
 8000dd0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000dd4:	0090      	lsls	r0, r2, #2
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	eb12 0108 	adds.w	r1, r2, r8
 8000dde:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8000de2:	eb43 0309 	adc.w	r3, r3, r9
 8000de6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000dea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000dee:	f04f 0300 	mov.w	r3, #0
 8000df2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8000df6:	f7ff fc77 	bl	80006e8 <__aeabi_uldivmod>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f06f 0209 	mvn.w	r2, #9
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	1a14      	subs	r4, r2, r0
 8000e0c:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8000e10:	eb63 0301 	sbc.w	r3, r3, r1
 8000e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000e18:	4bbd      	ldr	r3, [pc, #756]	; (8001110 <Set_Random_Motion_Values+0x404>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e22:	4413      	add	r3, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4bba      	ldr	r3, [pc, #744]	; (8001110 <Set_Random_Motion_Values+0x404>)
 8000e28:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8000e2a:	f006 fcfb 	bl	8007824 <rand>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4618      	mov	r0, r3
 8000e32:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e36:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	fb02 f501 	mul.w	r5, r2, r1
 8000e44:	fb00 f403 	mul.w	r4, r0, r3
 8000e48:	442c      	add	r4, r5
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	eb04 0309 	add.w	r3, r4, r9
 8000e52:	4699      	mov	r9, r3
 8000e54:	4642      	mov	r2, r8
 8000e56:	464b      	mov	r3, r9
 8000e58:	f04f 0000 	mov.w	r0, #0
 8000e5c:	f04f 0100 	mov.w	r1, #0
 8000e60:	00d9      	lsls	r1, r3, #3
 8000e62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000e66:	00d0      	lsls	r0, r2, #3
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	ebb2 0108 	subs.w	r1, r2, r8
 8000e70:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8000e74:	eb63 0309 	sbc.w	r3, r3, r9
 8000e78:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8000e7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8000e88:	f7ff fc2e 	bl	80006e8 <__aeabi_uldivmod>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	f112 010a 	adds.w	r1, r2, #10
 8000e94:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8000e98:	f143 0300 	adc.w	r3, r3, #0
 8000e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000ea0:	4b9b      	ldr	r3, [pc, #620]	; (8001110 <Set_Random_Motion_Values+0x404>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000eaa:	4413      	add	r3, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b98      	ldr	r3, [pc, #608]	; (8001110 <Set_Random_Motion_Values+0x404>)
 8000eb0:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8000eb2:	f006 fcb7 	bl	8007824 <rand>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000ebe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	fb02 f501 	mul.w	r5, r2, r1
 8000ecc:	fb00 f403 	mul.w	r4, r0, r3
 8000ed0:	442c      	add	r4, r5
 8000ed2:	fba0 2302 	umull	r2, r3, r0, r2
 8000ed6:	18e1      	adds	r1, r4, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	1891      	adds	r1, r2, r2
 8000edc:	6539      	str	r1, [r7, #80]	; 0x50
 8000ede:	415b      	adcs	r3, r3
 8000ee0:	657b      	str	r3, [r7, #84]	; 0x54
 8000ee2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000ee6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	f7ff fbfb 	bl	80006e8 <__aeabi_uldivmod>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8000efa:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8000efe:	f143 0300 	adc.w	r3, r3, #0
 8000f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000f06:	4b83      	ldr	r3, [pc, #524]	; (8001114 <Set_Random_Motion_Values+0x408>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f10:	4413      	add	r3, r2
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b7f      	ldr	r3, [pc, #508]	; (8001114 <Set_Random_Motion_Values+0x408>)
 8000f16:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8000f18:	f006 fc84 	bl	8007824 <rand>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000f24:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000f28:	461a      	mov	r2, r3
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	fb02 f501 	mul.w	r5, r2, r1
 8000f32:	fb00 f403 	mul.w	r4, r0, r3
 8000f36:	442c      	add	r4, r5
 8000f38:	fba0 2302 	umull	r2, r3, r0, r2
 8000f3c:	18e1      	adds	r1, r4, r3
 8000f3e:	460b      	mov	r3, r1
 8000f40:	f04f 0000 	mov.w	r0, #0
 8000f44:	f04f 0100 	mov.w	r1, #0
 8000f48:	0099      	lsls	r1, r3, #2
 8000f4a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000f4e:	0090      	lsls	r0, r2, #2
 8000f50:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	f7ff fbc6 	bl	80006e8 <__aeabi_uldivmod>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	1a14      	subs	r4, r2, r0
 8000f6e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8000f72:	eb63 0301 	sbc.w	r3, r3, r1
 8000f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f7a:	4b66      	ldr	r3, [pc, #408]	; (8001114 <Set_Random_Motion_Values+0x408>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f84:	4413      	add	r3, r2
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b62      	ldr	r3, [pc, #392]	; (8001114 <Set_Random_Motion_Values+0x408>)
 8000f8a:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8000f8c:	f006 fc4a 	bl	8007824 <rand>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4618      	mov	r0, r3
 8000f94:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000f98:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	fb02 f501 	mul.w	r5, r2, r1
 8000fa6:	fb00 f403 	mul.w	r4, r0, r3
 8000faa:	442c      	add	r4, r5
 8000fac:	fba0 0102 	umull	r0, r1, r0, r2
 8000fb0:	1863      	adds	r3, r4, r1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	1894      	adds	r4, r2, r2
 8000fba:	64bc      	str	r4, [r7, #72]	; 0x48
 8000fbc:	415b      	adcs	r3, r3
 8000fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000fc4:	1812      	adds	r2, r2, r0
 8000fc6:	eb41 0303 	adc.w	r3, r1, r3
 8000fca:	1891      	adds	r1, r2, r2
 8000fcc:	6439      	str	r1, [r7, #64]	; 0x40
 8000fce:	415b      	adcs	r3, r3
 8000fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8000fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	f7ff fb81 	bl	80006e8 <__aeabi_uldivmod>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8000fee:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8000ff2:	f143 0300 	adc.w	r3, r3, #0
 8000ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000ffa:	4b46      	ldr	r3, [pc, #280]	; (8001114 <Set_Random_Motion_Values+0x408>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	461a      	mov	r2, r3
 8001000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001004:	4413      	add	r3, r2
 8001006:	461a      	mov	r2, r3
 8001008:	4b42      	ldr	r3, [pc, #264]	; (8001114 <Set_Random_Motion_Values+0x408>)
 800100a:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800100c:	f006 fc0a 	bl	8007824 <rand>
 8001010:	4603      	mov	r3, r0
 8001012:	4618      	mov	r0, r3
 8001014:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001018:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800101c:	461a      	mov	r2, r3
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	fb02 f501 	mul.w	r5, r2, r1
 8001026:	fb00 f403 	mul.w	r4, r0, r3
 800102a:	442c      	add	r4, r5
 800102c:	fba0 0102 	umull	r0, r1, r0, r2
 8001030:	1863      	adds	r3, r4, r1
 8001032:	4619      	mov	r1, r3
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	1894      	adds	r4, r2, r2
 800103a:	63bc      	str	r4, [r7, #56]	; 0x38
 800103c:	415b      	adcs	r3, r3
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001044:	1814      	adds	r4, r2, r0
 8001046:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 800104a:	414b      	adcs	r3, r1
 800104c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001050:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800105c:	f7ff fb44 	bl	80006e8 <__aeabi_uldivmod>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	1cd1      	adds	r1, r2, #3
 8001066:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800106a:	f143 0300 	adc.w	r3, r3, #0
 800106e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <Set_Random_Motion_Values+0x40c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800107c:	4413      	add	r3, r2
 800107e:	461a      	mov	r2, r3
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <Set_Random_Motion_Values+0x40c>)
 8001082:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001084:	f006 fbce 	bl	8007824 <rand>
 8001088:	4603      	mov	r3, r0
 800108a:	4618      	mov	r0, r3
 800108c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001090:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001094:	461a      	mov	r2, r3
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	fb02 f501 	mul.w	r5, r2, r1
 800109e:	fb00 f403 	mul.w	r4, r0, r3
 80010a2:	442c      	add	r4, r5
 80010a4:	fba0 2302 	umull	r2, r3, r0, r2
 80010a8:	18e1      	adds	r1, r4, r3
 80010aa:	460b      	mov	r3, r1
 80010ac:	f04f 0000 	mov.w	r0, #0
 80010b0:	f04f 0100 	mov.w	r1, #0
 80010b4:	0099      	lsls	r1, r3, #2
 80010b6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80010ba:	0090      	lsls	r0, r2, #2
 80010bc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80010c0:	f04f 0300 	mov.w	r3, #0
 80010c4:	f7ff fb10 	bl	80006e8 <__aeabi_uldivmod>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f06f 0202 	mvn.w	r2, #2
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	1a14      	subs	r4, r2, r0
 80010da:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80010de:	eb63 0301 	sbc.w	r3, r3, r1
 80010e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <Set_Random_Motion_Values+0x40c>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010f0:	4413      	add	r3, r2
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <Set_Random_Motion_Values+0x40c>)
 80010f6:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80010f8:	f006 fb94 	bl	8007824 <rand>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4618      	mov	r0, r3
 8001100:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001104:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001108:	461a      	mov	r2, r3
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	e005      	b.n	800111c <Set_Random_Motion_Values+0x410>
 8001110:	200000cc 	.word	0x200000cc
 8001114:	200000d8 	.word	0x200000d8
 8001118:	200000e4 	.word	0x200000e4
 800111c:	fb02 f501 	mul.w	r5, r2, r1
 8001120:	fb00 f403 	mul.w	r4, r0, r3
 8001124:	442c      	add	r4, r5
 8001126:	fba0 8902 	umull	r8, r9, r0, r2
 800112a:	eb04 0309 	add.w	r3, r4, r9
 800112e:	4699      	mov	r9, r3
 8001130:	4642      	mov	r2, r8
 8001132:	464b      	mov	r3, r9
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	f04f 0100 	mov.w	r1, #0
 800113c:	0099      	lsls	r1, r3, #2
 800113e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001142:	0090      	lsls	r0, r2, #2
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	eb12 0108 	adds.w	r1, r2, r8
 800114c:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8001150:	eb43 0309 	adc.w	r3, r3, r9
 8001154:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001158:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001164:	f7ff fac0 	bl	80006e8 <__aeabi_uldivmod>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	1cd1      	adds	r1, r2, #3
 800116e:	67b9      	str	r1, [r7, #120]	; 0x78
 8001170:	f143 0300 	adc.w	r3, r3, #0
 8001174:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001176:	4b60      	ldr	r3, [pc, #384]	; (80012f8 <Set_Random_Motion_Values+0x5ec>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	461a      	mov	r2, r3
 800117c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800117e:	4413      	add	r3, r2
 8001180:	461a      	mov	r2, r3
 8001182:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <Set_Random_Motion_Values+0x5ec>)
 8001184:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001186:	f006 fb4d 	bl	8007824 <rand>
 800118a:	4603      	mov	r3, r0
 800118c:	4618      	mov	r0, r3
 800118e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001192:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001196:	461a      	mov	r2, r3
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	fb02 f501 	mul.w	r5, r2, r1
 80011a0:	fb00 f403 	mul.w	r4, r0, r3
 80011a4:	442c      	add	r4, r5
 80011a6:	fba0 0102 	umull	r0, r1, r0, r2
 80011aa:	1863      	adds	r3, r4, r1
 80011ac:	4619      	mov	r1, r3
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	1894      	adds	r4, r2, r2
 80011b4:	633c      	str	r4, [r7, #48]	; 0x30
 80011b6:	415b      	adcs	r3, r3
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
 80011ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011be:	1814      	adds	r4, r2, r0
 80011c0:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 80011c4:	414b      	adcs	r3, r1
 80011c6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80011ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80011d6:	f7ff fa87 	bl	80006e8 <__aeabi_uldivmod>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80011e2:	6739      	str	r1, [r7, #112]	; 0x70
 80011e4:	f143 0300 	adc.w	r3, r3, #0
 80011e8:	677b      	str	r3, [r7, #116]	; 0x74
 80011ea:	4b44      	ldr	r3, [pc, #272]	; (80012fc <Set_Random_Motion_Values+0x5f0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <Set_Random_Motion_Values+0x5f0>)
 80011f8:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80011fa:	f006 fb13 	bl	8007824 <rand>
 80011fe:	4603      	mov	r3, r0
 8001200:	4618      	mov	r0, r3
 8001202:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001206:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800120a:	461a      	mov	r2, r3
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	fb02 f501 	mul.w	r5, r2, r1
 8001214:	fb00 f403 	mul.w	r4, r0, r3
 8001218:	192e      	adds	r6, r5, r4
 800121a:	fba0 4502 	umull	r4, r5, r0, r2
 800121e:	1973      	adds	r3, r6, r5
 8001220:	461d      	mov	r5, r3
 8001222:	4622      	mov	r2, r4
 8001224:	462b      	mov	r3, r5
 8001226:	f04f 0000 	mov.w	r0, #0
 800122a:	f04f 0100 	mov.w	r1, #0
 800122e:	0099      	lsls	r1, r3, #2
 8001230:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001234:	0090      	lsls	r0, r2, #2
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	1911      	adds	r1, r2, r4
 800123c:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8001240:	416b      	adcs	r3, r5
 8001242:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001246:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8001252:	f7ff fa49 	bl	80006e8 <__aeabi_uldivmod>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800125e:	66b9      	str	r1, [r7, #104]	; 0x68
 8001260:	f143 0300 	adc.w	r3, r3, #0
 8001264:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <Set_Random_Motion_Values+0x5f0>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	461a      	mov	r2, r3
 800126c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800126e:	4413      	add	r3, r2
 8001270:	461a      	mov	r2, r3
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <Set_Random_Motion_Values+0x5f0>)
 8001274:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001276:	f006 fad5 	bl	8007824 <rand>
 800127a:	4603      	mov	r3, r0
 800127c:	4618      	mov	r0, r3
 800127e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001282:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001286:	461a      	mov	r2, r3
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	fb02 f501 	mul.w	r5, r2, r1
 8001290:	fb00 f403 	mul.w	r4, r0, r3
 8001294:	192e      	adds	r6, r5, r4
 8001296:	fba0 4502 	umull	r4, r5, r0, r2
 800129a:	1973      	adds	r3, r6, r5
 800129c:	461d      	mov	r5, r3
 800129e:	4622      	mov	r2, r4
 80012a0:	462b      	mov	r3, r5
 80012a2:	f04f 0000 	mov.w	r0, #0
 80012a6:	f04f 0100 	mov.w	r1, #0
 80012aa:	00d9      	lsls	r1, r3, #3
 80012ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80012b0:	00d0      	lsls	r0, r2, #3
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	1b11      	subs	r1, r2, r4
 80012b8:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 80012bc:	eb63 0305 	sbc.w	r3, r3, r5
 80012c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80012c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80012d0:	f7ff fa0a 	bl	80006e8 <__aeabi_uldivmod>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80012dc:	6639      	str	r1, [r7, #96]	; 0x60
 80012de:	f143 0300 	adc.w	r3, r3, #0
 80012e2:	667b      	str	r3, [r7, #100]	; 0x64
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <Set_Random_Motion_Values+0x5f0>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	461a      	mov	r2, r3
 80012ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b02      	ldr	r3, [pc, #8]	; (80012fc <Set_Random_Motion_Values+0x5f0>)
 80012f2:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 80012f4:	e31b      	b.n	800192e <Set_Random_Motion_Values+0xc22>
 80012f6:	bf00      	nop
 80012f8:	200000e4 	.word	0x200000e4
 80012fc:	200000f0 	.word	0x200000f0
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001300:	f006 fa90 	bl	8007824 <rand>
 8001304:	4603      	mov	r3, r0
 8001306:	4618      	mov	r0, r3
 8001308:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800130c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001310:	461a      	mov	r2, r3
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	fb02 f501 	mul.w	r5, r2, r1
 800131a:	fb00 f403 	mul.w	r4, r0, r3
 800131e:	442c      	add	r4, r5
 8001320:	fba0 0102 	umull	r0, r1, r0, r2
 8001324:	1863      	adds	r3, r4, r1
 8001326:	4619      	mov	r1, r3
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	1894      	adds	r4, r2, r2
 800132e:	62bc      	str	r4, [r7, #40]	; 0x28
 8001330:	415b      	adcs	r3, r3
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001338:	eb12 0800 	adds.w	r8, r2, r0
 800133c:	eb43 0901 	adc.w	r9, r3, r1
 8001340:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	4640      	mov	r0, r8
 800134a:	4649      	mov	r1, r9
 800134c:	f7ff f9cc 	bl	80006e8 <__aeabi_uldivmod>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f06f 0209 	mvn.w	r2, #9
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	1a14      	subs	r4, r2, r0
 8001362:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8001366:	eb63 0301 	sbc.w	r3, r3, r1
 800136a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800136e:	4be6      	ldr	r3, [pc, #920]	; (8001708 <Set_Random_Motion_Values+0x9fc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001378:	4413      	add	r3, r2
 800137a:	461a      	mov	r2, r3
 800137c:	4be2      	ldr	r3, [pc, #904]	; (8001708 <Set_Random_Motion_Values+0x9fc>)
 800137e:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001380:	f006 fa50 	bl	8007824 <rand>
 8001384:	4603      	mov	r3, r0
 8001386:	4618      	mov	r0, r3
 8001388:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800138c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001390:	461a      	mov	r2, r3
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	fb02 f501 	mul.w	r5, r2, r1
 800139a:	fb00 f403 	mul.w	r4, r0, r3
 800139e:	442c      	add	r4, r5
 80013a0:	fba0 8902 	umull	r8, r9, r0, r2
 80013a4:	eb04 0309 	add.w	r3, r4, r9
 80013a8:	4699      	mov	r9, r3
 80013aa:	4642      	mov	r2, r8
 80013ac:	464b      	mov	r3, r9
 80013ae:	f04f 0000 	mov.w	r0, #0
 80013b2:	f04f 0100 	mov.w	r1, #0
 80013b6:	0099      	lsls	r1, r3, #2
 80013b8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80013bc:	0090      	lsls	r0, r2, #2
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	eb12 0108 	adds.w	r1, r2, r8
 80013c6:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80013ca:	eb43 0309 	adc.w	r3, r3, r9
 80013ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80013d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80013de:	f7ff f983 	bl	80006e8 <__aeabi_uldivmod>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	f112 010a 	adds.w	r1, r2, #10
 80013ea:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80013ee:	f143 0300 	adc.w	r3, r3, #0
 80013f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80013f6:	4bc4      	ldr	r3, [pc, #784]	; (8001708 <Set_Random_Motion_Values+0x9fc>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	461a      	mov	r2, r3
 80013fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001400:	4413      	add	r3, r2
 8001402:	461a      	mov	r2, r3
 8001404:	4bc0      	ldr	r3, [pc, #768]	; (8001708 <Set_Random_Motion_Values+0x9fc>)
 8001406:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001408:	f006 fa0c 	bl	8007824 <rand>
 800140c:	4603      	mov	r3, r0
 800140e:	4618      	mov	r0, r3
 8001410:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001414:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001418:	461a      	mov	r2, r3
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	fb02 f501 	mul.w	r5, r2, r1
 8001422:	fb00 f403 	mul.w	r4, r0, r3
 8001426:	442c      	add	r4, r5
 8001428:	fba0 8902 	umull	r8, r9, r0, r2
 800142c:	eb04 0309 	add.w	r3, r4, r9
 8001430:	4699      	mov	r9, r3
 8001432:	4642      	mov	r2, r8
 8001434:	464b      	mov	r3, r9
 8001436:	f04f 0000 	mov.w	r0, #0
 800143a:	f04f 0100 	mov.w	r1, #0
 800143e:	00d9      	lsls	r1, r3, #3
 8001440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001444:	00d0      	lsls	r0, r2, #3
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	ebb2 0108 	subs.w	r1, r2, r8
 800144e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8001452:	eb63 0309 	sbc.w	r3, r3, r9
 8001456:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800145a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8001466:	f7ff f93f 	bl	80006e8 <__aeabi_uldivmod>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f06f 0209 	mvn.w	r2, #9
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	1a14      	subs	r4, r2, r0
 800147c:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8001480:	eb63 0301 	sbc.w	r3, r3, r1
 8001484:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001488:	4b9f      	ldr	r3, [pc, #636]	; (8001708 <Set_Random_Motion_Values+0x9fc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	461a      	mov	r2, r3
 800148e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001492:	4413      	add	r3, r2
 8001494:	461a      	mov	r2, r3
 8001496:	4b9c      	ldr	r3, [pc, #624]	; (8001708 <Set_Random_Motion_Values+0x9fc>)
 8001498:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 800149a:	f006 f9c3 	bl	8007824 <rand>
 800149e:	4603      	mov	r3, r0
 80014a0:	4618      	mov	r0, r3
 80014a2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80014a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80014aa:	461a      	mov	r2, r3
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	fb02 f501 	mul.w	r5, r2, r1
 80014b4:	fb00 f403 	mul.w	r4, r0, r3
 80014b8:	442c      	add	r4, r5
 80014ba:	fba0 2302 	umull	r2, r3, r0, r2
 80014be:	18e1      	adds	r1, r4, r3
 80014c0:	460b      	mov	r3, r1
 80014c2:	1891      	adds	r1, r2, r2
 80014c4:	6239      	str	r1, [r7, #32]
 80014c6:	415b      	adcs	r3, r3
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	f7ff f907 	bl	80006e8 <__aeabi_uldivmod>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	1a14      	subs	r4, r2, r0
 80014ec:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 80014f0:	eb63 0301 	sbc.w	r3, r3, r1
 80014f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014f8:	4b84      	ldr	r3, [pc, #528]	; (800170c <Set_Random_Motion_Values+0xa00>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001502:	4413      	add	r3, r2
 8001504:	461a      	mov	r2, r3
 8001506:	4b81      	ldr	r3, [pc, #516]	; (800170c <Set_Random_Motion_Values+0xa00>)
 8001508:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800150a:	f006 f98b 	bl	8007824 <rand>
 800150e:	4603      	mov	r3, r0
 8001510:	4618      	mov	r0, r3
 8001512:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001516:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800151a:	461a      	mov	r2, r3
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	fb02 f501 	mul.w	r5, r2, r1
 8001524:	fb00 f403 	mul.w	r4, r0, r3
 8001528:	442c      	add	r4, r5
 800152a:	fba0 2302 	umull	r2, r3, r0, r2
 800152e:	18e1      	adds	r1, r4, r3
 8001530:	460b      	mov	r3, r1
 8001532:	f04f 0000 	mov.w	r0, #0
 8001536:	f04f 0100 	mov.w	r1, #0
 800153a:	0099      	lsls	r1, r3, #2
 800153c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001540:	0090      	lsls	r0, r2, #2
 8001542:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	f7ff f8cd 	bl	80006e8 <__aeabi_uldivmod>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001556:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800155a:	f143 0300 	adc.w	r3, r3, #0
 800155e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001562:	4b6a      	ldr	r3, [pc, #424]	; (800170c <Set_Random_Motion_Values+0xa00>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	461a      	mov	r2, r3
 8001568:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800156c:	4413      	add	r3, r2
 800156e:	461a      	mov	r2, r3
 8001570:	4b66      	ldr	r3, [pc, #408]	; (800170c <Set_Random_Motion_Values+0xa00>)
 8001572:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001574:	f006 f956 	bl	8007824 <rand>
 8001578:	4603      	mov	r3, r0
 800157a:	4618      	mov	r0, r3
 800157c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001580:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001584:	461a      	mov	r2, r3
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	fb02 f501 	mul.w	r5, r2, r1
 800158e:	fb00 f403 	mul.w	r4, r0, r3
 8001592:	442c      	add	r4, r5
 8001594:	fba0 0102 	umull	r0, r1, r0, r2
 8001598:	1863      	adds	r3, r4, r1
 800159a:	4619      	mov	r1, r3
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	1894      	adds	r4, r2, r2
 80015a2:	61bc      	str	r4, [r7, #24]
 80015a4:	415b      	adcs	r3, r3
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015ac:	1812      	adds	r2, r2, r0
 80015ae:	eb41 0303 	adc.w	r3, r1, r3
 80015b2:	1891      	adds	r1, r2, r2
 80015b4:	6139      	str	r1, [r7, #16]
 80015b6:	415b      	adcs	r3, r3
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	f7ff f88d 	bl	80006e8 <__aeabi_uldivmod>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	1a14      	subs	r4, r2, r0
 80015e0:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80015e4:	eb63 0301 	sbc.w	r3, r3, r1
 80015e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015ec:	4b47      	ldr	r3, [pc, #284]	; (800170c <Set_Random_Motion_Values+0xa00>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	461a      	mov	r2, r3
 80015f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80015f6:	4413      	add	r3, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b44      	ldr	r3, [pc, #272]	; (800170c <Set_Random_Motion_Values+0xa00>)
 80015fc:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80015fe:	f006 f911 	bl	8007824 <rand>
 8001602:	4603      	mov	r3, r0
 8001604:	4618      	mov	r0, r3
 8001606:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800160a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800160e:	461a      	mov	r2, r3
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	fb02 f501 	mul.w	r5, r2, r1
 8001618:	fb00 f403 	mul.w	r4, r0, r3
 800161c:	442c      	add	r4, r5
 800161e:	fba0 8902 	umull	r8, r9, r0, r2
 8001622:	eb04 0309 	add.w	r3, r4, r9
 8001626:	4699      	mov	r9, r3
 8001628:	4642      	mov	r2, r8
 800162a:	464b      	mov	r3, r9
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	00d9      	lsls	r1, r3, #3
 8001636:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800163a:	00d0      	lsls	r0, r2, #3
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	ebb2 0108 	subs.w	r1, r2, r8
 8001644:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8001648:	eb63 0309 	sbc.w	r3, r3, r9
 800164c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001650:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800165c:	f7ff f844 	bl	80006e8 <__aeabi_uldivmod>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f06f 0202 	mvn.w	r2, #2
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	1a14      	subs	r4, r2, r0
 8001672:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8001676:	eb63 0301 	sbc.w	r3, r3, r1
 800167a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <Set_Random_Motion_Values+0xa04>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001688:	4413      	add	r3, r2
 800168a:	461a      	mov	r2, r3
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <Set_Random_Motion_Values+0xa04>)
 800168e:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001690:	f006 f8c8 	bl	8007824 <rand>
 8001694:	4603      	mov	r3, r0
 8001696:	4618      	mov	r0, r3
 8001698:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800169c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80016a0:	461a      	mov	r2, r3
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	fb02 f501 	mul.w	r5, r2, r1
 80016aa:	fb00 f403 	mul.w	r4, r0, r3
 80016ae:	442c      	add	r4, r5
 80016b0:	fba0 8902 	umull	r8, r9, r0, r2
 80016b4:	eb04 0309 	add.w	r3, r4, r9
 80016b8:	4699      	mov	r9, r3
 80016ba:	4642      	mov	r2, r8
 80016bc:	464b      	mov	r3, r9
 80016be:	f04f 0000 	mov.w	r0, #0
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	00d9      	lsls	r1, r3, #3
 80016c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016cc:	00d0      	lsls	r0, r2, #3
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	eb12 0108 	adds.w	r1, r2, r8
 80016d6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80016da:	eb43 0309 	adc.w	r3, r3, r9
 80016de:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80016e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80016ee:	f7fe fffb 	bl	80006e8 <__aeabi_uldivmod>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	1cd1      	adds	r1, r2, #3
 80016f8:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80016fc:	f143 0300 	adc.w	r3, r3, #0
 8001700:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001704:	e006      	b.n	8001714 <Set_Random_Motion_Values+0xa08>
 8001706:	bf00      	nop
 8001708:	200000cc 	.word	0x200000cc
 800170c:	200000d8 	.word	0x200000d8
 8001710:	200000e4 	.word	0x200000e4
 8001714:	4b89      	ldr	r3, [pc, #548]	; (800193c <Set_Random_Motion_Values+0xc30>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	461a      	mov	r2, r3
 800171a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800171e:	4413      	add	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4b86      	ldr	r3, [pc, #536]	; (800193c <Set_Random_Motion_Values+0xc30>)
 8001724:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001726:	f006 f87d 	bl	8007824 <rand>
 800172a:	4603      	mov	r3, r0
 800172c:	4618      	mov	r0, r3
 800172e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001732:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001736:	461a      	mov	r2, r3
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	fb02 f501 	mul.w	r5, r2, r1
 8001740:	fb00 f403 	mul.w	r4, r0, r3
 8001744:	442c      	add	r4, r5
 8001746:	fba0 0102 	umull	r0, r1, r0, r2
 800174a:	1863      	adds	r3, r4, r1
 800174c:	4619      	mov	r1, r3
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	1894      	adds	r4, r2, r2
 8001754:	60bc      	str	r4, [r7, #8]
 8001756:	415b      	adcs	r3, r3
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800175e:	1814      	adds	r4, r2, r0
 8001760:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8001764:	414b      	adcs	r3, r1
 8001766:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800176a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001776:	f7fe ffb7 	bl	80006e8 <__aeabi_uldivmod>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f06f 0202 	mvn.w	r2, #2
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	1a14      	subs	r4, r2, r0
 800178c:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8001790:	eb63 0301 	sbc.w	r3, r3, r1
 8001794:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <Set_Random_Motion_Values+0xc30>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	461a      	mov	r2, r3
 800179e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017a2:	4413      	add	r3, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b65      	ldr	r3, [pc, #404]	; (800193c <Set_Random_Motion_Values+0xc30>)
 80017a8:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80017aa:	f006 f83b 	bl	8007824 <rand>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4618      	mov	r0, r3
 80017b2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80017b6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80017ba:	461a      	mov	r2, r3
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	fb02 f501 	mul.w	r5, r2, r1
 80017c4:	fb00 f403 	mul.w	r4, r0, r3
 80017c8:	442c      	add	r4, r5
 80017ca:	fba0 8902 	umull	r8, r9, r0, r2
 80017ce:	eb04 0309 	add.w	r3, r4, r9
 80017d2:	4699      	mov	r9, r3
 80017d4:	4642      	mov	r2, r8
 80017d6:	464b      	mov	r3, r9
 80017d8:	f04f 0000 	mov.w	r0, #0
 80017dc:	f04f 0100 	mov.w	r1, #0
 80017e0:	00d9      	lsls	r1, r3, #3
 80017e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017e6:	00d0      	lsls	r0, r2, #3
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	ebb2 0108 	subs.w	r1, r2, r8
 80017f0:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80017f4:	eb63 0309 	sbc.w	r3, r3, r9
 80017f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80017fc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8001808:	f7fe ff6e 	bl	80006e8 <__aeabi_uldivmod>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	f112 01c8 	adds.w	r1, r2, #200	; 0xc8
 8001814:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001818:	f143 0300 	adc.w	r3, r3, #0
 800181c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001820:	4b47      	ldr	r3, [pc, #284]	; (8001940 <Set_Random_Motion_Values+0xc34>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800182a:	4413      	add	r3, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4b44      	ldr	r3, [pc, #272]	; (8001940 <Set_Random_Motion_Values+0xc34>)
 8001830:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001832:	f005 fff7 	bl	8007824 <rand>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800183e:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8001842:	4608      	mov	r0, r1
 8001844:	f04f 0100 	mov.w	r1, #0
 8001848:	fb00 f503 	mul.w	r5, r0, r3
 800184c:	fb02 f401 	mul.w	r4, r2, r1
 8001850:	442c      	add	r4, r5
 8001852:	fba2 0100 	umull	r0, r1, r2, r0
 8001856:	1863      	adds	r3, r4, r1
 8001858:	4619      	mov	r1, r3
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	1894      	adds	r4, r2, r2
 8001860:	603c      	str	r4, [r7, #0]
 8001862:	415b      	adcs	r3, r3
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800186a:	1814      	adds	r4, r2, r0
 800186c:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8001870:	414b      	adcs	r3, r1
 8001872:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001876:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8001882:	f7fe ff31 	bl	80006e8 <__aeabi_uldivmod>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	f112 0196 	adds.w	r1, r2, #150	; 0x96
 800188e:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001892:	f143 0300 	adc.w	r3, r3, #0
 8001896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <Set_Random_Motion_Values+0xc34>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	461a      	mov	r2, r3
 80018a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <Set_Random_Motion_Values+0xc34>)
 80018aa:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80018ac:	f005 ffba 	bl	8007824 <rand>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4618      	mov	r0, r3
 80018b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80018b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80018bc:	461a      	mov	r2, r3
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	fb02 f501 	mul.w	r5, r2, r1
 80018c6:	fb00 f403 	mul.w	r4, r0, r3
 80018ca:	192e      	adds	r6, r5, r4
 80018cc:	fba0 4502 	umull	r4, r5, r0, r2
 80018d0:	1973      	adds	r3, r6, r5
 80018d2:	461d      	mov	r5, r3
 80018d4:	4622      	mov	r2, r4
 80018d6:	462b      	mov	r3, r5
 80018d8:	f04f 0000 	mov.w	r0, #0
 80018dc:	f04f 0100 	mov.w	r1, #0
 80018e0:	0099      	lsls	r1, r3, #2
 80018e2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80018e6:	0090      	lsls	r0, r2, #2
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	1911      	adds	r1, r2, r4
 80018ee:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80018f2:	416b      	adcs	r3, r5
 80018f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001904:	f7fe fef0 	bl	80006e8 <__aeabi_uldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	f112 010a 	adds.w	r1, r2, #10
 8001910:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001914:	f143 0300 	adc.w	r3, r3, #0
 8001918:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <Set_Random_Motion_Values+0xc34>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	461a      	mov	r2, r3
 8001922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001926:	4413      	add	r3, r2
 8001928:	461a      	mov	r2, r3
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <Set_Random_Motion_Values+0xc34>)
 800192c:	609a      	str	r2, [r3, #8]
}
 800192e:	bf00      	nop
 8001930:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8001934:	46bd      	mov	sp, r7
 8001936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800193a:	bf00      	nop
 800193c:	200000e4 	.word	0x200000e4
 8001940:	200000f0 	.word	0x200000f0

08001944 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8001948:	4b6e      	ldr	r3, [pc, #440]	; (8001b04 <Reset_Motion_Values+0x1c0>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b6e      	ldr	r3, [pc, #440]	; (8001b08 <Reset_Motion_Values+0x1c4>)
 800194e:	fb83 1302 	smull	r1, r3, r3, r2
 8001952:	11d9      	asrs	r1, r3, #7
 8001954:	17d3      	asrs	r3, r2, #31
 8001956:	1acb      	subs	r3, r1, r3
 8001958:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <Reset_Motion_Values+0x2a>
 8001966:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <Reset_Motion_Values+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	425b      	negs	r3, r3
 800196c:	e000      	b.n	8001970 <Reset_Motion_Values+0x2c>
 800196e:	230a      	movs	r3, #10
 8001970:	4a64      	ldr	r2, [pc, #400]	; (8001b04 <Reset_Motion_Values+0x1c0>)
 8001972:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001974:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <Reset_Motion_Values+0x1c0>)
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <Reset_Motion_Values+0x1c4>)
 800197a:	fb83 1302 	smull	r1, r3, r3, r2
 800197e:	11d9      	asrs	r1, r3, #7
 8001980:	17d3      	asrs	r3, r2, #31
 8001982:	1acb      	subs	r3, r1, r3
 8001984:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d103      	bne.n	800199a <Reset_Motion_Values+0x56>
 8001992:	4b5c      	ldr	r3, [pc, #368]	; (8001b04 <Reset_Motion_Values+0x1c0>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	425b      	negs	r3, r3
 8001998:	e001      	b.n	800199e <Reset_Motion_Values+0x5a>
 800199a:	f06f 0309 	mvn.w	r3, #9
 800199e:	4a59      	ldr	r2, [pc, #356]	; (8001b04 <Reset_Motion_Values+0x1c0>)
 80019a0:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 80019a2:	4b58      	ldr	r3, [pc, #352]	; (8001b04 <Reset_Motion_Values+0x1c0>)
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <Reset_Motion_Values+0x1c4>)
 80019a8:	fb83 1302 	smull	r1, r3, r3, r2
 80019ac:	11d9      	asrs	r1, r3, #7
 80019ae:	17d3      	asrs	r3, r2, #31
 80019b0:	1acb      	subs	r3, r1, r3
 80019b2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d103      	bne.n	80019c8 <Reset_Motion_Values+0x84>
 80019c0:	4b50      	ldr	r3, [pc, #320]	; (8001b04 <Reset_Motion_Values+0x1c0>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	425b      	negs	r3, r3
 80019c6:	e000      	b.n	80019ca <Reset_Motion_Values+0x86>
 80019c8:	230a      	movs	r3, #10
 80019ca:	4a4e      	ldr	r2, [pc, #312]	; (8001b04 <Reset_Motion_Values+0x1c0>)
 80019cc:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 80019ce:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <Reset_Motion_Values+0x1c4>)
 80019d4:	fb83 1302 	smull	r1, r3, r3, r2
 80019d8:	11d9      	asrs	r1, r3, #7
 80019da:	17d3      	asrs	r3, r2, #31
 80019dc:	1acb      	subs	r3, r1, r3
 80019de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d103      	bne.n	80019f4 <Reset_Motion_Values+0xb0>
 80019ec:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	425b      	negs	r3, r3
 80019f2:	e000      	b.n	80019f6 <Reset_Motion_Values+0xb2>
 80019f4:	2364      	movs	r3, #100	; 0x64
 80019f6:	4a45      	ldr	r2, [pc, #276]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 80019f8:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 80019fa:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <Reset_Motion_Values+0x1c4>)
 8001a00:	fb83 1302 	smull	r1, r3, r3, r2
 8001a04:	11d9      	asrs	r1, r3, #7
 8001a06:	17d3      	asrs	r3, r2, #31
 8001a08:	1acb      	subs	r3, r1, r3
 8001a0a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d103      	bne.n	8001a20 <Reset_Motion_Values+0xdc>
 8001a18:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	425b      	negs	r3, r3
 8001a1e:	e001      	b.n	8001a24 <Reset_Motion_Values+0xe0>
 8001a20:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001a24:	4a39      	ldr	r2, [pc, #228]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 8001a26:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8001a28:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <Reset_Motion_Values+0x1c4>)
 8001a2e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a32:	11d9      	asrs	r1, r3, #7
 8001a34:	17d3      	asrs	r3, r2, #31
 8001a36:	1acb      	subs	r3, r1, r3
 8001a38:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <Reset_Motion_Values+0x10a>
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	425b      	negs	r3, r3
 8001a4c:	e000      	b.n	8001a50 <Reset_Motion_Values+0x10c>
 8001a4e:	2364      	movs	r3, #100	; 0x64
 8001a50:	4a2e      	ldr	r2, [pc, #184]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 8001a52:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <Reset_Motion_Values+0x1c4>)
 8001a5a:	fb83 1302 	smull	r1, r3, r3, r2
 8001a5e:	11d9      	asrs	r1, r3, #7
 8001a60:	17d3      	asrs	r3, r2, #31
 8001a62:	1acb      	subs	r3, r1, r3
 8001a64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d103      	bne.n	8001a7a <Reset_Motion_Values+0x136>
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <Reset_Motion_Values+0x1cc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	425b      	negs	r3, r3
 8001a78:	e000      	b.n	8001a7c <Reset_Motion_Values+0x138>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <Reset_Motion_Values+0x1cc>)
 8001a7e:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <Reset_Motion_Values+0x1c4>)
 8001a86:	fb83 1302 	smull	r1, r3, r3, r2
 8001a8a:	11d9      	asrs	r1, r3, #7
 8001a8c:	17d3      	asrs	r3, r2, #31
 8001a8e:	1acb      	subs	r3, r1, r3
 8001a90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d103      	bne.n	8001aa6 <Reset_Motion_Values+0x162>
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <Reset_Motion_Values+0x1cc>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	e001      	b.n	8001aaa <Reset_Motion_Values+0x166>
 8001aa6:	f06f 0302 	mvn.w	r3, #2
 8001aaa:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <Reset_Motion_Values+0x1cc>)
 8001aac:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <Reset_Motion_Values+0x1c8>)
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <Reset_Motion_Values+0x1c4>)
 8001ab4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ab8:	11d9      	asrs	r1, r3, #7
 8001aba:	17d3      	asrs	r3, r2, #31
 8001abc:	1acb      	subs	r3, r1, r3
 8001abe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d103      	bne.n	8001ad4 <Reset_Motion_Values+0x190>
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <Reset_Motion_Values+0x1cc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	425b      	negs	r3, r3
 8001ad2:	e000      	b.n	8001ad6 <Reset_Motion_Values+0x192>
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <Reset_Motion_Values+0x1cc>)
 8001ad8:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <Reset_Motion_Values+0x1d0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	425b      	negs	r3, r3
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <Reset_Motion_Values+0x1d0>)
 8001ae2:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <Reset_Motion_Values+0x1d0>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	425b      	negs	r3, r3
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <Reset_Motion_Values+0x1d0>)
 8001aec:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <Reset_Motion_Values+0x1d0>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	425b      	negs	r3, r3
 8001af4:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <Reset_Motion_Values+0x1d0>)
 8001af6:	6093      	str	r3, [r2, #8]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200000cc 	.word	0x200000cc
 8001b08:	10624dd3 	.word	0x10624dd3
 8001b0c:	200000d8 	.word	0x200000d8
 8001b10:	200000e4 	.word	0x200000e4
 8001b14:	200000f0 	.word	0x200000f0

08001b18 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001b1e:	231b      	movs	r3, #27
 8001b20:	713b      	strb	r3, [r7, #4]
 8001b22:	23c5      	movs	r3, #197	; 0xc5
 8001b24:	717b      	strb	r3, [r7, #5]
 8001b26:	23d5      	movs	r3, #213	; 0xd5
 8001b28:	71bb      	strb	r3, [r7, #6]
 8001b2a:	23a5      	movs	r3, #165	; 0xa5
 8001b2c:	71fb      	strb	r3, [r7, #7]
 8001b2e:	2302      	movs	r3, #2
 8001b30:	723b      	strb	r3, [r7, #8]
 8001b32:	2300      	movs	r3, #0
 8001b34:	727b      	strb	r3, [r7, #9]
 8001b36:	23b4      	movs	r3, #180	; 0xb4
 8001b38:	72bb      	strb	r3, [r7, #10]
 8001b3a:	239a      	movs	r3, #154	; 0x9a
 8001b3c:	72fb      	strb	r3, [r7, #11]
 8001b3e:	23e1      	movs	r3, #225	; 0xe1
 8001b40:	733b      	strb	r3, [r7, #12]
 8001b42:	2311      	movs	r3, #17
 8001b44:	737b      	strb	r3, [r7, #13]
 8001b46:	2301      	movs	r3, #1
 8001b48:	73bb      	strb	r3, [r7, #14]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	743b      	strb	r3, [r7, #16]
 8001b52:	2300      	movs	r3, #0
 8001b54:	747b      	strb	r3, [r7, #17]
 8001b56:	2300      	movs	r3, #0
 8001b58:	74bb      	strb	r3, [r7, #18]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001b5e:	4b55      	ldr	r3, [pc, #340]	; (8001cb4 <Add_HWServW2ST_Service+0x19c>)
 8001b60:	461d      	mov	r5, r3
 8001b62:	1d3c      	adds	r4, r7, #4
 8001b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b66:	6028      	str	r0, [r5, #0]
 8001b68:	6069      	str	r1, [r5, #4]
 8001b6a:	60aa      	str	r2, [r5, #8]
 8001b6c:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001b6e:	4b52      	ldr	r3, [pc, #328]	; (8001cb8 <Add_HWServW2ST_Service+0x1a0>)
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2310      	movs	r3, #16
 8001b74:	2201      	movs	r2, #1
 8001b76:	494f      	ldr	r1, [pc, #316]	; (8001cb4 <Add_HWServW2ST_Service+0x19c>)
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f004 feaa 	bl	80068d2 <aci_gatt_add_serv>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <Add_HWServW2ST_Service+0x74>
    return BLE_STATUS_ERROR;
 8001b88:	2347      	movs	r3, #71	; 0x47
 8001b8a:	e08e      	b.n	8001caa <Add_HWServW2ST_Service+0x192>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001b8c:	231b      	movs	r3, #27
 8001b8e:	713b      	strb	r3, [r7, #4]
 8001b90:	23c5      	movs	r3, #197	; 0xc5
 8001b92:	717b      	strb	r3, [r7, #5]
 8001b94:	23d5      	movs	r3, #213	; 0xd5
 8001b96:	71bb      	strb	r3, [r7, #6]
 8001b98:	23a5      	movs	r3, #165	; 0xa5
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	723b      	strb	r3, [r7, #8]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	727b      	strb	r3, [r7, #9]
 8001ba4:	2336      	movs	r3, #54	; 0x36
 8001ba6:	72bb      	strb	r3, [r7, #10]
 8001ba8:	23ac      	movs	r3, #172	; 0xac
 8001baa:	72fb      	strb	r3, [r7, #11]
 8001bac:	23e1      	movs	r3, #225	; 0xe1
 8001bae:	733b      	strb	r3, [r7, #12]
 8001bb0:	2311      	movs	r3, #17
 8001bb2:	737b      	strb	r3, [r7, #13]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73bb      	strb	r3, [r7, #14]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	743b      	strb	r3, [r7, #16]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	747b      	strb	r3, [r7, #17]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	74bb      	strb	r3, [r7, #18]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8001bcc:	7cbb      	ldrb	r3, [r7, #18]
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8001bd6:	7cbb      	ldrb	r3, [r7, #18]
 8001bd8:	f043 0310 	orr.w	r3, r3, #16
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001be0:	4b36      	ldr	r3, [pc, #216]	; (8001cbc <Add_HWServW2ST_Service+0x1a4>)
 8001be2:	461d      	mov	r5, r3
 8001be4:	1d3c      	adds	r4, r7, #4
 8001be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be8:	6028      	str	r0, [r5, #0]
 8001bea:	6069      	str	r1, [r5, #4]
 8001bec:	60aa      	str	r2, [r5, #8]
 8001bee:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <Add_HWServW2ST_Service+0x1a0>)
 8001bf2:	8818      	ldrh	r0, [r3, #0]
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <Add_HWServW2ST_Service+0x1a8>)
 8001bf6:	9305      	str	r3, [sp, #20]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9304      	str	r3, [sp, #16]
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	9303      	str	r3, [sp, #12]
 8001c00:	2304      	movs	r3, #4
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2312      	movs	r3, #18
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	4a2b      	ldr	r2, [pc, #172]	; (8001cbc <Add_HWServW2ST_Service+0x1a4>)
 8001c10:	2102      	movs	r1, #2
 8001c12:	f004 feea 	bl	80069ea <aci_gatt_add_char>
 8001c16:	4603      	mov	r3, r0
 8001c18:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <Add_HWServW2ST_Service+0x10c>
    return BLE_STATUS_ERROR;
 8001c20:	2347      	movs	r3, #71	; 0x47
 8001c22:	e042      	b.n	8001caa <Add_HWServW2ST_Service+0x192>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8001c24:	231b      	movs	r3, #27
 8001c26:	713b      	strb	r3, [r7, #4]
 8001c28:	23c5      	movs	r3, #197	; 0xc5
 8001c2a:	717b      	strb	r3, [r7, #5]
 8001c2c:	23d5      	movs	r3, #213	; 0xd5
 8001c2e:	71bb      	strb	r3, [r7, #6]
 8001c30:	23a5      	movs	r3, #165	; 0xa5
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	2302      	movs	r3, #2
 8001c36:	723b      	strb	r3, [r7, #8]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	727b      	strb	r3, [r7, #9]
 8001c3c:	2336      	movs	r3, #54	; 0x36
 8001c3e:	72bb      	strb	r3, [r7, #10]
 8001c40:	23ac      	movs	r3, #172	; 0xac
 8001c42:	72fb      	strb	r3, [r7, #11]
 8001c44:	23e1      	movs	r3, #225	; 0xe1
 8001c46:	733b      	strb	r3, [r7, #12]
 8001c48:	2311      	movs	r3, #17
 8001c4a:	737b      	strb	r3, [r7, #13]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73bb      	strb	r3, [r7, #14]
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	2300      	movs	r3, #0
 8001c56:	743b      	strb	r3, [r7, #16]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	747b      	strb	r3, [r7, #17]
 8001c5c:	23e0      	movs	r3, #224	; 0xe0
 8001c5e:	74bb      	strb	r3, [r7, #18]
 8001c60:	2300      	movs	r3, #0
 8001c62:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <Add_HWServW2ST_Service+0x1a4>)
 8001c66:	461d      	mov	r5, r3
 8001c68:	1d3c      	adds	r4, r7, #4
 8001c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6c:	6028      	str	r0, [r5, #0]
 8001c6e:	6069      	str	r1, [r5, #4]
 8001c70:	60aa      	str	r2, [r5, #8]
 8001c72:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <Add_HWServW2ST_Service+0x1a0>)
 8001c76:	8818      	ldrh	r0, [r3, #0]
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <Add_HWServW2ST_Service+0x1ac>)
 8001c7a:	9305      	str	r3, [sp, #20]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9304      	str	r3, [sp, #16]
 8001c80:	2310      	movs	r3, #16
 8001c82:	9303      	str	r3, [sp, #12]
 8001c84:	2304      	movs	r3, #4
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2314      	movs	r3, #20
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <Add_HWServW2ST_Service+0x1a4>)
 8001c94:	2102      	movs	r1, #2
 8001c96:	f004 fea8 	bl	80069ea <aci_gatt_add_char>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <Add_HWServW2ST_Service+0x190>
    return BLE_STATUS_ERROR;
 8001ca4:	2347      	movs	r3, #71	; 0x47
 8001ca6:	e000      	b.n	8001caa <Add_HWServW2ST_Service+0x192>

  return BLE_STATUS_SUCCESS;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000518 	.word	0x20000518
 8001cb8:	20000512 	.word	0x20000512
 8001cbc:	20000500 	.word	0x20000500
 8001cc0:	200004fc 	.word	0x200004fc
 8001cc4:	20000514 	.word	0x20000514

08001cc8 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8001cd2:	231b      	movs	r3, #27
 8001cd4:	703b      	strb	r3, [r7, #0]
 8001cd6:	23c5      	movs	r3, #197	; 0xc5
 8001cd8:	707b      	strb	r3, [r7, #1]
 8001cda:	23d5      	movs	r3, #213	; 0xd5
 8001cdc:	70bb      	strb	r3, [r7, #2]
 8001cde:	23a5      	movs	r3, #165	; 0xa5
 8001ce0:	70fb      	strb	r3, [r7, #3]
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	713b      	strb	r3, [r7, #4]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	717b      	strb	r3, [r7, #5]
 8001cea:	23b4      	movs	r3, #180	; 0xb4
 8001cec:	71bb      	strb	r3, [r7, #6]
 8001cee:	239a      	movs	r3, #154	; 0x9a
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	23e1      	movs	r3, #225	; 0xe1
 8001cf4:	723b      	strb	r3, [r7, #8]
 8001cf6:	2311      	movs	r3, #17
 8001cf8:	727b      	strb	r3, [r7, #9]
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	72bb      	strb	r3, [r7, #10]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	72fb      	strb	r3, [r7, #11]
 8001d02:	2300      	movs	r3, #0
 8001d04:	733b      	strb	r3, [r7, #12]
 8001d06:	2300      	movs	r3, #0
 8001d08:	737b      	strb	r3, [r7, #13]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73bb      	strb	r3, [r7, #14]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <Add_SWServW2ST_Service+0x118>)
 8001d14:	461d      	mov	r5, r3
 8001d16:	463c      	mov	r4, r7
 8001d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1a:	6028      	str	r0, [r5, #0]
 8001d1c:	6069      	str	r1, [r5, #4]
 8001d1e:	60aa      	str	r2, [r5, #8]
 8001d20:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	0052      	lsls	r2, r2, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4a2c      	ldr	r2, [pc, #176]	; (8001de4 <Add_SWServW2ST_Service+0x11c>)
 8001d34:	9200      	str	r2, [sp, #0]
 8001d36:	2201      	movs	r2, #1
 8001d38:	4929      	ldr	r1, [pc, #164]	; (8001de0 <Add_SWServW2ST_Service+0x118>)
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	f004 fdc9 	bl	80068d2 <aci_gatt_add_serv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001d44:	7cfb      	ldrb	r3, [r7, #19]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d141      	bne.n	8001dce <Add_SWServW2ST_Service+0x106>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8001d4a:	231b      	movs	r3, #27
 8001d4c:	703b      	strb	r3, [r7, #0]
 8001d4e:	23c5      	movs	r3, #197	; 0xc5
 8001d50:	707b      	strb	r3, [r7, #1]
 8001d52:	23d5      	movs	r3, #213	; 0xd5
 8001d54:	70bb      	strb	r3, [r7, #2]
 8001d56:	23a5      	movs	r3, #165	; 0xa5
 8001d58:	70fb      	strb	r3, [r7, #3]
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	713b      	strb	r3, [r7, #4]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	717b      	strb	r3, [r7, #5]
 8001d62:	2336      	movs	r3, #54	; 0x36
 8001d64:	71bb      	strb	r3, [r7, #6]
 8001d66:	23ac      	movs	r3, #172	; 0xac
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	23e1      	movs	r3, #225	; 0xe1
 8001d6c:	723b      	strb	r3, [r7, #8]
 8001d6e:	2311      	movs	r3, #17
 8001d70:	727b      	strb	r3, [r7, #9]
 8001d72:	2301      	movs	r3, #1
 8001d74:	72bb      	strb	r3, [r7, #10]
 8001d76:	2300      	movs	r3, #0
 8001d78:	72fb      	strb	r3, [r7, #11]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	733b      	strb	r3, [r7, #12]
 8001d7e:	2301      	movs	r3, #1
 8001d80:	737b      	strb	r3, [r7, #13]
 8001d82:	2300      	movs	r3, #0
 8001d84:	73bb      	strb	r3, [r7, #14]
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <Add_SWServW2ST_Service+0x120>)
 8001d8c:	461d      	mov	r5, r3
 8001d8e:	463c      	mov	r4, r7
 8001d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d92:	6028      	str	r0, [r5, #0]
 8001d94:	6069      	str	r1, [r5, #4]
 8001d96:	60aa      	str	r2, [r5, #8]
 8001d98:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <Add_SWServW2ST_Service+0x11c>)
 8001d9c:	8818      	ldrh	r0, [r3, #0]
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <Add_SWServW2ST_Service+0x124>)
 8001da0:	9305      	str	r3, [sp, #20]
 8001da2:	2300      	movs	r3, #0
 8001da4:	9304      	str	r3, [sp, #16]
 8001da6:	2310      	movs	r3, #16
 8001da8:	9303      	str	r3, [sp, #12]
 8001daa:	2304      	movs	r3, #4
 8001dac:	9302      	str	r3, [sp, #8]
 8001dae:	2300      	movs	r3, #0
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	2310      	movs	r3, #16
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2308      	movs	r3, #8
 8001db8:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <Add_SWServW2ST_Service+0x120>)
 8001dba:	2102      	movs	r1, #2
 8001dbc:	f004 fe15 	bl	80069ea <aci_gatt_add_char>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001dc4:	7cfb      	ldrb	r3, [r7, #19]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <Add_SWServW2ST_Service+0x10a>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e003      	b.n	8001dd6 <Add_SWServW2ST_Service+0x10e>
    goto fail;
 8001dce:	bf00      	nop
 8001dd0:	e000      	b.n	8001dd4 <Add_SWServW2ST_Service+0x10c>
    goto fail;
 8001dd2:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8001dd4:	2347      	movs	r3, #71	; 0x47
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000518 	.word	0x20000518
 8001de4:	20000510 	.word	0x20000510
 8001de8:	20000500 	.word	0x20000500
 8001dec:	200004fe 	.word	0x200004fe

08001df0 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	; 0x30
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8001dfc:	f001 fcdc 	bl	80037b8 <HAL_GetTick>
 8001e00:	4603      	mov	r3, r0
 8001e02:	08db      	lsrs	r3, r3, #3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	743b      	strb	r3, [r7, #16]
 8001e08:	f001 fcd6 	bl	80037b8 <HAL_GetTick>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	0adb      	lsrs	r3, r3, #11
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	425b      	negs	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	74bb      	strb	r3, [r7, #18]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	425b      	negs	r3, r3
 8001e26:	121b      	asrs	r3, r3, #8
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	753b      	strb	r3, [r7, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	121b      	asrs	r3, r3, #8
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	425b      	negs	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	75bb      	strb	r3, [r7, #22]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	425b      	negs	r3, r3
 8001e50:	121b      	asrs	r3, r3, #8
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	763b      	strb	r3, [r7, #24]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	121b      	asrs	r3, r3, #8
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	76bb      	strb	r3, [r7, #26]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	121b      	asrs	r3, r3, #8
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	773b      	strb	r3, [r7, #28]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	121b      	asrs	r3, r3, #8
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	77bb      	strb	r3, [r7, #30]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	121b      	asrs	r3, r3, #8
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f887 3020 	strb.w	r3, [r7, #32]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	121b      	asrs	r3, r3, #8
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	121b      	asrs	r3, r3, #8
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <Acc_Update+0x10c>)
 8001ecc:	8818      	ldrh	r0, [r3, #0]
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <Acc_Update+0x110>)
 8001ed0:	8819      	ldrh	r1, [r3, #0]
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2314      	movs	r3, #20
 8001eda:	2200      	movs	r2, #0
 8001edc:	f004 fe57 	bl	8006b8e <aci_gatt_update_char_value>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8001ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001eee:	2347      	movs	r3, #71	; 0x47
 8001ef0:	e000      	b.n	8001ef4 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000512 	.word	0x20000512
 8001f00:	20000514 	.word	0x20000514

08001f04 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8001f0c:	f001 fc54 	bl	80037b8 <HAL_GetTick>
 8001f10:	4603      	mov	r3, r0
 8001f12:	08db      	lsrs	r3, r3, #3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	733b      	strb	r3, [r7, #12]
 8001f18:	f001 fc4e 	bl	80037b8 <HAL_GetTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	0adb      	lsrs	r3, r3, #11
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	73bb      	strb	r3, [r7, #14]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	121b      	asrs	r3, r3, #8
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	743b      	strb	r3, [r7, #16]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	121b      	asrs	r3, r3, #8
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	74bb      	strb	r3, [r7, #18]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	121b      	asrs	r3, r3, #8
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <Quat_Update+0x84>)
 8001f5c:	8818      	ldrh	r0, [r3, #0]
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <Quat_Update+0x88>)
 8001f60:	8819      	ldrh	r1, [r3, #0]
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2308      	movs	r3, #8
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f004 fe0f 	bl	8006b8e <aci_gatt_update_char_value>
 8001f70:	4603      	mov	r3, r0
 8001f72:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001f7a:	2347      	movs	r3, #71	; 0x47
 8001f7c:	e000      	b.n	8001f80 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000510 	.word	0x20000510
 8001f8c:	200004fe 	.word	0x200004fe

08001f90 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8001f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f94:	b088      	sub	sp, #32
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	81fb      	strh	r3, [r7, #14]
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8001f9c:	89fa      	ldrh	r2, [r7, #14]
 8001f9e:	4b53      	ldr	r3, [pc, #332]	; (80020ec <Read_Request_CB+0x15c>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d105      	bne.n	8001fb4 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8001fa8:	4a51      	ldr	r2, [pc, #324]	; (80020f0 <Read_Request_CB+0x160>)
 8001faa:	4952      	ldr	r1, [pc, #328]	; (80020f4 <Read_Request_CB+0x164>)
 8001fac:	4852      	ldr	r0, [pc, #328]	; (80020f8 <Read_Request_CB+0x168>)
 8001fae:	f7ff ff1f 	bl	8001df0 <Acc_Update>
 8001fb2:	e08a      	b.n	80020ca <Read_Request_CB+0x13a>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8001fb4:	89fa      	ldrh	r2, [r7, #14]
 8001fb6:	4b51      	ldr	r3, [pc, #324]	; (80020fc <Read_Request_CB+0x16c>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	f040 8084 	bne.w	80020ca <Read_Request_CB+0x13a>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8001fc2:	f005 fc2f 	bl	8007824 <rand>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461c      	mov	r4, r3
 8001fca:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001fce:	4622      	mov	r2, r4
 8001fd0:	462b      	mov	r3, r5
 8001fd2:	f04f 0000 	mov.w	r0, #0
 8001fd6:	f04f 0100 	mov.w	r1, #0
 8001fda:	0099      	lsls	r1, r3, #2
 8001fdc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001fe0:	0090      	lsls	r0, r2, #2
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	eb12 0a04 	adds.w	sl, r2, r4
 8001fea:	eb43 0b05 	adc.w	fp, r3, r5
 8001fee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	4650      	mov	r0, sl
 8001ff8:	4659      	mov	r1, fp
 8001ffa:	f7fe fb75 	bl	80006e8 <__aeabi_uldivmod>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f7fe fac1 	bl	800058c <__aeabi_ul2d>
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <Read_Request_CB+0x170>)
 8002010:	f7fe f93c 	bl	800028c <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fb14 	bl	8000648 <__aeabi_d2f>
 8002020:	4603      	mov	r3, r0
 8002022:	61fb      	str	r3, [r7, #28]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8002024:	f005 fbfe 	bl	8007824 <rand>
 8002028:	4603      	mov	r3, r0
 800202a:	461c      	mov	r4, r3
 800202c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002030:	4622      	mov	r2, r4
 8002032:	462b      	mov	r3, r5
 8002034:	1891      	adds	r1, r2, r2
 8002036:	6039      	str	r1, [r7, #0]
 8002038:	415b      	adcs	r3, r3
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002040:	1912      	adds	r2, r2, r4
 8002042:	eb45 0303 	adc.w	r3, r5, r3
 8002046:	f04f 0000 	mov.w	r0, #0
 800204a:	f04f 0100 	mov.w	r1, #0
 800204e:	0159      	lsls	r1, r3, #5
 8002050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002054:	0150      	lsls	r0, r2, #5
 8002056:	1812      	adds	r2, r2, r0
 8002058:	eb41 0303 	adc.w	r3, r1, r3
 800205c:	eb12 0804 	adds.w	r8, r2, r4
 8002060:	eb43 0905 	adc.w	r9, r3, r5
 8002064:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	4640      	mov	r0, r8
 800206e:	4649      	mov	r1, r9
 8002070:	f7fe fb3a 	bl	80006e8 <__aeabi_uldivmod>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f7fe fa86 	bl	800058c <__aeabi_ul2d>
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <Read_Request_CB+0x174>)
 8002086:	f7fe f901 	bl	800028c <__adddf3>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f7fe fad9 	bl	8000648 <__aeabi_d2f>
 8002096:	4603      	mov	r3, r0
 8002098:	61bb      	str	r3, [r7, #24]
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 800209a:	edd7 7a06 	vldr	s15, [r7, #24]
 800209e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002108 <Read_Request_CB+0x178>
 80020a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80020aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80020ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ba:	ee17 3a90 	vmov	r3, s15
 80020be:	b21b      	sxth	r3, r3
 80020c0:	4619      	mov	r1, r3
 80020c2:	ee16 0a90 	vmov	r0, s13
 80020c6:	f000 f823 	bl	8002110 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <Read_Request_CB+0x17c>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <Read_Request_CB+0x150>
  {
    ret = aci_gatt_allow_read(connection_handle);
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <Read_Request_CB+0x17c>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 fdeb 	bl	8006cb2 <aci_gatt_allow_read>
 80020dc:	4603      	mov	r3, r0
 80020de:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 80020e0:	bf00      	nop
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ea:	bf00      	nop
 80020ec:	20000514 	.word	0x20000514
 80020f0:	200000e4 	.word	0x200000e4
 80020f4:	200000d8 	.word	0x200000d8
 80020f8:	200000cc 	.word	0x200000cc
 80020fc:	200004fc 	.word	0x200004fc
 8002100:	403b0000 	.word	0x403b0000
 8002104:	408f4000 	.word	0x408f4000
 8002108:	42c80000 	.word	0x42c80000
 800210c:	200000c4 	.word	0x200000c4

08002110 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af02      	add	r7, sp, #8
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 800211c:	f001 fb4c 	bl	80037b8 <HAL_GetTick>
 8002120:	4603      	mov	r3, r0
 8002122:	08db      	lsrs	r3, r3, #3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	733b      	strb	r3, [r7, #12]
 8002128:	f001 fb46 	bl	80037b8 <HAL_GetTick>
 800212c:	4603      	mov	r3, r0
 800212e:	0adb      	lsrs	r3, r3, #11
 8002130:	b2db      	uxtb	r3, r3
 8002132:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	73bb      	strb	r3, [r7, #14]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	121b      	asrs	r3, r3, #8
 800213e:	b2db      	uxtb	r3, r3
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	141b      	asrs	r3, r3, #16
 8002146:	b2db      	uxtb	r3, r3
 8002148:	743b      	strb	r3, [r7, #16]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	161b      	asrs	r3, r3, #24
 800214e:	b2db      	uxtb	r3, r3
 8002150:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	74bb      	strb	r3, [r7, #18]
 8002158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800215c:	121b      	asrs	r3, r3, #8
 800215e:	b21b      	sxth	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <BlueMS_Environmental_Update+0x84>)
 8002166:	8818      	ldrh	r0, [r3, #0]
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <BlueMS_Environmental_Update+0x88>)
 800216a:	8819      	ldrh	r1, [r3, #0]
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2308      	movs	r3, #8
 8002174:	2200      	movs	r2, #0
 8002176:	f004 fd0a 	bl	8006b8e <aci_gatt_update_char_value>
 800217a:	4603      	mov	r3, r0
 800217c:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002184:	2347      	movs	r3, #71	; 0x47
 8002186:	e000      	b.n	800218a <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000512 	.word	0x20000512
 8002198:	200004fc 	.word	0x200004fc

0800219c <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b092      	sub	sp, #72	; 0x48
 80021a0:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 80021a2:	4a36      	ldr	r2, [pc, #216]	; (800227c <Set_DeviceConnectable+0xe0>)
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021ac:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 80021b0:	2302      	movs	r3, #2
 80021b2:	703b      	strb	r3, [r7, #0]
 80021b4:	230a      	movs	r3, #10
 80021b6:	707b      	strb	r3, [r7, #1]
 80021b8:	2300      	movs	r3, #0
 80021ba:	70bb      	strb	r3, [r7, #2]
 80021bc:	2308      	movs	r3, #8
 80021be:	70fb      	strb	r3, [r7, #3]
 80021c0:	2309      	movs	r3, #9
 80021c2:	713b      	strb	r3, [r7, #4]
 80021c4:	2342      	movs	r3, #66	; 0x42
 80021c6:	717b      	strb	r3, [r7, #5]
 80021c8:	236c      	movs	r3, #108	; 0x6c
 80021ca:	71bb      	strb	r3, [r7, #6]
 80021cc:	2375      	movs	r3, #117	; 0x75
 80021ce:	71fb      	strb	r3, [r7, #7]
 80021d0:	2365      	movs	r3, #101	; 0x65
 80021d2:	723b      	strb	r3, [r7, #8]
 80021d4:	234e      	movs	r3, #78	; 0x4e
 80021d6:	727b      	strb	r3, [r7, #9]
 80021d8:	2352      	movs	r3, #82	; 0x52
 80021da:	72bb      	strb	r3, [r7, #10]
 80021dc:	2347      	movs	r3, #71	; 0x47
 80021de:	72fb      	strb	r3, [r7, #11]
 80021e0:	230d      	movs	r3, #13
 80021e2:	733b      	strb	r3, [r7, #12]
 80021e4:	23ff      	movs	r3, #255	; 0xff
 80021e6:	737b      	strb	r3, [r7, #13]
 80021e8:	2301      	movs	r3, #1
 80021ea:	73bb      	strb	r3, [r7, #14]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	2300      	movs	r3, #0
 80021f2:	743b      	strb	r3, [r7, #16]
 80021f4:	23f4      	movs	r3, #244	; 0xf4
 80021f6:	747b      	strb	r3, [r7, #17]
 80021f8:	2300      	movs	r3, #0
 80021fa:	74bb      	strb	r3, [r7, #18]
 80021fc:	2300      	movs	r3, #0
 80021fe:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <Set_DeviceConnectable+0xe4>)
 8002202:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8002204:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <Set_DeviceConnectable+0xe4>)
 8002208:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 800220a:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 800220c:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <Set_DeviceConnectable+0xe4>)
 800220e:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8002210:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <Set_DeviceConnectable+0xe4>)
 8002214:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8002216:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <Set_DeviceConnectable+0xe4>)
 800221a:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 800221c:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <Set_DeviceConnectable+0xe4>)
 8002220:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8002222:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8002224:	7cbb      	ldrb	r3, [r7, #18]
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 800222e:	2100      	movs	r1, #0
 8002230:	2000      	movs	r0, #0
 8002232:	f004 fea1 	bl	8006f78 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8002236:	2300      	movs	r3, #0
 8002238:	9306      	str	r3, [sp, #24]
 800223a:	2300      	movs	r3, #0
 800223c:	9305      	str	r3, [sp, #20]
 800223e:	2300      	movs	r3, #0
 8002240:	9304      	str	r3, [sp, #16]
 8002242:	2300      	movs	r3, #0
 8002244:	9303      	str	r3, [sp, #12]
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	2308      	movs	r3, #8
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	2300      	movs	r3, #0
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800225a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800225e:	2000      	movs	r0, #0
 8002260:	f004 f97c 	bl	800655c <aci_gap_set_discoverable>
 8002264:	4603      	mov	r3, r0
 8002266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 800226a:	463b      	mov	r3, r7
 800226c:	4619      	mov	r1, r3
 800226e:	201a      	movs	r0, #26
 8002270:	f004 faba 	bl	80067e8 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8002274:	bf00      	nop
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	080088ac 	.word	0x080088ac
 8002280:	200004f4 	.word	0x200004f4

08002284 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3301      	adds	r3, #1
 8002294:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b04      	cmp	r3, #4
 800229c:	d139      	bne.n	8002312 <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2bff      	cmp	r3, #255	; 0xff
 80022a4:	d01f      	beq.n	80022e6 <user_notify+0x62>
 80022a6:	2bff      	cmp	r3, #255	; 0xff
 80022a8:	dc38      	bgt.n	800231c <user_notify+0x98>
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	d002      	beq.n	80022b4 <user_notify+0x30>
 80022ae:	2b3e      	cmp	r3, #62	; 0x3e
 80022b0:	d003      	beq.n	80022ba <user_notify+0x36>
 80022b2:	e033      	b.n	800231c <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80022b4:	f000 f836 	bl	8002324 <GAP_DisconnectionComplete_CB>
    }
    break;
 80022b8:	e030      	b.n	800231c <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	3302      	adds	r3, #2
 80022be:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d126      	bne.n	8002316 <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3301      	adds	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1d5a      	adds	r2, r3, #5
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4619      	mov	r1, r3
 80022dc:	4610      	mov	r0, r2
 80022de:	f000 f837 	bl	8002350 <GAP_ConnectionComplete_CB>
        }
        break;
 80022e2:	bf00      	nop
      }
    }
    break;
 80022e4:	e017      	b.n	8002316 <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	3302      	adds	r3, #2
 80022ea:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	f640 4314 	movw	r3, #3092	; 0xc14
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d10e      	bne.n	800231a <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3302      	adds	r3, #2
 8002300:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	885b      	ldrh	r3, [r3, #2]
 8002306:	b29b      	uxth	r3, r3
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fe41 	bl	8001f90 <Read_Request_CB>
        }
        break;
 800230e:	bf00      	nop
      }

    }
    break;
 8002310:	e003      	b.n	800231a <user_notify+0x96>
    return;
 8002312:	bf00      	nop
 8002314:	e002      	b.n	800231c <user_notify+0x98>
    break;
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <user_notify+0x98>
    break;
 800231a:	bf00      	nop
  }
}
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  connected = FALSE;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <GAP_DisconnectionComplete_CB+0x20>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <GAP_DisconnectionComplete_CB+0x24>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <GAP_DisconnectionComplete_CB+0x28>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	200000c8 	.word	0x200000c8
 8002348:	20000000 	.word	0x20000000
 800234c:	200000c6 	.word	0x200000c6

08002350 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <GAP_ConnectionComplete_CB+0x38>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <GAP_ConnectionComplete_CB+0x3c>)
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8002368:	2305      	movs	r3, #5
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e002      	b.n	8002374 <GAP_ConnectionComplete_CB+0x24>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3b01      	subs	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f9      	bne.n	800236e <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	200000c8 	.word	0x200000c8
 800238c:	200000c4 	.word	0x200000c4

08002390 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <HCI_TL_SPI_Init+0x88>)
 800239a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239c:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HCI_TL_SPI_Init+0x88>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a4:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <HCI_TL_SPI_Init+0x88>)
 80023a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80023b0:	2340      	movs	r3, #64	; 0x40
 80023b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	4619      	mov	r1, r3
 80023c4:	4815      	ldr	r0, [pc, #84]	; (800241c <HCI_TL_SPI_Init+0x8c>)
 80023c6:	f001 fb97 	bl	8003af8 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80023ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d0:	2301      	movs	r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	4619      	mov	r1, r3
 80023e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e6:	f001 fb87 	bl	8003af8 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80023ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f0:	2301      	movs	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	4619      	mov	r1, r3
 8002402:	4807      	ldr	r0, [pc, #28]	; (8002420 <HCI_TL_SPI_Init+0x90>)
 8002404:	f001 fb78 	bl	8003af8 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8002408:	f000 ff04 	bl	8003214 <BSP_SPI3_Init>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3720      	adds	r7, #32
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	48001000 	.word	0x48001000
 8002420:	48000c00 	.word	0x48000c00

08002424 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8002428:	2140      	movs	r1, #64	; 0x40
 800242a:	4808      	ldr	r0, [pc, #32]	; (800244c <HCI_TL_SPI_DeInit+0x28>)
 800242c:	f001 fd0e 	bl	8003e4c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8002430:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002434:	4806      	ldr	r0, [pc, #24]	; (8002450 <HCI_TL_SPI_DeInit+0x2c>)
 8002436:	f001 fd09 	bl	8003e4c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800243a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800243e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002442:	f001 fd03 	bl	8003e4c <HAL_GPIO_DeInit>
  return 0;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	48001000 	.word	0x48001000
 8002450:	48000c00 	.word	0x48000c00

08002454 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800245e:	480d      	ldr	r0, [pc, #52]	; (8002494 <HCI_TL_SPI_Reset+0x40>)
 8002460:	f001 fe00 	bl	8004064 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002464:	2200      	movs	r2, #0
 8002466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800246a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246e:	f001 fdf9 	bl	8004064 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002472:	2005      	movs	r0, #5
 8002474:	f001 f9ac 	bl	80037d0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002478:	2201      	movs	r2, #1
 800247a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800247e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002482:	f001 fdef 	bl	8004064 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002486:	2005      	movs	r0, #5
 8002488:	f001 f9a2 	bl	80037d0 <HAL_Delay>
  return 0;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	48000c00 	.word	0x48000c00

08002498 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80024a8:	23ff      	movs	r3, #255	; 0xff
 80024aa:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80024ac:	4a26      	ldr	r2, [pc, #152]	; (8002548 <HCI_TL_SPI_Receive+0xb0>)
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024b6:	6018      	str	r0, [r3, #0]
 80024b8:	3304      	adds	r3, #4
 80024ba:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024c2:	4822      	ldr	r0, [pc, #136]	; (800254c <HCI_TL_SPI_Receive+0xb4>)
 80024c4:	f001 fdce 	bl	8004064 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80024c8:	f107 010c 	add.w	r1, r7, #12
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2205      	movs	r2, #5
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fece 	bl	8003274 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 80024d8:	7b3b      	ldrb	r3, [r7, #12]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d129      	bne.n	8002532 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80024de:	7c3b      	ldrb	r3, [r7, #16]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	b21a      	sxth	r2, r3
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	b21b      	sxth	r3, r3
 80024e8:	4313      	orrs	r3, r2
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80024ee:	8bfb      	ldrh	r3, [r7, #30]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01e      	beq.n	8002532 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80024f4:	8bfa      	ldrh	r2, [r7, #30]
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d901      	bls.n	8002500 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8002500:	2300      	movs	r3, #0
 8002502:	777b      	strb	r3, [r7, #29]
 8002504:	e010      	b.n	8002528 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8002506:	f107 011b 	add.w	r1, r7, #27
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	2201      	movs	r2, #1
 8002510:	4618      	mov	r0, r3
 8002512:	f000 feaf 	bl	8003274 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8002516:	7f7b      	ldrb	r3, [r7, #29]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	7efa      	ldrb	r2, [r7, #27]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8002522:	7f7b      	ldrb	r3, [r7, #29]
 8002524:	3301      	adds	r3, #1
 8002526:	777b      	strb	r3, [r7, #29]
 8002528:	7f7b      	ldrb	r3, [r7, #29]
 800252a:	b29b      	uxth	r3, r3
 800252c:	8bfa      	ldrh	r2, [r7, #30]
 800252e:	429a      	cmp	r2, r3
 8002530:	d8e9      	bhi.n	8002506 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002538:	4804      	ldr	r0, [pc, #16]	; (800254c <HCI_TL_SPI_Receive+0xb4>)
 800253a:	f001 fd93 	bl	8004064 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800253e:	7f7b      	ldrb	r3, [r7, #29]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	080088b4 	.word	0x080088b4
 800254c:	48000c00 	.word	0x48000c00

08002550 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800255c:	4a24      	ldr	r2, [pc, #144]	; (80025f0 <HCI_TL_SPI_Send+0xa0>)
 800255e:	f107 0310 	add.w	r3, r7, #16
 8002562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002566:	6018      	str	r0, [r3, #0]
 8002568:	3304      	adds	r3, #4
 800256a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800256c:	f001 f924 	bl	80037b8 <HAL_GetTick>
 8002570:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800257c:	481d      	ldr	r0, [pc, #116]	; (80025f4 <HCI_TL_SPI_Send+0xa4>)
 800257e:	f001 fd71 	bl	8004064 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002582:	f107 0108 	add.w	r1, r7, #8
 8002586:	f107 0310 	add.w	r3, r7, #16
 800258a:	2205      	movs	r2, #5
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fe71 	bl	8003274 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d10f      	bne.n	80025b8 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002598:	7a7b      	ldrb	r3, [r7, #9]
 800259a:	b29b      	uxth	r3, r3
 800259c:	887a      	ldrh	r2, [r7, #2]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d806      	bhi.n	80025b0 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4914      	ldr	r1, [pc, #80]	; (80025f8 <HCI_TL_SPI_Send+0xa8>)
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fe63 	bl	8003274 <BSP_SPI3_SendRecv>
 80025ae:	e006      	b.n	80025be <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80025b0:	f06f 0301 	mvn.w	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e002      	b.n	80025be <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80025be:	2201      	movs	r2, #1
 80025c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025c4:	480b      	ldr	r0, [pc, #44]	; (80025f4 <HCI_TL_SPI_Send+0xa4>)
 80025c6:	f001 fd4d 	bl	8004064 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80025ca:	f001 f8f5 	bl	80037b8 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	d903      	bls.n	80025e0 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80025d8:	f06f 0302 	mvn.w	r3, #2
 80025dc:	61fb      	str	r3, [r7, #28]
      break;
 80025de:	e002      	b.n	80025e6 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	dbc5      	blt.n	8002572 <HCI_TL_SPI_Send+0x22>

  return result;
 80025e6:	69fb      	ldr	r3, [r7, #28]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	080088bc 	.word	0x080088bc
 80025f4:	48000c00 	.word	0x48000c00
 80025f8:	200000fc 	.word	0x200000fc

080025fc <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <IsDataAvailable+0x1c>)
 8002604:	f001 fd16 	bl	8004034 <HAL_GPIO_ReadPin>
 8002608:	4603      	mov	r3, r0
 800260a:	2b01      	cmp	r3, #1
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	48001000 	.word	0x48001000

0800261c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <hci_tl_lowlevel_init+0x50>)
 8002624:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <hci_tl_lowlevel_init+0x54>)
 8002628:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <hci_tl_lowlevel_init+0x58>)
 800262c:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <hci_tl_lowlevel_init+0x5c>)
 8002630:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <hci_tl_lowlevel_init+0x60>)
 8002634:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <hci_tl_lowlevel_init+0x64>)
 8002638:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	4618      	mov	r0, r3
 800263e:	f004 fdb9 	bl	80071b4 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8002642:	4910      	ldr	r1, [pc, #64]	; (8002684 <hci_tl_lowlevel_init+0x68>)
 8002644:	4810      	ldr	r0, [pc, #64]	; (8002688 <hci_tl_lowlevel_init+0x6c>)
 8002646:	f001 fa12 	bl	8003a6e <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800264a:	4a10      	ldr	r2, [pc, #64]	; (800268c <hci_tl_lowlevel_init+0x70>)
 800264c:	2100      	movs	r1, #0
 800264e:	480e      	ldr	r0, [pc, #56]	; (8002688 <hci_tl_lowlevel_init+0x6c>)
 8002650:	f001 f9f3 	bl	8003a3a <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002654:	2200      	movs	r2, #0
 8002656:	2100      	movs	r1, #0
 8002658:	2017      	movs	r0, #23
 800265a:	f001 f9b8 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800265e:	2017      	movs	r0, #23
 8002660:	f001 f9d1 	bl	8003a06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002664:	bf00      	nop
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	08002391 	.word	0x08002391
 8002670:	08002425 	.word	0x08002425
 8002674:	08002551 	.word	0x08002551
 8002678:	08002499 	.word	0x08002499
 800267c:	08002455 	.word	0x08002455
 8002680:	080032b5 	.word	0x080032b5
 8002684:	16000006 	.word	0x16000006
 8002688:	20000528 	.word	0x20000528
 800268c:	08002691 	.word	0x08002691

08002690 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002694:	e005      	b.n	80026a2 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8002696:	2000      	movs	r0, #0
 8002698:	f004 fef2 	bl	8007480 <hci_notify_asynch_evt>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80026a2:	f7ff ffab 	bl	80025fc <IsDataAvailable>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f4      	bne.n	8002696 <hci_tl_lowlevel_isr+0x6>
 80026ac:	e000      	b.n	80026b0 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80026ae:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026b6:	f001 f816 	bl	80036e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ba:	f000 f807 	bl	80026cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026be:	f000 f857 	bl	8002770 <MX_GPIO_Init>
  MX_BlueNRG_MS_Init();
 80026c2:	f7fe f98d 	bl	80009e0 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 80026c6:	f7fe fa27 	bl	8000b18 <MX_BlueNRG_MS_Process>
 80026ca:	e7fc      	b.n	80026c6 <main+0x14>

080026cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b096      	sub	sp, #88	; 0x58
 80026d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	2244      	movs	r2, #68	; 0x44
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f005 f86c 	bl	80077b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e0:	463b      	mov	r3, r7
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
 80026ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80026ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80026f2:	f002 faf3 	bl	8004cdc <HAL_PWREx_ControlVoltageScaling>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80026fc:	f000 fa42 	bl	8002b84 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002700:	2310      	movs	r3, #16
 8002702:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002704:	2301      	movs	r3, #1
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800270c:	2360      	movs	r3, #96	; 0x60
 800270e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002710:	2302      	movs	r3, #2
 8002712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002714:	2301      	movs	r3, #1
 8002716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002718:	2301      	movs	r3, #1
 800271a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800271c:	2328      	movs	r3, #40	; 0x28
 800271e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002720:	2307      	movs	r3, #7
 8002722:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002724:	2302      	movs	r3, #2
 8002726:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002728:	2302      	movs	r3, #2
 800272a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fb29 	bl	8004d88 <HAL_RCC_OscConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800273c:	f000 fa22 	bl	8002b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002740:	230f      	movs	r3, #15
 8002742:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002744:	2303      	movs	r3, #3
 8002746:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002754:	463b      	mov	r3, r7
 8002756:	2104      	movs	r1, #4
 8002758:	4618      	mov	r0, r3
 800275a:	f002 feef 	bl	800553c <HAL_RCC_ClockConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002764:	f000 fa0e 	bl	8002b84 <Error_Handler>
  }
}
 8002768:	bf00      	nop
 800276a:	3758      	adds	r7, #88	; 0x58
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002786:	4bbc      	ldr	r3, [pc, #752]	; (8002a78 <MX_GPIO_Init+0x308>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	4abb      	ldr	r2, [pc, #748]	; (8002a78 <MX_GPIO_Init+0x308>)
 800278c:	f043 0310 	orr.w	r3, r3, #16
 8002790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002792:	4bb9      	ldr	r3, [pc, #740]	; (8002a78 <MX_GPIO_Init+0x308>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	4bb6      	ldr	r3, [pc, #728]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	4ab5      	ldr	r2, [pc, #724]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027aa:	4bb3      	ldr	r3, [pc, #716]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	4bb0      	ldr	r3, [pc, #704]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ba:	4aaf      	ldr	r2, [pc, #700]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c2:	4bad      	ldr	r3, [pc, #692]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ce:	4baa      	ldr	r3, [pc, #680]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	4aa9      	ldr	r2, [pc, #676]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027da:	4ba7      	ldr	r3, [pc, #668]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e6:	4ba4      	ldr	r3, [pc, #656]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	4aa3      	ldr	r2, [pc, #652]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027ec:	f043 0308 	orr.w	r3, r3, #8
 80027f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f2:	4ba1      	ldr	r3, [pc, #644]	; (8002a78 <MX_GPIO_Init+0x308>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80027fe:	2200      	movs	r2, #0
 8002800:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002804:	489d      	ldr	r0, [pc, #628]	; (8002a7c <MX_GPIO_Init+0x30c>)
 8002806:	f001 fc2d 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800280a:	2200      	movs	r2, #0
 800280c:	f248 1104 	movw	r1, #33028	; 0x8104
 8002810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002814:	f001 fc26 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002818:	2200      	movs	r2, #0
 800281a:	f24b 0114 	movw	r1, #45076	; 0xb014
 800281e:	4898      	ldr	r0, [pc, #608]	; (8002a80 <MX_GPIO_Init+0x310>)
 8002820:	f001 fc20 	bl	8004064 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002824:	2200      	movs	r2, #0
 8002826:	f241 0181 	movw	r1, #4225	; 0x1081
 800282a:	4896      	ldr	r0, [pc, #600]	; (8002a84 <MX_GPIO_Init+0x314>)
 800282c:	f001 fc1a 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002830:	2201      	movs	r2, #1
 8002832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002836:	4893      	ldr	r0, [pc, #588]	; (8002a84 <MX_GPIO_Init+0x314>)
 8002838:	f001 fc14 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800283c:	2200      	movs	r2, #0
 800283e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002842:	4891      	ldr	r0, [pc, #580]	; (8002a88 <MX_GPIO_Init+0x318>)
 8002844:	f001 fc0e 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002848:	2201      	movs	r2, #1
 800284a:	2120      	movs	r1, #32
 800284c:	488c      	ldr	r0, [pc, #560]	; (8002a80 <MX_GPIO_Init+0x310>)
 800284e:	f001 fc09 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002852:	2201      	movs	r2, #1
 8002854:	2101      	movs	r1, #1
 8002856:	4889      	ldr	r0, [pc, #548]	; (8002a7c <MX_GPIO_Init+0x30c>)
 8002858:	f001 fc04 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800285c:	f240 1315 	movw	r3, #277	; 0x115
 8002860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002862:	2301      	movs	r3, #1
 8002864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286a:	2300      	movs	r3, #0
 800286c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	4881      	ldr	r0, [pc, #516]	; (8002a7c <MX_GPIO_Init+0x30c>)
 8002876:	f001 f93f 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800287a:	236a      	movs	r3, #106	; 0x6a
 800287c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800287e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	487b      	ldr	r0, [pc, #492]	; (8002a7c <MX_GPIO_Init+0x30c>)
 8002890:	f001 f932 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002894:	233f      	movs	r3, #63	; 0x3f
 8002896:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002898:	230b      	movs	r3, #11
 800289a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	4619      	mov	r1, r3
 80028a6:	4878      	ldr	r0, [pc, #480]	; (8002a88 <MX_GPIO_Init+0x318>)
 80028a8:	f001 f926 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80028ac:	2303      	movs	r3, #3
 80028ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b8:	2303      	movs	r3, #3
 80028ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028bc:	2308      	movs	r3, #8
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ca:	f001 f915 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80028ce:	f248 1304 	movw	r3, #33028	; 0x8104
 80028d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ea:	f001 f905 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80028ee:	2308      	movs	r3, #8
 80028f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028fe:	2301      	movs	r3, #1
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290c:	f001 f8f4 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002910:	2310      	movs	r3, #16
 8002912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002914:	230b      	movs	r3, #11
 8002916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002926:	f001 f8e7 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800292a:	23e0      	movs	r3, #224	; 0xe0
 800292c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800293a:	2305      	movs	r3, #5
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002948:	f001 f8d6 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800294c:	2301      	movs	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002950:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	4847      	ldr	r0, [pc, #284]	; (8002a80 <MX_GPIO_Init+0x310>)
 8002962:	f001 f8c9 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002966:	2302      	movs	r3, #2
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800296a:	230b      	movs	r3, #11
 800296c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4619      	mov	r1, r3
 8002978:	4841      	ldr	r0, [pc, #260]	; (8002a80 <MX_GPIO_Init+0x310>)
 800297a:	f001 f8bd 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 800297e:	f24b 0334 	movw	r3, #45108	; 0xb034
 8002982:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002984:	2301      	movs	r3, #1
 8002986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	483a      	ldr	r0, [pc, #232]	; (8002a80 <MX_GPIO_Init+0x310>)
 8002998:	f001 f8ae 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800299c:	f44f 7320 	mov.w	r3, #640	; 0x280
 80029a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80029ae:	2306      	movs	r3, #6
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	4619      	mov	r1, r3
 80029b8:	4830      	ldr	r0, [pc, #192]	; (8002a7c <MX_GPIO_Init+0x30c>)
 80029ba:	f001 f89d 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80029be:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80029c2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80029d0:	230a      	movs	r3, #10
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	4828      	ldr	r0, [pc, #160]	; (8002a7c <MX_GPIO_Init+0x30c>)
 80029dc:	f001 f88c 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80029e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e6:	2312      	movs	r3, #18
 80029e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029f2:	2304      	movs	r3, #4
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4619      	mov	r1, r3
 80029fc:	4820      	ldr	r0, [pc, #128]	; (8002a80 <MX_GPIO_Init+0x310>)
 80029fe:	f001 f87b 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002a02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a14:	2307      	movs	r3, #7
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4819      	ldr	r0, [pc, #100]	; (8002a84 <MX_GPIO_Init+0x314>)
 8002a20:	f001 f86a 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002a24:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8002a28:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4812      	ldr	r0, [pc, #72]	; (8002a84 <MX_GPIO_Init+0x314>)
 8002a3c:	f001 f85c 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002a40:	f243 0381 	movw	r3, #12417	; 0x3081
 8002a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	4619      	mov	r1, r3
 8002a58:	480a      	ldr	r0, [pc, #40]	; (8002a84 <MX_GPIO_Init+0x314>)
 8002a5a:	f001 f84d 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002a5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a64:	2301      	movs	r3, #1
 8002a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4619      	mov	r1, r3
 8002a76:	e009      	b.n	8002a8c <MX_GPIO_Init+0x31c>
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	48001000 	.word	0x48001000
 8002a80:	48000400 	.word	0x48000400
 8002a84:	48000c00 	.word	0x48000c00
 8002a88:	48000800 	.word	0x48000800
 8002a8c:	483a      	ldr	r0, [pc, #232]	; (8002b78 <MX_GPIO_Init+0x408>)
 8002a8e:	f001 f833 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002a92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4833      	ldr	r0, [pc, #204]	; (8002b78 <MX_GPIO_Init+0x408>)
 8002aaa:	f001 f825 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac6:	f001 f817 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002aca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002adc:	230a      	movs	r3, #10
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aea:	f001 f805 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002aee:	2302      	movs	r3, #2
 8002af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afa:	2303      	movs	r3, #3
 8002afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002afe:	2305      	movs	r3, #5
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	481c      	ldr	r0, [pc, #112]	; (8002b7c <MX_GPIO_Init+0x40c>)
 8002b0a:	f000 fff5 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002b0e:	2378      	movs	r3, #120	; 0x78
 8002b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b1e:	2307      	movs	r3, #7
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b22:	f107 0314 	add.w	r3, r7, #20
 8002b26:	4619      	mov	r1, r3
 8002b28:	4814      	ldr	r0, [pc, #80]	; (8002b7c <MX_GPIO_Init+0x40c>)
 8002b2a:	f000 ffe5 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b34:	2312      	movs	r3, #18
 8002b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b40:	2304      	movs	r3, #4
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	480d      	ldr	r0, [pc, #52]	; (8002b80 <MX_GPIO_Init+0x410>)
 8002b4c:	f000 ffd4 	bl	8003af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b50:	2200      	movs	r2, #0
 8002b52:	2100      	movs	r1, #0
 8002b54:	2017      	movs	r0, #23
 8002b56:	f000 ff3a 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b5a:	2017      	movs	r0, #23
 8002b5c:	f000 ff53 	bl	8003a06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2100      	movs	r1, #0
 8002b64:	2028      	movs	r0, #40	; 0x28
 8002b66:	f000 ff32 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b6a:	2028      	movs	r0, #40	; 0x28
 8002b6c:	f000 ff4b 	bl	8003a06 <HAL_NVIC_EnableIRQ>

}
 8002b70:	bf00      	nop
 8002b72:	3728      	adds	r7, #40	; 0x28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	48000800 	.word	0x48000800
 8002b7c:	48000c00 	.word	0x48000c00
 8002b80:	48000400 	.word	0x48000400

08002b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b88:	b672      	cpsid	i
}
 8002b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <Error_Handler+0x8>
	...

08002b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <HAL_MspInit+0x44>)
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <HAL_MspInit+0x44>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <HAL_MspInit+0x44>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_MspInit+0x44>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	4a08      	ldr	r2, [pc, #32]	; (8002bd4 <HAL_MspInit+0x44>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_MspInit+0x44>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <NMI_Handler+0x4>

08002bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <HardFault_Handler+0x4>

08002be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <MemManage_Handler+0x4>

08002bea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bee:	e7fe      	b.n	8002bee <BusFault_Handler+0x4>

08002bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <UsageFault_Handler+0x4>

08002bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c24:	f000 fdb4 	bl	8003790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002c30:	2020      	movs	r0, #32
 8002c32:	f001 fa2f 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8002c36:	4806      	ldr	r0, [pc, #24]	; (8002c50 <EXTI9_5_IRQHandler+0x24>)
 8002c38:	f000 ff2e 	bl	8003a98 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002c3c:	2080      	movs	r0, #128	; 0x80
 8002c3e:	f001 fa29 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002c42:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c46:	f001 fa25 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000528 	.word	0x20000528

08002c54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002c58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c5c:	f001 fa1a 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002c60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c64:	f001 fa16 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002c68:	4806      	ldr	r0, [pc, #24]	; (8002c84 <EXTI15_10_IRQHandler+0x30>)
 8002c6a:	f000 ff15 	bl	8003a98 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002c6e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c72:	f001 fa0f 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002c76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c7a:	f001 fa0b 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000008 	.word	0x20000008

08002c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
	return 1;
 8002c8c:	2301      	movs	r3, #1
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_kill>:

int _kill(int pid, int sig)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ca2:	f004 fd51 	bl	8007748 <__errno>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2216      	movs	r2, #22
 8002caa:	601a      	str	r2, [r3, #0]
	return -1;
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_exit>:

void _exit (int status)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ffe7 	bl	8002c98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cca:	e7fe      	b.n	8002cca <_exit+0x12>

08002ccc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e00a      	b.n	8002cf4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cde:	f3af 8000 	nop.w
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	60ba      	str	r2, [r7, #8]
 8002cea:	b2ca      	uxtb	r2, r1
 8002cec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	dbf0      	blt.n	8002cde <_read+0x12>
	}

return len;
 8002cfc:	687b      	ldr	r3, [r7, #4]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e009      	b.n	8002d2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	60ba      	str	r2, [r7, #8]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fa5b 	bl	80031dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	dbf1      	blt.n	8002d18 <_write+0x12>
	}
	return len;
 8002d34:	687b      	ldr	r3, [r7, #4]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_close>:

int _close(int file)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
	return -1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d66:	605a      	str	r2, [r3, #4]
	return 0;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <_isatty>:

int _isatty(int file)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d7e:	2301      	movs	r3, #1
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
	return 0;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db0:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <_sbrk+0x5c>)
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <_sbrk+0x60>)
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <_sbrk+0x64>)
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <_sbrk+0x68>)
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d207      	bcs.n	8002de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd8:	f004 fcb6 	bl	8007748 <__errno>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	220c      	movs	r2, #12
 8002de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	e009      	b.n	8002dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <_sbrk+0x64>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <_sbrk+0x64>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	4a05      	ldr	r2, [pc, #20]	; (8002e0c <_sbrk+0x64>)
 8002df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20018000 	.word	0x20018000
 8002e08:	00000400 	.word	0x00000400
 8002e0c:	200001fc 	.word	0x200001fc
 8002e10:	20000718 	.word	0x20000718

08002e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <SystemInit+0x20>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <SystemInit+0x20>)
 8002e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e3c:	f7ff ffea 	bl	8002e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e42:	490d      	ldr	r1, [pc, #52]	; (8002e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <LoopForever+0xe>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e48:	e002      	b.n	8002e50 <LoopCopyDataInit>

08002e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4e:	3304      	adds	r3, #4

08002e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e54:	d3f9      	bcc.n	8002e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e58:	4c0a      	ldr	r4, [pc, #40]	; (8002e84 <LoopForever+0x16>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e5c:	e001      	b.n	8002e62 <LoopFillZerobss>

08002e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e60:	3204      	adds	r2, #4

08002e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e64:	d3fb      	bcc.n	8002e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e66:	f004 fc75 	bl	8007754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e6a:	f7ff fc22 	bl	80026b2 <main>

08002e6e <LoopForever>:

LoopForever:
    b LoopForever
 8002e6e:	e7fe      	b.n	8002e6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e78:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002e7c:	08008a60 	.word	0x08008a60
  ldr r2, =_sbss
 8002e80:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002e84:	20000714 	.word	0x20000714

08002e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e88:	e7fe      	b.n	8002e88 <ADC1_2_IRQHandler>
	...

08002e8c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <I2Cx_MspInit+0xa8>)
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <I2Cx_MspInit+0xa8>)
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ea0:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <I2Cx_MspInit+0xa8>)
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002eac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002eb0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002eb2:	2312      	movs	r3, #18
 8002eb4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ec2:	f107 0314 	add.w	r3, r7, #20
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	481b      	ldr	r0, [pc, #108]	; (8002f38 <I2Cx_MspInit+0xac>)
 8002eca:	f000 fe15 	bl	8003af8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4818      	ldr	r0, [pc, #96]	; (8002f38 <I2Cx_MspInit+0xac>)
 8002ed6:	f000 fe0f 	bl	8003af8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <I2Cx_MspInit+0xa8>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <I2Cx_MspInit+0xa8>)
 8002ee0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee6:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <I2Cx_MspInit+0xa8>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <I2Cx_MspInit+0xa8>)
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <I2Cx_MspInit+0xa8>)
 8002ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002efc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002efe:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <I2Cx_MspInit+0xa8>)
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <I2Cx_MspInit+0xa8>)
 8002f04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f08:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	210f      	movs	r1, #15
 8002f0e:	2021      	movs	r0, #33	; 0x21
 8002f10:	f000 fd5d 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002f14:	2021      	movs	r0, #33	; 0x21
 8002f16:	f000 fd76 	bl	8003a06 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	210f      	movs	r1, #15
 8002f1e:	2022      	movs	r0, #34	; 0x22
 8002f20:	f000 fd55 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002f24:	2022      	movs	r0, #34	; 0x22
 8002f26:	f000 fd6e 	bl	8003a06 <HAL_NVIC_EnableIRQ>
}
 8002f2a:	bf00      	nop
 8002f2c:	3728      	adds	r7, #40	; 0x28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	48000400 	.word	0x48000400

08002f3c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <I2Cx_Init+0x54>)
 8002f48:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <I2Cx_Init+0x58>)
 8002f4e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff89 	bl	8002e8c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f001 f8ad 	bl	80040da <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002f80:	2100      	movs	r1, #0
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f001 fe50 	bl	8004c28 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40005800 	.word	0x40005800
 8002f94:	00702681 	.word	0x00702681

08002f98 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	; 0x28
 8002f9c:	af04      	add	r7, sp, #16
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	72fb      	strb	r3, [r7, #11]
 8002faa:	460b      	mov	r3, r1
 8002fac:	813b      	strh	r3, [r7, #8]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	b299      	uxth	r1, r3
 8002fba:	88f8      	ldrh	r0, [r7, #6]
 8002fbc:	893a      	ldrh	r2, [r7, #8]
 8002fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc2:	9302      	str	r3, [sp, #8]
 8002fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	4603      	mov	r3, r0
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f001 fa6a 	bl	80044a8 <HAL_I2C_Mem_Read>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d004      	beq.n	8002fe8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f832 	bl	800304c <I2Cx_Error>
  }
  return status;
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b08a      	sub	sp, #40	; 0x28
 8002ff6:	af04      	add	r7, sp, #16
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	4608      	mov	r0, r1
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	461a      	mov	r2, r3
 8003000:	4603      	mov	r3, r0
 8003002:	72fb      	strb	r3, [r7, #11]
 8003004:	460b      	mov	r3, r1
 8003006:	813b      	strh	r3, [r7, #8]
 8003008:	4613      	mov	r3, r2
 800300a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	b299      	uxth	r1, r3
 8003014:	88f8      	ldrh	r0, [r7, #6]
 8003016:	893a      	ldrh	r2, [r7, #8]
 8003018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800301c:	9302      	str	r3, [sp, #8]
 800301e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	4603      	mov	r3, r0
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f001 f929 	bl	8004280 <HAL_I2C_Mem_Write>
 800302e:	4603      	mov	r3, r0
 8003030:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d004      	beq.n	8003042 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003038:	7afb      	ldrb	r3, [r7, #11]
 800303a:	4619      	mov	r1, r3
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f805 	bl	800304c <I2Cx_Error>
  }
  return status;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f001 f8cd 	bl	80041f8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ff6c 	bl	8002f3c <I2Cx_Init>
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <SENSOR_IO_Init+0x10>)
 8003072:	f7ff ff63 	bl	8002f3c <I2Cx_Init>
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200005b4 	.word	0x200005b4

08003080 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af02      	add	r7, sp, #8
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
 800308a:	460b      	mov	r3, r1
 800308c:	71bb      	strb	r3, [r7, #6]
 800308e:	4613      	mov	r3, r2
 8003090:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003092:	79bb      	ldrb	r3, [r7, #6]
 8003094:	b29a      	uxth	r2, r3
 8003096:	79f9      	ldrb	r1, [r7, #7]
 8003098:	2301      	movs	r3, #1
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	1d7b      	adds	r3, r7, #5
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2301      	movs	r3, #1
 80030a2:	4803      	ldr	r0, [pc, #12]	; (80030b0 <SENSOR_IO_Write+0x30>)
 80030a4:	f7ff ffa5 	bl	8002ff2 <I2Cx_WriteMultiple>
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200005b4 	.word	0x200005b4

080030b4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	4603      	mov	r3, r0
 80030bc:	460a      	mov	r2, r1
 80030be:	71fb      	strb	r3, [r7, #7]
 80030c0:	4613      	mov	r3, r2
 80030c2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80030c8:	79bb      	ldrb	r3, [r7, #6]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	79f9      	ldrb	r1, [r7, #7]
 80030ce:	2301      	movs	r3, #1
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	f107 030f 	add.w	r3, r7, #15
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2301      	movs	r3, #1
 80030da:	4804      	ldr	r0, [pc, #16]	; (80030ec <SENSOR_IO_Read+0x38>)
 80030dc:	f7ff ff5c 	bl	8002f98 <I2Cx_ReadMultiple>

  return read_value;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200005b4 	.word	0x200005b4

080030f0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	603a      	str	r2, [r7, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	460b      	mov	r3, r1
 8003100:	71bb      	strb	r3, [r7, #6]
 8003102:	4613      	mov	r3, r2
 8003104:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003106:	79bb      	ldrb	r3, [r7, #6]
 8003108:	b29a      	uxth	r2, r3
 800310a:	79f9      	ldrb	r1, [r7, #7]
 800310c:	88bb      	ldrh	r3, [r7, #4]
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2301      	movs	r3, #1
 8003116:	4804      	ldr	r0, [pc, #16]	; (8003128 <SENSOR_IO_ReadMultiple+0x38>)
 8003118:	f7ff ff3e 	bl	8002f98 <I2Cx_ReadMultiple>
 800311c:	4603      	mov	r3, r0
 800311e:	b29b      	uxth	r3, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	200005b4 	.word	0x200005b4

0800312c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <BSP_PSENSOR_Init+0x38>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	20ba      	movs	r0, #186	; 0xba
 8003138:	4798      	blx	r3
 800313a:	4603      	mov	r3, r0
 800313c:	2bb1      	cmp	r3, #177	; 0xb1
 800313e:	d002      	beq.n	8003146 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	e009      	b.n	800315a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <BSP_PSENSOR_Init+0x3c>)
 8003148:	4a06      	ldr	r2, [pc, #24]	; (8003164 <BSP_PSENSOR_Init+0x38>)
 800314a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <BSP_PSENSOR_Init+0x3c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	20ba      	movs	r0, #186	; 0xba
 8003154:	4798      	blx	r3
    ret = PSENSOR_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800315a:	687b      	ldr	r3, [r7, #4]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000020 	.word	0x20000020
 8003168:	20000200 	.word	0x20000200

0800316c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <BSP_PSENSOR_ReadPressure+0x18>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	20ba      	movs	r0, #186	; 0xba
 8003178:	4798      	blx	r3
 800317a:	eef0 7a40 	vmov.f32	s15, s0
}
 800317e:	eeb0 0a67 	vmov.f32	s0, s15
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000200 	.word	0x20000200

08003188 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <BSP_TSENSOR_Init+0x30>)
 8003194:	4a09      	ldr	r2, [pc, #36]	; (80031bc <BSP_TSENSOR_Init+0x34>)
 8003196:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003198:	f7ff ff68 	bl	800306c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <BSP_TSENSOR_Init+0x30>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2100      	movs	r1, #0
 80031a4:	20be      	movs	r0, #190	; 0xbe
 80031a6:	4798      	blx	r3

  ret = TSENSOR_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80031ac:	79fb      	ldrb	r3, [r7, #7]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000204 	.word	0x20000204
 80031bc:	20000010 	.word	0x20000010

080031c0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <BSP_TSENSOR_ReadTemp+0x18>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	20be      	movs	r0, #190	; 0xbe
 80031cc:	4798      	blx	r3
 80031ce:	eef0 7a40 	vmov.f32	s15, s0
}
 80031d2:	eeb0 0a67 	vmov.f32	s0, s15
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000204 	.word	0x20000204

080031dc <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <__io_putchar+0x30>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4613      	mov	r3, r2
 80031ec:	015b      	lsls	r3, r3, #5
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <__io_putchar+0x34>)
 80031f4:	1898      	adds	r0, r3, r2
 80031f6:	1d39      	adds	r1, r7, #4
 80031f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fc:	2201      	movs	r2, #1
 80031fe:	f002 ffbb 	bl	8006178 <HAL_UART_Transmit>
  return ch;
 8003202:	687b      	ldr	r3, [r7, #4]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000208 	.word	0x20000208
 8003210:	20000608 	.word	0x20000608

08003214 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <BSP_SPI3_Init+0x54>)
 8003220:	4a12      	ldr	r2, [pc, #72]	; (800326c <BSP_SPI3_Init+0x58>)
 8003222:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <BSP_SPI3_Init+0x5c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	4911      	ldr	r1, [pc, #68]	; (8003270 <BSP_SPI3_Init+0x5c>)
 800322c:	600a      	str	r2, [r1, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d114      	bne.n	800325c <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8003232:	480d      	ldr	r0, [pc, #52]	; (8003268 <BSP_SPI3_Init+0x54>)
 8003234:	f002 fe2e 	bl	8005e94 <HAL_SPI_GetState>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10e      	bne.n	800325c <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 800323e:	480a      	ldr	r0, [pc, #40]	; (8003268 <BSP_SPI3_Init+0x54>)
 8003240:	f000 f882 	bl	8003348 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d108      	bne.n	800325c <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 800324a:	4807      	ldr	r0, [pc, #28]	; (8003268 <BSP_SPI3_Init+0x54>)
 800324c:	f000 f83a 	bl	80032c4 <MX_SPI3_Init>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003256:	f06f 0307 	mvn.w	r3, #7
 800325a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800325c:	687b      	ldr	r3, [r7, #4]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000068c 	.word	0x2000068c
 800326c:	40003c00 	.word	0x40003c00
 8003270:	2000020c 	.word	0x2000020c

08003274 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800328c:	9200      	str	r2, [sp, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	68f9      	ldr	r1, [r7, #12]
 8003292:	4807      	ldr	r0, [pc, #28]	; (80032b0 <BSP_SPI3_SendRecv+0x3c>)
 8003294:	f002 fbeb 	bl	8005a6e <HAL_SPI_TransmitReceive>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800329e:	f06f 0305 	mvn.w	r3, #5
 80032a2:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80032a4:	697b      	ldr	r3, [r7, #20]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	2000068c 	.word	0x2000068c

080032b4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80032b8:	f000 fa7e 	bl	80037b8 <HAL_GetTick>
 80032bc:	4603      	mov	r3, r0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <MX_SPI3_Init+0x80>)
 80032d4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032dc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032ea:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fe:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2218      	movs	r2, #24
 8003304:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2207      	movs	r2, #7
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2208      	movs	r2, #8
 8003328:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f002 faf2 	bl	8005914 <HAL_SPI_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800333a:	7bfb      	ldrb	r3, [r7, #15]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40003c00 	.word	0x40003c00

08003348 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <SPI3_MspInit+0xa8>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	4a26      	ldr	r2, [pc, #152]	; (80033f0 <SPI3_MspInit+0xa8>)
 8003356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335a:	6593      	str	r3, [r2, #88]	; 0x58
 800335c:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <SPI3_MspInit+0xa8>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003368:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <SPI3_MspInit+0xa8>)
 800336a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336c:	4a20      	ldr	r2, [pc, #128]	; (80033f0 <SPI3_MspInit+0xa8>)
 800336e:	f043 0304 	orr.w	r3, r3, #4
 8003372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <SPI3_MspInit+0xa8>)
 8003376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8003380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8003392:	2306      	movs	r3, #6
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003396:	f107 0314 	add.w	r3, r7, #20
 800339a:	4619      	mov	r1, r3
 800339c:	4815      	ldr	r0, [pc, #84]	; (80033f4 <SPI3_MspInit+0xac>)
 800339e:	f000 fbab 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 80033a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a8:	2302      	movs	r3, #2
 80033aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b0:	2303      	movs	r3, #3
 80033b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80033b4:	2306      	movs	r3, #6
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80033b8:	f107 0314 	add.w	r3, r7, #20
 80033bc:	4619      	mov	r1, r3
 80033be:	480d      	ldr	r0, [pc, #52]	; (80033f4 <SPI3_MspInit+0xac>)
 80033c0:	f000 fb9a 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 80033c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ca:	2302      	movs	r3, #2
 80033cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d2:	2303      	movs	r3, #3
 80033d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 80033d6:	2306      	movs	r3, #6
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	4619      	mov	r1, r3
 80033e0:	4804      	ldr	r0, [pc, #16]	; (80033f4 <SPI3_MspInit+0xac>)
 80033e2:	f000 fb89 	bl	8003af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 80033e6:	bf00      	nop
 80033e8:	3728      	adds	r7, #40	; 0x28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	48000800 	.word	0x48000800

080033f8 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2120      	movs	r1, #32
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fe52 	bl	80030b4 <SENSOR_IO_Read>
 8003410:	4603      	mov	r3, r0
 8003412:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	f023 0304 	bic.w	r3, r3, #4
 800341a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800343a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	2120      	movs	r1, #32
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fe1b 	bl	8003080 <SENSOR_IO_Write>
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b088      	sub	sp, #32
 8003456:	af00      	add	r7, sp, #0
 8003458:	4603      	mov	r3, r0
 800345a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	b2d8      	uxtb	r0, r3
 8003460:	f107 0208 	add.w	r2, r7, #8
 8003464:	2302      	movs	r3, #2
 8003466:	21b2      	movs	r1, #178	; 0xb2
 8003468:	f7ff fe42 	bl	80030f0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2135      	movs	r1, #53	; 0x35
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fe1e 	bl	80030b4 <SENSOR_IO_Read>
 8003478:	4603      	mov	r3, r0
 800347a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800347c:	7ffb      	ldrb	r3, [r7, #31]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	b21b      	sxth	r3, r3
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	b21a      	sxth	r2, r3
 8003488:	7a3b      	ldrb	r3, [r7, #8]
 800348a:	b21b      	sxth	r3, r3
 800348c:	4313      	orrs	r3, r2
 800348e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003490:	7ffb      	ldrb	r3, [r7, #31]
 8003492:	019b      	lsls	r3, r3, #6
 8003494:	b21b      	sxth	r3, r3
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	b21a      	sxth	r2, r3
 800349c:	7a7b      	ldrb	r3, [r7, #9]
 800349e:	b21b      	sxth	r3, r3
 80034a0:	4313      	orrs	r3, r2
 80034a2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80034a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034a8:	10db      	asrs	r3, r3, #3
 80034aa:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80034ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80034b0:	10db      	asrs	r3, r3, #3
 80034b2:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	b2d8      	uxtb	r0, r3
 80034b8:	f107 0208 	add.w	r2, r7, #8
 80034bc:	2304      	movs	r3, #4
 80034be:	21bc      	movs	r1, #188	; 0xbc
 80034c0:	f7ff fe16 	bl	80030f0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80034c4:	7a7b      	ldrb	r3, [r7, #9]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	b21a      	sxth	r2, r3
 80034ca:	7a3b      	ldrb	r3, [r7, #8]
 80034cc:	b21b      	sxth	r3, r3
 80034ce:	4313      	orrs	r3, r2
 80034d0:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80034d2:	7afb      	ldrb	r3, [r7, #11]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	b21a      	sxth	r2, r3
 80034d8:	7abb      	ldrb	r3, [r7, #10]
 80034da:	b21b      	sxth	r3, r3
 80034dc:	4313      	orrs	r3, r2
 80034de:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	b2d8      	uxtb	r0, r3
 80034e4:	f107 0208 	add.w	r2, r7, #8
 80034e8:	2302      	movs	r3, #2
 80034ea:	21aa      	movs	r1, #170	; 0xaa
 80034ec:	f7ff fe00 	bl	80030f0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80034f0:	7a7b      	ldrb	r3, [r7, #9]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	b21a      	sxth	r2, r3
 80034f6:	7a3b      	ldrb	r3, [r7, #8]
 80034f8:	b21b      	sxth	r3, r3
 80034fa:	4313      	orrs	r3, r2
 80034fc:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80034fe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003502:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003510:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003514:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003522:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003526:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800352a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800354c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	ee07 3a90 	vmov	s15, r3
}
 8003556:	eeb0 0a67 	vmov.f32	s0, s15
 800355a:	3720      	adds	r7, #32
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f87b 	bl	8003668 <LPS22HB_Init>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003584:	2300      	movs	r3, #0
 8003586:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003588:	f7ff fd70 	bl	800306c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	210f      	movs	r1, #15
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fd8e 	bl	80030b4 <SENSOR_IO_Read>
 8003598:	4603      	mov	r3, r0
 800359a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	74fb      	strb	r3, [r7, #19]
 80035ba:	e013      	b.n	80035e4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	3328      	adds	r3, #40	; 0x28
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	7cfc      	ldrb	r4, [r7, #19]
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f7ff fd72 	bl	80030b4 <SENSOR_IO_Read>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	f107 0318 	add.w	r3, r7, #24
 80035d8:	4423      	add	r3, r4
 80035da:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	3301      	adds	r3, #1
 80035e2:	74fb      	strb	r3, [r7, #19]
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d9e8      	bls.n	80035bc <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	74fb      	strb	r3, [r7, #19]
 80035ee:	e010      	b.n	8003612 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	f107 0218 	add.w	r2, r7, #24
 80035f6:	4413      	add	r3, r2
 80035f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80035fc:	461a      	mov	r2, r3
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	3301      	adds	r3, #1
 8003610:	74fb      	strb	r3, [r7, #19]
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d9eb      	bls.n	80035f0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003628:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2264      	movs	r2, #100	; 0x64
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	da01      	bge.n	800363e <LPS22HB_P_ReadPressure+0x96>
 800363a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800363e:	131b      	asrs	r3, r3, #12
 8003640:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	ee07 3a90 	vmov	s15, r3
 8003648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003664 <LPS22HB_P_ReadPressure+0xbc>
 8003650:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003654:	eef0 7a66 	vmov.f32	s15, s13
}
 8003658:	eeb0 0a67 	vmov.f32	s0, s15
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd90      	pop	{r4, r7, pc}
 8003662:	bf00      	nop
 8003664:	42c80000 	.word	0x42c80000

08003668 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	211a      	movs	r1, #26
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fd1b 	bl	80030b4 <SENSOR_IO_Read>
 800367e:	4603      	mov	r3, r0
 8003680:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	211a      	movs	r1, #26
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fcf0 	bl	8003080 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2110      	movs	r1, #16
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fd04 	bl	80030b4 <SENSOR_IO_Read>
 80036ac:	4603      	mov	r3, r0
 80036ae:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80036be:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	f023 0302 	bic.w	r3, r3, #2
 80036c6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	f043 0302 	orr.w	r3, r3, #2
 80036ce:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	2110      	movs	r1, #16
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fcd1 	bl	8003080 <SENSOR_IO_Write>
}  
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f0:	2003      	movs	r0, #3
 80036f2:	f000 f961 	bl	80039b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036f6:	2000      	movs	r0, #0
 80036f8:	f000 f80e 	bl	8003718 <HAL_InitTick>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	71fb      	strb	r3, [r7, #7]
 8003706:	e001      	b.n	800370c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003708:	f7ff fa42 	bl	8002b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800370c:	79fb      	ldrb	r3, [r7, #7]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003724:	4b17      	ldr	r3, [pc, #92]	; (8003784 <HAL_InitTick+0x6c>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d023      	beq.n	8003774 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800372c:	4b16      	ldr	r3, [pc, #88]	; (8003788 <HAL_InitTick+0x70>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4b14      	ldr	r3, [pc, #80]	; (8003784 <HAL_InitTick+0x6c>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	4619      	mov	r1, r3
 8003736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800373a:	fbb3 f3f1 	udiv	r3, r3, r1
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f96d 	bl	8003a22 <HAL_SYSTICK_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b0f      	cmp	r3, #15
 8003752:	d809      	bhi.n	8003768 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003754:	2200      	movs	r2, #0
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f000 f937 	bl	80039ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <HAL_InitTick+0x74>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e007      	b.n	8003778 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
 800376c:	e004      	b.n	8003778 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
 8003772:	e001      	b.n	8003778 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003778:	7bfb      	ldrb	r3, [r7, #15]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000030 	.word	0x20000030
 8003788:	20000004 	.word	0x20000004
 800378c:	2000002c 	.word	0x2000002c

08003790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_IncTick+0x20>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_IncTick+0x24>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <HAL_IncTick+0x24>)
 80037a2:	6013      	str	r3, [r2, #0]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000030 	.word	0x20000030
 80037b4:	200006f0 	.word	0x200006f0

080037b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return uwTick;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_GetTick+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	200006f0 	.word	0x200006f0

080037d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d8:	f7ff ffee 	bl	80037b8 <HAL_GetTick>
 80037dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d005      	beq.n	80037f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <HAL_Delay+0x44>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037f6:	bf00      	nop
 80037f8:	f7ff ffde 	bl	80037b8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	429a      	cmp	r2, r3
 8003806:	d8f7      	bhi.n	80037f8 <HAL_Delay+0x28>
  {
  }
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000030 	.word	0x20000030

08003818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003834:	4013      	ands	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384a:	4a04      	ldr	r2, [pc, #16]	; (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	60d3      	str	r3, [r2, #12]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <__NVIC_GetPriorityGrouping+0x18>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0307 	and.w	r3, r3, #7
}
 800386e:	4618      	mov	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db0b      	blt.n	80038a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4907      	ldr	r1, [pc, #28]	; (80038b4 <__NVIC_EnableIRQ+0x38>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000e100 	.word	0xe000e100

080038b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	db0a      	blt.n	80038e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	490c      	ldr	r1, [pc, #48]	; (8003904 <__NVIC_SetPriority+0x4c>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	440b      	add	r3, r1
 80038dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e0:	e00a      	b.n	80038f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	4908      	ldr	r1, [pc, #32]	; (8003908 <__NVIC_SetPriority+0x50>)
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	3b04      	subs	r3, #4
 80038f0:	0112      	lsls	r2, r2, #4
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	440b      	add	r3, r1
 80038f6:	761a      	strb	r2, [r3, #24]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f1c3 0307 	rsb	r3, r3, #7
 8003926:	2b04      	cmp	r3, #4
 8003928:	bf28      	it	cs
 800392a:	2304      	movcs	r3, #4
 800392c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3304      	adds	r3, #4
 8003932:	2b06      	cmp	r3, #6
 8003934:	d902      	bls.n	800393c <NVIC_EncodePriority+0x30>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3b03      	subs	r3, #3
 800393a:	e000      	b.n	800393e <NVIC_EncodePriority+0x32>
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	401a      	ands	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003954:	f04f 31ff 	mov.w	r1, #4294967295
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	43d9      	mvns	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003964:	4313      	orrs	r3, r2
         );
}
 8003966:	4618      	mov	r0, r3
 8003968:	3724      	adds	r7, #36	; 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003984:	d301      	bcc.n	800398a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003986:	2301      	movs	r3, #1
 8003988:	e00f      	b.n	80039aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <SysTick_Config+0x40>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003992:	210f      	movs	r1, #15
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	f7ff ff8e 	bl	80038b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <SysTick_Config+0x40>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039a2:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <SysTick_Config+0x40>)
 80039a4:	2207      	movs	r2, #7
 80039a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	e000e010 	.word	0xe000e010

080039b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff29 	bl	8003818 <__NVIC_SetPriorityGrouping>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039e0:	f7ff ff3e 	bl	8003860 <__NVIC_GetPriorityGrouping>
 80039e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	6978      	ldr	r0, [r7, #20]
 80039ec:	f7ff ff8e 	bl	800390c <NVIC_EncodePriority>
 80039f0:	4602      	mov	r2, r0
 80039f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff5d 	bl	80038b8 <__NVIC_SetPriority>
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff31 	bl	800387c <__NVIC_EnableIRQ>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ffa2 	bl	8003974 <SysTick_Config>
 8003a30:	4603      	mov	r3, r0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	460b      	mov	r3, r1
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003a4c:	7afb      	ldrb	r3, [r7, #11]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	605a      	str	r2, [r3, #4]
      break;
 8003a58:	e002      	b.n	8003a60 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5e:	bf00      	nop
  }

  return status;
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e003      	b.n	8003a8a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_EXTI_IRQHandler+0x5c>)
 8003ac2:	4413      	add	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4798      	blx	r3
    }
  }
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40010414 	.word	0x40010414

08003af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b06:	e17f      	b.n	8003e08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	4013      	ands	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8171 	beq.w	8003e02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d005      	beq.n	8003b38 <HAL_GPIO_Init+0x40>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d130      	bne.n	8003b9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	2203      	movs	r2, #3
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b6e:	2201      	movs	r2, #1
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	f003 0201 	and.w	r2, r3, #1
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d118      	bne.n	8003bd8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003bac:	2201      	movs	r2, #1
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	08db      	lsrs	r3, r3, #3
 8003bc2:	f003 0201 	and.w	r2, r3, #1
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d017      	beq.n	8003c14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	2203      	movs	r2, #3
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d123      	bne.n	8003c68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	08da      	lsrs	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3208      	adds	r2, #8
 8003c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	220f      	movs	r2, #15
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	08da      	lsrs	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3208      	adds	r2, #8
 8003c62:	6939      	ldr	r1, [r7, #16]
 8003c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	2203      	movs	r2, #3
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0203 	and.w	r2, r3, #3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80ac 	beq.w	8003e02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003caa:	4b5f      	ldr	r3, [pc, #380]	; (8003e28 <HAL_GPIO_Init+0x330>)
 8003cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cae:	4a5e      	ldr	r2, [pc, #376]	; (8003e28 <HAL_GPIO_Init+0x330>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6613      	str	r3, [r2, #96]	; 0x60
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	; (8003e28 <HAL_GPIO_Init+0x330>)
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cc2:	4a5a      	ldr	r2, [pc, #360]	; (8003e2c <HAL_GPIO_Init+0x334>)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	3302      	adds	r3, #2
 8003cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	220f      	movs	r2, #15
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cec:	d025      	beq.n	8003d3a <HAL_GPIO_Init+0x242>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a4f      	ldr	r2, [pc, #316]	; (8003e30 <HAL_GPIO_Init+0x338>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01f      	beq.n	8003d36 <HAL_GPIO_Init+0x23e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a4e      	ldr	r2, [pc, #312]	; (8003e34 <HAL_GPIO_Init+0x33c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d019      	beq.n	8003d32 <HAL_GPIO_Init+0x23a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4d      	ldr	r2, [pc, #308]	; (8003e38 <HAL_GPIO_Init+0x340>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <HAL_GPIO_Init+0x236>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4c      	ldr	r2, [pc, #304]	; (8003e3c <HAL_GPIO_Init+0x344>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00d      	beq.n	8003d2a <HAL_GPIO_Init+0x232>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4b      	ldr	r2, [pc, #300]	; (8003e40 <HAL_GPIO_Init+0x348>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d007      	beq.n	8003d26 <HAL_GPIO_Init+0x22e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4a      	ldr	r2, [pc, #296]	; (8003e44 <HAL_GPIO_Init+0x34c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d101      	bne.n	8003d22 <HAL_GPIO_Init+0x22a>
 8003d1e:	2306      	movs	r3, #6
 8003d20:	e00c      	b.n	8003d3c <HAL_GPIO_Init+0x244>
 8003d22:	2307      	movs	r3, #7
 8003d24:	e00a      	b.n	8003d3c <HAL_GPIO_Init+0x244>
 8003d26:	2305      	movs	r3, #5
 8003d28:	e008      	b.n	8003d3c <HAL_GPIO_Init+0x244>
 8003d2a:	2304      	movs	r3, #4
 8003d2c:	e006      	b.n	8003d3c <HAL_GPIO_Init+0x244>
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e004      	b.n	8003d3c <HAL_GPIO_Init+0x244>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e002      	b.n	8003d3c <HAL_GPIO_Init+0x244>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_GPIO_Init+0x244>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	f002 0203 	and.w	r2, r2, #3
 8003d42:	0092      	lsls	r2, r2, #2
 8003d44:	4093      	lsls	r3, r2
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d4c:	4937      	ldr	r1, [pc, #220]	; (8003e2c <HAL_GPIO_Init+0x334>)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	3302      	adds	r3, #2
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d5a:	4b3b      	ldr	r3, [pc, #236]	; (8003e48 <HAL_GPIO_Init+0x350>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d7e:	4a32      	ldr	r2, [pc, #200]	; (8003e48 <HAL_GPIO_Init+0x350>)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d84:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <HAL_GPIO_Init+0x350>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003da8:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <HAL_GPIO_Init+0x350>)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dae:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <HAL_GPIO_Init+0x350>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dd2:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <HAL_GPIO_Init+0x350>)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <HAL_GPIO_Init+0x350>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dfc:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <HAL_GPIO_Init+0x350>)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	3301      	adds	r3, #1
 8003e06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f47f ae78 	bne.w	8003b08 <HAL_GPIO_Init+0x10>
  }
}
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	48000400 	.word	0x48000400
 8003e34:	48000800 	.word	0x48000800
 8003e38:	48000c00 	.word	0x48000c00
 8003e3c:	48001000 	.word	0x48001000
 8003e40:	48001400 	.word	0x48001400
 8003e44:	48001800 	.word	0x48001800
 8003e48:	40010400 	.word	0x40010400

08003e4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e5a:	e0cd      	b.n	8003ff8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80c0 	beq.w	8003ff2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003e72:	4a68      	ldr	r2, [pc, #416]	; (8004014 <HAL_GPIO_DeInit+0x1c8>)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	3302      	adds	r3, #2
 8003e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	220f      	movs	r2, #15
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4013      	ands	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e9a:	d025      	beq.n	8003ee8 <HAL_GPIO_DeInit+0x9c>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a5e      	ldr	r2, [pc, #376]	; (8004018 <HAL_GPIO_DeInit+0x1cc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d01f      	beq.n	8003ee4 <HAL_GPIO_DeInit+0x98>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a5d      	ldr	r2, [pc, #372]	; (800401c <HAL_GPIO_DeInit+0x1d0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d019      	beq.n	8003ee0 <HAL_GPIO_DeInit+0x94>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a5c      	ldr	r2, [pc, #368]	; (8004020 <HAL_GPIO_DeInit+0x1d4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <HAL_GPIO_DeInit+0x90>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a5b      	ldr	r2, [pc, #364]	; (8004024 <HAL_GPIO_DeInit+0x1d8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00d      	beq.n	8003ed8 <HAL_GPIO_DeInit+0x8c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a5a      	ldr	r2, [pc, #360]	; (8004028 <HAL_GPIO_DeInit+0x1dc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <HAL_GPIO_DeInit+0x88>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a59      	ldr	r2, [pc, #356]	; (800402c <HAL_GPIO_DeInit+0x1e0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d101      	bne.n	8003ed0 <HAL_GPIO_DeInit+0x84>
 8003ecc:	2306      	movs	r3, #6
 8003ece:	e00c      	b.n	8003eea <HAL_GPIO_DeInit+0x9e>
 8003ed0:	2307      	movs	r3, #7
 8003ed2:	e00a      	b.n	8003eea <HAL_GPIO_DeInit+0x9e>
 8003ed4:	2305      	movs	r3, #5
 8003ed6:	e008      	b.n	8003eea <HAL_GPIO_DeInit+0x9e>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	e006      	b.n	8003eea <HAL_GPIO_DeInit+0x9e>
 8003edc:	2303      	movs	r3, #3
 8003ede:	e004      	b.n	8003eea <HAL_GPIO_DeInit+0x9e>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e002      	b.n	8003eea <HAL_GPIO_DeInit+0x9e>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_GPIO_DeInit+0x9e>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	f002 0203 	and.w	r2, r2, #3
 8003ef0:	0092      	lsls	r2, r2, #2
 8003ef2:	4093      	lsls	r3, r2
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d132      	bne.n	8003f60 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003efa:	4b4d      	ldr	r3, [pc, #308]	; (8004030 <HAL_GPIO_DeInit+0x1e4>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	494b      	ldr	r1, [pc, #300]	; (8004030 <HAL_GPIO_DeInit+0x1e4>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003f08:	4b49      	ldr	r3, [pc, #292]	; (8004030 <HAL_GPIO_DeInit+0x1e4>)
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	4947      	ldr	r1, [pc, #284]	; (8004030 <HAL_GPIO_DeInit+0x1e4>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f16:	4b46      	ldr	r3, [pc, #280]	; (8004030 <HAL_GPIO_DeInit+0x1e4>)
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	4944      	ldr	r1, [pc, #272]	; (8004030 <HAL_GPIO_DeInit+0x1e4>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f24:	4b42      	ldr	r3, [pc, #264]	; (8004030 <HAL_GPIO_DeInit+0x1e4>)
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	4940      	ldr	r1, [pc, #256]	; (8004030 <HAL_GPIO_DeInit+0x1e4>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	220f      	movs	r2, #15
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003f42:	4a34      	ldr	r2, [pc, #208]	; (8004014 <HAL_GPIO_DeInit+0x1c8>)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	3302      	adds	r3, #2
 8003f4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	43da      	mvns	r2, r3
 8003f52:	4830      	ldr	r0, [pc, #192]	; (8004014 <HAL_GPIO_DeInit+0x1c8>)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	400a      	ands	r2, r1
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	2103      	movs	r1, #3
 8003f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	08da      	lsrs	r2, r3, #3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3208      	adds	r2, #8
 8003f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	220f      	movs	r2, #15
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	08d2      	lsrs	r2, r2, #3
 8003f94:	4019      	ands	r1, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	401a      	ands	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	2101      	movs	r1, #1
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	2103      	movs	r1, #3
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	401a      	ands	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	401a      	ands	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	f47f af2b 	bne.w	8003e5c <HAL_GPIO_DeInit+0x10>
  }
}
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	40010000 	.word	0x40010000
 8004018:	48000400 	.word	0x48000400
 800401c:	48000800 	.word	0x48000800
 8004020:	48000c00 	.word	0x48000c00
 8004024:	48001000 	.word	0x48001000
 8004028:	48001400 	.word	0x48001400
 800402c:	48001800 	.word	0x48001800
 8004030:	40010400 	.word	0x40010400

08004034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	887b      	ldrh	r3, [r7, #2]
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	e001      	b.n	8004056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004056:	7bfb      	ldrb	r3, [r7, #15]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
 8004070:	4613      	mov	r3, r2
 8004072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004074:	787b      	ldrb	r3, [r7, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800407a:	887a      	ldrh	r2, [r7, #2]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004080:	e002      	b.n	8004088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004082:	887a      	ldrh	r2, [r7, #2]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040aa:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f806 	bl	80040c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40010400 	.word	0x40010400

080040c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e081      	b.n	80041f0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f8a8 	bl	8004256 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2224      	movs	r2, #36	; 0x24
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800412a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800413a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d107      	bne.n	8004154 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004150:	609a      	str	r2, [r3, #8]
 8004152:	e006      	b.n	8004162 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004160:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d104      	bne.n	8004174 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004172:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004186:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004196:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69d9      	ldr	r1, [r3, #28]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1a      	ldr	r2, [r3, #32]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e021      	b.n	800424e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2224      	movs	r2, #36	; 0x24
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f821 	bl	800426a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	461a      	mov	r2, r3
 800428e:	4603      	mov	r3, r0
 8004290:	817b      	strh	r3, [r7, #10]
 8004292:	460b      	mov	r3, r1
 8004294:	813b      	strh	r3, [r7, #8]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	f040 80f9 	bne.w	800449a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_I2C_Mem_Write+0x34>
 80042ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d105      	bne.n	80042c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0ed      	b.n	800449c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_I2C_Mem_Write+0x4e>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e0e6      	b.n	800449c <HAL_I2C_Mem_Write+0x21c>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042d6:	f7ff fa6f 	bl	80037b8 <HAL_GetTick>
 80042da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	2319      	movs	r3, #25
 80042e2:	2201      	movs	r2, #1
 80042e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fac3 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0d1      	b.n	800449c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2221      	movs	r2, #33	; 0x21
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2240      	movs	r2, #64	; 0x40
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004320:	88f8      	ldrh	r0, [r7, #6]
 8004322:	893a      	ldrh	r2, [r7, #8]
 8004324:	8979      	ldrh	r1, [r7, #10]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	4603      	mov	r3, r0
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f9d3 	bl	80046dc <I2C_RequestMemoryWrite>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0a9      	b.n	800449c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2bff      	cmp	r3, #255	; 0xff
 8004350:	d90e      	bls.n	8004370 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	22ff      	movs	r2, #255	; 0xff
 8004356:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	b2da      	uxtb	r2, r3
 800435e:	8979      	ldrh	r1, [r7, #10]
 8004360:	2300      	movs	r3, #0
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fc2b 	bl	8004bc4 <I2C_TransferConfig>
 800436e:	e00f      	b.n	8004390 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437e:	b2da      	uxtb	r2, r3
 8004380:	8979      	ldrh	r1, [r7, #10]
 8004382:	2300      	movs	r3, #0
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fc1a 	bl	8004bc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 faad 	bl	80048f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e07b      	b.n	800449c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d034      	beq.n	8004448 <HAL_I2C_Mem_Write+0x1c8>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d130      	bne.n	8004448 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	2200      	movs	r2, #0
 80043ee:	2180      	movs	r1, #128	; 0x80
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fa3f 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e04d      	b.n	800449c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2bff      	cmp	r3, #255	; 0xff
 8004408:	d90e      	bls.n	8004428 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	22ff      	movs	r2, #255	; 0xff
 800440e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004414:	b2da      	uxtb	r2, r3
 8004416:	8979      	ldrh	r1, [r7, #10]
 8004418:	2300      	movs	r3, #0
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fbcf 	bl	8004bc4 <I2C_TransferConfig>
 8004426:	e00f      	b.n	8004448 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004436:	b2da      	uxtb	r2, r3
 8004438:	8979      	ldrh	r1, [r7, #10]
 800443a:	2300      	movs	r3, #0
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fbbe 	bl	8004bc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d19e      	bne.n	8004390 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fa8c 	bl	8004974 <I2C_WaitOnSTOPFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e01a      	b.n	800449c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2220      	movs	r2, #32
 800446c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <HAL_I2C_Mem_Write+0x224>)
 800447a:	400b      	ands	r3, r1
 800447c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
  }
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	fe00e800 	.word	0xfe00e800

080044a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	4608      	mov	r0, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	461a      	mov	r2, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	817b      	strh	r3, [r7, #10]
 80044ba:	460b      	mov	r3, r1
 80044bc:	813b      	strh	r3, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	f040 80fd 	bne.w	80046ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_I2C_Mem_Read+0x34>
 80044d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0f1      	b.n	80046cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_I2C_Mem_Read+0x4e>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e0ea      	b.n	80046cc <HAL_I2C_Mem_Read+0x224>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044fe:	f7ff f95b 	bl	80037b8 <HAL_GetTick>
 8004502:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	2319      	movs	r3, #25
 800450a:	2201      	movs	r2, #1
 800450c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f9af 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0d5      	b.n	80046cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2222      	movs	r2, #34	; 0x22
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2240      	movs	r2, #64	; 0x40
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004540:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004548:	88f8      	ldrh	r0, [r7, #6]
 800454a:	893a      	ldrh	r2, [r7, #8]
 800454c:	8979      	ldrh	r1, [r7, #10]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	4603      	mov	r3, r0
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f913 	bl	8004784 <I2C_RequestMemoryRead>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0ad      	b.n	80046cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004574:	b29b      	uxth	r3, r3
 8004576:	2bff      	cmp	r3, #255	; 0xff
 8004578:	d90e      	bls.n	8004598 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	22ff      	movs	r2, #255	; 0xff
 800457e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	b2da      	uxtb	r2, r3
 8004586:	8979      	ldrh	r1, [r7, #10]
 8004588:	4b52      	ldr	r3, [pc, #328]	; (80046d4 <HAL_I2C_Mem_Read+0x22c>)
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fb17 	bl	8004bc4 <I2C_TransferConfig>
 8004596:	e00f      	b.n	80045b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	8979      	ldrh	r1, [r7, #10]
 80045aa:	4b4a      	ldr	r3, [pc, #296]	; (80046d4 <HAL_I2C_Mem_Read+0x22c>)
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fb06 	bl	8004bc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	2200      	movs	r2, #0
 80045c0:	2104      	movs	r1, #4
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f956 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e07c      	b.n	80046cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d034      	beq.n	8004678 <HAL_I2C_Mem_Read+0x1d0>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	2b00      	cmp	r3, #0
 8004614:	d130      	bne.n	8004678 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	2200      	movs	r2, #0
 800461e:	2180      	movs	r1, #128	; 0x80
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f927 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e04d      	b.n	80046cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2bff      	cmp	r3, #255	; 0xff
 8004638:	d90e      	bls.n	8004658 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	22ff      	movs	r2, #255	; 0xff
 800463e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	b2da      	uxtb	r2, r3
 8004646:	8979      	ldrh	r1, [r7, #10]
 8004648:	2300      	movs	r3, #0
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fab7 	bl	8004bc4 <I2C_TransferConfig>
 8004656:	e00f      	b.n	8004678 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	b2da      	uxtb	r2, r3
 8004668:	8979      	ldrh	r1, [r7, #10]
 800466a:	2300      	movs	r3, #0
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 faa6 	bl	8004bc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d19a      	bne.n	80045b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f974 	bl	8004974 <I2C_WaitOnSTOPFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e01a      	b.n	80046cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2220      	movs	r2, #32
 800469c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_I2C_Mem_Read+0x230>)
 80046aa:	400b      	ands	r3, r1
 80046ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e000      	b.n	80046cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
  }
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	80002400 	.word	0x80002400
 80046d8:	fe00e800 	.word	0xfe00e800

080046dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	4608      	mov	r0, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	461a      	mov	r2, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	817b      	strh	r3, [r7, #10]
 80046ee:	460b      	mov	r3, r1
 80046f0:	813b      	strh	r3, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	8979      	ldrh	r1, [r7, #10]
 80046fc:	4b20      	ldr	r3, [pc, #128]	; (8004780 <I2C_RequestMemoryWrite+0xa4>)
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fa5d 	bl	8004bc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	69b9      	ldr	r1, [r7, #24]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f8f0 	bl	80048f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e02c      	b.n	8004778 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004724:	893b      	ldrh	r3, [r7, #8]
 8004726:	b2da      	uxtb	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	629a      	str	r2, [r3, #40]	; 0x28
 800472e:	e015      	b.n	800475c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004730:	893b      	ldrh	r3, [r7, #8]
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	b29b      	uxth	r3, r3
 8004736:	b2da      	uxtb	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	69b9      	ldr	r1, [r7, #24]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f8d6 	bl	80048f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e012      	b.n	8004778 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004752:	893b      	ldrh	r3, [r7, #8]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2200      	movs	r2, #0
 8004764:	2180      	movs	r1, #128	; 0x80
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f884 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	80002000 	.word	0x80002000

08004784 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	4608      	mov	r0, r1
 800478e:	4611      	mov	r1, r2
 8004790:	461a      	mov	r2, r3
 8004792:	4603      	mov	r3, r0
 8004794:	817b      	strh	r3, [r7, #10]
 8004796:	460b      	mov	r3, r1
 8004798:	813b      	strh	r3, [r7, #8]
 800479a:	4613      	mov	r3, r2
 800479c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	8979      	ldrh	r1, [r7, #10]
 80047a4:	4b20      	ldr	r3, [pc, #128]	; (8004828 <I2C_RequestMemoryRead+0xa4>)
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	2300      	movs	r3, #0
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fa0a 	bl	8004bc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	69b9      	ldr	r1, [r7, #24]
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f89d 	bl	80048f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e02c      	b.n	800481e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d105      	bne.n	80047d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047ca:	893b      	ldrh	r3, [r7, #8]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
 80047d4:	e015      	b.n	8004802 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047d6:	893b      	ldrh	r3, [r7, #8]
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	b29b      	uxth	r3, r3
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	69b9      	ldr	r1, [r7, #24]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f883 	bl	80048f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e012      	b.n	800481e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047f8:	893b      	ldrh	r3, [r7, #8]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2200      	movs	r2, #0
 800480a:	2140      	movs	r1, #64	; 0x40
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f831 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	80002000 	.word	0x80002000

0800482c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b02      	cmp	r3, #2
 8004840:	d103      	bne.n	800484a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b01      	cmp	r3, #1
 8004856:	d007      	beq.n	8004868 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	619a      	str	r2, [r3, #24]
  }
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004884:	e022      	b.n	80048cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d01e      	beq.n	80048cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488e:	f7fe ff93 	bl	80037b8 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d113      	bne.n	80048cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e00f      	b.n	80048ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	429a      	cmp	r2, r3
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d0cd      	beq.n	8004886 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004900:	e02c      	b.n	800495c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f870 	bl	80049ec <I2C_IsErrorOccurred>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e02a      	b.n	800496c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d01e      	beq.n	800495c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491e:	f7fe ff4b 	bl	80037b8 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	d302      	bcc.n	8004934 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d113      	bne.n	800495c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e007      	b.n	800496c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b02      	cmp	r3, #2
 8004968:	d1cb      	bne.n	8004902 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004980:	e028      	b.n	80049d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f830 	bl	80049ec <I2C_IsErrorOccurred>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e026      	b.n	80049e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004996:	f7fe ff0f 	bl	80037b8 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d302      	bcc.n	80049ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d113      	bne.n	80049d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b0:	f043 0220 	orr.w	r2, r3, #32
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e007      	b.n	80049e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d1cf      	bne.n	8004982 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	; 0x28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d075      	beq.n	8004b04 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a20:	e056      	b.n	8004ad0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d052      	beq.n	8004ad0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fe fec5 	bl	80037b8 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <I2C_IsErrorOccurred+0x54>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d147      	bne.n	8004ad0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a62:	d12e      	bne.n	8004ac2 <I2C_IsErrorOccurred+0xd6>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a6a:	d02a      	beq.n	8004ac2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d027      	beq.n	8004ac2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a82:	f7fe fe99 	bl	80037b8 <HAL_GetTick>
 8004a86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a88:	e01b      	b.n	8004ac2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a8a:	f7fe fe95 	bl	80037b8 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b19      	cmp	r3, #25
 8004a96:	d914      	bls.n	8004ac2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	f043 0220 	orr.w	r2, r3, #32
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d1dc      	bne.n	8004a8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b20      	cmp	r3, #32
 8004adc:	d003      	beq.n	8004ae6 <I2C_IsErrorOccurred+0xfa>
 8004ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d09d      	beq.n	8004a22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d103      	bne.n	8004af6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2220      	movs	r2, #32
 8004af4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00b      	beq.n	8004b50 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	f043 0308 	orr.w	r3, r3, #8
 8004b3e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	f043 0302 	orr.w	r3, r3, #2
 8004b60:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01c      	beq.n	8004bb4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff fe56 	bl	800482c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6859      	ldr	r1, [r3, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <I2C_IsErrorOccurred+0x1d4>)
 8004b8c:	400b      	ands	r3, r1
 8004b8e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3728      	adds	r7, #40	; 0x28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	fe00e800 	.word	0xfe00e800

08004bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	817b      	strh	r3, [r7, #10]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bd6:	897b      	ldrh	r3, [r7, #10]
 8004bd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bdc:	7a7b      	ldrb	r3, [r7, #9]
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004be4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bf2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	0d5b      	lsrs	r3, r3, #21
 8004bfe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <I2C_TransferConfig+0x60>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	43db      	mvns	r3, r3
 8004c08:	ea02 0103 	and.w	r1, r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	03ff63ff 	.word	0x03ff63ff

08004c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d138      	bne.n	8004cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e032      	b.n	8004cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	; 0x24
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e000      	b.n	8004cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cb0:	2302      	movs	r3, #2
  }
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40007000 	.word	0x40007000

08004cdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cea:	d130      	bne.n	8004d4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cec:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf8:	d038      	beq.n	8004d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cfa:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d02:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d0a:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2232      	movs	r2, #50	; 0x32
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	4a1b      	ldr	r2, [pc, #108]	; (8004d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	0c9b      	lsrs	r3, r3, #18
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d20:	e002      	b.n	8004d28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d28:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d34:	d102      	bne.n	8004d3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f2      	bne.n	8004d22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d3c:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d48:	d110      	bne.n	8004d6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e00f      	b.n	8004d6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5a:	d007      	beq.n	8004d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d5c:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d64:	4a05      	ldr	r2, [pc, #20]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40007000 	.word	0x40007000
 8004d80:	20000004 	.word	0x20000004
 8004d84:	431bde83 	.word	0x431bde83

08004d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e3c6      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9a:	4ba1      	ldr	r3, [pc, #644]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
 8004da2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da4:	4b9e      	ldr	r3, [pc, #632]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80e4 	beq.w	8004f84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x4a>
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	2b0c      	cmp	r3, #12
 8004dc6:	f040 808b 	bne.w	8004ee0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	f040 8087 	bne.w	8004ee0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dd2:	4b93      	ldr	r3, [pc, #588]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_RCC_OscConfig+0x62>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e39e      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1a      	ldr	r2, [r3, #32]
 8004dee:	4b8c      	ldr	r3, [pc, #560]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <HAL_RCC_OscConfig+0x7c>
 8004dfa:	4b89      	ldr	r3, [pc, #548]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e02:	e005      	b.n	8004e10 <HAL_RCC_OscConfig+0x88>
 8004e04:	4b86      	ldr	r3, [pc, #536]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d223      	bcs.n	8004e5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fd1b 	bl	8005854 <RCC_SetFlashLatencyFromMSIRange>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e37f      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e28:	4b7d      	ldr	r3, [pc, #500]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a7c      	ldr	r2, [pc, #496]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e2e:	f043 0308 	orr.w	r3, r3, #8
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	4b7a      	ldr	r3, [pc, #488]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	4977      	ldr	r1, [pc, #476]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e46:	4b76      	ldr	r3, [pc, #472]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	4972      	ldr	r1, [pc, #456]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
 8004e5a:	e025      	b.n	8004ea8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e5c:	4b70      	ldr	r3, [pc, #448]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a6f      	ldr	r2, [pc, #444]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e62:	f043 0308 	orr.w	r3, r3, #8
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	4b6d      	ldr	r3, [pc, #436]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	496a      	ldr	r1, [pc, #424]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e7a:	4b69      	ldr	r3, [pc, #420]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	4965      	ldr	r1, [pc, #404]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fcdb 	bl	8005854 <RCC_SetFlashLatencyFromMSIRange>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e33f      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ea8:	f000 fc48 	bl	800573c <HAL_RCC_GetSysClockFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b5c      	ldr	r3, [pc, #368]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	091b      	lsrs	r3, r3, #4
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	495a      	ldr	r1, [pc, #360]	; (8005024 <HAL_RCC_OscConfig+0x29c>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec4:	4a58      	ldr	r2, [pc, #352]	; (8005028 <HAL_RCC_OscConfig+0x2a0>)
 8004ec6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ec8:	4b58      	ldr	r3, [pc, #352]	; (800502c <HAL_RCC_OscConfig+0x2a4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fe fc23 	bl	8003718 <HAL_InitTick>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d052      	beq.n	8004f82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	e323      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d032      	beq.n	8004f4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ee8:	4b4d      	ldr	r3, [pc, #308]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a4c      	ldr	r2, [pc, #304]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ef4:	f7fe fc60 	bl	80037b8 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004efc:	f7fe fc5c 	bl	80037b8 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e30c      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f0e:	4b44      	ldr	r3, [pc, #272]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f1a:	4b41      	ldr	r3, [pc, #260]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a40      	ldr	r2, [pc, #256]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004f20:	f043 0308 	orr.w	r3, r3, #8
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	493b      	ldr	r1, [pc, #236]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f38:	4b39      	ldr	r3, [pc, #228]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	4936      	ldr	r1, [pc, #216]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	604b      	str	r3, [r1, #4]
 8004f4c:	e01a      	b.n	8004f84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f4e:	4b34      	ldr	r3, [pc, #208]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a33      	ldr	r2, [pc, #204]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f5a:	f7fe fc2d 	bl	80037b8 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f62:	f7fe fc29 	bl	80037b8 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e2d9      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f74:	4b2a      	ldr	r3, [pc, #168]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1f0      	bne.n	8004f62 <HAL_RCC_OscConfig+0x1da>
 8004f80:	e000      	b.n	8004f84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d074      	beq.n	800507a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d005      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x21a>
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b0c      	cmp	r3, #12
 8004f9a:	d10e      	bne.n	8004fba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d10b      	bne.n	8004fba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa2:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d064      	beq.n	8005078 <HAL_RCC_OscConfig+0x2f0>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d160      	bne.n	8005078 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e2b6      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc2:	d106      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x24a>
 8004fc4:	4b16      	ldr	r3, [pc, #88]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e01d      	b.n	800500e <HAL_RCC_OscConfig+0x286>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fda:	d10c      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x26e>
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a0c      	ldr	r2, [pc, #48]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	e00b      	b.n	800500e <HAL_RCC_OscConfig+0x286>
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a09      	ldr	r2, [pc, #36]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8004ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4b07      	ldr	r3, [pc, #28]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a06      	ldr	r2, [pc, #24]	; (8005020 <HAL_RCC_OscConfig+0x298>)
 8005008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800500c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01c      	beq.n	8005050 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005016:	f7fe fbcf 	bl	80037b8 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800501c:	e011      	b.n	8005042 <HAL_RCC_OscConfig+0x2ba>
 800501e:	bf00      	nop
 8005020:	40021000 	.word	0x40021000
 8005024:	080088c4 	.word	0x080088c4
 8005028:	20000004 	.word	0x20000004
 800502c:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005030:	f7fe fbc2 	bl	80037b8 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	; 0x64
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e272      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005042:	4baf      	ldr	r3, [pc, #700]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0x2a8>
 800504e:	e014      	b.n	800507a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fe fbb2 	bl	80037b8 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005058:	f7fe fbae 	bl	80037b8 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b64      	cmp	r3, #100	; 0x64
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e25e      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800506a:	4ba5      	ldr	r3, [pc, #660]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x2d0>
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d060      	beq.n	8005148 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b04      	cmp	r3, #4
 800508a:	d005      	beq.n	8005098 <HAL_RCC_OscConfig+0x310>
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b0c      	cmp	r3, #12
 8005090:	d119      	bne.n	80050c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d116      	bne.n	80050c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005098:	4b99      	ldr	r3, [pc, #612]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_OscConfig+0x328>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e23b      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b0:	4b93      	ldr	r3, [pc, #588]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	061b      	lsls	r3, r3, #24
 80050be:	4990      	ldr	r1, [pc, #576]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050c4:	e040      	b.n	8005148 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d023      	beq.n	8005116 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ce:	4b8c      	ldr	r3, [pc, #560]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a8b      	ldr	r2, [pc, #556]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050da:	f7fe fb6d 	bl	80037b8 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e2:	f7fe fb69 	bl	80037b8 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e219      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f4:	4b82      	ldr	r3, [pc, #520]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005100:	4b7f      	ldr	r3, [pc, #508]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	061b      	lsls	r3, r3, #24
 800510e:	497c      	ldr	r1, [pc, #496]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]
 8005114:	e018      	b.n	8005148 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005116:	4b7a      	ldr	r3, [pc, #488]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a79      	ldr	r2, [pc, #484]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 800511c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005122:	f7fe fb49 	bl	80037b8 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800512a:	f7fe fb45 	bl	80037b8 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e1f5      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800513c:	4b70      	ldr	r3, [pc, #448]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f0      	bne.n	800512a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d03c      	beq.n	80051ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01c      	beq.n	8005196 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800515c:	4b68      	ldr	r3, [pc, #416]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 800515e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005162:	4a67      	ldr	r2, [pc, #412]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fe fb24 	bl	80037b8 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005174:	f7fe fb20 	bl	80037b8 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e1d0      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005186:	4b5e      	ldr	r3, [pc, #376]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0ef      	beq.n	8005174 <HAL_RCC_OscConfig+0x3ec>
 8005194:	e01b      	b.n	80051ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005196:	4b5a      	ldr	r3, [pc, #360]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800519c:	4a58      	ldr	r2, [pc, #352]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a6:	f7fe fb07 	bl	80037b8 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ae:	f7fe fb03 	bl	80037b8 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e1b3      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051c0:	4b4f      	ldr	r3, [pc, #316]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80051c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1ef      	bne.n	80051ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 80a6 	beq.w	8005328 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051dc:	2300      	movs	r3, #0
 80051de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051e0:	4b47      	ldr	r3, [pc, #284]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10d      	bne.n	8005208 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ec:	4b44      	ldr	r3, [pc, #272]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	4a43      	ldr	r2, [pc, #268]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80051f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f6:	6593      	str	r3, [r2, #88]	; 0x58
 80051f8:	4b41      	ldr	r3, [pc, #260]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005204:	2301      	movs	r3, #1
 8005206:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005208:	4b3e      	ldr	r3, [pc, #248]	; (8005304 <HAL_RCC_OscConfig+0x57c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d118      	bne.n	8005246 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005214:	4b3b      	ldr	r3, [pc, #236]	; (8005304 <HAL_RCC_OscConfig+0x57c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a3a      	ldr	r2, [pc, #232]	; (8005304 <HAL_RCC_OscConfig+0x57c>)
 800521a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005220:	f7fe faca 	bl	80037b8 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005228:	f7fe fac6 	bl	80037b8 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e176      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800523a:	4b32      	ldr	r3, [pc, #200]	; (8005304 <HAL_RCC_OscConfig+0x57c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0f0      	beq.n	8005228 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d108      	bne.n	8005260 <HAL_RCC_OscConfig+0x4d8>
 800524e:	4b2c      	ldr	r3, [pc, #176]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005254:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800525e:	e024      	b.n	80052aa <HAL_RCC_OscConfig+0x522>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b05      	cmp	r3, #5
 8005266:	d110      	bne.n	800528a <HAL_RCC_OscConfig+0x502>
 8005268:	4b25      	ldr	r3, [pc, #148]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	4a24      	ldr	r2, [pc, #144]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005270:	f043 0304 	orr.w	r3, r3, #4
 8005274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005278:	4b21      	ldr	r3, [pc, #132]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	4a20      	ldr	r2, [pc, #128]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005288:	e00f      	b.n	80052aa <HAL_RCC_OscConfig+0x522>
 800528a:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005290:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800529a:	4b19      	ldr	r3, [pc, #100]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	4a17      	ldr	r2, [pc, #92]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80052a2:	f023 0304 	bic.w	r3, r3, #4
 80052a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d016      	beq.n	80052e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b2:	f7fe fa81 	bl	80037b8 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b8:	e00a      	b.n	80052d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ba:	f7fe fa7d 	bl	80037b8 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e12b      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <HAL_RCC_OscConfig+0x578>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0ed      	beq.n	80052ba <HAL_RCC_OscConfig+0x532>
 80052de:	e01a      	b.n	8005316 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e0:	f7fe fa6a 	bl	80037b8 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052e6:	e00f      	b.n	8005308 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e8:	f7fe fa66 	bl	80037b8 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d906      	bls.n	8005308 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e114      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
 80052fe:	bf00      	nop
 8005300:	40021000 	.word	0x40021000
 8005304:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005308:	4b89      	ldr	r3, [pc, #548]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e8      	bne.n	80052e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005316:	7ffb      	ldrb	r3, [r7, #31]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d105      	bne.n	8005328 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531c:	4b84      	ldr	r3, [pc, #528]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	4a83      	ldr	r2, [pc, #524]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 8005322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005326:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80fa 	beq.w	8005526 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	2b02      	cmp	r3, #2
 8005338:	f040 80d0 	bne.w	80054dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800533c:	4b7c      	ldr	r3, [pc, #496]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f003 0203 	and.w	r2, r3, #3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	429a      	cmp	r2, r3
 800534e:	d130      	bne.n	80053b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	3b01      	subs	r3, #1
 800535c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d127      	bne.n	80053b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800536e:	429a      	cmp	r2, r3
 8005370:	d11f      	bne.n	80053b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800537c:	2a07      	cmp	r2, #7
 800537e:	bf14      	ite	ne
 8005380:	2201      	movne	r2, #1
 8005382:	2200      	moveq	r2, #0
 8005384:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005386:	4293      	cmp	r3, r2
 8005388:	d113      	bne.n	80053b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	3b01      	subs	r3, #1
 8005398:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800539a:	429a      	cmp	r2, r3
 800539c:	d109      	bne.n	80053b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	3b01      	subs	r3, #1
 80053ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d06e      	beq.n	8005490 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d069      	beq.n	800548c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053b8:	4b5d      	ldr	r3, [pc, #372]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d105      	bne.n	80053d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053c4:	4b5a      	ldr	r3, [pc, #360]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0a9      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053d4:	4b56      	ldr	r3, [pc, #344]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a55      	ldr	r2, [pc, #340]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 80053da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053e0:	f7fe f9ea 	bl	80037b8 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e8:	f7fe f9e6 	bl	80037b8 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e096      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053fa:	4b4d      	ldr	r3, [pc, #308]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005406:	4b4a      	ldr	r3, [pc, #296]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	4b4a      	ldr	r3, [pc, #296]	; (8005534 <HAL_RCC_OscConfig+0x7ac>)
 800540c:	4013      	ands	r3, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005416:	3a01      	subs	r2, #1
 8005418:	0112      	lsls	r2, r2, #4
 800541a:	4311      	orrs	r1, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005420:	0212      	lsls	r2, r2, #8
 8005422:	4311      	orrs	r1, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005428:	0852      	lsrs	r2, r2, #1
 800542a:	3a01      	subs	r2, #1
 800542c:	0552      	lsls	r2, r2, #21
 800542e:	4311      	orrs	r1, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005434:	0852      	lsrs	r2, r2, #1
 8005436:	3a01      	subs	r2, #1
 8005438:	0652      	lsls	r2, r2, #25
 800543a:	4311      	orrs	r1, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005440:	0912      	lsrs	r2, r2, #4
 8005442:	0452      	lsls	r2, r2, #17
 8005444:	430a      	orrs	r2, r1
 8005446:	493a      	ldr	r1, [pc, #232]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 8005448:	4313      	orrs	r3, r2
 800544a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800544c:	4b38      	ldr	r3, [pc, #224]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a37      	ldr	r2, [pc, #220]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 8005452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005456:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005458:	4b35      	ldr	r3, [pc, #212]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a34      	ldr	r2, [pc, #208]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 800545e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005462:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005464:	f7fe f9a8 	bl	80037b8 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800546c:	f7fe f9a4 	bl	80037b8 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e054      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800547e:	4b2c      	ldr	r3, [pc, #176]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800548a:	e04c      	b.n	8005526 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e04b      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005490:	4b27      	ldr	r3, [pc, #156]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d144      	bne.n	8005526 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800549c:	4b24      	ldr	r3, [pc, #144]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a23      	ldr	r2, [pc, #140]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 80054a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054a8:	4b21      	ldr	r3, [pc, #132]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4a20      	ldr	r2, [pc, #128]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 80054ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054b4:	f7fe f980 	bl	80037b8 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054bc:	f7fe f97c 	bl	80037b8 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e02c      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ce:	4b18      	ldr	r3, [pc, #96]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0x734>
 80054da:	e024      	b.n	8005526 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	d01f      	beq.n	8005522 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e2:	4b13      	ldr	r3, [pc, #76]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a12      	ldr	r2, [pc, #72]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 80054e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ee:	f7fe f963 	bl	80037b8 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f6:	f7fe f95f 	bl	80037b8 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e00f      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005508:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1f0      	bne.n	80054f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005514:	4b06      	ldr	r3, [pc, #24]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	4905      	ldr	r1, [pc, #20]	; (8005530 <HAL_RCC_OscConfig+0x7a8>)
 800551a:	4b07      	ldr	r3, [pc, #28]	; (8005538 <HAL_RCC_OscConfig+0x7b0>)
 800551c:	4013      	ands	r3, r2
 800551e:	60cb      	str	r3, [r1, #12]
 8005520:	e001      	b.n	8005526 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3720      	adds	r7, #32
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40021000 	.word	0x40021000
 8005534:	f99d808c 	.word	0xf99d808c
 8005538:	feeefffc 	.word	0xfeeefffc

0800553c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0e7      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005550:	4b75      	ldr	r3, [pc, #468]	; (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d910      	bls.n	8005580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555e:	4b72      	ldr	r3, [pc, #456]	; (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 0207 	bic.w	r2, r3, #7
 8005566:	4970      	ldr	r1, [pc, #448]	; (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	4313      	orrs	r3, r2
 800556c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800556e:	4b6e      	ldr	r3, [pc, #440]	; (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0cf      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d010      	beq.n	80055ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	4b66      	ldr	r3, [pc, #408]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005598:	429a      	cmp	r2, r3
 800559a:	d908      	bls.n	80055ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800559c:	4b63      	ldr	r3, [pc, #396]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	4960      	ldr	r1, [pc, #384]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d04c      	beq.n	8005654 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d107      	bne.n	80055d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055c2:	4b5a      	ldr	r3, [pc, #360]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d121      	bne.n	8005612 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0a6      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d107      	bne.n	80055ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055da:	4b54      	ldr	r3, [pc, #336]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d115      	bne.n	8005612 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e09a      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055f2:	4b4e      	ldr	r3, [pc, #312]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e08e      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005602:	4b4a      	ldr	r3, [pc, #296]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e086      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005612:	4b46      	ldr	r3, [pc, #280]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 0203 	bic.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4943      	ldr	r1, [pc, #268]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005620:	4313      	orrs	r3, r2
 8005622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005624:	f7fe f8c8 	bl	80037b8 <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	e00a      	b.n	8005642 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562c:	f7fe f8c4 	bl	80037b8 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	; 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e06e      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	4b3a      	ldr	r3, [pc, #232]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 020c 	and.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d1eb      	bne.n	800562c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d010      	beq.n	8005682 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	4b31      	ldr	r3, [pc, #196]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800566c:	429a      	cmp	r2, r3
 800566e:	d208      	bcs.n	8005682 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005670:	4b2e      	ldr	r3, [pc, #184]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	492b      	ldr	r1, [pc, #172]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 800567e:	4313      	orrs	r3, r2
 8005680:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005682:	4b29      	ldr	r3, [pc, #164]	; (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d210      	bcs.n	80056b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005690:	4b25      	ldr	r3, [pc, #148]	; (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 0207 	bic.w	r2, r3, #7
 8005698:	4923      	ldr	r1, [pc, #140]	; (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	4313      	orrs	r3, r2
 800569e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a0:	4b21      	ldr	r3, [pc, #132]	; (8005728 <HAL_RCC_ClockConfig+0x1ec>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d001      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e036      	b.n	8005720 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056be:	4b1b      	ldr	r3, [pc, #108]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	4918      	ldr	r1, [pc, #96]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d009      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056dc:	4b13      	ldr	r3, [pc, #76]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4910      	ldr	r1, [pc, #64]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056f0:	f000 f824 	bl	800573c <HAL_RCC_GetSysClockFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <HAL_RCC_ClockConfig+0x1f0>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	490b      	ldr	r1, [pc, #44]	; (8005730 <HAL_RCC_ClockConfig+0x1f4>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
 800570c:	4a09      	ldr	r2, [pc, #36]	; (8005734 <HAL_RCC_ClockConfig+0x1f8>)
 800570e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005710:	4b09      	ldr	r3, [pc, #36]	; (8005738 <HAL_RCC_ClockConfig+0x1fc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7fd ffff 	bl	8003718 <HAL_InitTick>
 800571a:	4603      	mov	r3, r0
 800571c:	72fb      	strb	r3, [r7, #11]

  return status;
 800571e:	7afb      	ldrb	r3, [r7, #11]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40022000 	.word	0x40022000
 800572c:	40021000 	.word	0x40021000
 8005730:	080088c4 	.word	0x080088c4
 8005734:	20000004 	.word	0x20000004
 8005738:	2000002c 	.word	0x2000002c

0800573c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800573c:	b480      	push	{r7}
 800573e:	b089      	sub	sp, #36	; 0x24
 8005740:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	2300      	movs	r3, #0
 8005748:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800574a:	4b3e      	ldr	r3, [pc, #248]	; (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005754:	4b3b      	ldr	r3, [pc, #236]	; (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0x34>
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b0c      	cmp	r3, #12
 8005768:	d121      	bne.n	80057ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d11e      	bne.n	80057ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005770:	4b34      	ldr	r3, [pc, #208]	; (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800577c:	4b31      	ldr	r3, [pc, #196]	; (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 800577e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	e005      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800578c:	4b2d      	ldr	r3, [pc, #180]	; (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005798:	4a2b      	ldr	r2, [pc, #172]	; (8005848 <HAL_RCC_GetSysClockFreq+0x10c>)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10d      	bne.n	80057c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057ac:	e00a      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d102      	bne.n	80057ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057b4:	4b25      	ldr	r3, [pc, #148]	; (800584c <HAL_RCC_GetSysClockFreq+0x110>)
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	e004      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d101      	bne.n	80057c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057c0:	4b23      	ldr	r3, [pc, #140]	; (8005850 <HAL_RCC_GetSysClockFreq+0x114>)
 80057c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b0c      	cmp	r3, #12
 80057c8:	d134      	bne.n	8005834 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057ca:	4b1e      	ldr	r3, [pc, #120]	; (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d003      	beq.n	80057e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d003      	beq.n	80057e8 <HAL_RCC_GetSysClockFreq+0xac>
 80057e0:	e005      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057e2:	4b1a      	ldr	r3, [pc, #104]	; (800584c <HAL_RCC_GetSysClockFreq+0x110>)
 80057e4:	617b      	str	r3, [r7, #20]
      break;
 80057e6:	e005      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057e8:	4b19      	ldr	r3, [pc, #100]	; (8005850 <HAL_RCC_GetSysClockFreq+0x114>)
 80057ea:	617b      	str	r3, [r7, #20]
      break;
 80057ec:	e002      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	617b      	str	r3, [r7, #20]
      break;
 80057f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057f4:	4b13      	ldr	r3, [pc, #76]	; (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	091b      	lsrs	r3, r3, #4
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	3301      	adds	r3, #1
 8005800:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	0a1b      	lsrs	r3, r3, #8
 8005808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	fb02 f203 	mul.w	r2, r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	fbb2 f3f3 	udiv	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800581a:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <HAL_RCC_GetSysClockFreq+0x108>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	0e5b      	lsrs	r3, r3, #25
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	3301      	adds	r3, #1
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005834:	69bb      	ldr	r3, [r7, #24]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3724      	adds	r7, #36	; 0x24
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40021000 	.word	0x40021000
 8005848:	080088d4 	.word	0x080088d4
 800584c:	00f42400 	.word	0x00f42400
 8005850:	007a1200 	.word	0x007a1200

08005854 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005860:	4b2a      	ldr	r3, [pc, #168]	; (800590c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800586c:	f7ff fa28 	bl	8004cc0 <HAL_PWREx_GetVoltageRange>
 8005870:	6178      	str	r0, [r7, #20]
 8005872:	e014      	b.n	800589e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005874:	4b25      	ldr	r3, [pc, #148]	; (800590c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005878:	4a24      	ldr	r2, [pc, #144]	; (800590c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800587a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587e:	6593      	str	r3, [r2, #88]	; 0x58
 8005880:	4b22      	ldr	r3, [pc, #136]	; (800590c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800588c:	f7ff fa18 	bl	8004cc0 <HAL_PWREx_GetVoltageRange>
 8005890:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005892:	4b1e      	ldr	r3, [pc, #120]	; (800590c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005896:	4a1d      	ldr	r2, [pc, #116]	; (800590c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800589c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a4:	d10b      	bne.n	80058be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b80      	cmp	r3, #128	; 0x80
 80058aa:	d919      	bls.n	80058e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2ba0      	cmp	r3, #160	; 0xa0
 80058b0:	d902      	bls.n	80058b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058b2:	2302      	movs	r3, #2
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	e013      	b.n	80058e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058b8:	2301      	movs	r3, #1
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	e010      	b.n	80058e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b80      	cmp	r3, #128	; 0x80
 80058c2:	d902      	bls.n	80058ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80058c4:	2303      	movs	r3, #3
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	e00a      	b.n	80058e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b80      	cmp	r3, #128	; 0x80
 80058ce:	d102      	bne.n	80058d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058d0:	2302      	movs	r3, #2
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	e004      	b.n	80058e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b70      	cmp	r3, #112	; 0x70
 80058da:	d101      	bne.n	80058e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058dc:	2301      	movs	r3, #1
 80058de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f023 0207 	bic.w	r2, r3, #7
 80058e8:	4909      	ldr	r1, [pc, #36]	; (8005910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80058f0:	4b07      	ldr	r3, [pc, #28]	; (8005910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d001      	beq.n	8005902 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40021000 	.word	0x40021000
 8005910:	40022000 	.word	0x40022000

08005914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e095      	b.n	8005a52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005936:	d009      	beq.n	800594c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	61da      	str	r2, [r3, #28]
 800593e:	e005      	b.n	800594c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f877 	bl	8005a5a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005982:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800598c:	d902      	bls.n	8005994 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	e002      	b.n	800599a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005998:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059a2:	d007      	beq.n	80059b4 <HAL_SPI_Init+0xa0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059ac:	d002      	beq.n	80059b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	ea42 0103 	orr.w	r1, r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	0c1b      	lsrs	r3, r3, #16
 8005a10:	f003 0204 	and.w	r2, r3, #4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a30:	ea42 0103 	orr.w	r1, r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b08a      	sub	sp, #40	; 0x28
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x26>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e1fb      	b.n	8005e8c <HAL_SPI_TransmitReceive+0x41e>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a9c:	f7fd fe8c 	bl	80037b8 <HAL_GetTick>
 8005aa0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005aa8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005ab0:	887b      	ldrh	r3, [r7, #2]
 8005ab2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005ab4:	887b      	ldrh	r3, [r7, #2]
 8005ab6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ab8:	7efb      	ldrb	r3, [r7, #27]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d00e      	beq.n	8005adc <HAL_SPI_TransmitReceive+0x6e>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac4:	d106      	bne.n	8005ad4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d102      	bne.n	8005ad4 <HAL_SPI_TransmitReceive+0x66>
 8005ace:	7efb      	ldrb	r3, [r7, #27]
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d003      	beq.n	8005adc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ada:	e1cd      	b.n	8005e78 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_SPI_TransmitReceive+0x80>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <HAL_SPI_TransmitReceive+0x80>
 8005ae8:	887b      	ldrh	r3, [r7, #2]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d103      	bne.n	8005af6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005af4:	e1c0      	b.n	8005e78 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d003      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2205      	movs	r2, #5
 8005b06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	887a      	ldrh	r2, [r7, #2]
 8005b1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	887a      	ldrh	r2, [r7, #2]
 8005b22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	887a      	ldrh	r2, [r7, #2]
 8005b30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	887a      	ldrh	r2, [r7, #2]
 8005b36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b4c:	d802      	bhi.n	8005b54 <HAL_SPI_TransmitReceive+0xe6>
 8005b4e:	8a3b      	ldrh	r3, [r7, #16]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d908      	bls.n	8005b66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b62:	605a      	str	r2, [r3, #4]
 8005b64:	e007      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	d007      	beq.n	8005b94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b9c:	d97c      	bls.n	8005c98 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_SPI_TransmitReceive+0x13e>
 8005ba6:	8a7b      	ldrh	r3, [r7, #18]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d169      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	881a      	ldrh	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	1c9a      	adds	r2, r3, #2
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd0:	e056      	b.n	8005c80 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d11b      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x1aa>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d016      	beq.n	8005c18 <HAL_SPI_TransmitReceive+0x1aa>
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d113      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	881a      	ldrh	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	1c9a      	adds	r2, r3, #2
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d11c      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x1f2>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d016      	beq.n	8005c60 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	b292      	uxth	r2, r2
 8005c3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	1c9a      	adds	r2, r3, #2
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c60:	f7fd fdaa 	bl	80037b8 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d807      	bhi.n	8005c80 <HAL_SPI_TransmitReceive+0x212>
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c76:	d003      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c7e:	e0fb      	b.n	8005e78 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1a3      	bne.n	8005bd2 <HAL_SPI_TransmitReceive+0x164>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d19d      	bne.n	8005bd2 <HAL_SPI_TransmitReceive+0x164>
 8005c96:	e0df      	b.n	8005e58 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x23a>
 8005ca0:	8a7b      	ldrh	r3, [r7, #18]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	f040 80cb 	bne.w	8005e3e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d912      	bls.n	8005cd8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	881a      	ldrh	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	1c9a      	adds	r2, r3, #2
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b02      	subs	r3, #2
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cd6:	e0b2      	b.n	8005e3e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	7812      	ldrb	r2, [r2, #0]
 8005ce4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cfe:	e09e      	b.n	8005e3e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d134      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x30a>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d02f      	beq.n	8005d78 <HAL_SPI_TransmitReceive+0x30a>
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d12c      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d912      	bls.n	8005d4e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	881a      	ldrh	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	1c9a      	adds	r2, r3, #2
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b02      	subs	r3, #2
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d4c:	e012      	b.n	8005d74 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	7812      	ldrb	r2, [r2, #0]
 8005d5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d148      	bne.n	8005e18 <HAL_SPI_TransmitReceive+0x3aa>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d042      	beq.n	8005e18 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d923      	bls.n	8005de6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	b292      	uxth	r2, r2
 8005daa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db0:	1c9a      	adds	r2, r3, #2
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3b02      	subs	r3, #2
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d81f      	bhi.n	8005e14 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005de2:	605a      	str	r2, [r3, #4]
 8005de4:	e016      	b.n	8005e14 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f103 020c 	add.w	r2, r3, #12
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	7812      	ldrb	r2, [r2, #0]
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e14:	2301      	movs	r3, #1
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e18:	f7fd fcce 	bl	80037b8 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d803      	bhi.n	8005e30 <HAL_SPI_TransmitReceive+0x3c2>
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2e:	d102      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x3c8>
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e3c:	e01c      	b.n	8005e78 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f47f af5b 	bne.w	8005d00 <HAL_SPI_TransmitReceive+0x292>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f47f af54 	bne.w	8005d00 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f945 	bl	80060ec <SPI_EndRxTxTransaction>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d006      	beq.n	8005e76 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	661a      	str	r2, [r3, #96]	; 0x60
 8005e74:	e000      	b.n	8005e78 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005e76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3728      	adds	r7, #40	; 0x28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ea2:	b2db      	uxtb	r3, r3
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ec0:	f7fd fc7a 	bl	80037b8 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	4413      	add	r3, r2
 8005ece:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ed0:	f7fd fc72 	bl	80037b8 <HAL_GetTick>
 8005ed4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ed6:	4b39      	ldr	r3, [pc, #228]	; (8005fbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	015b      	lsls	r3, r3, #5
 8005edc:	0d1b      	lsrs	r3, r3, #20
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	fb02 f303 	mul.w	r3, r2, r3
 8005ee4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ee6:	e054      	b.n	8005f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d050      	beq.n	8005f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ef0:	f7fd fc62 	bl	80037b8 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d902      	bls.n	8005f06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d13d      	bne.n	8005f82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f1e:	d111      	bne.n	8005f44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f28:	d004      	beq.n	8005f34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f32:	d107      	bne.n	8005f44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4c:	d10f      	bne.n	8005f6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e017      	b.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d19b      	bne.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3720      	adds	r7, #32
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000004 	.word	0x20000004

08005fc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005fd2:	f7fd fbf1 	bl	80037b8 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	1a9b      	subs	r3, r3, r2
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	4413      	add	r3, r2
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005fe2:	f7fd fbe9 	bl	80037b8 <HAL_GetTick>
 8005fe6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ff0:	4b3d      	ldr	r3, [pc, #244]	; (80060e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	00da      	lsls	r2, r3, #3
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	0d1b      	lsrs	r3, r3, #20
 8006000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006002:	fb02 f303 	mul.w	r3, r2, r3
 8006006:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006008:	e060      	b.n	80060cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006010:	d107      	bne.n	8006022 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006020:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d050      	beq.n	80060cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800602a:	f7fd fbc5 	bl	80037b8 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006036:	429a      	cmp	r2, r3
 8006038:	d902      	bls.n	8006040 <SPI_WaitFifoStateUntilTimeout+0x80>
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	2b00      	cmp	r3, #0
 800603e:	d13d      	bne.n	80060bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800604e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006058:	d111      	bne.n	800607e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006062:	d004      	beq.n	800606e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606c:	d107      	bne.n	800607e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006086:	d10f      	bne.n	80060a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e010      	b.n	80060de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	4013      	ands	r3, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d196      	bne.n	800600a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3728      	adds	r7, #40	; 0x28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000004 	.word	0x20000004

080060ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2200      	movs	r2, #0
 8006100:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff ff5b 	bl	8005fc0 <SPI_WaitFifoStateUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006114:	f043 0220 	orr.w	r2, r3, #32
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e027      	b.n	8006170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2200      	movs	r2, #0
 8006128:	2180      	movs	r1, #128	; 0x80
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff fec0 	bl	8005eb0 <SPI_WaitFlagStateUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613a:	f043 0220 	orr.w	r2, r3, #32
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e014      	b.n	8006170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2200      	movs	r2, #0
 800614e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff ff34 	bl	8005fc0 <SPI_WaitFifoStateUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006162:	f043 0220 	orr.w	r2, r3, #32
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e000      	b.n	8006170 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08a      	sub	sp, #40	; 0x28
 800617c:	af02      	add	r7, sp, #8
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800618c:	2b20      	cmp	r3, #32
 800618e:	f040 8082 	bne.w	8006296 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <HAL_UART_Transmit+0x26>
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e07a      	b.n	8006298 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_UART_Transmit+0x38>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e073      	b.n	8006298 <HAL_UART_Transmit+0x120>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2221      	movs	r2, #33	; 0x21
 80061c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061c6:	f7fd faf7 	bl	80037b8 <HAL_GetTick>
 80061ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	88fa      	ldrh	r2, [r7, #6]
 80061d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	88fa      	ldrh	r2, [r7, #6]
 80061d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e4:	d108      	bne.n	80061f8 <HAL_UART_Transmit+0x80>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d104      	bne.n	80061f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	e003      	b.n	8006200 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006208:	e02d      	b.n	8006266 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2200      	movs	r2, #0
 8006212:	2180      	movs	r1, #128	; 0x80
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f843 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e039      	b.n	8006298 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10b      	bne.n	8006242 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	881a      	ldrh	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006236:	b292      	uxth	r2, r2
 8006238:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	3302      	adds	r3, #2
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	e008      	b.n	8006254 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	b292      	uxth	r2, r2
 800624c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	3301      	adds	r3, #1
 8006252:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1cb      	bne.n	800620a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2200      	movs	r2, #0
 800627a:	2140      	movs	r1, #64	; 0x40
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f80f 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e005      	b.n	8006298 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2220      	movs	r2, #32
 8006290:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	e000      	b.n	8006298 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006296:	2302      	movs	r3, #2
  }
}
 8006298:	4618      	mov	r0, r3
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b09c      	sub	sp, #112	; 0x70
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	4613      	mov	r3, r2
 80062ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b0:	e0a5      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	f000 80a1 	beq.w	80063fe <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062bc:	f7fd fa7c 	bl	80037b8 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d302      	bcc.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x32>
 80062cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d13e      	bne.n	8006350 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062e6:	667b      	str	r3, [r7, #100]	; 0x64
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062f2:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e6      	bne.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3308      	adds	r3, #8
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	f023 0301 	bic.w	r3, r3, #1
 800631a:	663b      	str	r3, [r7, #96]	; 0x60
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3308      	adds	r3, #8
 8006322:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006324:	64ba      	str	r2, [r7, #72]	; 0x48
 8006326:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800632a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e5      	bne.n	8006304 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e067      	b.n	8006420 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d04f      	beq.n	80063fe <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636c:	d147      	bne.n	80063fe <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006376:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800638c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006396:	637b      	str	r3, [r7, #52]	; 0x34
 8006398:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800639c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e6      	bne.n	8006378 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3308      	adds	r3, #8
 80063b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	613b      	str	r3, [r7, #16]
   return(result);
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f023 0301 	bic.w	r3, r3, #1
 80063c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3308      	adds	r3, #8
 80063c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063ca:	623a      	str	r2, [r7, #32]
 80063cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ce:	69f9      	ldr	r1, [r7, #28]
 80063d0:	6a3a      	ldr	r2, [r7, #32]
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e5      	bne.n	80063aa <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2220      	movs	r2, #32
 80063e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e010      	b.n	8006420 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4013      	ands	r3, r2
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	429a      	cmp	r2, r3
 800640c:	bf0c      	ite	eq
 800640e:	2301      	moveq	r3, #1
 8006410:	2300      	movne	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	429a      	cmp	r2, r3
 800641a:	f43f af4a 	beq.w	80062b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3770      	adds	r7, #112	; 0x70
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08c      	sub	sp, #48	; 0x30
 800642c:	af00      	add	r7, sp, #0
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4603      	mov	r3, r0
 8006432:	71fb      	strb	r3, [r7, #7]
 8006434:	460b      	mov	r3, r1
 8006436:	71bb      	strb	r3, [r7, #6]
 8006438:	4613      	mov	r3, r2
 800643a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8006440:	79bb      	ldrb	r3, [r7, #6]
 8006442:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8006444:	797b      	ldrb	r3, [r7, #5]
 8006446:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006448:	f107 030c 	add.w	r3, r7, #12
 800644c:	2207      	movs	r2, #7
 800644e:	2100      	movs	r1, #0
 8006450:	4618      	mov	r0, r3
 8006452:	f001 f9b1 	bl	80077b8 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006456:	f107 0318 	add.w	r3, r7, #24
 800645a:	2218      	movs	r2, #24
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f001 f9aa 	bl	80077b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006464:	233f      	movs	r3, #63	; 0x3f
 8006466:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8006468:	238a      	movs	r3, #138	; 0x8a
 800646a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8006472:	2303      	movs	r3, #3
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8006476:	f107 030c 	add.w	r3, r7, #12
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800647c:	2307      	movs	r3, #7
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006480:	f107 0318 	add.w	r3, r7, #24
 8006484:	2100      	movs	r1, #0
 8006486:	4618      	mov	r0, r3
 8006488:	f000 feb4 	bl	80071f4 <hci_send_req>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	da01      	bge.n	8006496 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8006492:	23ff      	movs	r3, #255	; 0xff
 8006494:	e014      	b.n	80064c0 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8006496:	7b3b      	ldrb	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800649c:	7b3b      	ldrb	r3, [r7, #12]
 800649e:	e00f      	b.n	80064c0 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 80064a0:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80064aa:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80064b4:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064bc:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3730      	adds	r7, #48	; 0x30
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08e      	sub	sp, #56	; 0x38
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4603      	mov	r3, r0
 80064d6:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80064dc:	f107 0314 	add.w	r3, r7, #20
 80064e0:	2207      	movs	r2, #7
 80064e2:	2100      	movs	r1, #0
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 f967 	bl	80077b8 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80064ea:	f107 0320 	add.w	r3, r7, #32
 80064ee:	2218      	movs	r2, #24
 80064f0:	2100      	movs	r1, #0
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 f960 	bl	80077b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80064f8:	233f      	movs	r3, #63	; 0x3f
 80064fa:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80064fc:	238a      	movs	r3, #138	; 0x8a
 80064fe:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8006500:	f107 031c 	add.w	r3, r7, #28
 8006504:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8006506:	2301      	movs	r3, #1
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800650a:	f107 0314 	add.w	r3, r7, #20
 800650e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8006510:	2307      	movs	r3, #7
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006514:	f107 0320 	add.w	r3, r7, #32
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fe6a 	bl	80071f4 <hci_send_req>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	da01      	bge.n	800652a <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8006526:	23ff      	movs	r3, #255	; 0xff
 8006528:	e014      	b.n	8006554 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800652a:	7d3b      	ldrb	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8006530:	7d3b      	ldrb	r3, [r7, #20]
 8006532:	e00f      	b.n	8006554 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8006534:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8006538:	b29a      	uxth	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800653e:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8006542:	b29a      	uxth	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8006548:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800654c:	b29a      	uxth	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3738      	adds	r7, #56	; 0x38
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800655c:	b590      	push	{r4, r7, lr}
 800655e:	b095      	sub	sp, #84	; 0x54
 8006560:	af00      	add	r7, sp, #0
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	4611      	mov	r1, r2
 8006568:	461a      	mov	r2, r3
 800656a:	4623      	mov	r3, r4
 800656c:	71fb      	strb	r3, [r7, #7]
 800656e:	4603      	mov	r3, r0
 8006570:	80bb      	strh	r3, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	807b      	strh	r3, [r7, #2]
 8006576:	4613      	mov	r3, r2
 8006578:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8006580:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8006584:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006588:	4413      	add	r3, r2
 800658a:	330e      	adds	r3, #14
 800658c:	2b28      	cmp	r3, #40	; 0x28
 800658e:	d901      	bls.n	8006594 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8006590:	2342      	movs	r3, #66	; 0x42
 8006592:	e0ce      	b.n	8006732 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8006594:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006598:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800659c:	4413      	add	r3, r2
 800659e:	79fa      	ldrb	r2, [r7, #7]
 80065a0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80065a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065a8:	3301      	adds	r3, #1
 80065aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 80065ae:	88bb      	ldrh	r3, [r7, #4]
 80065b0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80065b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065b6:	f107 0208 	add.w	r2, r7, #8
 80065ba:	4413      	add	r3, r2
 80065bc:	88ba      	ldrh	r2, [r7, #4]
 80065be:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80065c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065c4:	3302      	adds	r3, #2
 80065c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80065ca:	887b      	ldrh	r3, [r7, #2]
 80065cc:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80065ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065d2:	f107 0208 	add.w	r2, r7, #8
 80065d6:	4413      	add	r3, r2
 80065d8:	887a      	ldrh	r2, [r7, #2]
 80065da:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80065dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065e0:	3302      	adds	r3, #2
 80065e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 80065e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80065ee:	4413      	add	r3, r2
 80065f0:	79ba      	ldrb	r2, [r7, #6]
 80065f2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80065f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065fa:	3301      	adds	r3, #1
 80065fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8006600:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006604:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006608:	4413      	add	r3, r2
 800660a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800660e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8006612:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006616:	3301      	adds	r3, #1
 8006618:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800661c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006620:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006624:	4413      	add	r3, r2
 8006626:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800662a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800662e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006632:	3301      	adds	r3, #1
 8006634:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8006638:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800663c:	f107 0208 	add.w	r2, r7, #8
 8006640:	4413      	add	r3, r2
 8006642:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8006646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006648:	4618      	mov	r0, r3
 800664a:	f001 f8a7 	bl	800779c <memcpy>
  indx +=  LocalNameLen;
 800664e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006652:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8006656:	4413      	add	r3, r2
 8006658:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800665c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006660:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006664:	4413      	add	r3, r2
 8006666:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800666a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800666e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006672:	3301      	adds	r3, #1
 8006674:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8006678:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800667c:	f107 0208 	add.w	r2, r7, #8
 8006680:	4413      	add	r3, r2
 8006682:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8006686:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006688:	4618      	mov	r0, r3
 800668a:	f001 f887 	bl	800779c <memcpy>
  indx +=  ServiceUUIDLen;  
 800668e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006692:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006696:	4413      	add	r3, r2
 8006698:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800669c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80066a0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80066a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066a8:	f107 0208 	add.w	r2, r7, #8
 80066ac:	4413      	add	r3, r2
 80066ae:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80066b2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80066b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066b8:	3302      	adds	r3, #2
 80066ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80066be:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80066c2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80066c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066ca:	f107 0208 	add.w	r2, r7, #8
 80066ce:	4413      	add	r3, r2
 80066d0:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80066d4:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80066d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066da:	3302      	adds	r3, #2
 80066dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80066e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066e4:	2218      	movs	r2, #24
 80066e6:	2100      	movs	r1, #0
 80066e8:	4618      	mov	r0, r3
 80066ea:	f001 f865 	bl	80077b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80066ee:	233f      	movs	r3, #63	; 0x3f
 80066f0:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80066f2:	2383      	movs	r3, #131	; 0x83
 80066f4:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 80066f6:	f107 0308 	add.w	r3, r7, #8
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 80066fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006700:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8006702:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8006706:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8006708:	2301      	movs	r3, #1
 800670a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800670c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006710:	2100      	movs	r1, #0
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fd6e 	bl	80071f4 <hci_send_req>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	da01      	bge.n	8006722 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800671e:	23ff      	movs	r3, #255	; 0xff
 8006720:	e007      	b.n	8006732 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8006722:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <aci_gap_set_discoverable+0x1d4>
    return status;
 800672a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800672e:	e000      	b.n	8006732 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3754      	adds	r7, #84	; 0x54
 8006736:	46bd      	mov	sp, r7
 8006738:	bd90      	pop	{r4, r7, pc}

0800673a <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800673a:	b590      	push	{r4, r7, lr}
 800673c:	b091      	sub	sp, #68	; 0x44
 800673e:	af00      	add	r7, sp, #0
 8006740:	603a      	str	r2, [r7, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	4603      	mov	r3, r0
 8006746:	71fb      	strb	r3, [r7, #7]
 8006748:	460b      	mov	r3, r1
 800674a:	71bb      	strb	r3, [r7, #6]
 800674c:	4613      	mov	r3, r2
 800674e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8006754:	79bb      	ldrb	r3, [r7, #6]
 8006756:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8006758:	79bb      	ldrb	r3, [r7, #6]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	f107 030e 	add.w	r3, r7, #14
 8006764:	6814      	ldr	r4, [r2, #0]
 8006766:	6850      	ldr	r0, [r2, #4]
 8006768:	6891      	ldr	r1, [r2, #8]
 800676a:	68d2      	ldr	r2, [r2, #12]
 800676c:	601c      	str	r4, [r3, #0]
 800676e:	6058      	str	r0, [r3, #4]
 8006770:	6099      	str	r1, [r3, #8]
 8006772:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8006774:	797b      	ldrb	r3, [r7, #5]
 8006776:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8006778:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800677c:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800677e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006782:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8006786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006788:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800678c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006790:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006798:	2218      	movs	r2, #24
 800679a:	2100      	movs	r1, #0
 800679c:	4618      	mov	r0, r3
 800679e:	f001 f80b 	bl	80077b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80067a2:	233f      	movs	r3, #63	; 0x3f
 80067a4:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80067a6:	2386      	movs	r3, #134	; 0x86
 80067a8:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 80067aa:	f107 030c 	add.w	r3, r7, #12
 80067ae:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 80067b0:	231a      	movs	r3, #26
 80067b2:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 80067b4:	f107 030b 	add.w	r3, r7, #11
 80067b8:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 80067ba:	2301      	movs	r3, #1
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 80067be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067c2:	2100      	movs	r1, #0
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fd15 	bl	80071f4 <hci_send_req>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	da01      	bge.n	80067d4 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80067d0:	23ff      	movs	r3, #255	; 0xff
 80067d2:	e005      	b.n	80067e0 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80067d4:	7afb      	ldrb	r3, [r7, #11]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <aci_gap_set_auth_requirement+0xa4>
    return status;
 80067da:	7afb      	ldrb	r3, [r7, #11]
 80067dc:	e000      	b.n	80067e0 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3744      	adds	r7, #68	; 0x44
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd90      	pop	{r4, r7, pc}

080067e8 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b092      	sub	sp, #72	; 0x48
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	6039      	str	r1, [r7, #0]
 80067f2:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	2b1f      	cmp	r3, #31
 80067fe:	d901      	bls.n	8006804 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8006800:	2342      	movs	r3, #66	; 0x42
 8006802:	e03f      	b.n	8006884 <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 8006804:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006808:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800680c:	4413      	add	r3, r2
 800680e:	79fa      	ldrb	r2, [r7, #7]
 8006810:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8006814:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006818:	3301      	adds	r3, #1
 800681a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800681e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006822:	f107 0208 	add.w	r2, r7, #8
 8006826:	4413      	add	r3, r2
 8006828:	79fa      	ldrb	r2, [r7, #7]
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	4618      	mov	r0, r3
 800682e:	f000 ffb5 	bl	800779c <memcpy>
  indx +=  AdvLen;
 8006832:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	4413      	add	r3, r2
 800683a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800683e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006842:	2218      	movs	r2, #24
 8006844:	2100      	movs	r1, #0
 8006846:	4618      	mov	r0, r3
 8006848:	f000 ffb6 	bl	80077b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800684c:	233f      	movs	r3, #63	; 0x3f
 800684e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8006850:	238e      	movs	r3, #142	; 0x8e
 8006852:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8006854:	f107 0308 	add.w	r3, r7, #8
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800685a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800685e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 8006860:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006864:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 8006866:	2301      	movs	r3, #1
 8006868:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800686a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800686e:	2100      	movs	r1, #0
 8006870:	4618      	mov	r0, r3
 8006872:	f000 fcbf 	bl	80071f4 <hci_send_req>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	da01      	bge.n	8006880 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 800687c:	23ff      	movs	r3, #255	; 0xff
 800687e:	e001      	b.n	8006884 <aci_gap_update_adv_data+0x9c>
    
  return status;
 8006880:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006884:	4618      	mov	r0, r3
 8006886:	3748      	adds	r7, #72	; 0x48
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006892:	f107 0308 	add.w	r3, r7, #8
 8006896:	2218      	movs	r2, #24
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f000 ff8c 	bl	80077b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80068a0:	233f      	movs	r3, #63	; 0x3f
 80068a2:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80068a4:	f240 1301 	movw	r3, #257	; 0x101
 80068a8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80068aa:	1dfb      	adds	r3, r7, #7
 80068ac:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80068ae:	2301      	movs	r3, #1
 80068b0:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80068b2:	f107 0308 	add.w	r3, r7, #8
 80068b6:	2100      	movs	r1, #0
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fc9b 	bl	80071f4 <hci_send_req>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	da01      	bge.n	80068c8 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80068c4:	23ff      	movs	r3, #255	; 0xff
 80068c6:	e000      	b.n	80068ca <aci_gatt_init+0x3e>

  return status;
 80068c8:	79fb      	ldrb	r3, [r7, #7]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3720      	adds	r7, #32
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b090      	sub	sp, #64	; 0x40
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6039      	str	r1, [r7, #0]
 80068da:	4611      	mov	r1, r2
 80068dc:	461a      	mov	r2, r3
 80068de:	4603      	mov	r3, r0
 80068e0:	71fb      	strb	r3, [r7, #7]
 80068e2:	460b      	mov	r3, r1
 80068e4:	71bb      	strb	r3, [r7, #6]
 80068e6:	4613      	mov	r3, r2
 80068e8:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 80068f0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80068f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80068f8:	4413      	add	r3, r2
 80068fa:	79fa      	ldrb	r2, [r7, #7]
 80068fc:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8006900:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006904:	3301      	adds	r3, #1
 8006906:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d103      	bne.n	8006918 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8006910:	2302      	movs	r3, #2
 8006912:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006916:	e002      	b.n	800691e <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 8006918:	2310      	movs	r3, #16
 800691a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800691e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006922:	f107 020c 	add.w	r2, r7, #12
 8006926:	4413      	add	r3, r2
 8006928:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 ff34 	bl	800779c <memcpy>
  indx +=  uuid_len;
 8006934:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8006938:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800693c:	4413      	add	r3, r2
 800693e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8006942:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006946:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800694a:	4413      	add	r3, r2
 800694c:	79ba      	ldrb	r2, [r7, #6]
 800694e:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8006952:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006956:	3301      	adds	r3, #1
 8006958:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800695c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006960:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006964:	4413      	add	r3, r2
 8006966:	797a      	ldrb	r2, [r7, #5]
 8006968:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800696c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006970:	3301      	adds	r3, #1
 8006972:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006976:	f107 0320 	add.w	r3, r7, #32
 800697a:	2203      	movs	r2, #3
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f000 ff1a 	bl	80077b8 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006988:	2218      	movs	r2, #24
 800698a:	2100      	movs	r1, #0
 800698c:	4618      	mov	r0, r3
 800698e:	f000 ff13 	bl	80077b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006992:	233f      	movs	r3, #63	; 0x3f
 8006994:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8006996:	f44f 7381 	mov.w	r3, #258	; 0x102
 800699a:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800699c:	f107 030c 	add.w	r3, r7, #12
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80069a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80069a6:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80069a8:	f107 0320 	add.w	r3, r7, #32
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80069ae:	2303      	movs	r3, #3
 80069b0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80069b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069b6:	2100      	movs	r1, #0
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fc1b 	bl	80071f4 <hci_send_req>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	da01      	bge.n	80069c8 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 80069c4:	23ff      	movs	r3, #255	; 0xff
 80069c6:	e00c      	b.n	80069e2 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 80069c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <aci_gatt_add_serv+0x104>
    return resp.status;
 80069d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069d4:	e005      	b.n	80069e2 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 80069d6:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80069da:	b29a      	uxth	r2, r3
 80069dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069de:	801a      	strh	r2, [r3, #0]

  return 0;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3740      	adds	r7, #64	; 0x40
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b092      	sub	sp, #72	; 0x48
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	603a      	str	r2, [r7, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	4603      	mov	r3, r0
 80069f6:	80fb      	strh	r3, [r7, #6]
 80069f8:	460b      	mov	r3, r1
 80069fa:	717b      	strb	r3, [r7, #5]
 80069fc:	4613      	mov	r3, r2
 80069fe:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8006a06:	88fb      	ldrh	r3, [r7, #6]
 8006a08:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8006a0a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a0e:	f107 020c 	add.w	r2, r7, #12
 8006a12:	4413      	add	r3, r2
 8006a14:	88fa      	ldrh	r2, [r7, #6]
 8006a16:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8006a18:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a1c:	3302      	adds	r3, #2
 8006a1e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8006a22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a2a:	4413      	add	r3, r2
 8006a2c:	797a      	ldrb	r2, [r7, #5]
 8006a2e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006a32:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a36:	3301      	adds	r3, #1
 8006a38:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8006a3c:	797b      	ldrb	r3, [r7, #5]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d103      	bne.n	8006a4a <aci_gatt_add_char+0x60>
    uuid_len = 2;
 8006a42:	2302      	movs	r3, #2
 8006a44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a48:	e002      	b.n	8006a50 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 8006a4a:	2310      	movs	r3, #16
 8006a4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8006a50:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a54:	f107 020c 	add.w	r2, r7, #12
 8006a58:	4413      	add	r3, r2
 8006a5a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fe9b 	bl	800779c <memcpy>
  indx +=  uuid_len;
 8006a66:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8006a6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a6e:	4413      	add	r3, r2
 8006a70:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8006a74:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a7c:	4413      	add	r3, r2
 8006a7e:	793a      	ldrb	r2, [r7, #4]
 8006a80:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006a84:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a88:	3301      	adds	r3, #1
 8006a8a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8006a8e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a96:	4413      	add	r3, r2
 8006a98:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8006a9c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006aa0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8006aaa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006aae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8006ab8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006abc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8006ac6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006aca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ace:	4413      	add	r3, r2
 8006ad0:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8006ad4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006ad8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006adc:	3301      	adds	r3, #1
 8006ade:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8006ae2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006ae6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006aea:	4413      	add	r3, r2
 8006aec:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8006af0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006af4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006af8:	3301      	adds	r3, #1
 8006afa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8006afe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b06:	4413      	add	r3, r2
 8006b08:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8006b0c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006b10:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b14:	3301      	adds	r3, #1
 8006b16:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b1e:	2203      	movs	r2, #3
 8006b20:	2100      	movs	r1, #0
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fe48 	bl	80077b8 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b2c:	2218      	movs	r2, #24
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fe41 	bl	80077b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006b36:	233f      	movs	r3, #63	; 0x3f
 8006b38:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8006b3a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006b3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8006b40:	f107 030c 	add.w	r3, r7, #12
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8006b46:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8006b4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8006b52:	2303      	movs	r3, #3
 8006b54:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8006b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fb49 	bl	80071f4 <hci_send_req>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	da01      	bge.n	8006b6c <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 8006b68:	23ff      	movs	r3, #255	; 0xff
 8006b6a:	e00c      	b.n	8006b86 <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8006b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <aci_gatt_add_char+0x190>
    return resp.status;
 8006b74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b78:	e005      	b.n	8006b86 <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 8006b7a:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b82:	801a      	strh	r2, [r3, #0]

  return 0;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3748      	adds	r7, #72	; 0x48
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8006b8e:	b590      	push	{r4, r7, lr}
 8006b90:	b0ab      	sub	sp, #172	; 0xac
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	4604      	mov	r4, r0
 8006b96:	4608      	mov	r0, r1
 8006b98:	4611      	mov	r1, r2
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	4623      	mov	r3, r4
 8006b9e:	80fb      	strh	r3, [r7, #6]
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	80bb      	strh	r3, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8006bb2:	78bb      	ldrb	r3, [r7, #2]
 8006bb4:	2b7a      	cmp	r3, #122	; 0x7a
 8006bb6:	d901      	bls.n	8006bbc <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8006bb8:	2342      	movs	r3, #66	; 0x42
 8006bba:	e076      	b.n	8006caa <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 8006bbc:	88fb      	ldrh	r3, [r7, #6]
 8006bbe:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8006bc0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006bc4:	f107 0208 	add.w	r2, r7, #8
 8006bc8:	4413      	add	r3, r2
 8006bca:	88fa      	ldrh	r2, [r7, #6]
 8006bcc:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8006bce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006bd2:	3302      	adds	r3, #2
 8006bd4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8006bd8:	88bb      	ldrh	r3, [r7, #4]
 8006bda:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8006bdc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006be0:	f107 0208 	add.w	r2, r7, #8
 8006be4:	4413      	add	r3, r2
 8006be6:	88ba      	ldrh	r2, [r7, #4]
 8006be8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8006bea:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006bee:	3302      	adds	r3, #2
 8006bf0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8006bf4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006bf8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006bfc:	4413      	add	r3, r2
 8006bfe:	78fa      	ldrb	r2, [r7, #3]
 8006c00:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8006c04:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8006c0e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006c12:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006c16:	4413      	add	r3, r2
 8006c18:	78ba      	ldrb	r2, [r7, #2]
 8006c1a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8006c1e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006c22:	3301      	adds	r3, #1
 8006c24:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8006c28:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006c2c:	f107 0208 	add.w	r2, r7, #8
 8006c30:	4413      	add	r3, r2
 8006c32:	78ba      	ldrb	r2, [r7, #2]
 8006c34:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fdaf 	bl	800779c <memcpy>
  indx +=  charValueLen;
 8006c3e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8006c42:	78bb      	ldrb	r3, [r7, #2]
 8006c44:	4413      	add	r3, r2
 8006c46:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006c4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006c4e:	2218      	movs	r2, #24
 8006c50:	2100      	movs	r1, #0
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fdb0 	bl	80077b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006c58:	233f      	movs	r3, #63	; 0x3f
 8006c5a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8006c5e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006c62:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8006c66:	f107 0308 	add.w	r3, r7, #8
 8006c6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8006c6e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006c72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8006c76:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8006c7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8006c84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fab2 	bl	80071f4 <hci_send_req>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	da01      	bge.n	8006c9a <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 8006c96:	23ff      	movs	r3, #255	; 0xff
 8006c98:	e007      	b.n	8006caa <aci_gatt_update_char_value+0x11c>

  if (status) {
 8006c9a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <aci_gatt_update_char_value+0x11a>
    return status;
 8006ca2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8006ca6:	e000      	b.n	8006caa <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	37ac      	adds	r7, #172	; 0xac
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd90      	pop	{r4, r7, pc}

08006cb2 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b08a      	sub	sp, #40	; 0x28
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	4603      	mov	r3, r0
 8006cba:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8006cc0:	f107 0310 	add.w	r3, r7, #16
 8006cc4:	2218      	movs	r2, #24
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fd75 	bl	80077b8 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8006cce:	233f      	movs	r3, #63	; 0x3f
 8006cd0:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8006cd2:	f240 1327 	movw	r3, #295	; 0x127
 8006cd6:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8006cd8:	f107 030c 	add.w	r3, r7, #12
 8006cdc:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8006ce2:	f107 030b 	add.w	r3, r7, #11
 8006ce6:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8006cec:	f107 0310 	add.w	r3, r7, #16
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fa7e 	bl	80071f4 <hci_send_req>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da01      	bge.n	8006d02 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8006cfe:	23ff      	movs	r3, #255	; 0xff
 8006d00:	e000      	b.n	8006d04 <aci_gatt_allow_read+0x52>

    return status;
 8006d02:	7afb      	ldrb	r3, [r7, #11]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3728      	adds	r7, #40	; 0x28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b0ac      	sub	sp, #176	; 0xb0
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60ba      	str	r2, [r7, #8]
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	4603      	mov	r3, r0
 8006d18:	73fb      	strb	r3, [r7, #15]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006d24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d28:	2218      	movs	r2, #24
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fd43 	bl	80077b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006d32:	233f      	movs	r3, #63	; 0x3f
 8006d34:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8006d38:	230d      	movs	r3, #13
 8006d3a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 8006d3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 8006d46:	2301      	movs	r3, #1
 8006d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 8006d4c:	f107 0314 	add.w	r3, r7, #20
 8006d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 8006d54:	2380      	movs	r3, #128	; 0x80
 8006d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006d5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fa47 	bl	80071f4 <hci_send_req>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	da01      	bge.n	8006d70 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8006d6c:	23ff      	movs	r3, #255	; 0xff
 8006d6e:	e01e      	b.n	8006dae <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8006d70:	7d3b      	ldrb	r3, [r7, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <aci_hal_read_config_data+0x6e>
    return rp.status;
 8006d76:	7d3b      	ldrb	r3, [r7, #20]
 8006d78:	e019      	b.n	8006dae <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8006d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	89ba      	ldrh	r2, [r7, #12]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d201      	bcs.n	8006d98 <aci_hal_read_config_data+0x8c>
 8006d94:	89ba      	ldrh	r2, [r7, #12]
 8006d96:	e002      	b.n	8006d9e <aci_hal_read_config_data+0x92>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f107 0314 	add.w	r3, r7, #20
 8006da2:	3301      	adds	r3, #1
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fcf8 	bl	800779c <memcpy>
  
  return 0;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	37b0      	adds	r7, #176	; 0xb0
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b08a      	sub	sp, #40	; 0x28
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	460a      	mov	r2, r1
 8006dc0:	71fb      	strb	r3, [r7, #7]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8006dc6:	79fb      	ldrb	r3, [r7, #7]
 8006dc8:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8006dca:	79bb      	ldrb	r3, [r7, #6]
 8006dcc:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006dce:	f107 0310 	add.w	r3, r7, #16
 8006dd2:	2218      	movs	r2, #24
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fcee 	bl	80077b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006ddc:	233f      	movs	r3, #63	; 0x3f
 8006dde:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8006de0:	230f      	movs	r3, #15
 8006de2:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8006de4:	f107 030c 	add.w	r3, r7, #12
 8006de8:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8006dea:	2302      	movs	r3, #2
 8006dec:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8006dee:	f107 030b 	add.w	r3, r7, #11
 8006df2:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8006df4:	2301      	movs	r3, #1
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8006df8:	f107 0310 	add.w	r3, r7, #16
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 f9f8 	bl	80071f4 <hci_send_req>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	da01      	bge.n	8006e0e <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8006e0a:	23ff      	movs	r3, #255	; 0xff
 8006e0c:	e000      	b.n	8006e10 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3728      	adds	r7, #40	; 0x28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8006e18:	b590      	push	{r4, r7, lr}
 8006e1a:	b089      	sub	sp, #36	; 0x24
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8006e22:	f107 0410 	add.w	r4, r7, #16
 8006e26:	f107 0215 	add.w	r2, r7, #21
 8006e2a:	f107 0112 	add.w	r1, r7, #18
 8006e2e:	f107 0016 	add.w	r0, r7, #22
 8006e32:	f107 030e 	add.w	r3, r7, #14
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	4623      	mov	r3, r4
 8006e3a:	f000 f853 	bl	8006ee4 <hci_le_read_local_version>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d126      	bne.n	8006e96 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8006e48:	8a7b      	ldrh	r3, [r7, #18]
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8006e54:	8a7b      	ldrh	r3, [r7, #18]
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b21a      	sxth	r2, r3
 8006e64:	89fb      	ldrh	r3, [r7, #14]
 8006e66:	091b      	lsrs	r3, r3, #4
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	b21b      	sxth	r3, r3
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	b21b      	sxth	r3, r3
 8006e72:	4313      	orrs	r3, r2
 8006e74:	b21b      	sxth	r3, r3
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b21a      	sxth	r2, r3
 8006e82:	89fb      	ldrh	r3, [r7, #14]
 8006e84:	b21b      	sxth	r3, r3
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	b21b      	sxth	r3, r3
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b21b      	sxth	r3, r3
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd90      	pop	{r4, r7, pc}

08006ea0 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006ea6:	f107 0308 	add.w	r3, r7, #8
 8006eaa:	2218      	movs	r2, #24
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fc82 	bl	80077b8 <memset>
  rq.ogf = OGF_HOST_CTL;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006ebc:	1dfb      	adds	r3, r7, #7
 8006ebe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006ec4:	f107 0308 	add.w	r3, r7, #8
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f992 	bl	80071f4 <hci_send_req>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	da01      	bge.n	8006eda <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8006ed6:	23ff      	movs	r3, #255	; 0xff
 8006ed8:	e000      	b.n	8006edc <hci_reset+0x3c>
  
  return status;  
 8006eda:	79fb      	ldrb	r3, [r7, #7]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3720      	adds	r7, #32
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08e      	sub	sp, #56	; 0x38
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006ef2:	f107 0314 	add.w	r3, r7, #20
 8006ef6:	2209      	movs	r2, #9
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fc5c 	bl	80077b8 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006f00:	f107 0320 	add.w	r3, r7, #32
 8006f04:	2218      	movs	r2, #24
 8006f06:	2100      	movs	r1, #0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fc55 	bl	80077b8 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8006f0e:	2304      	movs	r3, #4
 8006f10:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8006f12:	2301      	movs	r3, #1
 8006f14:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8006f1e:	f107 0314 	add.w	r3, r7, #20
 8006f22:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8006f24:	2309      	movs	r3, #9
 8006f26:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006f28:	f107 0320 	add.w	r3, r7, #32
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 f960 	bl	80071f4 <hci_send_req>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da01      	bge.n	8006f3e <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8006f3a:	23ff      	movs	r3, #255	; 0xff
 8006f3c:	e018      	b.n	8006f70 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8006f3e:	7d3b      	ldrb	r3, [r7, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <hci_le_read_local_version+0x64>
    return resp.status;
 8006f44:	7d3b      	ldrb	r3, [r7, #20]
 8006f46:	e013      	b.n	8006f70 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8006f48:	7d7a      	ldrb	r2, [r7, #21]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8006f4e:	8afa      	ldrh	r2, [r7, #22]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8006f54:	7e3a      	ldrb	r2, [r7, #24]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8006f5a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8006f64:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f6c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3738      	adds	r7, #56	; 0x38
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b092      	sub	sp, #72	; 0x48
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	6039      	str	r1, [r7, #0]
 8006f82:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8006f84:	f107 0310 	add.w	r3, r7, #16
 8006f88:	2220      	movs	r2, #32
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fc13 	bl	80077b8 <memset>
  scan_resp_cp.length = length;
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	2b1f      	cmp	r3, #31
 8006f9a:	bf28      	it	cs
 8006f9c:	231f      	movcs	r3, #31
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f107 0310 	add.w	r3, r7, #16
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fbf6 	bl	800779c <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fb4:	2218      	movs	r2, #24
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fbfd 	bl	80077b8 <memset>
  rq.ogf = OGF_LE_CTL;
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8006fc2:	2309      	movs	r3, #9
 8006fc4:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8006fc6:	f107 0310 	add.w	r3, r7, #16
 8006fca:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8006fcc:	2320      	movs	r3, #32
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8006fd0:	f107 030f 	add.w	r3, r7, #15
 8006fd4:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006fda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 f907 	bl	80071f4 <hci_send_req>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	da01      	bge.n	8006ff0 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8006fec:	23ff      	movs	r3, #255	; 0xff
 8006fee:	e000      	b.n	8006ff2 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3748      	adds	r7, #72	; 0x48
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3308      	adds	r3, #8
 8007006:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b04      	cmp	r3, #4
 800700e:	d001      	beq.n	8007014 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8007010:	2301      	movs	r3, #1
 8007012:	e00c      	b.n	800702e <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3302      	adds	r3, #2
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007022:	3b03      	subs	r3, #3
 8007024:	429a      	cmp	r2, r3
 8007026:	d001      	beq.n	800702c <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8007028:	2302      	movs	r3, #2
 800702a:	e000      	b.n	800702e <verify_packet+0x34>
  
  return 0;      
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
	...

0800703c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b0a6      	sub	sp, #152	; 0x98
 8007040:	af00      	add	r7, sp, #0
 8007042:	607b      	str	r3, [r7, #4]
 8007044:	4603      	mov	r3, r0
 8007046:	81fb      	strh	r3, [r7, #14]
 8007048:	460b      	mov	r3, r1
 800704a:	81bb      	strh	r3, [r7, #12]
 800704c:	4613      	mov	r3, r2
 800704e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8007050:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007058:	b21a      	sxth	r2, r3
 800705a:	89fb      	ldrh	r3, [r7, #14]
 800705c:	029b      	lsls	r3, r3, #10
 800705e:	b21b      	sxth	r3, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	b21b      	sxth	r3, r3
 8007064:	b29b      	uxth	r3, r3
 8007066:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8007068:	7afb      	ldrb	r3, [r7, #11]
 800706a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800706c:	2301      	movs	r3, #1
 800706e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8007070:	f107 0318 	add.w	r3, r7, #24
 8007074:	3301      	adds	r3, #1
 8007076:	461a      	mov	r2, r3
 8007078:	f107 0314 	add.w	r3, r7, #20
 800707c:	8819      	ldrh	r1, [r3, #0]
 800707e:	789b      	ldrb	r3, [r3, #2]
 8007080:	8011      	strh	r1, [r2, #0]
 8007082:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8007084:	f107 0318 	add.w	r3, r7, #24
 8007088:	3304      	adds	r3, #4
 800708a:	7afa      	ldrb	r2, [r7, #11]
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fb84 	bl	800779c <memcpy>
  
  if (hciContext.io.Send)
 8007094:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <send_cmd+0x7c>)
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d009      	beq.n	80070b0 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800709c:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <send_cmd+0x7c>)
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	7afa      	ldrb	r2, [r7, #11]
 80070a2:	b292      	uxth	r2, r2
 80070a4:	3204      	adds	r2, #4
 80070a6:	b291      	uxth	r1, r2
 80070a8:	f107 0218 	add.w	r2, r7, #24
 80070ac:	4610      	mov	r0, r2
 80070ae:	4798      	blx	r3
  }
}
 80070b0:	bf00      	nop
 80070b2:	3798      	adds	r7, #152	; 0x98
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	200004cc 	.word	0x200004cc

080070bc <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80070c6:	e00a      	b.n	80070de <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80070c8:	f107 030c 	add.w	r3, r7, #12
 80070cc:	4619      	mov	r1, r3
 80070ce:	6838      	ldr	r0, [r7, #0]
 80070d0:	f000 faea 	bl	80076a8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fa51 	bl	8007580 <list_insert_head>
  while (!list_is_empty(src_list))
 80070de:	6838      	ldr	r0, [r7, #0]
 80070e0:	f000 fa2c 	bl	800753c <list_is_empty>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0ee      	beq.n	80070c8 <move_list+0xc>
  }
}
 80070ea:	bf00      	nop
 80070ec:	bf00      	nop
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80070fa:	e009      	b.n	8007110 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80070fc:	1d3b      	adds	r3, r7, #4
 80070fe:	4619      	mov	r1, r3
 8007100:	4809      	ldr	r0, [pc, #36]	; (8007128 <free_event_list+0x34>)
 8007102:	f000 faaa 	bl	800765a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4619      	mov	r1, r3
 800710a:	4808      	ldr	r0, [pc, #32]	; (800712c <free_event_list+0x38>)
 800710c:	f000 fa5e 	bl	80075cc <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007110:	4806      	ldr	r0, [pc, #24]	; (800712c <free_event_list+0x38>)
 8007112:	f000 faf0 	bl	80076f6 <list_get_size>
 8007116:	4603      	mov	r3, r0
 8007118:	2b01      	cmp	r3, #1
 800711a:	ddef      	ble.n	80070fc <free_event_list+0x8>
  }
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	200006fc 	.word	0x200006fc
 800712c:	200006f4 	.word	0x200006f4

08007130 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8007140:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <hci_init+0x74>)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8007146:	4818      	ldr	r0, [pc, #96]	; (80071a8 <hci_init+0x78>)
 8007148:	f000 f9e8 	bl	800751c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800714c:	4817      	ldr	r0, [pc, #92]	; (80071ac <hci_init+0x7c>)
 800714e:	f000 f9e5 	bl	800751c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8007152:	f7fb fa63 	bl	800261c <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]
 800715a:	e00c      	b.n	8007176 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	228c      	movs	r2, #140	; 0x8c
 8007160:	fb02 f303 	mul.w	r3, r2, r3
 8007164:	4a12      	ldr	r2, [pc, #72]	; (80071b0 <hci_init+0x80>)
 8007166:	4413      	add	r3, r2
 8007168:	4619      	mov	r1, r3
 800716a:	480f      	ldr	r0, [pc, #60]	; (80071a8 <hci_init+0x78>)
 800716c:	f000 fa2e 	bl	80075cc <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	3301      	adds	r3, #1
 8007174:	73fb      	strb	r3, [r7, #15]
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b04      	cmp	r3, #4
 800717a:	d9ef      	bls.n	800715c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <hci_init+0x74>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <hci_init+0x5c>
 8007184:	4b07      	ldr	r3, [pc, #28]	; (80071a4 <hci_init+0x74>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2000      	movs	r0, #0
 800718a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <hci_init+0x74>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <hci_init+0x6a>
 8007194:	4b03      	ldr	r3, [pc, #12]	; (80071a4 <hci_init+0x74>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	4798      	blx	r3
}
 800719a:	bf00      	nop
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	200004cc 	.word	0x200004cc
 80071a8:	200006f4 	.word	0x200006f4
 80071ac:	200006fc 	.word	0x200006fc
 80071b0:	20000210 	.word	0x20000210

080071b4 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a0b      	ldr	r2, [pc, #44]	; (80071f0 <hci_register_io_bus+0x3c>)
 80071c2:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	4a09      	ldr	r2, [pc, #36]	; (80071f0 <hci_register_io_bus+0x3c>)
 80071ca:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	4a07      	ldr	r2, [pc, #28]	; (80071f0 <hci_register_io_bus+0x3c>)
 80071d2:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	4a05      	ldr	r2, [pc, #20]	; (80071f0 <hci_register_io_bus+0x3c>)
 80071da:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	4a03      	ldr	r2, [pc, #12]	; (80071f0 <hci_register_io_bus+0x3c>)
 80071e2:	6093      	str	r3, [r2, #8]
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	200004cc 	.word	0x200004cc

080071f4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08e      	sub	sp, #56	; 0x38
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	885b      	ldrh	r3, [r3, #2]
 8007204:	b21b      	sxth	r3, r3
 8007206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800720a:	b21a      	sxth	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	029b      	lsls	r3, r3, #10
 8007212:	b21b      	sxth	r3, r3
 8007214:	4313      	orrs	r3, r2
 8007216:	b21b      	sxth	r3, r3
 8007218:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800721e:	f107 0308 	add.w	r3, r7, #8
 8007222:	4618      	mov	r0, r3
 8007224:	f000 f97a 	bl	800751c <list_init_head>

  free_event_list();
 8007228:	f7ff ff64 	bl	80070f4 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	8818      	ldrh	r0, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8859      	ldrh	r1, [r3, #2]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	b2da      	uxtb	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f7ff fefd 	bl	800703c <send_cmd>
  
  if (async)
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <hci_send_req+0x58>
  {
    return 0;
 8007248:	2300      	movs	r3, #0
 800724a:	e0e5      	b.n	8007418 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800724c:	f7fc fab4 	bl	80037b8 <HAL_GetTick>
 8007250:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8007252:	f7fc fab1 	bl	80037b8 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007260:	f200 80b6 	bhi.w	80073d0 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8007264:	486e      	ldr	r0, [pc, #440]	; (8007420 <hci_send_req+0x22c>)
 8007266:	f000 f969 	bl	800753c <list_is_empty>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d000      	beq.n	8007272 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8007270:	e7ef      	b.n	8007252 <hci_send_req+0x5e>
      {
        break;
 8007272:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8007274:	f107 0310 	add.w	r3, r7, #16
 8007278:	4619      	mov	r1, r3
 800727a:	4869      	ldr	r0, [pc, #420]	; (8007420 <hci_send_req+0x22c>)
 800727c:	f000 f9ed 	bl	800765a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	3308      	adds	r3, #8
 8007284:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b04      	cmp	r3, #4
 800728c:	d17b      	bne.n	8007386 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007290:	3301      	adds	r3, #1
 8007292:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	3308      	adds	r3, #8
 8007298:	3303      	adds	r3, #3
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80072a2:	3b03      	subs	r3, #3
 80072a4:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b3e      	cmp	r3, #62	; 0x3e
 80072ac:	d04d      	beq.n	800734a <hci_send_req+0x156>
 80072ae:	2b3e      	cmp	r3, #62	; 0x3e
 80072b0:	dc6b      	bgt.n	800738a <hci_send_req+0x196>
 80072b2:	2b10      	cmp	r3, #16
 80072b4:	f000 808e 	beq.w	80073d4 <hci_send_req+0x1e0>
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	dc66      	bgt.n	800738a <hci_send_req+0x196>
 80072bc:	2b0e      	cmp	r3, #14
 80072be:	d024      	beq.n	800730a <hci_send_req+0x116>
 80072c0:	2b0f      	cmp	r3, #15
 80072c2:	d162      	bne.n	800738a <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	885b      	ldrh	r3, [r3, #2]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80072d0:	429a      	cmp	r2, r3
 80072d2:	f040 8081 	bne.w	80073d8 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b0f      	cmp	r3, #15
 80072dc:	d004      	beq.n	80072e8 <hci_send_req+0xf4>
          if (cs->status) {
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d053      	beq.n	800738e <hci_send_req+0x19a>
            goto failed;
 80072e6:	e07a      	b.n	80073de <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	695a      	ldr	r2, [r3, #20]
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	bf28      	it	cs
 80072f2:	461a      	movcs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6918      	ldr	r0, [r3, #16]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	461a      	mov	r2, r3
 8007302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007304:	f000 fa4a 	bl	800779c <memcpy>
        goto done;
 8007308:	e07a      	b.n	8007400 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007314:	b29b      	uxth	r3, r3
 8007316:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007318:	429a      	cmp	r2, r3
 800731a:	d15f      	bne.n	80073dc <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	3303      	adds	r3, #3
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	3b03      	subs	r3, #3
 8007326:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	695a      	ldr	r2, [r3, #20]
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	429a      	cmp	r2, r3
 8007330:	bf28      	it	cs
 8007332:	461a      	movcs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6918      	ldr	r0, [r3, #16]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	461a      	mov	r2, r3
 8007342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007344:	f000 fa2a 	bl	800779c <memcpy>
        goto done;
 8007348:	e05a      	b.n	8007400 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	429a      	cmp	r2, r3
 800735a:	d11a      	bne.n	8007392 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	3b01      	subs	r3, #1
 8007360:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	695a      	ldr	r2, [r3, #20]
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	429a      	cmp	r2, r3
 800736a:	bf28      	it	cs
 800736c:	461a      	movcs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6918      	ldr	r0, [r3, #16]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	1c59      	adds	r1, r3, #1
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	461a      	mov	r2, r3
 8007380:	f000 fa0c 	bl	800779c <memcpy>
        goto done;
 8007384:	e03c      	b.n	8007400 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8007386:	bf00      	nop
 8007388:	e004      	b.n	8007394 <hci_send_req+0x1a0>
        break;
 800738a:	bf00      	nop
 800738c:	e002      	b.n	8007394 <hci_send_req+0x1a0>
          break;
 800738e:	bf00      	nop
 8007390:	e000      	b.n	8007394 <hci_send_req+0x1a0>
          break;
 8007392:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8007394:	4823      	ldr	r0, [pc, #140]	; (8007424 <hci_send_req+0x230>)
 8007396:	f000 f8d1 	bl	800753c <list_is_empty>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00d      	beq.n	80073bc <hci_send_req+0x1c8>
 80073a0:	481f      	ldr	r0, [pc, #124]	; (8007420 <hci_send_req+0x22c>)
 80073a2:	f000 f8cb 	bl	800753c <list_is_empty>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d007      	beq.n	80073bc <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	4619      	mov	r1, r3
 80073b0:	481c      	ldr	r0, [pc, #112]	; (8007424 <hci_send_req+0x230>)
 80073b2:	f000 f90b 	bl	80075cc <list_insert_tail>
      hciReadPacket=NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	e008      	b.n	80073ce <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	f107 0308 	add.w	r3, r7, #8
 80073c2:	4611      	mov	r1, r2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f901 	bl	80075cc <list_insert_tail>
      hciReadPacket=NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	613b      	str	r3, [r7, #16]
  {
 80073ce:	e73d      	b.n	800724c <hci_send_req+0x58>
        goto failed;
 80073d0:	bf00      	nop
 80073d2:	e004      	b.n	80073de <hci_send_req+0x1ea>
        goto failed;
 80073d4:	bf00      	nop
 80073d6:	e002      	b.n	80073de <hci_send_req+0x1ea>
          goto failed;
 80073d8:	bf00      	nop
 80073da:	e000      	b.n	80073de <hci_send_req+0x1ea>
          goto failed;
 80073dc:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	4619      	mov	r1, r3
 80073e8:	480e      	ldr	r0, [pc, #56]	; (8007424 <hci_send_req+0x230>)
 80073ea:	f000 f8c9 	bl	8007580 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80073ee:	f107 0308 	add.w	r3, r7, #8
 80073f2:	4619      	mov	r1, r3
 80073f4:	480a      	ldr	r0, [pc, #40]	; (8007420 <hci_send_req+0x22c>)
 80073f6:	f7ff fe61 	bl	80070bc <move_list>

  return -1;
 80073fa:	f04f 33ff 	mov.w	r3, #4294967295
 80073fe:	e00b      	b.n	8007418 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	4619      	mov	r1, r3
 8007404:	4807      	ldr	r0, [pc, #28]	; (8007424 <hci_send_req+0x230>)
 8007406:	f000 f8bb 	bl	8007580 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800740a:	f107 0308 	add.w	r3, r7, #8
 800740e:	4619      	mov	r1, r3
 8007410:	4803      	ldr	r0, [pc, #12]	; (8007420 <hci_send_req+0x22c>)
 8007412:	f7ff fe53 	bl	80070bc <move_list>

  return 0;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3738      	adds	r7, #56	; 0x38
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	200006fc 	.word	0x200006fc
 8007424:	200006f4 	.word	0x200006f4

08007428 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800742e:	2300      	movs	r3, #0
 8007430:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8007432:	e013      	b.n	800745c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8007434:	1d3b      	adds	r3, r7, #4
 8007436:	4619      	mov	r1, r3
 8007438:	480e      	ldr	r0, [pc, #56]	; (8007474 <hci_user_evt_proc+0x4c>)
 800743a:	f000 f90e 	bl	800765a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800743e:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <hci_user_evt_proc+0x50>)
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d005      	beq.n	8007452 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <hci_user_evt_proc+0x50>)
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	3208      	adds	r2, #8
 800744e:	4610      	mov	r0, r2
 8007450:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4619      	mov	r1, r3
 8007456:	4809      	ldr	r0, [pc, #36]	; (800747c <hci_user_evt_proc+0x54>)
 8007458:	f000 f8b8 	bl	80075cc <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800745c:	4805      	ldr	r0, [pc, #20]	; (8007474 <hci_user_evt_proc+0x4c>)
 800745e:	f000 f86d 	bl	800753c <list_is_empty>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0e5      	beq.n	8007434 <hci_user_evt_proc+0xc>
  }
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	200006fc 	.word	0x200006fc
 8007478:	200004cc 	.word	0x200004cc
 800747c:	200006f4 	.word	0x200006f4

08007480 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8007490:	481f      	ldr	r0, [pc, #124]	; (8007510 <hci_notify_asynch_evt+0x90>)
 8007492:	f000 f853 	bl	800753c <list_is_empty>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d132      	bne.n	8007502 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800749c:	f107 030c 	add.w	r3, r7, #12
 80074a0:	4619      	mov	r1, r3
 80074a2:	481b      	ldr	r0, [pc, #108]	; (8007510 <hci_notify_asynch_evt+0x90>)
 80074a4:	f000 f8d9 	bl	800765a <list_remove_head>
    
    if (hciContext.io.Receive)
 80074a8:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <hci_notify_asynch_evt+0x94>)
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d02a      	beq.n	8007506 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80074b0:	4b18      	ldr	r3, [pc, #96]	; (8007514 <hci_notify_asynch_evt+0x94>)
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	3208      	adds	r2, #8
 80074b8:	2180      	movs	r1, #128	; 0x80
 80074ba:	4610      	mov	r0, r2
 80074bc:	4798      	blx	r3
 80074be:	4603      	mov	r3, r0
 80074c0:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80074c2:	7cfb      	ldrb	r3, [r7, #19]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d016      	beq.n	80074f6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	7cfa      	ldrb	r2, [r7, #19]
 80074cc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff fd91 	bl	8006ffa <verify_packet>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d105      	bne.n	80074ea <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4619      	mov	r1, r3
 80074e2:	480d      	ldr	r0, [pc, #52]	; (8007518 <hci_notify_asynch_evt+0x98>)
 80074e4:	f000 f872 	bl	80075cc <list_insert_tail>
 80074e8:	e00d      	b.n	8007506 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4619      	mov	r1, r3
 80074ee:	4808      	ldr	r0, [pc, #32]	; (8007510 <hci_notify_asynch_evt+0x90>)
 80074f0:	f000 f846 	bl	8007580 <list_insert_head>
 80074f4:	e007      	b.n	8007506 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4619      	mov	r1, r3
 80074fa:	4805      	ldr	r0, [pc, #20]	; (8007510 <hci_notify_asynch_evt+0x90>)
 80074fc:	f000 f840 	bl	8007580 <list_insert_head>
 8007500:	e001      	b.n	8007506 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8007502:	2301      	movs	r3, #1
 8007504:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8007506:	697b      	ldr	r3, [r7, #20]

}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	200006f4 	.word	0x200006f4
 8007514:	200004cc 	.word	0x200004cc
 8007518:	200006fc 	.word	0x200006fc

0800751c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	605a      	str	r2, [r3, #4]
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007544:	f3ef 8310 	mrs	r3, PRIMASK
 8007548:	60fb      	str	r3, [r7, #12]
  return(result);
 800754a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800754c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800754e:	b672      	cpsid	i
}
 8007550:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	429a      	cmp	r2, r3
 800755a:	d102      	bne.n	8007562 <list_is_empty+0x26>
  {
    return_value = 1;
 800755c:	2301      	movs	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
 8007560:	e001      	b.n	8007566 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	75fb      	strb	r3, [r7, #23]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f383 8810 	msr	PRIMASK, r3
}
 8007570:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8007572:	7dfb      	ldrb	r3, [r7, #23]
}
 8007574:	4618      	mov	r0, r3
 8007576:	371c      	adds	r7, #28
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800758a:	f3ef 8310 	mrs	r3, PRIMASK
 800758e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007590:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007592:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007594:	b672      	cpsid	i
}
 8007596:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	605a      	str	r2, [r3, #4]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f383 8810 	msr	PRIMASK, r3
}
 80075be:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80075c0:	bf00      	nop
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d6:	f3ef 8310 	mrs	r3, PRIMASK
 80075da:	60fb      	str	r3, [r7, #12]
  return(result);
 80075dc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80075de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80075e0:	b672      	cpsid	i
}
 80075e2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f383 8810 	msr	PRIMASK, r3
}
 800760a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800760c:	bf00      	nop
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007620:	f3ef 8310 	mrs	r3, PRIMASK
 8007624:	60fb      	str	r3, [r7, #12]
  return(result);
 8007626:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007628:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800762a:	b672      	cpsid	i
}
 800762c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6812      	ldr	r2, [r2, #0]
 8007636:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	6852      	ldr	r2, [r2, #4]
 8007640:	605a      	str	r2, [r3, #4]
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f383 8810 	msr	PRIMASK, r3
}
 800764c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800764e:	bf00      	nop
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b086      	sub	sp, #24
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007664:	f3ef 8310 	mrs	r3, PRIMASK
 8007668:	60fb      	str	r3, [r7, #12]
  return(result);
 800766a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800766c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800766e:	b672      	cpsid	i
}
 8007670:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff ffca 	bl	8007618 <list_remove_node>
  (*node)->next = NULL;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2200      	movs	r2, #0
 8007692:	605a      	str	r2, [r3, #4]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f383 8810 	msr	PRIMASK, r3
}
 800769e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80076a0:	bf00      	nop
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076b2:	f3ef 8310 	mrs	r3, PRIMASK
 80076b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80076b8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80076ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80076bc:	b672      	cpsid	i
}
 80076be:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff ffa3 	bl	8007618 <list_remove_node>
  (*node)->next = NULL;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	605a      	str	r2, [r3, #4]
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f383 8810 	msr	PRIMASK, r3
}
 80076ec:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80076ee:	bf00      	nop
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b089      	sub	sp, #36	; 0x24
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  int size = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007702:	f3ef 8310 	mrs	r3, PRIMASK
 8007706:	613b      	str	r3, [r7, #16]
  return(result);
 8007708:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800770a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800770c:	b672      	cpsid	i
}
 800770e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8007716:	e005      	b.n	8007724 <list_get_size+0x2e>
  {
    size++;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	429a      	cmp	r2, r3
 800772a:	d1f5      	bne.n	8007718 <list_get_size+0x22>
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f383 8810 	msr	PRIMASK, r3
}
 8007736:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8007738:	69fb      	ldr	r3, [r7, #28]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3724      	adds	r7, #36	; 0x24
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <__errno>:
 8007748:	4b01      	ldr	r3, [pc, #4]	; (8007750 <__errno+0x8>)
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	20000034 	.word	0x20000034

08007754 <__libc_init_array>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	4d0d      	ldr	r5, [pc, #52]	; (800778c <__libc_init_array+0x38>)
 8007758:	4c0d      	ldr	r4, [pc, #52]	; (8007790 <__libc_init_array+0x3c>)
 800775a:	1b64      	subs	r4, r4, r5
 800775c:	10a4      	asrs	r4, r4, #2
 800775e:	2600      	movs	r6, #0
 8007760:	42a6      	cmp	r6, r4
 8007762:	d109      	bne.n	8007778 <__libc_init_array+0x24>
 8007764:	4d0b      	ldr	r5, [pc, #44]	; (8007794 <__libc_init_array+0x40>)
 8007766:	4c0c      	ldr	r4, [pc, #48]	; (8007798 <__libc_init_array+0x44>)
 8007768:	f001 f890 	bl	800888c <_init>
 800776c:	1b64      	subs	r4, r4, r5
 800776e:	10a4      	asrs	r4, r4, #2
 8007770:	2600      	movs	r6, #0
 8007772:	42a6      	cmp	r6, r4
 8007774:	d105      	bne.n	8007782 <__libc_init_array+0x2e>
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	f855 3b04 	ldr.w	r3, [r5], #4
 800777c:	4798      	blx	r3
 800777e:	3601      	adds	r6, #1
 8007780:	e7ee      	b.n	8007760 <__libc_init_array+0xc>
 8007782:	f855 3b04 	ldr.w	r3, [r5], #4
 8007786:	4798      	blx	r3
 8007788:	3601      	adds	r6, #1
 800778a:	e7f2      	b.n	8007772 <__libc_init_array+0x1e>
 800778c:	08008a58 	.word	0x08008a58
 8007790:	08008a58 	.word	0x08008a58
 8007794:	08008a58 	.word	0x08008a58
 8007798:	08008a5c 	.word	0x08008a5c

0800779c <memcpy>:
 800779c:	440a      	add	r2, r1
 800779e:	4291      	cmp	r1, r2
 80077a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80077a4:	d100      	bne.n	80077a8 <memcpy+0xc>
 80077a6:	4770      	bx	lr
 80077a8:	b510      	push	{r4, lr}
 80077aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077b2:	4291      	cmp	r1, r2
 80077b4:	d1f9      	bne.n	80077aa <memcpy+0xe>
 80077b6:	bd10      	pop	{r4, pc}

080077b8 <memset>:
 80077b8:	4402      	add	r2, r0
 80077ba:	4603      	mov	r3, r0
 80077bc:	4293      	cmp	r3, r2
 80077be:	d100      	bne.n	80077c2 <memset+0xa>
 80077c0:	4770      	bx	lr
 80077c2:	f803 1b01 	strb.w	r1, [r3], #1
 80077c6:	e7f9      	b.n	80077bc <memset+0x4>

080077c8 <srand>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4b10      	ldr	r3, [pc, #64]	; (800780c <srand+0x44>)
 80077cc:	681d      	ldr	r5, [r3, #0]
 80077ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80077d0:	4604      	mov	r4, r0
 80077d2:	b9b3      	cbnz	r3, 8007802 <srand+0x3a>
 80077d4:	2018      	movs	r0, #24
 80077d6:	f000 f895 	bl	8007904 <malloc>
 80077da:	4602      	mov	r2, r0
 80077dc:	63a8      	str	r0, [r5, #56]	; 0x38
 80077de:	b920      	cbnz	r0, 80077ea <srand+0x22>
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <srand+0x48>)
 80077e2:	480c      	ldr	r0, [pc, #48]	; (8007814 <srand+0x4c>)
 80077e4:	2142      	movs	r1, #66	; 0x42
 80077e6:	f000 f85d 	bl	80078a4 <__assert_func>
 80077ea:	490b      	ldr	r1, [pc, #44]	; (8007818 <srand+0x50>)
 80077ec:	4b0b      	ldr	r3, [pc, #44]	; (800781c <srand+0x54>)
 80077ee:	e9c0 1300 	strd	r1, r3, [r0]
 80077f2:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <srand+0x58>)
 80077f4:	6083      	str	r3, [r0, #8]
 80077f6:	230b      	movs	r3, #11
 80077f8:	8183      	strh	r3, [r0, #12]
 80077fa:	2100      	movs	r1, #0
 80077fc:	2001      	movs	r0, #1
 80077fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007802:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007804:	2200      	movs	r2, #0
 8007806:	611c      	str	r4, [r3, #16]
 8007808:	615a      	str	r2, [r3, #20]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	20000034 	.word	0x20000034
 8007810:	08008908 	.word	0x08008908
 8007814:	0800891f 	.word	0x0800891f
 8007818:	abcd330e 	.word	0xabcd330e
 800781c:	e66d1234 	.word	0xe66d1234
 8007820:	0005deec 	.word	0x0005deec

08007824 <rand>:
 8007824:	4b17      	ldr	r3, [pc, #92]	; (8007884 <rand+0x60>)
 8007826:	b510      	push	{r4, lr}
 8007828:	681c      	ldr	r4, [r3, #0]
 800782a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800782c:	b9b3      	cbnz	r3, 800785c <rand+0x38>
 800782e:	2018      	movs	r0, #24
 8007830:	f000 f868 	bl	8007904 <malloc>
 8007834:	63a0      	str	r0, [r4, #56]	; 0x38
 8007836:	b928      	cbnz	r0, 8007844 <rand+0x20>
 8007838:	4602      	mov	r2, r0
 800783a:	4b13      	ldr	r3, [pc, #76]	; (8007888 <rand+0x64>)
 800783c:	4813      	ldr	r0, [pc, #76]	; (800788c <rand+0x68>)
 800783e:	214e      	movs	r1, #78	; 0x4e
 8007840:	f000 f830 	bl	80078a4 <__assert_func>
 8007844:	4a12      	ldr	r2, [pc, #72]	; (8007890 <rand+0x6c>)
 8007846:	4b13      	ldr	r3, [pc, #76]	; (8007894 <rand+0x70>)
 8007848:	e9c0 2300 	strd	r2, r3, [r0]
 800784c:	4b12      	ldr	r3, [pc, #72]	; (8007898 <rand+0x74>)
 800784e:	6083      	str	r3, [r0, #8]
 8007850:	230b      	movs	r3, #11
 8007852:	8183      	strh	r3, [r0, #12]
 8007854:	2201      	movs	r2, #1
 8007856:	2300      	movs	r3, #0
 8007858:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800785c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800785e:	480f      	ldr	r0, [pc, #60]	; (800789c <rand+0x78>)
 8007860:	690a      	ldr	r2, [r1, #16]
 8007862:	694b      	ldr	r3, [r1, #20]
 8007864:	4c0e      	ldr	r4, [pc, #56]	; (80078a0 <rand+0x7c>)
 8007866:	4350      	muls	r0, r2
 8007868:	fb04 0003 	mla	r0, r4, r3, r0
 800786c:	fba2 3404 	umull	r3, r4, r2, r4
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	4404      	add	r4, r0
 8007874:	f144 0000 	adc.w	r0, r4, #0
 8007878:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800787c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007880:	bd10      	pop	{r4, pc}
 8007882:	bf00      	nop
 8007884:	20000034 	.word	0x20000034
 8007888:	08008908 	.word	0x08008908
 800788c:	0800891f 	.word	0x0800891f
 8007890:	abcd330e 	.word	0xabcd330e
 8007894:	e66d1234 	.word	0xe66d1234
 8007898:	0005deec 	.word	0x0005deec
 800789c:	5851f42d 	.word	0x5851f42d
 80078a0:	4c957f2d 	.word	0x4c957f2d

080078a4 <__assert_func>:
 80078a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078a6:	4614      	mov	r4, r2
 80078a8:	461a      	mov	r2, r3
 80078aa:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <__assert_func+0x2c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4605      	mov	r5, r0
 80078b0:	68d8      	ldr	r0, [r3, #12]
 80078b2:	b14c      	cbz	r4, 80078c8 <__assert_func+0x24>
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <__assert_func+0x30>)
 80078b6:	9100      	str	r1, [sp, #0]
 80078b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078bc:	4906      	ldr	r1, [pc, #24]	; (80078d8 <__assert_func+0x34>)
 80078be:	462b      	mov	r3, r5
 80078c0:	f000 f80e 	bl	80078e0 <fiprintf>
 80078c4:	f000 fc8e 	bl	80081e4 <abort>
 80078c8:	4b04      	ldr	r3, [pc, #16]	; (80078dc <__assert_func+0x38>)
 80078ca:	461c      	mov	r4, r3
 80078cc:	e7f3      	b.n	80078b6 <__assert_func+0x12>
 80078ce:	bf00      	nop
 80078d0:	20000034 	.word	0x20000034
 80078d4:	0800897e 	.word	0x0800897e
 80078d8:	0800898b 	.word	0x0800898b
 80078dc:	080089b9 	.word	0x080089b9

080078e0 <fiprintf>:
 80078e0:	b40e      	push	{r1, r2, r3}
 80078e2:	b503      	push	{r0, r1, lr}
 80078e4:	4601      	mov	r1, r0
 80078e6:	ab03      	add	r3, sp, #12
 80078e8:	4805      	ldr	r0, [pc, #20]	; (8007900 <fiprintf+0x20>)
 80078ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ee:	6800      	ldr	r0, [r0, #0]
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	f000 f8e3 	bl	8007abc <_vfiprintf_r>
 80078f6:	b002      	add	sp, #8
 80078f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078fc:	b003      	add	sp, #12
 80078fe:	4770      	bx	lr
 8007900:	20000034 	.word	0x20000034

08007904 <malloc>:
 8007904:	4b02      	ldr	r3, [pc, #8]	; (8007910 <malloc+0xc>)
 8007906:	4601      	mov	r1, r0
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	f000 b853 	b.w	80079b4 <_malloc_r>
 800790e:	bf00      	nop
 8007910:	20000034 	.word	0x20000034

08007914 <_free_r>:
 8007914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007916:	2900      	cmp	r1, #0
 8007918:	d048      	beq.n	80079ac <_free_r+0x98>
 800791a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791e:	9001      	str	r0, [sp, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f1a1 0404 	sub.w	r4, r1, #4
 8007926:	bfb8      	it	lt
 8007928:	18e4      	addlt	r4, r4, r3
 800792a:	f000 fe81 	bl	8008630 <__malloc_lock>
 800792e:	4a20      	ldr	r2, [pc, #128]	; (80079b0 <_free_r+0x9c>)
 8007930:	9801      	ldr	r0, [sp, #4]
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	4615      	mov	r5, r2
 8007936:	b933      	cbnz	r3, 8007946 <_free_r+0x32>
 8007938:	6063      	str	r3, [r4, #4]
 800793a:	6014      	str	r4, [r2, #0]
 800793c:	b003      	add	sp, #12
 800793e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007942:	f000 be7b 	b.w	800863c <__malloc_unlock>
 8007946:	42a3      	cmp	r3, r4
 8007948:	d90b      	bls.n	8007962 <_free_r+0x4e>
 800794a:	6821      	ldr	r1, [r4, #0]
 800794c:	1862      	adds	r2, r4, r1
 800794e:	4293      	cmp	r3, r2
 8007950:	bf04      	itt	eq
 8007952:	681a      	ldreq	r2, [r3, #0]
 8007954:	685b      	ldreq	r3, [r3, #4]
 8007956:	6063      	str	r3, [r4, #4]
 8007958:	bf04      	itt	eq
 800795a:	1852      	addeq	r2, r2, r1
 800795c:	6022      	streq	r2, [r4, #0]
 800795e:	602c      	str	r4, [r5, #0]
 8007960:	e7ec      	b.n	800793c <_free_r+0x28>
 8007962:	461a      	mov	r2, r3
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b10b      	cbz	r3, 800796c <_free_r+0x58>
 8007968:	42a3      	cmp	r3, r4
 800796a:	d9fa      	bls.n	8007962 <_free_r+0x4e>
 800796c:	6811      	ldr	r1, [r2, #0]
 800796e:	1855      	adds	r5, r2, r1
 8007970:	42a5      	cmp	r5, r4
 8007972:	d10b      	bne.n	800798c <_free_r+0x78>
 8007974:	6824      	ldr	r4, [r4, #0]
 8007976:	4421      	add	r1, r4
 8007978:	1854      	adds	r4, r2, r1
 800797a:	42a3      	cmp	r3, r4
 800797c:	6011      	str	r1, [r2, #0]
 800797e:	d1dd      	bne.n	800793c <_free_r+0x28>
 8007980:	681c      	ldr	r4, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	6053      	str	r3, [r2, #4]
 8007986:	4421      	add	r1, r4
 8007988:	6011      	str	r1, [r2, #0]
 800798a:	e7d7      	b.n	800793c <_free_r+0x28>
 800798c:	d902      	bls.n	8007994 <_free_r+0x80>
 800798e:	230c      	movs	r3, #12
 8007990:	6003      	str	r3, [r0, #0]
 8007992:	e7d3      	b.n	800793c <_free_r+0x28>
 8007994:	6825      	ldr	r5, [r4, #0]
 8007996:	1961      	adds	r1, r4, r5
 8007998:	428b      	cmp	r3, r1
 800799a:	bf04      	itt	eq
 800799c:	6819      	ldreq	r1, [r3, #0]
 800799e:	685b      	ldreq	r3, [r3, #4]
 80079a0:	6063      	str	r3, [r4, #4]
 80079a2:	bf04      	itt	eq
 80079a4:	1949      	addeq	r1, r1, r5
 80079a6:	6021      	streq	r1, [r4, #0]
 80079a8:	6054      	str	r4, [r2, #4]
 80079aa:	e7c7      	b.n	800793c <_free_r+0x28>
 80079ac:	b003      	add	sp, #12
 80079ae:	bd30      	pop	{r4, r5, pc}
 80079b0:	200004ec 	.word	0x200004ec

080079b4 <_malloc_r>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	1ccd      	adds	r5, r1, #3
 80079b8:	f025 0503 	bic.w	r5, r5, #3
 80079bc:	3508      	adds	r5, #8
 80079be:	2d0c      	cmp	r5, #12
 80079c0:	bf38      	it	cc
 80079c2:	250c      	movcc	r5, #12
 80079c4:	2d00      	cmp	r5, #0
 80079c6:	4606      	mov	r6, r0
 80079c8:	db01      	blt.n	80079ce <_malloc_r+0x1a>
 80079ca:	42a9      	cmp	r1, r5
 80079cc:	d903      	bls.n	80079d6 <_malloc_r+0x22>
 80079ce:	230c      	movs	r3, #12
 80079d0:	6033      	str	r3, [r6, #0]
 80079d2:	2000      	movs	r0, #0
 80079d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d6:	f000 fe2b 	bl	8008630 <__malloc_lock>
 80079da:	4921      	ldr	r1, [pc, #132]	; (8007a60 <_malloc_r+0xac>)
 80079dc:	680a      	ldr	r2, [r1, #0]
 80079de:	4614      	mov	r4, r2
 80079e0:	b99c      	cbnz	r4, 8007a0a <_malloc_r+0x56>
 80079e2:	4f20      	ldr	r7, [pc, #128]	; (8007a64 <_malloc_r+0xb0>)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	b923      	cbnz	r3, 80079f2 <_malloc_r+0x3e>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4630      	mov	r0, r6
 80079ec:	f000 fb2a 	bl	8008044 <_sbrk_r>
 80079f0:	6038      	str	r0, [r7, #0]
 80079f2:	4629      	mov	r1, r5
 80079f4:	4630      	mov	r0, r6
 80079f6:	f000 fb25 	bl	8008044 <_sbrk_r>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	d123      	bne.n	8007a46 <_malloc_r+0x92>
 80079fe:	230c      	movs	r3, #12
 8007a00:	6033      	str	r3, [r6, #0]
 8007a02:	4630      	mov	r0, r6
 8007a04:	f000 fe1a 	bl	800863c <__malloc_unlock>
 8007a08:	e7e3      	b.n	80079d2 <_malloc_r+0x1e>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	1b5b      	subs	r3, r3, r5
 8007a0e:	d417      	bmi.n	8007a40 <_malloc_r+0x8c>
 8007a10:	2b0b      	cmp	r3, #11
 8007a12:	d903      	bls.n	8007a1c <_malloc_r+0x68>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	441c      	add	r4, r3
 8007a18:	6025      	str	r5, [r4, #0]
 8007a1a:	e004      	b.n	8007a26 <_malloc_r+0x72>
 8007a1c:	6863      	ldr	r3, [r4, #4]
 8007a1e:	42a2      	cmp	r2, r4
 8007a20:	bf0c      	ite	eq
 8007a22:	600b      	streq	r3, [r1, #0]
 8007a24:	6053      	strne	r3, [r2, #4]
 8007a26:	4630      	mov	r0, r6
 8007a28:	f000 fe08 	bl	800863c <__malloc_unlock>
 8007a2c:	f104 000b 	add.w	r0, r4, #11
 8007a30:	1d23      	adds	r3, r4, #4
 8007a32:	f020 0007 	bic.w	r0, r0, #7
 8007a36:	1ac2      	subs	r2, r0, r3
 8007a38:	d0cc      	beq.n	80079d4 <_malloc_r+0x20>
 8007a3a:	1a1b      	subs	r3, r3, r0
 8007a3c:	50a3      	str	r3, [r4, r2]
 8007a3e:	e7c9      	b.n	80079d4 <_malloc_r+0x20>
 8007a40:	4622      	mov	r2, r4
 8007a42:	6864      	ldr	r4, [r4, #4]
 8007a44:	e7cc      	b.n	80079e0 <_malloc_r+0x2c>
 8007a46:	1cc4      	adds	r4, r0, #3
 8007a48:	f024 0403 	bic.w	r4, r4, #3
 8007a4c:	42a0      	cmp	r0, r4
 8007a4e:	d0e3      	beq.n	8007a18 <_malloc_r+0x64>
 8007a50:	1a21      	subs	r1, r4, r0
 8007a52:	4630      	mov	r0, r6
 8007a54:	f000 faf6 	bl	8008044 <_sbrk_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d1dd      	bne.n	8007a18 <_malloc_r+0x64>
 8007a5c:	e7cf      	b.n	80079fe <_malloc_r+0x4a>
 8007a5e:	bf00      	nop
 8007a60:	200004ec 	.word	0x200004ec
 8007a64:	200004f0 	.word	0x200004f0

08007a68 <__sfputc_r>:
 8007a68:	6893      	ldr	r3, [r2, #8]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	b410      	push	{r4}
 8007a70:	6093      	str	r3, [r2, #8]
 8007a72:	da08      	bge.n	8007a86 <__sfputc_r+0x1e>
 8007a74:	6994      	ldr	r4, [r2, #24]
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	db01      	blt.n	8007a7e <__sfputc_r+0x16>
 8007a7a:	290a      	cmp	r1, #10
 8007a7c:	d103      	bne.n	8007a86 <__sfputc_r+0x1e>
 8007a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a82:	f000 baef 	b.w	8008064 <__swbuf_r>
 8007a86:	6813      	ldr	r3, [r2, #0]
 8007a88:	1c58      	adds	r0, r3, #1
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	7019      	strb	r1, [r3, #0]
 8007a8e:	4608      	mov	r0, r1
 8007a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <__sfputs_r>:
 8007a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a98:	4606      	mov	r6, r0
 8007a9a:	460f      	mov	r7, r1
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	18d5      	adds	r5, r2, r3
 8007aa0:	42ac      	cmp	r4, r5
 8007aa2:	d101      	bne.n	8007aa8 <__sfputs_r+0x12>
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e007      	b.n	8007ab8 <__sfputs_r+0x22>
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	463a      	mov	r2, r7
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff ffda 	bl	8007a68 <__sfputc_r>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d1f3      	bne.n	8007aa0 <__sfputs_r+0xa>
 8007ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007abc <_vfiprintf_r>:
 8007abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	460d      	mov	r5, r1
 8007ac2:	b09d      	sub	sp, #116	; 0x74
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	4698      	mov	r8, r3
 8007ac8:	4606      	mov	r6, r0
 8007aca:	b118      	cbz	r0, 8007ad4 <_vfiprintf_r+0x18>
 8007acc:	6983      	ldr	r3, [r0, #24]
 8007ace:	b90b      	cbnz	r3, 8007ad4 <_vfiprintf_r+0x18>
 8007ad0:	f000 fcaa 	bl	8008428 <__sinit>
 8007ad4:	4b89      	ldr	r3, [pc, #548]	; (8007cfc <_vfiprintf_r+0x240>)
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	d11b      	bne.n	8007b12 <_vfiprintf_r+0x56>
 8007ada:	6875      	ldr	r5, [r6, #4]
 8007adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ade:	07d9      	lsls	r1, r3, #31
 8007ae0:	d405      	bmi.n	8007aee <_vfiprintf_r+0x32>
 8007ae2:	89ab      	ldrh	r3, [r5, #12]
 8007ae4:	059a      	lsls	r2, r3, #22
 8007ae6:	d402      	bmi.n	8007aee <_vfiprintf_r+0x32>
 8007ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aea:	f000 fd3b 	bl	8008564 <__retarget_lock_acquire_recursive>
 8007aee:	89ab      	ldrh	r3, [r5, #12]
 8007af0:	071b      	lsls	r3, r3, #28
 8007af2:	d501      	bpl.n	8007af8 <_vfiprintf_r+0x3c>
 8007af4:	692b      	ldr	r3, [r5, #16]
 8007af6:	b9eb      	cbnz	r3, 8007b34 <_vfiprintf_r+0x78>
 8007af8:	4629      	mov	r1, r5
 8007afa:	4630      	mov	r0, r6
 8007afc:	f000 fb04 	bl	8008108 <__swsetup_r>
 8007b00:	b1c0      	cbz	r0, 8007b34 <_vfiprintf_r+0x78>
 8007b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b04:	07dc      	lsls	r4, r3, #31
 8007b06:	d50e      	bpl.n	8007b26 <_vfiprintf_r+0x6a>
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0c:	b01d      	add	sp, #116	; 0x74
 8007b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	4b7b      	ldr	r3, [pc, #492]	; (8007d00 <_vfiprintf_r+0x244>)
 8007b14:	429d      	cmp	r5, r3
 8007b16:	d101      	bne.n	8007b1c <_vfiprintf_r+0x60>
 8007b18:	68b5      	ldr	r5, [r6, #8]
 8007b1a:	e7df      	b.n	8007adc <_vfiprintf_r+0x20>
 8007b1c:	4b79      	ldr	r3, [pc, #484]	; (8007d04 <_vfiprintf_r+0x248>)
 8007b1e:	429d      	cmp	r5, r3
 8007b20:	bf08      	it	eq
 8007b22:	68f5      	ldreq	r5, [r6, #12]
 8007b24:	e7da      	b.n	8007adc <_vfiprintf_r+0x20>
 8007b26:	89ab      	ldrh	r3, [r5, #12]
 8007b28:	0598      	lsls	r0, r3, #22
 8007b2a:	d4ed      	bmi.n	8007b08 <_vfiprintf_r+0x4c>
 8007b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b2e:	f000 fd1a 	bl	8008566 <__retarget_lock_release_recursive>
 8007b32:	e7e9      	b.n	8007b08 <_vfiprintf_r+0x4c>
 8007b34:	2300      	movs	r3, #0
 8007b36:	9309      	str	r3, [sp, #36]	; 0x24
 8007b38:	2320      	movs	r3, #32
 8007b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b42:	2330      	movs	r3, #48	; 0x30
 8007b44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d08 <_vfiprintf_r+0x24c>
 8007b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b4c:	f04f 0901 	mov.w	r9, #1
 8007b50:	4623      	mov	r3, r4
 8007b52:	469a      	mov	sl, r3
 8007b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b58:	b10a      	cbz	r2, 8007b5e <_vfiprintf_r+0xa2>
 8007b5a:	2a25      	cmp	r2, #37	; 0x25
 8007b5c:	d1f9      	bne.n	8007b52 <_vfiprintf_r+0x96>
 8007b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b62:	d00b      	beq.n	8007b7c <_vfiprintf_r+0xc0>
 8007b64:	465b      	mov	r3, fp
 8007b66:	4622      	mov	r2, r4
 8007b68:	4629      	mov	r1, r5
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f7ff ff93 	bl	8007a96 <__sfputs_r>
 8007b70:	3001      	adds	r0, #1
 8007b72:	f000 80aa 	beq.w	8007cca <_vfiprintf_r+0x20e>
 8007b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b78:	445a      	add	r2, fp
 8007b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 80a2 	beq.w	8007cca <_vfiprintf_r+0x20e>
 8007b86:	2300      	movs	r3, #0
 8007b88:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b90:	f10a 0a01 	add.w	sl, sl, #1
 8007b94:	9304      	str	r3, [sp, #16]
 8007b96:	9307      	str	r3, [sp, #28]
 8007b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b9e:	4654      	mov	r4, sl
 8007ba0:	2205      	movs	r2, #5
 8007ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba6:	4858      	ldr	r0, [pc, #352]	; (8007d08 <_vfiprintf_r+0x24c>)
 8007ba8:	f7f8 fb1a 	bl	80001e0 <memchr>
 8007bac:	9a04      	ldr	r2, [sp, #16]
 8007bae:	b9d8      	cbnz	r0, 8007be8 <_vfiprintf_r+0x12c>
 8007bb0:	06d1      	lsls	r1, r2, #27
 8007bb2:	bf44      	itt	mi
 8007bb4:	2320      	movmi	r3, #32
 8007bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bba:	0713      	lsls	r3, r2, #28
 8007bbc:	bf44      	itt	mi
 8007bbe:	232b      	movmi	r3, #43	; 0x2b
 8007bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bca:	d015      	beq.n	8007bf8 <_vfiprintf_r+0x13c>
 8007bcc:	9a07      	ldr	r2, [sp, #28]
 8007bce:	4654      	mov	r4, sl
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	f04f 0c0a 	mov.w	ip, #10
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bdc:	3b30      	subs	r3, #48	; 0x30
 8007bde:	2b09      	cmp	r3, #9
 8007be0:	d94e      	bls.n	8007c80 <_vfiprintf_r+0x1c4>
 8007be2:	b1b0      	cbz	r0, 8007c12 <_vfiprintf_r+0x156>
 8007be4:	9207      	str	r2, [sp, #28]
 8007be6:	e014      	b.n	8007c12 <_vfiprintf_r+0x156>
 8007be8:	eba0 0308 	sub.w	r3, r0, r8
 8007bec:	fa09 f303 	lsl.w	r3, r9, r3
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	9304      	str	r3, [sp, #16]
 8007bf4:	46a2      	mov	sl, r4
 8007bf6:	e7d2      	b.n	8007b9e <_vfiprintf_r+0xe2>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	1d19      	adds	r1, r3, #4
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	9103      	str	r1, [sp, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bfbb      	ittet	lt
 8007c04:	425b      	neglt	r3, r3
 8007c06:	f042 0202 	orrlt.w	r2, r2, #2
 8007c0a:	9307      	strge	r3, [sp, #28]
 8007c0c:	9307      	strlt	r3, [sp, #28]
 8007c0e:	bfb8      	it	lt
 8007c10:	9204      	strlt	r2, [sp, #16]
 8007c12:	7823      	ldrb	r3, [r4, #0]
 8007c14:	2b2e      	cmp	r3, #46	; 0x2e
 8007c16:	d10c      	bne.n	8007c32 <_vfiprintf_r+0x176>
 8007c18:	7863      	ldrb	r3, [r4, #1]
 8007c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c1c:	d135      	bne.n	8007c8a <_vfiprintf_r+0x1ce>
 8007c1e:	9b03      	ldr	r3, [sp, #12]
 8007c20:	1d1a      	adds	r2, r3, #4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	9203      	str	r2, [sp, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bfb8      	it	lt
 8007c2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c2e:	3402      	adds	r4, #2
 8007c30:	9305      	str	r3, [sp, #20]
 8007c32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d18 <_vfiprintf_r+0x25c>
 8007c36:	7821      	ldrb	r1, [r4, #0]
 8007c38:	2203      	movs	r2, #3
 8007c3a:	4650      	mov	r0, sl
 8007c3c:	f7f8 fad0 	bl	80001e0 <memchr>
 8007c40:	b140      	cbz	r0, 8007c54 <_vfiprintf_r+0x198>
 8007c42:	2340      	movs	r3, #64	; 0x40
 8007c44:	eba0 000a 	sub.w	r0, r0, sl
 8007c48:	fa03 f000 	lsl.w	r0, r3, r0
 8007c4c:	9b04      	ldr	r3, [sp, #16]
 8007c4e:	4303      	orrs	r3, r0
 8007c50:	3401      	adds	r4, #1
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c58:	482c      	ldr	r0, [pc, #176]	; (8007d0c <_vfiprintf_r+0x250>)
 8007c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c5e:	2206      	movs	r2, #6
 8007c60:	f7f8 fabe 	bl	80001e0 <memchr>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d03f      	beq.n	8007ce8 <_vfiprintf_r+0x22c>
 8007c68:	4b29      	ldr	r3, [pc, #164]	; (8007d10 <_vfiprintf_r+0x254>)
 8007c6a:	bb1b      	cbnz	r3, 8007cb4 <_vfiprintf_r+0x1f8>
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	3307      	adds	r3, #7
 8007c70:	f023 0307 	bic.w	r3, r3, #7
 8007c74:	3308      	adds	r3, #8
 8007c76:	9303      	str	r3, [sp, #12]
 8007c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7a:	443b      	add	r3, r7
 8007c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7e:	e767      	b.n	8007b50 <_vfiprintf_r+0x94>
 8007c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c84:	460c      	mov	r4, r1
 8007c86:	2001      	movs	r0, #1
 8007c88:	e7a5      	b.n	8007bd6 <_vfiprintf_r+0x11a>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	3401      	adds	r4, #1
 8007c8e:	9305      	str	r3, [sp, #20]
 8007c90:	4619      	mov	r1, r3
 8007c92:	f04f 0c0a 	mov.w	ip, #10
 8007c96:	4620      	mov	r0, r4
 8007c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c9c:	3a30      	subs	r2, #48	; 0x30
 8007c9e:	2a09      	cmp	r2, #9
 8007ca0:	d903      	bls.n	8007caa <_vfiprintf_r+0x1ee>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0c5      	beq.n	8007c32 <_vfiprintf_r+0x176>
 8007ca6:	9105      	str	r1, [sp, #20]
 8007ca8:	e7c3      	b.n	8007c32 <_vfiprintf_r+0x176>
 8007caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cae:	4604      	mov	r4, r0
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e7f0      	b.n	8007c96 <_vfiprintf_r+0x1da>
 8007cb4:	ab03      	add	r3, sp, #12
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	462a      	mov	r2, r5
 8007cba:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <_vfiprintf_r+0x258>)
 8007cbc:	a904      	add	r1, sp, #16
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f3af 8000 	nop.w
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	1c78      	adds	r0, r7, #1
 8007cc8:	d1d6      	bne.n	8007c78 <_vfiprintf_r+0x1bc>
 8007cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ccc:	07d9      	lsls	r1, r3, #31
 8007cce:	d405      	bmi.n	8007cdc <_vfiprintf_r+0x220>
 8007cd0:	89ab      	ldrh	r3, [r5, #12]
 8007cd2:	059a      	lsls	r2, r3, #22
 8007cd4:	d402      	bmi.n	8007cdc <_vfiprintf_r+0x220>
 8007cd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cd8:	f000 fc45 	bl	8008566 <__retarget_lock_release_recursive>
 8007cdc:	89ab      	ldrh	r3, [r5, #12]
 8007cde:	065b      	lsls	r3, r3, #25
 8007ce0:	f53f af12 	bmi.w	8007b08 <_vfiprintf_r+0x4c>
 8007ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ce6:	e711      	b.n	8007b0c <_vfiprintf_r+0x50>
 8007ce8:	ab03      	add	r3, sp, #12
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	462a      	mov	r2, r5
 8007cee:	4b09      	ldr	r3, [pc, #36]	; (8007d14 <_vfiprintf_r+0x258>)
 8007cf0:	a904      	add	r1, sp, #16
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f000 f880 	bl	8007df8 <_printf_i>
 8007cf8:	e7e4      	b.n	8007cc4 <_vfiprintf_r+0x208>
 8007cfa:	bf00      	nop
 8007cfc:	08008a10 	.word	0x08008a10
 8007d00:	08008a30 	.word	0x08008a30
 8007d04:	080089f0 	.word	0x080089f0
 8007d08:	080089ba 	.word	0x080089ba
 8007d0c:	080089c4 	.word	0x080089c4
 8007d10:	00000000 	.word	0x00000000
 8007d14:	08007a97 	.word	0x08007a97
 8007d18:	080089c0 	.word	0x080089c0

08007d1c <_printf_common>:
 8007d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	4616      	mov	r6, r2
 8007d22:	4699      	mov	r9, r3
 8007d24:	688a      	ldr	r2, [r1, #8]
 8007d26:	690b      	ldr	r3, [r1, #16]
 8007d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	bfb8      	it	lt
 8007d30:	4613      	movlt	r3, r2
 8007d32:	6033      	str	r3, [r6, #0]
 8007d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d38:	4607      	mov	r7, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	b10a      	cbz	r2, 8007d42 <_printf_common+0x26>
 8007d3e:	3301      	adds	r3, #1
 8007d40:	6033      	str	r3, [r6, #0]
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	0699      	lsls	r1, r3, #26
 8007d46:	bf42      	ittt	mi
 8007d48:	6833      	ldrmi	r3, [r6, #0]
 8007d4a:	3302      	addmi	r3, #2
 8007d4c:	6033      	strmi	r3, [r6, #0]
 8007d4e:	6825      	ldr	r5, [r4, #0]
 8007d50:	f015 0506 	ands.w	r5, r5, #6
 8007d54:	d106      	bne.n	8007d64 <_printf_common+0x48>
 8007d56:	f104 0a19 	add.w	sl, r4, #25
 8007d5a:	68e3      	ldr	r3, [r4, #12]
 8007d5c:	6832      	ldr	r2, [r6, #0]
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	42ab      	cmp	r3, r5
 8007d62:	dc26      	bgt.n	8007db2 <_printf_common+0x96>
 8007d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d68:	1e13      	subs	r3, r2, #0
 8007d6a:	6822      	ldr	r2, [r4, #0]
 8007d6c:	bf18      	it	ne
 8007d6e:	2301      	movne	r3, #1
 8007d70:	0692      	lsls	r2, r2, #26
 8007d72:	d42b      	bmi.n	8007dcc <_printf_common+0xb0>
 8007d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d78:	4649      	mov	r1, r9
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	47c0      	blx	r8
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d01e      	beq.n	8007dc0 <_printf_common+0xa4>
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	68e5      	ldr	r5, [r4, #12]
 8007d86:	6832      	ldr	r2, [r6, #0]
 8007d88:	f003 0306 	and.w	r3, r3, #6
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	bf08      	it	eq
 8007d90:	1aad      	subeq	r5, r5, r2
 8007d92:	68a3      	ldr	r3, [r4, #8]
 8007d94:	6922      	ldr	r2, [r4, #16]
 8007d96:	bf0c      	ite	eq
 8007d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d9c:	2500      	movne	r5, #0
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	bfc4      	itt	gt
 8007da2:	1a9b      	subgt	r3, r3, r2
 8007da4:	18ed      	addgt	r5, r5, r3
 8007da6:	2600      	movs	r6, #0
 8007da8:	341a      	adds	r4, #26
 8007daa:	42b5      	cmp	r5, r6
 8007dac:	d11a      	bne.n	8007de4 <_printf_common+0xc8>
 8007dae:	2000      	movs	r0, #0
 8007db0:	e008      	b.n	8007dc4 <_printf_common+0xa8>
 8007db2:	2301      	movs	r3, #1
 8007db4:	4652      	mov	r2, sl
 8007db6:	4649      	mov	r1, r9
 8007db8:	4638      	mov	r0, r7
 8007dba:	47c0      	blx	r8
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d103      	bne.n	8007dc8 <_printf_common+0xac>
 8007dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc8:	3501      	adds	r5, #1
 8007dca:	e7c6      	b.n	8007d5a <_printf_common+0x3e>
 8007dcc:	18e1      	adds	r1, r4, r3
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	2030      	movs	r0, #48	; 0x30
 8007dd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dd6:	4422      	add	r2, r4
 8007dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007de0:	3302      	adds	r3, #2
 8007de2:	e7c7      	b.n	8007d74 <_printf_common+0x58>
 8007de4:	2301      	movs	r3, #1
 8007de6:	4622      	mov	r2, r4
 8007de8:	4649      	mov	r1, r9
 8007dea:	4638      	mov	r0, r7
 8007dec:	47c0      	blx	r8
 8007dee:	3001      	adds	r0, #1
 8007df0:	d0e6      	beq.n	8007dc0 <_printf_common+0xa4>
 8007df2:	3601      	adds	r6, #1
 8007df4:	e7d9      	b.n	8007daa <_printf_common+0x8e>
	...

08007df8 <_printf_i>:
 8007df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	4691      	mov	r9, r2
 8007e00:	7e27      	ldrb	r7, [r4, #24]
 8007e02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e04:	2f78      	cmp	r7, #120	; 0x78
 8007e06:	4680      	mov	r8, r0
 8007e08:	469a      	mov	sl, r3
 8007e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e0e:	d807      	bhi.n	8007e20 <_printf_i+0x28>
 8007e10:	2f62      	cmp	r7, #98	; 0x62
 8007e12:	d80a      	bhi.n	8007e2a <_printf_i+0x32>
 8007e14:	2f00      	cmp	r7, #0
 8007e16:	f000 80d8 	beq.w	8007fca <_printf_i+0x1d2>
 8007e1a:	2f58      	cmp	r7, #88	; 0x58
 8007e1c:	f000 80a3 	beq.w	8007f66 <_printf_i+0x16e>
 8007e20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e28:	e03a      	b.n	8007ea0 <_printf_i+0xa8>
 8007e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e2e:	2b15      	cmp	r3, #21
 8007e30:	d8f6      	bhi.n	8007e20 <_printf_i+0x28>
 8007e32:	a001      	add	r0, pc, #4	; (adr r0, 8007e38 <_printf_i+0x40>)
 8007e34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e38:	08007e91 	.word	0x08007e91
 8007e3c:	08007ea5 	.word	0x08007ea5
 8007e40:	08007e21 	.word	0x08007e21
 8007e44:	08007e21 	.word	0x08007e21
 8007e48:	08007e21 	.word	0x08007e21
 8007e4c:	08007e21 	.word	0x08007e21
 8007e50:	08007ea5 	.word	0x08007ea5
 8007e54:	08007e21 	.word	0x08007e21
 8007e58:	08007e21 	.word	0x08007e21
 8007e5c:	08007e21 	.word	0x08007e21
 8007e60:	08007e21 	.word	0x08007e21
 8007e64:	08007fb1 	.word	0x08007fb1
 8007e68:	08007ed5 	.word	0x08007ed5
 8007e6c:	08007f93 	.word	0x08007f93
 8007e70:	08007e21 	.word	0x08007e21
 8007e74:	08007e21 	.word	0x08007e21
 8007e78:	08007fd3 	.word	0x08007fd3
 8007e7c:	08007e21 	.word	0x08007e21
 8007e80:	08007ed5 	.word	0x08007ed5
 8007e84:	08007e21 	.word	0x08007e21
 8007e88:	08007e21 	.word	0x08007e21
 8007e8c:	08007f9b 	.word	0x08007f9b
 8007e90:	680b      	ldr	r3, [r1, #0]
 8007e92:	1d1a      	adds	r2, r3, #4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	600a      	str	r2, [r1, #0]
 8007e98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e0a3      	b.n	8007fec <_printf_i+0x1f4>
 8007ea4:	6825      	ldr	r5, [r4, #0]
 8007ea6:	6808      	ldr	r0, [r1, #0]
 8007ea8:	062e      	lsls	r6, r5, #24
 8007eaa:	f100 0304 	add.w	r3, r0, #4
 8007eae:	d50a      	bpl.n	8007ec6 <_printf_i+0xce>
 8007eb0:	6805      	ldr	r5, [r0, #0]
 8007eb2:	600b      	str	r3, [r1, #0]
 8007eb4:	2d00      	cmp	r5, #0
 8007eb6:	da03      	bge.n	8007ec0 <_printf_i+0xc8>
 8007eb8:	232d      	movs	r3, #45	; 0x2d
 8007eba:	426d      	negs	r5, r5
 8007ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec0:	485e      	ldr	r0, [pc, #376]	; (800803c <_printf_i+0x244>)
 8007ec2:	230a      	movs	r3, #10
 8007ec4:	e019      	b.n	8007efa <_printf_i+0x102>
 8007ec6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007eca:	6805      	ldr	r5, [r0, #0]
 8007ecc:	600b      	str	r3, [r1, #0]
 8007ece:	bf18      	it	ne
 8007ed0:	b22d      	sxthne	r5, r5
 8007ed2:	e7ef      	b.n	8007eb4 <_printf_i+0xbc>
 8007ed4:	680b      	ldr	r3, [r1, #0]
 8007ed6:	6825      	ldr	r5, [r4, #0]
 8007ed8:	1d18      	adds	r0, r3, #4
 8007eda:	6008      	str	r0, [r1, #0]
 8007edc:	0628      	lsls	r0, r5, #24
 8007ede:	d501      	bpl.n	8007ee4 <_printf_i+0xec>
 8007ee0:	681d      	ldr	r5, [r3, #0]
 8007ee2:	e002      	b.n	8007eea <_printf_i+0xf2>
 8007ee4:	0669      	lsls	r1, r5, #25
 8007ee6:	d5fb      	bpl.n	8007ee0 <_printf_i+0xe8>
 8007ee8:	881d      	ldrh	r5, [r3, #0]
 8007eea:	4854      	ldr	r0, [pc, #336]	; (800803c <_printf_i+0x244>)
 8007eec:	2f6f      	cmp	r7, #111	; 0x6f
 8007eee:	bf0c      	ite	eq
 8007ef0:	2308      	moveq	r3, #8
 8007ef2:	230a      	movne	r3, #10
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007efa:	6866      	ldr	r6, [r4, #4]
 8007efc:	60a6      	str	r6, [r4, #8]
 8007efe:	2e00      	cmp	r6, #0
 8007f00:	bfa2      	ittt	ge
 8007f02:	6821      	ldrge	r1, [r4, #0]
 8007f04:	f021 0104 	bicge.w	r1, r1, #4
 8007f08:	6021      	strge	r1, [r4, #0]
 8007f0a:	b90d      	cbnz	r5, 8007f10 <_printf_i+0x118>
 8007f0c:	2e00      	cmp	r6, #0
 8007f0e:	d04d      	beq.n	8007fac <_printf_i+0x1b4>
 8007f10:	4616      	mov	r6, r2
 8007f12:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f16:	fb03 5711 	mls	r7, r3, r1, r5
 8007f1a:	5dc7      	ldrb	r7, [r0, r7]
 8007f1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f20:	462f      	mov	r7, r5
 8007f22:	42bb      	cmp	r3, r7
 8007f24:	460d      	mov	r5, r1
 8007f26:	d9f4      	bls.n	8007f12 <_printf_i+0x11a>
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d10b      	bne.n	8007f44 <_printf_i+0x14c>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	07df      	lsls	r7, r3, #31
 8007f30:	d508      	bpl.n	8007f44 <_printf_i+0x14c>
 8007f32:	6923      	ldr	r3, [r4, #16]
 8007f34:	6861      	ldr	r1, [r4, #4]
 8007f36:	4299      	cmp	r1, r3
 8007f38:	bfde      	ittt	le
 8007f3a:	2330      	movle	r3, #48	; 0x30
 8007f3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f44:	1b92      	subs	r2, r2, r6
 8007f46:	6122      	str	r2, [r4, #16]
 8007f48:	f8cd a000 	str.w	sl, [sp]
 8007f4c:	464b      	mov	r3, r9
 8007f4e:	aa03      	add	r2, sp, #12
 8007f50:	4621      	mov	r1, r4
 8007f52:	4640      	mov	r0, r8
 8007f54:	f7ff fee2 	bl	8007d1c <_printf_common>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d14c      	bne.n	8007ff6 <_printf_i+0x1fe>
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	b004      	add	sp, #16
 8007f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f66:	4835      	ldr	r0, [pc, #212]	; (800803c <_printf_i+0x244>)
 8007f68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	680e      	ldr	r6, [r1, #0]
 8007f70:	061f      	lsls	r7, r3, #24
 8007f72:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f76:	600e      	str	r6, [r1, #0]
 8007f78:	d514      	bpl.n	8007fa4 <_printf_i+0x1ac>
 8007f7a:	07d9      	lsls	r1, r3, #31
 8007f7c:	bf44      	itt	mi
 8007f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8007f82:	6023      	strmi	r3, [r4, #0]
 8007f84:	b91d      	cbnz	r5, 8007f8e <_printf_i+0x196>
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	f023 0320 	bic.w	r3, r3, #32
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	2310      	movs	r3, #16
 8007f90:	e7b0      	b.n	8007ef4 <_printf_i+0xfc>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	f043 0320 	orr.w	r3, r3, #32
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	2378      	movs	r3, #120	; 0x78
 8007f9c:	4828      	ldr	r0, [pc, #160]	; (8008040 <_printf_i+0x248>)
 8007f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fa2:	e7e3      	b.n	8007f6c <_printf_i+0x174>
 8007fa4:	065e      	lsls	r6, r3, #25
 8007fa6:	bf48      	it	mi
 8007fa8:	b2ad      	uxthmi	r5, r5
 8007faa:	e7e6      	b.n	8007f7a <_printf_i+0x182>
 8007fac:	4616      	mov	r6, r2
 8007fae:	e7bb      	b.n	8007f28 <_printf_i+0x130>
 8007fb0:	680b      	ldr	r3, [r1, #0]
 8007fb2:	6826      	ldr	r6, [r4, #0]
 8007fb4:	6960      	ldr	r0, [r4, #20]
 8007fb6:	1d1d      	adds	r5, r3, #4
 8007fb8:	600d      	str	r5, [r1, #0]
 8007fba:	0635      	lsls	r5, r6, #24
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	d501      	bpl.n	8007fc4 <_printf_i+0x1cc>
 8007fc0:	6018      	str	r0, [r3, #0]
 8007fc2:	e002      	b.n	8007fca <_printf_i+0x1d2>
 8007fc4:	0671      	lsls	r1, r6, #25
 8007fc6:	d5fb      	bpl.n	8007fc0 <_printf_i+0x1c8>
 8007fc8:	8018      	strh	r0, [r3, #0]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6123      	str	r3, [r4, #16]
 8007fce:	4616      	mov	r6, r2
 8007fd0:	e7ba      	b.n	8007f48 <_printf_i+0x150>
 8007fd2:	680b      	ldr	r3, [r1, #0]
 8007fd4:	1d1a      	adds	r2, r3, #4
 8007fd6:	600a      	str	r2, [r1, #0]
 8007fd8:	681e      	ldr	r6, [r3, #0]
 8007fda:	6862      	ldr	r2, [r4, #4]
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f7f8 f8fe 	bl	80001e0 <memchr>
 8007fe4:	b108      	cbz	r0, 8007fea <_printf_i+0x1f2>
 8007fe6:	1b80      	subs	r0, r0, r6
 8007fe8:	6060      	str	r0, [r4, #4]
 8007fea:	6863      	ldr	r3, [r4, #4]
 8007fec:	6123      	str	r3, [r4, #16]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff4:	e7a8      	b.n	8007f48 <_printf_i+0x150>
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	47d0      	blx	sl
 8008000:	3001      	adds	r0, #1
 8008002:	d0ab      	beq.n	8007f5c <_printf_i+0x164>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	079b      	lsls	r3, r3, #30
 8008008:	d413      	bmi.n	8008032 <_printf_i+0x23a>
 800800a:	68e0      	ldr	r0, [r4, #12]
 800800c:	9b03      	ldr	r3, [sp, #12]
 800800e:	4298      	cmp	r0, r3
 8008010:	bfb8      	it	lt
 8008012:	4618      	movlt	r0, r3
 8008014:	e7a4      	b.n	8007f60 <_printf_i+0x168>
 8008016:	2301      	movs	r3, #1
 8008018:	4632      	mov	r2, r6
 800801a:	4649      	mov	r1, r9
 800801c:	4640      	mov	r0, r8
 800801e:	47d0      	blx	sl
 8008020:	3001      	adds	r0, #1
 8008022:	d09b      	beq.n	8007f5c <_printf_i+0x164>
 8008024:	3501      	adds	r5, #1
 8008026:	68e3      	ldr	r3, [r4, #12]
 8008028:	9903      	ldr	r1, [sp, #12]
 800802a:	1a5b      	subs	r3, r3, r1
 800802c:	42ab      	cmp	r3, r5
 800802e:	dcf2      	bgt.n	8008016 <_printf_i+0x21e>
 8008030:	e7eb      	b.n	800800a <_printf_i+0x212>
 8008032:	2500      	movs	r5, #0
 8008034:	f104 0619 	add.w	r6, r4, #25
 8008038:	e7f5      	b.n	8008026 <_printf_i+0x22e>
 800803a:	bf00      	nop
 800803c:	080089cb 	.word	0x080089cb
 8008040:	080089dc 	.word	0x080089dc

08008044 <_sbrk_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	4d06      	ldr	r5, [pc, #24]	; (8008060 <_sbrk_r+0x1c>)
 8008048:	2300      	movs	r3, #0
 800804a:	4604      	mov	r4, r0
 800804c:	4608      	mov	r0, r1
 800804e:	602b      	str	r3, [r5, #0]
 8008050:	f7fa feaa 	bl	8002da8 <_sbrk>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_sbrk_r+0x1a>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_sbrk_r+0x1a>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	20000710 	.word	0x20000710

08008064 <__swbuf_r>:
 8008064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008066:	460e      	mov	r6, r1
 8008068:	4614      	mov	r4, r2
 800806a:	4605      	mov	r5, r0
 800806c:	b118      	cbz	r0, 8008076 <__swbuf_r+0x12>
 800806e:	6983      	ldr	r3, [r0, #24]
 8008070:	b90b      	cbnz	r3, 8008076 <__swbuf_r+0x12>
 8008072:	f000 f9d9 	bl	8008428 <__sinit>
 8008076:	4b21      	ldr	r3, [pc, #132]	; (80080fc <__swbuf_r+0x98>)
 8008078:	429c      	cmp	r4, r3
 800807a:	d12b      	bne.n	80080d4 <__swbuf_r+0x70>
 800807c:	686c      	ldr	r4, [r5, #4]
 800807e:	69a3      	ldr	r3, [r4, #24]
 8008080:	60a3      	str	r3, [r4, #8]
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	071a      	lsls	r2, r3, #28
 8008086:	d52f      	bpl.n	80080e8 <__swbuf_r+0x84>
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	b36b      	cbz	r3, 80080e8 <__swbuf_r+0x84>
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	6820      	ldr	r0, [r4, #0]
 8008090:	1ac0      	subs	r0, r0, r3
 8008092:	6963      	ldr	r3, [r4, #20]
 8008094:	b2f6      	uxtb	r6, r6
 8008096:	4283      	cmp	r3, r0
 8008098:	4637      	mov	r7, r6
 800809a:	dc04      	bgt.n	80080a6 <__swbuf_r+0x42>
 800809c:	4621      	mov	r1, r4
 800809e:	4628      	mov	r0, r5
 80080a0:	f000 f92e 	bl	8008300 <_fflush_r>
 80080a4:	bb30      	cbnz	r0, 80080f4 <__swbuf_r+0x90>
 80080a6:	68a3      	ldr	r3, [r4, #8]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	60a3      	str	r3, [r4, #8]
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	6022      	str	r2, [r4, #0]
 80080b2:	701e      	strb	r6, [r3, #0]
 80080b4:	6963      	ldr	r3, [r4, #20]
 80080b6:	3001      	adds	r0, #1
 80080b8:	4283      	cmp	r3, r0
 80080ba:	d004      	beq.n	80080c6 <__swbuf_r+0x62>
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	07db      	lsls	r3, r3, #31
 80080c0:	d506      	bpl.n	80080d0 <__swbuf_r+0x6c>
 80080c2:	2e0a      	cmp	r6, #10
 80080c4:	d104      	bne.n	80080d0 <__swbuf_r+0x6c>
 80080c6:	4621      	mov	r1, r4
 80080c8:	4628      	mov	r0, r5
 80080ca:	f000 f919 	bl	8008300 <_fflush_r>
 80080ce:	b988      	cbnz	r0, 80080f4 <__swbuf_r+0x90>
 80080d0:	4638      	mov	r0, r7
 80080d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d4:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <__swbuf_r+0x9c>)
 80080d6:	429c      	cmp	r4, r3
 80080d8:	d101      	bne.n	80080de <__swbuf_r+0x7a>
 80080da:	68ac      	ldr	r4, [r5, #8]
 80080dc:	e7cf      	b.n	800807e <__swbuf_r+0x1a>
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <__swbuf_r+0xa0>)
 80080e0:	429c      	cmp	r4, r3
 80080e2:	bf08      	it	eq
 80080e4:	68ec      	ldreq	r4, [r5, #12]
 80080e6:	e7ca      	b.n	800807e <__swbuf_r+0x1a>
 80080e8:	4621      	mov	r1, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 f80c 	bl	8008108 <__swsetup_r>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d0cb      	beq.n	800808c <__swbuf_r+0x28>
 80080f4:	f04f 37ff 	mov.w	r7, #4294967295
 80080f8:	e7ea      	b.n	80080d0 <__swbuf_r+0x6c>
 80080fa:	bf00      	nop
 80080fc:	08008a10 	.word	0x08008a10
 8008100:	08008a30 	.word	0x08008a30
 8008104:	080089f0 	.word	0x080089f0

08008108 <__swsetup_r>:
 8008108:	4b32      	ldr	r3, [pc, #200]	; (80081d4 <__swsetup_r+0xcc>)
 800810a:	b570      	push	{r4, r5, r6, lr}
 800810c:	681d      	ldr	r5, [r3, #0]
 800810e:	4606      	mov	r6, r0
 8008110:	460c      	mov	r4, r1
 8008112:	b125      	cbz	r5, 800811e <__swsetup_r+0x16>
 8008114:	69ab      	ldr	r3, [r5, #24]
 8008116:	b913      	cbnz	r3, 800811e <__swsetup_r+0x16>
 8008118:	4628      	mov	r0, r5
 800811a:	f000 f985 	bl	8008428 <__sinit>
 800811e:	4b2e      	ldr	r3, [pc, #184]	; (80081d8 <__swsetup_r+0xd0>)
 8008120:	429c      	cmp	r4, r3
 8008122:	d10f      	bne.n	8008144 <__swsetup_r+0x3c>
 8008124:	686c      	ldr	r4, [r5, #4]
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800812c:	0719      	lsls	r1, r3, #28
 800812e:	d42c      	bmi.n	800818a <__swsetup_r+0x82>
 8008130:	06dd      	lsls	r5, r3, #27
 8008132:	d411      	bmi.n	8008158 <__swsetup_r+0x50>
 8008134:	2309      	movs	r3, #9
 8008136:	6033      	str	r3, [r6, #0]
 8008138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800813c:	81a3      	strh	r3, [r4, #12]
 800813e:	f04f 30ff 	mov.w	r0, #4294967295
 8008142:	e03e      	b.n	80081c2 <__swsetup_r+0xba>
 8008144:	4b25      	ldr	r3, [pc, #148]	; (80081dc <__swsetup_r+0xd4>)
 8008146:	429c      	cmp	r4, r3
 8008148:	d101      	bne.n	800814e <__swsetup_r+0x46>
 800814a:	68ac      	ldr	r4, [r5, #8]
 800814c:	e7eb      	b.n	8008126 <__swsetup_r+0x1e>
 800814e:	4b24      	ldr	r3, [pc, #144]	; (80081e0 <__swsetup_r+0xd8>)
 8008150:	429c      	cmp	r4, r3
 8008152:	bf08      	it	eq
 8008154:	68ec      	ldreq	r4, [r5, #12]
 8008156:	e7e6      	b.n	8008126 <__swsetup_r+0x1e>
 8008158:	0758      	lsls	r0, r3, #29
 800815a:	d512      	bpl.n	8008182 <__swsetup_r+0x7a>
 800815c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800815e:	b141      	cbz	r1, 8008172 <__swsetup_r+0x6a>
 8008160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008164:	4299      	cmp	r1, r3
 8008166:	d002      	beq.n	800816e <__swsetup_r+0x66>
 8008168:	4630      	mov	r0, r6
 800816a:	f7ff fbd3 	bl	8007914 <_free_r>
 800816e:	2300      	movs	r3, #0
 8008170:	6363      	str	r3, [r4, #52]	; 0x34
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	2300      	movs	r3, #0
 800817c:	6063      	str	r3, [r4, #4]
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	f043 0308 	orr.w	r3, r3, #8
 8008188:	81a3      	strh	r3, [r4, #12]
 800818a:	6923      	ldr	r3, [r4, #16]
 800818c:	b94b      	cbnz	r3, 80081a2 <__swsetup_r+0x9a>
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008198:	d003      	beq.n	80081a2 <__swsetup_r+0x9a>
 800819a:	4621      	mov	r1, r4
 800819c:	4630      	mov	r0, r6
 800819e:	f000 fa07 	bl	80085b0 <__smakebuf_r>
 80081a2:	89a0      	ldrh	r0, [r4, #12]
 80081a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081a8:	f010 0301 	ands.w	r3, r0, #1
 80081ac:	d00a      	beq.n	80081c4 <__swsetup_r+0xbc>
 80081ae:	2300      	movs	r3, #0
 80081b0:	60a3      	str	r3, [r4, #8]
 80081b2:	6963      	ldr	r3, [r4, #20]
 80081b4:	425b      	negs	r3, r3
 80081b6:	61a3      	str	r3, [r4, #24]
 80081b8:	6923      	ldr	r3, [r4, #16]
 80081ba:	b943      	cbnz	r3, 80081ce <__swsetup_r+0xc6>
 80081bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081c0:	d1ba      	bne.n	8008138 <__swsetup_r+0x30>
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	0781      	lsls	r1, r0, #30
 80081c6:	bf58      	it	pl
 80081c8:	6963      	ldrpl	r3, [r4, #20]
 80081ca:	60a3      	str	r3, [r4, #8]
 80081cc:	e7f4      	b.n	80081b8 <__swsetup_r+0xb0>
 80081ce:	2000      	movs	r0, #0
 80081d0:	e7f7      	b.n	80081c2 <__swsetup_r+0xba>
 80081d2:	bf00      	nop
 80081d4:	20000034 	.word	0x20000034
 80081d8:	08008a10 	.word	0x08008a10
 80081dc:	08008a30 	.word	0x08008a30
 80081e0:	080089f0 	.word	0x080089f0

080081e4 <abort>:
 80081e4:	b508      	push	{r3, lr}
 80081e6:	2006      	movs	r0, #6
 80081e8:	f000 fa56 	bl	8008698 <raise>
 80081ec:	2001      	movs	r0, #1
 80081ee:	f7fa fd63 	bl	8002cb8 <_exit>
	...

080081f4 <__sflush_r>:
 80081f4:	898a      	ldrh	r2, [r1, #12]
 80081f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081fa:	4605      	mov	r5, r0
 80081fc:	0710      	lsls	r0, r2, #28
 80081fe:	460c      	mov	r4, r1
 8008200:	d458      	bmi.n	80082b4 <__sflush_r+0xc0>
 8008202:	684b      	ldr	r3, [r1, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	dc05      	bgt.n	8008214 <__sflush_r+0x20>
 8008208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800820a:	2b00      	cmp	r3, #0
 800820c:	dc02      	bgt.n	8008214 <__sflush_r+0x20>
 800820e:	2000      	movs	r0, #0
 8008210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008216:	2e00      	cmp	r6, #0
 8008218:	d0f9      	beq.n	800820e <__sflush_r+0x1a>
 800821a:	2300      	movs	r3, #0
 800821c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008220:	682f      	ldr	r7, [r5, #0]
 8008222:	602b      	str	r3, [r5, #0]
 8008224:	d032      	beq.n	800828c <__sflush_r+0x98>
 8008226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	075a      	lsls	r2, r3, #29
 800822c:	d505      	bpl.n	800823a <__sflush_r+0x46>
 800822e:	6863      	ldr	r3, [r4, #4]
 8008230:	1ac0      	subs	r0, r0, r3
 8008232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008234:	b10b      	cbz	r3, 800823a <__sflush_r+0x46>
 8008236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008238:	1ac0      	subs	r0, r0, r3
 800823a:	2300      	movs	r3, #0
 800823c:	4602      	mov	r2, r0
 800823e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008240:	6a21      	ldr	r1, [r4, #32]
 8008242:	4628      	mov	r0, r5
 8008244:	47b0      	blx	r6
 8008246:	1c43      	adds	r3, r0, #1
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	d106      	bne.n	800825a <__sflush_r+0x66>
 800824c:	6829      	ldr	r1, [r5, #0]
 800824e:	291d      	cmp	r1, #29
 8008250:	d82c      	bhi.n	80082ac <__sflush_r+0xb8>
 8008252:	4a2a      	ldr	r2, [pc, #168]	; (80082fc <__sflush_r+0x108>)
 8008254:	40ca      	lsrs	r2, r1
 8008256:	07d6      	lsls	r6, r2, #31
 8008258:	d528      	bpl.n	80082ac <__sflush_r+0xb8>
 800825a:	2200      	movs	r2, #0
 800825c:	6062      	str	r2, [r4, #4]
 800825e:	04d9      	lsls	r1, r3, #19
 8008260:	6922      	ldr	r2, [r4, #16]
 8008262:	6022      	str	r2, [r4, #0]
 8008264:	d504      	bpl.n	8008270 <__sflush_r+0x7c>
 8008266:	1c42      	adds	r2, r0, #1
 8008268:	d101      	bne.n	800826e <__sflush_r+0x7a>
 800826a:	682b      	ldr	r3, [r5, #0]
 800826c:	b903      	cbnz	r3, 8008270 <__sflush_r+0x7c>
 800826e:	6560      	str	r0, [r4, #84]	; 0x54
 8008270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008272:	602f      	str	r7, [r5, #0]
 8008274:	2900      	cmp	r1, #0
 8008276:	d0ca      	beq.n	800820e <__sflush_r+0x1a>
 8008278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800827c:	4299      	cmp	r1, r3
 800827e:	d002      	beq.n	8008286 <__sflush_r+0x92>
 8008280:	4628      	mov	r0, r5
 8008282:	f7ff fb47 	bl	8007914 <_free_r>
 8008286:	2000      	movs	r0, #0
 8008288:	6360      	str	r0, [r4, #52]	; 0x34
 800828a:	e7c1      	b.n	8008210 <__sflush_r+0x1c>
 800828c:	6a21      	ldr	r1, [r4, #32]
 800828e:	2301      	movs	r3, #1
 8008290:	4628      	mov	r0, r5
 8008292:	47b0      	blx	r6
 8008294:	1c41      	adds	r1, r0, #1
 8008296:	d1c7      	bne.n	8008228 <__sflush_r+0x34>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0c4      	beq.n	8008228 <__sflush_r+0x34>
 800829e:	2b1d      	cmp	r3, #29
 80082a0:	d001      	beq.n	80082a6 <__sflush_r+0xb2>
 80082a2:	2b16      	cmp	r3, #22
 80082a4:	d101      	bne.n	80082aa <__sflush_r+0xb6>
 80082a6:	602f      	str	r7, [r5, #0]
 80082a8:	e7b1      	b.n	800820e <__sflush_r+0x1a>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b0:	81a3      	strh	r3, [r4, #12]
 80082b2:	e7ad      	b.n	8008210 <__sflush_r+0x1c>
 80082b4:	690f      	ldr	r7, [r1, #16]
 80082b6:	2f00      	cmp	r7, #0
 80082b8:	d0a9      	beq.n	800820e <__sflush_r+0x1a>
 80082ba:	0793      	lsls	r3, r2, #30
 80082bc:	680e      	ldr	r6, [r1, #0]
 80082be:	bf08      	it	eq
 80082c0:	694b      	ldreq	r3, [r1, #20]
 80082c2:	600f      	str	r7, [r1, #0]
 80082c4:	bf18      	it	ne
 80082c6:	2300      	movne	r3, #0
 80082c8:	eba6 0807 	sub.w	r8, r6, r7
 80082cc:	608b      	str	r3, [r1, #8]
 80082ce:	f1b8 0f00 	cmp.w	r8, #0
 80082d2:	dd9c      	ble.n	800820e <__sflush_r+0x1a>
 80082d4:	6a21      	ldr	r1, [r4, #32]
 80082d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082d8:	4643      	mov	r3, r8
 80082da:	463a      	mov	r2, r7
 80082dc:	4628      	mov	r0, r5
 80082de:	47b0      	blx	r6
 80082e0:	2800      	cmp	r0, #0
 80082e2:	dc06      	bgt.n	80082f2 <__sflush_r+0xfe>
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	f04f 30ff 	mov.w	r0, #4294967295
 80082f0:	e78e      	b.n	8008210 <__sflush_r+0x1c>
 80082f2:	4407      	add	r7, r0
 80082f4:	eba8 0800 	sub.w	r8, r8, r0
 80082f8:	e7e9      	b.n	80082ce <__sflush_r+0xda>
 80082fa:	bf00      	nop
 80082fc:	20400001 	.word	0x20400001

08008300 <_fflush_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	690b      	ldr	r3, [r1, #16]
 8008304:	4605      	mov	r5, r0
 8008306:	460c      	mov	r4, r1
 8008308:	b913      	cbnz	r3, 8008310 <_fflush_r+0x10>
 800830a:	2500      	movs	r5, #0
 800830c:	4628      	mov	r0, r5
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	b118      	cbz	r0, 800831a <_fflush_r+0x1a>
 8008312:	6983      	ldr	r3, [r0, #24]
 8008314:	b90b      	cbnz	r3, 800831a <_fflush_r+0x1a>
 8008316:	f000 f887 	bl	8008428 <__sinit>
 800831a:	4b14      	ldr	r3, [pc, #80]	; (800836c <_fflush_r+0x6c>)
 800831c:	429c      	cmp	r4, r3
 800831e:	d11b      	bne.n	8008358 <_fflush_r+0x58>
 8008320:	686c      	ldr	r4, [r5, #4]
 8008322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0ef      	beq.n	800830a <_fflush_r+0xa>
 800832a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800832c:	07d0      	lsls	r0, r2, #31
 800832e:	d404      	bmi.n	800833a <_fflush_r+0x3a>
 8008330:	0599      	lsls	r1, r3, #22
 8008332:	d402      	bmi.n	800833a <_fflush_r+0x3a>
 8008334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008336:	f000 f915 	bl	8008564 <__retarget_lock_acquire_recursive>
 800833a:	4628      	mov	r0, r5
 800833c:	4621      	mov	r1, r4
 800833e:	f7ff ff59 	bl	80081f4 <__sflush_r>
 8008342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008344:	07da      	lsls	r2, r3, #31
 8008346:	4605      	mov	r5, r0
 8008348:	d4e0      	bmi.n	800830c <_fflush_r+0xc>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	059b      	lsls	r3, r3, #22
 800834e:	d4dd      	bmi.n	800830c <_fflush_r+0xc>
 8008350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008352:	f000 f908 	bl	8008566 <__retarget_lock_release_recursive>
 8008356:	e7d9      	b.n	800830c <_fflush_r+0xc>
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <_fflush_r+0x70>)
 800835a:	429c      	cmp	r4, r3
 800835c:	d101      	bne.n	8008362 <_fflush_r+0x62>
 800835e:	68ac      	ldr	r4, [r5, #8]
 8008360:	e7df      	b.n	8008322 <_fflush_r+0x22>
 8008362:	4b04      	ldr	r3, [pc, #16]	; (8008374 <_fflush_r+0x74>)
 8008364:	429c      	cmp	r4, r3
 8008366:	bf08      	it	eq
 8008368:	68ec      	ldreq	r4, [r5, #12]
 800836a:	e7da      	b.n	8008322 <_fflush_r+0x22>
 800836c:	08008a10 	.word	0x08008a10
 8008370:	08008a30 	.word	0x08008a30
 8008374:	080089f0 	.word	0x080089f0

08008378 <std>:
 8008378:	2300      	movs	r3, #0
 800837a:	b510      	push	{r4, lr}
 800837c:	4604      	mov	r4, r0
 800837e:	e9c0 3300 	strd	r3, r3, [r0]
 8008382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008386:	6083      	str	r3, [r0, #8]
 8008388:	8181      	strh	r1, [r0, #12]
 800838a:	6643      	str	r3, [r0, #100]	; 0x64
 800838c:	81c2      	strh	r2, [r0, #14]
 800838e:	6183      	str	r3, [r0, #24]
 8008390:	4619      	mov	r1, r3
 8008392:	2208      	movs	r2, #8
 8008394:	305c      	adds	r0, #92	; 0x5c
 8008396:	f7ff fa0f 	bl	80077b8 <memset>
 800839a:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <std+0x38>)
 800839c:	6263      	str	r3, [r4, #36]	; 0x24
 800839e:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <std+0x3c>)
 80083a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80083a2:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <std+0x40>)
 80083a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083a6:	4b05      	ldr	r3, [pc, #20]	; (80083bc <std+0x44>)
 80083a8:	6224      	str	r4, [r4, #32]
 80083aa:	6323      	str	r3, [r4, #48]	; 0x30
 80083ac:	bd10      	pop	{r4, pc}
 80083ae:	bf00      	nop
 80083b0:	080086d1 	.word	0x080086d1
 80083b4:	080086f3 	.word	0x080086f3
 80083b8:	0800872b 	.word	0x0800872b
 80083bc:	0800874f 	.word	0x0800874f

080083c0 <_cleanup_r>:
 80083c0:	4901      	ldr	r1, [pc, #4]	; (80083c8 <_cleanup_r+0x8>)
 80083c2:	f000 b8af 	b.w	8008524 <_fwalk_reent>
 80083c6:	bf00      	nop
 80083c8:	08008301 	.word	0x08008301

080083cc <__sfmoreglue>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	1e4a      	subs	r2, r1, #1
 80083d0:	2568      	movs	r5, #104	; 0x68
 80083d2:	4355      	muls	r5, r2
 80083d4:	460e      	mov	r6, r1
 80083d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083da:	f7ff faeb 	bl	80079b4 <_malloc_r>
 80083de:	4604      	mov	r4, r0
 80083e0:	b140      	cbz	r0, 80083f4 <__sfmoreglue+0x28>
 80083e2:	2100      	movs	r1, #0
 80083e4:	e9c0 1600 	strd	r1, r6, [r0]
 80083e8:	300c      	adds	r0, #12
 80083ea:	60a0      	str	r0, [r4, #8]
 80083ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083f0:	f7ff f9e2 	bl	80077b8 <memset>
 80083f4:	4620      	mov	r0, r4
 80083f6:	bd70      	pop	{r4, r5, r6, pc}

080083f8 <__sfp_lock_acquire>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__sfp_lock_acquire+0x8>)
 80083fa:	f000 b8b3 	b.w	8008564 <__retarget_lock_acquire_recursive>
 80083fe:	bf00      	nop
 8008400:	2000070c 	.word	0x2000070c

08008404 <__sfp_lock_release>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__sfp_lock_release+0x8>)
 8008406:	f000 b8ae 	b.w	8008566 <__retarget_lock_release_recursive>
 800840a:	bf00      	nop
 800840c:	2000070c 	.word	0x2000070c

08008410 <__sinit_lock_acquire>:
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <__sinit_lock_acquire+0x8>)
 8008412:	f000 b8a7 	b.w	8008564 <__retarget_lock_acquire_recursive>
 8008416:	bf00      	nop
 8008418:	20000707 	.word	0x20000707

0800841c <__sinit_lock_release>:
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <__sinit_lock_release+0x8>)
 800841e:	f000 b8a2 	b.w	8008566 <__retarget_lock_release_recursive>
 8008422:	bf00      	nop
 8008424:	20000707 	.word	0x20000707

08008428 <__sinit>:
 8008428:	b510      	push	{r4, lr}
 800842a:	4604      	mov	r4, r0
 800842c:	f7ff fff0 	bl	8008410 <__sinit_lock_acquire>
 8008430:	69a3      	ldr	r3, [r4, #24]
 8008432:	b11b      	cbz	r3, 800843c <__sinit+0x14>
 8008434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008438:	f7ff bff0 	b.w	800841c <__sinit_lock_release>
 800843c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008440:	6523      	str	r3, [r4, #80]	; 0x50
 8008442:	4b13      	ldr	r3, [pc, #76]	; (8008490 <__sinit+0x68>)
 8008444:	4a13      	ldr	r2, [pc, #76]	; (8008494 <__sinit+0x6c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	62a2      	str	r2, [r4, #40]	; 0x28
 800844a:	42a3      	cmp	r3, r4
 800844c:	bf04      	itt	eq
 800844e:	2301      	moveq	r3, #1
 8008450:	61a3      	streq	r3, [r4, #24]
 8008452:	4620      	mov	r0, r4
 8008454:	f000 f820 	bl	8008498 <__sfp>
 8008458:	6060      	str	r0, [r4, #4]
 800845a:	4620      	mov	r0, r4
 800845c:	f000 f81c 	bl	8008498 <__sfp>
 8008460:	60a0      	str	r0, [r4, #8]
 8008462:	4620      	mov	r0, r4
 8008464:	f000 f818 	bl	8008498 <__sfp>
 8008468:	2200      	movs	r2, #0
 800846a:	60e0      	str	r0, [r4, #12]
 800846c:	2104      	movs	r1, #4
 800846e:	6860      	ldr	r0, [r4, #4]
 8008470:	f7ff ff82 	bl	8008378 <std>
 8008474:	68a0      	ldr	r0, [r4, #8]
 8008476:	2201      	movs	r2, #1
 8008478:	2109      	movs	r1, #9
 800847a:	f7ff ff7d 	bl	8008378 <std>
 800847e:	68e0      	ldr	r0, [r4, #12]
 8008480:	2202      	movs	r2, #2
 8008482:	2112      	movs	r1, #18
 8008484:	f7ff ff78 	bl	8008378 <std>
 8008488:	2301      	movs	r3, #1
 800848a:	61a3      	str	r3, [r4, #24]
 800848c:	e7d2      	b.n	8008434 <__sinit+0xc>
 800848e:	bf00      	nop
 8008490:	08008904 	.word	0x08008904
 8008494:	080083c1 	.word	0x080083c1

08008498 <__sfp>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	4607      	mov	r7, r0
 800849c:	f7ff ffac 	bl	80083f8 <__sfp_lock_acquire>
 80084a0:	4b1e      	ldr	r3, [pc, #120]	; (800851c <__sfp+0x84>)
 80084a2:	681e      	ldr	r6, [r3, #0]
 80084a4:	69b3      	ldr	r3, [r6, #24]
 80084a6:	b913      	cbnz	r3, 80084ae <__sfp+0x16>
 80084a8:	4630      	mov	r0, r6
 80084aa:	f7ff ffbd 	bl	8008428 <__sinit>
 80084ae:	3648      	adds	r6, #72	; 0x48
 80084b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	d503      	bpl.n	80084c0 <__sfp+0x28>
 80084b8:	6833      	ldr	r3, [r6, #0]
 80084ba:	b30b      	cbz	r3, 8008500 <__sfp+0x68>
 80084bc:	6836      	ldr	r6, [r6, #0]
 80084be:	e7f7      	b.n	80084b0 <__sfp+0x18>
 80084c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084c4:	b9d5      	cbnz	r5, 80084fc <__sfp+0x64>
 80084c6:	4b16      	ldr	r3, [pc, #88]	; (8008520 <__sfp+0x88>)
 80084c8:	60e3      	str	r3, [r4, #12]
 80084ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084ce:	6665      	str	r5, [r4, #100]	; 0x64
 80084d0:	f000 f847 	bl	8008562 <__retarget_lock_init_recursive>
 80084d4:	f7ff ff96 	bl	8008404 <__sfp_lock_release>
 80084d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084e0:	6025      	str	r5, [r4, #0]
 80084e2:	61a5      	str	r5, [r4, #24]
 80084e4:	2208      	movs	r2, #8
 80084e6:	4629      	mov	r1, r5
 80084e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084ec:	f7ff f964 	bl	80077b8 <memset>
 80084f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084f8:	4620      	mov	r0, r4
 80084fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084fc:	3468      	adds	r4, #104	; 0x68
 80084fe:	e7d9      	b.n	80084b4 <__sfp+0x1c>
 8008500:	2104      	movs	r1, #4
 8008502:	4638      	mov	r0, r7
 8008504:	f7ff ff62 	bl	80083cc <__sfmoreglue>
 8008508:	4604      	mov	r4, r0
 800850a:	6030      	str	r0, [r6, #0]
 800850c:	2800      	cmp	r0, #0
 800850e:	d1d5      	bne.n	80084bc <__sfp+0x24>
 8008510:	f7ff ff78 	bl	8008404 <__sfp_lock_release>
 8008514:	230c      	movs	r3, #12
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	e7ee      	b.n	80084f8 <__sfp+0x60>
 800851a:	bf00      	nop
 800851c:	08008904 	.word	0x08008904
 8008520:	ffff0001 	.word	0xffff0001

08008524 <_fwalk_reent>:
 8008524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008528:	4606      	mov	r6, r0
 800852a:	4688      	mov	r8, r1
 800852c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008530:	2700      	movs	r7, #0
 8008532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008536:	f1b9 0901 	subs.w	r9, r9, #1
 800853a:	d505      	bpl.n	8008548 <_fwalk_reent+0x24>
 800853c:	6824      	ldr	r4, [r4, #0]
 800853e:	2c00      	cmp	r4, #0
 8008540:	d1f7      	bne.n	8008532 <_fwalk_reent+0xe>
 8008542:	4638      	mov	r0, r7
 8008544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008548:	89ab      	ldrh	r3, [r5, #12]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d907      	bls.n	800855e <_fwalk_reent+0x3a>
 800854e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008552:	3301      	adds	r3, #1
 8008554:	d003      	beq.n	800855e <_fwalk_reent+0x3a>
 8008556:	4629      	mov	r1, r5
 8008558:	4630      	mov	r0, r6
 800855a:	47c0      	blx	r8
 800855c:	4307      	orrs	r7, r0
 800855e:	3568      	adds	r5, #104	; 0x68
 8008560:	e7e9      	b.n	8008536 <_fwalk_reent+0x12>

08008562 <__retarget_lock_init_recursive>:
 8008562:	4770      	bx	lr

08008564 <__retarget_lock_acquire_recursive>:
 8008564:	4770      	bx	lr

08008566 <__retarget_lock_release_recursive>:
 8008566:	4770      	bx	lr

08008568 <__swhatbuf_r>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	460e      	mov	r6, r1
 800856c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008570:	2900      	cmp	r1, #0
 8008572:	b096      	sub	sp, #88	; 0x58
 8008574:	4614      	mov	r4, r2
 8008576:	461d      	mov	r5, r3
 8008578:	da07      	bge.n	800858a <__swhatbuf_r+0x22>
 800857a:	2300      	movs	r3, #0
 800857c:	602b      	str	r3, [r5, #0]
 800857e:	89b3      	ldrh	r3, [r6, #12]
 8008580:	061a      	lsls	r2, r3, #24
 8008582:	d410      	bmi.n	80085a6 <__swhatbuf_r+0x3e>
 8008584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008588:	e00e      	b.n	80085a8 <__swhatbuf_r+0x40>
 800858a:	466a      	mov	r2, sp
 800858c:	f000 f906 	bl	800879c <_fstat_r>
 8008590:	2800      	cmp	r0, #0
 8008592:	dbf2      	blt.n	800857a <__swhatbuf_r+0x12>
 8008594:	9a01      	ldr	r2, [sp, #4]
 8008596:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800859a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800859e:	425a      	negs	r2, r3
 80085a0:	415a      	adcs	r2, r3
 80085a2:	602a      	str	r2, [r5, #0]
 80085a4:	e7ee      	b.n	8008584 <__swhatbuf_r+0x1c>
 80085a6:	2340      	movs	r3, #64	; 0x40
 80085a8:	2000      	movs	r0, #0
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	b016      	add	sp, #88	; 0x58
 80085ae:	bd70      	pop	{r4, r5, r6, pc}

080085b0 <__smakebuf_r>:
 80085b0:	898b      	ldrh	r3, [r1, #12]
 80085b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085b4:	079d      	lsls	r5, r3, #30
 80085b6:	4606      	mov	r6, r0
 80085b8:	460c      	mov	r4, r1
 80085ba:	d507      	bpl.n	80085cc <__smakebuf_r+0x1c>
 80085bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	6123      	str	r3, [r4, #16]
 80085c4:	2301      	movs	r3, #1
 80085c6:	6163      	str	r3, [r4, #20]
 80085c8:	b002      	add	sp, #8
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	ab01      	add	r3, sp, #4
 80085ce:	466a      	mov	r2, sp
 80085d0:	f7ff ffca 	bl	8008568 <__swhatbuf_r>
 80085d4:	9900      	ldr	r1, [sp, #0]
 80085d6:	4605      	mov	r5, r0
 80085d8:	4630      	mov	r0, r6
 80085da:	f7ff f9eb 	bl	80079b4 <_malloc_r>
 80085de:	b948      	cbnz	r0, 80085f4 <__smakebuf_r+0x44>
 80085e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085e4:	059a      	lsls	r2, r3, #22
 80085e6:	d4ef      	bmi.n	80085c8 <__smakebuf_r+0x18>
 80085e8:	f023 0303 	bic.w	r3, r3, #3
 80085ec:	f043 0302 	orr.w	r3, r3, #2
 80085f0:	81a3      	strh	r3, [r4, #12]
 80085f2:	e7e3      	b.n	80085bc <__smakebuf_r+0xc>
 80085f4:	4b0d      	ldr	r3, [pc, #52]	; (800862c <__smakebuf_r+0x7c>)
 80085f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80085f8:	89a3      	ldrh	r3, [r4, #12]
 80085fa:	6020      	str	r0, [r4, #0]
 80085fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008600:	81a3      	strh	r3, [r4, #12]
 8008602:	9b00      	ldr	r3, [sp, #0]
 8008604:	6163      	str	r3, [r4, #20]
 8008606:	9b01      	ldr	r3, [sp, #4]
 8008608:	6120      	str	r0, [r4, #16]
 800860a:	b15b      	cbz	r3, 8008624 <__smakebuf_r+0x74>
 800860c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008610:	4630      	mov	r0, r6
 8008612:	f000 f8d5 	bl	80087c0 <_isatty_r>
 8008616:	b128      	cbz	r0, 8008624 <__smakebuf_r+0x74>
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	f023 0303 	bic.w	r3, r3, #3
 800861e:	f043 0301 	orr.w	r3, r3, #1
 8008622:	81a3      	strh	r3, [r4, #12]
 8008624:	89a0      	ldrh	r0, [r4, #12]
 8008626:	4305      	orrs	r5, r0
 8008628:	81a5      	strh	r5, [r4, #12]
 800862a:	e7cd      	b.n	80085c8 <__smakebuf_r+0x18>
 800862c:	080083c1 	.word	0x080083c1

08008630 <__malloc_lock>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__malloc_lock+0x8>)
 8008632:	f7ff bf97 	b.w	8008564 <__retarget_lock_acquire_recursive>
 8008636:	bf00      	nop
 8008638:	20000708 	.word	0x20000708

0800863c <__malloc_unlock>:
 800863c:	4801      	ldr	r0, [pc, #4]	; (8008644 <__malloc_unlock+0x8>)
 800863e:	f7ff bf92 	b.w	8008566 <__retarget_lock_release_recursive>
 8008642:	bf00      	nop
 8008644:	20000708 	.word	0x20000708

08008648 <_raise_r>:
 8008648:	291f      	cmp	r1, #31
 800864a:	b538      	push	{r3, r4, r5, lr}
 800864c:	4604      	mov	r4, r0
 800864e:	460d      	mov	r5, r1
 8008650:	d904      	bls.n	800865c <_raise_r+0x14>
 8008652:	2316      	movs	r3, #22
 8008654:	6003      	str	r3, [r0, #0]
 8008656:	f04f 30ff 	mov.w	r0, #4294967295
 800865a:	bd38      	pop	{r3, r4, r5, pc}
 800865c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800865e:	b112      	cbz	r2, 8008666 <_raise_r+0x1e>
 8008660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008664:	b94b      	cbnz	r3, 800867a <_raise_r+0x32>
 8008666:	4620      	mov	r0, r4
 8008668:	f000 f830 	bl	80086cc <_getpid_r>
 800866c:	462a      	mov	r2, r5
 800866e:	4601      	mov	r1, r0
 8008670:	4620      	mov	r0, r4
 8008672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008676:	f000 b817 	b.w	80086a8 <_kill_r>
 800867a:	2b01      	cmp	r3, #1
 800867c:	d00a      	beq.n	8008694 <_raise_r+0x4c>
 800867e:	1c59      	adds	r1, r3, #1
 8008680:	d103      	bne.n	800868a <_raise_r+0x42>
 8008682:	2316      	movs	r3, #22
 8008684:	6003      	str	r3, [r0, #0]
 8008686:	2001      	movs	r0, #1
 8008688:	e7e7      	b.n	800865a <_raise_r+0x12>
 800868a:	2400      	movs	r4, #0
 800868c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008690:	4628      	mov	r0, r5
 8008692:	4798      	blx	r3
 8008694:	2000      	movs	r0, #0
 8008696:	e7e0      	b.n	800865a <_raise_r+0x12>

08008698 <raise>:
 8008698:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <raise+0xc>)
 800869a:	4601      	mov	r1, r0
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	f7ff bfd3 	b.w	8008648 <_raise_r>
 80086a2:	bf00      	nop
 80086a4:	20000034 	.word	0x20000034

080086a8 <_kill_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4d07      	ldr	r5, [pc, #28]	; (80086c8 <_kill_r+0x20>)
 80086ac:	2300      	movs	r3, #0
 80086ae:	4604      	mov	r4, r0
 80086b0:	4608      	mov	r0, r1
 80086b2:	4611      	mov	r1, r2
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	f7fa faef 	bl	8002c98 <_kill>
 80086ba:	1c43      	adds	r3, r0, #1
 80086bc:	d102      	bne.n	80086c4 <_kill_r+0x1c>
 80086be:	682b      	ldr	r3, [r5, #0]
 80086c0:	b103      	cbz	r3, 80086c4 <_kill_r+0x1c>
 80086c2:	6023      	str	r3, [r4, #0]
 80086c4:	bd38      	pop	{r3, r4, r5, pc}
 80086c6:	bf00      	nop
 80086c8:	20000710 	.word	0x20000710

080086cc <_getpid_r>:
 80086cc:	f7fa badc 	b.w	8002c88 <_getpid>

080086d0 <__sread>:
 80086d0:	b510      	push	{r4, lr}
 80086d2:	460c      	mov	r4, r1
 80086d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d8:	f000 f894 	bl	8008804 <_read_r>
 80086dc:	2800      	cmp	r0, #0
 80086de:	bfab      	itete	ge
 80086e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086e2:	89a3      	ldrhlt	r3, [r4, #12]
 80086e4:	181b      	addge	r3, r3, r0
 80086e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086ea:	bfac      	ite	ge
 80086ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80086ee:	81a3      	strhlt	r3, [r4, #12]
 80086f0:	bd10      	pop	{r4, pc}

080086f2 <__swrite>:
 80086f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f6:	461f      	mov	r7, r3
 80086f8:	898b      	ldrh	r3, [r1, #12]
 80086fa:	05db      	lsls	r3, r3, #23
 80086fc:	4605      	mov	r5, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	4616      	mov	r6, r2
 8008702:	d505      	bpl.n	8008710 <__swrite+0x1e>
 8008704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008708:	2302      	movs	r3, #2
 800870a:	2200      	movs	r2, #0
 800870c:	f000 f868 	bl	80087e0 <_lseek_r>
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	4632      	mov	r2, r6
 800871e:	463b      	mov	r3, r7
 8008720:	4628      	mov	r0, r5
 8008722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008726:	f000 b817 	b.w	8008758 <_write_r>

0800872a <__sseek>:
 800872a:	b510      	push	{r4, lr}
 800872c:	460c      	mov	r4, r1
 800872e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008732:	f000 f855 	bl	80087e0 <_lseek_r>
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	bf15      	itete	ne
 800873c:	6560      	strne	r0, [r4, #84]	; 0x54
 800873e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008746:	81a3      	strheq	r3, [r4, #12]
 8008748:	bf18      	it	ne
 800874a:	81a3      	strhne	r3, [r4, #12]
 800874c:	bd10      	pop	{r4, pc}

0800874e <__sclose>:
 800874e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008752:	f000 b813 	b.w	800877c <_close_r>
	...

08008758 <_write_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d07      	ldr	r5, [pc, #28]	; (8008778 <_write_r+0x20>)
 800875c:	4604      	mov	r4, r0
 800875e:	4608      	mov	r0, r1
 8008760:	4611      	mov	r1, r2
 8008762:	2200      	movs	r2, #0
 8008764:	602a      	str	r2, [r5, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	f7fa facd 	bl	8002d06 <_write>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	d102      	bne.n	8008776 <_write_r+0x1e>
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	b103      	cbz	r3, 8008776 <_write_r+0x1e>
 8008774:	6023      	str	r3, [r4, #0]
 8008776:	bd38      	pop	{r3, r4, r5, pc}
 8008778:	20000710 	.word	0x20000710

0800877c <_close_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d06      	ldr	r5, [pc, #24]	; (8008798 <_close_r+0x1c>)
 8008780:	2300      	movs	r3, #0
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	f7fa fad9 	bl	8002d3e <_close>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_close_r+0x1a>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_close_r+0x1a>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20000710 	.word	0x20000710

0800879c <_fstat_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d07      	ldr	r5, [pc, #28]	; (80087bc <_fstat_r+0x20>)
 80087a0:	2300      	movs	r3, #0
 80087a2:	4604      	mov	r4, r0
 80087a4:	4608      	mov	r0, r1
 80087a6:	4611      	mov	r1, r2
 80087a8:	602b      	str	r3, [r5, #0]
 80087aa:	f7fa fad4 	bl	8002d56 <_fstat>
 80087ae:	1c43      	adds	r3, r0, #1
 80087b0:	d102      	bne.n	80087b8 <_fstat_r+0x1c>
 80087b2:	682b      	ldr	r3, [r5, #0]
 80087b4:	b103      	cbz	r3, 80087b8 <_fstat_r+0x1c>
 80087b6:	6023      	str	r3, [r4, #0]
 80087b8:	bd38      	pop	{r3, r4, r5, pc}
 80087ba:	bf00      	nop
 80087bc:	20000710 	.word	0x20000710

080087c0 <_isatty_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d06      	ldr	r5, [pc, #24]	; (80087dc <_isatty_r+0x1c>)
 80087c4:	2300      	movs	r3, #0
 80087c6:	4604      	mov	r4, r0
 80087c8:	4608      	mov	r0, r1
 80087ca:	602b      	str	r3, [r5, #0]
 80087cc:	f7fa fad3 	bl	8002d76 <_isatty>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	d102      	bne.n	80087da <_isatty_r+0x1a>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	b103      	cbz	r3, 80087da <_isatty_r+0x1a>
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	bd38      	pop	{r3, r4, r5, pc}
 80087dc:	20000710 	.word	0x20000710

080087e0 <_lseek_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d07      	ldr	r5, [pc, #28]	; (8008800 <_lseek_r+0x20>)
 80087e4:	4604      	mov	r4, r0
 80087e6:	4608      	mov	r0, r1
 80087e8:	4611      	mov	r1, r2
 80087ea:	2200      	movs	r2, #0
 80087ec:	602a      	str	r2, [r5, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	f7fa facc 	bl	8002d8c <_lseek>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_lseek_r+0x1e>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_lseek_r+0x1e>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20000710 	.word	0x20000710

08008804 <_read_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d07      	ldr	r5, [pc, #28]	; (8008824 <_read_r+0x20>)
 8008808:	4604      	mov	r4, r0
 800880a:	4608      	mov	r0, r1
 800880c:	4611      	mov	r1, r2
 800880e:	2200      	movs	r2, #0
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f7fa fa5a 	bl	8002ccc <_read>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_read_r+0x1e>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_read_r+0x1e>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	20000710 	.word	0x20000710

08008828 <trunc>:
 8008828:	ec51 0b10 	vmov	r0, r1, d0
 800882c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008830:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008834:	2b13      	cmp	r3, #19
 8008836:	b5d0      	push	{r4, r6, r7, lr}
 8008838:	460c      	mov	r4, r1
 800883a:	dc10      	bgt.n	800885e <trunc+0x36>
 800883c:	2b00      	cmp	r3, #0
 800883e:	bfa5      	ittet	ge
 8008840:	4a11      	ldrge	r2, [pc, #68]	; (8008888 <trunc+0x60>)
 8008842:	fa42 f303 	asrge.w	r3, r2, r3
 8008846:	2100      	movlt	r1, #0
 8008848:	2100      	movge	r1, #0
 800884a:	bfb9      	ittee	lt
 800884c:	2000      	movlt	r0, #0
 800884e:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8008852:	2000      	movge	r0, #0
 8008854:	ea24 0103 	bicge.w	r1, r4, r3
 8008858:	ec41 0b10 	vmov	d0, r0, r1
 800885c:	bdd0      	pop	{r4, r6, r7, pc}
 800885e:	2b33      	cmp	r3, #51	; 0x33
 8008860:	dd08      	ble.n	8008874 <trunc+0x4c>
 8008862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008866:	d1f7      	bne.n	8008858 <trunc+0x30>
 8008868:	ee10 2a10 	vmov	r2, s0
 800886c:	460b      	mov	r3, r1
 800886e:	f7f7 fd0d 	bl	800028c <__adddf3>
 8008872:	e7f1      	b.n	8008858 <trunc+0x30>
 8008874:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008878:	f04f 33ff 	mov.w	r3, #4294967295
 800887c:	fa23 f202 	lsr.w	r2, r3, r2
 8008880:	ea20 0602 	bic.w	r6, r0, r2
 8008884:	4630      	mov	r0, r6
 8008886:	e7e7      	b.n	8008858 <trunc+0x30>
 8008888:	000fffff 	.word	0x000fffff

0800888c <_init>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	bf00      	nop
 8008890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008892:	bc08      	pop	{r3}
 8008894:	469e      	mov	lr, r3
 8008896:	4770      	bx	lr

08008898 <_fini>:
 8008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889a:	bf00      	nop
 800889c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889e:	bc08      	pop	{r3}
 80088a0:	469e      	mov	lr, r3
 80088a2:	4770      	bx	lr
