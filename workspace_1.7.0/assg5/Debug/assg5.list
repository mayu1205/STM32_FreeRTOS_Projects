
assg5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002748  08002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002818  08002818  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002818  08002818  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002818  08002818  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08002890  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002890  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000772a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001595  00000000  00000000  000277ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  00028d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  000293c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d3d  00000000  00000000  00029968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006873  00000000  00000000  0004f6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5601  00000000  00000000  00055f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013b519  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001de0  00000000  00000000  0013b56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002730 	.word	0x08002730

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08002730 	.word	0x08002730

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc09 	bl	80009e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f826 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f876 	bl	80002c4 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		if(HAL_GPIO_ReadPin(my_button_GPIO_Port, my_button_Pin) == 0){
 80001d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001dc:	480c      	ldr	r0, [pc, #48]	; (8000210 <main+0x48>)
 80001de:	f000 ff31 	bl	8001044 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d109      	bne.n	80001fc <main+0x34>

			printf("Button is pressed\n");
 80001e8:	480a      	ldr	r0, [pc, #40]	; (8000214 <main+0x4c>)
 80001ea:	f001 fe49 	bl	8001e80 <puts>
			HAL_GPIO_WritePin(my_led1_GPIO_Port, my_led1_Pin, 1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2120      	movs	r1, #32
 80001f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f6:	f000 ff3d 	bl	8001074 <HAL_GPIO_WritePin>
 80001fa:	e7ed      	b.n	80001d8 <main+0x10>

		}
		else{
			printf("Button is not pressed\n");
 80001fc:	4806      	ldr	r0, [pc, #24]	; (8000218 <main+0x50>)
 80001fe:	f001 fe3f 	bl	8001e80 <puts>
			HAL_GPIO_WritePin(my_led2_GPIO_Port, my_led2_Pin, 1);
 8000202:	2201      	movs	r2, #1
 8000204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000208:	4804      	ldr	r0, [pc, #16]	; (800021c <main+0x54>)
 800020a:	f000 ff33 	bl	8001074 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(my_button_GPIO_Port, my_button_Pin) == 0){
 800020e:	e7e3      	b.n	80001d8 <main+0x10>
 8000210:	48000800 	.word	0x48000800
 8000214:	08002748 	.word	0x08002748
 8000218:	0800275c 	.word	0x0800275c
 800021c:	48000400 	.word	0x48000400

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b096      	sub	sp, #88	; 0x58
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	2244      	movs	r2, #68	; 0x44
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fdb0 	bl	8001d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	463b      	mov	r3, r7
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000242:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000246:	f000 ff5f 	bl	8001108 <HAL_PWREx_ControlVoltageScaling>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000250:	f000 fa70 	bl	8000734 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000254:	2310      	movs	r3, #16
 8000256:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800025c:	2300      	movs	r3, #0
 800025e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000260:	2360      	movs	r3, #96	; 0x60
 8000262:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000264:	2302      	movs	r3, #2
 8000266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000268:	2301      	movs	r3, #1
 800026a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800026c:	2301      	movs	r3, #1
 800026e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000270:	2328      	movs	r3, #40	; 0x28
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000274:	2307      	movs	r3, #7
 8000276:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000278:	2302      	movs	r3, #2
 800027a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800027c:	2302      	movs	r3, #2
 800027e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	4618      	mov	r0, r3
 8000286:	f000 ff95 	bl	80011b4 <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000290:	f000 fa50 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2303      	movs	r3, #3
 800029a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002a8:	463b      	mov	r3, r7
 80002aa:	2104      	movs	r1, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 fb5b 	bl	8001968 <HAL_RCC_ClockConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002b8:	f000 fa3c 	bl	8000734 <Error_Handler>
  }
}
 80002bc:	bf00      	nop
 80002be:	3758      	adds	r7, #88	; 0x58
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08a      	sub	sp, #40	; 0x28
 80002c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	f107 0314 	add.w	r3, r7, #20
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002da:	4bbb      	ldr	r3, [pc, #748]	; (80005c8 <MX_GPIO_Init+0x304>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	4aba      	ldr	r2, [pc, #744]	; (80005c8 <MX_GPIO_Init+0x304>)
 80002e0:	f043 0310 	orr.w	r3, r3, #16
 80002e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e6:	4bb8      	ldr	r3, [pc, #736]	; (80005c8 <MX_GPIO_Init+0x304>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	f003 0310 	and.w	r3, r3, #16
 80002ee:	613b      	str	r3, [r7, #16]
 80002f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f2:	4bb5      	ldr	r3, [pc, #724]	; (80005c8 <MX_GPIO_Init+0x304>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	4ab4      	ldr	r2, [pc, #720]	; (80005c8 <MX_GPIO_Init+0x304>)
 80002f8:	f043 0304 	orr.w	r3, r3, #4
 80002fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fe:	4bb2      	ldr	r3, [pc, #712]	; (80005c8 <MX_GPIO_Init+0x304>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030a:	4baf      	ldr	r3, [pc, #700]	; (80005c8 <MX_GPIO_Init+0x304>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	4aae      	ldr	r2, [pc, #696]	; (80005c8 <MX_GPIO_Init+0x304>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000316:	4bac      	ldr	r3, [pc, #688]	; (80005c8 <MX_GPIO_Init+0x304>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000322:	4ba9      	ldr	r3, [pc, #676]	; (80005c8 <MX_GPIO_Init+0x304>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	4aa8      	ldr	r2, [pc, #672]	; (80005c8 <MX_GPIO_Init+0x304>)
 8000328:	f043 0302 	orr.w	r3, r3, #2
 800032c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032e:	4ba6      	ldr	r3, [pc, #664]	; (80005c8 <MX_GPIO_Init+0x304>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	f003 0302 	and.w	r3, r3, #2
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033a:	4ba3      	ldr	r3, [pc, #652]	; (80005c8 <MX_GPIO_Init+0x304>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	4aa2      	ldr	r2, [pc, #648]	; (80005c8 <MX_GPIO_Init+0x304>)
 8000340:	f043 0308 	orr.w	r3, r3, #8
 8000344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000346:	4ba0      	ldr	r3, [pc, #640]	; (80005c8 <MX_GPIO_Init+0x304>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	f003 0308 	and.w	r3, r3, #8
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000358:	489c      	ldr	r0, [pc, #624]	; (80005cc <MX_GPIO_Init+0x308>)
 800035a:	f000 fe8b 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|my_led1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	f248 1124 	movw	r1, #33060	; 0x8124
 8000364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000368:	f000 fe84 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|my_led2_Pin
 800036c:	2200      	movs	r2, #0
 800036e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000372:	4897      	ldr	r0, [pc, #604]	; (80005d0 <MX_GPIO_Init+0x30c>)
 8000374:	f000 fe7e 	bl	8001074 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f241 0181 	movw	r1, #4225	; 0x1081
 800037e:	4895      	ldr	r0, [pc, #596]	; (80005d4 <MX_GPIO_Init+0x310>)
 8000380:	f000 fe78 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	4892      	ldr	r0, [pc, #584]	; (80005d4 <MX_GPIO_Init+0x310>)
 800038c:	f000 fe72 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000396:	4890      	ldr	r0, [pc, #576]	; (80005d8 <MX_GPIO_Init+0x314>)
 8000398:	f000 fe6c 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2120      	movs	r1, #32
 80003a0:	488b      	ldr	r0, [pc, #556]	; (80005d0 <MX_GPIO_Init+0x30c>)
 80003a2:	f000 fe67 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2101      	movs	r1, #1
 80003aa:	4888      	ldr	r0, [pc, #544]	; (80005cc <MX_GPIO_Init+0x308>)
 80003ac:	f000 fe62 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80003b0:	f240 1315 	movw	r3, #277	; 0x115
 80003b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2300      	movs	r3, #0
 80003c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	4880      	ldr	r0, [pc, #512]	; (80005cc <MX_GPIO_Init+0x308>)
 80003ca:	f000 fc91 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80003ce:	236a      	movs	r3, #106	; 0x6a
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	4619      	mov	r1, r3
 80003e2:	487a      	ldr	r0, [pc, #488]	; (80005cc <MX_GPIO_Init+0x308>)
 80003e4:	f000 fc84 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : my_button_Pin */
  GPIO_InitStruct.Pin = my_button_Pin;
 80003e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(my_button_GPIO_Port, &GPIO_InitStruct);
 80003f6:	f107 0314 	add.w	r3, r7, #20
 80003fa:	4619      	mov	r1, r3
 80003fc:	4876      	ldr	r0, [pc, #472]	; (80005d8 <MX_GPIO_Init+0x314>)
 80003fe:	f000 fc77 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000402:	233f      	movs	r3, #63	; 0x3f
 8000404:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000406:	230b      	movs	r3, #11
 8000408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4619      	mov	r1, r3
 8000414:	4870      	ldr	r0, [pc, #448]	; (80005d8 <MX_GPIO_Init+0x314>)
 8000416:	f000 fc6b 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800041a:	2303      	movs	r3, #3
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800041e:	2302      	movs	r3, #2
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000426:	2303      	movs	r3, #3
 8000428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800042a:	2308      	movs	r3, #8
 800042c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	4619      	mov	r1, r3
 8000434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000438:	f000 fc5a 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin my_led1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|my_led1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800043c:	f248 1324 	movw	r3, #33060	; 0x8124
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	2301      	movs	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2300      	movs	r3, #0
 800044c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000458:	f000 fc4a 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800045c:	2308      	movs	r3, #8
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000460:	2302      	movs	r3, #2
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000468:	2300      	movs	r3, #0
 800046a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800046c:	2301      	movs	r3, #1
 800046e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4619      	mov	r1, r3
 8000476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047a:	f000 fc39 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800047e:	2310      	movs	r3, #16
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000482:	230b      	movs	r3, #11
 8000484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	4619      	mov	r1, r3
 8000490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000494:	f000 fc2c 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000498:	23c0      	movs	r3, #192	; 0xc0
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049c:	2302      	movs	r3, #2
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004a4:	2303      	movs	r3, #3
 80004a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004a8:	2305      	movs	r3, #5
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f000 fc1b 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80004ba:	2301      	movs	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	4619      	mov	r1, r3
 80004ce:	4840      	ldr	r0, [pc, #256]	; (80005d0 <MX_GPIO_Init+0x30c>)
 80004d0:	f000 fc0e 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80004d4:	2302      	movs	r3, #2
 80004d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004d8:	230b      	movs	r3, #11
 80004da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	4619      	mov	r1, r3
 80004e6:	483a      	ldr	r0, [pc, #232]	; (80005d0 <MX_GPIO_Init+0x30c>)
 80004e8:	f000 fc02 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin my_led2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|my_led2_Pin
 80004ec:	f24f 0334 	movw	r3, #61492	; 0xf034
 80004f0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2300      	movs	r3, #0
 80004fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	4619      	mov	r1, r3
 8000504:	4832      	ldr	r0, [pc, #200]	; (80005d0 <MX_GPIO_Init+0x30c>)
 8000506:	f000 fbf3 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800050a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800050e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000510:	2302      	movs	r3, #2
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2300      	movs	r3, #0
 800051a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800051c:	2306      	movs	r3, #6
 800051e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	4619      	mov	r1, r3
 8000526:	4829      	ldr	r0, [pc, #164]	; (80005cc <MX_GPIO_Init+0x308>)
 8000528:	f000 fbe2 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800052c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000530:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	2302      	movs	r3, #2
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800053a:	2303      	movs	r3, #3
 800053c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800053e:	230a      	movs	r3, #10
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	4820      	ldr	r0, [pc, #128]	; (80005cc <MX_GPIO_Init+0x308>)
 800054a:	f000 fbd1 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800054e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000554:	2312      	movs	r3, #18
 8000556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055c:	2303      	movs	r3, #3
 800055e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000560:	2304      	movs	r3, #4
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	4819      	ldr	r0, [pc, #100]	; (80005d0 <MX_GPIO_Init+0x30c>)
 800056c:	f000 fbc0 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000570:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000576:	2302      	movs	r3, #2
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057e:	2303      	movs	r3, #3
 8000580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000582:	2307      	movs	r3, #7
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4619      	mov	r1, r3
 800058c:	4811      	ldr	r0, [pc, #68]	; (80005d4 <MX_GPIO_Init+0x310>)
 800058e:	f000 fbaf 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000592:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000596:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000598:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <MX_GPIO_Init+0x310>)
 80005aa:	f000 fba1 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80005ae:	f243 0381 	movw	r3, #12417	; 0x3081
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	e009      	b.n	80005dc <MX_GPIO_Init+0x318>
 80005c8:	40021000 	.word	0x40021000
 80005cc:	48001000 	.word	0x48001000
 80005d0:	48000400 	.word	0x48000400
 80005d4:	48000c00 	.word	0x48000c00
 80005d8:	48000800 	.word	0x48000800
 80005dc:	4852      	ldr	r0, [pc, #328]	; (8000728 <MX_GPIO_Init+0x464>)
 80005de:	f000 fb87 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80005e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	484c      	ldr	r0, [pc, #304]	; (800072c <MX_GPIO_Init+0x468>)
 80005fc:	f000 fb78 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000600:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000606:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	4845      	ldr	r0, [pc, #276]	; (800072c <MX_GPIO_Init+0x468>)
 8000618:	f000 fb6a 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800061c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f000 fb5c 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000638:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000646:	2303      	movs	r3, #3
 8000648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800064a:	230a      	movs	r3, #10
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 fb4a 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800065c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066a:	2303      	movs	r3, #3
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800066e:	2306      	movs	r3, #6
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	482c      	ldr	r0, [pc, #176]	; (800072c <MX_GPIO_Init+0x468>)
 800067a:	f000 fb39 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800067e:	2302      	movs	r3, #2
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068a:	2303      	movs	r3, #3
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800068e:	2305      	movs	r3, #5
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4823      	ldr	r0, [pc, #140]	; (8000728 <MX_GPIO_Init+0x464>)
 800069a:	f000 fb29 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800069e:	2378      	movs	r3, #120	; 0x78
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006ae:	2307      	movs	r3, #7
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	481b      	ldr	r0, [pc, #108]	; (8000728 <MX_GPIO_Init+0x464>)
 80006ba:	f000 fb19 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_LINK_UART1_TX_Pin ST_LINK_UART1_RX_Pin */
  GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80006be:	23c0      	movs	r3, #192	; 0xc0
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006ce:	2307      	movs	r3, #7
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	4815      	ldr	r0, [pc, #84]	; (8000730 <MX_GPIO_Init+0x46c>)
 80006da:	f000 fb09 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80006de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e4:	2312      	movs	r3, #18
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006f0:	2304      	movs	r3, #4
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_GPIO_Init+0x46c>)
 80006fc:	f000 faf8 	bl	8000cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	2017      	movs	r0, #23
 8000706:	f000 fabc 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800070a:	2017      	movs	r0, #23
 800070c:	f000 fad5 	bl	8000cba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2028      	movs	r0, #40	; 0x28
 8000716:	f000 fab4 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800071a:	2028      	movs	r0, #40	; 0x28
 800071c:	f000 facd 	bl	8000cba <HAL_NVIC_EnableIRQ>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	48000c00 	.word	0x48000c00
 800072c:	48000800 	.word	0x48000800
 8000730:	48000400 	.word	0x48000400

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x44>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_MspInit+0x44>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6613      	str	r3, [r2, #96]	; 0x60
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x44>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x44>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_MspInit+0x44>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6593      	str	r3, [r2, #88]	; 0x58
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MspInit+0x44>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f000 f95a 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80007e0:	2020      	movs	r0, #32
 80007e2:	f000 fc5f 	bl	80010a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80007e6:	2040      	movs	r0, #64	; 0x40
 80007e8:	f000 fc5c 	bl	80010a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80007ec:	2080      	movs	r0, #128	; 0x80
 80007ee:	f000 fc59 	bl	80010a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80007f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007f6:	f000 fc55 	bl	80010a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}

080007fe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000802:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000806:	f000 fc4d 	bl	80010a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800080a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800080e:	f000 fc49 	bl	80010a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000812:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000816:	f000 fc45 	bl	80010a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800081a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800081e:	f000 fc41 	bl	80010a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}

08000826 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e00a      	b.n	800084e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000838:	f3af 8000 	nop.w
 800083c:	4601      	mov	r1, r0
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	60ba      	str	r2, [r7, #8]
 8000844:	b2ca      	uxtb	r2, r1
 8000846:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	3301      	adds	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	429a      	cmp	r2, r3
 8000854:	dbf0      	blt.n	8000838 <_read+0x12>
	}

return len;
 8000856:	687b      	ldr	r3, [r7, #4]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	e009      	b.n	8000886 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	60ba      	str	r2, [r7, #8]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	3301      	adds	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	429a      	cmp	r2, r3
 800088c:	dbf1      	blt.n	8000872 <_write+0x12>
	}
	return len;
 800088e:	687b      	ldr	r3, [r7, #4]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <_close>:

int _close(int file)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	return -1;
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c0:	605a      	str	r2, [r3, #4]
	return 0;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <_isatty>:

int _isatty(int file)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	return 1;
 80008d8:	2301      	movs	r3, #1
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b085      	sub	sp, #20
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
	return 0;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000908:	4a14      	ldr	r2, [pc, #80]	; (800095c <_sbrk+0x5c>)
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <_sbrk+0x60>)
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <_sbrk+0x64>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <_sbrk+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	429a      	cmp	r2, r3
 800092e:	d207      	bcs.n	8000940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000930:	f001 fa06 	bl	8001d40 <__errno>
 8000934:	4603      	mov	r3, r0
 8000936:	220c      	movs	r2, #12
 8000938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	e009      	b.n	8000954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <_sbrk+0x64>)
 8000950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20018000 	.word	0x20018000
 8000960:	00000400 	.word	0x00000400
 8000964:	2000008c 	.word	0x2000008c
 8000968:	200000b0 	.word	0x200000b0

0800096c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <SystemInit+0x20>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <SystemInit+0x20>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000994:	f7ff ffea 	bl	800096c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <LoopForever+0x6>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	; (80009d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <LoopForever+0xe>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	; (80009dc <LoopForever+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009be:	f001 f9c5 	bl	8001d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c2:	f7ff fc01 	bl	80001c8 <main>

080009c6 <LoopForever>:

LoopForever:
    b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009d4:	08002820 	.word	0x08002820
  ldr r2, =_sbss
 80009d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009dc:	200000ac 	.word	0x200000ac

080009e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_2_IRQHandler>

080009e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f000 f93d 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f80e 	bl	8000a14 <HAL_InitTick>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	e001      	b.n	8000a08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a04:	f7ff fe9c 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_InitTick+0x6c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d023      	beq.n	8000a70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HAL_InitTick+0x70>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_InitTick+0x6c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f949 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10f      	bne.n	8000a6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d809      	bhi.n	8000a64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f913 	bl	8000c82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_InitTick+0x74>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
 8000a62:	e007      	b.n	8000a74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e004      	b.n	8000a74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	e001      	b.n	8000a74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x20>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000098 	.word	0x20000098

08000ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000098 	.word	0x20000098

08000acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	60d3      	str	r3, [r2, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db0b      	blt.n	8000b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <__NVIC_EnableIRQ+0x38>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff29 	bl	8000acc <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff3e 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff8e 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff31 	bl	8000b30 <__NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffa2 	bl	8000c28 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	e17f      	b.n	8001000 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 8171 	beq.w	8000ffa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d005      	beq.n	8000d30 <HAL_GPIO_Init+0x40>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d130      	bne.n	8000d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d66:	2201      	movs	r2, #1
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	f003 0201 	and.w	r2, r3, #1
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d118      	bne.n	8000dd0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000da4:	2201      	movs	r2, #1
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	f003 0201 	and.w	r2, r3, #1
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d017      	beq.n	8000e0c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d123      	bne.n	8000e60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	6939      	ldr	r1, [r7, #16]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80ac 	beq.w	8000ffa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b5f      	ldr	r3, [pc, #380]	; (8001020 <HAL_GPIO_Init+0x330>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	4a5e      	ldr	r2, [pc, #376]	; (8001020 <HAL_GPIO_Init+0x330>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6613      	str	r3, [r2, #96]	; 0x60
 8000eae:	4b5c      	ldr	r3, [pc, #368]	; (8001020 <HAL_GPIO_Init+0x330>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eba:	4a5a      	ldr	r2, [pc, #360]	; (8001024 <HAL_GPIO_Init+0x334>)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x242>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4f      	ldr	r2, [pc, #316]	; (8001028 <HAL_GPIO_Init+0x338>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x23e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4e      	ldr	r2, [pc, #312]	; (800102c <HAL_GPIO_Init+0x33c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x23a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4d      	ldr	r2, [pc, #308]	; (8001030 <HAL_GPIO_Init+0x340>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x236>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4c      	ldr	r2, [pc, #304]	; (8001034 <HAL_GPIO_Init+0x344>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x232>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4b      	ldr	r2, [pc, #300]	; (8001038 <HAL_GPIO_Init+0x348>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x22e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4a      	ldr	r2, [pc, #296]	; (800103c <HAL_GPIO_Init+0x34c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x22a>
 8000f16:	2306      	movs	r3, #6
 8000f18:	e00c      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	e00a      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f1e:	2305      	movs	r3, #5
 8000f20:	e008      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f22:	2304      	movs	r3, #4
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f26:	2303      	movs	r3, #3
 8000f28:	e004      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f32:	2300      	movs	r3, #0
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	f002 0203 	and.w	r2, r2, #3
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	4093      	lsls	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f44:	4937      	ldr	r1, [pc, #220]	; (8001024 <HAL_GPIO_Init+0x334>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f52:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f76:	4a32      	ldr	r2, [pc, #200]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f7c:	4b30      	ldr	r3, [pc, #192]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fa0:	4a27      	ldr	r2, [pc, #156]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fca:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa22 f303 	lsr.w	r3, r2, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	f47f ae78 	bne.w	8000d00 <HAL_GPIO_Init+0x10>
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	371c      	adds	r7, #28
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	40010000 	.word	0x40010000
 8001028:	48000400 	.word	0x48000400
 800102c:	48000800 	.word	0x48000800
 8001030:	48000c00 	.word	0x48000c00
 8001034:	48001000 	.word	0x48001000
 8001038:	48001400 	.word	0x48001400
 800103c:	48001800 	.word	0x48001800
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e001      	b.n	8001066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001090:	e002      	b.n	8001098 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f806 	bl	80010d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40010400 	.word	0x40010400

080010d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_PWREx_GetVoltageRange+0x18>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40007000 	.word	0x40007000

08001108 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001116:	d130      	bne.n	800117a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001124:	d038      	beq.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001130:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001134:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2232      	movs	r2, #50	; 0x32
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800114c:	e002      	b.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3b01      	subs	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001160:	d102      	bne.n	8001168 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f2      	bne.n	800114e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001174:	d110      	bne.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e00f      	b.n	800119a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001186:	d007      	beq.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001190:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001196:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40007000 	.word	0x40007000
 80011ac:	20000000 	.word	0x20000000
 80011b0:	431bde83 	.word	0x431bde83

080011b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e3c6      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c6:	4ba1      	ldr	r3, [pc, #644]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d0:	4b9e      	ldr	r3, [pc, #632]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80e4 	beq.w	80013b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <HAL_RCC_OscConfig+0x4a>
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b0c      	cmp	r3, #12
 80011f2:	f040 808b 	bne.w	800130c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	f040 8087 	bne.w	800130c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011fe:	4b93      	ldr	r3, [pc, #588]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_RCC_OscConfig+0x62>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e39e      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	4b8c      	ldr	r3, [pc, #560]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <HAL_RCC_OscConfig+0x7c>
 8001226:	4b89      	ldr	r3, [pc, #548]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800122e:	e005      	b.n	800123c <HAL_RCC_OscConfig+0x88>
 8001230:	4b86      	ldr	r3, [pc, #536]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800123c:	4293      	cmp	r3, r2
 800123e:	d223      	bcs.n	8001288 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fd1b 	bl	8001c80 <RCC_SetFlashLatencyFromMSIRange>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e37f      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001254:	4b7d      	ldr	r3, [pc, #500]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a7c      	ldr	r2, [pc, #496]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b7a      	ldr	r3, [pc, #488]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4977      	ldr	r1, [pc, #476]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001272:	4b76      	ldr	r3, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	4972      	ldr	r1, [pc, #456]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001282:	4313      	orrs	r3, r2
 8001284:	604b      	str	r3, [r1, #4]
 8001286:	e025      	b.n	80012d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001288:	4b70      	ldr	r3, [pc, #448]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a6f      	ldr	r2, [pc, #444]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b6d      	ldr	r3, [pc, #436]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	496a      	ldr	r1, [pc, #424]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012a6:	4b69      	ldr	r3, [pc, #420]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	4965      	ldr	r1, [pc, #404]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d109      	bne.n	80012d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fcdb 	bl	8001c80 <RCC_SetFlashLatencyFromMSIRange>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e33f      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012d4:	f000 fc48 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b5c      	ldr	r3, [pc, #368]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	495a      	ldr	r1, [pc, #360]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80012e6:	5ccb      	ldrb	r3, [r1, r3]
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	4a58      	ldr	r2, [pc, #352]	; (8001454 <HAL_RCC_OscConfig+0x2a0>)
 80012f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012f4:	4b58      	ldr	r3, [pc, #352]	; (8001458 <HAL_RCC_OscConfig+0x2a4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fb8b 	bl	8000a14 <HAL_InitTick>
 80012fe:	4603      	mov	r3, r0
 8001300:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d052      	beq.n	80013ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	e323      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d032      	beq.n	800137a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001314:	4b4d      	ldr	r3, [pc, #308]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a4c      	ldr	r2, [pc, #304]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001320:	f7ff fbc8 	bl	8000ab4 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001328:	f7ff fbc4 	bl	8000ab4 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e30c      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800133a:	4b44      	ldr	r3, [pc, #272]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001346:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a40      	ldr	r2, [pc, #256]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	493b      	ldr	r1, [pc, #236]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	4936      	ldr	r1, [pc, #216]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
 8001378:	e01a      	b.n	80013b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a33      	ldr	r2, [pc, #204]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001386:	f7ff fb95 	bl	8000ab4 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800138e:	f7ff fb91 	bl	8000ab4 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e2d9      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x1da>
 80013ac:	e000      	b.n	80013b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d074      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d005      	beq.n	80013ce <HAL_RCC_OscConfig+0x21a>
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	2b0c      	cmp	r3, #12
 80013c6:	d10e      	bne.n	80013e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d10b      	bne.n	80013e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d064      	beq.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d160      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e2b6      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x24a>
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a15      	ldr	r2, [pc, #84]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80013f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e01d      	b.n	800143a <HAL_RCC_OscConfig+0x286>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001406:	d10c      	bne.n	8001422 <HAL_RCC_OscConfig+0x26e>
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800140e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800141a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e00b      	b.n	800143a <HAL_RCC_OscConfig+0x286>
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a06      	ldr	r2, [pc, #24]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d01c      	beq.n	800147c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fb37 	bl	8000ab4 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001448:	e011      	b.n	800146e <HAL_RCC_OscConfig+0x2ba>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	08002774 	.word	0x08002774
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fb2a 	bl	8000ab4 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e272      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146e:	4baf      	ldr	r3, [pc, #700]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x2a8>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fb1a 	bl	8000ab4 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fb16 	bl	8000ab4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e25e      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001496:	4ba5      	ldr	r3, [pc, #660]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x2d0>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d060      	beq.n	8001574 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_OscConfig+0x310>
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d119      	bne.n	80014f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d116      	bne.n	80014f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c4:	4b99      	ldr	r3, [pc, #612]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_OscConfig+0x328>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e23b      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b93      	ldr	r3, [pc, #588]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	4990      	ldr	r1, [pc, #576]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f0:	e040      	b.n	8001574 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d023      	beq.n	8001542 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fa:	4b8c      	ldr	r3, [pc, #560]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a8b      	ldr	r2, [pc, #556]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001506:	f7ff fad5 	bl	8000ab4 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150e:	f7ff fad1 	bl	8000ab4 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e219      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001520:	4b82      	ldr	r3, [pc, #520]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152c:	4b7f      	ldr	r3, [pc, #508]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	497c      	ldr	r1, [pc, #496]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
 8001540:	e018      	b.n	8001574 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001542:	4b7a      	ldr	r3, [pc, #488]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a79      	ldr	r2, [pc, #484]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fab1 	bl	8000ab4 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff faad 	bl	8000ab4 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e1f5      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001568:	4b70      	ldr	r3, [pc, #448]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d03c      	beq.n	80015fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d01c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001588:	4b68      	ldr	r3, [pc, #416]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158e:	4a67      	ldr	r2, [pc, #412]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001598:	f7ff fa8c 	bl	8000ab4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff fa88 	bl	8000ab4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1d0      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015b2:	4b5e      	ldr	r3, [pc, #376]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80015b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0ef      	beq.n	80015a0 <HAL_RCC_OscConfig+0x3ec>
 80015c0:	e01b      	b.n	80015fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c2:	4b5a      	ldr	r3, [pc, #360]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80015c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c8:	4a58      	ldr	r2, [pc, #352]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d2:	f7ff fa6f 	bl	8000ab4 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff fa6b 	bl	8000ab4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1b3      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ec:	4b4f      	ldr	r3, [pc, #316]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ef      	bne.n	80015da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80a6 	beq.w	8001754 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800160c:	4b47      	ldr	r3, [pc, #284]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10d      	bne.n	8001634 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	4b44      	ldr	r3, [pc, #272]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	4a43      	ldr	r2, [pc, #268]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001622:	6593      	str	r3, [r2, #88]	; 0x58
 8001624:	4b41      	ldr	r3, [pc, #260]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001630:	2301      	movs	r3, #1
 8001632:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001634:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_OscConfig+0x57c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d118      	bne.n	8001672 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001640:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_RCC_OscConfig+0x57c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a3a      	ldr	r2, [pc, #232]	; (8001730 <HAL_RCC_OscConfig+0x57c>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164c:	f7ff fa32 	bl	8000ab4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff fa2e 	bl	8000ab4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e176      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_RCC_OscConfig+0x57c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_RCC_OscConfig+0x4d8>
 800167a:	4b2c      	ldr	r3, [pc, #176]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800167c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001680:	4a2a      	ldr	r2, [pc, #168]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168a:	e024      	b.n	80016d6 <HAL_RCC_OscConfig+0x522>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d110      	bne.n	80016b6 <HAL_RCC_OscConfig+0x502>
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169a:	4a24      	ldr	r2, [pc, #144]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016aa:	4a20      	ldr	r2, [pc, #128]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b4:	e00f      	b.n	80016d6 <HAL_RCC_OscConfig+0x522>
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d016      	beq.n	800170c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff f9e9 	bl	8000ab4 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff f9e5 	bl	8000ab4 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e12b      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0ed      	beq.n	80016e6 <HAL_RCC_OscConfig+0x532>
 800170a:	e01a      	b.n	8001742 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7ff f9d2 	bl	8000ab4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001712:	e00f      	b.n	8001734 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff f9ce 	bl	8000ab4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d906      	bls.n	8001734 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e114      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001734:	4b89      	ldr	r3, [pc, #548]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1e8      	bne.n	8001714 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001742:	7ffb      	ldrb	r3, [r7, #31]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b84      	ldr	r3, [pc, #528]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	4a83      	ldr	r2, [pc, #524]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80fa 	beq.w	8001952 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	2b02      	cmp	r3, #2
 8001764:	f040 80d0 	bne.w	8001908 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001768:	4b7c      	ldr	r3, [pc, #496]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	429a      	cmp	r2, r3
 800177a:	d130      	bne.n	80017de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	3b01      	subs	r3, #1
 8001788:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d127      	bne.n	80017de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001798:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d11f      	bne.n	80017de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017a8:	2a07      	cmp	r2, #7
 80017aa:	bf14      	ite	ne
 80017ac:	2201      	movne	r2, #1
 80017ae:	2200      	moveq	r2, #0
 80017b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d113      	bne.n	80017de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	3b01      	subs	r3, #1
 80017c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d109      	bne.n	80017de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	3b01      	subs	r3, #1
 80017d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d06e      	beq.n	80018bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b0c      	cmp	r3, #12
 80017e2:	d069      	beq.n	80018b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017e4:	4b5d      	ldr	r3, [pc, #372]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d105      	bne.n	80017fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017f0:	4b5a      	ldr	r3, [pc, #360]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0a9      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001800:	4b56      	ldr	r3, [pc, #344]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a55      	ldr	r2, [pc, #340]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800180a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800180c:	f7ff f952 	bl	8000ab4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff f94e 	bl	8000ab4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e096      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001826:	4b4d      	ldr	r3, [pc, #308]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001832:	4b4a      	ldr	r3, [pc, #296]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCC_OscConfig+0x7ac>)
 8001838:	4013      	ands	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001842:	3a01      	subs	r2, #1
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	4311      	orrs	r1, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800184c:	0212      	lsls	r2, r2, #8
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001854:	0852      	lsrs	r2, r2, #1
 8001856:	3a01      	subs	r2, #1
 8001858:	0552      	lsls	r2, r2, #21
 800185a:	4311      	orrs	r1, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001860:	0852      	lsrs	r2, r2, #1
 8001862:	3a01      	subs	r2, #1
 8001864:	0652      	lsls	r2, r2, #25
 8001866:	4311      	orrs	r1, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800186c:	0912      	lsrs	r2, r2, #4
 800186e:	0452      	lsls	r2, r2, #17
 8001870:	430a      	orrs	r2, r1
 8001872:	493a      	ldr	r1, [pc, #232]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001878:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a37      	ldr	r2, [pc, #220]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001884:	4b35      	ldr	r3, [pc, #212]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a34      	ldr	r2, [pc, #208]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001890:	f7ff f910 	bl	8000ab4 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f90c 	bl	8000ab4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e054      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	4b2c      	ldr	r3, [pc, #176]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b6:	e04c      	b.n	8001952 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e04b      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d144      	bne.n	8001952 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a23      	ldr	r2, [pc, #140]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4a20      	ldr	r2, [pc, #128]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018e0:	f7ff f8e8 	bl	8000ab4 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff f8e4 	bl	8000ab4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e02c      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x734>
 8001906:	e024      	b.n	8001952 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d01f      	beq.n	800194e <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff f8cb 	bl	8000ab4 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff f8c7 	bl	8000ab4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e00f      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	4905      	ldr	r1, [pc, #20]	; (800195c <HAL_RCC_OscConfig+0x7a8>)
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_RCC_OscConfig+0x7b0>)
 8001948:	4013      	ands	r3, r2
 800194a:	60cb      	str	r3, [r1, #12]
 800194c:	e001      	b.n	8001952 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	f99d808c 	.word	0xf99d808c
 8001964:	feeefffc 	.word	0xfeeefffc

08001968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0e7      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800197c:	4b75      	ldr	r3, [pc, #468]	; (8001b54 <HAL_RCC_ClockConfig+0x1ec>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d910      	bls.n	80019ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b72      	ldr	r3, [pc, #456]	; (8001b54 <HAL_RCC_ClockConfig+0x1ec>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 0207 	bic.w	r2, r3, #7
 8001992:	4970      	ldr	r1, [pc, #448]	; (8001b54 <HAL_RCC_ClockConfig+0x1ec>)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b6e      	ldr	r3, [pc, #440]	; (8001b54 <HAL_RCC_ClockConfig+0x1ec>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0cf      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d010      	beq.n	80019da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d908      	bls.n	80019da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b63      	ldr	r3, [pc, #396]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4960      	ldr	r1, [pc, #384]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d04c      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	4b5a      	ldr	r3, [pc, #360]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d121      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0a6      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a06:	4b54      	ldr	r3, [pc, #336]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d115      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e09a      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e08e      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2e:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e086      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4943      	ldr	r1, [pc, #268]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a50:	f7ff f830 	bl	8000ab4 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff f82c 	bl	8000ab4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e06e      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d010      	beq.n	8001aae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d208      	bcs.n	8001aae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	492b      	ldr	r1, [pc, #172]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d210      	bcs.n	8001ade <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_RCC_ClockConfig+0x1ec>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 0207 	bic.w	r2, r3, #7
 8001ac4:	4923      	ldr	r1, [pc, #140]	; (8001b54 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_RCC_ClockConfig+0x1ec>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e036      	b.n	8001b4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d008      	beq.n	8001afc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	4918      	ldr	r1, [pc, #96]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d009      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4910      	ldr	r1, [pc, #64]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b1c:	f000 f824 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	490b      	ldr	r1, [pc, #44]	; (8001b5c <HAL_RCC_ClockConfig+0x1f4>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
 8001b38:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x1fc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe ff67 	bl	8000a14 <HAL_InitTick>
 8001b46:	4603      	mov	r3, r0
 8001b48:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08002774 	.word	0x08002774
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b76:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b80:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x34>
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d121      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d11e      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b9c:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d107      	bne.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ba8:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e005      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bc4:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	e004      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d134      	bne.n	8001c60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d003      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0xac>
 8001c0c:	e005      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c10:	617b      	str	r3, [r7, #20]
      break;
 8001c12:	e005      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c16:	617b      	str	r3, [r7, #20]
      break;
 8001c18:	e002      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	617b      	str	r3, [r7, #20]
      break;
 8001c1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	fb02 f203 	mul.w	r2, r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	0e5b      	lsrs	r3, r3, #25
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	3301      	adds	r3, #1
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c60:	69bb      	ldr	r3, [r7, #24]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	08002784 	.word	0x08002784
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	007a1200 	.word	0x007a1200

08001c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c98:	f7ff fa28 	bl	80010ec <HAL_PWREx_GetVoltageRange>
 8001c9c:	6178      	str	r0, [r7, #20]
 8001c9e:	e014      	b.n	8001cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	4a24      	ldr	r2, [pc, #144]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001caa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cb8:	f7ff fa18 	bl	80010ec <HAL_PWREx_GetVoltageRange>
 8001cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd0:	d10b      	bne.n	8001cea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b80      	cmp	r3, #128	; 0x80
 8001cd6:	d919      	bls.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2ba0      	cmp	r3, #160	; 0xa0
 8001cdc:	d902      	bls.n	8001ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cde:	2302      	movs	r3, #2
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	e013      	b.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	e010      	b.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b80      	cmp	r3, #128	; 0x80
 8001cee:	d902      	bls.n	8001cf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	e00a      	b.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b80      	cmp	r3, #128	; 0x80
 8001cfa:	d102      	bne.n	8001d02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e004      	b.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b70      	cmp	r3, #112	; 0x70
 8001d06:	d101      	bne.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d08:	2301      	movs	r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 0207 	bic.w	r2, r3, #7
 8001d14:	4909      	ldr	r1, [pc, #36]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40022000 	.word	0x40022000

08001d40 <__errno>:
 8001d40:	4b01      	ldr	r3, [pc, #4]	; (8001d48 <__errno+0x8>)
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	2000000c 	.word	0x2000000c

08001d4c <__libc_init_array>:
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	4d0d      	ldr	r5, [pc, #52]	; (8001d84 <__libc_init_array+0x38>)
 8001d50:	4c0d      	ldr	r4, [pc, #52]	; (8001d88 <__libc_init_array+0x3c>)
 8001d52:	1b64      	subs	r4, r4, r5
 8001d54:	10a4      	asrs	r4, r4, #2
 8001d56:	2600      	movs	r6, #0
 8001d58:	42a6      	cmp	r6, r4
 8001d5a:	d109      	bne.n	8001d70 <__libc_init_array+0x24>
 8001d5c:	4d0b      	ldr	r5, [pc, #44]	; (8001d8c <__libc_init_array+0x40>)
 8001d5e:	4c0c      	ldr	r4, [pc, #48]	; (8001d90 <__libc_init_array+0x44>)
 8001d60:	f000 fce6 	bl	8002730 <_init>
 8001d64:	1b64      	subs	r4, r4, r5
 8001d66:	10a4      	asrs	r4, r4, #2
 8001d68:	2600      	movs	r6, #0
 8001d6a:	42a6      	cmp	r6, r4
 8001d6c:	d105      	bne.n	8001d7a <__libc_init_array+0x2e>
 8001d6e:	bd70      	pop	{r4, r5, r6, pc}
 8001d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d74:	4798      	blx	r3
 8001d76:	3601      	adds	r6, #1
 8001d78:	e7ee      	b.n	8001d58 <__libc_init_array+0xc>
 8001d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d7e:	4798      	blx	r3
 8001d80:	3601      	adds	r6, #1
 8001d82:	e7f2      	b.n	8001d6a <__libc_init_array+0x1e>
 8001d84:	08002818 	.word	0x08002818
 8001d88:	08002818 	.word	0x08002818
 8001d8c:	08002818 	.word	0x08002818
 8001d90:	0800281c 	.word	0x0800281c

08001d94 <memset>:
 8001d94:	4402      	add	r2, r0
 8001d96:	4603      	mov	r3, r0
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d100      	bne.n	8001d9e <memset+0xa>
 8001d9c:	4770      	bx	lr
 8001d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001da2:	e7f9      	b.n	8001d98 <memset+0x4>

08001da4 <_puts_r>:
 8001da4:	b570      	push	{r4, r5, r6, lr}
 8001da6:	460e      	mov	r6, r1
 8001da8:	4605      	mov	r5, r0
 8001daa:	b118      	cbz	r0, 8001db4 <_puts_r+0x10>
 8001dac:	6983      	ldr	r3, [r0, #24]
 8001dae:	b90b      	cbnz	r3, 8001db4 <_puts_r+0x10>
 8001db0:	f000 fa48 	bl	8002244 <__sinit>
 8001db4:	69ab      	ldr	r3, [r5, #24]
 8001db6:	68ac      	ldr	r4, [r5, #8]
 8001db8:	b913      	cbnz	r3, 8001dc0 <_puts_r+0x1c>
 8001dba:	4628      	mov	r0, r5
 8001dbc:	f000 fa42 	bl	8002244 <__sinit>
 8001dc0:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <_puts_r+0xd0>)
 8001dc2:	429c      	cmp	r4, r3
 8001dc4:	d120      	bne.n	8001e08 <_puts_r+0x64>
 8001dc6:	686c      	ldr	r4, [r5, #4]
 8001dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dca:	07db      	lsls	r3, r3, #31
 8001dcc:	d405      	bmi.n	8001dda <_puts_r+0x36>
 8001dce:	89a3      	ldrh	r3, [r4, #12]
 8001dd0:	0598      	lsls	r0, r3, #22
 8001dd2:	d402      	bmi.n	8001dda <_puts_r+0x36>
 8001dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dd6:	f000 fad3 	bl	8002380 <__retarget_lock_acquire_recursive>
 8001dda:	89a3      	ldrh	r3, [r4, #12]
 8001ddc:	0719      	lsls	r1, r3, #28
 8001dde:	d51d      	bpl.n	8001e1c <_puts_r+0x78>
 8001de0:	6923      	ldr	r3, [r4, #16]
 8001de2:	b1db      	cbz	r3, 8001e1c <_puts_r+0x78>
 8001de4:	3e01      	subs	r6, #1
 8001de6:	68a3      	ldr	r3, [r4, #8]
 8001de8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001dec:	3b01      	subs	r3, #1
 8001dee:	60a3      	str	r3, [r4, #8]
 8001df0:	bb39      	cbnz	r1, 8001e42 <_puts_r+0x9e>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	da38      	bge.n	8001e68 <_puts_r+0xc4>
 8001df6:	4622      	mov	r2, r4
 8001df8:	210a      	movs	r1, #10
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	f000 f848 	bl	8001e90 <__swbuf_r>
 8001e00:	3001      	adds	r0, #1
 8001e02:	d011      	beq.n	8001e28 <_puts_r+0x84>
 8001e04:	250a      	movs	r5, #10
 8001e06:	e011      	b.n	8001e2c <_puts_r+0x88>
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <_puts_r+0xd4>)
 8001e0a:	429c      	cmp	r4, r3
 8001e0c:	d101      	bne.n	8001e12 <_puts_r+0x6e>
 8001e0e:	68ac      	ldr	r4, [r5, #8]
 8001e10:	e7da      	b.n	8001dc8 <_puts_r+0x24>
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <_puts_r+0xd8>)
 8001e14:	429c      	cmp	r4, r3
 8001e16:	bf08      	it	eq
 8001e18:	68ec      	ldreq	r4, [r5, #12]
 8001e1a:	e7d5      	b.n	8001dc8 <_puts_r+0x24>
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f000 f888 	bl	8001f34 <__swsetup_r>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d0dd      	beq.n	8001de4 <_puts_r+0x40>
 8001e28:	f04f 35ff 	mov.w	r5, #4294967295
 8001e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e2e:	07da      	lsls	r2, r3, #31
 8001e30:	d405      	bmi.n	8001e3e <_puts_r+0x9a>
 8001e32:	89a3      	ldrh	r3, [r4, #12]
 8001e34:	059b      	lsls	r3, r3, #22
 8001e36:	d402      	bmi.n	8001e3e <_puts_r+0x9a>
 8001e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e3a:	f000 faa2 	bl	8002382 <__retarget_lock_release_recursive>
 8001e3e:	4628      	mov	r0, r5
 8001e40:	bd70      	pop	{r4, r5, r6, pc}
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	da04      	bge.n	8001e50 <_puts_r+0xac>
 8001e46:	69a2      	ldr	r2, [r4, #24]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dc06      	bgt.n	8001e5a <_puts_r+0xb6>
 8001e4c:	290a      	cmp	r1, #10
 8001e4e:	d004      	beq.n	8001e5a <_puts_r+0xb6>
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	6022      	str	r2, [r4, #0]
 8001e56:	7019      	strb	r1, [r3, #0]
 8001e58:	e7c5      	b.n	8001de6 <_puts_r+0x42>
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	f000 f817 	bl	8001e90 <__swbuf_r>
 8001e62:	3001      	adds	r0, #1
 8001e64:	d1bf      	bne.n	8001de6 <_puts_r+0x42>
 8001e66:	e7df      	b.n	8001e28 <_puts_r+0x84>
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	250a      	movs	r5, #10
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	6022      	str	r2, [r4, #0]
 8001e70:	701d      	strb	r5, [r3, #0]
 8001e72:	e7db      	b.n	8001e2c <_puts_r+0x88>
 8001e74:	080027d8 	.word	0x080027d8
 8001e78:	080027f8 	.word	0x080027f8
 8001e7c:	080027b8 	.word	0x080027b8

08001e80 <puts>:
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <puts+0xc>)
 8001e82:	4601      	mov	r1, r0
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f7ff bf8d 	b.w	8001da4 <_puts_r>
 8001e8a:	bf00      	nop
 8001e8c:	2000000c 	.word	0x2000000c

08001e90 <__swbuf_r>:
 8001e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e92:	460e      	mov	r6, r1
 8001e94:	4614      	mov	r4, r2
 8001e96:	4605      	mov	r5, r0
 8001e98:	b118      	cbz	r0, 8001ea2 <__swbuf_r+0x12>
 8001e9a:	6983      	ldr	r3, [r0, #24]
 8001e9c:	b90b      	cbnz	r3, 8001ea2 <__swbuf_r+0x12>
 8001e9e:	f000 f9d1 	bl	8002244 <__sinit>
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <__swbuf_r+0x98>)
 8001ea4:	429c      	cmp	r4, r3
 8001ea6:	d12b      	bne.n	8001f00 <__swbuf_r+0x70>
 8001ea8:	686c      	ldr	r4, [r5, #4]
 8001eaa:	69a3      	ldr	r3, [r4, #24]
 8001eac:	60a3      	str	r3, [r4, #8]
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	071a      	lsls	r2, r3, #28
 8001eb2:	d52f      	bpl.n	8001f14 <__swbuf_r+0x84>
 8001eb4:	6923      	ldr	r3, [r4, #16]
 8001eb6:	b36b      	cbz	r3, 8001f14 <__swbuf_r+0x84>
 8001eb8:	6923      	ldr	r3, [r4, #16]
 8001eba:	6820      	ldr	r0, [r4, #0]
 8001ebc:	1ac0      	subs	r0, r0, r3
 8001ebe:	6963      	ldr	r3, [r4, #20]
 8001ec0:	b2f6      	uxtb	r6, r6
 8001ec2:	4283      	cmp	r3, r0
 8001ec4:	4637      	mov	r7, r6
 8001ec6:	dc04      	bgt.n	8001ed2 <__swbuf_r+0x42>
 8001ec8:	4621      	mov	r1, r4
 8001eca:	4628      	mov	r0, r5
 8001ecc:	f000 f926 	bl	800211c <_fflush_r>
 8001ed0:	bb30      	cbnz	r0, 8001f20 <__swbuf_r+0x90>
 8001ed2:	68a3      	ldr	r3, [r4, #8]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60a3      	str	r3, [r4, #8]
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	6022      	str	r2, [r4, #0]
 8001ede:	701e      	strb	r6, [r3, #0]
 8001ee0:	6963      	ldr	r3, [r4, #20]
 8001ee2:	3001      	adds	r0, #1
 8001ee4:	4283      	cmp	r3, r0
 8001ee6:	d004      	beq.n	8001ef2 <__swbuf_r+0x62>
 8001ee8:	89a3      	ldrh	r3, [r4, #12]
 8001eea:	07db      	lsls	r3, r3, #31
 8001eec:	d506      	bpl.n	8001efc <__swbuf_r+0x6c>
 8001eee:	2e0a      	cmp	r6, #10
 8001ef0:	d104      	bne.n	8001efc <__swbuf_r+0x6c>
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f000 f911 	bl	800211c <_fflush_r>
 8001efa:	b988      	cbnz	r0, 8001f20 <__swbuf_r+0x90>
 8001efc:	4638      	mov	r0, r7
 8001efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <__swbuf_r+0x9c>)
 8001f02:	429c      	cmp	r4, r3
 8001f04:	d101      	bne.n	8001f0a <__swbuf_r+0x7a>
 8001f06:	68ac      	ldr	r4, [r5, #8]
 8001f08:	e7cf      	b.n	8001eaa <__swbuf_r+0x1a>
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <__swbuf_r+0xa0>)
 8001f0c:	429c      	cmp	r4, r3
 8001f0e:	bf08      	it	eq
 8001f10:	68ec      	ldreq	r4, [r5, #12]
 8001f12:	e7ca      	b.n	8001eaa <__swbuf_r+0x1a>
 8001f14:	4621      	mov	r1, r4
 8001f16:	4628      	mov	r0, r5
 8001f18:	f000 f80c 	bl	8001f34 <__swsetup_r>
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d0cb      	beq.n	8001eb8 <__swbuf_r+0x28>
 8001f20:	f04f 37ff 	mov.w	r7, #4294967295
 8001f24:	e7ea      	b.n	8001efc <__swbuf_r+0x6c>
 8001f26:	bf00      	nop
 8001f28:	080027d8 	.word	0x080027d8
 8001f2c:	080027f8 	.word	0x080027f8
 8001f30:	080027b8 	.word	0x080027b8

08001f34 <__swsetup_r>:
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <__swsetup_r+0xcc>)
 8001f36:	b570      	push	{r4, r5, r6, lr}
 8001f38:	681d      	ldr	r5, [r3, #0]
 8001f3a:	4606      	mov	r6, r0
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	b125      	cbz	r5, 8001f4a <__swsetup_r+0x16>
 8001f40:	69ab      	ldr	r3, [r5, #24]
 8001f42:	b913      	cbnz	r3, 8001f4a <__swsetup_r+0x16>
 8001f44:	4628      	mov	r0, r5
 8001f46:	f000 f97d 	bl	8002244 <__sinit>
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <__swsetup_r+0xd0>)
 8001f4c:	429c      	cmp	r4, r3
 8001f4e:	d10f      	bne.n	8001f70 <__swsetup_r+0x3c>
 8001f50:	686c      	ldr	r4, [r5, #4]
 8001f52:	89a3      	ldrh	r3, [r4, #12]
 8001f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f58:	0719      	lsls	r1, r3, #28
 8001f5a:	d42c      	bmi.n	8001fb6 <__swsetup_r+0x82>
 8001f5c:	06dd      	lsls	r5, r3, #27
 8001f5e:	d411      	bmi.n	8001f84 <__swsetup_r+0x50>
 8001f60:	2309      	movs	r3, #9
 8001f62:	6033      	str	r3, [r6, #0]
 8001f64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001f68:	81a3      	strh	r3, [r4, #12]
 8001f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6e:	e03e      	b.n	8001fee <__swsetup_r+0xba>
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <__swsetup_r+0xd4>)
 8001f72:	429c      	cmp	r4, r3
 8001f74:	d101      	bne.n	8001f7a <__swsetup_r+0x46>
 8001f76:	68ac      	ldr	r4, [r5, #8]
 8001f78:	e7eb      	b.n	8001f52 <__swsetup_r+0x1e>
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <__swsetup_r+0xd8>)
 8001f7c:	429c      	cmp	r4, r3
 8001f7e:	bf08      	it	eq
 8001f80:	68ec      	ldreq	r4, [r5, #12]
 8001f82:	e7e6      	b.n	8001f52 <__swsetup_r+0x1e>
 8001f84:	0758      	lsls	r0, r3, #29
 8001f86:	d512      	bpl.n	8001fae <__swsetup_r+0x7a>
 8001f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f8a:	b141      	cbz	r1, 8001f9e <__swsetup_r+0x6a>
 8001f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f90:	4299      	cmp	r1, r3
 8001f92:	d002      	beq.n	8001f9a <__swsetup_r+0x66>
 8001f94:	4630      	mov	r0, r6
 8001f96:	f000 fa59 	bl	800244c <_free_r>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	6363      	str	r3, [r4, #52]	; 0x34
 8001f9e:	89a3      	ldrh	r3, [r4, #12]
 8001fa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001fa4:	81a3      	strh	r3, [r4, #12]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	6063      	str	r3, [r4, #4]
 8001faa:	6923      	ldr	r3, [r4, #16]
 8001fac:	6023      	str	r3, [r4, #0]
 8001fae:	89a3      	ldrh	r3, [r4, #12]
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	81a3      	strh	r3, [r4, #12]
 8001fb6:	6923      	ldr	r3, [r4, #16]
 8001fb8:	b94b      	cbnz	r3, 8001fce <__swsetup_r+0x9a>
 8001fba:	89a3      	ldrh	r3, [r4, #12]
 8001fbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc4:	d003      	beq.n	8001fce <__swsetup_r+0x9a>
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	4630      	mov	r0, r6
 8001fca:	f000 f9ff 	bl	80023cc <__smakebuf_r>
 8001fce:	89a0      	ldrh	r0, [r4, #12]
 8001fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001fd4:	f010 0301 	ands.w	r3, r0, #1
 8001fd8:	d00a      	beq.n	8001ff0 <__swsetup_r+0xbc>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60a3      	str	r3, [r4, #8]
 8001fde:	6963      	ldr	r3, [r4, #20]
 8001fe0:	425b      	negs	r3, r3
 8001fe2:	61a3      	str	r3, [r4, #24]
 8001fe4:	6923      	ldr	r3, [r4, #16]
 8001fe6:	b943      	cbnz	r3, 8001ffa <__swsetup_r+0xc6>
 8001fe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001fec:	d1ba      	bne.n	8001f64 <__swsetup_r+0x30>
 8001fee:	bd70      	pop	{r4, r5, r6, pc}
 8001ff0:	0781      	lsls	r1, r0, #30
 8001ff2:	bf58      	it	pl
 8001ff4:	6963      	ldrpl	r3, [r4, #20]
 8001ff6:	60a3      	str	r3, [r4, #8]
 8001ff8:	e7f4      	b.n	8001fe4 <__swsetup_r+0xb0>
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	e7f7      	b.n	8001fee <__swsetup_r+0xba>
 8001ffe:	bf00      	nop
 8002000:	2000000c 	.word	0x2000000c
 8002004:	080027d8 	.word	0x080027d8
 8002008:	080027f8 	.word	0x080027f8
 800200c:	080027b8 	.word	0x080027b8

08002010 <__sflush_r>:
 8002010:	898a      	ldrh	r2, [r1, #12]
 8002012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002016:	4605      	mov	r5, r0
 8002018:	0710      	lsls	r0, r2, #28
 800201a:	460c      	mov	r4, r1
 800201c:	d458      	bmi.n	80020d0 <__sflush_r+0xc0>
 800201e:	684b      	ldr	r3, [r1, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	dc05      	bgt.n	8002030 <__sflush_r+0x20>
 8002024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	dc02      	bgt.n	8002030 <__sflush_r+0x20>
 800202a:	2000      	movs	r0, #0
 800202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002032:	2e00      	cmp	r6, #0
 8002034:	d0f9      	beq.n	800202a <__sflush_r+0x1a>
 8002036:	2300      	movs	r3, #0
 8002038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800203c:	682f      	ldr	r7, [r5, #0]
 800203e:	602b      	str	r3, [r5, #0]
 8002040:	d032      	beq.n	80020a8 <__sflush_r+0x98>
 8002042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002044:	89a3      	ldrh	r3, [r4, #12]
 8002046:	075a      	lsls	r2, r3, #29
 8002048:	d505      	bpl.n	8002056 <__sflush_r+0x46>
 800204a:	6863      	ldr	r3, [r4, #4]
 800204c:	1ac0      	subs	r0, r0, r3
 800204e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002050:	b10b      	cbz	r3, 8002056 <__sflush_r+0x46>
 8002052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002054:	1ac0      	subs	r0, r0, r3
 8002056:	2300      	movs	r3, #0
 8002058:	4602      	mov	r2, r0
 800205a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800205c:	6a21      	ldr	r1, [r4, #32]
 800205e:	4628      	mov	r0, r5
 8002060:	47b0      	blx	r6
 8002062:	1c43      	adds	r3, r0, #1
 8002064:	89a3      	ldrh	r3, [r4, #12]
 8002066:	d106      	bne.n	8002076 <__sflush_r+0x66>
 8002068:	6829      	ldr	r1, [r5, #0]
 800206a:	291d      	cmp	r1, #29
 800206c:	d82c      	bhi.n	80020c8 <__sflush_r+0xb8>
 800206e:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <__sflush_r+0x108>)
 8002070:	40ca      	lsrs	r2, r1
 8002072:	07d6      	lsls	r6, r2, #31
 8002074:	d528      	bpl.n	80020c8 <__sflush_r+0xb8>
 8002076:	2200      	movs	r2, #0
 8002078:	6062      	str	r2, [r4, #4]
 800207a:	04d9      	lsls	r1, r3, #19
 800207c:	6922      	ldr	r2, [r4, #16]
 800207e:	6022      	str	r2, [r4, #0]
 8002080:	d504      	bpl.n	800208c <__sflush_r+0x7c>
 8002082:	1c42      	adds	r2, r0, #1
 8002084:	d101      	bne.n	800208a <__sflush_r+0x7a>
 8002086:	682b      	ldr	r3, [r5, #0]
 8002088:	b903      	cbnz	r3, 800208c <__sflush_r+0x7c>
 800208a:	6560      	str	r0, [r4, #84]	; 0x54
 800208c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800208e:	602f      	str	r7, [r5, #0]
 8002090:	2900      	cmp	r1, #0
 8002092:	d0ca      	beq.n	800202a <__sflush_r+0x1a>
 8002094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002098:	4299      	cmp	r1, r3
 800209a:	d002      	beq.n	80020a2 <__sflush_r+0x92>
 800209c:	4628      	mov	r0, r5
 800209e:	f000 f9d5 	bl	800244c <_free_r>
 80020a2:	2000      	movs	r0, #0
 80020a4:	6360      	str	r0, [r4, #52]	; 0x34
 80020a6:	e7c1      	b.n	800202c <__sflush_r+0x1c>
 80020a8:	6a21      	ldr	r1, [r4, #32]
 80020aa:	2301      	movs	r3, #1
 80020ac:	4628      	mov	r0, r5
 80020ae:	47b0      	blx	r6
 80020b0:	1c41      	adds	r1, r0, #1
 80020b2:	d1c7      	bne.n	8002044 <__sflush_r+0x34>
 80020b4:	682b      	ldr	r3, [r5, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0c4      	beq.n	8002044 <__sflush_r+0x34>
 80020ba:	2b1d      	cmp	r3, #29
 80020bc:	d001      	beq.n	80020c2 <__sflush_r+0xb2>
 80020be:	2b16      	cmp	r3, #22
 80020c0:	d101      	bne.n	80020c6 <__sflush_r+0xb6>
 80020c2:	602f      	str	r7, [r5, #0]
 80020c4:	e7b1      	b.n	800202a <__sflush_r+0x1a>
 80020c6:	89a3      	ldrh	r3, [r4, #12]
 80020c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020cc:	81a3      	strh	r3, [r4, #12]
 80020ce:	e7ad      	b.n	800202c <__sflush_r+0x1c>
 80020d0:	690f      	ldr	r7, [r1, #16]
 80020d2:	2f00      	cmp	r7, #0
 80020d4:	d0a9      	beq.n	800202a <__sflush_r+0x1a>
 80020d6:	0793      	lsls	r3, r2, #30
 80020d8:	680e      	ldr	r6, [r1, #0]
 80020da:	bf08      	it	eq
 80020dc:	694b      	ldreq	r3, [r1, #20]
 80020de:	600f      	str	r7, [r1, #0]
 80020e0:	bf18      	it	ne
 80020e2:	2300      	movne	r3, #0
 80020e4:	eba6 0807 	sub.w	r8, r6, r7
 80020e8:	608b      	str	r3, [r1, #8]
 80020ea:	f1b8 0f00 	cmp.w	r8, #0
 80020ee:	dd9c      	ble.n	800202a <__sflush_r+0x1a>
 80020f0:	6a21      	ldr	r1, [r4, #32]
 80020f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020f4:	4643      	mov	r3, r8
 80020f6:	463a      	mov	r2, r7
 80020f8:	4628      	mov	r0, r5
 80020fa:	47b0      	blx	r6
 80020fc:	2800      	cmp	r0, #0
 80020fe:	dc06      	bgt.n	800210e <__sflush_r+0xfe>
 8002100:	89a3      	ldrh	r3, [r4, #12]
 8002102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002106:	81a3      	strh	r3, [r4, #12]
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	e78e      	b.n	800202c <__sflush_r+0x1c>
 800210e:	4407      	add	r7, r0
 8002110:	eba8 0800 	sub.w	r8, r8, r0
 8002114:	e7e9      	b.n	80020ea <__sflush_r+0xda>
 8002116:	bf00      	nop
 8002118:	20400001 	.word	0x20400001

0800211c <_fflush_r>:
 800211c:	b538      	push	{r3, r4, r5, lr}
 800211e:	690b      	ldr	r3, [r1, #16]
 8002120:	4605      	mov	r5, r0
 8002122:	460c      	mov	r4, r1
 8002124:	b913      	cbnz	r3, 800212c <_fflush_r+0x10>
 8002126:	2500      	movs	r5, #0
 8002128:	4628      	mov	r0, r5
 800212a:	bd38      	pop	{r3, r4, r5, pc}
 800212c:	b118      	cbz	r0, 8002136 <_fflush_r+0x1a>
 800212e:	6983      	ldr	r3, [r0, #24]
 8002130:	b90b      	cbnz	r3, 8002136 <_fflush_r+0x1a>
 8002132:	f000 f887 	bl	8002244 <__sinit>
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <_fflush_r+0x6c>)
 8002138:	429c      	cmp	r4, r3
 800213a:	d11b      	bne.n	8002174 <_fflush_r+0x58>
 800213c:	686c      	ldr	r4, [r5, #4]
 800213e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0ef      	beq.n	8002126 <_fflush_r+0xa>
 8002146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002148:	07d0      	lsls	r0, r2, #31
 800214a:	d404      	bmi.n	8002156 <_fflush_r+0x3a>
 800214c:	0599      	lsls	r1, r3, #22
 800214e:	d402      	bmi.n	8002156 <_fflush_r+0x3a>
 8002150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002152:	f000 f915 	bl	8002380 <__retarget_lock_acquire_recursive>
 8002156:	4628      	mov	r0, r5
 8002158:	4621      	mov	r1, r4
 800215a:	f7ff ff59 	bl	8002010 <__sflush_r>
 800215e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002160:	07da      	lsls	r2, r3, #31
 8002162:	4605      	mov	r5, r0
 8002164:	d4e0      	bmi.n	8002128 <_fflush_r+0xc>
 8002166:	89a3      	ldrh	r3, [r4, #12]
 8002168:	059b      	lsls	r3, r3, #22
 800216a:	d4dd      	bmi.n	8002128 <_fflush_r+0xc>
 800216c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800216e:	f000 f908 	bl	8002382 <__retarget_lock_release_recursive>
 8002172:	e7d9      	b.n	8002128 <_fflush_r+0xc>
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <_fflush_r+0x70>)
 8002176:	429c      	cmp	r4, r3
 8002178:	d101      	bne.n	800217e <_fflush_r+0x62>
 800217a:	68ac      	ldr	r4, [r5, #8]
 800217c:	e7df      	b.n	800213e <_fflush_r+0x22>
 800217e:	4b04      	ldr	r3, [pc, #16]	; (8002190 <_fflush_r+0x74>)
 8002180:	429c      	cmp	r4, r3
 8002182:	bf08      	it	eq
 8002184:	68ec      	ldreq	r4, [r5, #12]
 8002186:	e7da      	b.n	800213e <_fflush_r+0x22>
 8002188:	080027d8 	.word	0x080027d8
 800218c:	080027f8 	.word	0x080027f8
 8002190:	080027b8 	.word	0x080027b8

08002194 <std>:
 8002194:	2300      	movs	r3, #0
 8002196:	b510      	push	{r4, lr}
 8002198:	4604      	mov	r4, r0
 800219a:	e9c0 3300 	strd	r3, r3, [r0]
 800219e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021a2:	6083      	str	r3, [r0, #8]
 80021a4:	8181      	strh	r1, [r0, #12]
 80021a6:	6643      	str	r3, [r0, #100]	; 0x64
 80021a8:	81c2      	strh	r2, [r0, #14]
 80021aa:	6183      	str	r3, [r0, #24]
 80021ac:	4619      	mov	r1, r3
 80021ae:	2208      	movs	r2, #8
 80021b0:	305c      	adds	r0, #92	; 0x5c
 80021b2:	f7ff fdef 	bl	8001d94 <memset>
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <std+0x38>)
 80021b8:	6263      	str	r3, [r4, #36]	; 0x24
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <std+0x3c>)
 80021bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <std+0x40>)
 80021c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <std+0x44>)
 80021c4:	6224      	str	r4, [r4, #32]
 80021c6:	6323      	str	r3, [r4, #48]	; 0x30
 80021c8:	bd10      	pop	{r4, pc}
 80021ca:	bf00      	nop
 80021cc:	080025c1 	.word	0x080025c1
 80021d0:	080025e3 	.word	0x080025e3
 80021d4:	0800261b 	.word	0x0800261b
 80021d8:	0800263f 	.word	0x0800263f

080021dc <_cleanup_r>:
 80021dc:	4901      	ldr	r1, [pc, #4]	; (80021e4 <_cleanup_r+0x8>)
 80021de:	f000 b8af 	b.w	8002340 <_fwalk_reent>
 80021e2:	bf00      	nop
 80021e4:	0800211d 	.word	0x0800211d

080021e8 <__sfmoreglue>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	1e4a      	subs	r2, r1, #1
 80021ec:	2568      	movs	r5, #104	; 0x68
 80021ee:	4355      	muls	r5, r2
 80021f0:	460e      	mov	r6, r1
 80021f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80021f6:	f000 f979 	bl	80024ec <_malloc_r>
 80021fa:	4604      	mov	r4, r0
 80021fc:	b140      	cbz	r0, 8002210 <__sfmoreglue+0x28>
 80021fe:	2100      	movs	r1, #0
 8002200:	e9c0 1600 	strd	r1, r6, [r0]
 8002204:	300c      	adds	r0, #12
 8002206:	60a0      	str	r0, [r4, #8]
 8002208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800220c:	f7ff fdc2 	bl	8001d94 <memset>
 8002210:	4620      	mov	r0, r4
 8002212:	bd70      	pop	{r4, r5, r6, pc}

08002214 <__sfp_lock_acquire>:
 8002214:	4801      	ldr	r0, [pc, #4]	; (800221c <__sfp_lock_acquire+0x8>)
 8002216:	f000 b8b3 	b.w	8002380 <__retarget_lock_acquire_recursive>
 800221a:	bf00      	nop
 800221c:	200000a4 	.word	0x200000a4

08002220 <__sfp_lock_release>:
 8002220:	4801      	ldr	r0, [pc, #4]	; (8002228 <__sfp_lock_release+0x8>)
 8002222:	f000 b8ae 	b.w	8002382 <__retarget_lock_release_recursive>
 8002226:	bf00      	nop
 8002228:	200000a4 	.word	0x200000a4

0800222c <__sinit_lock_acquire>:
 800222c:	4801      	ldr	r0, [pc, #4]	; (8002234 <__sinit_lock_acquire+0x8>)
 800222e:	f000 b8a7 	b.w	8002380 <__retarget_lock_acquire_recursive>
 8002232:	bf00      	nop
 8002234:	2000009f 	.word	0x2000009f

08002238 <__sinit_lock_release>:
 8002238:	4801      	ldr	r0, [pc, #4]	; (8002240 <__sinit_lock_release+0x8>)
 800223a:	f000 b8a2 	b.w	8002382 <__retarget_lock_release_recursive>
 800223e:	bf00      	nop
 8002240:	2000009f 	.word	0x2000009f

08002244 <__sinit>:
 8002244:	b510      	push	{r4, lr}
 8002246:	4604      	mov	r4, r0
 8002248:	f7ff fff0 	bl	800222c <__sinit_lock_acquire>
 800224c:	69a3      	ldr	r3, [r4, #24]
 800224e:	b11b      	cbz	r3, 8002258 <__sinit+0x14>
 8002250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002254:	f7ff bff0 	b.w	8002238 <__sinit_lock_release>
 8002258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800225c:	6523      	str	r3, [r4, #80]	; 0x50
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <__sinit+0x68>)
 8002260:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <__sinit+0x6c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	62a2      	str	r2, [r4, #40]	; 0x28
 8002266:	42a3      	cmp	r3, r4
 8002268:	bf04      	itt	eq
 800226a:	2301      	moveq	r3, #1
 800226c:	61a3      	streq	r3, [r4, #24]
 800226e:	4620      	mov	r0, r4
 8002270:	f000 f820 	bl	80022b4 <__sfp>
 8002274:	6060      	str	r0, [r4, #4]
 8002276:	4620      	mov	r0, r4
 8002278:	f000 f81c 	bl	80022b4 <__sfp>
 800227c:	60a0      	str	r0, [r4, #8]
 800227e:	4620      	mov	r0, r4
 8002280:	f000 f818 	bl	80022b4 <__sfp>
 8002284:	2200      	movs	r2, #0
 8002286:	60e0      	str	r0, [r4, #12]
 8002288:	2104      	movs	r1, #4
 800228a:	6860      	ldr	r0, [r4, #4]
 800228c:	f7ff ff82 	bl	8002194 <std>
 8002290:	68a0      	ldr	r0, [r4, #8]
 8002292:	2201      	movs	r2, #1
 8002294:	2109      	movs	r1, #9
 8002296:	f7ff ff7d 	bl	8002194 <std>
 800229a:	68e0      	ldr	r0, [r4, #12]
 800229c:	2202      	movs	r2, #2
 800229e:	2112      	movs	r1, #18
 80022a0:	f7ff ff78 	bl	8002194 <std>
 80022a4:	2301      	movs	r3, #1
 80022a6:	61a3      	str	r3, [r4, #24]
 80022a8:	e7d2      	b.n	8002250 <__sinit+0xc>
 80022aa:	bf00      	nop
 80022ac:	080027b4 	.word	0x080027b4
 80022b0:	080021dd 	.word	0x080021dd

080022b4 <__sfp>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	4607      	mov	r7, r0
 80022b8:	f7ff ffac 	bl	8002214 <__sfp_lock_acquire>
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <__sfp+0x84>)
 80022be:	681e      	ldr	r6, [r3, #0]
 80022c0:	69b3      	ldr	r3, [r6, #24]
 80022c2:	b913      	cbnz	r3, 80022ca <__sfp+0x16>
 80022c4:	4630      	mov	r0, r6
 80022c6:	f7ff ffbd 	bl	8002244 <__sinit>
 80022ca:	3648      	adds	r6, #72	; 0x48
 80022cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	d503      	bpl.n	80022dc <__sfp+0x28>
 80022d4:	6833      	ldr	r3, [r6, #0]
 80022d6:	b30b      	cbz	r3, 800231c <__sfp+0x68>
 80022d8:	6836      	ldr	r6, [r6, #0]
 80022da:	e7f7      	b.n	80022cc <__sfp+0x18>
 80022dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80022e0:	b9d5      	cbnz	r5, 8002318 <__sfp+0x64>
 80022e2:	4b16      	ldr	r3, [pc, #88]	; (800233c <__sfp+0x88>)
 80022e4:	60e3      	str	r3, [r4, #12]
 80022e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80022ea:	6665      	str	r5, [r4, #100]	; 0x64
 80022ec:	f000 f847 	bl	800237e <__retarget_lock_init_recursive>
 80022f0:	f7ff ff96 	bl	8002220 <__sfp_lock_release>
 80022f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80022f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80022fc:	6025      	str	r5, [r4, #0]
 80022fe:	61a5      	str	r5, [r4, #24]
 8002300:	2208      	movs	r2, #8
 8002302:	4629      	mov	r1, r5
 8002304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002308:	f7ff fd44 	bl	8001d94 <memset>
 800230c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002314:	4620      	mov	r0, r4
 8002316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002318:	3468      	adds	r4, #104	; 0x68
 800231a:	e7d9      	b.n	80022d0 <__sfp+0x1c>
 800231c:	2104      	movs	r1, #4
 800231e:	4638      	mov	r0, r7
 8002320:	f7ff ff62 	bl	80021e8 <__sfmoreglue>
 8002324:	4604      	mov	r4, r0
 8002326:	6030      	str	r0, [r6, #0]
 8002328:	2800      	cmp	r0, #0
 800232a:	d1d5      	bne.n	80022d8 <__sfp+0x24>
 800232c:	f7ff ff78 	bl	8002220 <__sfp_lock_release>
 8002330:	230c      	movs	r3, #12
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	e7ee      	b.n	8002314 <__sfp+0x60>
 8002336:	bf00      	nop
 8002338:	080027b4 	.word	0x080027b4
 800233c:	ffff0001 	.word	0xffff0001

08002340 <_fwalk_reent>:
 8002340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002344:	4606      	mov	r6, r0
 8002346:	4688      	mov	r8, r1
 8002348:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800234c:	2700      	movs	r7, #0
 800234e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002352:	f1b9 0901 	subs.w	r9, r9, #1
 8002356:	d505      	bpl.n	8002364 <_fwalk_reent+0x24>
 8002358:	6824      	ldr	r4, [r4, #0]
 800235a:	2c00      	cmp	r4, #0
 800235c:	d1f7      	bne.n	800234e <_fwalk_reent+0xe>
 800235e:	4638      	mov	r0, r7
 8002360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002364:	89ab      	ldrh	r3, [r5, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d907      	bls.n	800237a <_fwalk_reent+0x3a>
 800236a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800236e:	3301      	adds	r3, #1
 8002370:	d003      	beq.n	800237a <_fwalk_reent+0x3a>
 8002372:	4629      	mov	r1, r5
 8002374:	4630      	mov	r0, r6
 8002376:	47c0      	blx	r8
 8002378:	4307      	orrs	r7, r0
 800237a:	3568      	adds	r5, #104	; 0x68
 800237c:	e7e9      	b.n	8002352 <_fwalk_reent+0x12>

0800237e <__retarget_lock_init_recursive>:
 800237e:	4770      	bx	lr

08002380 <__retarget_lock_acquire_recursive>:
 8002380:	4770      	bx	lr

08002382 <__retarget_lock_release_recursive>:
 8002382:	4770      	bx	lr

08002384 <__swhatbuf_r>:
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	460e      	mov	r6, r1
 8002388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800238c:	2900      	cmp	r1, #0
 800238e:	b096      	sub	sp, #88	; 0x58
 8002390:	4614      	mov	r4, r2
 8002392:	461d      	mov	r5, r3
 8002394:	da07      	bge.n	80023a6 <__swhatbuf_r+0x22>
 8002396:	2300      	movs	r3, #0
 8002398:	602b      	str	r3, [r5, #0]
 800239a:	89b3      	ldrh	r3, [r6, #12]
 800239c:	061a      	lsls	r2, r3, #24
 800239e:	d410      	bmi.n	80023c2 <__swhatbuf_r+0x3e>
 80023a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a4:	e00e      	b.n	80023c4 <__swhatbuf_r+0x40>
 80023a6:	466a      	mov	r2, sp
 80023a8:	f000 f970 	bl	800268c <_fstat_r>
 80023ac:	2800      	cmp	r0, #0
 80023ae:	dbf2      	blt.n	8002396 <__swhatbuf_r+0x12>
 80023b0:	9a01      	ldr	r2, [sp, #4]
 80023b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80023b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80023ba:	425a      	negs	r2, r3
 80023bc:	415a      	adcs	r2, r3
 80023be:	602a      	str	r2, [r5, #0]
 80023c0:	e7ee      	b.n	80023a0 <__swhatbuf_r+0x1c>
 80023c2:	2340      	movs	r3, #64	; 0x40
 80023c4:	2000      	movs	r0, #0
 80023c6:	6023      	str	r3, [r4, #0]
 80023c8:	b016      	add	sp, #88	; 0x58
 80023ca:	bd70      	pop	{r4, r5, r6, pc}

080023cc <__smakebuf_r>:
 80023cc:	898b      	ldrh	r3, [r1, #12]
 80023ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023d0:	079d      	lsls	r5, r3, #30
 80023d2:	4606      	mov	r6, r0
 80023d4:	460c      	mov	r4, r1
 80023d6:	d507      	bpl.n	80023e8 <__smakebuf_r+0x1c>
 80023d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80023dc:	6023      	str	r3, [r4, #0]
 80023de:	6123      	str	r3, [r4, #16]
 80023e0:	2301      	movs	r3, #1
 80023e2:	6163      	str	r3, [r4, #20]
 80023e4:	b002      	add	sp, #8
 80023e6:	bd70      	pop	{r4, r5, r6, pc}
 80023e8:	ab01      	add	r3, sp, #4
 80023ea:	466a      	mov	r2, sp
 80023ec:	f7ff ffca 	bl	8002384 <__swhatbuf_r>
 80023f0:	9900      	ldr	r1, [sp, #0]
 80023f2:	4605      	mov	r5, r0
 80023f4:	4630      	mov	r0, r6
 80023f6:	f000 f879 	bl	80024ec <_malloc_r>
 80023fa:	b948      	cbnz	r0, 8002410 <__smakebuf_r+0x44>
 80023fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002400:	059a      	lsls	r2, r3, #22
 8002402:	d4ef      	bmi.n	80023e4 <__smakebuf_r+0x18>
 8002404:	f023 0303 	bic.w	r3, r3, #3
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	81a3      	strh	r3, [r4, #12]
 800240e:	e7e3      	b.n	80023d8 <__smakebuf_r+0xc>
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <__smakebuf_r+0x7c>)
 8002412:	62b3      	str	r3, [r6, #40]	; 0x28
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	6020      	str	r0, [r4, #0]
 8002418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241c:	81a3      	strh	r3, [r4, #12]
 800241e:	9b00      	ldr	r3, [sp, #0]
 8002420:	6163      	str	r3, [r4, #20]
 8002422:	9b01      	ldr	r3, [sp, #4]
 8002424:	6120      	str	r0, [r4, #16]
 8002426:	b15b      	cbz	r3, 8002440 <__smakebuf_r+0x74>
 8002428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800242c:	4630      	mov	r0, r6
 800242e:	f000 f93f 	bl	80026b0 <_isatty_r>
 8002432:	b128      	cbz	r0, 8002440 <__smakebuf_r+0x74>
 8002434:	89a3      	ldrh	r3, [r4, #12]
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	81a3      	strh	r3, [r4, #12]
 8002440:	89a0      	ldrh	r0, [r4, #12]
 8002442:	4305      	orrs	r5, r0
 8002444:	81a5      	strh	r5, [r4, #12]
 8002446:	e7cd      	b.n	80023e4 <__smakebuf_r+0x18>
 8002448:	080021dd 	.word	0x080021dd

0800244c <_free_r>:
 800244c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800244e:	2900      	cmp	r1, #0
 8002450:	d048      	beq.n	80024e4 <_free_r+0x98>
 8002452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002456:	9001      	str	r0, [sp, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f1a1 0404 	sub.w	r4, r1, #4
 800245e:	bfb8      	it	lt
 8002460:	18e4      	addlt	r4, r4, r3
 8002462:	f000 f947 	bl	80026f4 <__malloc_lock>
 8002466:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <_free_r+0x9c>)
 8002468:	9801      	ldr	r0, [sp, #4]
 800246a:	6813      	ldr	r3, [r2, #0]
 800246c:	4615      	mov	r5, r2
 800246e:	b933      	cbnz	r3, 800247e <_free_r+0x32>
 8002470:	6063      	str	r3, [r4, #4]
 8002472:	6014      	str	r4, [r2, #0]
 8002474:	b003      	add	sp, #12
 8002476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800247a:	f000 b941 	b.w	8002700 <__malloc_unlock>
 800247e:	42a3      	cmp	r3, r4
 8002480:	d90b      	bls.n	800249a <_free_r+0x4e>
 8002482:	6821      	ldr	r1, [r4, #0]
 8002484:	1862      	adds	r2, r4, r1
 8002486:	4293      	cmp	r3, r2
 8002488:	bf04      	itt	eq
 800248a:	681a      	ldreq	r2, [r3, #0]
 800248c:	685b      	ldreq	r3, [r3, #4]
 800248e:	6063      	str	r3, [r4, #4]
 8002490:	bf04      	itt	eq
 8002492:	1852      	addeq	r2, r2, r1
 8002494:	6022      	streq	r2, [r4, #0]
 8002496:	602c      	str	r4, [r5, #0]
 8002498:	e7ec      	b.n	8002474 <_free_r+0x28>
 800249a:	461a      	mov	r2, r3
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	b10b      	cbz	r3, 80024a4 <_free_r+0x58>
 80024a0:	42a3      	cmp	r3, r4
 80024a2:	d9fa      	bls.n	800249a <_free_r+0x4e>
 80024a4:	6811      	ldr	r1, [r2, #0]
 80024a6:	1855      	adds	r5, r2, r1
 80024a8:	42a5      	cmp	r5, r4
 80024aa:	d10b      	bne.n	80024c4 <_free_r+0x78>
 80024ac:	6824      	ldr	r4, [r4, #0]
 80024ae:	4421      	add	r1, r4
 80024b0:	1854      	adds	r4, r2, r1
 80024b2:	42a3      	cmp	r3, r4
 80024b4:	6011      	str	r1, [r2, #0]
 80024b6:	d1dd      	bne.n	8002474 <_free_r+0x28>
 80024b8:	681c      	ldr	r4, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	6053      	str	r3, [r2, #4]
 80024be:	4421      	add	r1, r4
 80024c0:	6011      	str	r1, [r2, #0]
 80024c2:	e7d7      	b.n	8002474 <_free_r+0x28>
 80024c4:	d902      	bls.n	80024cc <_free_r+0x80>
 80024c6:	230c      	movs	r3, #12
 80024c8:	6003      	str	r3, [r0, #0]
 80024ca:	e7d3      	b.n	8002474 <_free_r+0x28>
 80024cc:	6825      	ldr	r5, [r4, #0]
 80024ce:	1961      	adds	r1, r4, r5
 80024d0:	428b      	cmp	r3, r1
 80024d2:	bf04      	itt	eq
 80024d4:	6819      	ldreq	r1, [r3, #0]
 80024d6:	685b      	ldreq	r3, [r3, #4]
 80024d8:	6063      	str	r3, [r4, #4]
 80024da:	bf04      	itt	eq
 80024dc:	1949      	addeq	r1, r1, r5
 80024de:	6021      	streq	r1, [r4, #0]
 80024e0:	6054      	str	r4, [r2, #4]
 80024e2:	e7c7      	b.n	8002474 <_free_r+0x28>
 80024e4:	b003      	add	sp, #12
 80024e6:	bd30      	pop	{r4, r5, pc}
 80024e8:	20000090 	.word	0x20000090

080024ec <_malloc_r>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	1ccd      	adds	r5, r1, #3
 80024f0:	f025 0503 	bic.w	r5, r5, #3
 80024f4:	3508      	adds	r5, #8
 80024f6:	2d0c      	cmp	r5, #12
 80024f8:	bf38      	it	cc
 80024fa:	250c      	movcc	r5, #12
 80024fc:	2d00      	cmp	r5, #0
 80024fe:	4606      	mov	r6, r0
 8002500:	db01      	blt.n	8002506 <_malloc_r+0x1a>
 8002502:	42a9      	cmp	r1, r5
 8002504:	d903      	bls.n	800250e <_malloc_r+0x22>
 8002506:	230c      	movs	r3, #12
 8002508:	6033      	str	r3, [r6, #0]
 800250a:	2000      	movs	r0, #0
 800250c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800250e:	f000 f8f1 	bl	80026f4 <__malloc_lock>
 8002512:	4921      	ldr	r1, [pc, #132]	; (8002598 <_malloc_r+0xac>)
 8002514:	680a      	ldr	r2, [r1, #0]
 8002516:	4614      	mov	r4, r2
 8002518:	b99c      	cbnz	r4, 8002542 <_malloc_r+0x56>
 800251a:	4f20      	ldr	r7, [pc, #128]	; (800259c <_malloc_r+0xb0>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b923      	cbnz	r3, 800252a <_malloc_r+0x3e>
 8002520:	4621      	mov	r1, r4
 8002522:	4630      	mov	r0, r6
 8002524:	f000 f83c 	bl	80025a0 <_sbrk_r>
 8002528:	6038      	str	r0, [r7, #0]
 800252a:	4629      	mov	r1, r5
 800252c:	4630      	mov	r0, r6
 800252e:	f000 f837 	bl	80025a0 <_sbrk_r>
 8002532:	1c43      	adds	r3, r0, #1
 8002534:	d123      	bne.n	800257e <_malloc_r+0x92>
 8002536:	230c      	movs	r3, #12
 8002538:	6033      	str	r3, [r6, #0]
 800253a:	4630      	mov	r0, r6
 800253c:	f000 f8e0 	bl	8002700 <__malloc_unlock>
 8002540:	e7e3      	b.n	800250a <_malloc_r+0x1e>
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	1b5b      	subs	r3, r3, r5
 8002546:	d417      	bmi.n	8002578 <_malloc_r+0x8c>
 8002548:	2b0b      	cmp	r3, #11
 800254a:	d903      	bls.n	8002554 <_malloc_r+0x68>
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	441c      	add	r4, r3
 8002550:	6025      	str	r5, [r4, #0]
 8002552:	e004      	b.n	800255e <_malloc_r+0x72>
 8002554:	6863      	ldr	r3, [r4, #4]
 8002556:	42a2      	cmp	r2, r4
 8002558:	bf0c      	ite	eq
 800255a:	600b      	streq	r3, [r1, #0]
 800255c:	6053      	strne	r3, [r2, #4]
 800255e:	4630      	mov	r0, r6
 8002560:	f000 f8ce 	bl	8002700 <__malloc_unlock>
 8002564:	f104 000b 	add.w	r0, r4, #11
 8002568:	1d23      	adds	r3, r4, #4
 800256a:	f020 0007 	bic.w	r0, r0, #7
 800256e:	1ac2      	subs	r2, r0, r3
 8002570:	d0cc      	beq.n	800250c <_malloc_r+0x20>
 8002572:	1a1b      	subs	r3, r3, r0
 8002574:	50a3      	str	r3, [r4, r2]
 8002576:	e7c9      	b.n	800250c <_malloc_r+0x20>
 8002578:	4622      	mov	r2, r4
 800257a:	6864      	ldr	r4, [r4, #4]
 800257c:	e7cc      	b.n	8002518 <_malloc_r+0x2c>
 800257e:	1cc4      	adds	r4, r0, #3
 8002580:	f024 0403 	bic.w	r4, r4, #3
 8002584:	42a0      	cmp	r0, r4
 8002586:	d0e3      	beq.n	8002550 <_malloc_r+0x64>
 8002588:	1a21      	subs	r1, r4, r0
 800258a:	4630      	mov	r0, r6
 800258c:	f000 f808 	bl	80025a0 <_sbrk_r>
 8002590:	3001      	adds	r0, #1
 8002592:	d1dd      	bne.n	8002550 <_malloc_r+0x64>
 8002594:	e7cf      	b.n	8002536 <_malloc_r+0x4a>
 8002596:	bf00      	nop
 8002598:	20000090 	.word	0x20000090
 800259c:	20000094 	.word	0x20000094

080025a0 <_sbrk_r>:
 80025a0:	b538      	push	{r3, r4, r5, lr}
 80025a2:	4d06      	ldr	r5, [pc, #24]	; (80025bc <_sbrk_r+0x1c>)
 80025a4:	2300      	movs	r3, #0
 80025a6:	4604      	mov	r4, r0
 80025a8:	4608      	mov	r0, r1
 80025aa:	602b      	str	r3, [r5, #0]
 80025ac:	f7fe f9a8 	bl	8000900 <_sbrk>
 80025b0:	1c43      	adds	r3, r0, #1
 80025b2:	d102      	bne.n	80025ba <_sbrk_r+0x1a>
 80025b4:	682b      	ldr	r3, [r5, #0]
 80025b6:	b103      	cbz	r3, 80025ba <_sbrk_r+0x1a>
 80025b8:	6023      	str	r3, [r4, #0]
 80025ba:	bd38      	pop	{r3, r4, r5, pc}
 80025bc:	200000a8 	.word	0x200000a8

080025c0 <__sread>:
 80025c0:	b510      	push	{r4, lr}
 80025c2:	460c      	mov	r4, r1
 80025c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025c8:	f000 f8a0 	bl	800270c <_read_r>
 80025cc:	2800      	cmp	r0, #0
 80025ce:	bfab      	itete	ge
 80025d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80025d2:	89a3      	ldrhlt	r3, [r4, #12]
 80025d4:	181b      	addge	r3, r3, r0
 80025d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025da:	bfac      	ite	ge
 80025dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80025de:	81a3      	strhlt	r3, [r4, #12]
 80025e0:	bd10      	pop	{r4, pc}

080025e2 <__swrite>:
 80025e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e6:	461f      	mov	r7, r3
 80025e8:	898b      	ldrh	r3, [r1, #12]
 80025ea:	05db      	lsls	r3, r3, #23
 80025ec:	4605      	mov	r5, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	4616      	mov	r6, r2
 80025f2:	d505      	bpl.n	8002600 <__swrite+0x1e>
 80025f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025f8:	2302      	movs	r3, #2
 80025fa:	2200      	movs	r2, #0
 80025fc:	f000 f868 	bl	80026d0 <_lseek_r>
 8002600:	89a3      	ldrh	r3, [r4, #12]
 8002602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800260a:	81a3      	strh	r3, [r4, #12]
 800260c:	4632      	mov	r2, r6
 800260e:	463b      	mov	r3, r7
 8002610:	4628      	mov	r0, r5
 8002612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002616:	f000 b817 	b.w	8002648 <_write_r>

0800261a <__sseek>:
 800261a:	b510      	push	{r4, lr}
 800261c:	460c      	mov	r4, r1
 800261e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002622:	f000 f855 	bl	80026d0 <_lseek_r>
 8002626:	1c43      	adds	r3, r0, #1
 8002628:	89a3      	ldrh	r3, [r4, #12]
 800262a:	bf15      	itete	ne
 800262c:	6560      	strne	r0, [r4, #84]	; 0x54
 800262e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002636:	81a3      	strheq	r3, [r4, #12]
 8002638:	bf18      	it	ne
 800263a:	81a3      	strhne	r3, [r4, #12]
 800263c:	bd10      	pop	{r4, pc}

0800263e <__sclose>:
 800263e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002642:	f000 b813 	b.w	800266c <_close_r>
	...

08002648 <_write_r>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4d07      	ldr	r5, [pc, #28]	; (8002668 <_write_r+0x20>)
 800264c:	4604      	mov	r4, r0
 800264e:	4608      	mov	r0, r1
 8002650:	4611      	mov	r1, r2
 8002652:	2200      	movs	r2, #0
 8002654:	602a      	str	r2, [r5, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	f7fe f902 	bl	8000860 <_write>
 800265c:	1c43      	adds	r3, r0, #1
 800265e:	d102      	bne.n	8002666 <_write_r+0x1e>
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	b103      	cbz	r3, 8002666 <_write_r+0x1e>
 8002664:	6023      	str	r3, [r4, #0]
 8002666:	bd38      	pop	{r3, r4, r5, pc}
 8002668:	200000a8 	.word	0x200000a8

0800266c <_close_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4d06      	ldr	r5, [pc, #24]	; (8002688 <_close_r+0x1c>)
 8002670:	2300      	movs	r3, #0
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	602b      	str	r3, [r5, #0]
 8002678:	f7fe f90e 	bl	8000898 <_close>
 800267c:	1c43      	adds	r3, r0, #1
 800267e:	d102      	bne.n	8002686 <_close_r+0x1a>
 8002680:	682b      	ldr	r3, [r5, #0]
 8002682:	b103      	cbz	r3, 8002686 <_close_r+0x1a>
 8002684:	6023      	str	r3, [r4, #0]
 8002686:	bd38      	pop	{r3, r4, r5, pc}
 8002688:	200000a8 	.word	0x200000a8

0800268c <_fstat_r>:
 800268c:	b538      	push	{r3, r4, r5, lr}
 800268e:	4d07      	ldr	r5, [pc, #28]	; (80026ac <_fstat_r+0x20>)
 8002690:	2300      	movs	r3, #0
 8002692:	4604      	mov	r4, r0
 8002694:	4608      	mov	r0, r1
 8002696:	4611      	mov	r1, r2
 8002698:	602b      	str	r3, [r5, #0]
 800269a:	f7fe f909 	bl	80008b0 <_fstat>
 800269e:	1c43      	adds	r3, r0, #1
 80026a0:	d102      	bne.n	80026a8 <_fstat_r+0x1c>
 80026a2:	682b      	ldr	r3, [r5, #0]
 80026a4:	b103      	cbz	r3, 80026a8 <_fstat_r+0x1c>
 80026a6:	6023      	str	r3, [r4, #0]
 80026a8:	bd38      	pop	{r3, r4, r5, pc}
 80026aa:	bf00      	nop
 80026ac:	200000a8 	.word	0x200000a8

080026b0 <_isatty_r>:
 80026b0:	b538      	push	{r3, r4, r5, lr}
 80026b2:	4d06      	ldr	r5, [pc, #24]	; (80026cc <_isatty_r+0x1c>)
 80026b4:	2300      	movs	r3, #0
 80026b6:	4604      	mov	r4, r0
 80026b8:	4608      	mov	r0, r1
 80026ba:	602b      	str	r3, [r5, #0]
 80026bc:	f7fe f908 	bl	80008d0 <_isatty>
 80026c0:	1c43      	adds	r3, r0, #1
 80026c2:	d102      	bne.n	80026ca <_isatty_r+0x1a>
 80026c4:	682b      	ldr	r3, [r5, #0]
 80026c6:	b103      	cbz	r3, 80026ca <_isatty_r+0x1a>
 80026c8:	6023      	str	r3, [r4, #0]
 80026ca:	bd38      	pop	{r3, r4, r5, pc}
 80026cc:	200000a8 	.word	0x200000a8

080026d0 <_lseek_r>:
 80026d0:	b538      	push	{r3, r4, r5, lr}
 80026d2:	4d07      	ldr	r5, [pc, #28]	; (80026f0 <_lseek_r+0x20>)
 80026d4:	4604      	mov	r4, r0
 80026d6:	4608      	mov	r0, r1
 80026d8:	4611      	mov	r1, r2
 80026da:	2200      	movs	r2, #0
 80026dc:	602a      	str	r2, [r5, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	f7fe f901 	bl	80008e6 <_lseek>
 80026e4:	1c43      	adds	r3, r0, #1
 80026e6:	d102      	bne.n	80026ee <_lseek_r+0x1e>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	b103      	cbz	r3, 80026ee <_lseek_r+0x1e>
 80026ec:	6023      	str	r3, [r4, #0]
 80026ee:	bd38      	pop	{r3, r4, r5, pc}
 80026f0:	200000a8 	.word	0x200000a8

080026f4 <__malloc_lock>:
 80026f4:	4801      	ldr	r0, [pc, #4]	; (80026fc <__malloc_lock+0x8>)
 80026f6:	f7ff be43 	b.w	8002380 <__retarget_lock_acquire_recursive>
 80026fa:	bf00      	nop
 80026fc:	200000a0 	.word	0x200000a0

08002700 <__malloc_unlock>:
 8002700:	4801      	ldr	r0, [pc, #4]	; (8002708 <__malloc_unlock+0x8>)
 8002702:	f7ff be3e 	b.w	8002382 <__retarget_lock_release_recursive>
 8002706:	bf00      	nop
 8002708:	200000a0 	.word	0x200000a0

0800270c <_read_r>:
 800270c:	b538      	push	{r3, r4, r5, lr}
 800270e:	4d07      	ldr	r5, [pc, #28]	; (800272c <_read_r+0x20>)
 8002710:	4604      	mov	r4, r0
 8002712:	4608      	mov	r0, r1
 8002714:	4611      	mov	r1, r2
 8002716:	2200      	movs	r2, #0
 8002718:	602a      	str	r2, [r5, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	f7fe f883 	bl	8000826 <_read>
 8002720:	1c43      	adds	r3, r0, #1
 8002722:	d102      	bne.n	800272a <_read_r+0x1e>
 8002724:	682b      	ldr	r3, [r5, #0]
 8002726:	b103      	cbz	r3, 800272a <_read_r+0x1e>
 8002728:	6023      	str	r3, [r4, #0]
 800272a:	bd38      	pop	{r3, r4, r5, pc}
 800272c:	200000a8 	.word	0x200000a8

08002730 <_init>:
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002732:	bf00      	nop
 8002734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002736:	bc08      	pop	{r3}
 8002738:	469e      	mov	lr, r3
 800273a:	4770      	bx	lr

0800273c <_fini>:
 800273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273e:	bf00      	nop
 8002740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002742:	bc08      	pop	{r3}
 8002744:	469e      	mov	lr, r3
 8002746:	4770      	bx	lr
