
day4_timerInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003190  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e4  080033e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080033e4  080033e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033e4  080033e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e4  080033e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080033ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  0800345c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  0800345c  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dde6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c59  00000000  00000000  0002de86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  000306e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002731a  00000000  00000000  00031208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c64d  00000000  00000000  00058522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f046b  00000000  00000000  00064b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154fda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c0  00000000  00000000  00155030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003300 	.word	0x08003300

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003300 	.word	0x08003300

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fd57 	bl	8000c7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f812 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f900 	bl	80003d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f860 	bl	800029c <MX_TIM2_Init>
  MX_TIM3_Init();
 80001dc:	f000 f8ac 	bl	8000338 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <main+0x28>)
 80001e2:	f001 ff3b 	bl	800205c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80001e6:	4803      	ldr	r0, [pc, #12]	; (80001f4 <main+0x2c>)
 80001e8:	f001 ff38 	bl	800205c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ec:	e7fe      	b.n	80001ec <main+0x24>
 80001ee:	bf00      	nop
 80001f0:	200000e4 	.word	0x200000e4
 80001f4:	20000098 	.word	0x20000098

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b096      	sub	sp, #88	; 0x58
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0314 	add.w	r3, r7, #20
 8000202:	2244      	movs	r2, #68	; 0x44
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 fbac 	bl	8002964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	463b      	mov	r3, r7
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800021a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800021e:	f001 f8a9 	bl	8001374 <HAL_PWREx_ControlVoltageScaling>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000228:	f000 fb2c 	bl	8000884 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800022c:	2310      	movs	r3, #16
 800022e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000230:	2301      	movs	r3, #1
 8000232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000238:	2360      	movs	r3, #96	; 0x60
 800023a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000240:	2301      	movs	r3, #1
 8000242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000244:	2301      	movs	r3, #1
 8000246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000248:	2328      	movs	r3, #40	; 0x28
 800024a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800024c:	2307      	movs	r3, #7
 800024e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000250:	2302      	movs	r3, #2
 8000252:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000254:	2302      	movs	r3, #2
 8000256:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	4618      	mov	r0, r3
 800025e:	f001 f8df 	bl	8001420 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000268:	f000 fb0c 	bl	8000884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000270:	2303      	movs	r3, #3
 8000272:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000280:	463b      	mov	r3, r7
 8000282:	2104      	movs	r1, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f001 fca5 	bl	8001bd4 <HAL_RCC_ClockConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000290:	f000 faf8 	bl	8000884 <Error_Handler>
  }
}
 8000294:	bf00      	nop
 8000296:	3758      	adds	r7, #88	; 0x58
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ba:	4b1e      	ldr	r3, [pc, #120]	; (8000334 <MX_TIM2_Init+0x98>)
 80002bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 80002c2:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <MX_TIM2_Init+0x98>)
 80002c4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80002c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <MX_TIM2_Init+0x98>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <MX_TIM2_Init+0x98>)
 80002d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d8:	4b16      	ldr	r3, [pc, #88]	; (8000334 <MX_TIM2_Init+0x98>)
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <MX_TIM2_Init+0x98>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002e4:	4813      	ldr	r0, [pc, #76]	; (8000334 <MX_TIM2_Init+0x98>)
 80002e6:	f001 fe61 	bl	8001fac <HAL_TIM_Base_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80002f0:	f000 fac8 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002fa:	f107 0310 	add.w	r3, r7, #16
 80002fe:	4619      	mov	r1, r3
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <MX_TIM2_Init+0x98>)
 8000302:	f002 f83a 	bl	800237a <HAL_TIM_ConfigClockSource>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800030c:	f000 faba 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4619      	mov	r1, r3
 800031c:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_TIM2_Init+0x98>)
 800031e:	f002 fa51 	bl	80027c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000328:	f000 faac 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
 // HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END TIM2_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	3720      	adds	r7, #32
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200000e4 	.word	0x200000e4

08000338 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000356:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <MX_TIM3_Init+0x98>)
 8000358:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <MX_TIM3_Init+0x9c>)
 800035a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 800035c:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <MX_TIM3_Init+0x98>)
 800035e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000362:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_TIM3_Init+0x98>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800036a:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <MX_TIM3_Init+0x98>)
 800036c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000370:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <MX_TIM3_Init+0x98>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <MX_TIM3_Init+0x98>)
 800037a:	2200      	movs	r2, #0
 800037c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800037e:	4814      	ldr	r0, [pc, #80]	; (80003d0 <MX_TIM3_Init+0x98>)
 8000380:	f001 fe14 	bl	8001fac <HAL_TIM_Base_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800038a:	f000 fa7b 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800038e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000392:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	480d      	ldr	r0, [pc, #52]	; (80003d0 <MX_TIM3_Init+0x98>)
 800039c:	f001 ffed 	bl	800237a <HAL_TIM_ConfigClockSource>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80003a6:	f000 fa6d 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003aa:	2300      	movs	r3, #0
 80003ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	4806      	ldr	r0, [pc, #24]	; (80003d0 <MX_TIM3_Init+0x98>)
 80003b8:	f002 fa04 	bl	80027c4 <HAL_TIMEx_MasterConfigSynchronization>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80003c2:	f000 fa5f 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	3720      	adds	r7, #32
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000098 	.word	0x20000098
 80003d4:	40000400 	.word	0x40000400

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	; 0x28
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003ee:	4bbc      	ldr	r3, [pc, #752]	; (80006e0 <MX_GPIO_Init+0x308>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	4abb      	ldr	r2, [pc, #748]	; (80006e0 <MX_GPIO_Init+0x308>)
 80003f4:	f043 0310 	orr.w	r3, r3, #16
 80003f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fa:	4bb9      	ldr	r3, [pc, #740]	; (80006e0 <MX_GPIO_Init+0x308>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	f003 0310 	and.w	r3, r3, #16
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	4bb6      	ldr	r3, [pc, #728]	; (80006e0 <MX_GPIO_Init+0x308>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	4ab5      	ldr	r2, [pc, #724]	; (80006e0 <MX_GPIO_Init+0x308>)
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000412:	4bb3      	ldr	r3, [pc, #716]	; (80006e0 <MX_GPIO_Init+0x308>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	f003 0304 	and.w	r3, r3, #4
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4bb0      	ldr	r3, [pc, #704]	; (80006e0 <MX_GPIO_Init+0x308>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	4aaf      	ldr	r2, [pc, #700]	; (80006e0 <MX_GPIO_Init+0x308>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042a:	4bad      	ldr	r3, [pc, #692]	; (80006e0 <MX_GPIO_Init+0x308>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4baa      	ldr	r3, [pc, #680]	; (80006e0 <MX_GPIO_Init+0x308>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043a:	4aa9      	ldr	r2, [pc, #676]	; (80006e0 <MX_GPIO_Init+0x308>)
 800043c:	f043 0302 	orr.w	r3, r3, #2
 8000440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000442:	4ba7      	ldr	r3, [pc, #668]	; (80006e0 <MX_GPIO_Init+0x308>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	f003 0302 	and.w	r3, r3, #2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800044e:	4ba4      	ldr	r3, [pc, #656]	; (80006e0 <MX_GPIO_Init+0x308>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	4aa3      	ldr	r2, [pc, #652]	; (80006e0 <MX_GPIO_Init+0x308>)
 8000454:	f043 0308 	orr.w	r3, r3, #8
 8000458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045a:	4ba1      	ldr	r3, [pc, #644]	; (80006e0 <MX_GPIO_Init+0x308>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045e:	f003 0308 	and.w	r3, r3, #8
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 718a 	mov.w	r1, #276	; 0x114
 800046c:	489d      	ldr	r0, [pc, #628]	; (80006e4 <MX_GPIO_Init+0x30c>)
 800046e:	f000 ff37 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|my_led1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f248 1124 	movw	r1, #33060	; 0x8124
 8000478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047c:	f000 ff30 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|my_led2_Pin
 8000480:	2200      	movs	r2, #0
 8000482:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000486:	4898      	ldr	r0, [pc, #608]	; (80006e8 <MX_GPIO_Init+0x310>)
 8000488:	f000 ff2a 	bl	80012e0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000492:	4896      	ldr	r0, [pc, #600]	; (80006ec <MX_GPIO_Init+0x314>)
 8000494:	f000 ff24 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049e:	4893      	ldr	r0, [pc, #588]	; (80006ec <MX_GPIO_Init+0x314>)
 80004a0:	f000 ff1e 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80004aa:	4891      	ldr	r0, [pc, #580]	; (80006f0 <MX_GPIO_Init+0x318>)
 80004ac:	f000 ff18 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2120      	movs	r1, #32
 80004b4:	488c      	ldr	r0, [pc, #560]	; (80006e8 <MX_GPIO_Init+0x310>)
 80004b6:	f000 ff13 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2101      	movs	r1, #1
 80004be:	4889      	ldr	r0, [pc, #548]	; (80006e4 <MX_GPIO_Init+0x30c>)
 80004c0:	f000 ff0e 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80004c4:	f240 1315 	movw	r3, #277	; 0x115
 80004c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2300      	movs	r3, #0
 80004d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4619      	mov	r1, r3
 80004dc:	4881      	ldr	r0, [pc, #516]	; (80006e4 <MX_GPIO_Init+0x30c>)
 80004de:	f000 fd55 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80004e2:	236a      	movs	r3, #106	; 0x6a
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	4619      	mov	r1, r3
 80004f6:	487b      	ldr	r0, [pc, #492]	; (80006e4 <MX_GPIO_Init+0x30c>)
 80004f8:	f000 fd48 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80004fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000502:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4619      	mov	r1, r3
 8000512:	4877      	ldr	r0, [pc, #476]	; (80006f0 <MX_GPIO_Init+0x318>)
 8000514:	f000 fd3a 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : my_button1_Pin */
  GPIO_InitStruct.Pin = my_button1_Pin;
 8000518:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800051c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(my_button1_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	4870      	ldr	r0, [pc, #448]	; (80006f0 <MX_GPIO_Init+0x318>)
 800052e:	f000 fd2d 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000532:	233f      	movs	r3, #63	; 0x3f
 8000534:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000536:	230b      	movs	r3, #11
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	486a      	ldr	r0, [pc, #424]	; (80006f0 <MX_GPIO_Init+0x318>)
 8000546:	f000 fd21 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800054a:	2303      	movs	r3, #3
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054e:	2302      	movs	r3, #2
 8000550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000556:	2303      	movs	r3, #3
 8000558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800055a:	2308      	movs	r3, #8
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4619      	mov	r1, r3
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f000 fd10 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin my_led1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|my_led1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800056c:	f248 1324 	movw	r3, #33060	; 0x8124
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2300      	movs	r3, #0
 800057c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f000 fd00 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800058c:	2310      	movs	r3, #16
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000590:	230b      	movs	r3, #11
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f000 fcf3 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80005a6:	23c0      	movs	r3, #192	; 0xc0
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b2:	2303      	movs	r3, #3
 80005b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005b6:	2305      	movs	r3, #5
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f000 fce2 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80005c8:	2301      	movs	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4842      	ldr	r0, [pc, #264]	; (80006e8 <MX_GPIO_Init+0x310>)
 80005de:	f000 fcd5 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80005e2:	2302      	movs	r3, #2
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005e6:	230b      	movs	r3, #11
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	483c      	ldr	r0, [pc, #240]	; (80006e8 <MX_GPIO_Init+0x310>)
 80005f6:	f000 fcc9 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin my_led2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|my_led2_Pin
 80005fa:	f24f 0334 	movw	r3, #61492	; 0xf034
 80005fe:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4835      	ldr	r0, [pc, #212]	; (80006e8 <MX_GPIO_Init+0x310>)
 8000614:	f000 fcba 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000618:	f44f 7320 	mov.w	r3, #640	; 0x280
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800062a:	2306      	movs	r3, #6
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	482b      	ldr	r0, [pc, #172]	; (80006e4 <MX_GPIO_Init+0x30c>)
 8000636:	f000 fca9 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800063a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800063e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800064c:	230a      	movs	r3, #10
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4823      	ldr	r0, [pc, #140]	; (80006e4 <MX_GPIO_Init+0x30c>)
 8000658:	f000 fc98 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800065c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000662:	2312      	movs	r3, #18
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066a:	2303      	movs	r3, #3
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800066e:	2304      	movs	r3, #4
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	481b      	ldr	r0, [pc, #108]	; (80006e8 <MX_GPIO_Init+0x310>)
 800067a:	f000 fc87 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800067e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000690:	2307      	movs	r3, #7
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <MX_GPIO_Init+0x314>)
 800069c:	f000 fc76 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80006a0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80006a4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_GPIO_Init+0x314>)
 80006b8:	f000 fc68 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80006bc:	f243 0381 	movw	r3, #12417	; 0x3081
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_GPIO_Init+0x314>)
 80006d6:	f000 fc59 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80006da:	f44f 7310 	mov.w	r3, #576	; 0x240
 80006de:	e009      	b.n	80006f4 <MX_GPIO_Init+0x31c>
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48001000 	.word	0x48001000
 80006e8:	48000400 	.word	0x48000400
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48000800 	.word	0x48000800
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	484b      	ldr	r0, [pc, #300]	; (8000838 <MX_GPIO_Init+0x460>)
 800070a:	f000 fc3f 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800070e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000714:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4844      	ldr	r0, [pc, #272]	; (8000838 <MX_GPIO_Init+0x460>)
 8000726:	f000 fc31 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800072a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f000 fc23 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000746:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000754:	2303      	movs	r3, #3
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000758:	230a      	movs	r3, #10
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000766:	f000 fc11 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800076a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800077c:	2306      	movs	r3, #6
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	482c      	ldr	r0, [pc, #176]	; (8000838 <MX_GPIO_Init+0x460>)
 8000788:	f000 fc00 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800078c:	2302      	movs	r3, #2
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800079c:	2305      	movs	r3, #5
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4825      	ldr	r0, [pc, #148]	; (800083c <MX_GPIO_Init+0x464>)
 80007a8:	f000 fbf0 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80007ac:	2378      	movs	r3, #120	; 0x78
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007bc:	2307      	movs	r3, #7
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	481d      	ldr	r0, [pc, #116]	; (800083c <MX_GPIO_Init+0x464>)
 80007c8:	f000 fbe0 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_LINK_UART1_TX_Pin ST_LINK_UART1_RX_Pin */
  GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80007cc:	23c0      	movs	r3, #192	; 0xc0
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007dc:	2307      	movs	r3, #7
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4816      	ldr	r0, [pc, #88]	; (8000840 <MX_GPIO_Init+0x468>)
 80007e8:	f000 fbd0 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80007ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f2:	2312      	movs	r3, #18
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007fe:	2304      	movs	r3, #4
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_GPIO_Init+0x468>)
 800080a:	f000 fbbf 	bl	8000f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2017      	movs	r0, #23
 8000814:	f000 fb83 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000818:	2017      	movs	r0, #23
 800081a:	f000 fb9c 	bl	8000f56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2028      	movs	r0, #40	; 0x28
 8000824:	f000 fb7b 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000828:	2028      	movs	r0, #40	; 0x28
 800082a:	f000 fb94 	bl	8000f56 <HAL_NVIC_EnableIRQ>

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	48000800 	.word	0x48000800
 800083c:	48000c00 	.word	0x48000c00
 8000840:	48000400 	.word	0x48000400

08000844 <HAL_TIM_PeriodElapsedCallback>:

}*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)

{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_TogglePin(my_led2_GPIO_Port, my_led2_Pin);
	HAL_GPIO_WritePin(my_led2_GPIO_Port, my_led2_Pin, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000854:	f000 fd44 	bl	80012e0 <HAL_GPIO_WritePin>
	printf("Timer2 interrupt!!\n");
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800085a:	f002 f8f9 	bl	8002a50 <puts>
	HAL_GPIO_WritePin(my_led1_GPIO_Port, my_led1_Pin, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	2120      	movs	r1, #32
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f000 fd3b 	bl	80012e0 <HAL_GPIO_WritePin>
	printf("Timer3 interrupt\n");
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800086c:	f002 f8f0 	bl	8002a50 <puts>

	//for(int i=0; i<1000000; i++);

}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	48000400 	.word	0x48000400
 800087c:	08003318 	.word	0x08003318
 8000880:	0800332c 	.word	0x0800332c

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x44>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_MspInit+0x44>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6613      	str	r3, [r2, #96]	; 0x60
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_MspInit+0x44>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x44>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x44>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x44>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f8:	d131      	bne.n	800095e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a26      	ldr	r2, [pc, #152]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a20      	ldr	r2, [pc, #128]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 800092a:	2308      	movs	r3, #8
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fb20 	bl	8000f8c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	201c      	movs	r0, #28
 8000952:	f000 fae4 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000956:	201c      	movs	r0, #28
 8000958:	f000 fafd 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800095c:	e018      	b.n	8000990 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM3)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_TIM_Base_MspInit+0xc4>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d113      	bne.n	8000990 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 800096a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	6593      	str	r3, [r2, #88]	; 0x58
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_TIM_Base_MspInit+0xc0>)
 8000976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	201d      	movs	r0, #29
 8000986:	f000 faca 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800098a:	201d      	movs	r0, #29
 800098c:	f000 fae3 	bl	8000f56 <HAL_NVIC_EnableIRQ>
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	40000400 	.word	0x40000400

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f99c 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80009f8:	2020      	movs	r0, #32
 80009fa:	f000 fc89 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80009fe:	2040      	movs	r0, #64	; 0x40
 8000a00:	f000 fc86 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a04:	2080      	movs	r0, #128	; 0x80
 8000a06:	f000 fc83 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000a0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a0e:	f000 fc7f 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <TIM2_IRQHandler+0x10>)
 8000a1e:	f001 fb8d 	bl	800213c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000e4 	.word	0x200000e4

08000a2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <TIM3_IRQHandler+0x10>)
 8000a32:	f001 fb83 	bl	800213c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000098 	.word	0x20000098

08000a40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a48:	f000 fc62 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000a4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a50:	f000 fc5e 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a58:	f000 fc5a 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000a5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a60:	f000 fc56 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000a64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a68:	f000 fc52 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <ITM_SendChar+0x48>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <ITM_SendChar+0x48>)
 8000a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a84:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <ITM_SendChar+0x4c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <ITM_SendChar+0x4c>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a92:	bf00      	nop
 8000a94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f8      	beq.n	8000a94 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000aa2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	6013      	str	r3, [r2, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000edfc 	.word	0xe000edfc
 8000abc:	e0000e00 	.word	0xe0000e00

08000ac0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e00a      	b.n	8000ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ad2:	f3af 8000 	nop.w
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	b2ca      	uxtb	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf0      	blt.n	8000ad2 <_read+0x12>
	}

return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e009      	b.n	8000b20 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ffab 	bl	8000a70 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf1      	blt.n	8000b0c <_write+0x12>
	}
	return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_close>:

int _close(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	return -1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_isatty>:

int _isatty(int file)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	return 1;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f001 fea0 	bl	8002910 <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20018000 	.word	0x20018000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	2000008c 	.word	0x2000008c
 8000c04:	20000148 	.word	0x20000148

08000c08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c30:	f7ff ffea 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	; (8000c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <LoopForever+0xe>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	; (8000c78 <LoopForever+0x16>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f001 fe5f 	bl	800291c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c5e:	f7ff fab3 	bl	80001c8 <main>

08000c62 <LoopForever>:

LoopForever:
    b LoopForever
 8000c62:	e7fe      	b.n	8000c62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c70:	080033ec 	.word	0x080033ec
  ldr r2, =_sbss
 8000c74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c78:	20000144 	.word	0x20000144

08000c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_2_IRQHandler>

08000c7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f93d 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f80e 	bl	8000cb0 <HAL_InitTick>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	e001      	b.n	8000ca4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca0:	f7ff fdf6 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_InitTick+0x6c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d023      	beq.n	8000d0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_InitTick+0x70>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_InitTick+0x6c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f949 	bl	8000f72 <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10f      	bne.n	8000d06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d809      	bhi.n	8000d00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 f913 	bl	8000f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_InitTick+0x74>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e007      	b.n	8000d10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e004      	b.n	8000d10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	e001      	b.n	8000d10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000130 	.word	0x20000130

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000130 	.word	0x20000130

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4907      	ldr	r1, [pc, #28]	; (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff29 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff3e 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff31 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffa2 	bl	8000ec4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9a:	e17f      	b.n	800129c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 8171 	beq.w	8001296 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d005      	beq.n	8000fcc <HAL_GPIO_Init+0x40>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d130      	bne.n	800102e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001002:	2201      	movs	r2, #1
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	091b      	lsrs	r3, r3, #4
 8001018:	f003 0201 	and.w	r2, r3, #1
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b03      	cmp	r3, #3
 8001038:	d118      	bne.n	800106c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001040:	2201      	movs	r2, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	f003 0201 	and.w	r2, r3, #1
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b03      	cmp	r3, #3
 8001076:	d017      	beq.n	80010a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d123      	bne.n	80010fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	6939      	ldr	r1, [r7, #16]
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0203 	and.w	r2, r3, #3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80ac 	beq.w	8001296 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <HAL_GPIO_Init+0x330>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001142:	4a5e      	ldr	r2, [pc, #376]	; (80012bc <HAL_GPIO_Init+0x330>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6613      	str	r3, [r2, #96]	; 0x60
 800114a:	4b5c      	ldr	r3, [pc, #368]	; (80012bc <HAL_GPIO_Init+0x330>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001156:	4a5a      	ldr	r2, [pc, #360]	; (80012c0 <HAL_GPIO_Init+0x334>)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001180:	d025      	beq.n	80011ce <HAL_GPIO_Init+0x242>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4f      	ldr	r2, [pc, #316]	; (80012c4 <HAL_GPIO_Init+0x338>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01f      	beq.n	80011ca <HAL_GPIO_Init+0x23e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4e      	ldr	r2, [pc, #312]	; (80012c8 <HAL_GPIO_Init+0x33c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d019      	beq.n	80011c6 <HAL_GPIO_Init+0x23a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4d      	ldr	r2, [pc, #308]	; (80012cc <HAL_GPIO_Init+0x340>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x236>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4c      	ldr	r2, [pc, #304]	; (80012d0 <HAL_GPIO_Init+0x344>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x232>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4b      	ldr	r2, [pc, #300]	; (80012d4 <HAL_GPIO_Init+0x348>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x22e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4a      	ldr	r2, [pc, #296]	; (80012d8 <HAL_GPIO_Init+0x34c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x22a>
 80011b2:	2306      	movs	r3, #6
 80011b4:	e00c      	b.n	80011d0 <HAL_GPIO_Init+0x244>
 80011b6:	2307      	movs	r3, #7
 80011b8:	e00a      	b.n	80011d0 <HAL_GPIO_Init+0x244>
 80011ba:	2305      	movs	r3, #5
 80011bc:	e008      	b.n	80011d0 <HAL_GPIO_Init+0x244>
 80011be:	2304      	movs	r3, #4
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x244>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x244>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x244>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x244>
 80011ce:	2300      	movs	r3, #0
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	4093      	lsls	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011e0:	4937      	ldr	r1, [pc, #220]	; (80012c0 <HAL_GPIO_Init+0x334>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_GPIO_Init+0x350>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001212:	4a32      	ldr	r2, [pc, #200]	; (80012dc <HAL_GPIO_Init+0x350>)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001218:	4b30      	ldr	r3, [pc, #192]	; (80012dc <HAL_GPIO_Init+0x350>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <HAL_GPIO_Init+0x350>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <HAL_GPIO_Init+0x350>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001266:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <HAL_GPIO_Init+0x350>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_GPIO_Init+0x350>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <HAL_GPIO_Init+0x350>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa22 f303 	lsr.w	r3, r2, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f47f ae78 	bne.w	8000f9c <HAL_GPIO_Init+0x10>
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010000 	.word	0x40010000
 80012c4:	48000400 	.word	0x48000400
 80012c8:	48000800 	.word	0x48000800
 80012cc:	48000c00 	.word	0x48000c00
 80012d0:	48001000 	.word	0x48001000
 80012d4:	48001400 	.word	0x48001400
 80012d8:	48001800 	.word	0x48001800
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f806 	bl	8001340 <HAL_GPIO_EXTI_Callback>
  }
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40010400 	.word	0x40010400

08001340 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <HAL_PWREx_GetVoltageRange+0x18>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40007000 	.word	0x40007000

08001374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001382:	d130      	bne.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800138c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001390:	d038      	beq.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800139a:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2232      	movs	r2, #50	; 0x32
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	0c9b      	lsrs	r3, r3, #18
 80013b4:	3301      	adds	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b8:	e002      	b.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013cc:	d102      	bne.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f2      	bne.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d110      	bne.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e00f      	b.n	8001406 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f2:	d007      	beq.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013fc:	4a05      	ldr	r2, [pc, #20]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001402:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40007000 	.word	0x40007000
 8001418:	20000000 	.word	0x20000000
 800141c:	431bde83 	.word	0x431bde83

08001420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e3c6      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001432:	4ba1      	ldr	r3, [pc, #644]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800143c:	4b9e      	ldr	r3, [pc, #632]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80e4 	beq.w	800161c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <HAL_RCC_OscConfig+0x4a>
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	f040 808b 	bne.w	8001578 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b01      	cmp	r3, #1
 8001466:	f040 8087 	bne.w	8001578 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800146a:	4b93      	ldr	r3, [pc, #588]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x62>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e39e      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1a      	ldr	r2, [r3, #32]
 8001486:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_RCC_OscConfig+0x7c>
 8001492:	4b89      	ldr	r3, [pc, #548]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800149a:	e005      	b.n	80014a8 <HAL_RCC_OscConfig+0x88>
 800149c:	4b86      	ldr	r3, [pc, #536]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 800149e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d223      	bcs.n	80014f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fd1b 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e37f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c0:	4b7d      	ldr	r3, [pc, #500]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a7c      	ldr	r2, [pc, #496]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b7a      	ldr	r3, [pc, #488]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4977      	ldr	r1, [pc, #476]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014de:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	4972      	ldr	r1, [pc, #456]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
 80014f2:	e025      	b.n	8001540 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f4:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a6f      	ldr	r2, [pc, #444]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b6d      	ldr	r3, [pc, #436]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	496a      	ldr	r1, [pc, #424]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001512:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	4965      	ldr	r1, [pc, #404]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001522:	4313      	orrs	r3, r2
 8001524:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fcdb 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e33f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001540:	f000 fc48 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	495a      	ldr	r1, [pc, #360]	; (80016bc <HAL_RCC_OscConfig+0x29c>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	4a58      	ldr	r2, [pc, #352]	; (80016c0 <HAL_RCC_OscConfig+0x2a0>)
 800155e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_OscConfig+0x2a4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fba3 	bl	8000cb0 <HAL_InitTick>
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d052      	beq.n	800161a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	e323      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d032      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001580:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a4c      	ldr	r2, [pc, #304]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158c:	f7ff fbe0 	bl	8000d50 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001594:	f7ff fbdc 	bl	8000d50 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e30c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a6:	4b44      	ldr	r3, [pc, #272]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b2:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a40      	ldr	r2, [pc, #256]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b3e      	ldr	r3, [pc, #248]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	493b      	ldr	r1, [pc, #236]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	4936      	ldr	r1, [pc, #216]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	e01a      	b.n	800161c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a33      	ldr	r2, [pc, #204]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fbad 	bl	8000d50 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fa:	f7ff fba9 	bl	8000d50 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e2d9      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160c:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x1da>
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800161a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d074      	beq.n	8001712 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d005      	beq.n	800163a <HAL_RCC_OscConfig+0x21a>
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b0c      	cmp	r3, #12
 8001632:	d10e      	bne.n	8001652 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d10b      	bne.n	8001652 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163a:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d064      	beq.n	8001710 <HAL_RCC_OscConfig+0x2f0>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d160      	bne.n	8001710 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e2b6      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x24a>
 800165c:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a15      	ldr	r2, [pc, #84]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	e01d      	b.n	80016a6 <HAL_RCC_OscConfig+0x286>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001672:	d10c      	bne.n	800168e <HAL_RCC_OscConfig+0x26e>
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 800167a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e00b      	b.n	80016a6 <HAL_RCC_OscConfig+0x286>
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d01c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb4f 	bl	8000d50 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b4:	e011      	b.n	80016da <HAL_RCC_OscConfig+0x2ba>
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	08003340 	.word	0x08003340
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fb42 	bl	8000d50 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e272      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	4baf      	ldr	r3, [pc, #700]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x2a8>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb32 	bl	8000d50 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fb2e 	bl	8000d50 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e25e      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	4ba5      	ldr	r3, [pc, #660]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2d0>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d060      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d005      	beq.n	8001730 <HAL_RCC_OscConfig+0x310>
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d119      	bne.n	800175e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d116      	bne.n	800175e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001730:	4b99      	ldr	r3, [pc, #612]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x328>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e23b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b93      	ldr	r3, [pc, #588]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	4990      	ldr	r1, [pc, #576]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175c:	e040      	b.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d023      	beq.n	80017ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001766:	4b8c      	ldr	r3, [pc, #560]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a8b      	ldr	r2, [pc, #556]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff faed 	bl	8000d50 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff fae9 	bl	8000d50 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e219      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	4b82      	ldr	r3, [pc, #520]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	4b7f      	ldr	r3, [pc, #508]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	061b      	lsls	r3, r3, #24
 80017a6:	497c      	ldr	r1, [pc, #496]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
 80017ac:	e018      	b.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ae:	4b7a      	ldr	r3, [pc, #488]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a79      	ldr	r2, [pc, #484]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 80017b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff fac9 	bl	8000d50 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fac5 	bl	8000d50 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1f5      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	4b70      	ldr	r3, [pc, #448]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d03c      	beq.n	8001866 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01c      	beq.n	800182e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f4:	4b68      	ldr	r3, [pc, #416]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fa:	4a67      	ldr	r2, [pc, #412]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff faa4 	bl	8000d50 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff faa0 	bl	8000d50 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1d0      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	4b5e      	ldr	r3, [pc, #376]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ef      	beq.n	800180c <HAL_RCC_OscConfig+0x3ec>
 800182c:	e01b      	b.n	8001866 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182e:	4b5a      	ldr	r3, [pc, #360]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001834:	4a58      	ldr	r2, [pc, #352]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff fa87 	bl	8000d50 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff fa83 	bl	8000d50 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1b3      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 800185a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ef      	bne.n	8001846 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80a6 	beq.w	80019c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001878:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10d      	bne.n	80018a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	4b44      	ldr	r3, [pc, #272]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	4a43      	ldr	r2, [pc, #268]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 800188a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	; 0x58
 8001890:	4b41      	ldr	r3, [pc, #260]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189c:	2301      	movs	r3, #1
 800189e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a0:	4b3e      	ldr	r3, [pc, #248]	; (800199c <HAL_RCC_OscConfig+0x57c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d118      	bne.n	80018de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ac:	4b3b      	ldr	r3, [pc, #236]	; (800199c <HAL_RCC_OscConfig+0x57c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3a      	ldr	r2, [pc, #232]	; (800199c <HAL_RCC_OscConfig+0x57c>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa4a 	bl	8000d50 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c0:	f7ff fa46 	bl	8000d50 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e176      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	4b32      	ldr	r3, [pc, #200]	; (800199c <HAL_RCC_OscConfig+0x57c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d108      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4d8>
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 80018e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ec:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f6:	e024      	b.n	8001942 <HAL_RCC_OscConfig+0x522>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d110      	bne.n	8001922 <HAL_RCC_OscConfig+0x502>
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	4a24      	ldr	r2, [pc, #144]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	4a20      	ldr	r2, [pc, #128]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001920:	e00f      	b.n	8001942 <HAL_RCC_OscConfig+0x522>
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 8001934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001938:	4a17      	ldr	r2, [pc, #92]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 800193a:	f023 0304 	bic.w	r3, r3, #4
 800193e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d016      	beq.n	8001978 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194a:	f7ff fa01 	bl	8000d50 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff f9fd 	bl	8000d50 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e12b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_OscConfig+0x578>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0ed      	beq.n	8001952 <HAL_RCC_OscConfig+0x532>
 8001976:	e01a      	b.n	80019ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff f9ea 	bl	8000d50 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800197e:	e00f      	b.n	80019a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7ff f9e6 	bl	8000d50 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d906      	bls.n	80019a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e114      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a0:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1e8      	bne.n	8001980 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4b84      	ldr	r3, [pc, #528]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	4a83      	ldr	r2, [pc, #524]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 80019ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80fa 	beq.w	8001bbe <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	f040 80d0 	bne.w	8001b74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019d4:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d130      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	3b01      	subs	r3, #1
 80019f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d127      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d11f      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a14:	2a07      	cmp	r2, #7
 8001a16:	bf14      	ite	ne
 8001a18:	2201      	movne	r2, #1
 8001a1a:	2200      	moveq	r2, #0
 8001a1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d113      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2c:	085b      	lsrs	r3, r3, #1
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d06e      	beq.n	8001b28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d069      	beq.n	8001b24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a50:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a5c:	4b5a      	ldr	r3, [pc, #360]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0a9      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a6c:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a55      	ldr	r2, [pc, #340]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a78:	f7ff f96a 	bl	8000d50 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff f966 	bl	8000d50 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e096      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a92:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <HAL_RCC_OscConfig+0x7ac>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aae:	3a01      	subs	r2, #1
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ab8:	0212      	lsls	r2, r2, #8
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ac0:	0852      	lsrs	r2, r2, #1
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	0552      	lsls	r2, r2, #21
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001acc:	0852      	lsrs	r2, r2, #1
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	0652      	lsls	r2, r2, #25
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ad8:	0912      	lsrs	r2, r2, #4
 8001ada:	0452      	lsls	r2, r2, #17
 8001adc:	430a      	orrs	r2, r1
 8001ade:	493a      	ldr	r1, [pc, #232]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ae4:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a37      	ldr	r2, [pc, #220]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af0:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4a34      	ldr	r2, [pc, #208]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001afc:	f7ff f928 	bl	8000d50 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff f924 	bl	8000d50 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e054      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b22:	e04c      	b.n	8001bbe <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e04b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d144      	bne.n	8001bbe <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b4c:	f7ff f900 	bl	8000d50 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff f8fc 	bl	8000d50 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e02c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x734>
 8001b72:	e024      	b.n	8001bbe <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d01f      	beq.n	8001bba <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff f8e3 	bl	8000d50 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff f8df 	bl	8000d50 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e00f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	4905      	ldr	r1, [pc, #20]	; (8001bc8 <HAL_RCC_OscConfig+0x7a8>)
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_RCC_OscConfig+0x7b0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
 8001bb8:	e001      	b.n	8001bbe <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	f99d808c 	.word	0xf99d808c
 8001bd0:	feeefffc 	.word	0xfeeefffc

08001bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0e7      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b75      	ldr	r3, [pc, #468]	; (8001dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d910      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b72      	ldr	r3, [pc, #456]	; (8001dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 0207 	bic.w	r2, r3, #7
 8001bfe:	4970      	ldr	r1, [pc, #448]	; (8001dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b6e      	ldr	r3, [pc, #440]	; (8001dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0cf      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d010      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	4b66      	ldr	r3, [pc, #408]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d908      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4960      	ldr	r1, [pc, #384]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d04c      	beq.n	8001cec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5a:	4b5a      	ldr	r3, [pc, #360]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d121      	bne.n	8001caa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0a6      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c72:	4b54      	ldr	r3, [pc, #336]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d115      	bne.n	8001caa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e09a      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c8a:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e08e      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9a:	4b4a      	ldr	r3, [pc, #296]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e086      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001caa:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f023 0203 	bic.w	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4943      	ldr	r1, [pc, #268]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cbc:	f7ff f848 	bl	8000d50 <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc4:	f7ff f844 	bl	8000d50 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e06e      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 020c 	and.w	r2, r3, #12
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d1eb      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d010      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d208      	bcs.n	8001d1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	492b      	ldr	r1, [pc, #172]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d210      	bcs.n	8001d4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 0207 	bic.w	r2, r3, #7
 8001d30:	4923      	ldr	r1, [pc, #140]	; (8001dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e036      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	4918      	ldr	r1, [pc, #96]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d009      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4910      	ldr	r1, [pc, #64]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d88:	f000 f824 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	091b      	lsrs	r3, r3, #4
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	490b      	ldr	r1, [pc, #44]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f4>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1f8>)
 8001da6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1fc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe ff7f 	bl	8000cb0 <HAL_InitTick>
 8001db2:	4603      	mov	r3, r0
 8001db4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001db6:	7afb      	ldrb	r3, [r7, #11]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08003340 	.word	0x08003340
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de2:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dec:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x34>
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d121      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d11e      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e08:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	e005      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e30:	4a2b      	ldr	r2, [pc, #172]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10d      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d102      	bne.n	8001e52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	e004      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d134      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d003      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0xac>
 8001e78:	e005      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e7c:	617b      	str	r3, [r7, #20]
      break;
 8001e7e:	e005      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e82:	617b      	str	r3, [r7, #20]
      break;
 8001e84:	e002      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	617b      	str	r3, [r7, #20]
      break;
 8001e8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	3301      	adds	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	fb02 f203 	mul.w	r2, r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	0e5b      	lsrs	r3, r3, #25
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08003350 	.word	0x08003350
 8001ee4:	00f42400 	.word	0x00f42400
 8001ee8:	007a1200 	.word	0x007a1200

08001eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f04:	f7ff fa28 	bl	8001358 <HAL_PWREx_GetVoltageRange>
 8001f08:	6178      	str	r0, [r7, #20]
 8001f0a:	e014      	b.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6593      	str	r3, [r2, #88]	; 0x58
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f24:	f7ff fa18 	bl	8001358 <HAL_PWREx_GetVoltageRange>
 8001f28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f3c:	d10b      	bne.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d919      	bls.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2ba0      	cmp	r3, #160	; 0xa0
 8001f48:	d902      	bls.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e013      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f50:	2301      	movs	r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	e010      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b80      	cmp	r3, #128	; 0x80
 8001f5a:	d902      	bls.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e00a      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b80      	cmp	r3, #128	; 0x80
 8001f66:	d102      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e004      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b70      	cmp	r3, #112	; 0x70
 8001f72:	d101      	bne.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f74:	2301      	movs	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 0207 	bic.w	r2, r3, #7
 8001f80:	4909      	ldr	r1, [pc, #36]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d001      	beq.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e049      	b.n	8002052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fc80 	bl	80008d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4610      	mov	r0, r2
 8001fec:	f000 fab6 	bl	800255c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d001      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e04f      	b.n	8002114 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a23      	ldr	r2, [pc, #140]	; (8002120 <HAL_TIM_Base_Start_IT+0xc4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01d      	beq.n	80020d2 <HAL_TIM_Base_Start_IT+0x76>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209e:	d018      	beq.n	80020d2 <HAL_TIM_Base_Start_IT+0x76>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HAL_TIM_Base_Start_IT+0xc8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_TIM_Base_Start_IT+0x76>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <HAL_TIM_Base_Start_IT+0xcc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00e      	beq.n	80020d2 <HAL_TIM_Base_Start_IT+0x76>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1c      	ldr	r2, [pc, #112]	; (800212c <HAL_TIM_Base_Start_IT+0xd0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d009      	beq.n	80020d2 <HAL_TIM_Base_Start_IT+0x76>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <HAL_TIM_Base_Start_IT+0xd4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d004      	beq.n	80020d2 <HAL_TIM_Base_Start_IT+0x76>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_TIM_Base_Start_IT+0xd8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d115      	bne.n	80020fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <HAL_TIM_Base_Start_IT+0xdc>)
 80020da:	4013      	ands	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	d015      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0xb4>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ea:	d011      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fc:	e008      	b.n	8002110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e000      	b.n	8002112 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40012c00 	.word	0x40012c00
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800
 800212c:	40000c00 	.word	0x40000c00
 8002130:	40013400 	.word	0x40013400
 8002134:	40014000 	.word	0x40014000
 8002138:	00010007 	.word	0x00010007

0800213c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b02      	cmp	r3, #2
 8002150:	d122      	bne.n	8002198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b02      	cmp	r3, #2
 800215e:	d11b      	bne.n	8002198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0202 	mvn.w	r2, #2
 8002168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f9ce 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f9c0 	bl	800250c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f9d1 	bl	8002534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d122      	bne.n	80021ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d11b      	bne.n	80021ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0204 	mvn.w	r2, #4
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f9a4 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f996 	bl	800250c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f9a7 	bl	8002534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d122      	bne.n	8002240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b08      	cmp	r3, #8
 8002206:	d11b      	bne.n	8002240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0208 	mvn.w	r2, #8
 8002210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2204      	movs	r2, #4
 8002216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f97a 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 800222c:	e005      	b.n	800223a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f96c 	bl	800250c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f97d 	bl	8002534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b10      	cmp	r3, #16
 800224c:	d122      	bne.n	8002294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b10      	cmp	r3, #16
 800225a:	d11b      	bne.n	8002294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0210 	mvn.w	r2, #16
 8002264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2208      	movs	r2, #8
 800226a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f950 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 8002280:	e005      	b.n	800228e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f942 	bl	800250c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f953 	bl	8002534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0201 	mvn.w	r2, #1
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fac2 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ca:	2b80      	cmp	r3, #128	; 0x80
 80022cc:	d10e      	bne.n	80022ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d107      	bne.n	80022ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fafe 	bl	80028e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fa:	d10e      	bne.n	800231a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002306:	2b80      	cmp	r3, #128	; 0x80
 8002308:	d107      	bne.n	800231a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 faf1 	bl	80028fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b40      	cmp	r3, #64	; 0x40
 8002326:	d10e      	bne.n	8002346 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b40      	cmp	r3, #64	; 0x40
 8002334:	d107      	bne.n	8002346 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800233e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f901 	bl	8002548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b20      	cmp	r3, #32
 8002352:	d10e      	bne.n	8002372 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b20      	cmp	r3, #32
 8002360:	d107      	bne.n	8002372 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f06f 0220 	mvn.w	r2, #32
 800236a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fab1 	bl	80028d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_TIM_ConfigClockSource+0x1c>
 8002392:	2302      	movs	r3, #2
 8002394:	e0b6      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x18a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2202      	movs	r2, #2
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d2:	d03e      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0xd8>
 80023d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d8:	f200 8087 	bhi.w	80024ea <HAL_TIM_ConfigClockSource+0x170>
 80023dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e0:	f000 8086 	beq.w	80024f0 <HAL_TIM_ConfigClockSource+0x176>
 80023e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e8:	d87f      	bhi.n	80024ea <HAL_TIM_ConfigClockSource+0x170>
 80023ea:	2b70      	cmp	r3, #112	; 0x70
 80023ec:	d01a      	beq.n	8002424 <HAL_TIM_ConfigClockSource+0xaa>
 80023ee:	2b70      	cmp	r3, #112	; 0x70
 80023f0:	d87b      	bhi.n	80024ea <HAL_TIM_ConfigClockSource+0x170>
 80023f2:	2b60      	cmp	r3, #96	; 0x60
 80023f4:	d050      	beq.n	8002498 <HAL_TIM_ConfigClockSource+0x11e>
 80023f6:	2b60      	cmp	r3, #96	; 0x60
 80023f8:	d877      	bhi.n	80024ea <HAL_TIM_ConfigClockSource+0x170>
 80023fa:	2b50      	cmp	r3, #80	; 0x50
 80023fc:	d03c      	beq.n	8002478 <HAL_TIM_ConfigClockSource+0xfe>
 80023fe:	2b50      	cmp	r3, #80	; 0x50
 8002400:	d873      	bhi.n	80024ea <HAL_TIM_ConfigClockSource+0x170>
 8002402:	2b40      	cmp	r3, #64	; 0x40
 8002404:	d058      	beq.n	80024b8 <HAL_TIM_ConfigClockSource+0x13e>
 8002406:	2b40      	cmp	r3, #64	; 0x40
 8002408:	d86f      	bhi.n	80024ea <HAL_TIM_ConfigClockSource+0x170>
 800240a:	2b30      	cmp	r3, #48	; 0x30
 800240c:	d064      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x15e>
 800240e:	2b30      	cmp	r3, #48	; 0x30
 8002410:	d86b      	bhi.n	80024ea <HAL_TIM_ConfigClockSource+0x170>
 8002412:	2b20      	cmp	r3, #32
 8002414:	d060      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x15e>
 8002416:	2b20      	cmp	r3, #32
 8002418:	d867      	bhi.n	80024ea <HAL_TIM_ConfigClockSource+0x170>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d05c      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x15e>
 800241e:	2b10      	cmp	r3, #16
 8002420:	d05a      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x15e>
 8002422:	e062      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6899      	ldr	r1, [r3, #8]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f000 f9a6 	bl	8002784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002446:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	609a      	str	r2, [r3, #8]
      break;
 8002450:	e04f      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f000 f98f 	bl	8002784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002474:	609a      	str	r2, [r3, #8]
      break;
 8002476:	e03c      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	461a      	mov	r2, r3
 8002486:	f000 f903 	bl	8002690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2150      	movs	r1, #80	; 0x50
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f95c 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 8002496:	e02c      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	461a      	mov	r2, r3
 80024a6:	f000 f922 	bl	80026ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2160      	movs	r1, #96	; 0x60
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f94c 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 80024b6:	e01c      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	461a      	mov	r2, r3
 80024c6:	f000 f8e3 	bl	8002690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2140      	movs	r1, #64	; 0x40
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f93c 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 80024d6:	e00c      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f000 f933 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 80024e8:	e003      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      break;
 80024ee:	e000      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80024f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002502:	7bfb      	ldrb	r3, [r7, #15]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a40      	ldr	r2, [pc, #256]	; (8002670 <TIM_Base_SetConfig+0x114>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d013      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257a:	d00f      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <TIM_Base_SetConfig+0x118>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00b      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a3c      	ldr	r2, [pc, #240]	; (8002678 <TIM_Base_SetConfig+0x11c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d007      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a3b      	ldr	r2, [pc, #236]	; (800267c <TIM_Base_SetConfig+0x120>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <TIM_Base_SetConfig+0x124>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d108      	bne.n	80025ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a2f      	ldr	r2, [pc, #188]	; (8002670 <TIM_Base_SetConfig+0x114>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01f      	beq.n	80025f6 <TIM_Base_SetConfig+0x9a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d01b      	beq.n	80025f6 <TIM_Base_SetConfig+0x9a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a2c      	ldr	r2, [pc, #176]	; (8002674 <TIM_Base_SetConfig+0x118>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d017      	beq.n	80025f6 <TIM_Base_SetConfig+0x9a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a2b      	ldr	r2, [pc, #172]	; (8002678 <TIM_Base_SetConfig+0x11c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <TIM_Base_SetConfig+0x9a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a2a      	ldr	r2, [pc, #168]	; (800267c <TIM_Base_SetConfig+0x120>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00f      	beq.n	80025f6 <TIM_Base_SetConfig+0x9a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a29      	ldr	r2, [pc, #164]	; (8002680 <TIM_Base_SetConfig+0x124>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00b      	beq.n	80025f6 <TIM_Base_SetConfig+0x9a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a28      	ldr	r2, [pc, #160]	; (8002684 <TIM_Base_SetConfig+0x128>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <TIM_Base_SetConfig+0x9a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a27      	ldr	r2, [pc, #156]	; (8002688 <TIM_Base_SetConfig+0x12c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d003      	beq.n	80025f6 <TIM_Base_SetConfig+0x9a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a26      	ldr	r2, [pc, #152]	; (800268c <TIM_Base_SetConfig+0x130>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d108      	bne.n	8002608 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a10      	ldr	r2, [pc, #64]	; (8002670 <TIM_Base_SetConfig+0x114>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00f      	beq.n	8002654 <TIM_Base_SetConfig+0xf8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <TIM_Base_SetConfig+0x124>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00b      	beq.n	8002654 <TIM_Base_SetConfig+0xf8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a11      	ldr	r2, [pc, #68]	; (8002684 <TIM_Base_SetConfig+0x128>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d007      	beq.n	8002654 <TIM_Base_SetConfig+0xf8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a10      	ldr	r2, [pc, #64]	; (8002688 <TIM_Base_SetConfig+0x12c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d003      	beq.n	8002654 <TIM_Base_SetConfig+0xf8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a0f      	ldr	r2, [pc, #60]	; (800268c <TIM_Base_SetConfig+0x130>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d103      	bne.n	800265c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	615a      	str	r2, [r3, #20]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40000400 	.word	0x40000400
 8002678:	40000800 	.word	0x40000800
 800267c:	40000c00 	.word	0x40000c00
 8002680:	40013400 	.word	0x40013400
 8002684:	40014000 	.word	0x40014000
 8002688:	40014400 	.word	0x40014400
 800268c:	40014800 	.word	0x40014800

08002690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f023 0201 	bic.w	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f023 030a 	bic.w	r3, r3, #10
 80026cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	621a      	str	r2, [r3, #32]
}
 80026e2:	bf00      	nop
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b087      	sub	sp, #28
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	f023 0210 	bic.w	r2, r3, #16
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	031b      	lsls	r3, r3, #12
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800272a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	621a      	str	r2, [r3, #32]
}
 8002742:	bf00      	nop
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	f043 0307 	orr.w	r3, r3, #7
 8002770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800279e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	021a      	lsls	r2, r3, #8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	609a      	str	r2, [r3, #8]
}
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027d8:	2302      	movs	r3, #2
 80027da:	e068      	b.n	80028ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a2e      	ldr	r2, [pc, #184]	; (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d004      	beq.n	8002810 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2d      	ldr	r2, [pc, #180]	; (80028c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d108      	bne.n	8002822 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002816:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002828:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01d      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284e:	d018      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a13      	ldr	r2, [pc, #76]	; (80028c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10c      	bne.n	800289c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	4313      	orrs	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40013400 	.word	0x40013400
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40014000 	.word	0x40014000

080028d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <__errno>:
 8002910:	4b01      	ldr	r3, [pc, #4]	; (8002918 <__errno+0x8>)
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	2000000c 	.word	0x2000000c

0800291c <__libc_init_array>:
 800291c:	b570      	push	{r4, r5, r6, lr}
 800291e:	4d0d      	ldr	r5, [pc, #52]	; (8002954 <__libc_init_array+0x38>)
 8002920:	4c0d      	ldr	r4, [pc, #52]	; (8002958 <__libc_init_array+0x3c>)
 8002922:	1b64      	subs	r4, r4, r5
 8002924:	10a4      	asrs	r4, r4, #2
 8002926:	2600      	movs	r6, #0
 8002928:	42a6      	cmp	r6, r4
 800292a:	d109      	bne.n	8002940 <__libc_init_array+0x24>
 800292c:	4d0b      	ldr	r5, [pc, #44]	; (800295c <__libc_init_array+0x40>)
 800292e:	4c0c      	ldr	r4, [pc, #48]	; (8002960 <__libc_init_array+0x44>)
 8002930:	f000 fce6 	bl	8003300 <_init>
 8002934:	1b64      	subs	r4, r4, r5
 8002936:	10a4      	asrs	r4, r4, #2
 8002938:	2600      	movs	r6, #0
 800293a:	42a6      	cmp	r6, r4
 800293c:	d105      	bne.n	800294a <__libc_init_array+0x2e>
 800293e:	bd70      	pop	{r4, r5, r6, pc}
 8002940:	f855 3b04 	ldr.w	r3, [r5], #4
 8002944:	4798      	blx	r3
 8002946:	3601      	adds	r6, #1
 8002948:	e7ee      	b.n	8002928 <__libc_init_array+0xc>
 800294a:	f855 3b04 	ldr.w	r3, [r5], #4
 800294e:	4798      	blx	r3
 8002950:	3601      	adds	r6, #1
 8002952:	e7f2      	b.n	800293a <__libc_init_array+0x1e>
 8002954:	080033e4 	.word	0x080033e4
 8002958:	080033e4 	.word	0x080033e4
 800295c:	080033e4 	.word	0x080033e4
 8002960:	080033e8 	.word	0x080033e8

08002964 <memset>:
 8002964:	4402      	add	r2, r0
 8002966:	4603      	mov	r3, r0
 8002968:	4293      	cmp	r3, r2
 800296a:	d100      	bne.n	800296e <memset+0xa>
 800296c:	4770      	bx	lr
 800296e:	f803 1b01 	strb.w	r1, [r3], #1
 8002972:	e7f9      	b.n	8002968 <memset+0x4>

08002974 <_puts_r>:
 8002974:	b570      	push	{r4, r5, r6, lr}
 8002976:	460e      	mov	r6, r1
 8002978:	4605      	mov	r5, r0
 800297a:	b118      	cbz	r0, 8002984 <_puts_r+0x10>
 800297c:	6983      	ldr	r3, [r0, #24]
 800297e:	b90b      	cbnz	r3, 8002984 <_puts_r+0x10>
 8002980:	f000 fa48 	bl	8002e14 <__sinit>
 8002984:	69ab      	ldr	r3, [r5, #24]
 8002986:	68ac      	ldr	r4, [r5, #8]
 8002988:	b913      	cbnz	r3, 8002990 <_puts_r+0x1c>
 800298a:	4628      	mov	r0, r5
 800298c:	f000 fa42 	bl	8002e14 <__sinit>
 8002990:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <_puts_r+0xd0>)
 8002992:	429c      	cmp	r4, r3
 8002994:	d120      	bne.n	80029d8 <_puts_r+0x64>
 8002996:	686c      	ldr	r4, [r5, #4]
 8002998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800299a:	07db      	lsls	r3, r3, #31
 800299c:	d405      	bmi.n	80029aa <_puts_r+0x36>
 800299e:	89a3      	ldrh	r3, [r4, #12]
 80029a0:	0598      	lsls	r0, r3, #22
 80029a2:	d402      	bmi.n	80029aa <_puts_r+0x36>
 80029a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029a6:	f000 fad3 	bl	8002f50 <__retarget_lock_acquire_recursive>
 80029aa:	89a3      	ldrh	r3, [r4, #12]
 80029ac:	0719      	lsls	r1, r3, #28
 80029ae:	d51d      	bpl.n	80029ec <_puts_r+0x78>
 80029b0:	6923      	ldr	r3, [r4, #16]
 80029b2:	b1db      	cbz	r3, 80029ec <_puts_r+0x78>
 80029b4:	3e01      	subs	r6, #1
 80029b6:	68a3      	ldr	r3, [r4, #8]
 80029b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80029bc:	3b01      	subs	r3, #1
 80029be:	60a3      	str	r3, [r4, #8]
 80029c0:	bb39      	cbnz	r1, 8002a12 <_puts_r+0x9e>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da38      	bge.n	8002a38 <_puts_r+0xc4>
 80029c6:	4622      	mov	r2, r4
 80029c8:	210a      	movs	r1, #10
 80029ca:	4628      	mov	r0, r5
 80029cc:	f000 f848 	bl	8002a60 <__swbuf_r>
 80029d0:	3001      	adds	r0, #1
 80029d2:	d011      	beq.n	80029f8 <_puts_r+0x84>
 80029d4:	250a      	movs	r5, #10
 80029d6:	e011      	b.n	80029fc <_puts_r+0x88>
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <_puts_r+0xd4>)
 80029da:	429c      	cmp	r4, r3
 80029dc:	d101      	bne.n	80029e2 <_puts_r+0x6e>
 80029de:	68ac      	ldr	r4, [r5, #8]
 80029e0:	e7da      	b.n	8002998 <_puts_r+0x24>
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <_puts_r+0xd8>)
 80029e4:	429c      	cmp	r4, r3
 80029e6:	bf08      	it	eq
 80029e8:	68ec      	ldreq	r4, [r5, #12]
 80029ea:	e7d5      	b.n	8002998 <_puts_r+0x24>
 80029ec:	4621      	mov	r1, r4
 80029ee:	4628      	mov	r0, r5
 80029f0:	f000 f888 	bl	8002b04 <__swsetup_r>
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d0dd      	beq.n	80029b4 <_puts_r+0x40>
 80029f8:	f04f 35ff 	mov.w	r5, #4294967295
 80029fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029fe:	07da      	lsls	r2, r3, #31
 8002a00:	d405      	bmi.n	8002a0e <_puts_r+0x9a>
 8002a02:	89a3      	ldrh	r3, [r4, #12]
 8002a04:	059b      	lsls	r3, r3, #22
 8002a06:	d402      	bmi.n	8002a0e <_puts_r+0x9a>
 8002a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a0a:	f000 faa2 	bl	8002f52 <__retarget_lock_release_recursive>
 8002a0e:	4628      	mov	r0, r5
 8002a10:	bd70      	pop	{r4, r5, r6, pc}
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	da04      	bge.n	8002a20 <_puts_r+0xac>
 8002a16:	69a2      	ldr	r2, [r4, #24]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	dc06      	bgt.n	8002a2a <_puts_r+0xb6>
 8002a1c:	290a      	cmp	r1, #10
 8002a1e:	d004      	beq.n	8002a2a <_puts_r+0xb6>
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	6022      	str	r2, [r4, #0]
 8002a26:	7019      	strb	r1, [r3, #0]
 8002a28:	e7c5      	b.n	80029b6 <_puts_r+0x42>
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	f000 f817 	bl	8002a60 <__swbuf_r>
 8002a32:	3001      	adds	r0, #1
 8002a34:	d1bf      	bne.n	80029b6 <_puts_r+0x42>
 8002a36:	e7df      	b.n	80029f8 <_puts_r+0x84>
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	250a      	movs	r5, #10
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	6022      	str	r2, [r4, #0]
 8002a40:	701d      	strb	r5, [r3, #0]
 8002a42:	e7db      	b.n	80029fc <_puts_r+0x88>
 8002a44:	080033a4 	.word	0x080033a4
 8002a48:	080033c4 	.word	0x080033c4
 8002a4c:	08003384 	.word	0x08003384

08002a50 <puts>:
 8002a50:	4b02      	ldr	r3, [pc, #8]	; (8002a5c <puts+0xc>)
 8002a52:	4601      	mov	r1, r0
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	f7ff bf8d 	b.w	8002974 <_puts_r>
 8002a5a:	bf00      	nop
 8002a5c:	2000000c 	.word	0x2000000c

08002a60 <__swbuf_r>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	460e      	mov	r6, r1
 8002a64:	4614      	mov	r4, r2
 8002a66:	4605      	mov	r5, r0
 8002a68:	b118      	cbz	r0, 8002a72 <__swbuf_r+0x12>
 8002a6a:	6983      	ldr	r3, [r0, #24]
 8002a6c:	b90b      	cbnz	r3, 8002a72 <__swbuf_r+0x12>
 8002a6e:	f000 f9d1 	bl	8002e14 <__sinit>
 8002a72:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <__swbuf_r+0x98>)
 8002a74:	429c      	cmp	r4, r3
 8002a76:	d12b      	bne.n	8002ad0 <__swbuf_r+0x70>
 8002a78:	686c      	ldr	r4, [r5, #4]
 8002a7a:	69a3      	ldr	r3, [r4, #24]
 8002a7c:	60a3      	str	r3, [r4, #8]
 8002a7e:	89a3      	ldrh	r3, [r4, #12]
 8002a80:	071a      	lsls	r2, r3, #28
 8002a82:	d52f      	bpl.n	8002ae4 <__swbuf_r+0x84>
 8002a84:	6923      	ldr	r3, [r4, #16]
 8002a86:	b36b      	cbz	r3, 8002ae4 <__swbuf_r+0x84>
 8002a88:	6923      	ldr	r3, [r4, #16]
 8002a8a:	6820      	ldr	r0, [r4, #0]
 8002a8c:	1ac0      	subs	r0, r0, r3
 8002a8e:	6963      	ldr	r3, [r4, #20]
 8002a90:	b2f6      	uxtb	r6, r6
 8002a92:	4283      	cmp	r3, r0
 8002a94:	4637      	mov	r7, r6
 8002a96:	dc04      	bgt.n	8002aa2 <__swbuf_r+0x42>
 8002a98:	4621      	mov	r1, r4
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	f000 f926 	bl	8002cec <_fflush_r>
 8002aa0:	bb30      	cbnz	r0, 8002af0 <__swbuf_r+0x90>
 8002aa2:	68a3      	ldr	r3, [r4, #8]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60a3      	str	r3, [r4, #8]
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	6022      	str	r2, [r4, #0]
 8002aae:	701e      	strb	r6, [r3, #0]
 8002ab0:	6963      	ldr	r3, [r4, #20]
 8002ab2:	3001      	adds	r0, #1
 8002ab4:	4283      	cmp	r3, r0
 8002ab6:	d004      	beq.n	8002ac2 <__swbuf_r+0x62>
 8002ab8:	89a3      	ldrh	r3, [r4, #12]
 8002aba:	07db      	lsls	r3, r3, #31
 8002abc:	d506      	bpl.n	8002acc <__swbuf_r+0x6c>
 8002abe:	2e0a      	cmp	r6, #10
 8002ac0:	d104      	bne.n	8002acc <__swbuf_r+0x6c>
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f000 f911 	bl	8002cec <_fflush_r>
 8002aca:	b988      	cbnz	r0, 8002af0 <__swbuf_r+0x90>
 8002acc:	4638      	mov	r0, r7
 8002ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <__swbuf_r+0x9c>)
 8002ad2:	429c      	cmp	r4, r3
 8002ad4:	d101      	bne.n	8002ada <__swbuf_r+0x7a>
 8002ad6:	68ac      	ldr	r4, [r5, #8]
 8002ad8:	e7cf      	b.n	8002a7a <__swbuf_r+0x1a>
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <__swbuf_r+0xa0>)
 8002adc:	429c      	cmp	r4, r3
 8002ade:	bf08      	it	eq
 8002ae0:	68ec      	ldreq	r4, [r5, #12]
 8002ae2:	e7ca      	b.n	8002a7a <__swbuf_r+0x1a>
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	f000 f80c 	bl	8002b04 <__swsetup_r>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	d0cb      	beq.n	8002a88 <__swbuf_r+0x28>
 8002af0:	f04f 37ff 	mov.w	r7, #4294967295
 8002af4:	e7ea      	b.n	8002acc <__swbuf_r+0x6c>
 8002af6:	bf00      	nop
 8002af8:	080033a4 	.word	0x080033a4
 8002afc:	080033c4 	.word	0x080033c4
 8002b00:	08003384 	.word	0x08003384

08002b04 <__swsetup_r>:
 8002b04:	4b32      	ldr	r3, [pc, #200]	; (8002bd0 <__swsetup_r+0xcc>)
 8002b06:	b570      	push	{r4, r5, r6, lr}
 8002b08:	681d      	ldr	r5, [r3, #0]
 8002b0a:	4606      	mov	r6, r0
 8002b0c:	460c      	mov	r4, r1
 8002b0e:	b125      	cbz	r5, 8002b1a <__swsetup_r+0x16>
 8002b10:	69ab      	ldr	r3, [r5, #24]
 8002b12:	b913      	cbnz	r3, 8002b1a <__swsetup_r+0x16>
 8002b14:	4628      	mov	r0, r5
 8002b16:	f000 f97d 	bl	8002e14 <__sinit>
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <__swsetup_r+0xd0>)
 8002b1c:	429c      	cmp	r4, r3
 8002b1e:	d10f      	bne.n	8002b40 <__swsetup_r+0x3c>
 8002b20:	686c      	ldr	r4, [r5, #4]
 8002b22:	89a3      	ldrh	r3, [r4, #12]
 8002b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b28:	0719      	lsls	r1, r3, #28
 8002b2a:	d42c      	bmi.n	8002b86 <__swsetup_r+0x82>
 8002b2c:	06dd      	lsls	r5, r3, #27
 8002b2e:	d411      	bmi.n	8002b54 <__swsetup_r+0x50>
 8002b30:	2309      	movs	r3, #9
 8002b32:	6033      	str	r3, [r6, #0]
 8002b34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b38:	81a3      	strh	r3, [r4, #12]
 8002b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3e:	e03e      	b.n	8002bbe <__swsetup_r+0xba>
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <__swsetup_r+0xd4>)
 8002b42:	429c      	cmp	r4, r3
 8002b44:	d101      	bne.n	8002b4a <__swsetup_r+0x46>
 8002b46:	68ac      	ldr	r4, [r5, #8]
 8002b48:	e7eb      	b.n	8002b22 <__swsetup_r+0x1e>
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <__swsetup_r+0xd8>)
 8002b4c:	429c      	cmp	r4, r3
 8002b4e:	bf08      	it	eq
 8002b50:	68ec      	ldreq	r4, [r5, #12]
 8002b52:	e7e6      	b.n	8002b22 <__swsetup_r+0x1e>
 8002b54:	0758      	lsls	r0, r3, #29
 8002b56:	d512      	bpl.n	8002b7e <__swsetup_r+0x7a>
 8002b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b5a:	b141      	cbz	r1, 8002b6e <__swsetup_r+0x6a>
 8002b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b60:	4299      	cmp	r1, r3
 8002b62:	d002      	beq.n	8002b6a <__swsetup_r+0x66>
 8002b64:	4630      	mov	r0, r6
 8002b66:	f000 fa59 	bl	800301c <_free_r>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6363      	str	r3, [r4, #52]	; 0x34
 8002b6e:	89a3      	ldrh	r3, [r4, #12]
 8002b70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b74:	81a3      	strh	r3, [r4, #12]
 8002b76:	2300      	movs	r3, #0
 8002b78:	6063      	str	r3, [r4, #4]
 8002b7a:	6923      	ldr	r3, [r4, #16]
 8002b7c:	6023      	str	r3, [r4, #0]
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	f043 0308 	orr.w	r3, r3, #8
 8002b84:	81a3      	strh	r3, [r4, #12]
 8002b86:	6923      	ldr	r3, [r4, #16]
 8002b88:	b94b      	cbnz	r3, 8002b9e <__swsetup_r+0x9a>
 8002b8a:	89a3      	ldrh	r3, [r4, #12]
 8002b8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b94:	d003      	beq.n	8002b9e <__swsetup_r+0x9a>
 8002b96:	4621      	mov	r1, r4
 8002b98:	4630      	mov	r0, r6
 8002b9a:	f000 f9ff 	bl	8002f9c <__smakebuf_r>
 8002b9e:	89a0      	ldrh	r0, [r4, #12]
 8002ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ba4:	f010 0301 	ands.w	r3, r0, #1
 8002ba8:	d00a      	beq.n	8002bc0 <__swsetup_r+0xbc>
 8002baa:	2300      	movs	r3, #0
 8002bac:	60a3      	str	r3, [r4, #8]
 8002bae:	6963      	ldr	r3, [r4, #20]
 8002bb0:	425b      	negs	r3, r3
 8002bb2:	61a3      	str	r3, [r4, #24]
 8002bb4:	6923      	ldr	r3, [r4, #16]
 8002bb6:	b943      	cbnz	r3, 8002bca <__swsetup_r+0xc6>
 8002bb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002bbc:	d1ba      	bne.n	8002b34 <__swsetup_r+0x30>
 8002bbe:	bd70      	pop	{r4, r5, r6, pc}
 8002bc0:	0781      	lsls	r1, r0, #30
 8002bc2:	bf58      	it	pl
 8002bc4:	6963      	ldrpl	r3, [r4, #20]
 8002bc6:	60a3      	str	r3, [r4, #8]
 8002bc8:	e7f4      	b.n	8002bb4 <__swsetup_r+0xb0>
 8002bca:	2000      	movs	r0, #0
 8002bcc:	e7f7      	b.n	8002bbe <__swsetup_r+0xba>
 8002bce:	bf00      	nop
 8002bd0:	2000000c 	.word	0x2000000c
 8002bd4:	080033a4 	.word	0x080033a4
 8002bd8:	080033c4 	.word	0x080033c4
 8002bdc:	08003384 	.word	0x08003384

08002be0 <__sflush_r>:
 8002be0:	898a      	ldrh	r2, [r1, #12]
 8002be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002be6:	4605      	mov	r5, r0
 8002be8:	0710      	lsls	r0, r2, #28
 8002bea:	460c      	mov	r4, r1
 8002bec:	d458      	bmi.n	8002ca0 <__sflush_r+0xc0>
 8002bee:	684b      	ldr	r3, [r1, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	dc05      	bgt.n	8002c00 <__sflush_r+0x20>
 8002bf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	dc02      	bgt.n	8002c00 <__sflush_r+0x20>
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c02:	2e00      	cmp	r6, #0
 8002c04:	d0f9      	beq.n	8002bfa <__sflush_r+0x1a>
 8002c06:	2300      	movs	r3, #0
 8002c08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002c0c:	682f      	ldr	r7, [r5, #0]
 8002c0e:	602b      	str	r3, [r5, #0]
 8002c10:	d032      	beq.n	8002c78 <__sflush_r+0x98>
 8002c12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c14:	89a3      	ldrh	r3, [r4, #12]
 8002c16:	075a      	lsls	r2, r3, #29
 8002c18:	d505      	bpl.n	8002c26 <__sflush_r+0x46>
 8002c1a:	6863      	ldr	r3, [r4, #4]
 8002c1c:	1ac0      	subs	r0, r0, r3
 8002c1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c20:	b10b      	cbz	r3, 8002c26 <__sflush_r+0x46>
 8002c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c24:	1ac0      	subs	r0, r0, r3
 8002c26:	2300      	movs	r3, #0
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c2c:	6a21      	ldr	r1, [r4, #32]
 8002c2e:	4628      	mov	r0, r5
 8002c30:	47b0      	blx	r6
 8002c32:	1c43      	adds	r3, r0, #1
 8002c34:	89a3      	ldrh	r3, [r4, #12]
 8002c36:	d106      	bne.n	8002c46 <__sflush_r+0x66>
 8002c38:	6829      	ldr	r1, [r5, #0]
 8002c3a:	291d      	cmp	r1, #29
 8002c3c:	d82c      	bhi.n	8002c98 <__sflush_r+0xb8>
 8002c3e:	4a2a      	ldr	r2, [pc, #168]	; (8002ce8 <__sflush_r+0x108>)
 8002c40:	40ca      	lsrs	r2, r1
 8002c42:	07d6      	lsls	r6, r2, #31
 8002c44:	d528      	bpl.n	8002c98 <__sflush_r+0xb8>
 8002c46:	2200      	movs	r2, #0
 8002c48:	6062      	str	r2, [r4, #4]
 8002c4a:	04d9      	lsls	r1, r3, #19
 8002c4c:	6922      	ldr	r2, [r4, #16]
 8002c4e:	6022      	str	r2, [r4, #0]
 8002c50:	d504      	bpl.n	8002c5c <__sflush_r+0x7c>
 8002c52:	1c42      	adds	r2, r0, #1
 8002c54:	d101      	bne.n	8002c5a <__sflush_r+0x7a>
 8002c56:	682b      	ldr	r3, [r5, #0]
 8002c58:	b903      	cbnz	r3, 8002c5c <__sflush_r+0x7c>
 8002c5a:	6560      	str	r0, [r4, #84]	; 0x54
 8002c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c5e:	602f      	str	r7, [r5, #0]
 8002c60:	2900      	cmp	r1, #0
 8002c62:	d0ca      	beq.n	8002bfa <__sflush_r+0x1a>
 8002c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c68:	4299      	cmp	r1, r3
 8002c6a:	d002      	beq.n	8002c72 <__sflush_r+0x92>
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f000 f9d5 	bl	800301c <_free_r>
 8002c72:	2000      	movs	r0, #0
 8002c74:	6360      	str	r0, [r4, #52]	; 0x34
 8002c76:	e7c1      	b.n	8002bfc <__sflush_r+0x1c>
 8002c78:	6a21      	ldr	r1, [r4, #32]
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	47b0      	blx	r6
 8002c80:	1c41      	adds	r1, r0, #1
 8002c82:	d1c7      	bne.n	8002c14 <__sflush_r+0x34>
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0c4      	beq.n	8002c14 <__sflush_r+0x34>
 8002c8a:	2b1d      	cmp	r3, #29
 8002c8c:	d001      	beq.n	8002c92 <__sflush_r+0xb2>
 8002c8e:	2b16      	cmp	r3, #22
 8002c90:	d101      	bne.n	8002c96 <__sflush_r+0xb6>
 8002c92:	602f      	str	r7, [r5, #0]
 8002c94:	e7b1      	b.n	8002bfa <__sflush_r+0x1a>
 8002c96:	89a3      	ldrh	r3, [r4, #12]
 8002c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9c:	81a3      	strh	r3, [r4, #12]
 8002c9e:	e7ad      	b.n	8002bfc <__sflush_r+0x1c>
 8002ca0:	690f      	ldr	r7, [r1, #16]
 8002ca2:	2f00      	cmp	r7, #0
 8002ca4:	d0a9      	beq.n	8002bfa <__sflush_r+0x1a>
 8002ca6:	0793      	lsls	r3, r2, #30
 8002ca8:	680e      	ldr	r6, [r1, #0]
 8002caa:	bf08      	it	eq
 8002cac:	694b      	ldreq	r3, [r1, #20]
 8002cae:	600f      	str	r7, [r1, #0]
 8002cb0:	bf18      	it	ne
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	eba6 0807 	sub.w	r8, r6, r7
 8002cb8:	608b      	str	r3, [r1, #8]
 8002cba:	f1b8 0f00 	cmp.w	r8, #0
 8002cbe:	dd9c      	ble.n	8002bfa <__sflush_r+0x1a>
 8002cc0:	6a21      	ldr	r1, [r4, #32]
 8002cc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002cc4:	4643      	mov	r3, r8
 8002cc6:	463a      	mov	r2, r7
 8002cc8:	4628      	mov	r0, r5
 8002cca:	47b0      	blx	r6
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	dc06      	bgt.n	8002cde <__sflush_r+0xfe>
 8002cd0:	89a3      	ldrh	r3, [r4, #12]
 8002cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cd6:	81a3      	strh	r3, [r4, #12]
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cdc:	e78e      	b.n	8002bfc <__sflush_r+0x1c>
 8002cde:	4407      	add	r7, r0
 8002ce0:	eba8 0800 	sub.w	r8, r8, r0
 8002ce4:	e7e9      	b.n	8002cba <__sflush_r+0xda>
 8002ce6:	bf00      	nop
 8002ce8:	20400001 	.word	0x20400001

08002cec <_fflush_r>:
 8002cec:	b538      	push	{r3, r4, r5, lr}
 8002cee:	690b      	ldr	r3, [r1, #16]
 8002cf0:	4605      	mov	r5, r0
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	b913      	cbnz	r3, 8002cfc <_fflush_r+0x10>
 8002cf6:	2500      	movs	r5, #0
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	bd38      	pop	{r3, r4, r5, pc}
 8002cfc:	b118      	cbz	r0, 8002d06 <_fflush_r+0x1a>
 8002cfe:	6983      	ldr	r3, [r0, #24]
 8002d00:	b90b      	cbnz	r3, 8002d06 <_fflush_r+0x1a>
 8002d02:	f000 f887 	bl	8002e14 <__sinit>
 8002d06:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <_fflush_r+0x6c>)
 8002d08:	429c      	cmp	r4, r3
 8002d0a:	d11b      	bne.n	8002d44 <_fflush_r+0x58>
 8002d0c:	686c      	ldr	r4, [r5, #4]
 8002d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0ef      	beq.n	8002cf6 <_fflush_r+0xa>
 8002d16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d18:	07d0      	lsls	r0, r2, #31
 8002d1a:	d404      	bmi.n	8002d26 <_fflush_r+0x3a>
 8002d1c:	0599      	lsls	r1, r3, #22
 8002d1e:	d402      	bmi.n	8002d26 <_fflush_r+0x3a>
 8002d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d22:	f000 f915 	bl	8002f50 <__retarget_lock_acquire_recursive>
 8002d26:	4628      	mov	r0, r5
 8002d28:	4621      	mov	r1, r4
 8002d2a:	f7ff ff59 	bl	8002be0 <__sflush_r>
 8002d2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d30:	07da      	lsls	r2, r3, #31
 8002d32:	4605      	mov	r5, r0
 8002d34:	d4e0      	bmi.n	8002cf8 <_fflush_r+0xc>
 8002d36:	89a3      	ldrh	r3, [r4, #12]
 8002d38:	059b      	lsls	r3, r3, #22
 8002d3a:	d4dd      	bmi.n	8002cf8 <_fflush_r+0xc>
 8002d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d3e:	f000 f908 	bl	8002f52 <__retarget_lock_release_recursive>
 8002d42:	e7d9      	b.n	8002cf8 <_fflush_r+0xc>
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <_fflush_r+0x70>)
 8002d46:	429c      	cmp	r4, r3
 8002d48:	d101      	bne.n	8002d4e <_fflush_r+0x62>
 8002d4a:	68ac      	ldr	r4, [r5, #8]
 8002d4c:	e7df      	b.n	8002d0e <_fflush_r+0x22>
 8002d4e:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <_fflush_r+0x74>)
 8002d50:	429c      	cmp	r4, r3
 8002d52:	bf08      	it	eq
 8002d54:	68ec      	ldreq	r4, [r5, #12]
 8002d56:	e7da      	b.n	8002d0e <_fflush_r+0x22>
 8002d58:	080033a4 	.word	0x080033a4
 8002d5c:	080033c4 	.word	0x080033c4
 8002d60:	08003384 	.word	0x08003384

08002d64 <std>:
 8002d64:	2300      	movs	r3, #0
 8002d66:	b510      	push	{r4, lr}
 8002d68:	4604      	mov	r4, r0
 8002d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d72:	6083      	str	r3, [r0, #8]
 8002d74:	8181      	strh	r1, [r0, #12]
 8002d76:	6643      	str	r3, [r0, #100]	; 0x64
 8002d78:	81c2      	strh	r2, [r0, #14]
 8002d7a:	6183      	str	r3, [r0, #24]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	2208      	movs	r2, #8
 8002d80:	305c      	adds	r0, #92	; 0x5c
 8002d82:	f7ff fdef 	bl	8002964 <memset>
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <std+0x38>)
 8002d88:	6263      	str	r3, [r4, #36]	; 0x24
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <std+0x3c>)
 8002d8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <std+0x40>)
 8002d90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <std+0x44>)
 8002d94:	6224      	str	r4, [r4, #32]
 8002d96:	6323      	str	r3, [r4, #48]	; 0x30
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	bf00      	nop
 8002d9c:	08003191 	.word	0x08003191
 8002da0:	080031b3 	.word	0x080031b3
 8002da4:	080031eb 	.word	0x080031eb
 8002da8:	0800320f 	.word	0x0800320f

08002dac <_cleanup_r>:
 8002dac:	4901      	ldr	r1, [pc, #4]	; (8002db4 <_cleanup_r+0x8>)
 8002dae:	f000 b8af 	b.w	8002f10 <_fwalk_reent>
 8002db2:	bf00      	nop
 8002db4:	08002ced 	.word	0x08002ced

08002db8 <__sfmoreglue>:
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	1e4a      	subs	r2, r1, #1
 8002dbc:	2568      	movs	r5, #104	; 0x68
 8002dbe:	4355      	muls	r5, r2
 8002dc0:	460e      	mov	r6, r1
 8002dc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002dc6:	f000 f979 	bl	80030bc <_malloc_r>
 8002dca:	4604      	mov	r4, r0
 8002dcc:	b140      	cbz	r0, 8002de0 <__sfmoreglue+0x28>
 8002dce:	2100      	movs	r1, #0
 8002dd0:	e9c0 1600 	strd	r1, r6, [r0]
 8002dd4:	300c      	adds	r0, #12
 8002dd6:	60a0      	str	r0, [r4, #8]
 8002dd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ddc:	f7ff fdc2 	bl	8002964 <memset>
 8002de0:	4620      	mov	r0, r4
 8002de2:	bd70      	pop	{r4, r5, r6, pc}

08002de4 <__sfp_lock_acquire>:
 8002de4:	4801      	ldr	r0, [pc, #4]	; (8002dec <__sfp_lock_acquire+0x8>)
 8002de6:	f000 b8b3 	b.w	8002f50 <__retarget_lock_acquire_recursive>
 8002dea:	bf00      	nop
 8002dec:	2000013c 	.word	0x2000013c

08002df0 <__sfp_lock_release>:
 8002df0:	4801      	ldr	r0, [pc, #4]	; (8002df8 <__sfp_lock_release+0x8>)
 8002df2:	f000 b8ae 	b.w	8002f52 <__retarget_lock_release_recursive>
 8002df6:	bf00      	nop
 8002df8:	2000013c 	.word	0x2000013c

08002dfc <__sinit_lock_acquire>:
 8002dfc:	4801      	ldr	r0, [pc, #4]	; (8002e04 <__sinit_lock_acquire+0x8>)
 8002dfe:	f000 b8a7 	b.w	8002f50 <__retarget_lock_acquire_recursive>
 8002e02:	bf00      	nop
 8002e04:	20000137 	.word	0x20000137

08002e08 <__sinit_lock_release>:
 8002e08:	4801      	ldr	r0, [pc, #4]	; (8002e10 <__sinit_lock_release+0x8>)
 8002e0a:	f000 b8a2 	b.w	8002f52 <__retarget_lock_release_recursive>
 8002e0e:	bf00      	nop
 8002e10:	20000137 	.word	0x20000137

08002e14 <__sinit>:
 8002e14:	b510      	push	{r4, lr}
 8002e16:	4604      	mov	r4, r0
 8002e18:	f7ff fff0 	bl	8002dfc <__sinit_lock_acquire>
 8002e1c:	69a3      	ldr	r3, [r4, #24]
 8002e1e:	b11b      	cbz	r3, 8002e28 <__sinit+0x14>
 8002e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e24:	f7ff bff0 	b.w	8002e08 <__sinit_lock_release>
 8002e28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e2c:	6523      	str	r3, [r4, #80]	; 0x50
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <__sinit+0x68>)
 8002e30:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <__sinit+0x6c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e36:	42a3      	cmp	r3, r4
 8002e38:	bf04      	itt	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	61a3      	streq	r3, [r4, #24]
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f000 f820 	bl	8002e84 <__sfp>
 8002e44:	6060      	str	r0, [r4, #4]
 8002e46:	4620      	mov	r0, r4
 8002e48:	f000 f81c 	bl	8002e84 <__sfp>
 8002e4c:	60a0      	str	r0, [r4, #8]
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f000 f818 	bl	8002e84 <__sfp>
 8002e54:	2200      	movs	r2, #0
 8002e56:	60e0      	str	r0, [r4, #12]
 8002e58:	2104      	movs	r1, #4
 8002e5a:	6860      	ldr	r0, [r4, #4]
 8002e5c:	f7ff ff82 	bl	8002d64 <std>
 8002e60:	68a0      	ldr	r0, [r4, #8]
 8002e62:	2201      	movs	r2, #1
 8002e64:	2109      	movs	r1, #9
 8002e66:	f7ff ff7d 	bl	8002d64 <std>
 8002e6a:	68e0      	ldr	r0, [r4, #12]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	2112      	movs	r1, #18
 8002e70:	f7ff ff78 	bl	8002d64 <std>
 8002e74:	2301      	movs	r3, #1
 8002e76:	61a3      	str	r3, [r4, #24]
 8002e78:	e7d2      	b.n	8002e20 <__sinit+0xc>
 8002e7a:	bf00      	nop
 8002e7c:	08003380 	.word	0x08003380
 8002e80:	08002dad 	.word	0x08002dad

08002e84 <__sfp>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	4607      	mov	r7, r0
 8002e88:	f7ff ffac 	bl	8002de4 <__sfp_lock_acquire>
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <__sfp+0x84>)
 8002e8e:	681e      	ldr	r6, [r3, #0]
 8002e90:	69b3      	ldr	r3, [r6, #24]
 8002e92:	b913      	cbnz	r3, 8002e9a <__sfp+0x16>
 8002e94:	4630      	mov	r0, r6
 8002e96:	f7ff ffbd 	bl	8002e14 <__sinit>
 8002e9a:	3648      	adds	r6, #72	; 0x48
 8002e9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	d503      	bpl.n	8002eac <__sfp+0x28>
 8002ea4:	6833      	ldr	r3, [r6, #0]
 8002ea6:	b30b      	cbz	r3, 8002eec <__sfp+0x68>
 8002ea8:	6836      	ldr	r6, [r6, #0]
 8002eaa:	e7f7      	b.n	8002e9c <__sfp+0x18>
 8002eac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002eb0:	b9d5      	cbnz	r5, 8002ee8 <__sfp+0x64>
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <__sfp+0x88>)
 8002eb4:	60e3      	str	r3, [r4, #12]
 8002eb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002eba:	6665      	str	r5, [r4, #100]	; 0x64
 8002ebc:	f000 f847 	bl	8002f4e <__retarget_lock_init_recursive>
 8002ec0:	f7ff ff96 	bl	8002df0 <__sfp_lock_release>
 8002ec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002ec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ecc:	6025      	str	r5, [r4, #0]
 8002ece:	61a5      	str	r5, [r4, #24]
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	4629      	mov	r1, r5
 8002ed4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ed8:	f7ff fd44 	bl	8002964 <memset>
 8002edc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ee8:	3468      	adds	r4, #104	; 0x68
 8002eea:	e7d9      	b.n	8002ea0 <__sfp+0x1c>
 8002eec:	2104      	movs	r1, #4
 8002eee:	4638      	mov	r0, r7
 8002ef0:	f7ff ff62 	bl	8002db8 <__sfmoreglue>
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	6030      	str	r0, [r6, #0]
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	d1d5      	bne.n	8002ea8 <__sfp+0x24>
 8002efc:	f7ff ff78 	bl	8002df0 <__sfp_lock_release>
 8002f00:	230c      	movs	r3, #12
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	e7ee      	b.n	8002ee4 <__sfp+0x60>
 8002f06:	bf00      	nop
 8002f08:	08003380 	.word	0x08003380
 8002f0c:	ffff0001 	.word	0xffff0001

08002f10 <_fwalk_reent>:
 8002f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f14:	4606      	mov	r6, r0
 8002f16:	4688      	mov	r8, r1
 8002f18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f1c:	2700      	movs	r7, #0
 8002f1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f22:	f1b9 0901 	subs.w	r9, r9, #1
 8002f26:	d505      	bpl.n	8002f34 <_fwalk_reent+0x24>
 8002f28:	6824      	ldr	r4, [r4, #0]
 8002f2a:	2c00      	cmp	r4, #0
 8002f2c:	d1f7      	bne.n	8002f1e <_fwalk_reent+0xe>
 8002f2e:	4638      	mov	r0, r7
 8002f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f34:	89ab      	ldrh	r3, [r5, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d907      	bls.n	8002f4a <_fwalk_reent+0x3a>
 8002f3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	d003      	beq.n	8002f4a <_fwalk_reent+0x3a>
 8002f42:	4629      	mov	r1, r5
 8002f44:	4630      	mov	r0, r6
 8002f46:	47c0      	blx	r8
 8002f48:	4307      	orrs	r7, r0
 8002f4a:	3568      	adds	r5, #104	; 0x68
 8002f4c:	e7e9      	b.n	8002f22 <_fwalk_reent+0x12>

08002f4e <__retarget_lock_init_recursive>:
 8002f4e:	4770      	bx	lr

08002f50 <__retarget_lock_acquire_recursive>:
 8002f50:	4770      	bx	lr

08002f52 <__retarget_lock_release_recursive>:
 8002f52:	4770      	bx	lr

08002f54 <__swhatbuf_r>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	460e      	mov	r6, r1
 8002f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f5c:	2900      	cmp	r1, #0
 8002f5e:	b096      	sub	sp, #88	; 0x58
 8002f60:	4614      	mov	r4, r2
 8002f62:	461d      	mov	r5, r3
 8002f64:	da07      	bge.n	8002f76 <__swhatbuf_r+0x22>
 8002f66:	2300      	movs	r3, #0
 8002f68:	602b      	str	r3, [r5, #0]
 8002f6a:	89b3      	ldrh	r3, [r6, #12]
 8002f6c:	061a      	lsls	r2, r3, #24
 8002f6e:	d410      	bmi.n	8002f92 <__swhatbuf_r+0x3e>
 8002f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f74:	e00e      	b.n	8002f94 <__swhatbuf_r+0x40>
 8002f76:	466a      	mov	r2, sp
 8002f78:	f000 f970 	bl	800325c <_fstat_r>
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	dbf2      	blt.n	8002f66 <__swhatbuf_r+0x12>
 8002f80:	9a01      	ldr	r2, [sp, #4]
 8002f82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f8a:	425a      	negs	r2, r3
 8002f8c:	415a      	adcs	r2, r3
 8002f8e:	602a      	str	r2, [r5, #0]
 8002f90:	e7ee      	b.n	8002f70 <__swhatbuf_r+0x1c>
 8002f92:	2340      	movs	r3, #64	; 0x40
 8002f94:	2000      	movs	r0, #0
 8002f96:	6023      	str	r3, [r4, #0]
 8002f98:	b016      	add	sp, #88	; 0x58
 8002f9a:	bd70      	pop	{r4, r5, r6, pc}

08002f9c <__smakebuf_r>:
 8002f9c:	898b      	ldrh	r3, [r1, #12]
 8002f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fa0:	079d      	lsls	r5, r3, #30
 8002fa2:	4606      	mov	r6, r0
 8002fa4:	460c      	mov	r4, r1
 8002fa6:	d507      	bpl.n	8002fb8 <__smakebuf_r+0x1c>
 8002fa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	6123      	str	r3, [r4, #16]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	6163      	str	r3, [r4, #20]
 8002fb4:	b002      	add	sp, #8
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	ab01      	add	r3, sp, #4
 8002fba:	466a      	mov	r2, sp
 8002fbc:	f7ff ffca 	bl	8002f54 <__swhatbuf_r>
 8002fc0:	9900      	ldr	r1, [sp, #0]
 8002fc2:	4605      	mov	r5, r0
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	f000 f879 	bl	80030bc <_malloc_r>
 8002fca:	b948      	cbnz	r0, 8002fe0 <__smakebuf_r+0x44>
 8002fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fd0:	059a      	lsls	r2, r3, #22
 8002fd2:	d4ef      	bmi.n	8002fb4 <__smakebuf_r+0x18>
 8002fd4:	f023 0303 	bic.w	r3, r3, #3
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	81a3      	strh	r3, [r4, #12]
 8002fde:	e7e3      	b.n	8002fa8 <__smakebuf_r+0xc>
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <__smakebuf_r+0x7c>)
 8002fe2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	6020      	str	r0, [r4, #0]
 8002fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fec:	81a3      	strh	r3, [r4, #12]
 8002fee:	9b00      	ldr	r3, [sp, #0]
 8002ff0:	6163      	str	r3, [r4, #20]
 8002ff2:	9b01      	ldr	r3, [sp, #4]
 8002ff4:	6120      	str	r0, [r4, #16]
 8002ff6:	b15b      	cbz	r3, 8003010 <__smakebuf_r+0x74>
 8002ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ffc:	4630      	mov	r0, r6
 8002ffe:	f000 f93f 	bl	8003280 <_isatty_r>
 8003002:	b128      	cbz	r0, 8003010 <__smakebuf_r+0x74>
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	81a3      	strh	r3, [r4, #12]
 8003010:	89a0      	ldrh	r0, [r4, #12]
 8003012:	4305      	orrs	r5, r0
 8003014:	81a5      	strh	r5, [r4, #12]
 8003016:	e7cd      	b.n	8002fb4 <__smakebuf_r+0x18>
 8003018:	08002dad 	.word	0x08002dad

0800301c <_free_r>:
 800301c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800301e:	2900      	cmp	r1, #0
 8003020:	d048      	beq.n	80030b4 <_free_r+0x98>
 8003022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003026:	9001      	str	r0, [sp, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f1a1 0404 	sub.w	r4, r1, #4
 800302e:	bfb8      	it	lt
 8003030:	18e4      	addlt	r4, r4, r3
 8003032:	f000 f947 	bl	80032c4 <__malloc_lock>
 8003036:	4a20      	ldr	r2, [pc, #128]	; (80030b8 <_free_r+0x9c>)
 8003038:	9801      	ldr	r0, [sp, #4]
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	4615      	mov	r5, r2
 800303e:	b933      	cbnz	r3, 800304e <_free_r+0x32>
 8003040:	6063      	str	r3, [r4, #4]
 8003042:	6014      	str	r4, [r2, #0]
 8003044:	b003      	add	sp, #12
 8003046:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800304a:	f000 b941 	b.w	80032d0 <__malloc_unlock>
 800304e:	42a3      	cmp	r3, r4
 8003050:	d90b      	bls.n	800306a <_free_r+0x4e>
 8003052:	6821      	ldr	r1, [r4, #0]
 8003054:	1862      	adds	r2, r4, r1
 8003056:	4293      	cmp	r3, r2
 8003058:	bf04      	itt	eq
 800305a:	681a      	ldreq	r2, [r3, #0]
 800305c:	685b      	ldreq	r3, [r3, #4]
 800305e:	6063      	str	r3, [r4, #4]
 8003060:	bf04      	itt	eq
 8003062:	1852      	addeq	r2, r2, r1
 8003064:	6022      	streq	r2, [r4, #0]
 8003066:	602c      	str	r4, [r5, #0]
 8003068:	e7ec      	b.n	8003044 <_free_r+0x28>
 800306a:	461a      	mov	r2, r3
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b10b      	cbz	r3, 8003074 <_free_r+0x58>
 8003070:	42a3      	cmp	r3, r4
 8003072:	d9fa      	bls.n	800306a <_free_r+0x4e>
 8003074:	6811      	ldr	r1, [r2, #0]
 8003076:	1855      	adds	r5, r2, r1
 8003078:	42a5      	cmp	r5, r4
 800307a:	d10b      	bne.n	8003094 <_free_r+0x78>
 800307c:	6824      	ldr	r4, [r4, #0]
 800307e:	4421      	add	r1, r4
 8003080:	1854      	adds	r4, r2, r1
 8003082:	42a3      	cmp	r3, r4
 8003084:	6011      	str	r1, [r2, #0]
 8003086:	d1dd      	bne.n	8003044 <_free_r+0x28>
 8003088:	681c      	ldr	r4, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	6053      	str	r3, [r2, #4]
 800308e:	4421      	add	r1, r4
 8003090:	6011      	str	r1, [r2, #0]
 8003092:	e7d7      	b.n	8003044 <_free_r+0x28>
 8003094:	d902      	bls.n	800309c <_free_r+0x80>
 8003096:	230c      	movs	r3, #12
 8003098:	6003      	str	r3, [r0, #0]
 800309a:	e7d3      	b.n	8003044 <_free_r+0x28>
 800309c:	6825      	ldr	r5, [r4, #0]
 800309e:	1961      	adds	r1, r4, r5
 80030a0:	428b      	cmp	r3, r1
 80030a2:	bf04      	itt	eq
 80030a4:	6819      	ldreq	r1, [r3, #0]
 80030a6:	685b      	ldreq	r3, [r3, #4]
 80030a8:	6063      	str	r3, [r4, #4]
 80030aa:	bf04      	itt	eq
 80030ac:	1949      	addeq	r1, r1, r5
 80030ae:	6021      	streq	r1, [r4, #0]
 80030b0:	6054      	str	r4, [r2, #4]
 80030b2:	e7c7      	b.n	8003044 <_free_r+0x28>
 80030b4:	b003      	add	sp, #12
 80030b6:	bd30      	pop	{r4, r5, pc}
 80030b8:	20000090 	.word	0x20000090

080030bc <_malloc_r>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	1ccd      	adds	r5, r1, #3
 80030c0:	f025 0503 	bic.w	r5, r5, #3
 80030c4:	3508      	adds	r5, #8
 80030c6:	2d0c      	cmp	r5, #12
 80030c8:	bf38      	it	cc
 80030ca:	250c      	movcc	r5, #12
 80030cc:	2d00      	cmp	r5, #0
 80030ce:	4606      	mov	r6, r0
 80030d0:	db01      	blt.n	80030d6 <_malloc_r+0x1a>
 80030d2:	42a9      	cmp	r1, r5
 80030d4:	d903      	bls.n	80030de <_malloc_r+0x22>
 80030d6:	230c      	movs	r3, #12
 80030d8:	6033      	str	r3, [r6, #0]
 80030da:	2000      	movs	r0, #0
 80030dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030de:	f000 f8f1 	bl	80032c4 <__malloc_lock>
 80030e2:	4921      	ldr	r1, [pc, #132]	; (8003168 <_malloc_r+0xac>)
 80030e4:	680a      	ldr	r2, [r1, #0]
 80030e6:	4614      	mov	r4, r2
 80030e8:	b99c      	cbnz	r4, 8003112 <_malloc_r+0x56>
 80030ea:	4f20      	ldr	r7, [pc, #128]	; (800316c <_malloc_r+0xb0>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b923      	cbnz	r3, 80030fa <_malloc_r+0x3e>
 80030f0:	4621      	mov	r1, r4
 80030f2:	4630      	mov	r0, r6
 80030f4:	f000 f83c 	bl	8003170 <_sbrk_r>
 80030f8:	6038      	str	r0, [r7, #0]
 80030fa:	4629      	mov	r1, r5
 80030fc:	4630      	mov	r0, r6
 80030fe:	f000 f837 	bl	8003170 <_sbrk_r>
 8003102:	1c43      	adds	r3, r0, #1
 8003104:	d123      	bne.n	800314e <_malloc_r+0x92>
 8003106:	230c      	movs	r3, #12
 8003108:	6033      	str	r3, [r6, #0]
 800310a:	4630      	mov	r0, r6
 800310c:	f000 f8e0 	bl	80032d0 <__malloc_unlock>
 8003110:	e7e3      	b.n	80030da <_malloc_r+0x1e>
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	1b5b      	subs	r3, r3, r5
 8003116:	d417      	bmi.n	8003148 <_malloc_r+0x8c>
 8003118:	2b0b      	cmp	r3, #11
 800311a:	d903      	bls.n	8003124 <_malloc_r+0x68>
 800311c:	6023      	str	r3, [r4, #0]
 800311e:	441c      	add	r4, r3
 8003120:	6025      	str	r5, [r4, #0]
 8003122:	e004      	b.n	800312e <_malloc_r+0x72>
 8003124:	6863      	ldr	r3, [r4, #4]
 8003126:	42a2      	cmp	r2, r4
 8003128:	bf0c      	ite	eq
 800312a:	600b      	streq	r3, [r1, #0]
 800312c:	6053      	strne	r3, [r2, #4]
 800312e:	4630      	mov	r0, r6
 8003130:	f000 f8ce 	bl	80032d0 <__malloc_unlock>
 8003134:	f104 000b 	add.w	r0, r4, #11
 8003138:	1d23      	adds	r3, r4, #4
 800313a:	f020 0007 	bic.w	r0, r0, #7
 800313e:	1ac2      	subs	r2, r0, r3
 8003140:	d0cc      	beq.n	80030dc <_malloc_r+0x20>
 8003142:	1a1b      	subs	r3, r3, r0
 8003144:	50a3      	str	r3, [r4, r2]
 8003146:	e7c9      	b.n	80030dc <_malloc_r+0x20>
 8003148:	4622      	mov	r2, r4
 800314a:	6864      	ldr	r4, [r4, #4]
 800314c:	e7cc      	b.n	80030e8 <_malloc_r+0x2c>
 800314e:	1cc4      	adds	r4, r0, #3
 8003150:	f024 0403 	bic.w	r4, r4, #3
 8003154:	42a0      	cmp	r0, r4
 8003156:	d0e3      	beq.n	8003120 <_malloc_r+0x64>
 8003158:	1a21      	subs	r1, r4, r0
 800315a:	4630      	mov	r0, r6
 800315c:	f000 f808 	bl	8003170 <_sbrk_r>
 8003160:	3001      	adds	r0, #1
 8003162:	d1dd      	bne.n	8003120 <_malloc_r+0x64>
 8003164:	e7cf      	b.n	8003106 <_malloc_r+0x4a>
 8003166:	bf00      	nop
 8003168:	20000090 	.word	0x20000090
 800316c:	20000094 	.word	0x20000094

08003170 <_sbrk_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	4d06      	ldr	r5, [pc, #24]	; (800318c <_sbrk_r+0x1c>)
 8003174:	2300      	movs	r3, #0
 8003176:	4604      	mov	r4, r0
 8003178:	4608      	mov	r0, r1
 800317a:	602b      	str	r3, [r5, #0]
 800317c:	f7fd fd0e 	bl	8000b9c <_sbrk>
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	d102      	bne.n	800318a <_sbrk_r+0x1a>
 8003184:	682b      	ldr	r3, [r5, #0]
 8003186:	b103      	cbz	r3, 800318a <_sbrk_r+0x1a>
 8003188:	6023      	str	r3, [r4, #0]
 800318a:	bd38      	pop	{r3, r4, r5, pc}
 800318c:	20000140 	.word	0x20000140

08003190 <__sread>:
 8003190:	b510      	push	{r4, lr}
 8003192:	460c      	mov	r4, r1
 8003194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003198:	f000 f8a0 	bl	80032dc <_read_r>
 800319c:	2800      	cmp	r0, #0
 800319e:	bfab      	itete	ge
 80031a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031a2:	89a3      	ldrhlt	r3, [r4, #12]
 80031a4:	181b      	addge	r3, r3, r0
 80031a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031aa:	bfac      	ite	ge
 80031ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80031ae:	81a3      	strhlt	r3, [r4, #12]
 80031b0:	bd10      	pop	{r4, pc}

080031b2 <__swrite>:
 80031b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b6:	461f      	mov	r7, r3
 80031b8:	898b      	ldrh	r3, [r1, #12]
 80031ba:	05db      	lsls	r3, r3, #23
 80031bc:	4605      	mov	r5, r0
 80031be:	460c      	mov	r4, r1
 80031c0:	4616      	mov	r6, r2
 80031c2:	d505      	bpl.n	80031d0 <__swrite+0x1e>
 80031c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031c8:	2302      	movs	r3, #2
 80031ca:	2200      	movs	r2, #0
 80031cc:	f000 f868 	bl	80032a0 <_lseek_r>
 80031d0:	89a3      	ldrh	r3, [r4, #12]
 80031d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031da:	81a3      	strh	r3, [r4, #12]
 80031dc:	4632      	mov	r2, r6
 80031de:	463b      	mov	r3, r7
 80031e0:	4628      	mov	r0, r5
 80031e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031e6:	f000 b817 	b.w	8003218 <_write_r>

080031ea <__sseek>:
 80031ea:	b510      	push	{r4, lr}
 80031ec:	460c      	mov	r4, r1
 80031ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031f2:	f000 f855 	bl	80032a0 <_lseek_r>
 80031f6:	1c43      	adds	r3, r0, #1
 80031f8:	89a3      	ldrh	r3, [r4, #12]
 80031fa:	bf15      	itete	ne
 80031fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80031fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003206:	81a3      	strheq	r3, [r4, #12]
 8003208:	bf18      	it	ne
 800320a:	81a3      	strhne	r3, [r4, #12]
 800320c:	bd10      	pop	{r4, pc}

0800320e <__sclose>:
 800320e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003212:	f000 b813 	b.w	800323c <_close_r>
	...

08003218 <_write_r>:
 8003218:	b538      	push	{r3, r4, r5, lr}
 800321a:	4d07      	ldr	r5, [pc, #28]	; (8003238 <_write_r+0x20>)
 800321c:	4604      	mov	r4, r0
 800321e:	4608      	mov	r0, r1
 8003220:	4611      	mov	r1, r2
 8003222:	2200      	movs	r2, #0
 8003224:	602a      	str	r2, [r5, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	f7fd fc67 	bl	8000afa <_write>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d102      	bne.n	8003236 <_write_r+0x1e>
 8003230:	682b      	ldr	r3, [r5, #0]
 8003232:	b103      	cbz	r3, 8003236 <_write_r+0x1e>
 8003234:	6023      	str	r3, [r4, #0]
 8003236:	bd38      	pop	{r3, r4, r5, pc}
 8003238:	20000140 	.word	0x20000140

0800323c <_close_r>:
 800323c:	b538      	push	{r3, r4, r5, lr}
 800323e:	4d06      	ldr	r5, [pc, #24]	; (8003258 <_close_r+0x1c>)
 8003240:	2300      	movs	r3, #0
 8003242:	4604      	mov	r4, r0
 8003244:	4608      	mov	r0, r1
 8003246:	602b      	str	r3, [r5, #0]
 8003248:	f7fd fc73 	bl	8000b32 <_close>
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	d102      	bne.n	8003256 <_close_r+0x1a>
 8003250:	682b      	ldr	r3, [r5, #0]
 8003252:	b103      	cbz	r3, 8003256 <_close_r+0x1a>
 8003254:	6023      	str	r3, [r4, #0]
 8003256:	bd38      	pop	{r3, r4, r5, pc}
 8003258:	20000140 	.word	0x20000140

0800325c <_fstat_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	4d07      	ldr	r5, [pc, #28]	; (800327c <_fstat_r+0x20>)
 8003260:	2300      	movs	r3, #0
 8003262:	4604      	mov	r4, r0
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	602b      	str	r3, [r5, #0]
 800326a:	f7fd fc6e 	bl	8000b4a <_fstat>
 800326e:	1c43      	adds	r3, r0, #1
 8003270:	d102      	bne.n	8003278 <_fstat_r+0x1c>
 8003272:	682b      	ldr	r3, [r5, #0]
 8003274:	b103      	cbz	r3, 8003278 <_fstat_r+0x1c>
 8003276:	6023      	str	r3, [r4, #0]
 8003278:	bd38      	pop	{r3, r4, r5, pc}
 800327a:	bf00      	nop
 800327c:	20000140 	.word	0x20000140

08003280 <_isatty_r>:
 8003280:	b538      	push	{r3, r4, r5, lr}
 8003282:	4d06      	ldr	r5, [pc, #24]	; (800329c <_isatty_r+0x1c>)
 8003284:	2300      	movs	r3, #0
 8003286:	4604      	mov	r4, r0
 8003288:	4608      	mov	r0, r1
 800328a:	602b      	str	r3, [r5, #0]
 800328c:	f7fd fc6d 	bl	8000b6a <_isatty>
 8003290:	1c43      	adds	r3, r0, #1
 8003292:	d102      	bne.n	800329a <_isatty_r+0x1a>
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	b103      	cbz	r3, 800329a <_isatty_r+0x1a>
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	bd38      	pop	{r3, r4, r5, pc}
 800329c:	20000140 	.word	0x20000140

080032a0 <_lseek_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4d07      	ldr	r5, [pc, #28]	; (80032c0 <_lseek_r+0x20>)
 80032a4:	4604      	mov	r4, r0
 80032a6:	4608      	mov	r0, r1
 80032a8:	4611      	mov	r1, r2
 80032aa:	2200      	movs	r2, #0
 80032ac:	602a      	str	r2, [r5, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f7fd fc66 	bl	8000b80 <_lseek>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d102      	bne.n	80032be <_lseek_r+0x1e>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	b103      	cbz	r3, 80032be <_lseek_r+0x1e>
 80032bc:	6023      	str	r3, [r4, #0]
 80032be:	bd38      	pop	{r3, r4, r5, pc}
 80032c0:	20000140 	.word	0x20000140

080032c4 <__malloc_lock>:
 80032c4:	4801      	ldr	r0, [pc, #4]	; (80032cc <__malloc_lock+0x8>)
 80032c6:	f7ff be43 	b.w	8002f50 <__retarget_lock_acquire_recursive>
 80032ca:	bf00      	nop
 80032cc:	20000138 	.word	0x20000138

080032d0 <__malloc_unlock>:
 80032d0:	4801      	ldr	r0, [pc, #4]	; (80032d8 <__malloc_unlock+0x8>)
 80032d2:	f7ff be3e 	b.w	8002f52 <__retarget_lock_release_recursive>
 80032d6:	bf00      	nop
 80032d8:	20000138 	.word	0x20000138

080032dc <_read_r>:
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	4d07      	ldr	r5, [pc, #28]	; (80032fc <_read_r+0x20>)
 80032e0:	4604      	mov	r4, r0
 80032e2:	4608      	mov	r0, r1
 80032e4:	4611      	mov	r1, r2
 80032e6:	2200      	movs	r2, #0
 80032e8:	602a      	str	r2, [r5, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f7fd fbe8 	bl	8000ac0 <_read>
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	d102      	bne.n	80032fa <_read_r+0x1e>
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	b103      	cbz	r3, 80032fa <_read_r+0x1e>
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	bd38      	pop	{r3, r4, r5, pc}
 80032fc:	20000140 	.word	0x20000140

08003300 <_init>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	bf00      	nop
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr

0800330c <_fini>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	bf00      	nop
 8003310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003312:	bc08      	pop	{r3}
 8003314:	469e      	mov	lr, r3
 8003316:	4770      	bx	lr
