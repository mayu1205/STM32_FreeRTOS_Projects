
day7_bsp_humidity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b38  08006b38  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b40  08006b40  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b40  08006b40  00016b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08006b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000012c  08006c74  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08006c74  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c02  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002924  00000000  00000000  00034d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00037688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00038530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283d1  00000000  00000000  000392b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001244a  00000000  00000000  00061681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef262  00000000  00000000  00073acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162d2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000454c  00000000  00000000  00162d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000012c 	.word	0x2000012c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006890 	.word	0x08006890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000130 	.word	0x20000130
 80001cc:	08006890 	.word	0x08006890

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	; 0x30
 8000934:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f001 faac 	bl	8001e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f93f 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 f9ff 	bl	8000d40 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000942:	f000 f98d 	bl	8000c60 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000946:	f000 f9cb 	bl	8000ce0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //printf("****** Temperature values measurement ******\n\n\r");

  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	4984      	ldr	r1, [pc, #528]	; (8000b64 <main+0x234>)
 8000952:	4885      	ldr	r0, [pc, #532]	; (8000b68 <main+0x238>)
 8000954:	f004 f8b8 	bl	8004ac8 <HAL_UART_Transmit>

  //printf("=====> Initialize Temperature sensor HTS221 \r\n");

  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8000958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095c:	222f      	movs	r2, #47	; 0x2f
 800095e:	4983      	ldr	r1, [pc, #524]	; (8000b6c <main+0x23c>)
 8000960:	4881      	ldr	r0, [pc, #516]	; (8000b68 <main+0x238>)
 8000962:	f004 f8b1 	bl	8004ac8 <HAL_UART_Transmit>

  BSP_TSENSOR_Init();
 8000966:	f001 f815 	bl	8001994 <BSP_TSENSOR_Init>

  //printf("=====> Temperature sensor HTS221 initialized \r\n ");

  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	2231      	movs	r2, #49	; 0x31
 8000970:	497f      	ldr	r1, [pc, #508]	; (8000b70 <main+0x240>)
 8000972:	487d      	ldr	r0, [pc, #500]	; (8000b68 <main+0x238>)
 8000974:	f004 f8a8 	bl	8004ac8 <HAL_UART_Transmit>
  printf("****** Temperature values measurement ******\n\n\r");
 8000978:	487e      	ldr	r0, [pc, #504]	; (8000b74 <main+0x244>)
 800097a:	f004 fda5 	bl	80054c8 <iprintf>

  printf("=====> Initialize Temperature sensor HTS221 \r\n");
 800097e:	487e      	ldr	r0, [pc, #504]	; (8000b78 <main+0x248>)
 8000980:	f004 fe28 	bl	80055d4 <puts>

  BSP_TSENSOR_Init();
 8000984:	f001 f806 	bl	8001994 <BSP_TSENSOR_Init>
  printf("****** HUMIDITY values measurement ******\n\n\r");
 8000988:	487c      	ldr	r0, [pc, #496]	; (8000b7c <main+0x24c>)
 800098a:	f004 fd9d 	bl	80054c8 <iprintf>

    printf("=====> Initialize HUMIDITY sensor HTS221 \r\n");
 800098e:	487c      	ldr	r0, [pc, #496]	; (8000b80 <main+0x250>)
 8000990:	f004 fe20 	bl	80055d4 <puts>
  BSP_HSENSOR_Init();
 8000994:	f000 ffa2 	bl	80018dc <BSP_HSENSOR_Init>
  printf("****** PRESSURE values measurement ******\n\n\r");
 8000998:	487a      	ldr	r0, [pc, #488]	; (8000b84 <main+0x254>)
 800099a:	f004 fd95 	bl	80054c8 <iprintf>

    printf("=====> Initialize PRESSURE sensor HTS221 \r\n");
 800099e:	487a      	ldr	r0, [pc, #488]	; (8000b88 <main+0x258>)
 80009a0:	f004 fe18 	bl	80055d4 <puts>
  BSP_PSENSOR_Init();
 80009a4:	f000 ffc8 	bl	8001938 <BSP_PSENSOR_Init>

  printf("=====> Temperature sensor HTS221 initialized \r\n ");
 80009a8:	4878      	ldr	r0, [pc, #480]	; (8000b8c <main+0x25c>)
 80009aa:	f004 fd8d 	bl	80054c8 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  temp_value = BSP_TSENSOR_ReadTemp();
 80009ae:	f001 f80d 	bl	80019cc <BSP_TSENSOR_ReadTemp>
 80009b2:	eef0 7a40 	vmov.f32	s15, s0
 80009b6:	4b76      	ldr	r3, [pc, #472]	; (8000b90 <main+0x260>)
 80009b8:	edc3 7a00 	vstr	s15, [r3]

	  int tmpInt1 = temp_value;
 80009bc:	4b74      	ldr	r3, [pc, #464]	; (8000b90 <main+0x260>)
 80009be:	edd3 7a00 	vldr	s15, [r3]
 80009c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009c6:	ee17 3a90 	vmov	r3, s15
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24

	  float tmpFrac = temp_value - tmpInt1;
 80009cc:	4b70      	ldr	r3, [pc, #448]	; (8000b90 <main+0x260>)
 80009ce:	ed93 7a00 	vldr	s14, [r3]
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009e0:	edc7 7a08 	vstr	s15, [r7, #32]

	  int tmpInt2 = trunc(tmpFrac * 100);
 80009e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80009e8:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8000b94 <main+0x264>
 80009ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f0:	ee17 0a90 	vmov	r0, s15
 80009f4:	f7ff fda0 	bl	8000538 <__aeabi_f2d>
 80009f8:	4602      	mov	r2, r0
 80009fa:	460b      	mov	r3, r1
 80009fc:	ec43 2b10 	vmov	d0, r2, r3
 8000a00:	f005 ff14 	bl	800682c <trunc>
 8000a04:	ec53 2b10 	vmov	r2, r3, d0
 8000a08:	4610      	mov	r0, r2
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f7ff fdec 	bl	80005e8 <__aeabi_d2iz>
 8000a10:	4603      	mov	r3, r0
 8000a12:	61fb      	str	r3, [r7, #28]

	  printf(" TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
 8000a14:	69fa      	ldr	r2, [r7, #28]
 8000a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a18:	485f      	ldr	r0, [pc, #380]	; (8000b98 <main+0x268>)
 8000a1a:	f004 fd55 	bl	80054c8 <iprintf>

	  //printf(" TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);

	  snprintf(str_tmp,100," TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	4a5c      	ldr	r2, [pc, #368]	; (8000b98 <main+0x268>)
 8000a26:	2164      	movs	r1, #100	; 0x64
 8000a28:	485c      	ldr	r0, [pc, #368]	; (8000b9c <main+0x26c>)
 8000a2a:	f004 fddb 	bl	80055e4 <sniprintf>

	  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	2264      	movs	r2, #100	; 0x64
 8000a34:	4959      	ldr	r1, [pc, #356]	; (8000b9c <main+0x26c>)
 8000a36:	484c      	ldr	r0, [pc, #304]	; (8000b68 <main+0x238>)
 8000a38:	f004 f846 	bl	8004ac8 <HAL_UART_Transmit>

	 // HAL_Delay(3000);
	 // HAL_Delay(3000);


	  hum_value = BSP_HSENSOR_ReadHumidity();
 8000a3c:	f000 ff6e 	bl	800191c <BSP_HSENSOR_ReadHumidity>
 8000a40:	eef0 7a40 	vmov.f32	s15, s0
 8000a44:	4b56      	ldr	r3, [pc, #344]	; (8000ba0 <main+0x270>)
 8000a46:	edc3 7a00 	vstr	s15, [r3]

	  	  int humInt1 = hum_value;
 8000a4a:	4b55      	ldr	r3, [pc, #340]	; (8000ba0 <main+0x270>)
 8000a4c:	edd3 7a00 	vldr	s15, [r3]
 8000a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a54:	ee17 3a90 	vmov	r3, s15
 8000a58:	61bb      	str	r3, [r7, #24]

	  	  float humFrac = hum_value - humInt1;
 8000a5a:	4b51      	ldr	r3, [pc, #324]	; (8000ba0 <main+0x270>)
 8000a5c:	ed93 7a00 	vldr	s14, [r3]
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a6e:	edc7 7a05 	vstr	s15, [r7, #20]

	  	  int humInt2 = trunc(humFrac * 100);
 8000a72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a76:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000b94 <main+0x264>
 8000a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a7e:	ee17 0a90 	vmov	r0, s15
 8000a82:	f7ff fd59 	bl	8000538 <__aeabi_f2d>
 8000a86:	4602      	mov	r2, r0
 8000a88:	460b      	mov	r3, r1
 8000a8a:	ec43 2b10 	vmov	d0, r2, r3
 8000a8e:	f005 fecd 	bl	800682c <trunc>
 8000a92:	ec53 2b10 	vmov	r2, r3, d0
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f7ff fda5 	bl	80005e8 <__aeabi_d2iz>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	613b      	str	r3, [r7, #16]

	  	  printf(" HUMIDITY = %d.%02d\n\r", humInt1, humInt2);
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	69b9      	ldr	r1, [r7, #24]
 8000aa6:	483f      	ldr	r0, [pc, #252]	; (8000ba4 <main+0x274>)
 8000aa8:	f004 fd0e 	bl	80054c8 <iprintf>

	  	snprintf(str_hum,100," HUMIDITY = %d.%02d\n\r", humInt1, humInt2);
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	4a3c      	ldr	r2, [pc, #240]	; (8000ba4 <main+0x274>)
 8000ab4:	2164      	movs	r1, #100	; 0x64
 8000ab6:	483c      	ldr	r0, [pc, #240]	; (8000ba8 <main+0x278>)
 8000ab8:	f004 fd94 	bl	80055e4 <sniprintf>

	    HAL_UART_Transmit(&huart1,( uint8_t * )str_hum,sizeof(str_hum),1000);
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	2264      	movs	r2, #100	; 0x64
 8000ac2:	4939      	ldr	r1, [pc, #228]	; (8000ba8 <main+0x278>)
 8000ac4:	4828      	ldr	r0, [pc, #160]	; (8000b68 <main+0x238>)
 8000ac6:	f003 ffff 	bl	8004ac8 <HAL_UART_Transmit>

	  	 // HAL_Delay(3000);

	  	pre_value = BSP_PSENSOR_ReadPressure();
 8000aca:	f000 ff55 	bl	8001978 <BSP_PSENSOR_ReadPressure>
 8000ace:	eef0 7a40 	vmov.f32	s15, s0
 8000ad2:	4b36      	ldr	r3, [pc, #216]	; (8000bac <main+0x27c>)
 8000ad4:	edc3 7a00 	vstr	s15, [r3]

	  		  	  int preInt1 = pre_value;
 8000ad8:	4b34      	ldr	r3, [pc, #208]	; (8000bac <main+0x27c>)
 8000ada:	edd3 7a00 	vldr	s15, [r3]
 8000ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae2:	ee17 3a90 	vmov	r3, s15
 8000ae6:	60fb      	str	r3, [r7, #12]

	  		  	  float preFrac = pre_value - preInt1;
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <main+0x27c>)
 8000aea:	ed93 7a00 	vldr	s14, [r3]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	ee07 3a90 	vmov	s15, r3
 8000af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000afc:	edc7 7a02 	vstr	s15, [r7, #8]

	  		  	  int preInt2 = trunc(preFrac * 100);
 8000b00:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b04:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000b94 <main+0x264>
 8000b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b0c:	ee17 0a90 	vmov	r0, s15
 8000b10:	f7ff fd12 	bl	8000538 <__aeabi_f2d>
 8000b14:	4602      	mov	r2, r0
 8000b16:	460b      	mov	r3, r1
 8000b18:	ec43 2b10 	vmov	d0, r2, r3
 8000b1c:	f005 fe86 	bl	800682c <trunc>
 8000b20:	ec53 2b10 	vmov	r2, r3, d0
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff fd5e 	bl	80005e8 <__aeabi_d2iz>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	607b      	str	r3, [r7, #4]

	  		  	  printf(" PRESSURE = %d.%02d\n\r", preInt1, preInt2);
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	68f9      	ldr	r1, [r7, #12]
 8000b34:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <main+0x280>)
 8000b36:	f004 fcc7 	bl	80054c8 <iprintf>

	  		  	  snprintf(str_pre,100," Presure = %d.%02d\n\r", preInt1, preInt2);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <main+0x284>)
 8000b42:	2164      	movs	r1, #100	; 0x64
 8000b44:	481c      	ldr	r0, [pc, #112]	; (8000bb8 <main+0x288>)
 8000b46:	f004 fd4d 	bl	80055e4 <sniprintf>

	  		      HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),1000);
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	2264      	movs	r2, #100	; 0x64
 8000b50:	4919      	ldr	r1, [pc, #100]	; (8000bb8 <main+0x288>)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <main+0x238>)
 8000b54:	f003 ffb8 	bl	8004ac8 <HAL_UART_Transmit>

	  		  	  HAL_Delay(3000);
 8000b58:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b5c:	f001 fa0e 	bl	8001f7c <HAL_Delay>
  {
 8000b60:	e725      	b.n	80009ae <main+0x7e>
 8000b62:	bf00      	nop
 8000b64:	20000000 	.word	0x20000000
 8000b68:	200002ec 	.word	0x200002ec
 8000b6c:	20000030 	.word	0x20000030
 8000b70:	20000060 	.word	0x20000060
 8000b74:	080068a8 	.word	0x080068a8
 8000b78:	080068d8 	.word	0x080068d8
 8000b7c:	08006908 	.word	0x08006908
 8000b80:	08006938 	.word	0x08006938
 8000b84:	08006964 	.word	0x08006964
 8000b88:	08006994 	.word	0x08006994
 8000b8c:	080069c0 	.word	0x080069c0
 8000b90:	20000148 	.word	0x20000148
 8000b94:	42c80000 	.word	0x42c80000
 8000b98:	080069f4 	.word	0x080069f4
 8000b9c:	20000154 	.word	0x20000154
 8000ba0:	2000014c 	.word	0x2000014c
 8000ba4:	08006a10 	.word	0x08006a10
 8000ba8:	200001b8 	.word	0x200001b8
 8000bac:	20000150 	.word	0x20000150
 8000bb0:	08006a28 	.word	0x08006a28
 8000bb4:	08006a40 	.word	0x08006a40
 8000bb8:	2000021c 	.word	0x2000021c

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b096      	sub	sp, #88	; 0x58
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	2244      	movs	r2, #68	; 0x44
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 fc74 	bl	80054b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bde:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000be2:	f002 fc13 	bl	800340c <HAL_PWREx_ControlVoltageScaling>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bec:	f000 fac0 	bl	8001170 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bfc:	2360      	movs	r3, #96	; 0x60
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c00:	2302      	movs	r3, #2
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c04:	2301      	movs	r3, #1
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c0c:	2328      	movs	r3, #40	; 0x28
 8000c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c10:	2307      	movs	r3, #7
 8000c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fc49 	bl	80034b8 <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c2c:	f000 faa0 	bl	8001170 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c30:	230f      	movs	r3, #15
 8000c32:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c34:	2303      	movs	r3, #3
 8000c36:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	2104      	movs	r1, #4
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 f80f 	bl	8003c6c <HAL_RCC_ClockConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c54:	f000 fa8c 	bl	8001170 <Error_Handler>
  }
}
 8000c58:	bf00      	nop
 8000c5a:	3758      	adds	r7, #88	; 0x58
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <MX_I2C2_Init+0x78>)
 8000c68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <MX_I2C2_Init+0x7c>)
 8000c6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c9a:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c9c:	f001 fd7d 	bl	800279a <HAL_I2C_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ca6:	f000 fa63 	bl	8001170 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000cae:	f002 fb07 	bl	80032c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cb8:	f000 fa5a 	bl	8001170 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000cc0:	f002 fb49 	bl	8003356 <HAL_I2CEx_ConfigDigitalFilter>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cca:	f000 fa51 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000298 	.word	0x20000298
 8000cd8:	40005800 	.word	0x40005800
 8000cdc:	10909cec 	.word	0x10909cec

08000ce0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <MX_USART1_UART_Init+0x5c>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d24:	f003 fe82 	bl	8004a2c <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d2e:	f000 fa1f 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200002ec 	.word	0x200002ec
 8000d3c:	40013800 	.word	0x40013800

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d56:	4bbc      	ldr	r3, [pc, #752]	; (8001048 <MX_GPIO_Init+0x308>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4abb      	ldr	r2, [pc, #748]	; (8001048 <MX_GPIO_Init+0x308>)
 8000d5c:	f043 0310 	orr.w	r3, r3, #16
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4bb9      	ldr	r3, [pc, #740]	; (8001048 <MX_GPIO_Init+0x308>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4bb6      	ldr	r3, [pc, #728]	; (8001048 <MX_GPIO_Init+0x308>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4ab5      	ldr	r2, [pc, #724]	; (8001048 <MX_GPIO_Init+0x308>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4bb3      	ldr	r3, [pc, #716]	; (8001048 <MX_GPIO_Init+0x308>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4bb0      	ldr	r3, [pc, #704]	; (8001048 <MX_GPIO_Init+0x308>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4aaf      	ldr	r2, [pc, #700]	; (8001048 <MX_GPIO_Init+0x308>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4bad      	ldr	r3, [pc, #692]	; (8001048 <MX_GPIO_Init+0x308>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4baa      	ldr	r3, [pc, #680]	; (8001048 <MX_GPIO_Init+0x308>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4aa9      	ldr	r2, [pc, #676]	; (8001048 <MX_GPIO_Init+0x308>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4ba7      	ldr	r3, [pc, #668]	; (8001048 <MX_GPIO_Init+0x308>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	4ba4      	ldr	r3, [pc, #656]	; (8001048 <MX_GPIO_Init+0x308>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4aa3      	ldr	r2, [pc, #652]	; (8001048 <MX_GPIO_Init+0x308>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4ba1      	ldr	r3, [pc, #644]	; (8001048 <MX_GPIO_Init+0x308>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000dd4:	489d      	ldr	r0, [pc, #628]	; (800104c <MX_GPIO_Init+0x30c>)
 8000dd6:	f001 fca5 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f248 1104 	movw	r1, #33028	; 0x8104
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f001 fc9e 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000de8:	2200      	movs	r2, #0
 8000dea:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000dee:	4898      	ldr	r0, [pc, #608]	; (8001050 <MX_GPIO_Init+0x310>)
 8000df0:	f001 fc98 	bl	8002724 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f241 0181 	movw	r1, #4225	; 0x1081
 8000dfa:	4896      	ldr	r0, [pc, #600]	; (8001054 <MX_GPIO_Init+0x314>)
 8000dfc:	f001 fc92 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e06:	4893      	ldr	r0, [pc, #588]	; (8001054 <MX_GPIO_Init+0x314>)
 8000e08:	f001 fc8c 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e12:	4891      	ldr	r0, [pc, #580]	; (8001058 <MX_GPIO_Init+0x318>)
 8000e14:	f001 fc86 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	488c      	ldr	r0, [pc, #560]	; (8001050 <MX_GPIO_Init+0x310>)
 8000e1e:	f001 fc81 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2101      	movs	r1, #1
 8000e26:	4889      	ldr	r0, [pc, #548]	; (800104c <MX_GPIO_Init+0x30c>)
 8000e28:	f001 fc7c 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e2c:	f240 1315 	movw	r3, #277	; 0x115
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4881      	ldr	r0, [pc, #516]	; (800104c <MX_GPIO_Init+0x30c>)
 8000e46:	f001 f9cf 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e4a:	236a      	movs	r3, #106	; 0x6a
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	487b      	ldr	r0, [pc, #492]	; (800104c <MX_GPIO_Init+0x30c>)
 8000e60:	f001 f9c2 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4877      	ldr	r0, [pc, #476]	; (8001058 <MX_GPIO_Init+0x318>)
 8000e7c:	f001 f9b4 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000e80:	233f      	movs	r3, #63	; 0x3f
 8000e82:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e84:	230b      	movs	r3, #11
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4871      	ldr	r0, [pc, #452]	; (8001058 <MX_GPIO_Init+0x318>)
 8000e94:	f001 f9a8 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f001 f997 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000eba:	f248 1304 	movw	r3, #33028	; 0x8104
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f001 f987 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000eda:	2308      	movs	r3, #8
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eea:	2301      	movs	r3, #1
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f001 f976 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000efc:	2310      	movs	r3, #16
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f00:	230b      	movs	r3, #11
 8000f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f001 f969 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f16:	23e0      	movs	r3, #224	; 0xe0
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f26:	2305      	movs	r3, #5
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f001 f958 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4840      	ldr	r0, [pc, #256]	; (8001050 <MX_GPIO_Init+0x310>)
 8000f4e:	f001 f94b 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f52:	2302      	movs	r3, #2
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f56:	230b      	movs	r3, #11
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	483a      	ldr	r0, [pc, #232]	; (8001050 <MX_GPIO_Init+0x310>)
 8000f66:	f001 f93f 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f6a:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000f6e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4833      	ldr	r0, [pc, #204]	; (8001050 <MX_GPIO_Init+0x310>)
 8000f84:	f001 f930 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f88:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4829      	ldr	r0, [pc, #164]	; (800104c <MX_GPIO_Init+0x30c>)
 8000fa6:	f001 f91f 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000faa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000fae:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4821      	ldr	r0, [pc, #132]	; (800104c <MX_GPIO_Init+0x30c>)
 8000fc8:	f001 f90e 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000fcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481a      	ldr	r0, [pc, #104]	; (8001054 <MX_GPIO_Init+0x314>)
 8000fea:	f001 f8fd 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000fee:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000ff2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <MX_GPIO_Init+0x314>)
 8001006:	f001 f8ef 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800100a:	f243 0381 	movw	r3, #12417	; 0x3081
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_GPIO_Init+0x314>)
 8001024:	f001 f8e0 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001028:	f44f 7310 	mov.w	r3, #576	; 0x240
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_GPIO_Init+0x318>)
 8001042:	f001 f8d1 	bl	80021e8 <HAL_GPIO_Init>
 8001046:	e009      	b.n	800105c <MX_GPIO_Init+0x31c>
 8001048:	40021000 	.word	0x40021000
 800104c:	48001000 	.word	0x48001000
 8001050:	48000400 	.word	0x48000400
 8001054:	48000c00 	.word	0x48000c00
 8001058:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800105c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001062:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	483c      	ldr	r0, [pc, #240]	; (8001164 <MX_GPIO_Init+0x424>)
 8001074:	f001 f8b8 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f001 f8aa 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001094:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010a6:	230a      	movs	r3, #10
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f001 f898 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80010b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010ca:	2306      	movs	r3, #6
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4823      	ldr	r0, [pc, #140]	; (8001164 <MX_GPIO_Init+0x424>)
 80010d6:	f001 f887 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80010da:	2302      	movs	r3, #2
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ea:	2305      	movs	r3, #5
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	481c      	ldr	r0, [pc, #112]	; (8001168 <MX_GPIO_Init+0x428>)
 80010f6:	f001 f877 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80010fa:	2378      	movs	r3, #120	; 0x78
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110a:	2307      	movs	r3, #7
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4814      	ldr	r0, [pc, #80]	; (8001168 <MX_GPIO_Init+0x428>)
 8001116:	f001 f867 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800111a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001120:	2312      	movs	r3, #18
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112c:	2304      	movs	r3, #4
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_GPIO_Init+0x42c>)
 8001138:	f001 f856 	bl	80021e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2017      	movs	r0, #23
 8001142:	f001 f81a 	bl	800217a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001146:	2017      	movs	r0, #23
 8001148:	f001 f833 	bl	80021b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2028      	movs	r0, #40	; 0x28
 8001152:	f001 f812 	bl	800217a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001156:	2028      	movs	r0, #40	; 0x28
 8001158:	f001 f82b 	bl	80021b2 <HAL_NVIC_EnableIRQ>

}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	48000800 	.word	0x48000800
 8001168:	48000c00 	.word	0x48000c00
 800116c:	48000400 	.word	0x48000400

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	e7fe      	b.n	8001178 <Error_Handler+0x8>
	...

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_MspInit+0x44>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_MspInit+0x44>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6613      	str	r3, [r2, #96]	; 0x60
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_MspInit+0x44>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_MspInit+0x44>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_MspInit+0x44>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6593      	str	r3, [r2, #88]	; 0x58
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0ac      	sub	sp, #176	; 0xb0
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2288      	movs	r2, #136	; 0x88
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 f967 	bl	80054b8 <memset>
  if(hi2c->Instance==I2C2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a21      	ldr	r2, [pc, #132]	; (8001274 <HAL_I2C_MspInit+0xb0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d13b      	bne.n	800126c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4618      	mov	r0, r3
 8001202:	f002 ff57 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800120c:	f7ff ffb0 	bl	8001170 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_I2C_MspInit+0xb4>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	4a18      	ldr	r2, [pc, #96]	; (8001278 <HAL_I2C_MspInit+0xb4>)
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_I2C_MspInit+0xb4>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001228:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800122c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001230:	2312      	movs	r3, #18
 8001232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001242:	2304      	movs	r3, #4
 8001244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800124c:	4619      	mov	r1, r3
 800124e:	480b      	ldr	r0, [pc, #44]	; (800127c <HAL_I2C_MspInit+0xb8>)
 8001250:	f000 ffca 	bl	80021e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_I2C_MspInit+0xb4>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_I2C_MspInit+0xb4>)
 800125a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800125e:	6593      	str	r3, [r2, #88]	; 0x58
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_I2C_MspInit+0xb4>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	37b0      	adds	r7, #176	; 0xb0
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40005800 	.word	0x40005800
 8001278:	40021000 	.word	0x40021000
 800127c:	48000400 	.word	0x48000400

08001280 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <HAL_I2C_MspDeInit+0x3c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10f      	bne.n	80012b2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_I2C_MspDeInit+0x40>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_I2C_MspDeInit+0x40>)
 8001298:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800129c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800129e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <HAL_I2C_MspDeInit+0x44>)
 80012a4:	f001 f94a 	bl	800253c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80012a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_I2C_MspDeInit+0x44>)
 80012ae:	f001 f945 	bl	800253c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40005800 	.word	0x40005800
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000400 	.word	0x48000400

080012c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0ac      	sub	sp, #176	; 0xb0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2288      	movs	r2, #136	; 0x88
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 f8e5 	bl	80054b8 <memset>
  if(huart->Instance==USART1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a21      	ldr	r2, [pc, #132]	; (8001378 <HAL_UART_MspInit+0xb0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d13a      	bne.n	800136e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012fc:	2300      	movs	r3, #0
 80012fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4618      	mov	r0, r3
 8001306:	f002 fed5 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001310:	f7ff ff2e 	bl	8001170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_UART_MspInit+0xb4>)
 8001316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001318:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_UART_MspInit+0xb4>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131e:	6613      	str	r3, [r2, #96]	; 0x60
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_UART_MspInit+0xb4>)
 8001322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <HAL_UART_MspInit+0xb4>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	4a12      	ldr	r2, [pc, #72]	; (800137c <HAL_UART_MspInit+0xb4>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_UART_MspInit+0xb4>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001344:	23c0      	movs	r3, #192	; 0xc0
 8001346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800135c:	2307      	movs	r3, #7
 800135e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_UART_MspInit+0xb8>)
 800136a:	f000 ff3d 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	37b0      	adds	r7, #176	; 0xb0
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40013800 	.word	0x40013800
 800137c:	40021000 	.word	0x40021000
 8001380:	48000400 	.word	0x48000400

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 fdb4 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80013dc:	2020      	movs	r0, #32
 80013de:	f001 f9b9 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80013e2:	2040      	movs	r0, #64	; 0x40
 80013e4:	f001 f9b6 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80013e8:	2080      	movs	r0, #128	; 0x80
 80013ea:	f001 f9b3 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80013ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013f2:	f001 f9af 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}

080013fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001402:	f001 f9a7 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001406:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800140a:	f001 f9a3 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800140e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001412:	f001 f99f 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001416:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800141a:	f001 f99b 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800141e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001422:	f001 f997 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <ITM_SendChar+0x48>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <ITM_SendChar+0x48>)
 800143c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001440:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <ITM_SendChar+0x4c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <ITM_SendChar+0x4c>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800144e:	bf00      	nop
 8001450:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f8      	beq.n	8001450 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800145e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000edfc 	.word	0xe000edfc
 8001478:	e0000e00 	.word	0xe0000e00

0800147c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	e00a      	b.n	80014a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800148e:	f3af 8000 	nop.w
 8001492:	4601      	mov	r1, r0
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	b2ca      	uxtb	r2, r1
 800149c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbf0      	blt.n	800148e <_read+0x12>
	}

return len;
 80014ac:	687b      	ldr	r3, [r7, #4]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	e009      	b.n	80014dc <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	60ba      	str	r2, [r7, #8]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ffab 	bl	800142c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf1      	blt.n	80014c8 <_write+0x12>
	}
	return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_close>:

int _close(int file)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
	return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001516:	605a      	str	r2, [r3, #4]
	return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <_isatty>:

int _isatty(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
	return 1;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
	return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <_sbrk+0x5c>)
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <_sbrk+0x60>)
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <_sbrk+0x64>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <_sbrk+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	429a      	cmp	r2, r3
 8001586:	d207      	bcs.n	8001598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001588:	f003 ff6c 	bl	8005464 <__errno>
 800158c:	4603      	mov	r3, r0
 800158e:	220c      	movs	r2, #12
 8001590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	e009      	b.n	80015ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <_sbrk+0x64>)
 80015a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20018000 	.word	0x20018000
 80015b8:	00000400 	.word	0x00000400
 80015bc:	20000280 	.word	0x20000280
 80015c0:	20000460 	.word	0x20000460

080015c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <SystemInit+0x20>)
 80015ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <SystemInit+0x20>)
 80015d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001620 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015ec:	f7ff ffea 	bl	80015c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <LoopForever+0x6>)
  ldr r1, =_edata
 80015f2:	490d      	ldr	r1, [pc, #52]	; (8001628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <LoopForever+0xe>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001608:	4c0a      	ldr	r4, [pc, #40]	; (8001634 <LoopForever+0x16>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001616:	f003 ff2b 	bl	8005470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800161a:	f7ff f989 	bl	8000930 <main>

0800161e <LoopForever>:

LoopForever:
    b LoopForever
 800161e:	e7fe      	b.n	800161e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001620:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001628:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 800162c:	08006b48 	.word	0x08006b48
  ldr r2, =_sbss
 8001630:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8001634:	2000045c 	.word	0x2000045c

08001638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC1_2_IRQHandler>
	...

0800163c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <I2Cx_MspInit+0xa8>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	4a26      	ldr	r2, [pc, #152]	; (80016e4 <I2Cx_MspInit+0xa8>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <I2Cx_MspInit+0xa8>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800165c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001660:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001662:	2312      	movs	r3, #18
 8001664:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001666:	2301      	movs	r3, #1
 8001668:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800166e:	2304      	movs	r3, #4
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	481b      	ldr	r0, [pc, #108]	; (80016e8 <I2Cx_MspInit+0xac>)
 800167a:	f000 fdb5 	bl	80021e8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4818      	ldr	r0, [pc, #96]	; (80016e8 <I2Cx_MspInit+0xac>)
 8001686:	f000 fdaf 	bl	80021e8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <I2Cx_MspInit+0xa8>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <I2Cx_MspInit+0xa8>)
 8001690:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001694:	6593      	str	r3, [r2, #88]	; 0x58
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <I2Cx_MspInit+0xa8>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <I2Cx_MspInit+0xa8>)
 80016a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <I2Cx_MspInit+0xa8>)
 80016a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ac:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <I2Cx_MspInit+0xa8>)
 80016b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b2:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <I2Cx_MspInit+0xa8>)
 80016b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016b8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	210f      	movs	r1, #15
 80016be:	2021      	movs	r0, #33	; 0x21
 80016c0:	f000 fd5b 	bl	800217a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80016c4:	2021      	movs	r0, #33	; 0x21
 80016c6:	f000 fd74 	bl	80021b2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	210f      	movs	r1, #15
 80016ce:	2022      	movs	r0, #34	; 0x22
 80016d0:	f000 fd53 	bl	800217a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80016d4:	2022      	movs	r0, #34	; 0x22
 80016d6:	f000 fd6c 	bl	80021b2 <HAL_NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000400 	.word	0x48000400

080016ec <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <I2Cx_Init+0x54>)
 80016f8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a11      	ldr	r2, [pc, #68]	; (8001744 <I2Cx_Init+0x58>)
 80016fe:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff89 	bl	800163c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f001 f835 	bl	800279a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001730:	2100      	movs	r1, #0
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f001 fdc4 	bl	80032c0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40005800 	.word	0x40005800
 8001744:	00702681 	.word	0x00702681

08001748 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af04      	add	r7, sp, #16
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	72fb      	strb	r3, [r7, #11]
 800175a:	460b      	mov	r3, r1
 800175c:	813b      	strh	r3, [r7, #8]
 800175e:	4613      	mov	r3, r2
 8001760:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	b299      	uxth	r1, r3
 800176a:	88f8      	ldrh	r0, [r7, #6]
 800176c:	893a      	ldrh	r2, [r7, #8]
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	4603      	mov	r3, r0
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f001 f9de 	bl	8002b40 <HAL_I2C_Mem_Read>
 8001784:	4603      	mov	r3, r0
 8001786:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800178e:	7afb      	ldrb	r3, [r7, #11]
 8001790:	4619      	mov	r1, r3
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f832 	bl	80017fc <I2Cx_Error>
  }
  return status;
 8001798:	7dfb      	ldrb	r3, [r7, #23]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b08a      	sub	sp, #40	; 0x28
 80017a6:	af04      	add	r7, sp, #16
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	4608      	mov	r0, r1
 80017ac:	4611      	mov	r1, r2
 80017ae:	461a      	mov	r2, r3
 80017b0:	4603      	mov	r3, r0
 80017b2:	72fb      	strb	r3, [r7, #11]
 80017b4:	460b      	mov	r3, r1
 80017b6:	813b      	strh	r3, [r7, #8]
 80017b8:	4613      	mov	r3, r2
 80017ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80017c0:	7afb      	ldrb	r3, [r7, #11]
 80017c2:	b299      	uxth	r1, r3
 80017c4:	88f8      	ldrh	r0, [r7, #6]
 80017c6:	893a      	ldrh	r2, [r7, #8]
 80017c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	4603      	mov	r3, r0
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f001 f89d 	bl	8002918 <HAL_I2C_Mem_Write>
 80017de:	4603      	mov	r3, r0
 80017e0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80017e8:	7afb      	ldrb	r3, [r7, #11]
 80017ea:	4619      	mov	r1, r3
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 f805 	bl	80017fc <I2Cx_Error>
  }
  return status;
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f001 f855 	bl	80028b8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ff6c 	bl	80016ec <I2Cx_Init>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <SENSOR_IO_Init+0x10>)
 8001822:	f7ff ff63 	bl	80016ec <I2Cx_Init>
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200003f4 	.word	0x200003f4

08001830 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af02      	add	r7, sp, #8
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
 800183a:	460b      	mov	r3, r1
 800183c:	71bb      	strb	r3, [r7, #6]
 800183e:	4613      	mov	r3, r2
 8001840:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001842:	79bb      	ldrb	r3, [r7, #6]
 8001844:	b29a      	uxth	r2, r3
 8001846:	79f9      	ldrb	r1, [r7, #7]
 8001848:	2301      	movs	r3, #1
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	1d7b      	adds	r3, r7, #5
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <SENSOR_IO_Write+0x30>)
 8001854:	f7ff ffa5 	bl	80017a2 <I2Cx_WriteMultiple>
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200003f4 	.word	0x200003f4

08001864 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af02      	add	r7, sp, #8
 800186a:	4603      	mov	r3, r0
 800186c:	460a      	mov	r2, r1
 800186e:	71fb      	strb	r3, [r7, #7]
 8001870:	4613      	mov	r3, r2
 8001872:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001878:	79bb      	ldrb	r3, [r7, #6]
 800187a:	b29a      	uxth	r2, r3
 800187c:	79f9      	ldrb	r1, [r7, #7]
 800187e:	2301      	movs	r3, #1
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	f107 030f 	add.w	r3, r7, #15
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	4804      	ldr	r0, [pc, #16]	; (800189c <SENSOR_IO_Read+0x38>)
 800188c:	f7ff ff5c 	bl	8001748 <I2Cx_ReadMultiple>

  return read_value;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200003f4 	.word	0x200003f4

080018a0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	603a      	str	r2, [r7, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	460b      	mov	r3, r1
 80018b0:	71bb      	strb	r3, [r7, #6]
 80018b2:	4613      	mov	r3, r2
 80018b4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80018b6:	79bb      	ldrb	r3, [r7, #6]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	79f9      	ldrb	r1, [r7, #7]
 80018bc:	88bb      	ldrh	r3, [r7, #4]
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	4804      	ldr	r0, [pc, #16]	; (80018d8 <SENSOR_IO_ReadMultiple+0x38>)
 80018c8:	f7ff ff3e 	bl	8001748 <I2Cx_ReadMultiple>
 80018cc:	4603      	mov	r3, r0
 80018ce:	b29b      	uxth	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200003f4 	.word	0x200003f4

080018dc <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <BSP_HSENSOR_Init+0x38>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	20be      	movs	r0, #190	; 0xbe
 80018e8:	4798      	blx	r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	2bbc      	cmp	r3, #188	; 0xbc
 80018ee:	d002      	beq.n	80018f6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	e009      	b.n	800190a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <BSP_HSENSOR_Init+0x3c>)
 80018f8:	4a06      	ldr	r2, [pc, #24]	; (8001914 <BSP_HSENSOR_Init+0x38>)
 80018fa:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <BSP_HSENSOR_Init+0x3c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	20be      	movs	r0, #190	; 0xbe
 8001904:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800190a:	687b      	ldr	r3, [r7, #4]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000098 	.word	0x20000098
 8001918:	20000284 	.word	0x20000284

0800191c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	20be      	movs	r0, #190	; 0xbe
 8001928:	4798      	blx	r3
 800192a:	eef0 7a40 	vmov.f32	s15, s0
}
 800192e:	eeb0 0a67 	vmov.f32	s0, s15
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000284 	.word	0x20000284

08001938 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <BSP_PSENSOR_Init+0x38>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	20ba      	movs	r0, #186	; 0xba
 8001944:	4798      	blx	r3
 8001946:	4603      	mov	r3, r0
 8001948:	2bb1      	cmp	r3, #177	; 0xb1
 800194a:	d002      	beq.n	8001952 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	e009      	b.n	8001966 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <BSP_PSENSOR_Init+0x3c>)
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <BSP_PSENSOR_Init+0x38>)
 8001956:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <BSP_PSENSOR_Init+0x3c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	20ba      	movs	r0, #186	; 0xba
 8001960:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200000b4 	.word	0x200000b4
 8001974:	20000288 	.word	0x20000288

08001978 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <BSP_PSENSOR_ReadPressure+0x18>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	20ba      	movs	r0, #186	; 0xba
 8001984:	4798      	blx	r3
 8001986:	eef0 7a40 	vmov.f32	s15, s0
}
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000288 	.word	0x20000288

08001994 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <BSP_TSENSOR_Init+0x30>)
 80019a0:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <BSP_TSENSOR_Init+0x34>)
 80019a2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80019a4:	f7ff ff3a 	bl	800181c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <BSP_TSENSOR_Init+0x30>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2100      	movs	r1, #0
 80019b0:	20be      	movs	r0, #190	; 0xbe
 80019b2:	4798      	blx	r3

  ret = TSENSOR_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80019b8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000028c 	.word	0x2000028c
 80019c8:	200000a4 	.word	0x200000a4

080019cc <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <BSP_TSENSOR_ReadTemp+0x18>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	20be      	movs	r0, #190	; 0xbe
 80019d8:	4798      	blx	r3
 80019da:	eef0 7a40 	vmov.f32	s15, s0
}
 80019de:	eeb0 0a67 	vmov.f32	s0, s15
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000028c 	.word	0x2000028c

080019e8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2120      	movs	r1, #32
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff33 	bl	8001864 <SENSOR_IO_Read>
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	f023 0303 	bic.w	r3, r3, #3
 8001a18:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a28:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	2120      	movs	r1, #32
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fefc 	bl	8001830 <SENSOR_IO_Write>
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001a4e:	f7ff fee5 	bl	800181c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	210f      	movs	r1, #15
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff03 	bl	8001864 <SENSOR_IO_Read>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	b2d8      	uxtb	r0, r3
 8001a7a:	f107 020c 	add.w	r2, r7, #12
 8001a7e:	2302      	movs	r3, #2
 8001a80:	21b0      	movs	r1, #176	; 0xb0
 8001a82:	f7ff ff0d 	bl	80018a0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001a86:	7b3b      	ldrb	r3, [r7, #12]
 8001a88:	085b      	lsrs	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001a8e:	7b7b      	ldrb	r3, [r7, #13]
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	b2d8      	uxtb	r0, r3
 8001a9a:	f107 020c 	add.w	r2, r7, #12
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	21b6      	movs	r1, #182	; 0xb6
 8001aa2:	f7ff fefd 	bl	80018a0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001aa6:	7b7b      	ldrb	r3, [r7, #13]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	7b3b      	ldrb	r3, [r7, #12]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	b2d8      	uxtb	r0, r3
 8001ab8:	f107 020c 	add.w	r2, r7, #12
 8001abc:	2302      	movs	r3, #2
 8001abe:	21ba      	movs	r1, #186	; 0xba
 8001ac0:	f7ff feee 	bl	80018a0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001ac4:	7b7b      	ldrb	r3, [r7, #13]
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	7b3b      	ldrb	r3, [r7, #12]
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	b2d8      	uxtb	r0, r3
 8001ad6:	f107 020c 	add.w	r2, r7, #12
 8001ada:	2302      	movs	r3, #2
 8001adc:	21a8      	movs	r1, #168	; 0xa8
 8001ade:	f7ff fedf 	bl	80018a0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001ae2:	7b7b      	ldrb	r3, [r7, #13]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	7b3b      	ldrb	r3, [r7, #12]
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001af0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001af4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b02:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001b06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b14:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b18:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001b1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001b42:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b46:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001b52:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b56:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001b9c <HTS221_H_ReadHumidity+0x130>
 8001b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	dd01      	ble.n	8001b68 <HTS221_H_ReadHumidity+0xfc>
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HTS221_H_ReadHumidity+0x134>)
 8001b66:	e00a      	b.n	8001b7e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	d502      	bpl.n	8001b7c <HTS221_H_ReadHumidity+0x110>
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e000      	b.n	8001b7e <HTS221_H_ReadHumidity+0x112>
 8001b7c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001b7e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b84:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b8c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001b90:	eeb0 0a67 	vmov.f32	s0, s15
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	447a0000 	.word	0x447a0000
 8001ba0:	447a0000 	.word	0x447a0000

08001ba4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fe54 	bl	8001864 <SENSOR_IO_Read>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	f023 0304 	bic.w	r3, r3, #4
 8001bc6:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	f023 0303 	bic.w	r3, r3, #3
 8001bd6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001be6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	2120      	movs	r1, #32
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe1d 	bl	8001830 <SENSOR_IO_Write>
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b088      	sub	sp, #32
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	b2d8      	uxtb	r0, r3
 8001c0c:	f107 0208 	add.w	r2, r7, #8
 8001c10:	2302      	movs	r3, #2
 8001c12:	21b2      	movs	r1, #178	; 0xb2
 8001c14:	f7ff fe44 	bl	80018a0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2135      	movs	r1, #53	; 0x35
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fe20 	bl	8001864 <SENSOR_IO_Read>
 8001c24:	4603      	mov	r3, r0
 8001c26:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001c28:	7ffb      	ldrb	r3, [r7, #31]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c32:	b21a      	sxth	r2, r3
 8001c34:	7a3b      	ldrb	r3, [r7, #8]
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001c3c:	7ffb      	ldrb	r3, [r7, #31]
 8001c3e:	019b      	lsls	r3, r3, #6
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	7a7b      	ldrb	r3, [r7, #9]
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001c50:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c54:	10db      	asrs	r3, r3, #3
 8001c56:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001c58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c5c:	10db      	asrs	r3, r3, #3
 8001c5e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	b2d8      	uxtb	r0, r3
 8001c64:	f107 0208 	add.w	r2, r7, #8
 8001c68:	2304      	movs	r3, #4
 8001c6a:	21bc      	movs	r1, #188	; 0xbc
 8001c6c:	f7ff fe18 	bl	80018a0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001c70:	7a7b      	ldrb	r3, [r7, #9]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	7a3b      	ldrb	r3, [r7, #8]
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	7abb      	ldrb	r3, [r7, #10]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	b2d8      	uxtb	r0, r3
 8001c90:	f107 0208 	add.w	r2, r7, #8
 8001c94:	2302      	movs	r3, #2
 8001c96:	21aa      	movs	r1, #170	; 0xaa
 8001c98:	f7ff fe02 	bl	80018a0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001c9c:	7a7b      	ldrb	r3, [r7, #9]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	7a3b      	ldrb	r3, [r7, #8]
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001caa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001cae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cc0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cce:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cd2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001cd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	ee07 3a90 	vmov	s15, r3
}
 8001d02:	eeb0 0a67 	vmov.f32	s0, s15
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f87b 	bl	8001e14 <LPS22HB_Init>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001d34:	f7ff fd72 	bl	800181c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fd90 	bl	8001864 <SENSOR_IO_Read>
 8001d44:	4603      	mov	r3, r0
 8001d46:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	74fb      	strb	r3, [r7, #19]
 8001d66:	e013      	b.n	8001d90 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	7cfb      	ldrb	r3, [r7, #19]
 8001d6e:	3328      	adds	r3, #40	; 0x28
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	7cfc      	ldrb	r4, [r7, #19]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f7ff fd74 	bl	8001864 <SENSOR_IO_Read>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f107 0318 	add.w	r3, r7, #24
 8001d84:	4423      	add	r3, r4
 8001d86:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8001d8a:	7cfb      	ldrb	r3, [r7, #19]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	74fb      	strb	r3, [r7, #19]
 8001d90:	7cfb      	ldrb	r3, [r7, #19]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d9e8      	bls.n	8001d68 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	74fb      	strb	r3, [r7, #19]
 8001d9a:	e010      	b.n	8001dbe <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001d9c:	7cfb      	ldrb	r3, [r7, #19]
 8001d9e:	f107 0218 	add.w	r2, r7, #24
 8001da2:	4413      	add	r3, r2
 8001da4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001da8:	461a      	mov	r2, r3
 8001daa:	7cfb      	ldrb	r3, [r7, #19]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001db8:	7cfb      	ldrb	r3, [r7, #19]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	74fb      	strb	r3, [r7, #19]
 8001dbe:	7cfb      	ldrb	r3, [r7, #19]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d9eb      	bls.n	8001d9c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dd4:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2264      	movs	r2, #100	; 0x64
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	da01      	bge.n	8001dea <LPS22HB_P_ReadPressure+0x96>
 8001de6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001dea:	131b      	asrs	r3, r3, #12
 8001dec:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001e10 <LPS22HB_P_ReadPressure+0xbc>
 8001dfc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e00:	eef0 7a66 	vmov.f32	s15, s13
}
 8001e04:	eeb0 0a67 	vmov.f32	s0, s15
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	42c80000 	.word	0x42c80000

08001e14 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	211a      	movs	r1, #26
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fd1d 	bl	8001864 <SENSOR_IO_Read>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	211a      	movs	r1, #26
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fcf2 	bl	8001830 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2110      	movs	r1, #16
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fd06 	bl	8001864 <SENSOR_IO_Read>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e62:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001e6a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	f023 0302 	bic.w	r3, r3, #2
 8001e72:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	f043 0302 	orr.w	r3, r3, #2
 8001e7a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	2110      	movs	r1, #16
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fcd3 	bl	8001830 <SENSOR_IO_Write>
}  
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f961 	bl	8002164 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f000 f80e 	bl	8001ec4 <HAL_InitTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	e001      	b.n	8001eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb4:	f7ff f962 	bl	800117c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_InitTick+0x6c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_InitTick+0x70>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_InitTick+0x6c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f96d 	bl	80021ce <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d809      	bhi.n	8001f14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f000 f937 	bl	800217a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_InitTick+0x74>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e007      	b.n	8001f24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e004      	b.n	8001f24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	e001      	b.n	8001f24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200000c4 	.word	0x200000c4
 8001f34:	20000094 	.word	0x20000094
 8001f38:	200000c0 	.word	0x200000c0

08001f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	200000c4 	.word	0x200000c4
 8001f60:	20000448 	.word	0x20000448

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000448 	.word	0x20000448

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200000c4 	.word	0x200000c4

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4907      	ldr	r1, [pc, #28]	; (8002060 <__NVIC_EnableIRQ+0x38>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000e100 	.word	0xe000e100

08002064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db0a      	blt.n	800208e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	490c      	ldr	r1, [pc, #48]	; (80020b0 <__NVIC_SetPriority+0x4c>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	440b      	add	r3, r1
 8002088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800208c:	e00a      	b.n	80020a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <__NVIC_SetPriority+0x50>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3b04      	subs	r3, #4
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	440b      	add	r3, r1
 80020a2:	761a      	strb	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f1c3 0307 	rsb	r3, r3, #7
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	bf28      	it	cs
 80020d6:	2304      	movcs	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3304      	adds	r3, #4
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d902      	bls.n	80020e8 <NVIC_EncodePriority+0x30>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3b03      	subs	r3, #3
 80020e6:	e000      	b.n	80020ea <NVIC_EncodePriority+0x32>
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43d9      	mvns	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	4313      	orrs	r3, r2
         );
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002130:	d301      	bcc.n	8002136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002132:	2301      	movs	r3, #1
 8002134:	e00f      	b.n	8002156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <SysTick_Config+0x40>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213e:	210f      	movs	r1, #15
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f7ff ff8e 	bl	8002064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SysTick_Config+0x40>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <SysTick_Config+0x40>)
 8002150:	2207      	movs	r2, #7
 8002152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff29 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800218c:	f7ff ff3e 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f7ff ff8e 	bl	80020b8 <NVIC_EncodePriority>
 800219c:	4602      	mov	r2, r0
 800219e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff5d 	bl	8002064 <__NVIC_SetPriority>
}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff31 	bl	8002028 <__NVIC_EnableIRQ>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ffa2 	bl	8002120 <SysTick_Config>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f6:	e17f      	b.n	80024f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	4013      	ands	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8171 	beq.w	80024f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d005      	beq.n	8002228 <HAL_GPIO_Init+0x40>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d130      	bne.n	800228a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800225e:	2201      	movs	r2, #1
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	f003 0201 	and.w	r2, r3, #1
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b03      	cmp	r3, #3
 8002294:	d118      	bne.n	80022c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800229c:	2201      	movs	r2, #1
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	08db      	lsrs	r3, r3, #3
 80022b2:	f003 0201 	and.w	r2, r3, #1
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d017      	beq.n	8002304 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d123      	bne.n	8002358 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	6939      	ldr	r1, [r7, #16]
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0203 	and.w	r2, r3, #3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80ac 	beq.w	80024f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <HAL_GPIO_Init+0x330>)
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	4a5e      	ldr	r2, [pc, #376]	; (8002518 <HAL_GPIO_Init+0x330>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6613      	str	r3, [r2, #96]	; 0x60
 80023a6:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_GPIO_Init+0x330>)
 80023a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023b2:	4a5a      	ldr	r2, [pc, #360]	; (800251c <HAL_GPIO_Init+0x334>)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023dc:	d025      	beq.n	800242a <HAL_GPIO_Init+0x242>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4f      	ldr	r2, [pc, #316]	; (8002520 <HAL_GPIO_Init+0x338>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <HAL_GPIO_Init+0x23e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4e      	ldr	r2, [pc, #312]	; (8002524 <HAL_GPIO_Init+0x33c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0x23a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_GPIO_Init+0x340>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x236>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4c      	ldr	r2, [pc, #304]	; (800252c <HAL_GPIO_Init+0x344>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x232>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <HAL_GPIO_Init+0x348>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x22e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4a      	ldr	r2, [pc, #296]	; (8002534 <HAL_GPIO_Init+0x34c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x22a>
 800240e:	2306      	movs	r3, #6
 8002410:	e00c      	b.n	800242c <HAL_GPIO_Init+0x244>
 8002412:	2307      	movs	r3, #7
 8002414:	e00a      	b.n	800242c <HAL_GPIO_Init+0x244>
 8002416:	2305      	movs	r3, #5
 8002418:	e008      	b.n	800242c <HAL_GPIO_Init+0x244>
 800241a:	2304      	movs	r3, #4
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x244>
 800241e:	2303      	movs	r3, #3
 8002420:	e004      	b.n	800242c <HAL_GPIO_Init+0x244>
 8002422:	2302      	movs	r3, #2
 8002424:	e002      	b.n	800242c <HAL_GPIO_Init+0x244>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_GPIO_Init+0x244>
 800242a:	2300      	movs	r3, #0
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	f002 0203 	and.w	r2, r2, #3
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	4093      	lsls	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800243c:	4937      	ldr	r1, [pc, #220]	; (800251c <HAL_GPIO_Init+0x334>)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800244a:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_GPIO_Init+0x350>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800246e:	4a32      	ldr	r2, [pc, #200]	; (8002538 <HAL_GPIO_Init+0x350>)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002474:	4b30      	ldr	r3, [pc, #192]	; (8002538 <HAL_GPIO_Init+0x350>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	43db      	mvns	r3, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002498:	4a27      	ldr	r2, [pc, #156]	; (8002538 <HAL_GPIO_Init+0x350>)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800249e:	4b26      	ldr	r3, [pc, #152]	; (8002538 <HAL_GPIO_Init+0x350>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024c2:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_GPIO_Init+0x350>)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_GPIO_Init+0x350>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ec:	4a12      	ldr	r2, [pc, #72]	; (8002538 <HAL_GPIO_Init+0x350>)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3301      	adds	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	f47f ae78 	bne.w	80021f8 <HAL_GPIO_Init+0x10>
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	40010000 	.word	0x40010000
 8002520:	48000400 	.word	0x48000400
 8002524:	48000800 	.word	0x48000800
 8002528:	48000c00 	.word	0x48000c00
 800252c:	48001000 	.word	0x48001000
 8002530:	48001400 	.word	0x48001400
 8002534:	48001800 	.word	0x48001800
 8002538:	40010400 	.word	0x40010400

0800253c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800254a:	e0cd      	b.n	80026e8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800254c:	2201      	movs	r2, #1
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80c0 	beq.w	80026e2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002562:	4a68      	ldr	r2, [pc, #416]	; (8002704 <HAL_GPIO_DeInit+0x1c8>)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800258a:	d025      	beq.n	80025d8 <HAL_GPIO_DeInit+0x9c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a5e      	ldr	r2, [pc, #376]	; (8002708 <HAL_GPIO_DeInit+0x1cc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d01f      	beq.n	80025d4 <HAL_GPIO_DeInit+0x98>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a5d      	ldr	r2, [pc, #372]	; (800270c <HAL_GPIO_DeInit+0x1d0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d019      	beq.n	80025d0 <HAL_GPIO_DeInit+0x94>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a5c      	ldr	r2, [pc, #368]	; (8002710 <HAL_GPIO_DeInit+0x1d4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d013      	beq.n	80025cc <HAL_GPIO_DeInit+0x90>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a5b      	ldr	r2, [pc, #364]	; (8002714 <HAL_GPIO_DeInit+0x1d8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00d      	beq.n	80025c8 <HAL_GPIO_DeInit+0x8c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a5a      	ldr	r2, [pc, #360]	; (8002718 <HAL_GPIO_DeInit+0x1dc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d007      	beq.n	80025c4 <HAL_GPIO_DeInit+0x88>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a59      	ldr	r2, [pc, #356]	; (800271c <HAL_GPIO_DeInit+0x1e0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <HAL_GPIO_DeInit+0x84>
 80025bc:	2306      	movs	r3, #6
 80025be:	e00c      	b.n	80025da <HAL_GPIO_DeInit+0x9e>
 80025c0:	2307      	movs	r3, #7
 80025c2:	e00a      	b.n	80025da <HAL_GPIO_DeInit+0x9e>
 80025c4:	2305      	movs	r3, #5
 80025c6:	e008      	b.n	80025da <HAL_GPIO_DeInit+0x9e>
 80025c8:	2304      	movs	r3, #4
 80025ca:	e006      	b.n	80025da <HAL_GPIO_DeInit+0x9e>
 80025cc:	2303      	movs	r3, #3
 80025ce:	e004      	b.n	80025da <HAL_GPIO_DeInit+0x9e>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e002      	b.n	80025da <HAL_GPIO_DeInit+0x9e>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <HAL_GPIO_DeInit+0x9e>
 80025d8:	2300      	movs	r3, #0
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	f002 0203 	and.w	r2, r2, #3
 80025e0:	0092      	lsls	r2, r2, #2
 80025e2:	4093      	lsls	r3, r2
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d132      	bne.n	8002650 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80025ea:	4b4d      	ldr	r3, [pc, #308]	; (8002720 <HAL_GPIO_DeInit+0x1e4>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	494b      	ldr	r1, [pc, #300]	; (8002720 <HAL_GPIO_DeInit+0x1e4>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80025f8:	4b49      	ldr	r3, [pc, #292]	; (8002720 <HAL_GPIO_DeInit+0x1e4>)
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	4947      	ldr	r1, [pc, #284]	; (8002720 <HAL_GPIO_DeInit+0x1e4>)
 8002602:	4013      	ands	r3, r2
 8002604:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002606:	4b46      	ldr	r3, [pc, #280]	; (8002720 <HAL_GPIO_DeInit+0x1e4>)
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	4944      	ldr	r1, [pc, #272]	; (8002720 <HAL_GPIO_DeInit+0x1e4>)
 8002610:	4013      	ands	r3, r2
 8002612:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002614:	4b42      	ldr	r3, [pc, #264]	; (8002720 <HAL_GPIO_DeInit+0x1e4>)
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	4940      	ldr	r1, [pc, #256]	; (8002720 <HAL_GPIO_DeInit+0x1e4>)
 800261e:	4013      	ands	r3, r2
 8002620:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002632:	4a34      	ldr	r2, [pc, #208]	; (8002704 <HAL_GPIO_DeInit+0x1c8>)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	43da      	mvns	r2, r3
 8002642:	4830      	ldr	r0, [pc, #192]	; (8002704 <HAL_GPIO_DeInit+0x1c8>)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	400a      	ands	r2, r1
 800264a:	3302      	adds	r3, #2
 800264c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2103      	movs	r1, #3
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	08da      	lsrs	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3208      	adds	r2, #8
 800266c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	08d2      	lsrs	r2, r2, #3
 8002684:	4019      	ands	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3208      	adds	r2, #8
 800268a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2103      	movs	r1, #3
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	2101      	movs	r1, #1
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	401a      	ands	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2103      	movs	r1, #3
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	401a      	ands	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d2:	2101      	movs	r1, #1
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	401a      	ands	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f47f af2b 	bne.w	800254c <HAL_GPIO_DeInit+0x10>
  }
}
 80026f6:	bf00      	nop
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40010000 	.word	0x40010000
 8002708:	48000400 	.word	0x48000400
 800270c:	48000800 	.word	0x48000800
 8002710:	48000c00 	.word	0x48000c00
 8002714:	48001000 	.word	0x48001000
 8002718:	48001400 	.word	0x48001400
 800271c:	48001800 	.word	0x48001800
 8002720:	40010400 	.word	0x40010400

08002724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002740:	e002      	b.n	8002748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800276a:	4a05      	ldr	r2, [pc, #20]	; (8002780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f806 	bl	8002784 <HAL_GPIO_EXTI_Callback>
  }
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40010400 	.word	0x40010400

08002784 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e081      	b.n	80028b0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7fe fcff 	bl	80011c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2224      	movs	r2, #36	; 0x24
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d107      	bne.n	8002814 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	e006      	b.n	8002822 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002820:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d104      	bne.n	8002834 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002832:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002846:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002856:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69d9      	ldr	r1, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1a      	ldr	r2, [r3, #32]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e021      	b.n	800290e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2224      	movs	r2, #36	; 0x24
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fccc 	bl	8001280 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4603      	mov	r3, r0
 8002928:	817b      	strh	r3, [r7, #10]
 800292a:	460b      	mov	r3, r1
 800292c:	813b      	strh	r3, [r7, #8]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b20      	cmp	r3, #32
 800293c:	f040 80f9 	bne.w	8002b32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_I2C_Mem_Write+0x34>
 8002946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002952:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0ed      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_I2C_Mem_Write+0x4e>
 8002962:	2302      	movs	r3, #2
 8002964:	e0e6      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800296e:	f7ff faf9 	bl	8001f64 <HAL_GetTick>
 8002972:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2319      	movs	r3, #25
 800297a:	2201      	movs	r2, #1
 800297c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fac3 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0d1      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2221      	movs	r2, #33	; 0x21
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a3a      	ldr	r2, [r7, #32]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029b8:	88f8      	ldrh	r0, [r7, #6]
 80029ba:	893a      	ldrh	r2, [r7, #8]
 80029bc:	8979      	ldrh	r1, [r7, #10]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	4603      	mov	r3, r0
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f9d3 	bl	8002d74 <I2C_RequestMemoryWrite>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0a9      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2bff      	cmp	r3, #255	; 0xff
 80029e8:	d90e      	bls.n	8002a08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	8979      	ldrh	r1, [r7, #10]
 80029f8:	2300      	movs	r3, #0
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fc2b 	bl	800325c <I2C_TransferConfig>
 8002a06:	e00f      	b.n	8002a28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fc1a 	bl	800325c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 faad 	bl	8002f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e07b      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d034      	beq.n	8002ae0 <HAL_I2C_Mem_Write+0x1c8>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d130      	bne.n	8002ae0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	2200      	movs	r2, #0
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fa3f 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e04d      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2bff      	cmp	r3, #255	; 0xff
 8002aa0:	d90e      	bls.n	8002ac0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	22ff      	movs	r2, #255	; 0xff
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	8979      	ldrh	r1, [r7, #10]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fbcf 	bl	800325c <I2C_TransferConfig>
 8002abe:	e00f      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	8979      	ldrh	r1, [r7, #10]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fbbe 	bl	800325c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d19e      	bne.n	8002a28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fa8c 	bl	800300c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e01a      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2220      	movs	r2, #32
 8002b04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_I2C_Mem_Write+0x224>)
 8002b12:	400b      	ands	r3, r1
 8002b14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	fe00e800 	.word	0xfe00e800

08002b40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	4608      	mov	r0, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	817b      	strh	r3, [r7, #10]
 8002b52:	460b      	mov	r3, r1
 8002b54:	813b      	strh	r3, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	f040 80fd 	bne.w	8002d62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_I2C_Mem_Read+0x34>
 8002b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0f1      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_I2C_Mem_Read+0x4e>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e0ea      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b96:	f7ff f9e5 	bl	8001f64 <HAL_GetTick>
 8002b9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2319      	movs	r3, #25
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f9af 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0d5      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2222      	movs	r2, #34	; 0x22
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2240      	movs	r2, #64	; 0x40
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002be0:	88f8      	ldrh	r0, [r7, #6]
 8002be2:	893a      	ldrh	r2, [r7, #8]
 8002be4:	8979      	ldrh	r1, [r7, #10]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	4603      	mov	r3, r0
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f913 	bl	8002e1c <I2C_RequestMemoryRead>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0ad      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2bff      	cmp	r3, #255	; 0xff
 8002c10:	d90e      	bls.n	8002c30 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	22ff      	movs	r2, #255	; 0xff
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	8979      	ldrh	r1, [r7, #10]
 8002c20:	4b52      	ldr	r3, [pc, #328]	; (8002d6c <HAL_I2C_Mem_Read+0x22c>)
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fb17 	bl	800325c <I2C_TransferConfig>
 8002c2e:	e00f      	b.n	8002c50 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	8979      	ldrh	r1, [r7, #10]
 8002c42:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <HAL_I2C_Mem_Read+0x22c>)
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fb06 	bl	800325c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	2200      	movs	r2, #0
 8002c58:	2104      	movs	r1, #4
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f956 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07c      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d034      	beq.n	8002d10 <HAL_I2C_Mem_Read+0x1d0>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d130      	bne.n	8002d10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f927 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e04d      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2bff      	cmp	r3, #255	; 0xff
 8002cd0:	d90e      	bls.n	8002cf0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	22ff      	movs	r2, #255	; 0xff
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	8979      	ldrh	r1, [r7, #10]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fab7 	bl	800325c <I2C_TransferConfig>
 8002cee:	e00f      	b.n	8002d10 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	8979      	ldrh	r1, [r7, #10]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 faa6 	bl	800325c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d19a      	bne.n	8002c50 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f974 	bl	800300c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e01a      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2220      	movs	r2, #32
 8002d34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_I2C_Mem_Read+0x230>)
 8002d42:	400b      	ands	r3, r1
 8002d44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	80002400 	.word	0x80002400
 8002d70:	fe00e800 	.word	0xfe00e800

08002d74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	817b      	strh	r3, [r7, #10]
 8002d86:	460b      	mov	r3, r1
 8002d88:	813b      	strh	r3, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <I2C_RequestMemoryWrite+0xa4>)
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fa5d 	bl	800325c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	69b9      	ldr	r1, [r7, #24]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f8f0 	bl	8002f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e02c      	b.n	8002e10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dbc:	893b      	ldrh	r3, [r7, #8]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
 8002dc6:	e015      	b.n	8002df4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dc8:	893b      	ldrh	r3, [r7, #8]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	69b9      	ldr	r1, [r7, #24]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8d6 	bl	8002f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e012      	b.n	8002e10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dea:	893b      	ldrh	r3, [r7, #8]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f884 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	80002000 	.word	0x80002000

08002e1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	4608      	mov	r0, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	817b      	strh	r3, [r7, #10]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	813b      	strh	r3, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	8979      	ldrh	r1, [r7, #10]
 8002e3c:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <I2C_RequestMemoryRead+0xa4>)
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fa0a 	bl	800325c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	69b9      	ldr	r1, [r7, #24]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f89d 	bl	8002f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e02c      	b.n	8002eb6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e62:	893b      	ldrh	r3, [r7, #8]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e6c:	e015      	b.n	8002e9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e6e:	893b      	ldrh	r3, [r7, #8]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	69b9      	ldr	r1, [r7, #24]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f883 	bl	8002f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e012      	b.n	8002eb6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e90:	893b      	ldrh	r3, [r7, #8]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2140      	movs	r1, #64	; 0x40
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f831 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	80002000 	.word	0x80002000

08002ec4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d103      	bne.n	8002ee2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d007      	beq.n	8002f00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	619a      	str	r2, [r3, #24]
  }
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f1c:	e022      	b.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d01e      	beq.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f26:	f7ff f81d 	bl	8001f64 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d302      	bcc.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d113      	bne.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e00f      	b.n	8002f84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d0cd      	beq.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f98:	e02c      	b.n	8002ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f870 	bl	8003084 <I2C_IsErrorOccurred>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e02a      	b.n	8003004 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d01e      	beq.n	8002ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7fe ffd5 	bl	8001f64 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d113      	bne.n	8002ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e007      	b.n	8003004 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d1cb      	bne.n	8002f9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003018:	e028      	b.n	800306c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f830 	bl	8003084 <I2C_IsErrorOccurred>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e026      	b.n	800307c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fe ff99 	bl	8001f64 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d113      	bne.n	800306c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e007      	b.n	800307c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b20      	cmp	r3, #32
 8003078:	d1cf      	bne.n	800301a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d075      	beq.n	800319c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2210      	movs	r2, #16
 80030b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030b8:	e056      	b.n	8003168 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d052      	beq.n	8003168 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fe ff4f 	bl	8001f64 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_IsErrorOccurred+0x54>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d147      	bne.n	8003168 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fa:	d12e      	bne.n	800315a <I2C_IsErrorOccurred+0xd6>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003102:	d02a      	beq.n	800315a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	2b20      	cmp	r3, #32
 8003108:	d027      	beq.n	800315a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003118:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800311a:	f7fe ff23 	bl	8001f64 <HAL_GetTick>
 800311e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003120:	e01b      	b.n	800315a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003122:	f7fe ff1f 	bl	8001f64 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b19      	cmp	r3, #25
 800312e:	d914      	bls.n	800315a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b20      	cmp	r3, #32
 8003166:	d1dc      	bne.n	8003122 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b20      	cmp	r3, #32
 8003174:	d003      	beq.n	800317e <I2C_IsErrorOccurred+0xfa>
 8003176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800317a:	2b00      	cmp	r3, #0
 800317c:	d09d      	beq.n	80030ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800317e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003182:	2b00      	cmp	r3, #0
 8003184:	d103      	bne.n	800318e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2220      	movs	r2, #32
 800318c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00b      	beq.n	80031e8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	f043 0308 	orr.w	r3, r3, #8
 80031d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003202:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800320a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01c      	beq.n	800324c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f7ff fe56 	bl	8002ec4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6859      	ldr	r1, [r3, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <I2C_IsErrorOccurred+0x1d4>)
 8003224:	400b      	ands	r3, r1
 8003226:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	431a      	orrs	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800324c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003250:	4618      	mov	r0, r3
 8003252:	3728      	adds	r7, #40	; 0x28
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	fe00e800 	.word	0xfe00e800

0800325c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	817b      	strh	r3, [r7, #10]
 800326a:	4613      	mov	r3, r2
 800326c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800326e:	897b      	ldrh	r3, [r7, #10]
 8003270:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003274:	7a7b      	ldrb	r3, [r7, #9]
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800327c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	4313      	orrs	r3, r2
 8003286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800328a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	0d5b      	lsrs	r3, r3, #21
 8003296:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <I2C_TransferConfig+0x60>)
 800329c:	430b      	orrs	r3, r1
 800329e:	43db      	mvns	r3, r3
 80032a0:	ea02 0103 	and.w	r1, r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	03ff63ff 	.word	0x03ff63ff

080032c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d138      	bne.n	8003348 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e032      	b.n	800334a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	; 0x24
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003312:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b20      	cmp	r3, #32
 800336a:	d139      	bne.n	80033e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003376:	2302      	movs	r3, #2
 8003378:	e033      	b.n	80033e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2224      	movs	r2, #36	; 0x24
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e000      	b.n	80033e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
  }
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <HAL_PWREx_GetVoltageRange+0x18>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40007000 	.word	0x40007000

0800340c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341a:	d130      	bne.n	800347e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800341c:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003428:	d038      	beq.n	800349c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003432:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2232      	movs	r2, #50	; 0x32
 8003440:	fb02 f303 	mul.w	r3, r2, r3
 8003444:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0c9b      	lsrs	r3, r3, #18
 800344c:	3301      	adds	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003450:	e002      	b.n	8003458 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3b01      	subs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003464:	d102      	bne.n	800346c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f2      	bne.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003478:	d110      	bne.n	800349c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348a:	d007      	beq.n	800349c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003494:	4a05      	ldr	r2, [pc, #20]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800349a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40007000 	.word	0x40007000
 80034b0:	20000094 	.word	0x20000094
 80034b4:	431bde83 	.word	0x431bde83

080034b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e3c6      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ca:	4ba1      	ldr	r3, [pc, #644]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034d4:	4b9e      	ldr	r3, [pc, #632]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80e4 	beq.w	80036b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_RCC_OscConfig+0x4a>
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b0c      	cmp	r3, #12
 80034f6:	f040 808b 	bne.w	8003610 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	f040 8087 	bne.w	8003610 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003502:	4b93      	ldr	r3, [pc, #588]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_RCC_OscConfig+0x62>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e39e      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1a      	ldr	r2, [r3, #32]
 800351e:	4b8c      	ldr	r3, [pc, #560]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <HAL_RCC_OscConfig+0x7c>
 800352a:	4b89      	ldr	r3, [pc, #548]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003532:	e005      	b.n	8003540 <HAL_RCC_OscConfig+0x88>
 8003534:	4b86      	ldr	r3, [pc, #536]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003540:	4293      	cmp	r3, r2
 8003542:	d223      	bcs.n	800358c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fd53 	bl	8003ff4 <RCC_SetFlashLatencyFromMSIRange>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e37f      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003558:	4b7d      	ldr	r3, [pc, #500]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a7c      	ldr	r2, [pc, #496]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800355e:	f043 0308 	orr.w	r3, r3, #8
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b7a      	ldr	r3, [pc, #488]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4977      	ldr	r1, [pc, #476]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003576:	4b76      	ldr	r3, [pc, #472]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	4972      	ldr	r1, [pc, #456]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003586:	4313      	orrs	r3, r2
 8003588:	604b      	str	r3, [r1, #4]
 800358a:	e025      	b.n	80035d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800358c:	4b70      	ldr	r3, [pc, #448]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a6f      	ldr	r2, [pc, #444]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003592:	f043 0308 	orr.w	r3, r3, #8
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b6d      	ldr	r3, [pc, #436]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	496a      	ldr	r1, [pc, #424]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035aa:	4b69      	ldr	r3, [pc, #420]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	4965      	ldr	r1, [pc, #404]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fd13 	bl	8003ff4 <RCC_SetFlashLatencyFromMSIRange>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e33f      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035d8:	f000 fc48 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b5c      	ldr	r3, [pc, #368]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	495a      	ldr	r1, [pc, #360]	; (8003754 <HAL_RCC_OscConfig+0x29c>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	4a58      	ldr	r2, [pc, #352]	; (8003758 <HAL_RCC_OscConfig+0x2a0>)
 80035f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035f8:	4b58      	ldr	r3, [pc, #352]	; (800375c <HAL_RCC_OscConfig+0x2a4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fc61 	bl	8001ec4 <HAL_InitTick>
 8003602:	4603      	mov	r3, r0
 8003604:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d052      	beq.n	80036b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	e323      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d032      	beq.n	800367e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003618:	4b4d      	ldr	r3, [pc, #308]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a4c      	ldr	r2, [pc, #304]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003624:	f7fe fc9e 	bl	8001f64 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800362c:	f7fe fc9a 	bl	8001f64 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e30c      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800363e:	4b44      	ldr	r3, [pc, #272]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800364a:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a40      	ldr	r2, [pc, #256]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003650:	f043 0308 	orr.w	r3, r3, #8
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	4b3e      	ldr	r3, [pc, #248]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	493b      	ldr	r1, [pc, #236]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003668:	4b39      	ldr	r3, [pc, #228]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	4936      	ldr	r1, [pc, #216]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
 800367c:	e01a      	b.n	80036b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800367e:	4b34      	ldr	r3, [pc, #208]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a33      	ldr	r2, [pc, #204]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800368a:	f7fe fc6b 	bl	8001f64 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003692:	f7fe fc67 	bl	8001f64 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e2d9      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036a4:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCC_OscConfig+0x1da>
 80036b0:	e000      	b.n	80036b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d074      	beq.n	80037aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x21a>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d10e      	bne.n	80036ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d10b      	bne.n	80036ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d2:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d064      	beq.n	80037a8 <HAL_RCC_OscConfig+0x2f0>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d160      	bne.n	80037a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e2b6      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x24a>
 80036f4:	4b16      	ldr	r3, [pc, #88]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a15      	ldr	r2, [pc, #84]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 80036fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	e01d      	b.n	800373e <HAL_RCC_OscConfig+0x286>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800370a:	d10c      	bne.n	8003726 <HAL_RCC_OscConfig+0x26e>
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800371e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	e00b      	b.n	800373e <HAL_RCC_OscConfig+0x286>
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 800372c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a06      	ldr	r2, [pc, #24]	; (8003750 <HAL_RCC_OscConfig+0x298>)
 8003738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01c      	beq.n	8003780 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fe fc0d 	bl	8001f64 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800374c:	e011      	b.n	8003772 <HAL_RCC_OscConfig+0x2ba>
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	08006a58 	.word	0x08006a58
 8003758:	20000094 	.word	0x20000094
 800375c:	200000c0 	.word	0x200000c0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe fc00 	bl	8001f64 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e272      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003772:	4baf      	ldr	r3, [pc, #700]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x2a8>
 800377e:	e014      	b.n	80037aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe fbf0 	bl	8001f64 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003788:	f7fe fbec 	bl	8001f64 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e25e      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800379a:	4ba5      	ldr	r3, [pc, #660]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x2d0>
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d060      	beq.n	8003878 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_OscConfig+0x310>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b0c      	cmp	r3, #12
 80037c0:	d119      	bne.n	80037f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d116      	bne.n	80037f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037c8:	4b99      	ldr	r3, [pc, #612]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_OscConfig+0x328>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e23b      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e0:	4b93      	ldr	r3, [pc, #588]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	061b      	lsls	r3, r3, #24
 80037ee:	4990      	ldr	r1, [pc, #576]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037f4:	e040      	b.n	8003878 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d023      	beq.n	8003846 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037fe:	4b8c      	ldr	r3, [pc, #560]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a8b      	ldr	r2, [pc, #556]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fe fbab 	bl	8001f64 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003812:	f7fe fba7 	bl	8001f64 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e219      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003824:	4b82      	ldr	r3, [pc, #520]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b7f      	ldr	r3, [pc, #508]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	497c      	ldr	r1, [pc, #496]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
 8003844:	e018      	b.n	8003878 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003846:	4b7a      	ldr	r3, [pc, #488]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a79      	ldr	r2, [pc, #484]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800384c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fe fb87 	bl	8001f64 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385a:	f7fe fb83 	bl	8001f64 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1f5      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800386c:	4b70      	ldr	r3, [pc, #448]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f0      	bne.n	800385a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d03c      	beq.n	80038fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01c      	beq.n	80038c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388c:	4b68      	ldr	r3, [pc, #416]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800388e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003892:	4a67      	ldr	r2, [pc, #412]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fe fb62 	bl	8001f64 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fe fb5e 	bl	8001f64 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e1d0      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038b6:	4b5e      	ldr	r3, [pc, #376]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80038b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ef      	beq.n	80038a4 <HAL_RCC_OscConfig+0x3ec>
 80038c4:	e01b      	b.n	80038fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c6:	4b5a      	ldr	r3, [pc, #360]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80038c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038cc:	4a58      	ldr	r2, [pc, #352]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fe fb45 	bl	8001f64 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038de:	f7fe fb41 	bl	8001f64 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e1b3      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038f0:	4b4f      	ldr	r3, [pc, #316]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80038f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ef      	bne.n	80038de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80a6 	beq.w	8003a58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390c:	2300      	movs	r3, #0
 800390e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003910:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10d      	bne.n	8003938 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391c:	4b44      	ldr	r3, [pc, #272]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	4a43      	ldr	r2, [pc, #268]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003926:	6593      	str	r3, [r2, #88]	; 0x58
 8003928:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003934:	2301      	movs	r3, #1
 8003936:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003938:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <HAL_RCC_OscConfig+0x57c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d118      	bne.n	8003976 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003944:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <HAL_RCC_OscConfig+0x57c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a3a      	ldr	r2, [pc, #232]	; (8003a34 <HAL_RCC_OscConfig+0x57c>)
 800394a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003950:	f7fe fb08 	bl	8001f64 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003958:	f7fe fb04 	bl	8001f64 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e176      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800396a:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <HAL_RCC_OscConfig+0x57c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d108      	bne.n	8003990 <HAL_RCC_OscConfig+0x4d8>
 800397e:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	4a2a      	ldr	r2, [pc, #168]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800398e:	e024      	b.n	80039da <HAL_RCC_OscConfig+0x522>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b05      	cmp	r3, #5
 8003996:	d110      	bne.n	80039ba <HAL_RCC_OscConfig+0x502>
 8003998:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a8:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	4a20      	ldr	r2, [pc, #128]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039b8:	e00f      	b.n	80039da <HAL_RCC_OscConfig+0x522>
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039ca:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039d2:	f023 0304 	bic.w	r3, r3, #4
 80039d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fe fabf 	bl	8001f64 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fe fabb 	bl	8001f64 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e12b      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ed      	beq.n	80039ea <HAL_RCC_OscConfig+0x532>
 8003a0e:	e01a      	b.n	8003a46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fe faa8 	bl	8001f64 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a16:	e00f      	b.n	8003a38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a18:	f7fe faa4 	bl	8001f64 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d906      	bls.n	8003a38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e114      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a38:	4b89      	ldr	r3, [pc, #548]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e8      	bne.n	8003a18 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a46:	7ffb      	ldrb	r3, [r7, #31]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4c:	4b84      	ldr	r3, [pc, #528]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	4a83      	ldr	r2, [pc, #524]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80fa 	beq.w	8003c56 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	f040 80d0 	bne.w	8003c0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a6c:	4b7c      	ldr	r3, [pc, #496]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 0203 	and.w	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d130      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d127      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d11f      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aac:	2a07      	cmp	r2, #7
 8003aae:	bf14      	ite	ne
 8003ab0:	2201      	movne	r2, #1
 8003ab2:	2200      	moveq	r2, #0
 8003ab4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d113      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d109      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	3b01      	subs	r3, #1
 8003adc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d06e      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b0c      	cmp	r3, #12
 8003ae6:	d069      	beq.n	8003bbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ae8:	4b5d      	ldr	r3, [pc, #372]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003af4:	4b5a      	ldr	r3, [pc, #360]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0a9      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b04:	4b56      	ldr	r3, [pc, #344]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a55      	ldr	r2, [pc, #340]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b10:	f7fe fa28 	bl	8001f64 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fe fa24 	bl	8001f64 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e096      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b2a:	4b4d      	ldr	r3, [pc, #308]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b36:	4b4a      	ldr	r3, [pc, #296]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <HAL_RCC_OscConfig+0x7ac>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b46:	3a01      	subs	r2, #1
 8003b48:	0112      	lsls	r2, r2, #4
 8003b4a:	4311      	orrs	r1, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b50:	0212      	lsls	r2, r2, #8
 8003b52:	4311      	orrs	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b58:	0852      	lsrs	r2, r2, #1
 8003b5a:	3a01      	subs	r2, #1
 8003b5c:	0552      	lsls	r2, r2, #21
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b64:	0852      	lsrs	r2, r2, #1
 8003b66:	3a01      	subs	r2, #1
 8003b68:	0652      	lsls	r2, r2, #25
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b70:	0912      	lsrs	r2, r2, #4
 8003b72:	0452      	lsls	r2, r2, #17
 8003b74:	430a      	orrs	r2, r1
 8003b76:	493a      	ldr	r1, [pc, #232]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b7c:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a37      	ldr	r2, [pc, #220]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a34      	ldr	r2, [pc, #208]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b94:	f7fe f9e6 	bl	8001f64 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fe f9e2 	bl	8001f64 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e054      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bae:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bba:	e04c      	b.n	8003c56 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e04b      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d144      	bne.n	8003c56 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bcc:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bd8:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003be4:	f7fe f9be 	bl	8001f64 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fe f9ba 	bl	8001f64 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e02c      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfe:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x734>
 8003c0a:	e024      	b.n	8003c56 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	d01f      	beq.n	8003c52 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1e:	f7fe f9a1 	bl	8001f64 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c26:	f7fe f99d 	bl	8001f64 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e00f      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c38:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c44:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	4905      	ldr	r1, [pc, #20]	; (8003c60 <HAL_RCC_OscConfig+0x7a8>)
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <HAL_RCC_OscConfig+0x7b0>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60cb      	str	r3, [r1, #12]
 8003c50:	e001      	b.n	8003c56 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3720      	adds	r7, #32
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	f99d808c 	.word	0xf99d808c
 8003c68:	feeefffc 	.word	0xfeeefffc

08003c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0e7      	b.n	8003e50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c80:	4b75      	ldr	r3, [pc, #468]	; (8003e58 <HAL_RCC_ClockConfig+0x1ec>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d910      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <HAL_RCC_ClockConfig+0x1ec>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 0207 	bic.w	r2, r3, #7
 8003c96:	4970      	ldr	r1, [pc, #448]	; (8003e58 <HAL_RCC_ClockConfig+0x1ec>)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b6e      	ldr	r3, [pc, #440]	; (8003e58 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0cf      	b.n	8003e50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	4b66      	ldr	r3, [pc, #408]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d908      	bls.n	8003cde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b63      	ldr	r3, [pc, #396]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4960      	ldr	r1, [pc, #384]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d04c      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d107      	bne.n	8003d02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf2:	4b5a      	ldr	r3, [pc, #360]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d121      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e0a6      	b.n	8003e50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d107      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d0a:	4b54      	ldr	r3, [pc, #336]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d115      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e09a      	b.n	8003e50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d22:	4b4e      	ldr	r3, [pc, #312]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e08e      	b.n	8003e50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d32:	4b4a      	ldr	r3, [pc, #296]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e086      	b.n	8003e50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d42:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f023 0203 	bic.w	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4943      	ldr	r1, [pc, #268]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d54:	f7fe f906 	bl	8001f64 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5c:	f7fe f902 	bl	8001f64 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e06e      	b.n	8003e50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	4b3a      	ldr	r3, [pc, #232]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 020c 	and.w	r2, r3, #12
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d1eb      	bne.n	8003d5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d010      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d208      	bcs.n	8003db2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da0:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	492b      	ldr	r1, [pc, #172]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db2:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <HAL_RCC_ClockConfig+0x1ec>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d210      	bcs.n	8003de2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <HAL_RCC_ClockConfig+0x1ec>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 0207 	bic.w	r2, r3, #7
 8003dc8:	4923      	ldr	r1, [pc, #140]	; (8003e58 <HAL_RCC_ClockConfig+0x1ec>)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd0:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <HAL_RCC_ClockConfig+0x1ec>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e036      	b.n	8003e50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	4918      	ldr	r1, [pc, #96]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0c:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4910      	ldr	r1, [pc, #64]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e20:	f000 f824 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8003e24:	4602      	mov	r2, r0
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_RCC_ClockConfig+0x1f0>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	490b      	ldr	r1, [pc, #44]	; (8003e60 <HAL_RCC_ClockConfig+0x1f4>)
 8003e32:	5ccb      	ldrb	r3, [r1, r3]
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	4a09      	ldr	r2, [pc, #36]	; (8003e64 <HAL_RCC_ClockConfig+0x1f8>)
 8003e3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <HAL_RCC_ClockConfig+0x1fc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fe f83d 	bl	8001ec4 <HAL_InitTick>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40022000 	.word	0x40022000
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08006a58 	.word	0x08006a58
 8003e64:	20000094 	.word	0x20000094
 8003e68:	200000c0 	.word	0x200000c0

08003e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b089      	sub	sp, #36	; 0x24
 8003e70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7a:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e84:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	2b0c      	cmp	r3, #12
 8003e98:	d121      	bne.n	8003ede <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d11e      	bne.n	8003ede <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ea0:	4b34      	ldr	r3, [pc, #208]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d107      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003eac:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	e005      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ec8:	4a2b      	ldr	r2, [pc, #172]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10d      	bne.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d102      	bne.n	8003eea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	e004      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d101      	bne.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ef0:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ef2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b0c      	cmp	r3, #12
 8003ef8:	d134      	bne.n	8003f64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003efa:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d003      	beq.n	8003f12 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d003      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0xac>
 8003f10:	e005      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f12:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f14:	617b      	str	r3, [r7, #20]
      break;
 8003f16:	e005      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f1a:	617b      	str	r3, [r7, #20]
      break;
 8003f1c:	e002      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	617b      	str	r3, [r7, #20]
      break;
 8003f22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	3301      	adds	r3, #1
 8003f30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	fb02 f203 	mul.w	r2, r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	0e5b      	lsrs	r3, r3, #25
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	3301      	adds	r3, #1
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f64:	69bb      	ldr	r3, [r7, #24]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3724      	adds	r7, #36	; 0x24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40021000 	.word	0x40021000
 8003f78:	08006a70 	.word	0x08006a70
 8003f7c:	00f42400 	.word	0x00f42400
 8003f80:	007a1200 	.word	0x007a1200

08003f84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f88:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000094 	.word	0x20000094

08003f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fa0:	f7ff fff0 	bl	8003f84 <HAL_RCC_GetHCLKFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4904      	ldr	r1, [pc, #16]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	08006a68 	.word	0x08006a68

08003fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fcc:	f7ff ffda 	bl	8003f84 <HAL_RCC_GetHCLKFreq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	0adb      	lsrs	r3, r3, #11
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	4904      	ldr	r1, [pc, #16]	; (8003ff0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	08006a68 	.word	0x08006a68

08003ff4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004000:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800400c:	f7ff f9f0 	bl	80033f0 <HAL_PWREx_GetVoltageRange>
 8004010:	6178      	str	r0, [r7, #20]
 8004012:	e014      	b.n	800403e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	4a24      	ldr	r2, [pc, #144]	; (80040ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800401a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401e:	6593      	str	r3, [r2, #88]	; 0x58
 8004020:	4b22      	ldr	r3, [pc, #136]	; (80040ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800402c:	f7ff f9e0 	bl	80033f0 <HAL_PWREx_GetVoltageRange>
 8004030:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004032:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004036:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004044:	d10b      	bne.n	800405e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b80      	cmp	r3, #128	; 0x80
 800404a:	d919      	bls.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2ba0      	cmp	r3, #160	; 0xa0
 8004050:	d902      	bls.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004052:	2302      	movs	r3, #2
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	e013      	b.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004058:	2301      	movs	r3, #1
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	e010      	b.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b80      	cmp	r3, #128	; 0x80
 8004062:	d902      	bls.n	800406a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004064:	2303      	movs	r3, #3
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	e00a      	b.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b80      	cmp	r3, #128	; 0x80
 800406e:	d102      	bne.n	8004076 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004070:	2302      	movs	r3, #2
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	e004      	b.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b70      	cmp	r3, #112	; 0x70
 800407a:	d101      	bne.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800407c:	2301      	movs	r3, #1
 800407e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f023 0207 	bic.w	r2, r3, #7
 8004088:	4909      	ldr	r1, [pc, #36]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	429a      	cmp	r2, r3
 800409c:	d001      	beq.n	80040a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40022000 	.word	0x40022000

080040b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040bc:	2300      	movs	r3, #0
 80040be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040c0:	2300      	movs	r3, #0
 80040c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d041      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040d8:	d02a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040de:	d824      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040e4:	d008      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ea:	d81e      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040f4:	d010      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040f6:	e018      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040f8:	4b86      	ldr	r3, [pc, #536]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a85      	ldr	r2, [pc, #532]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004102:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004104:	e015      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3304      	adds	r3, #4
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fabb 	bl	8004688 <RCCEx_PLLSAI1_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004116:	e00c      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3320      	adds	r3, #32
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fba6 	bl	8004870 <RCCEx_PLLSAI2_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004128:	e003      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	74fb      	strb	r3, [r7, #19]
      break;
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004132:	7cfb      	ldrb	r3, [r7, #19]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10b      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004138:	4b76      	ldr	r3, [pc, #472]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004146:	4973      	ldr	r1, [pc, #460]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800414e:	e001      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	7cfb      	ldrb	r3, [r7, #19]
 8004152:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d041      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004164:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004168:	d02a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800416a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800416e:	d824      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004170:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004174:	d008      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800417a:	d81e      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004184:	d010      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004186:	e018      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004188:	4b62      	ldr	r3, [pc, #392]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4a61      	ldr	r2, [pc, #388]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004192:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004194:	e015      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3304      	adds	r3, #4
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fa73 	bl	8004688 <RCCEx_PLLSAI1_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041a6:	e00c      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3320      	adds	r3, #32
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fb5e 	bl	8004870 <RCCEx_PLLSAI2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041b8:	e003      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	74fb      	strb	r3, [r7, #19]
      break;
 80041be:	e000      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10b      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041c8:	4b52      	ldr	r3, [pc, #328]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d6:	494f      	ldr	r1, [pc, #316]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041de:	e001      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80a0 	beq.w	8004332 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041f6:	4b47      	ldr	r3, [pc, #284]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004206:	2300      	movs	r3, #0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00d      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420c:	4b41      	ldr	r3, [pc, #260]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	4a40      	ldr	r2, [pc, #256]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004216:	6593      	str	r3, [r2, #88]	; 0x58
 8004218:	4b3e      	ldr	r3, [pc, #248]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004224:	2301      	movs	r3, #1
 8004226:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004228:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a3a      	ldr	r2, [pc, #232]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800422e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004232:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004234:	f7fd fe96 	bl	8001f64 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800423a:	e009      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423c:	f7fd fe92 	bl	8001f64 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d902      	bls.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	74fb      	strb	r3, [r7, #19]
        break;
 800424e:	e005      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004250:	4b31      	ldr	r3, [pc, #196]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0ef      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d15c      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004262:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01f      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	d019      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004280:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800428c:	4b21      	ldr	r3, [pc, #132]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	4a20      	ldr	r2, [pc, #128]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800429c:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042ac:	4a19      	ldr	r2, [pc, #100]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042be:	f7fd fe51 	bl	8001f64 <HAL_GetTick>
 80042c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c4:	e00b      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c6:	f7fd fe4d 	bl	8001f64 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d902      	bls.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	74fb      	strb	r3, [r7, #19]
            break;
 80042dc:	e006      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ec      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10c      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004302:	4904      	ldr	r1, [pc, #16]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800430a:	e009      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	74bb      	strb	r3, [r7, #18]
 8004310:	e006      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	7cfb      	ldrb	r3, [r7, #19]
 800431e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004320:	7c7b      	ldrb	r3, [r7, #17]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004326:	4b9e      	ldr	r3, [pc, #632]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	4a9d      	ldr	r2, [pc, #628]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004330:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800433e:	4b98      	ldr	r3, [pc, #608]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f023 0203 	bic.w	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	4994      	ldr	r1, [pc, #592]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004360:	4b8f      	ldr	r3, [pc, #572]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f023 020c 	bic.w	r2, r3, #12
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	498c      	ldr	r1, [pc, #560]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004382:	4b87      	ldr	r3, [pc, #540]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	4983      	ldr	r1, [pc, #524]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043a4:	4b7e      	ldr	r3, [pc, #504]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	497b      	ldr	r1, [pc, #492]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043c6:	4b76      	ldr	r3, [pc, #472]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d4:	4972      	ldr	r1, [pc, #456]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043e8:	4b6d      	ldr	r3, [pc, #436]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	496a      	ldr	r1, [pc, #424]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800440a:	4b65      	ldr	r3, [pc, #404]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004418:	4961      	ldr	r1, [pc, #388]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800442c:	4b5c      	ldr	r3, [pc, #368]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443a:	4959      	ldr	r1, [pc, #356]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800444e:	4b54      	ldr	r3, [pc, #336]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445c:	4950      	ldr	r1, [pc, #320]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004470:	4b4b      	ldr	r3, [pc, #300]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	4948      	ldr	r1, [pc, #288]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004492:	4b43      	ldr	r3, [pc, #268]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004498:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	493f      	ldr	r1, [pc, #252]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d028      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044b4:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c2:	4937      	ldr	r1, [pc, #220]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d2:	d106      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d4:	4b32      	ldr	r3, [pc, #200]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4a31      	ldr	r2, [pc, #196]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044de:	60d3      	str	r3, [r2, #12]
 80044e0:	e011      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044ea:	d10c      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	2101      	movs	r1, #1
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f8c8 	bl	8004688 <RCCEx_PLLSAI1_Config>
 80044f8:	4603      	mov	r3, r0
 80044fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004502:	7cfb      	ldrb	r3, [r7, #19]
 8004504:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d028      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004512:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	491f      	ldr	r1, [pc, #124]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004530:	d106      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004532:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4a1a      	ldr	r2, [pc, #104]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800453c:	60d3      	str	r3, [r2, #12]
 800453e:	e011      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004548:	d10c      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3304      	adds	r3, #4
 800454e:	2101      	movs	r1, #1
 8004550:	4618      	mov	r0, r3
 8004552:	f000 f899 	bl	8004688 <RCCEx_PLLSAI1_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800455a:	7cfb      	ldrb	r3, [r7, #19]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d02b      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457e:	4908      	ldr	r1, [pc, #32]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800458e:	d109      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a02      	ldr	r2, [pc, #8]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800459a:	60d3      	str	r3, [r2, #12]
 800459c:	e014      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2101      	movs	r1, #1
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f867 	bl	8004688 <RCCEx_PLLSAI1_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d02f      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045d4:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e2:	4928      	ldr	r1, [pc, #160]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f2:	d10d      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 f844 	bl	8004688 <RCCEx_PLLSAI1_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d014      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800460a:	7cfb      	ldrb	r3, [r7, #19]
 800460c:	74bb      	strb	r3, [r7, #18]
 800460e:	e011      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004618:	d10c      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3320      	adds	r3, #32
 800461e:	2102      	movs	r1, #2
 8004620:	4618      	mov	r0, r3
 8004622:	f000 f925 	bl	8004870 <RCCEx_PLLSAI2_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800462a:	7cfb      	ldrb	r3, [r7, #19]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800464e:	490d      	ldr	r1, [pc, #52]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004672:	4904      	ldr	r1, [pc, #16]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800467a:	7cbb      	ldrb	r3, [r7, #18]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000

08004688 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004696:	4b75      	ldr	r3, [pc, #468]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d018      	beq.n	80046d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046a2:	4b72      	ldr	r3, [pc, #456]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0203 	and.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d10d      	bne.n	80046ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
       ||
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046ba:	4b6c      	ldr	r3, [pc, #432]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	091b      	lsrs	r3, r3, #4
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
       ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d047      	beq.n	800475e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
 80046d2:	e044      	b.n	800475e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d018      	beq.n	800470e <RCCEx_PLLSAI1_Config+0x86>
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d825      	bhi.n	800472c <RCCEx_PLLSAI1_Config+0xa4>
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d002      	beq.n	80046ea <RCCEx_PLLSAI1_Config+0x62>
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d009      	beq.n	80046fc <RCCEx_PLLSAI1_Config+0x74>
 80046e8:	e020      	b.n	800472c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046ea:	4b60      	ldr	r3, [pc, #384]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d11d      	bne.n	8004732 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046fa:	e01a      	b.n	8004732 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046fc:	4b5b      	ldr	r3, [pc, #364]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004704:	2b00      	cmp	r3, #0
 8004706:	d116      	bne.n	8004736 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470c:	e013      	b.n	8004736 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800470e:	4b57      	ldr	r3, [pc, #348]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10f      	bne.n	800473a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800471a:	4b54      	ldr	r3, [pc, #336]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800472a:	e006      	b.n	800473a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
      break;
 8004730:	e004      	b.n	800473c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004732:	bf00      	nop
 8004734:	e002      	b.n	800473c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004736:	bf00      	nop
 8004738:	e000      	b.n	800473c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800473a:	bf00      	nop
    }

    if(status == HAL_OK)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10d      	bne.n	800475e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004742:	4b4a      	ldr	r3, [pc, #296]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6819      	ldr	r1, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	3b01      	subs	r3, #1
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	430b      	orrs	r3, r1
 8004758:	4944      	ldr	r1, [pc, #272]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d17d      	bne.n	8004860 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004764:	4b41      	ldr	r3, [pc, #260]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a40      	ldr	r2, [pc, #256]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 800476a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800476e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004770:	f7fd fbf8 	bl	8001f64 <HAL_GetTick>
 8004774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004776:	e009      	b.n	800478c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004778:	f7fd fbf4 	bl	8001f64 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d902      	bls.n	800478c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	73fb      	strb	r3, [r7, #15]
        break;
 800478a:	e005      	b.n	8004798 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800478c:	4b37      	ldr	r3, [pc, #220]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1ef      	bne.n	8004778 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d160      	bne.n	8004860 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d111      	bne.n	80047c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047a4:	4b31      	ldr	r3, [pc, #196]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6892      	ldr	r2, [r2, #8]
 80047b4:	0211      	lsls	r1, r2, #8
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68d2      	ldr	r2, [r2, #12]
 80047ba:	0912      	lsrs	r2, r2, #4
 80047bc:	0452      	lsls	r2, r2, #17
 80047be:	430a      	orrs	r2, r1
 80047c0:	492a      	ldr	r1, [pc, #168]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	610b      	str	r3, [r1, #16]
 80047c6:	e027      	b.n	8004818 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d112      	bne.n	80047f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ce:	4b27      	ldr	r3, [pc, #156]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80047d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6892      	ldr	r2, [r2, #8]
 80047de:	0211      	lsls	r1, r2, #8
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6912      	ldr	r2, [r2, #16]
 80047e4:	0852      	lsrs	r2, r2, #1
 80047e6:	3a01      	subs	r2, #1
 80047e8:	0552      	lsls	r2, r2, #21
 80047ea:	430a      	orrs	r2, r1
 80047ec:	491f      	ldr	r1, [pc, #124]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	610b      	str	r3, [r1, #16]
 80047f2:	e011      	b.n	8004818 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f4:	4b1d      	ldr	r3, [pc, #116]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6892      	ldr	r2, [r2, #8]
 8004804:	0211      	lsls	r1, r2, #8
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6952      	ldr	r2, [r2, #20]
 800480a:	0852      	lsrs	r2, r2, #1
 800480c:	3a01      	subs	r2, #1
 800480e:	0652      	lsls	r2, r2, #25
 8004810:	430a      	orrs	r2, r1
 8004812:	4916      	ldr	r1, [pc, #88]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004814:	4313      	orrs	r3, r2
 8004816:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004818:	4b14      	ldr	r3, [pc, #80]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a13      	ldr	r2, [pc, #76]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 800481e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004822:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fd fb9e 	bl	8001f64 <HAL_GetTick>
 8004828:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800482a:	e009      	b.n	8004840 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800482c:	f7fd fb9a 	bl	8001f64 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d902      	bls.n	8004840 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	73fb      	strb	r3, [r7, #15]
          break;
 800483e:	e005      	b.n	800484c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0ef      	beq.n	800482c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	4904      	ldr	r1, [pc, #16]	; (800486c <RCCEx_PLLSAI1_Config+0x1e4>)
 800485c:	4313      	orrs	r3, r2
 800485e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000

08004870 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800487e:	4b6a      	ldr	r3, [pc, #424]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d018      	beq.n	80048bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800488a:	4b67      	ldr	r3, [pc, #412]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0203 	and.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d10d      	bne.n	80048b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
       ||
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048a2:	4b61      	ldr	r3, [pc, #388]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
       ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d047      	beq.n	8004946 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
 80048ba:	e044      	b.n	8004946 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d018      	beq.n	80048f6 <RCCEx_PLLSAI2_Config+0x86>
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d825      	bhi.n	8004914 <RCCEx_PLLSAI2_Config+0xa4>
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d002      	beq.n	80048d2 <RCCEx_PLLSAI2_Config+0x62>
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d009      	beq.n	80048e4 <RCCEx_PLLSAI2_Config+0x74>
 80048d0:	e020      	b.n	8004914 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048d2:	4b55      	ldr	r3, [pc, #340]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d11d      	bne.n	800491a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e2:	e01a      	b.n	800491a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048e4:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d116      	bne.n	800491e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f4:	e013      	b.n	800491e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048f6:	4b4c      	ldr	r3, [pc, #304]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004902:	4b49      	ldr	r3, [pc, #292]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004912:	e006      	b.n	8004922 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      break;
 8004918:	e004      	b.n	8004924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800491a:	bf00      	nop
 800491c:	e002      	b.n	8004924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004922:	bf00      	nop
    }

    if(status == HAL_OK)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10d      	bne.n	8004946 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800492a:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6819      	ldr	r1, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	3b01      	subs	r3, #1
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	430b      	orrs	r3, r1
 8004940:	4939      	ldr	r1, [pc, #228]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004942:	4313      	orrs	r3, r2
 8004944:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d167      	bne.n	8004a1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800494c:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a35      	ldr	r2, [pc, #212]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004958:	f7fd fb04 	bl	8001f64 <HAL_GetTick>
 800495c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800495e:	e009      	b.n	8004974 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004960:	f7fd fb00 	bl	8001f64 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d902      	bls.n	8004974 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	73fb      	strb	r3, [r7, #15]
        break;
 8004972:	e005      	b.n	8004980 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004974:	4b2c      	ldr	r3, [pc, #176]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ef      	bne.n	8004960 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d14a      	bne.n	8004a1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d111      	bne.n	80049b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800498c:	4b26      	ldr	r3, [pc, #152]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6892      	ldr	r2, [r2, #8]
 800499c:	0211      	lsls	r1, r2, #8
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68d2      	ldr	r2, [r2, #12]
 80049a2:	0912      	lsrs	r2, r2, #4
 80049a4:	0452      	lsls	r2, r2, #17
 80049a6:	430a      	orrs	r2, r1
 80049a8:	491f      	ldr	r1, [pc, #124]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	614b      	str	r3, [r1, #20]
 80049ae:	e011      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049b0:	4b1d      	ldr	r3, [pc, #116]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6892      	ldr	r2, [r2, #8]
 80049c0:	0211      	lsls	r1, r2, #8
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6912      	ldr	r2, [r2, #16]
 80049c6:	0852      	lsrs	r2, r2, #1
 80049c8:	3a01      	subs	r2, #1
 80049ca:	0652      	lsls	r2, r2, #25
 80049cc:	430a      	orrs	r2, r1
 80049ce:	4916      	ldr	r1, [pc, #88]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049d4:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a13      	ldr	r2, [pc, #76]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e0:	f7fd fac0 	bl	8001f64 <HAL_GetTick>
 80049e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049e6:	e009      	b.n	80049fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049e8:	f7fd fabc 	bl	8001f64 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d902      	bls.n	80049fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	73fb      	strb	r3, [r7, #15]
          break;
 80049fa:	e005      	b.n	8004a08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0ef      	beq.n	80049e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a10:	695a      	ldr	r2, [r3, #20]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	4904      	ldr	r1, [pc, #16]	; (8004a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000

08004a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e040      	b.n	8004ac0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fc fc3a 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2224      	movs	r2, #36	; 0x24
 8004a58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0201 	bic.w	r2, r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8c0 	bl	8004bf0 <UART_SetConfig>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e022      	b.n	8004ac0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fb3e 	bl	8005104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fbc5 	bl	8005248 <UART_CheckIdleState>
 8004abe:	4603      	mov	r3, r0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	f040 8082 	bne.w	8004be6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_UART_Transmit+0x26>
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e07a      	b.n	8004be8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_UART_Transmit+0x38>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e073      	b.n	8004be8 <HAL_UART_Transmit+0x120>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2221      	movs	r2, #33	; 0x21
 8004b14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b16:	f7fd fa25 	bl	8001f64 <HAL_GetTick>
 8004b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b34:	d108      	bne.n	8004b48 <HAL_UART_Transmit+0x80>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d104      	bne.n	8004b48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	e003      	b.n	8004b50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004b58:	e02d      	b.n	8004bb6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2200      	movs	r2, #0
 8004b62:	2180      	movs	r1, #128	; 0x80
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fbb8 	bl	80052da <UART_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e039      	b.n	8004be8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10b      	bne.n	8004b92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	881a      	ldrh	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b86:	b292      	uxth	r2, r2
 8004b88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	e008      	b.n	8004ba4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	b292      	uxth	r2, r2
 8004b9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1cb      	bne.n	8004b5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2140      	movs	r1, #64	; 0x40
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fb84 	bl	80052da <UART_WaitOnFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e005      	b.n	8004be8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e000      	b.n	8004be8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
  }
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3720      	adds	r7, #32
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf0:	b5b0      	push	{r4, r5, r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4bad      	ldr	r3, [pc, #692]	; (8004ed0 <UART_SetConfig+0x2e0>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	69f9      	ldr	r1, [r7, #28]
 8004c24:	430b      	orrs	r3, r1
 8004c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4aa2      	ldr	r2, [pc, #648]	; (8004ed4 <UART_SetConfig+0x2e4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69fa      	ldr	r2, [r7, #28]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a99      	ldr	r2, [pc, #612]	; (8004ed8 <UART_SetConfig+0x2e8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d121      	bne.n	8004cba <UART_SetConfig+0xca>
 8004c76:	4b99      	ldr	r3, [pc, #612]	; (8004edc <UART_SetConfig+0x2ec>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d817      	bhi.n	8004cb4 <UART_SetConfig+0xc4>
 8004c84:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <UART_SetConfig+0x9c>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004c9d 	.word	0x08004c9d
 8004c90:	08004ca9 	.word	0x08004ca9
 8004c94:	08004ca3 	.word	0x08004ca3
 8004c98:	08004caf 	.word	0x08004caf
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	76fb      	strb	r3, [r7, #27]
 8004ca0:	e0e7      	b.n	8004e72 <UART_SetConfig+0x282>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	76fb      	strb	r3, [r7, #27]
 8004ca6:	e0e4      	b.n	8004e72 <UART_SetConfig+0x282>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	76fb      	strb	r3, [r7, #27]
 8004cac:	e0e1      	b.n	8004e72 <UART_SetConfig+0x282>
 8004cae:	2308      	movs	r3, #8
 8004cb0:	76fb      	strb	r3, [r7, #27]
 8004cb2:	e0de      	b.n	8004e72 <UART_SetConfig+0x282>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	76fb      	strb	r3, [r7, #27]
 8004cb8:	e0db      	b.n	8004e72 <UART_SetConfig+0x282>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a88      	ldr	r2, [pc, #544]	; (8004ee0 <UART_SetConfig+0x2f0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d132      	bne.n	8004d2a <UART_SetConfig+0x13a>
 8004cc4:	4b85      	ldr	r3, [pc, #532]	; (8004edc <UART_SetConfig+0x2ec>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d828      	bhi.n	8004d24 <UART_SetConfig+0x134>
 8004cd2:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <UART_SetConfig+0xe8>)
 8004cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd8:	08004d0d 	.word	0x08004d0d
 8004cdc:	08004d25 	.word	0x08004d25
 8004ce0:	08004d25 	.word	0x08004d25
 8004ce4:	08004d25 	.word	0x08004d25
 8004ce8:	08004d19 	.word	0x08004d19
 8004cec:	08004d25 	.word	0x08004d25
 8004cf0:	08004d25 	.word	0x08004d25
 8004cf4:	08004d25 	.word	0x08004d25
 8004cf8:	08004d13 	.word	0x08004d13
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004d1f 	.word	0x08004d1f
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	76fb      	strb	r3, [r7, #27]
 8004d10:	e0af      	b.n	8004e72 <UART_SetConfig+0x282>
 8004d12:	2302      	movs	r3, #2
 8004d14:	76fb      	strb	r3, [r7, #27]
 8004d16:	e0ac      	b.n	8004e72 <UART_SetConfig+0x282>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	76fb      	strb	r3, [r7, #27]
 8004d1c:	e0a9      	b.n	8004e72 <UART_SetConfig+0x282>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	76fb      	strb	r3, [r7, #27]
 8004d22:	e0a6      	b.n	8004e72 <UART_SetConfig+0x282>
 8004d24:	2310      	movs	r3, #16
 8004d26:	76fb      	strb	r3, [r7, #27]
 8004d28:	e0a3      	b.n	8004e72 <UART_SetConfig+0x282>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a6d      	ldr	r2, [pc, #436]	; (8004ee4 <UART_SetConfig+0x2f4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d120      	bne.n	8004d76 <UART_SetConfig+0x186>
 8004d34:	4b69      	ldr	r3, [pc, #420]	; (8004edc <UART_SetConfig+0x2ec>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d3e:	2b30      	cmp	r3, #48	; 0x30
 8004d40:	d013      	beq.n	8004d6a <UART_SetConfig+0x17a>
 8004d42:	2b30      	cmp	r3, #48	; 0x30
 8004d44:	d814      	bhi.n	8004d70 <UART_SetConfig+0x180>
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d009      	beq.n	8004d5e <UART_SetConfig+0x16e>
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d810      	bhi.n	8004d70 <UART_SetConfig+0x180>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <UART_SetConfig+0x168>
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d006      	beq.n	8004d64 <UART_SetConfig+0x174>
 8004d56:	e00b      	b.n	8004d70 <UART_SetConfig+0x180>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	76fb      	strb	r3, [r7, #27]
 8004d5c:	e089      	b.n	8004e72 <UART_SetConfig+0x282>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	76fb      	strb	r3, [r7, #27]
 8004d62:	e086      	b.n	8004e72 <UART_SetConfig+0x282>
 8004d64:	2304      	movs	r3, #4
 8004d66:	76fb      	strb	r3, [r7, #27]
 8004d68:	e083      	b.n	8004e72 <UART_SetConfig+0x282>
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	76fb      	strb	r3, [r7, #27]
 8004d6e:	e080      	b.n	8004e72 <UART_SetConfig+0x282>
 8004d70:	2310      	movs	r3, #16
 8004d72:	76fb      	strb	r3, [r7, #27]
 8004d74:	e07d      	b.n	8004e72 <UART_SetConfig+0x282>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a5b      	ldr	r2, [pc, #364]	; (8004ee8 <UART_SetConfig+0x2f8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d120      	bne.n	8004dc2 <UART_SetConfig+0x1d2>
 8004d80:	4b56      	ldr	r3, [pc, #344]	; (8004edc <UART_SetConfig+0x2ec>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d8c:	d013      	beq.n	8004db6 <UART_SetConfig+0x1c6>
 8004d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d90:	d814      	bhi.n	8004dbc <UART_SetConfig+0x1cc>
 8004d92:	2b80      	cmp	r3, #128	; 0x80
 8004d94:	d009      	beq.n	8004daa <UART_SetConfig+0x1ba>
 8004d96:	2b80      	cmp	r3, #128	; 0x80
 8004d98:	d810      	bhi.n	8004dbc <UART_SetConfig+0x1cc>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <UART_SetConfig+0x1b4>
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d006      	beq.n	8004db0 <UART_SetConfig+0x1c0>
 8004da2:	e00b      	b.n	8004dbc <UART_SetConfig+0x1cc>
 8004da4:	2300      	movs	r3, #0
 8004da6:	76fb      	strb	r3, [r7, #27]
 8004da8:	e063      	b.n	8004e72 <UART_SetConfig+0x282>
 8004daa:	2302      	movs	r3, #2
 8004dac:	76fb      	strb	r3, [r7, #27]
 8004dae:	e060      	b.n	8004e72 <UART_SetConfig+0x282>
 8004db0:	2304      	movs	r3, #4
 8004db2:	76fb      	strb	r3, [r7, #27]
 8004db4:	e05d      	b.n	8004e72 <UART_SetConfig+0x282>
 8004db6:	2308      	movs	r3, #8
 8004db8:	76fb      	strb	r3, [r7, #27]
 8004dba:	e05a      	b.n	8004e72 <UART_SetConfig+0x282>
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	76fb      	strb	r3, [r7, #27]
 8004dc0:	e057      	b.n	8004e72 <UART_SetConfig+0x282>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a49      	ldr	r2, [pc, #292]	; (8004eec <UART_SetConfig+0x2fc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d125      	bne.n	8004e18 <UART_SetConfig+0x228>
 8004dcc:	4b43      	ldr	r3, [pc, #268]	; (8004edc <UART_SetConfig+0x2ec>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dda:	d017      	beq.n	8004e0c <UART_SetConfig+0x21c>
 8004ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de0:	d817      	bhi.n	8004e12 <UART_SetConfig+0x222>
 8004de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de6:	d00b      	beq.n	8004e00 <UART_SetConfig+0x210>
 8004de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dec:	d811      	bhi.n	8004e12 <UART_SetConfig+0x222>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <UART_SetConfig+0x20a>
 8004df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df6:	d006      	beq.n	8004e06 <UART_SetConfig+0x216>
 8004df8:	e00b      	b.n	8004e12 <UART_SetConfig+0x222>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	76fb      	strb	r3, [r7, #27]
 8004dfe:	e038      	b.n	8004e72 <UART_SetConfig+0x282>
 8004e00:	2302      	movs	r3, #2
 8004e02:	76fb      	strb	r3, [r7, #27]
 8004e04:	e035      	b.n	8004e72 <UART_SetConfig+0x282>
 8004e06:	2304      	movs	r3, #4
 8004e08:	76fb      	strb	r3, [r7, #27]
 8004e0a:	e032      	b.n	8004e72 <UART_SetConfig+0x282>
 8004e0c:	2308      	movs	r3, #8
 8004e0e:	76fb      	strb	r3, [r7, #27]
 8004e10:	e02f      	b.n	8004e72 <UART_SetConfig+0x282>
 8004e12:	2310      	movs	r3, #16
 8004e14:	76fb      	strb	r3, [r7, #27]
 8004e16:	e02c      	b.n	8004e72 <UART_SetConfig+0x282>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a2d      	ldr	r2, [pc, #180]	; (8004ed4 <UART_SetConfig+0x2e4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d125      	bne.n	8004e6e <UART_SetConfig+0x27e>
 8004e22:	4b2e      	ldr	r3, [pc, #184]	; (8004edc <UART_SetConfig+0x2ec>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e30:	d017      	beq.n	8004e62 <UART_SetConfig+0x272>
 8004e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e36:	d817      	bhi.n	8004e68 <UART_SetConfig+0x278>
 8004e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e3c:	d00b      	beq.n	8004e56 <UART_SetConfig+0x266>
 8004e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e42:	d811      	bhi.n	8004e68 <UART_SetConfig+0x278>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <UART_SetConfig+0x260>
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4c:	d006      	beq.n	8004e5c <UART_SetConfig+0x26c>
 8004e4e:	e00b      	b.n	8004e68 <UART_SetConfig+0x278>
 8004e50:	2300      	movs	r3, #0
 8004e52:	76fb      	strb	r3, [r7, #27]
 8004e54:	e00d      	b.n	8004e72 <UART_SetConfig+0x282>
 8004e56:	2302      	movs	r3, #2
 8004e58:	76fb      	strb	r3, [r7, #27]
 8004e5a:	e00a      	b.n	8004e72 <UART_SetConfig+0x282>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	76fb      	strb	r3, [r7, #27]
 8004e60:	e007      	b.n	8004e72 <UART_SetConfig+0x282>
 8004e62:	2308      	movs	r3, #8
 8004e64:	76fb      	strb	r3, [r7, #27]
 8004e66:	e004      	b.n	8004e72 <UART_SetConfig+0x282>
 8004e68:	2310      	movs	r3, #16
 8004e6a:	76fb      	strb	r3, [r7, #27]
 8004e6c:	e001      	b.n	8004e72 <UART_SetConfig+0x282>
 8004e6e:	2310      	movs	r3, #16
 8004e70:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <UART_SetConfig+0x2e4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	f040 8087 	bne.w	8004f8c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e7e:	7efb      	ldrb	r3, [r7, #27]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d837      	bhi.n	8004ef4 <UART_SetConfig+0x304>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <UART_SetConfig+0x29c>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004ef5 	.word	0x08004ef5
 8004e94:	08004eb9 	.word	0x08004eb9
 8004e98:	08004ef5 	.word	0x08004ef5
 8004e9c:	08004ebf 	.word	0x08004ebf
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	08004ef5 	.word	0x08004ef5
 8004ea8:	08004ef5 	.word	0x08004ef5
 8004eac:	08004ec7 	.word	0x08004ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb0:	f7ff f874 	bl	8003f9c <HAL_RCC_GetPCLK1Freq>
 8004eb4:	6178      	str	r0, [r7, #20]
        break;
 8004eb6:	e022      	b.n	8004efe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <UART_SetConfig+0x300>)
 8004eba:	617b      	str	r3, [r7, #20]
        break;
 8004ebc:	e01f      	b.n	8004efe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ebe:	f7fe ffd5 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8004ec2:	6178      	str	r0, [r7, #20]
        break;
 8004ec4:	e01b      	b.n	8004efe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eca:	617b      	str	r3, [r7, #20]
        break;
 8004ecc:	e017      	b.n	8004efe <UART_SetConfig+0x30e>
 8004ece:	bf00      	nop
 8004ed0:	efff69f3 	.word	0xefff69f3
 8004ed4:	40008000 	.word	0x40008000
 8004ed8:	40013800 	.word	0x40013800
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	40004400 	.word	0x40004400
 8004ee4:	40004800 	.word	0x40004800
 8004ee8:	40004c00 	.word	0x40004c00
 8004eec:	40005000 	.word	0x40005000
 8004ef0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	76bb      	strb	r3, [r7, #26]
        break;
 8004efc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80f1 	beq.w	80050e8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	4413      	add	r3, r2
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d305      	bcc.n	8004f22 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d902      	bls.n	8004f28 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	76bb      	strb	r3, [r7, #26]
 8004f26:	e0df      	b.n	80050e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f04f 0100 	mov.w	r1, #0
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	020b      	lsls	r3, r1, #8
 8004f3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f3e:	0202      	lsls	r2, r0, #8
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	6849      	ldr	r1, [r1, #4]
 8004f44:	0849      	lsrs	r1, r1, #1
 8004f46:	4608      	mov	r0, r1
 8004f48:	f04f 0100 	mov.w	r1, #0
 8004f4c:	1814      	adds	r4, r2, r0
 8004f4e:	eb43 0501 	adc.w	r5, r3, r1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	4629      	mov	r1, r5
 8004f60:	f7fb fb6a 	bl	8000638 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4613      	mov	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f72:	d308      	bcc.n	8004f86 <UART_SetConfig+0x396>
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7a:	d204      	bcs.n	8004f86 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	60da      	str	r2, [r3, #12]
 8004f84:	e0b0      	b.n	80050e8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	76bb      	strb	r3, [r7, #26]
 8004f8a:	e0ad      	b.n	80050e8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f94:	d15b      	bne.n	800504e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004f96:	7efb      	ldrb	r3, [r7, #27]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d828      	bhi.n	8004fee <UART_SetConfig+0x3fe>
 8004f9c:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <UART_SetConfig+0x3b4>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fd1 	.word	0x08004fd1
 8004fac:	08004fd9 	.word	0x08004fd9
 8004fb0:	08004fef 	.word	0x08004fef
 8004fb4:	08004fdf 	.word	0x08004fdf
 8004fb8:	08004fef 	.word	0x08004fef
 8004fbc:	08004fef 	.word	0x08004fef
 8004fc0:	08004fef 	.word	0x08004fef
 8004fc4:	08004fe7 	.word	0x08004fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc8:	f7fe ffe8 	bl	8003f9c <HAL_RCC_GetPCLK1Freq>
 8004fcc:	6178      	str	r0, [r7, #20]
        break;
 8004fce:	e013      	b.n	8004ff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd0:	f7fe fffa 	bl	8003fc8 <HAL_RCC_GetPCLK2Freq>
 8004fd4:	6178      	str	r0, [r7, #20]
        break;
 8004fd6:	e00f      	b.n	8004ff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd8:	4b49      	ldr	r3, [pc, #292]	; (8005100 <UART_SetConfig+0x510>)
 8004fda:	617b      	str	r3, [r7, #20]
        break;
 8004fdc:	e00c      	b.n	8004ff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fde:	f7fe ff45 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8004fe2:	6178      	str	r0, [r7, #20]
        break;
 8004fe4:	e008      	b.n	8004ff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fea:	617b      	str	r3, [r7, #20]
        break;
 8004fec:	e004      	b.n	8004ff8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	76bb      	strb	r3, [r7, #26]
        break;
 8004ff6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d074      	beq.n	80050e8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	005a      	lsls	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	441a      	add	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	d916      	bls.n	8005048 <UART_SetConfig+0x458>
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005020:	d212      	bcs.n	8005048 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f023 030f 	bic.w	r3, r3, #15
 800502a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	b29b      	uxth	r3, r3
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	b29a      	uxth	r2, r3
 8005038:	89fb      	ldrh	r3, [r7, #14]
 800503a:	4313      	orrs	r3, r2
 800503c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	89fa      	ldrh	r2, [r7, #14]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	e04f      	b.n	80050e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	76bb      	strb	r3, [r7, #26]
 800504c:	e04c      	b.n	80050e8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800504e:	7efb      	ldrb	r3, [r7, #27]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d828      	bhi.n	80050a6 <UART_SetConfig+0x4b6>
 8005054:	a201      	add	r2, pc, #4	; (adr r2, 800505c <UART_SetConfig+0x46c>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	08005081 	.word	0x08005081
 8005060:	08005089 	.word	0x08005089
 8005064:	08005091 	.word	0x08005091
 8005068:	080050a7 	.word	0x080050a7
 800506c:	08005097 	.word	0x08005097
 8005070:	080050a7 	.word	0x080050a7
 8005074:	080050a7 	.word	0x080050a7
 8005078:	080050a7 	.word	0x080050a7
 800507c:	0800509f 	.word	0x0800509f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005080:	f7fe ff8c 	bl	8003f9c <HAL_RCC_GetPCLK1Freq>
 8005084:	6178      	str	r0, [r7, #20]
        break;
 8005086:	e013      	b.n	80050b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005088:	f7fe ff9e 	bl	8003fc8 <HAL_RCC_GetPCLK2Freq>
 800508c:	6178      	str	r0, [r7, #20]
        break;
 800508e:	e00f      	b.n	80050b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005090:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <UART_SetConfig+0x510>)
 8005092:	617b      	str	r3, [r7, #20]
        break;
 8005094:	e00c      	b.n	80050b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005096:	f7fe fee9 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 800509a:	6178      	str	r0, [r7, #20]
        break;
 800509c:	e008      	b.n	80050b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a2:	617b      	str	r3, [r7, #20]
        break;
 80050a4:	e004      	b.n	80050b0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	76bb      	strb	r3, [r7, #26]
        break;
 80050ae:	bf00      	nop
    }

    if (pclk != 0U)
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d018      	beq.n	80050e8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	085a      	lsrs	r2, r3, #1
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	441a      	add	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b0f      	cmp	r3, #15
 80050ce:	d909      	bls.n	80050e4 <UART_SetConfig+0x4f4>
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d6:	d205      	bcs.n	80050e4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	b29a      	uxth	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	e001      	b.n	80050e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3720      	adds	r7, #32
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bdb0      	pop	{r4, r5, r7, pc}
 80050fe:	bf00      	nop
 8005100:	00f42400 	.word	0x00f42400

08005104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01a      	beq.n	800521a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005202:	d10a      	bne.n	800521a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	605a      	str	r2, [r3, #4]
  }
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af02      	add	r7, sp, #8
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005258:	f7fc fe84 	bl	8001f64 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b08      	cmp	r3, #8
 800526a:	d10e      	bne.n	800528a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800526c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f82d 	bl	80052da <UART_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e023      	b.n	80052d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b04      	cmp	r3, #4
 8005296:	d10e      	bne.n	80052b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f817 	bl	80052da <UART_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e00d      	b.n	80052d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b09c      	sub	sp, #112	; 0x70
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	4613      	mov	r3, r2
 80052e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ea:	e0a5      	b.n	8005438 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	f000 80a1 	beq.w	8005438 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f6:	f7fc fe35 	bl	8001f64 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005302:	429a      	cmp	r2, r3
 8005304:	d302      	bcc.n	800530c <UART_WaitOnFlagUntilTimeout+0x32>
 8005306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005308:	2b00      	cmp	r3, #0
 800530a:	d13e      	bne.n	800538a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800531a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005320:	667b      	str	r3, [r7, #100]	; 0x64
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800532a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800532c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005330:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e6      	bne.n	800530c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3308      	adds	r3, #8
 8005344:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	663b      	str	r3, [r7, #96]	; 0x60
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3308      	adds	r3, #8
 800535c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800535e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005360:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800536c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e5      	bne.n	800533e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e067      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d04f      	beq.n	8005438 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a6:	d147      	bne.n	8005438 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053b0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
 80053d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e6      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3308      	adds	r3, #8
 80053ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	613b      	str	r3, [r7, #16]
   return(result);
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f023 0301 	bic.w	r3, r3, #1
 80053fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3308      	adds	r3, #8
 8005402:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005404:	623a      	str	r2, [r7, #32]
 8005406:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	69f9      	ldr	r1, [r7, #28]
 800540a:	6a3a      	ldr	r2, [r7, #32]
 800540c:	e841 2300 	strex	r3, r2, [r1]
 8005410:	61bb      	str	r3, [r7, #24]
   return(result);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e5      	bne.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e010      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69da      	ldr	r2, [r3, #28]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	4013      	ands	r3, r2
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	429a      	cmp	r2, r3
 8005446:	bf0c      	ite	eq
 8005448:	2301      	moveq	r3, #1
 800544a:	2300      	movne	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	429a      	cmp	r2, r3
 8005454:	f43f af4a 	beq.w	80052ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3770      	adds	r7, #112	; 0x70
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <__errno>:
 8005464:	4b01      	ldr	r3, [pc, #4]	; (800546c <__errno+0x8>)
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	200000c8 	.word	0x200000c8

08005470 <__libc_init_array>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	4d0d      	ldr	r5, [pc, #52]	; (80054a8 <__libc_init_array+0x38>)
 8005474:	4c0d      	ldr	r4, [pc, #52]	; (80054ac <__libc_init_array+0x3c>)
 8005476:	1b64      	subs	r4, r4, r5
 8005478:	10a4      	asrs	r4, r4, #2
 800547a:	2600      	movs	r6, #0
 800547c:	42a6      	cmp	r6, r4
 800547e:	d109      	bne.n	8005494 <__libc_init_array+0x24>
 8005480:	4d0b      	ldr	r5, [pc, #44]	; (80054b0 <__libc_init_array+0x40>)
 8005482:	4c0c      	ldr	r4, [pc, #48]	; (80054b4 <__libc_init_array+0x44>)
 8005484:	f001 fa04 	bl	8006890 <_init>
 8005488:	1b64      	subs	r4, r4, r5
 800548a:	10a4      	asrs	r4, r4, #2
 800548c:	2600      	movs	r6, #0
 800548e:	42a6      	cmp	r6, r4
 8005490:	d105      	bne.n	800549e <__libc_init_array+0x2e>
 8005492:	bd70      	pop	{r4, r5, r6, pc}
 8005494:	f855 3b04 	ldr.w	r3, [r5], #4
 8005498:	4798      	blx	r3
 800549a:	3601      	adds	r6, #1
 800549c:	e7ee      	b.n	800547c <__libc_init_array+0xc>
 800549e:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a2:	4798      	blx	r3
 80054a4:	3601      	adds	r6, #1
 80054a6:	e7f2      	b.n	800548e <__libc_init_array+0x1e>
 80054a8:	08006b40 	.word	0x08006b40
 80054ac:	08006b40 	.word	0x08006b40
 80054b0:	08006b40 	.word	0x08006b40
 80054b4:	08006b44 	.word	0x08006b44

080054b8 <memset>:
 80054b8:	4402      	add	r2, r0
 80054ba:	4603      	mov	r3, r0
 80054bc:	4293      	cmp	r3, r2
 80054be:	d100      	bne.n	80054c2 <memset+0xa>
 80054c0:	4770      	bx	lr
 80054c2:	f803 1b01 	strb.w	r1, [r3], #1
 80054c6:	e7f9      	b.n	80054bc <memset+0x4>

080054c8 <iprintf>:
 80054c8:	b40f      	push	{r0, r1, r2, r3}
 80054ca:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <iprintf+0x2c>)
 80054cc:	b513      	push	{r0, r1, r4, lr}
 80054ce:	681c      	ldr	r4, [r3, #0]
 80054d0:	b124      	cbz	r4, 80054dc <iprintf+0x14>
 80054d2:	69a3      	ldr	r3, [r4, #24]
 80054d4:	b913      	cbnz	r3, 80054dc <iprintf+0x14>
 80054d6:	4620      	mov	r0, r4
 80054d8:	f000 fa92 	bl	8005a00 <__sinit>
 80054dc:	ab05      	add	r3, sp, #20
 80054de:	9a04      	ldr	r2, [sp, #16]
 80054e0:	68a1      	ldr	r1, [r4, #8]
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 fdbf 	bl	8006068 <_vfiprintf_r>
 80054ea:	b002      	add	sp, #8
 80054ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f0:	b004      	add	sp, #16
 80054f2:	4770      	bx	lr
 80054f4:	200000c8 	.word	0x200000c8

080054f8 <_puts_r>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	460e      	mov	r6, r1
 80054fc:	4605      	mov	r5, r0
 80054fe:	b118      	cbz	r0, 8005508 <_puts_r+0x10>
 8005500:	6983      	ldr	r3, [r0, #24]
 8005502:	b90b      	cbnz	r3, 8005508 <_puts_r+0x10>
 8005504:	f000 fa7c 	bl	8005a00 <__sinit>
 8005508:	69ab      	ldr	r3, [r5, #24]
 800550a:	68ac      	ldr	r4, [r5, #8]
 800550c:	b913      	cbnz	r3, 8005514 <_puts_r+0x1c>
 800550e:	4628      	mov	r0, r5
 8005510:	f000 fa76 	bl	8005a00 <__sinit>
 8005514:	4b2c      	ldr	r3, [pc, #176]	; (80055c8 <_puts_r+0xd0>)
 8005516:	429c      	cmp	r4, r3
 8005518:	d120      	bne.n	800555c <_puts_r+0x64>
 800551a:	686c      	ldr	r4, [r5, #4]
 800551c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800551e:	07db      	lsls	r3, r3, #31
 8005520:	d405      	bmi.n	800552e <_puts_r+0x36>
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	0598      	lsls	r0, r3, #22
 8005526:	d402      	bmi.n	800552e <_puts_r+0x36>
 8005528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800552a:	f000 fb07 	bl	8005b3c <__retarget_lock_acquire_recursive>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	0719      	lsls	r1, r3, #28
 8005532:	d51d      	bpl.n	8005570 <_puts_r+0x78>
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	b1db      	cbz	r3, 8005570 <_puts_r+0x78>
 8005538:	3e01      	subs	r6, #1
 800553a:	68a3      	ldr	r3, [r4, #8]
 800553c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005540:	3b01      	subs	r3, #1
 8005542:	60a3      	str	r3, [r4, #8]
 8005544:	bb39      	cbnz	r1, 8005596 <_puts_r+0x9e>
 8005546:	2b00      	cmp	r3, #0
 8005548:	da38      	bge.n	80055bc <_puts_r+0xc4>
 800554a:	4622      	mov	r2, r4
 800554c:	210a      	movs	r1, #10
 800554e:	4628      	mov	r0, r5
 8005550:	f000 f87c 	bl	800564c <__swbuf_r>
 8005554:	3001      	adds	r0, #1
 8005556:	d011      	beq.n	800557c <_puts_r+0x84>
 8005558:	250a      	movs	r5, #10
 800555a:	e011      	b.n	8005580 <_puts_r+0x88>
 800555c:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <_puts_r+0xd4>)
 800555e:	429c      	cmp	r4, r3
 8005560:	d101      	bne.n	8005566 <_puts_r+0x6e>
 8005562:	68ac      	ldr	r4, [r5, #8]
 8005564:	e7da      	b.n	800551c <_puts_r+0x24>
 8005566:	4b1a      	ldr	r3, [pc, #104]	; (80055d0 <_puts_r+0xd8>)
 8005568:	429c      	cmp	r4, r3
 800556a:	bf08      	it	eq
 800556c:	68ec      	ldreq	r4, [r5, #12]
 800556e:	e7d5      	b.n	800551c <_puts_r+0x24>
 8005570:	4621      	mov	r1, r4
 8005572:	4628      	mov	r0, r5
 8005574:	f000 f8bc 	bl	80056f0 <__swsetup_r>
 8005578:	2800      	cmp	r0, #0
 800557a:	d0dd      	beq.n	8005538 <_puts_r+0x40>
 800557c:	f04f 35ff 	mov.w	r5, #4294967295
 8005580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005582:	07da      	lsls	r2, r3, #31
 8005584:	d405      	bmi.n	8005592 <_puts_r+0x9a>
 8005586:	89a3      	ldrh	r3, [r4, #12]
 8005588:	059b      	lsls	r3, r3, #22
 800558a:	d402      	bmi.n	8005592 <_puts_r+0x9a>
 800558c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800558e:	f000 fad6 	bl	8005b3e <__retarget_lock_release_recursive>
 8005592:	4628      	mov	r0, r5
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	2b00      	cmp	r3, #0
 8005598:	da04      	bge.n	80055a4 <_puts_r+0xac>
 800559a:	69a2      	ldr	r2, [r4, #24]
 800559c:	429a      	cmp	r2, r3
 800559e:	dc06      	bgt.n	80055ae <_puts_r+0xb6>
 80055a0:	290a      	cmp	r1, #10
 80055a2:	d004      	beq.n	80055ae <_puts_r+0xb6>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	6022      	str	r2, [r4, #0]
 80055aa:	7019      	strb	r1, [r3, #0]
 80055ac:	e7c5      	b.n	800553a <_puts_r+0x42>
 80055ae:	4622      	mov	r2, r4
 80055b0:	4628      	mov	r0, r5
 80055b2:	f000 f84b 	bl	800564c <__swbuf_r>
 80055b6:	3001      	adds	r0, #1
 80055b8:	d1bf      	bne.n	800553a <_puts_r+0x42>
 80055ba:	e7df      	b.n	800557c <_puts_r+0x84>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	250a      	movs	r5, #10
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	6022      	str	r2, [r4, #0]
 80055c4:	701d      	strb	r5, [r3, #0]
 80055c6:	e7db      	b.n	8005580 <_puts_r+0x88>
 80055c8:	08006ac4 	.word	0x08006ac4
 80055cc:	08006ae4 	.word	0x08006ae4
 80055d0:	08006aa4 	.word	0x08006aa4

080055d4 <puts>:
 80055d4:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <puts+0xc>)
 80055d6:	4601      	mov	r1, r0
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	f7ff bf8d 	b.w	80054f8 <_puts_r>
 80055de:	bf00      	nop
 80055e0:	200000c8 	.word	0x200000c8

080055e4 <sniprintf>:
 80055e4:	b40c      	push	{r2, r3}
 80055e6:	b530      	push	{r4, r5, lr}
 80055e8:	4b17      	ldr	r3, [pc, #92]	; (8005648 <sniprintf+0x64>)
 80055ea:	1e0c      	subs	r4, r1, #0
 80055ec:	681d      	ldr	r5, [r3, #0]
 80055ee:	b09d      	sub	sp, #116	; 0x74
 80055f0:	da08      	bge.n	8005604 <sniprintf+0x20>
 80055f2:	238b      	movs	r3, #139	; 0x8b
 80055f4:	602b      	str	r3, [r5, #0]
 80055f6:	f04f 30ff 	mov.w	r0, #4294967295
 80055fa:	b01d      	add	sp, #116	; 0x74
 80055fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005600:	b002      	add	sp, #8
 8005602:	4770      	bx	lr
 8005604:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005608:	f8ad 3014 	strh.w	r3, [sp, #20]
 800560c:	bf14      	ite	ne
 800560e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005612:	4623      	moveq	r3, r4
 8005614:	9304      	str	r3, [sp, #16]
 8005616:	9307      	str	r3, [sp, #28]
 8005618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800561c:	9002      	str	r0, [sp, #8]
 800561e:	9006      	str	r0, [sp, #24]
 8005620:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005624:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005626:	ab21      	add	r3, sp, #132	; 0x84
 8005628:	a902      	add	r1, sp, #8
 800562a:	4628      	mov	r0, r5
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	f000 fbf1 	bl	8005e14 <_svfiprintf_r>
 8005632:	1c43      	adds	r3, r0, #1
 8005634:	bfbc      	itt	lt
 8005636:	238b      	movlt	r3, #139	; 0x8b
 8005638:	602b      	strlt	r3, [r5, #0]
 800563a:	2c00      	cmp	r4, #0
 800563c:	d0dd      	beq.n	80055fa <sniprintf+0x16>
 800563e:	9b02      	ldr	r3, [sp, #8]
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	e7d9      	b.n	80055fa <sniprintf+0x16>
 8005646:	bf00      	nop
 8005648:	200000c8 	.word	0x200000c8

0800564c <__swbuf_r>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	460e      	mov	r6, r1
 8005650:	4614      	mov	r4, r2
 8005652:	4605      	mov	r5, r0
 8005654:	b118      	cbz	r0, 800565e <__swbuf_r+0x12>
 8005656:	6983      	ldr	r3, [r0, #24]
 8005658:	b90b      	cbnz	r3, 800565e <__swbuf_r+0x12>
 800565a:	f000 f9d1 	bl	8005a00 <__sinit>
 800565e:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <__swbuf_r+0x98>)
 8005660:	429c      	cmp	r4, r3
 8005662:	d12b      	bne.n	80056bc <__swbuf_r+0x70>
 8005664:	686c      	ldr	r4, [r5, #4]
 8005666:	69a3      	ldr	r3, [r4, #24]
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	071a      	lsls	r2, r3, #28
 800566e:	d52f      	bpl.n	80056d0 <__swbuf_r+0x84>
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	b36b      	cbz	r3, 80056d0 <__swbuf_r+0x84>
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	1ac0      	subs	r0, r0, r3
 800567a:	6963      	ldr	r3, [r4, #20]
 800567c:	b2f6      	uxtb	r6, r6
 800567e:	4283      	cmp	r3, r0
 8005680:	4637      	mov	r7, r6
 8005682:	dc04      	bgt.n	800568e <__swbuf_r+0x42>
 8005684:	4621      	mov	r1, r4
 8005686:	4628      	mov	r0, r5
 8005688:	f000 f926 	bl	80058d8 <_fflush_r>
 800568c:	bb30      	cbnz	r0, 80056dc <__swbuf_r+0x90>
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	3b01      	subs	r3, #1
 8005692:	60a3      	str	r3, [r4, #8]
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	6022      	str	r2, [r4, #0]
 800569a:	701e      	strb	r6, [r3, #0]
 800569c:	6963      	ldr	r3, [r4, #20]
 800569e:	3001      	adds	r0, #1
 80056a0:	4283      	cmp	r3, r0
 80056a2:	d004      	beq.n	80056ae <__swbuf_r+0x62>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	07db      	lsls	r3, r3, #31
 80056a8:	d506      	bpl.n	80056b8 <__swbuf_r+0x6c>
 80056aa:	2e0a      	cmp	r6, #10
 80056ac:	d104      	bne.n	80056b8 <__swbuf_r+0x6c>
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f911 	bl	80058d8 <_fflush_r>
 80056b6:	b988      	cbnz	r0, 80056dc <__swbuf_r+0x90>
 80056b8:	4638      	mov	r0, r7
 80056ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056bc:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <__swbuf_r+0x9c>)
 80056be:	429c      	cmp	r4, r3
 80056c0:	d101      	bne.n	80056c6 <__swbuf_r+0x7a>
 80056c2:	68ac      	ldr	r4, [r5, #8]
 80056c4:	e7cf      	b.n	8005666 <__swbuf_r+0x1a>
 80056c6:	4b09      	ldr	r3, [pc, #36]	; (80056ec <__swbuf_r+0xa0>)
 80056c8:	429c      	cmp	r4, r3
 80056ca:	bf08      	it	eq
 80056cc:	68ec      	ldreq	r4, [r5, #12]
 80056ce:	e7ca      	b.n	8005666 <__swbuf_r+0x1a>
 80056d0:	4621      	mov	r1, r4
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 f80c 	bl	80056f0 <__swsetup_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d0cb      	beq.n	8005674 <__swbuf_r+0x28>
 80056dc:	f04f 37ff 	mov.w	r7, #4294967295
 80056e0:	e7ea      	b.n	80056b8 <__swbuf_r+0x6c>
 80056e2:	bf00      	nop
 80056e4:	08006ac4 	.word	0x08006ac4
 80056e8:	08006ae4 	.word	0x08006ae4
 80056ec:	08006aa4 	.word	0x08006aa4

080056f0 <__swsetup_r>:
 80056f0:	4b32      	ldr	r3, [pc, #200]	; (80057bc <__swsetup_r+0xcc>)
 80056f2:	b570      	push	{r4, r5, r6, lr}
 80056f4:	681d      	ldr	r5, [r3, #0]
 80056f6:	4606      	mov	r6, r0
 80056f8:	460c      	mov	r4, r1
 80056fa:	b125      	cbz	r5, 8005706 <__swsetup_r+0x16>
 80056fc:	69ab      	ldr	r3, [r5, #24]
 80056fe:	b913      	cbnz	r3, 8005706 <__swsetup_r+0x16>
 8005700:	4628      	mov	r0, r5
 8005702:	f000 f97d 	bl	8005a00 <__sinit>
 8005706:	4b2e      	ldr	r3, [pc, #184]	; (80057c0 <__swsetup_r+0xd0>)
 8005708:	429c      	cmp	r4, r3
 800570a:	d10f      	bne.n	800572c <__swsetup_r+0x3c>
 800570c:	686c      	ldr	r4, [r5, #4]
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005714:	0719      	lsls	r1, r3, #28
 8005716:	d42c      	bmi.n	8005772 <__swsetup_r+0x82>
 8005718:	06dd      	lsls	r5, r3, #27
 800571a:	d411      	bmi.n	8005740 <__swsetup_r+0x50>
 800571c:	2309      	movs	r3, #9
 800571e:	6033      	str	r3, [r6, #0]
 8005720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005724:	81a3      	strh	r3, [r4, #12]
 8005726:	f04f 30ff 	mov.w	r0, #4294967295
 800572a:	e03e      	b.n	80057aa <__swsetup_r+0xba>
 800572c:	4b25      	ldr	r3, [pc, #148]	; (80057c4 <__swsetup_r+0xd4>)
 800572e:	429c      	cmp	r4, r3
 8005730:	d101      	bne.n	8005736 <__swsetup_r+0x46>
 8005732:	68ac      	ldr	r4, [r5, #8]
 8005734:	e7eb      	b.n	800570e <__swsetup_r+0x1e>
 8005736:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <__swsetup_r+0xd8>)
 8005738:	429c      	cmp	r4, r3
 800573a:	bf08      	it	eq
 800573c:	68ec      	ldreq	r4, [r5, #12]
 800573e:	e7e6      	b.n	800570e <__swsetup_r+0x1e>
 8005740:	0758      	lsls	r0, r3, #29
 8005742:	d512      	bpl.n	800576a <__swsetup_r+0x7a>
 8005744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005746:	b141      	cbz	r1, 800575a <__swsetup_r+0x6a>
 8005748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800574c:	4299      	cmp	r1, r3
 800574e:	d002      	beq.n	8005756 <__swsetup_r+0x66>
 8005750:	4630      	mov	r0, r6
 8005752:	f000 fa59 	bl	8005c08 <_free_r>
 8005756:	2300      	movs	r3, #0
 8005758:	6363      	str	r3, [r4, #52]	; 0x34
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	2300      	movs	r3, #0
 8005764:	6063      	str	r3, [r4, #4]
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	f043 0308 	orr.w	r3, r3, #8
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	b94b      	cbnz	r3, 800578a <__swsetup_r+0x9a>
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800577c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005780:	d003      	beq.n	800578a <__swsetup_r+0x9a>
 8005782:	4621      	mov	r1, r4
 8005784:	4630      	mov	r0, r6
 8005786:	f000 f9ff 	bl	8005b88 <__smakebuf_r>
 800578a:	89a0      	ldrh	r0, [r4, #12]
 800578c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005790:	f010 0301 	ands.w	r3, r0, #1
 8005794:	d00a      	beq.n	80057ac <__swsetup_r+0xbc>
 8005796:	2300      	movs	r3, #0
 8005798:	60a3      	str	r3, [r4, #8]
 800579a:	6963      	ldr	r3, [r4, #20]
 800579c:	425b      	negs	r3, r3
 800579e:	61a3      	str	r3, [r4, #24]
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	b943      	cbnz	r3, 80057b6 <__swsetup_r+0xc6>
 80057a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057a8:	d1ba      	bne.n	8005720 <__swsetup_r+0x30>
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	0781      	lsls	r1, r0, #30
 80057ae:	bf58      	it	pl
 80057b0:	6963      	ldrpl	r3, [r4, #20]
 80057b2:	60a3      	str	r3, [r4, #8]
 80057b4:	e7f4      	b.n	80057a0 <__swsetup_r+0xb0>
 80057b6:	2000      	movs	r0, #0
 80057b8:	e7f7      	b.n	80057aa <__swsetup_r+0xba>
 80057ba:	bf00      	nop
 80057bc:	200000c8 	.word	0x200000c8
 80057c0:	08006ac4 	.word	0x08006ac4
 80057c4:	08006ae4 	.word	0x08006ae4
 80057c8:	08006aa4 	.word	0x08006aa4

080057cc <__sflush_r>:
 80057cc:	898a      	ldrh	r2, [r1, #12]
 80057ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d2:	4605      	mov	r5, r0
 80057d4:	0710      	lsls	r0, r2, #28
 80057d6:	460c      	mov	r4, r1
 80057d8:	d458      	bmi.n	800588c <__sflush_r+0xc0>
 80057da:	684b      	ldr	r3, [r1, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dc05      	bgt.n	80057ec <__sflush_r+0x20>
 80057e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	dc02      	bgt.n	80057ec <__sflush_r+0x20>
 80057e6:	2000      	movs	r0, #0
 80057e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ee:	2e00      	cmp	r6, #0
 80057f0:	d0f9      	beq.n	80057e6 <__sflush_r+0x1a>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057f8:	682f      	ldr	r7, [r5, #0]
 80057fa:	602b      	str	r3, [r5, #0]
 80057fc:	d032      	beq.n	8005864 <__sflush_r+0x98>
 80057fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	075a      	lsls	r2, r3, #29
 8005804:	d505      	bpl.n	8005812 <__sflush_r+0x46>
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	1ac0      	subs	r0, r0, r3
 800580a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800580c:	b10b      	cbz	r3, 8005812 <__sflush_r+0x46>
 800580e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005810:	1ac0      	subs	r0, r0, r3
 8005812:	2300      	movs	r3, #0
 8005814:	4602      	mov	r2, r0
 8005816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005818:	6a21      	ldr	r1, [r4, #32]
 800581a:	4628      	mov	r0, r5
 800581c:	47b0      	blx	r6
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	d106      	bne.n	8005832 <__sflush_r+0x66>
 8005824:	6829      	ldr	r1, [r5, #0]
 8005826:	291d      	cmp	r1, #29
 8005828:	d82c      	bhi.n	8005884 <__sflush_r+0xb8>
 800582a:	4a2a      	ldr	r2, [pc, #168]	; (80058d4 <__sflush_r+0x108>)
 800582c:	40ca      	lsrs	r2, r1
 800582e:	07d6      	lsls	r6, r2, #31
 8005830:	d528      	bpl.n	8005884 <__sflush_r+0xb8>
 8005832:	2200      	movs	r2, #0
 8005834:	6062      	str	r2, [r4, #4]
 8005836:	04d9      	lsls	r1, r3, #19
 8005838:	6922      	ldr	r2, [r4, #16]
 800583a:	6022      	str	r2, [r4, #0]
 800583c:	d504      	bpl.n	8005848 <__sflush_r+0x7c>
 800583e:	1c42      	adds	r2, r0, #1
 8005840:	d101      	bne.n	8005846 <__sflush_r+0x7a>
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	b903      	cbnz	r3, 8005848 <__sflush_r+0x7c>
 8005846:	6560      	str	r0, [r4, #84]	; 0x54
 8005848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584a:	602f      	str	r7, [r5, #0]
 800584c:	2900      	cmp	r1, #0
 800584e:	d0ca      	beq.n	80057e6 <__sflush_r+0x1a>
 8005850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005854:	4299      	cmp	r1, r3
 8005856:	d002      	beq.n	800585e <__sflush_r+0x92>
 8005858:	4628      	mov	r0, r5
 800585a:	f000 f9d5 	bl	8005c08 <_free_r>
 800585e:	2000      	movs	r0, #0
 8005860:	6360      	str	r0, [r4, #52]	; 0x34
 8005862:	e7c1      	b.n	80057e8 <__sflush_r+0x1c>
 8005864:	6a21      	ldr	r1, [r4, #32]
 8005866:	2301      	movs	r3, #1
 8005868:	4628      	mov	r0, r5
 800586a:	47b0      	blx	r6
 800586c:	1c41      	adds	r1, r0, #1
 800586e:	d1c7      	bne.n	8005800 <__sflush_r+0x34>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0c4      	beq.n	8005800 <__sflush_r+0x34>
 8005876:	2b1d      	cmp	r3, #29
 8005878:	d001      	beq.n	800587e <__sflush_r+0xb2>
 800587a:	2b16      	cmp	r3, #22
 800587c:	d101      	bne.n	8005882 <__sflush_r+0xb6>
 800587e:	602f      	str	r7, [r5, #0]
 8005880:	e7b1      	b.n	80057e6 <__sflush_r+0x1a>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	e7ad      	b.n	80057e8 <__sflush_r+0x1c>
 800588c:	690f      	ldr	r7, [r1, #16]
 800588e:	2f00      	cmp	r7, #0
 8005890:	d0a9      	beq.n	80057e6 <__sflush_r+0x1a>
 8005892:	0793      	lsls	r3, r2, #30
 8005894:	680e      	ldr	r6, [r1, #0]
 8005896:	bf08      	it	eq
 8005898:	694b      	ldreq	r3, [r1, #20]
 800589a:	600f      	str	r7, [r1, #0]
 800589c:	bf18      	it	ne
 800589e:	2300      	movne	r3, #0
 80058a0:	eba6 0807 	sub.w	r8, r6, r7
 80058a4:	608b      	str	r3, [r1, #8]
 80058a6:	f1b8 0f00 	cmp.w	r8, #0
 80058aa:	dd9c      	ble.n	80057e6 <__sflush_r+0x1a>
 80058ac:	6a21      	ldr	r1, [r4, #32]
 80058ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058b0:	4643      	mov	r3, r8
 80058b2:	463a      	mov	r2, r7
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b0      	blx	r6
 80058b8:	2800      	cmp	r0, #0
 80058ba:	dc06      	bgt.n	80058ca <__sflush_r+0xfe>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e78e      	b.n	80057e8 <__sflush_r+0x1c>
 80058ca:	4407      	add	r7, r0
 80058cc:	eba8 0800 	sub.w	r8, r8, r0
 80058d0:	e7e9      	b.n	80058a6 <__sflush_r+0xda>
 80058d2:	bf00      	nop
 80058d4:	20400001 	.word	0x20400001

080058d8 <_fflush_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	690b      	ldr	r3, [r1, #16]
 80058dc:	4605      	mov	r5, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	b913      	cbnz	r3, 80058e8 <_fflush_r+0x10>
 80058e2:	2500      	movs	r5, #0
 80058e4:	4628      	mov	r0, r5
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	b118      	cbz	r0, 80058f2 <_fflush_r+0x1a>
 80058ea:	6983      	ldr	r3, [r0, #24]
 80058ec:	b90b      	cbnz	r3, 80058f2 <_fflush_r+0x1a>
 80058ee:	f000 f887 	bl	8005a00 <__sinit>
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <_fflush_r+0x6c>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d11b      	bne.n	8005930 <_fflush_r+0x58>
 80058f8:	686c      	ldr	r4, [r5, #4]
 80058fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0ef      	beq.n	80058e2 <_fflush_r+0xa>
 8005902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005904:	07d0      	lsls	r0, r2, #31
 8005906:	d404      	bmi.n	8005912 <_fflush_r+0x3a>
 8005908:	0599      	lsls	r1, r3, #22
 800590a:	d402      	bmi.n	8005912 <_fflush_r+0x3a>
 800590c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800590e:	f000 f915 	bl	8005b3c <__retarget_lock_acquire_recursive>
 8005912:	4628      	mov	r0, r5
 8005914:	4621      	mov	r1, r4
 8005916:	f7ff ff59 	bl	80057cc <__sflush_r>
 800591a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800591c:	07da      	lsls	r2, r3, #31
 800591e:	4605      	mov	r5, r0
 8005920:	d4e0      	bmi.n	80058e4 <_fflush_r+0xc>
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	059b      	lsls	r3, r3, #22
 8005926:	d4dd      	bmi.n	80058e4 <_fflush_r+0xc>
 8005928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800592a:	f000 f908 	bl	8005b3e <__retarget_lock_release_recursive>
 800592e:	e7d9      	b.n	80058e4 <_fflush_r+0xc>
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <_fflush_r+0x70>)
 8005932:	429c      	cmp	r4, r3
 8005934:	d101      	bne.n	800593a <_fflush_r+0x62>
 8005936:	68ac      	ldr	r4, [r5, #8]
 8005938:	e7df      	b.n	80058fa <_fflush_r+0x22>
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <_fflush_r+0x74>)
 800593c:	429c      	cmp	r4, r3
 800593e:	bf08      	it	eq
 8005940:	68ec      	ldreq	r4, [r5, #12]
 8005942:	e7da      	b.n	80058fa <_fflush_r+0x22>
 8005944:	08006ac4 	.word	0x08006ac4
 8005948:	08006ae4 	.word	0x08006ae4
 800594c:	08006aa4 	.word	0x08006aa4

08005950 <std>:
 8005950:	2300      	movs	r3, #0
 8005952:	b510      	push	{r4, lr}
 8005954:	4604      	mov	r4, r0
 8005956:	e9c0 3300 	strd	r3, r3, [r0]
 800595a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800595e:	6083      	str	r3, [r0, #8]
 8005960:	8181      	strh	r1, [r0, #12]
 8005962:	6643      	str	r3, [r0, #100]	; 0x64
 8005964:	81c2      	strh	r2, [r0, #14]
 8005966:	6183      	str	r3, [r0, #24]
 8005968:	4619      	mov	r1, r3
 800596a:	2208      	movs	r2, #8
 800596c:	305c      	adds	r0, #92	; 0x5c
 800596e:	f7ff fda3 	bl	80054b8 <memset>
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <std+0x38>)
 8005974:	6263      	str	r3, [r4, #36]	; 0x24
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <std+0x3c>)
 8005978:	62a3      	str	r3, [r4, #40]	; 0x28
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <std+0x40>)
 800597c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <std+0x44>)
 8005980:	6224      	str	r4, [r4, #32]
 8005982:	6323      	str	r3, [r4, #48]	; 0x30
 8005984:	bd10      	pop	{r4, pc}
 8005986:	bf00      	nop
 8005988:	08006611 	.word	0x08006611
 800598c:	08006633 	.word	0x08006633
 8005990:	0800666b 	.word	0x0800666b
 8005994:	0800668f 	.word	0x0800668f

08005998 <_cleanup_r>:
 8005998:	4901      	ldr	r1, [pc, #4]	; (80059a0 <_cleanup_r+0x8>)
 800599a:	f000 b8af 	b.w	8005afc <_fwalk_reent>
 800599e:	bf00      	nop
 80059a0:	080058d9 	.word	0x080058d9

080059a4 <__sfmoreglue>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	1e4a      	subs	r2, r1, #1
 80059a8:	2568      	movs	r5, #104	; 0x68
 80059aa:	4355      	muls	r5, r2
 80059ac:	460e      	mov	r6, r1
 80059ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059b2:	f000 f979 	bl	8005ca8 <_malloc_r>
 80059b6:	4604      	mov	r4, r0
 80059b8:	b140      	cbz	r0, 80059cc <__sfmoreglue+0x28>
 80059ba:	2100      	movs	r1, #0
 80059bc:	e9c0 1600 	strd	r1, r6, [r0]
 80059c0:	300c      	adds	r0, #12
 80059c2:	60a0      	str	r0, [r4, #8]
 80059c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059c8:	f7ff fd76 	bl	80054b8 <memset>
 80059cc:	4620      	mov	r0, r4
 80059ce:	bd70      	pop	{r4, r5, r6, pc}

080059d0 <__sfp_lock_acquire>:
 80059d0:	4801      	ldr	r0, [pc, #4]	; (80059d8 <__sfp_lock_acquire+0x8>)
 80059d2:	f000 b8b3 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 80059d6:	bf00      	nop
 80059d8:	20000454 	.word	0x20000454

080059dc <__sfp_lock_release>:
 80059dc:	4801      	ldr	r0, [pc, #4]	; (80059e4 <__sfp_lock_release+0x8>)
 80059de:	f000 b8ae 	b.w	8005b3e <__retarget_lock_release_recursive>
 80059e2:	bf00      	nop
 80059e4:	20000454 	.word	0x20000454

080059e8 <__sinit_lock_acquire>:
 80059e8:	4801      	ldr	r0, [pc, #4]	; (80059f0 <__sinit_lock_acquire+0x8>)
 80059ea:	f000 b8a7 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 80059ee:	bf00      	nop
 80059f0:	2000044f 	.word	0x2000044f

080059f4 <__sinit_lock_release>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__sinit_lock_release+0x8>)
 80059f6:	f000 b8a2 	b.w	8005b3e <__retarget_lock_release_recursive>
 80059fa:	bf00      	nop
 80059fc:	2000044f 	.word	0x2000044f

08005a00 <__sinit>:
 8005a00:	b510      	push	{r4, lr}
 8005a02:	4604      	mov	r4, r0
 8005a04:	f7ff fff0 	bl	80059e8 <__sinit_lock_acquire>
 8005a08:	69a3      	ldr	r3, [r4, #24]
 8005a0a:	b11b      	cbz	r3, 8005a14 <__sinit+0x14>
 8005a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a10:	f7ff bff0 	b.w	80059f4 <__sinit_lock_release>
 8005a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a18:	6523      	str	r3, [r4, #80]	; 0x50
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <__sinit+0x68>)
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <__sinit+0x6c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a22:	42a3      	cmp	r3, r4
 8005a24:	bf04      	itt	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	61a3      	streq	r3, [r4, #24]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f820 	bl	8005a70 <__sfp>
 8005a30:	6060      	str	r0, [r4, #4]
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f81c 	bl	8005a70 <__sfp>
 8005a38:	60a0      	str	r0, [r4, #8]
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f000 f818 	bl	8005a70 <__sfp>
 8005a40:	2200      	movs	r2, #0
 8005a42:	60e0      	str	r0, [r4, #12]
 8005a44:	2104      	movs	r1, #4
 8005a46:	6860      	ldr	r0, [r4, #4]
 8005a48:	f7ff ff82 	bl	8005950 <std>
 8005a4c:	68a0      	ldr	r0, [r4, #8]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2109      	movs	r1, #9
 8005a52:	f7ff ff7d 	bl	8005950 <std>
 8005a56:	68e0      	ldr	r0, [r4, #12]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	2112      	movs	r1, #18
 8005a5c:	f7ff ff78 	bl	8005950 <std>
 8005a60:	2301      	movs	r3, #1
 8005a62:	61a3      	str	r3, [r4, #24]
 8005a64:	e7d2      	b.n	8005a0c <__sinit+0xc>
 8005a66:	bf00      	nop
 8005a68:	08006aa0 	.word	0x08006aa0
 8005a6c:	08005999 	.word	0x08005999

08005a70 <__sfp>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	4607      	mov	r7, r0
 8005a74:	f7ff ffac 	bl	80059d0 <__sfp_lock_acquire>
 8005a78:	4b1e      	ldr	r3, [pc, #120]	; (8005af4 <__sfp+0x84>)
 8005a7a:	681e      	ldr	r6, [r3, #0]
 8005a7c:	69b3      	ldr	r3, [r6, #24]
 8005a7e:	b913      	cbnz	r3, 8005a86 <__sfp+0x16>
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff ffbd 	bl	8005a00 <__sinit>
 8005a86:	3648      	adds	r6, #72	; 0x48
 8005a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	d503      	bpl.n	8005a98 <__sfp+0x28>
 8005a90:	6833      	ldr	r3, [r6, #0]
 8005a92:	b30b      	cbz	r3, 8005ad8 <__sfp+0x68>
 8005a94:	6836      	ldr	r6, [r6, #0]
 8005a96:	e7f7      	b.n	8005a88 <__sfp+0x18>
 8005a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a9c:	b9d5      	cbnz	r5, 8005ad4 <__sfp+0x64>
 8005a9e:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <__sfp+0x88>)
 8005aa0:	60e3      	str	r3, [r4, #12]
 8005aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8005aa8:	f000 f847 	bl	8005b3a <__retarget_lock_init_recursive>
 8005aac:	f7ff ff96 	bl	80059dc <__sfp_lock_release>
 8005ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ab8:	6025      	str	r5, [r4, #0]
 8005aba:	61a5      	str	r5, [r4, #24]
 8005abc:	2208      	movs	r2, #8
 8005abe:	4629      	mov	r1, r5
 8005ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ac4:	f7ff fcf8 	bl	80054b8 <memset>
 8005ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad4:	3468      	adds	r4, #104	; 0x68
 8005ad6:	e7d9      	b.n	8005a8c <__sfp+0x1c>
 8005ad8:	2104      	movs	r1, #4
 8005ada:	4638      	mov	r0, r7
 8005adc:	f7ff ff62 	bl	80059a4 <__sfmoreglue>
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	6030      	str	r0, [r6, #0]
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1d5      	bne.n	8005a94 <__sfp+0x24>
 8005ae8:	f7ff ff78 	bl	80059dc <__sfp_lock_release>
 8005aec:	230c      	movs	r3, #12
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	e7ee      	b.n	8005ad0 <__sfp+0x60>
 8005af2:	bf00      	nop
 8005af4:	08006aa0 	.word	0x08006aa0
 8005af8:	ffff0001 	.word	0xffff0001

08005afc <_fwalk_reent>:
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b00:	4606      	mov	r6, r0
 8005b02:	4688      	mov	r8, r1
 8005b04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b08:	2700      	movs	r7, #0
 8005b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8005b12:	d505      	bpl.n	8005b20 <_fwalk_reent+0x24>
 8005b14:	6824      	ldr	r4, [r4, #0]
 8005b16:	2c00      	cmp	r4, #0
 8005b18:	d1f7      	bne.n	8005b0a <_fwalk_reent+0xe>
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b20:	89ab      	ldrh	r3, [r5, #12]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d907      	bls.n	8005b36 <_fwalk_reent+0x3a>
 8005b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	d003      	beq.n	8005b36 <_fwalk_reent+0x3a>
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4630      	mov	r0, r6
 8005b32:	47c0      	blx	r8
 8005b34:	4307      	orrs	r7, r0
 8005b36:	3568      	adds	r5, #104	; 0x68
 8005b38:	e7e9      	b.n	8005b0e <_fwalk_reent+0x12>

08005b3a <__retarget_lock_init_recursive>:
 8005b3a:	4770      	bx	lr

08005b3c <__retarget_lock_acquire_recursive>:
 8005b3c:	4770      	bx	lr

08005b3e <__retarget_lock_release_recursive>:
 8005b3e:	4770      	bx	lr

08005b40 <__swhatbuf_r>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	460e      	mov	r6, r1
 8005b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	b096      	sub	sp, #88	; 0x58
 8005b4c:	4614      	mov	r4, r2
 8005b4e:	461d      	mov	r5, r3
 8005b50:	da07      	bge.n	8005b62 <__swhatbuf_r+0x22>
 8005b52:	2300      	movs	r3, #0
 8005b54:	602b      	str	r3, [r5, #0]
 8005b56:	89b3      	ldrh	r3, [r6, #12]
 8005b58:	061a      	lsls	r2, r3, #24
 8005b5a:	d410      	bmi.n	8005b7e <__swhatbuf_r+0x3e>
 8005b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b60:	e00e      	b.n	8005b80 <__swhatbuf_r+0x40>
 8005b62:	466a      	mov	r2, sp
 8005b64:	f000 fdba 	bl	80066dc <_fstat_r>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	dbf2      	blt.n	8005b52 <__swhatbuf_r+0x12>
 8005b6c:	9a01      	ldr	r2, [sp, #4]
 8005b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b76:	425a      	negs	r2, r3
 8005b78:	415a      	adcs	r2, r3
 8005b7a:	602a      	str	r2, [r5, #0]
 8005b7c:	e7ee      	b.n	8005b5c <__swhatbuf_r+0x1c>
 8005b7e:	2340      	movs	r3, #64	; 0x40
 8005b80:	2000      	movs	r0, #0
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	b016      	add	sp, #88	; 0x58
 8005b86:	bd70      	pop	{r4, r5, r6, pc}

08005b88 <__smakebuf_r>:
 8005b88:	898b      	ldrh	r3, [r1, #12]
 8005b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b8c:	079d      	lsls	r5, r3, #30
 8005b8e:	4606      	mov	r6, r0
 8005b90:	460c      	mov	r4, r1
 8005b92:	d507      	bpl.n	8005ba4 <__smakebuf_r+0x1c>
 8005b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b98:	6023      	str	r3, [r4, #0]
 8005b9a:	6123      	str	r3, [r4, #16]
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	6163      	str	r3, [r4, #20]
 8005ba0:	b002      	add	sp, #8
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	ab01      	add	r3, sp, #4
 8005ba6:	466a      	mov	r2, sp
 8005ba8:	f7ff ffca 	bl	8005b40 <__swhatbuf_r>
 8005bac:	9900      	ldr	r1, [sp, #0]
 8005bae:	4605      	mov	r5, r0
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f000 f879 	bl	8005ca8 <_malloc_r>
 8005bb6:	b948      	cbnz	r0, 8005bcc <__smakebuf_r+0x44>
 8005bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bbc:	059a      	lsls	r2, r3, #22
 8005bbe:	d4ef      	bmi.n	8005ba0 <__smakebuf_r+0x18>
 8005bc0:	f023 0303 	bic.w	r3, r3, #3
 8005bc4:	f043 0302 	orr.w	r3, r3, #2
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	e7e3      	b.n	8005b94 <__smakebuf_r+0xc>
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <__smakebuf_r+0x7c>)
 8005bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	6020      	str	r0, [r4, #0]
 8005bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd8:	81a3      	strh	r3, [r4, #12]
 8005bda:	9b00      	ldr	r3, [sp, #0]
 8005bdc:	6163      	str	r3, [r4, #20]
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	6120      	str	r0, [r4, #16]
 8005be2:	b15b      	cbz	r3, 8005bfc <__smakebuf_r+0x74>
 8005be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005be8:	4630      	mov	r0, r6
 8005bea:	f000 fd89 	bl	8006700 <_isatty_r>
 8005bee:	b128      	cbz	r0, 8005bfc <__smakebuf_r+0x74>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	81a3      	strh	r3, [r4, #12]
 8005bfc:	89a0      	ldrh	r0, [r4, #12]
 8005bfe:	4305      	orrs	r5, r0
 8005c00:	81a5      	strh	r5, [r4, #12]
 8005c02:	e7cd      	b.n	8005ba0 <__smakebuf_r+0x18>
 8005c04:	08005999 	.word	0x08005999

08005c08 <_free_r>:
 8005c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c0a:	2900      	cmp	r1, #0
 8005c0c:	d048      	beq.n	8005ca0 <_free_r+0x98>
 8005c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c12:	9001      	str	r0, [sp, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f1a1 0404 	sub.w	r4, r1, #4
 8005c1a:	bfb8      	it	lt
 8005c1c:	18e4      	addlt	r4, r4, r3
 8005c1e:	f000 fdb9 	bl	8006794 <__malloc_lock>
 8005c22:	4a20      	ldr	r2, [pc, #128]	; (8005ca4 <_free_r+0x9c>)
 8005c24:	9801      	ldr	r0, [sp, #4]
 8005c26:	6813      	ldr	r3, [r2, #0]
 8005c28:	4615      	mov	r5, r2
 8005c2a:	b933      	cbnz	r3, 8005c3a <_free_r+0x32>
 8005c2c:	6063      	str	r3, [r4, #4]
 8005c2e:	6014      	str	r4, [r2, #0]
 8005c30:	b003      	add	sp, #12
 8005c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c36:	f000 bdb3 	b.w	80067a0 <__malloc_unlock>
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	d90b      	bls.n	8005c56 <_free_r+0x4e>
 8005c3e:	6821      	ldr	r1, [r4, #0]
 8005c40:	1862      	adds	r2, r4, r1
 8005c42:	4293      	cmp	r3, r2
 8005c44:	bf04      	itt	eq
 8005c46:	681a      	ldreq	r2, [r3, #0]
 8005c48:	685b      	ldreq	r3, [r3, #4]
 8005c4a:	6063      	str	r3, [r4, #4]
 8005c4c:	bf04      	itt	eq
 8005c4e:	1852      	addeq	r2, r2, r1
 8005c50:	6022      	streq	r2, [r4, #0]
 8005c52:	602c      	str	r4, [r5, #0]
 8005c54:	e7ec      	b.n	8005c30 <_free_r+0x28>
 8005c56:	461a      	mov	r2, r3
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	b10b      	cbz	r3, 8005c60 <_free_r+0x58>
 8005c5c:	42a3      	cmp	r3, r4
 8005c5e:	d9fa      	bls.n	8005c56 <_free_r+0x4e>
 8005c60:	6811      	ldr	r1, [r2, #0]
 8005c62:	1855      	adds	r5, r2, r1
 8005c64:	42a5      	cmp	r5, r4
 8005c66:	d10b      	bne.n	8005c80 <_free_r+0x78>
 8005c68:	6824      	ldr	r4, [r4, #0]
 8005c6a:	4421      	add	r1, r4
 8005c6c:	1854      	adds	r4, r2, r1
 8005c6e:	42a3      	cmp	r3, r4
 8005c70:	6011      	str	r1, [r2, #0]
 8005c72:	d1dd      	bne.n	8005c30 <_free_r+0x28>
 8005c74:	681c      	ldr	r4, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	6053      	str	r3, [r2, #4]
 8005c7a:	4421      	add	r1, r4
 8005c7c:	6011      	str	r1, [r2, #0]
 8005c7e:	e7d7      	b.n	8005c30 <_free_r+0x28>
 8005c80:	d902      	bls.n	8005c88 <_free_r+0x80>
 8005c82:	230c      	movs	r3, #12
 8005c84:	6003      	str	r3, [r0, #0]
 8005c86:	e7d3      	b.n	8005c30 <_free_r+0x28>
 8005c88:	6825      	ldr	r5, [r4, #0]
 8005c8a:	1961      	adds	r1, r4, r5
 8005c8c:	428b      	cmp	r3, r1
 8005c8e:	bf04      	itt	eq
 8005c90:	6819      	ldreq	r1, [r3, #0]
 8005c92:	685b      	ldreq	r3, [r3, #4]
 8005c94:	6063      	str	r3, [r4, #4]
 8005c96:	bf04      	itt	eq
 8005c98:	1949      	addeq	r1, r1, r5
 8005c9a:	6021      	streq	r1, [r4, #0]
 8005c9c:	6054      	str	r4, [r2, #4]
 8005c9e:	e7c7      	b.n	8005c30 <_free_r+0x28>
 8005ca0:	b003      	add	sp, #12
 8005ca2:	bd30      	pop	{r4, r5, pc}
 8005ca4:	20000290 	.word	0x20000290

08005ca8 <_malloc_r>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	1ccd      	adds	r5, r1, #3
 8005cac:	f025 0503 	bic.w	r5, r5, #3
 8005cb0:	3508      	adds	r5, #8
 8005cb2:	2d0c      	cmp	r5, #12
 8005cb4:	bf38      	it	cc
 8005cb6:	250c      	movcc	r5, #12
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	4606      	mov	r6, r0
 8005cbc:	db01      	blt.n	8005cc2 <_malloc_r+0x1a>
 8005cbe:	42a9      	cmp	r1, r5
 8005cc0:	d903      	bls.n	8005cca <_malloc_r+0x22>
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	6033      	str	r3, [r6, #0]
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cca:	f000 fd63 	bl	8006794 <__malloc_lock>
 8005cce:	4921      	ldr	r1, [pc, #132]	; (8005d54 <_malloc_r+0xac>)
 8005cd0:	680a      	ldr	r2, [r1, #0]
 8005cd2:	4614      	mov	r4, r2
 8005cd4:	b99c      	cbnz	r4, 8005cfe <_malloc_r+0x56>
 8005cd6:	4f20      	ldr	r7, [pc, #128]	; (8005d58 <_malloc_r+0xb0>)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	b923      	cbnz	r3, 8005ce6 <_malloc_r+0x3e>
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f000 fc86 	bl	80065f0 <_sbrk_r>
 8005ce4:	6038      	str	r0, [r7, #0]
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	4630      	mov	r0, r6
 8005cea:	f000 fc81 	bl	80065f0 <_sbrk_r>
 8005cee:	1c43      	adds	r3, r0, #1
 8005cf0:	d123      	bne.n	8005d3a <_malloc_r+0x92>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	6033      	str	r3, [r6, #0]
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f000 fd52 	bl	80067a0 <__malloc_unlock>
 8005cfc:	e7e3      	b.n	8005cc6 <_malloc_r+0x1e>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	1b5b      	subs	r3, r3, r5
 8005d02:	d417      	bmi.n	8005d34 <_malloc_r+0x8c>
 8005d04:	2b0b      	cmp	r3, #11
 8005d06:	d903      	bls.n	8005d10 <_malloc_r+0x68>
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	441c      	add	r4, r3
 8005d0c:	6025      	str	r5, [r4, #0]
 8005d0e:	e004      	b.n	8005d1a <_malloc_r+0x72>
 8005d10:	6863      	ldr	r3, [r4, #4]
 8005d12:	42a2      	cmp	r2, r4
 8005d14:	bf0c      	ite	eq
 8005d16:	600b      	streq	r3, [r1, #0]
 8005d18:	6053      	strne	r3, [r2, #4]
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f000 fd40 	bl	80067a0 <__malloc_unlock>
 8005d20:	f104 000b 	add.w	r0, r4, #11
 8005d24:	1d23      	adds	r3, r4, #4
 8005d26:	f020 0007 	bic.w	r0, r0, #7
 8005d2a:	1ac2      	subs	r2, r0, r3
 8005d2c:	d0cc      	beq.n	8005cc8 <_malloc_r+0x20>
 8005d2e:	1a1b      	subs	r3, r3, r0
 8005d30:	50a3      	str	r3, [r4, r2]
 8005d32:	e7c9      	b.n	8005cc8 <_malloc_r+0x20>
 8005d34:	4622      	mov	r2, r4
 8005d36:	6864      	ldr	r4, [r4, #4]
 8005d38:	e7cc      	b.n	8005cd4 <_malloc_r+0x2c>
 8005d3a:	1cc4      	adds	r4, r0, #3
 8005d3c:	f024 0403 	bic.w	r4, r4, #3
 8005d40:	42a0      	cmp	r0, r4
 8005d42:	d0e3      	beq.n	8005d0c <_malloc_r+0x64>
 8005d44:	1a21      	subs	r1, r4, r0
 8005d46:	4630      	mov	r0, r6
 8005d48:	f000 fc52 	bl	80065f0 <_sbrk_r>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d1dd      	bne.n	8005d0c <_malloc_r+0x64>
 8005d50:	e7cf      	b.n	8005cf2 <_malloc_r+0x4a>
 8005d52:	bf00      	nop
 8005d54:	20000290 	.word	0x20000290
 8005d58:	20000294 	.word	0x20000294

08005d5c <__ssputs_r>:
 8005d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	688e      	ldr	r6, [r1, #8]
 8005d62:	429e      	cmp	r6, r3
 8005d64:	4682      	mov	sl, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	4690      	mov	r8, r2
 8005d6a:	461f      	mov	r7, r3
 8005d6c:	d838      	bhi.n	8005de0 <__ssputs_r+0x84>
 8005d6e:	898a      	ldrh	r2, [r1, #12]
 8005d70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d74:	d032      	beq.n	8005ddc <__ssputs_r+0x80>
 8005d76:	6825      	ldr	r5, [r4, #0]
 8005d78:	6909      	ldr	r1, [r1, #16]
 8005d7a:	eba5 0901 	sub.w	r9, r5, r1
 8005d7e:	6965      	ldr	r5, [r4, #20]
 8005d80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d88:	3301      	adds	r3, #1
 8005d8a:	444b      	add	r3, r9
 8005d8c:	106d      	asrs	r5, r5, #1
 8005d8e:	429d      	cmp	r5, r3
 8005d90:	bf38      	it	cc
 8005d92:	461d      	movcc	r5, r3
 8005d94:	0553      	lsls	r3, r2, #21
 8005d96:	d531      	bpl.n	8005dfc <__ssputs_r+0xa0>
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7ff ff85 	bl	8005ca8 <_malloc_r>
 8005d9e:	4606      	mov	r6, r0
 8005da0:	b950      	cbnz	r0, 8005db8 <__ssputs_r+0x5c>
 8005da2:	230c      	movs	r3, #12
 8005da4:	f8ca 3000 	str.w	r3, [sl]
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db8:	6921      	ldr	r1, [r4, #16]
 8005dba:	464a      	mov	r2, r9
 8005dbc:	f000 fcc2 	bl	8006744 <memcpy>
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dca:	81a3      	strh	r3, [r4, #12]
 8005dcc:	6126      	str	r6, [r4, #16]
 8005dce:	6165      	str	r5, [r4, #20]
 8005dd0:	444e      	add	r6, r9
 8005dd2:	eba5 0509 	sub.w	r5, r5, r9
 8005dd6:	6026      	str	r6, [r4, #0]
 8005dd8:	60a5      	str	r5, [r4, #8]
 8005dda:	463e      	mov	r6, r7
 8005ddc:	42be      	cmp	r6, r7
 8005dde:	d900      	bls.n	8005de2 <__ssputs_r+0x86>
 8005de0:	463e      	mov	r6, r7
 8005de2:	4632      	mov	r2, r6
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	4641      	mov	r1, r8
 8005de8:	f000 fcba 	bl	8006760 <memmove>
 8005dec:	68a3      	ldr	r3, [r4, #8]
 8005dee:	6822      	ldr	r2, [r4, #0]
 8005df0:	1b9b      	subs	r3, r3, r6
 8005df2:	4432      	add	r2, r6
 8005df4:	60a3      	str	r3, [r4, #8]
 8005df6:	6022      	str	r2, [r4, #0]
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e7db      	b.n	8005db4 <__ssputs_r+0x58>
 8005dfc:	462a      	mov	r2, r5
 8005dfe:	f000 fcd5 	bl	80067ac <_realloc_r>
 8005e02:	4606      	mov	r6, r0
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d1e1      	bne.n	8005dcc <__ssputs_r+0x70>
 8005e08:	6921      	ldr	r1, [r4, #16]
 8005e0a:	4650      	mov	r0, sl
 8005e0c:	f7ff fefc 	bl	8005c08 <_free_r>
 8005e10:	e7c7      	b.n	8005da2 <__ssputs_r+0x46>
	...

08005e14 <_svfiprintf_r>:
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	4698      	mov	r8, r3
 8005e1a:	898b      	ldrh	r3, [r1, #12]
 8005e1c:	061b      	lsls	r3, r3, #24
 8005e1e:	b09d      	sub	sp, #116	; 0x74
 8005e20:	4607      	mov	r7, r0
 8005e22:	460d      	mov	r5, r1
 8005e24:	4614      	mov	r4, r2
 8005e26:	d50e      	bpl.n	8005e46 <_svfiprintf_r+0x32>
 8005e28:	690b      	ldr	r3, [r1, #16]
 8005e2a:	b963      	cbnz	r3, 8005e46 <_svfiprintf_r+0x32>
 8005e2c:	2140      	movs	r1, #64	; 0x40
 8005e2e:	f7ff ff3b 	bl	8005ca8 <_malloc_r>
 8005e32:	6028      	str	r0, [r5, #0]
 8005e34:	6128      	str	r0, [r5, #16]
 8005e36:	b920      	cbnz	r0, 8005e42 <_svfiprintf_r+0x2e>
 8005e38:	230c      	movs	r3, #12
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	e0d1      	b.n	8005fe6 <_svfiprintf_r+0x1d2>
 8005e42:	2340      	movs	r3, #64	; 0x40
 8005e44:	616b      	str	r3, [r5, #20]
 8005e46:	2300      	movs	r3, #0
 8005e48:	9309      	str	r3, [sp, #36]	; 0x24
 8005e4a:	2320      	movs	r3, #32
 8005e4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e50:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e54:	2330      	movs	r3, #48	; 0x30
 8005e56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006000 <_svfiprintf_r+0x1ec>
 8005e5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e5e:	f04f 0901 	mov.w	r9, #1
 8005e62:	4623      	mov	r3, r4
 8005e64:	469a      	mov	sl, r3
 8005e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e6a:	b10a      	cbz	r2, 8005e70 <_svfiprintf_r+0x5c>
 8005e6c:	2a25      	cmp	r2, #37	; 0x25
 8005e6e:	d1f9      	bne.n	8005e64 <_svfiprintf_r+0x50>
 8005e70:	ebba 0b04 	subs.w	fp, sl, r4
 8005e74:	d00b      	beq.n	8005e8e <_svfiprintf_r+0x7a>
 8005e76:	465b      	mov	r3, fp
 8005e78:	4622      	mov	r2, r4
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	f7ff ff6d 	bl	8005d5c <__ssputs_r>
 8005e82:	3001      	adds	r0, #1
 8005e84:	f000 80aa 	beq.w	8005fdc <_svfiprintf_r+0x1c8>
 8005e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e8a:	445a      	add	r2, fp
 8005e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80a2 	beq.w	8005fdc <_svfiprintf_r+0x1c8>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ea2:	f10a 0a01 	add.w	sl, sl, #1
 8005ea6:	9304      	str	r3, [sp, #16]
 8005ea8:	9307      	str	r3, [sp, #28]
 8005eaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005eae:	931a      	str	r3, [sp, #104]	; 0x68
 8005eb0:	4654      	mov	r4, sl
 8005eb2:	2205      	movs	r2, #5
 8005eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb8:	4851      	ldr	r0, [pc, #324]	; (8006000 <_svfiprintf_r+0x1ec>)
 8005eba:	f7fa f989 	bl	80001d0 <memchr>
 8005ebe:	9a04      	ldr	r2, [sp, #16]
 8005ec0:	b9d8      	cbnz	r0, 8005efa <_svfiprintf_r+0xe6>
 8005ec2:	06d0      	lsls	r0, r2, #27
 8005ec4:	bf44      	itt	mi
 8005ec6:	2320      	movmi	r3, #32
 8005ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ecc:	0711      	lsls	r1, r2, #28
 8005ece:	bf44      	itt	mi
 8005ed0:	232b      	movmi	r3, #43	; 0x2b
 8005ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eda:	2b2a      	cmp	r3, #42	; 0x2a
 8005edc:	d015      	beq.n	8005f0a <_svfiprintf_r+0xf6>
 8005ede:	9a07      	ldr	r2, [sp, #28]
 8005ee0:	4654      	mov	r4, sl
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	f04f 0c0a 	mov.w	ip, #10
 8005ee8:	4621      	mov	r1, r4
 8005eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eee:	3b30      	subs	r3, #48	; 0x30
 8005ef0:	2b09      	cmp	r3, #9
 8005ef2:	d94e      	bls.n	8005f92 <_svfiprintf_r+0x17e>
 8005ef4:	b1b0      	cbz	r0, 8005f24 <_svfiprintf_r+0x110>
 8005ef6:	9207      	str	r2, [sp, #28]
 8005ef8:	e014      	b.n	8005f24 <_svfiprintf_r+0x110>
 8005efa:	eba0 0308 	sub.w	r3, r0, r8
 8005efe:	fa09 f303 	lsl.w	r3, r9, r3
 8005f02:	4313      	orrs	r3, r2
 8005f04:	9304      	str	r3, [sp, #16]
 8005f06:	46a2      	mov	sl, r4
 8005f08:	e7d2      	b.n	8005eb0 <_svfiprintf_r+0x9c>
 8005f0a:	9b03      	ldr	r3, [sp, #12]
 8005f0c:	1d19      	adds	r1, r3, #4
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	9103      	str	r1, [sp, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	bfbb      	ittet	lt
 8005f16:	425b      	neglt	r3, r3
 8005f18:	f042 0202 	orrlt.w	r2, r2, #2
 8005f1c:	9307      	strge	r3, [sp, #28]
 8005f1e:	9307      	strlt	r3, [sp, #28]
 8005f20:	bfb8      	it	lt
 8005f22:	9204      	strlt	r2, [sp, #16]
 8005f24:	7823      	ldrb	r3, [r4, #0]
 8005f26:	2b2e      	cmp	r3, #46	; 0x2e
 8005f28:	d10c      	bne.n	8005f44 <_svfiprintf_r+0x130>
 8005f2a:	7863      	ldrb	r3, [r4, #1]
 8005f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f2e:	d135      	bne.n	8005f9c <_svfiprintf_r+0x188>
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	1d1a      	adds	r2, r3, #4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	9203      	str	r2, [sp, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bfb8      	it	lt
 8005f3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f40:	3402      	adds	r4, #2
 8005f42:	9305      	str	r3, [sp, #20]
 8005f44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006010 <_svfiprintf_r+0x1fc>
 8005f48:	7821      	ldrb	r1, [r4, #0]
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	f7fa f93f 	bl	80001d0 <memchr>
 8005f52:	b140      	cbz	r0, 8005f66 <_svfiprintf_r+0x152>
 8005f54:	2340      	movs	r3, #64	; 0x40
 8005f56:	eba0 000a 	sub.w	r0, r0, sl
 8005f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f5e:	9b04      	ldr	r3, [sp, #16]
 8005f60:	4303      	orrs	r3, r0
 8005f62:	3401      	adds	r4, #1
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f6a:	4826      	ldr	r0, [pc, #152]	; (8006004 <_svfiprintf_r+0x1f0>)
 8005f6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f70:	2206      	movs	r2, #6
 8005f72:	f7fa f92d 	bl	80001d0 <memchr>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d038      	beq.n	8005fec <_svfiprintf_r+0x1d8>
 8005f7a:	4b23      	ldr	r3, [pc, #140]	; (8006008 <_svfiprintf_r+0x1f4>)
 8005f7c:	bb1b      	cbnz	r3, 8005fc6 <_svfiprintf_r+0x1b2>
 8005f7e:	9b03      	ldr	r3, [sp, #12]
 8005f80:	3307      	adds	r3, #7
 8005f82:	f023 0307 	bic.w	r3, r3, #7
 8005f86:	3308      	adds	r3, #8
 8005f88:	9303      	str	r3, [sp, #12]
 8005f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8c:	4433      	add	r3, r6
 8005f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f90:	e767      	b.n	8005e62 <_svfiprintf_r+0x4e>
 8005f92:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f96:	460c      	mov	r4, r1
 8005f98:	2001      	movs	r0, #1
 8005f9a:	e7a5      	b.n	8005ee8 <_svfiprintf_r+0xd4>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	3401      	adds	r4, #1
 8005fa0:	9305      	str	r3, [sp, #20]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	f04f 0c0a 	mov.w	ip, #10
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fae:	3a30      	subs	r2, #48	; 0x30
 8005fb0:	2a09      	cmp	r2, #9
 8005fb2:	d903      	bls.n	8005fbc <_svfiprintf_r+0x1a8>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0c5      	beq.n	8005f44 <_svfiprintf_r+0x130>
 8005fb8:	9105      	str	r1, [sp, #20]
 8005fba:	e7c3      	b.n	8005f44 <_svfiprintf_r+0x130>
 8005fbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e7f0      	b.n	8005fa8 <_svfiprintf_r+0x194>
 8005fc6:	ab03      	add	r3, sp, #12
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	462a      	mov	r2, r5
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	; (800600c <_svfiprintf_r+0x1f8>)
 8005fce:	a904      	add	r1, sp, #16
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	f3af 8000 	nop.w
 8005fd6:	1c42      	adds	r2, r0, #1
 8005fd8:	4606      	mov	r6, r0
 8005fda:	d1d6      	bne.n	8005f8a <_svfiprintf_r+0x176>
 8005fdc:	89ab      	ldrh	r3, [r5, #12]
 8005fde:	065b      	lsls	r3, r3, #25
 8005fe0:	f53f af2c 	bmi.w	8005e3c <_svfiprintf_r+0x28>
 8005fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fe6:	b01d      	add	sp, #116	; 0x74
 8005fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fec:	ab03      	add	r3, sp, #12
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	462a      	mov	r2, r5
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <_svfiprintf_r+0x1f8>)
 8005ff4:	a904      	add	r1, sp, #16
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	f000 f9d4 	bl	80063a4 <_printf_i>
 8005ffc:	e7eb      	b.n	8005fd6 <_svfiprintf_r+0x1c2>
 8005ffe:	bf00      	nop
 8006000:	08006b04 	.word	0x08006b04
 8006004:	08006b0e 	.word	0x08006b0e
 8006008:	00000000 	.word	0x00000000
 800600c:	08005d5d 	.word	0x08005d5d
 8006010:	08006b0a 	.word	0x08006b0a

08006014 <__sfputc_r>:
 8006014:	6893      	ldr	r3, [r2, #8]
 8006016:	3b01      	subs	r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	b410      	push	{r4}
 800601c:	6093      	str	r3, [r2, #8]
 800601e:	da08      	bge.n	8006032 <__sfputc_r+0x1e>
 8006020:	6994      	ldr	r4, [r2, #24]
 8006022:	42a3      	cmp	r3, r4
 8006024:	db01      	blt.n	800602a <__sfputc_r+0x16>
 8006026:	290a      	cmp	r1, #10
 8006028:	d103      	bne.n	8006032 <__sfputc_r+0x1e>
 800602a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800602e:	f7ff bb0d 	b.w	800564c <__swbuf_r>
 8006032:	6813      	ldr	r3, [r2, #0]
 8006034:	1c58      	adds	r0, r3, #1
 8006036:	6010      	str	r0, [r2, #0]
 8006038:	7019      	strb	r1, [r3, #0]
 800603a:	4608      	mov	r0, r1
 800603c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006040:	4770      	bx	lr

08006042 <__sfputs_r>:
 8006042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006044:	4606      	mov	r6, r0
 8006046:	460f      	mov	r7, r1
 8006048:	4614      	mov	r4, r2
 800604a:	18d5      	adds	r5, r2, r3
 800604c:	42ac      	cmp	r4, r5
 800604e:	d101      	bne.n	8006054 <__sfputs_r+0x12>
 8006050:	2000      	movs	r0, #0
 8006052:	e007      	b.n	8006064 <__sfputs_r+0x22>
 8006054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006058:	463a      	mov	r2, r7
 800605a:	4630      	mov	r0, r6
 800605c:	f7ff ffda 	bl	8006014 <__sfputc_r>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d1f3      	bne.n	800604c <__sfputs_r+0xa>
 8006064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006068 <_vfiprintf_r>:
 8006068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606c:	460d      	mov	r5, r1
 800606e:	b09d      	sub	sp, #116	; 0x74
 8006070:	4614      	mov	r4, r2
 8006072:	4698      	mov	r8, r3
 8006074:	4606      	mov	r6, r0
 8006076:	b118      	cbz	r0, 8006080 <_vfiprintf_r+0x18>
 8006078:	6983      	ldr	r3, [r0, #24]
 800607a:	b90b      	cbnz	r3, 8006080 <_vfiprintf_r+0x18>
 800607c:	f7ff fcc0 	bl	8005a00 <__sinit>
 8006080:	4b89      	ldr	r3, [pc, #548]	; (80062a8 <_vfiprintf_r+0x240>)
 8006082:	429d      	cmp	r5, r3
 8006084:	d11b      	bne.n	80060be <_vfiprintf_r+0x56>
 8006086:	6875      	ldr	r5, [r6, #4]
 8006088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800608a:	07d9      	lsls	r1, r3, #31
 800608c:	d405      	bmi.n	800609a <_vfiprintf_r+0x32>
 800608e:	89ab      	ldrh	r3, [r5, #12]
 8006090:	059a      	lsls	r2, r3, #22
 8006092:	d402      	bmi.n	800609a <_vfiprintf_r+0x32>
 8006094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006096:	f7ff fd51 	bl	8005b3c <__retarget_lock_acquire_recursive>
 800609a:	89ab      	ldrh	r3, [r5, #12]
 800609c:	071b      	lsls	r3, r3, #28
 800609e:	d501      	bpl.n	80060a4 <_vfiprintf_r+0x3c>
 80060a0:	692b      	ldr	r3, [r5, #16]
 80060a2:	b9eb      	cbnz	r3, 80060e0 <_vfiprintf_r+0x78>
 80060a4:	4629      	mov	r1, r5
 80060a6:	4630      	mov	r0, r6
 80060a8:	f7ff fb22 	bl	80056f0 <__swsetup_r>
 80060ac:	b1c0      	cbz	r0, 80060e0 <_vfiprintf_r+0x78>
 80060ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b0:	07dc      	lsls	r4, r3, #31
 80060b2:	d50e      	bpl.n	80060d2 <_vfiprintf_r+0x6a>
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	b01d      	add	sp, #116	; 0x74
 80060ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060be:	4b7b      	ldr	r3, [pc, #492]	; (80062ac <_vfiprintf_r+0x244>)
 80060c0:	429d      	cmp	r5, r3
 80060c2:	d101      	bne.n	80060c8 <_vfiprintf_r+0x60>
 80060c4:	68b5      	ldr	r5, [r6, #8]
 80060c6:	e7df      	b.n	8006088 <_vfiprintf_r+0x20>
 80060c8:	4b79      	ldr	r3, [pc, #484]	; (80062b0 <_vfiprintf_r+0x248>)
 80060ca:	429d      	cmp	r5, r3
 80060cc:	bf08      	it	eq
 80060ce:	68f5      	ldreq	r5, [r6, #12]
 80060d0:	e7da      	b.n	8006088 <_vfiprintf_r+0x20>
 80060d2:	89ab      	ldrh	r3, [r5, #12]
 80060d4:	0598      	lsls	r0, r3, #22
 80060d6:	d4ed      	bmi.n	80060b4 <_vfiprintf_r+0x4c>
 80060d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060da:	f7ff fd30 	bl	8005b3e <__retarget_lock_release_recursive>
 80060de:	e7e9      	b.n	80060b4 <_vfiprintf_r+0x4c>
 80060e0:	2300      	movs	r3, #0
 80060e2:	9309      	str	r3, [sp, #36]	; 0x24
 80060e4:	2320      	movs	r3, #32
 80060e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ee:	2330      	movs	r3, #48	; 0x30
 80060f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062b4 <_vfiprintf_r+0x24c>
 80060f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060f8:	f04f 0901 	mov.w	r9, #1
 80060fc:	4623      	mov	r3, r4
 80060fe:	469a      	mov	sl, r3
 8006100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006104:	b10a      	cbz	r2, 800610a <_vfiprintf_r+0xa2>
 8006106:	2a25      	cmp	r2, #37	; 0x25
 8006108:	d1f9      	bne.n	80060fe <_vfiprintf_r+0x96>
 800610a:	ebba 0b04 	subs.w	fp, sl, r4
 800610e:	d00b      	beq.n	8006128 <_vfiprintf_r+0xc0>
 8006110:	465b      	mov	r3, fp
 8006112:	4622      	mov	r2, r4
 8006114:	4629      	mov	r1, r5
 8006116:	4630      	mov	r0, r6
 8006118:	f7ff ff93 	bl	8006042 <__sfputs_r>
 800611c:	3001      	adds	r0, #1
 800611e:	f000 80aa 	beq.w	8006276 <_vfiprintf_r+0x20e>
 8006122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006124:	445a      	add	r2, fp
 8006126:	9209      	str	r2, [sp, #36]	; 0x24
 8006128:	f89a 3000 	ldrb.w	r3, [sl]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80a2 	beq.w	8006276 <_vfiprintf_r+0x20e>
 8006132:	2300      	movs	r3, #0
 8006134:	f04f 32ff 	mov.w	r2, #4294967295
 8006138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800613c:	f10a 0a01 	add.w	sl, sl, #1
 8006140:	9304      	str	r3, [sp, #16]
 8006142:	9307      	str	r3, [sp, #28]
 8006144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006148:	931a      	str	r3, [sp, #104]	; 0x68
 800614a:	4654      	mov	r4, sl
 800614c:	2205      	movs	r2, #5
 800614e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006152:	4858      	ldr	r0, [pc, #352]	; (80062b4 <_vfiprintf_r+0x24c>)
 8006154:	f7fa f83c 	bl	80001d0 <memchr>
 8006158:	9a04      	ldr	r2, [sp, #16]
 800615a:	b9d8      	cbnz	r0, 8006194 <_vfiprintf_r+0x12c>
 800615c:	06d1      	lsls	r1, r2, #27
 800615e:	bf44      	itt	mi
 8006160:	2320      	movmi	r3, #32
 8006162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006166:	0713      	lsls	r3, r2, #28
 8006168:	bf44      	itt	mi
 800616a:	232b      	movmi	r3, #43	; 0x2b
 800616c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006170:	f89a 3000 	ldrb.w	r3, [sl]
 8006174:	2b2a      	cmp	r3, #42	; 0x2a
 8006176:	d015      	beq.n	80061a4 <_vfiprintf_r+0x13c>
 8006178:	9a07      	ldr	r2, [sp, #28]
 800617a:	4654      	mov	r4, sl
 800617c:	2000      	movs	r0, #0
 800617e:	f04f 0c0a 	mov.w	ip, #10
 8006182:	4621      	mov	r1, r4
 8006184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006188:	3b30      	subs	r3, #48	; 0x30
 800618a:	2b09      	cmp	r3, #9
 800618c:	d94e      	bls.n	800622c <_vfiprintf_r+0x1c4>
 800618e:	b1b0      	cbz	r0, 80061be <_vfiprintf_r+0x156>
 8006190:	9207      	str	r2, [sp, #28]
 8006192:	e014      	b.n	80061be <_vfiprintf_r+0x156>
 8006194:	eba0 0308 	sub.w	r3, r0, r8
 8006198:	fa09 f303 	lsl.w	r3, r9, r3
 800619c:	4313      	orrs	r3, r2
 800619e:	9304      	str	r3, [sp, #16]
 80061a0:	46a2      	mov	sl, r4
 80061a2:	e7d2      	b.n	800614a <_vfiprintf_r+0xe2>
 80061a4:	9b03      	ldr	r3, [sp, #12]
 80061a6:	1d19      	adds	r1, r3, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	9103      	str	r1, [sp, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bfbb      	ittet	lt
 80061b0:	425b      	neglt	r3, r3
 80061b2:	f042 0202 	orrlt.w	r2, r2, #2
 80061b6:	9307      	strge	r3, [sp, #28]
 80061b8:	9307      	strlt	r3, [sp, #28]
 80061ba:	bfb8      	it	lt
 80061bc:	9204      	strlt	r2, [sp, #16]
 80061be:	7823      	ldrb	r3, [r4, #0]
 80061c0:	2b2e      	cmp	r3, #46	; 0x2e
 80061c2:	d10c      	bne.n	80061de <_vfiprintf_r+0x176>
 80061c4:	7863      	ldrb	r3, [r4, #1]
 80061c6:	2b2a      	cmp	r3, #42	; 0x2a
 80061c8:	d135      	bne.n	8006236 <_vfiprintf_r+0x1ce>
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	1d1a      	adds	r2, r3, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	9203      	str	r2, [sp, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bfb8      	it	lt
 80061d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80061da:	3402      	adds	r4, #2
 80061dc:	9305      	str	r3, [sp, #20]
 80061de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062c4 <_vfiprintf_r+0x25c>
 80061e2:	7821      	ldrb	r1, [r4, #0]
 80061e4:	2203      	movs	r2, #3
 80061e6:	4650      	mov	r0, sl
 80061e8:	f7f9 fff2 	bl	80001d0 <memchr>
 80061ec:	b140      	cbz	r0, 8006200 <_vfiprintf_r+0x198>
 80061ee:	2340      	movs	r3, #64	; 0x40
 80061f0:	eba0 000a 	sub.w	r0, r0, sl
 80061f4:	fa03 f000 	lsl.w	r0, r3, r0
 80061f8:	9b04      	ldr	r3, [sp, #16]
 80061fa:	4303      	orrs	r3, r0
 80061fc:	3401      	adds	r4, #1
 80061fe:	9304      	str	r3, [sp, #16]
 8006200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006204:	482c      	ldr	r0, [pc, #176]	; (80062b8 <_vfiprintf_r+0x250>)
 8006206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800620a:	2206      	movs	r2, #6
 800620c:	f7f9 ffe0 	bl	80001d0 <memchr>
 8006210:	2800      	cmp	r0, #0
 8006212:	d03f      	beq.n	8006294 <_vfiprintf_r+0x22c>
 8006214:	4b29      	ldr	r3, [pc, #164]	; (80062bc <_vfiprintf_r+0x254>)
 8006216:	bb1b      	cbnz	r3, 8006260 <_vfiprintf_r+0x1f8>
 8006218:	9b03      	ldr	r3, [sp, #12]
 800621a:	3307      	adds	r3, #7
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	3308      	adds	r3, #8
 8006222:	9303      	str	r3, [sp, #12]
 8006224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006226:	443b      	add	r3, r7
 8006228:	9309      	str	r3, [sp, #36]	; 0x24
 800622a:	e767      	b.n	80060fc <_vfiprintf_r+0x94>
 800622c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006230:	460c      	mov	r4, r1
 8006232:	2001      	movs	r0, #1
 8006234:	e7a5      	b.n	8006182 <_vfiprintf_r+0x11a>
 8006236:	2300      	movs	r3, #0
 8006238:	3401      	adds	r4, #1
 800623a:	9305      	str	r3, [sp, #20]
 800623c:	4619      	mov	r1, r3
 800623e:	f04f 0c0a 	mov.w	ip, #10
 8006242:	4620      	mov	r0, r4
 8006244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006248:	3a30      	subs	r2, #48	; 0x30
 800624a:	2a09      	cmp	r2, #9
 800624c:	d903      	bls.n	8006256 <_vfiprintf_r+0x1ee>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0c5      	beq.n	80061de <_vfiprintf_r+0x176>
 8006252:	9105      	str	r1, [sp, #20]
 8006254:	e7c3      	b.n	80061de <_vfiprintf_r+0x176>
 8006256:	fb0c 2101 	mla	r1, ip, r1, r2
 800625a:	4604      	mov	r4, r0
 800625c:	2301      	movs	r3, #1
 800625e:	e7f0      	b.n	8006242 <_vfiprintf_r+0x1da>
 8006260:	ab03      	add	r3, sp, #12
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	462a      	mov	r2, r5
 8006266:	4b16      	ldr	r3, [pc, #88]	; (80062c0 <_vfiprintf_r+0x258>)
 8006268:	a904      	add	r1, sp, #16
 800626a:	4630      	mov	r0, r6
 800626c:	f3af 8000 	nop.w
 8006270:	4607      	mov	r7, r0
 8006272:	1c78      	adds	r0, r7, #1
 8006274:	d1d6      	bne.n	8006224 <_vfiprintf_r+0x1bc>
 8006276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006278:	07d9      	lsls	r1, r3, #31
 800627a:	d405      	bmi.n	8006288 <_vfiprintf_r+0x220>
 800627c:	89ab      	ldrh	r3, [r5, #12]
 800627e:	059a      	lsls	r2, r3, #22
 8006280:	d402      	bmi.n	8006288 <_vfiprintf_r+0x220>
 8006282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006284:	f7ff fc5b 	bl	8005b3e <__retarget_lock_release_recursive>
 8006288:	89ab      	ldrh	r3, [r5, #12]
 800628a:	065b      	lsls	r3, r3, #25
 800628c:	f53f af12 	bmi.w	80060b4 <_vfiprintf_r+0x4c>
 8006290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006292:	e711      	b.n	80060b8 <_vfiprintf_r+0x50>
 8006294:	ab03      	add	r3, sp, #12
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	462a      	mov	r2, r5
 800629a:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <_vfiprintf_r+0x258>)
 800629c:	a904      	add	r1, sp, #16
 800629e:	4630      	mov	r0, r6
 80062a0:	f000 f880 	bl	80063a4 <_printf_i>
 80062a4:	e7e4      	b.n	8006270 <_vfiprintf_r+0x208>
 80062a6:	bf00      	nop
 80062a8:	08006ac4 	.word	0x08006ac4
 80062ac:	08006ae4 	.word	0x08006ae4
 80062b0:	08006aa4 	.word	0x08006aa4
 80062b4:	08006b04 	.word	0x08006b04
 80062b8:	08006b0e 	.word	0x08006b0e
 80062bc:	00000000 	.word	0x00000000
 80062c0:	08006043 	.word	0x08006043
 80062c4:	08006b0a 	.word	0x08006b0a

080062c8 <_printf_common>:
 80062c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062cc:	4616      	mov	r6, r2
 80062ce:	4699      	mov	r9, r3
 80062d0:	688a      	ldr	r2, [r1, #8]
 80062d2:	690b      	ldr	r3, [r1, #16]
 80062d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062d8:	4293      	cmp	r3, r2
 80062da:	bfb8      	it	lt
 80062dc:	4613      	movlt	r3, r2
 80062de:	6033      	str	r3, [r6, #0]
 80062e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062e4:	4607      	mov	r7, r0
 80062e6:	460c      	mov	r4, r1
 80062e8:	b10a      	cbz	r2, 80062ee <_printf_common+0x26>
 80062ea:	3301      	adds	r3, #1
 80062ec:	6033      	str	r3, [r6, #0]
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	0699      	lsls	r1, r3, #26
 80062f2:	bf42      	ittt	mi
 80062f4:	6833      	ldrmi	r3, [r6, #0]
 80062f6:	3302      	addmi	r3, #2
 80062f8:	6033      	strmi	r3, [r6, #0]
 80062fa:	6825      	ldr	r5, [r4, #0]
 80062fc:	f015 0506 	ands.w	r5, r5, #6
 8006300:	d106      	bne.n	8006310 <_printf_common+0x48>
 8006302:	f104 0a19 	add.w	sl, r4, #25
 8006306:	68e3      	ldr	r3, [r4, #12]
 8006308:	6832      	ldr	r2, [r6, #0]
 800630a:	1a9b      	subs	r3, r3, r2
 800630c:	42ab      	cmp	r3, r5
 800630e:	dc26      	bgt.n	800635e <_printf_common+0x96>
 8006310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006314:	1e13      	subs	r3, r2, #0
 8006316:	6822      	ldr	r2, [r4, #0]
 8006318:	bf18      	it	ne
 800631a:	2301      	movne	r3, #1
 800631c:	0692      	lsls	r2, r2, #26
 800631e:	d42b      	bmi.n	8006378 <_printf_common+0xb0>
 8006320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006324:	4649      	mov	r1, r9
 8006326:	4638      	mov	r0, r7
 8006328:	47c0      	blx	r8
 800632a:	3001      	adds	r0, #1
 800632c:	d01e      	beq.n	800636c <_printf_common+0xa4>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	68e5      	ldr	r5, [r4, #12]
 8006332:	6832      	ldr	r2, [r6, #0]
 8006334:	f003 0306 	and.w	r3, r3, #6
 8006338:	2b04      	cmp	r3, #4
 800633a:	bf08      	it	eq
 800633c:	1aad      	subeq	r5, r5, r2
 800633e:	68a3      	ldr	r3, [r4, #8]
 8006340:	6922      	ldr	r2, [r4, #16]
 8006342:	bf0c      	ite	eq
 8006344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006348:	2500      	movne	r5, #0
 800634a:	4293      	cmp	r3, r2
 800634c:	bfc4      	itt	gt
 800634e:	1a9b      	subgt	r3, r3, r2
 8006350:	18ed      	addgt	r5, r5, r3
 8006352:	2600      	movs	r6, #0
 8006354:	341a      	adds	r4, #26
 8006356:	42b5      	cmp	r5, r6
 8006358:	d11a      	bne.n	8006390 <_printf_common+0xc8>
 800635a:	2000      	movs	r0, #0
 800635c:	e008      	b.n	8006370 <_printf_common+0xa8>
 800635e:	2301      	movs	r3, #1
 8006360:	4652      	mov	r2, sl
 8006362:	4649      	mov	r1, r9
 8006364:	4638      	mov	r0, r7
 8006366:	47c0      	blx	r8
 8006368:	3001      	adds	r0, #1
 800636a:	d103      	bne.n	8006374 <_printf_common+0xac>
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006374:	3501      	adds	r5, #1
 8006376:	e7c6      	b.n	8006306 <_printf_common+0x3e>
 8006378:	18e1      	adds	r1, r4, r3
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	2030      	movs	r0, #48	; 0x30
 800637e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006382:	4422      	add	r2, r4
 8006384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800638c:	3302      	adds	r3, #2
 800638e:	e7c7      	b.n	8006320 <_printf_common+0x58>
 8006390:	2301      	movs	r3, #1
 8006392:	4622      	mov	r2, r4
 8006394:	4649      	mov	r1, r9
 8006396:	4638      	mov	r0, r7
 8006398:	47c0      	blx	r8
 800639a:	3001      	adds	r0, #1
 800639c:	d0e6      	beq.n	800636c <_printf_common+0xa4>
 800639e:	3601      	adds	r6, #1
 80063a0:	e7d9      	b.n	8006356 <_printf_common+0x8e>
	...

080063a4 <_printf_i>:
 80063a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063a8:	460c      	mov	r4, r1
 80063aa:	4691      	mov	r9, r2
 80063ac:	7e27      	ldrb	r7, [r4, #24]
 80063ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063b0:	2f78      	cmp	r7, #120	; 0x78
 80063b2:	4680      	mov	r8, r0
 80063b4:	469a      	mov	sl, r3
 80063b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063ba:	d807      	bhi.n	80063cc <_printf_i+0x28>
 80063bc:	2f62      	cmp	r7, #98	; 0x62
 80063be:	d80a      	bhi.n	80063d6 <_printf_i+0x32>
 80063c0:	2f00      	cmp	r7, #0
 80063c2:	f000 80d8 	beq.w	8006576 <_printf_i+0x1d2>
 80063c6:	2f58      	cmp	r7, #88	; 0x58
 80063c8:	f000 80a3 	beq.w	8006512 <_printf_i+0x16e>
 80063cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063d4:	e03a      	b.n	800644c <_printf_i+0xa8>
 80063d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063da:	2b15      	cmp	r3, #21
 80063dc:	d8f6      	bhi.n	80063cc <_printf_i+0x28>
 80063de:	a001      	add	r0, pc, #4	; (adr r0, 80063e4 <_printf_i+0x40>)
 80063e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80063e4:	0800643d 	.word	0x0800643d
 80063e8:	08006451 	.word	0x08006451
 80063ec:	080063cd 	.word	0x080063cd
 80063f0:	080063cd 	.word	0x080063cd
 80063f4:	080063cd 	.word	0x080063cd
 80063f8:	080063cd 	.word	0x080063cd
 80063fc:	08006451 	.word	0x08006451
 8006400:	080063cd 	.word	0x080063cd
 8006404:	080063cd 	.word	0x080063cd
 8006408:	080063cd 	.word	0x080063cd
 800640c:	080063cd 	.word	0x080063cd
 8006410:	0800655d 	.word	0x0800655d
 8006414:	08006481 	.word	0x08006481
 8006418:	0800653f 	.word	0x0800653f
 800641c:	080063cd 	.word	0x080063cd
 8006420:	080063cd 	.word	0x080063cd
 8006424:	0800657f 	.word	0x0800657f
 8006428:	080063cd 	.word	0x080063cd
 800642c:	08006481 	.word	0x08006481
 8006430:	080063cd 	.word	0x080063cd
 8006434:	080063cd 	.word	0x080063cd
 8006438:	08006547 	.word	0x08006547
 800643c:	680b      	ldr	r3, [r1, #0]
 800643e:	1d1a      	adds	r2, r3, #4
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	600a      	str	r2, [r1, #0]
 8006444:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800644c:	2301      	movs	r3, #1
 800644e:	e0a3      	b.n	8006598 <_printf_i+0x1f4>
 8006450:	6825      	ldr	r5, [r4, #0]
 8006452:	6808      	ldr	r0, [r1, #0]
 8006454:	062e      	lsls	r6, r5, #24
 8006456:	f100 0304 	add.w	r3, r0, #4
 800645a:	d50a      	bpl.n	8006472 <_printf_i+0xce>
 800645c:	6805      	ldr	r5, [r0, #0]
 800645e:	600b      	str	r3, [r1, #0]
 8006460:	2d00      	cmp	r5, #0
 8006462:	da03      	bge.n	800646c <_printf_i+0xc8>
 8006464:	232d      	movs	r3, #45	; 0x2d
 8006466:	426d      	negs	r5, r5
 8006468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800646c:	485e      	ldr	r0, [pc, #376]	; (80065e8 <_printf_i+0x244>)
 800646e:	230a      	movs	r3, #10
 8006470:	e019      	b.n	80064a6 <_printf_i+0x102>
 8006472:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006476:	6805      	ldr	r5, [r0, #0]
 8006478:	600b      	str	r3, [r1, #0]
 800647a:	bf18      	it	ne
 800647c:	b22d      	sxthne	r5, r5
 800647e:	e7ef      	b.n	8006460 <_printf_i+0xbc>
 8006480:	680b      	ldr	r3, [r1, #0]
 8006482:	6825      	ldr	r5, [r4, #0]
 8006484:	1d18      	adds	r0, r3, #4
 8006486:	6008      	str	r0, [r1, #0]
 8006488:	0628      	lsls	r0, r5, #24
 800648a:	d501      	bpl.n	8006490 <_printf_i+0xec>
 800648c:	681d      	ldr	r5, [r3, #0]
 800648e:	e002      	b.n	8006496 <_printf_i+0xf2>
 8006490:	0669      	lsls	r1, r5, #25
 8006492:	d5fb      	bpl.n	800648c <_printf_i+0xe8>
 8006494:	881d      	ldrh	r5, [r3, #0]
 8006496:	4854      	ldr	r0, [pc, #336]	; (80065e8 <_printf_i+0x244>)
 8006498:	2f6f      	cmp	r7, #111	; 0x6f
 800649a:	bf0c      	ite	eq
 800649c:	2308      	moveq	r3, #8
 800649e:	230a      	movne	r3, #10
 80064a0:	2100      	movs	r1, #0
 80064a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064a6:	6866      	ldr	r6, [r4, #4]
 80064a8:	60a6      	str	r6, [r4, #8]
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	bfa2      	ittt	ge
 80064ae:	6821      	ldrge	r1, [r4, #0]
 80064b0:	f021 0104 	bicge.w	r1, r1, #4
 80064b4:	6021      	strge	r1, [r4, #0]
 80064b6:	b90d      	cbnz	r5, 80064bc <_printf_i+0x118>
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	d04d      	beq.n	8006558 <_printf_i+0x1b4>
 80064bc:	4616      	mov	r6, r2
 80064be:	fbb5 f1f3 	udiv	r1, r5, r3
 80064c2:	fb03 5711 	mls	r7, r3, r1, r5
 80064c6:	5dc7      	ldrb	r7, [r0, r7]
 80064c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064cc:	462f      	mov	r7, r5
 80064ce:	42bb      	cmp	r3, r7
 80064d0:	460d      	mov	r5, r1
 80064d2:	d9f4      	bls.n	80064be <_printf_i+0x11a>
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d10b      	bne.n	80064f0 <_printf_i+0x14c>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	07df      	lsls	r7, r3, #31
 80064dc:	d508      	bpl.n	80064f0 <_printf_i+0x14c>
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	6861      	ldr	r1, [r4, #4]
 80064e2:	4299      	cmp	r1, r3
 80064e4:	bfde      	ittt	le
 80064e6:	2330      	movle	r3, #48	; 0x30
 80064e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064f0:	1b92      	subs	r2, r2, r6
 80064f2:	6122      	str	r2, [r4, #16]
 80064f4:	f8cd a000 	str.w	sl, [sp]
 80064f8:	464b      	mov	r3, r9
 80064fa:	aa03      	add	r2, sp, #12
 80064fc:	4621      	mov	r1, r4
 80064fe:	4640      	mov	r0, r8
 8006500:	f7ff fee2 	bl	80062c8 <_printf_common>
 8006504:	3001      	adds	r0, #1
 8006506:	d14c      	bne.n	80065a2 <_printf_i+0x1fe>
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
 800650c:	b004      	add	sp, #16
 800650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006512:	4835      	ldr	r0, [pc, #212]	; (80065e8 <_printf_i+0x244>)
 8006514:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	680e      	ldr	r6, [r1, #0]
 800651c:	061f      	lsls	r7, r3, #24
 800651e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006522:	600e      	str	r6, [r1, #0]
 8006524:	d514      	bpl.n	8006550 <_printf_i+0x1ac>
 8006526:	07d9      	lsls	r1, r3, #31
 8006528:	bf44      	itt	mi
 800652a:	f043 0320 	orrmi.w	r3, r3, #32
 800652e:	6023      	strmi	r3, [r4, #0]
 8006530:	b91d      	cbnz	r5, 800653a <_printf_i+0x196>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	f023 0320 	bic.w	r3, r3, #32
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	2310      	movs	r3, #16
 800653c:	e7b0      	b.n	80064a0 <_printf_i+0xfc>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	f043 0320 	orr.w	r3, r3, #32
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	2378      	movs	r3, #120	; 0x78
 8006548:	4828      	ldr	r0, [pc, #160]	; (80065ec <_printf_i+0x248>)
 800654a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800654e:	e7e3      	b.n	8006518 <_printf_i+0x174>
 8006550:	065e      	lsls	r6, r3, #25
 8006552:	bf48      	it	mi
 8006554:	b2ad      	uxthmi	r5, r5
 8006556:	e7e6      	b.n	8006526 <_printf_i+0x182>
 8006558:	4616      	mov	r6, r2
 800655a:	e7bb      	b.n	80064d4 <_printf_i+0x130>
 800655c:	680b      	ldr	r3, [r1, #0]
 800655e:	6826      	ldr	r6, [r4, #0]
 8006560:	6960      	ldr	r0, [r4, #20]
 8006562:	1d1d      	adds	r5, r3, #4
 8006564:	600d      	str	r5, [r1, #0]
 8006566:	0635      	lsls	r5, r6, #24
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	d501      	bpl.n	8006570 <_printf_i+0x1cc>
 800656c:	6018      	str	r0, [r3, #0]
 800656e:	e002      	b.n	8006576 <_printf_i+0x1d2>
 8006570:	0671      	lsls	r1, r6, #25
 8006572:	d5fb      	bpl.n	800656c <_printf_i+0x1c8>
 8006574:	8018      	strh	r0, [r3, #0]
 8006576:	2300      	movs	r3, #0
 8006578:	6123      	str	r3, [r4, #16]
 800657a:	4616      	mov	r6, r2
 800657c:	e7ba      	b.n	80064f4 <_printf_i+0x150>
 800657e:	680b      	ldr	r3, [r1, #0]
 8006580:	1d1a      	adds	r2, r3, #4
 8006582:	600a      	str	r2, [r1, #0]
 8006584:	681e      	ldr	r6, [r3, #0]
 8006586:	6862      	ldr	r2, [r4, #4]
 8006588:	2100      	movs	r1, #0
 800658a:	4630      	mov	r0, r6
 800658c:	f7f9 fe20 	bl	80001d0 <memchr>
 8006590:	b108      	cbz	r0, 8006596 <_printf_i+0x1f2>
 8006592:	1b80      	subs	r0, r0, r6
 8006594:	6060      	str	r0, [r4, #4]
 8006596:	6863      	ldr	r3, [r4, #4]
 8006598:	6123      	str	r3, [r4, #16]
 800659a:	2300      	movs	r3, #0
 800659c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a0:	e7a8      	b.n	80064f4 <_printf_i+0x150>
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	4632      	mov	r2, r6
 80065a6:	4649      	mov	r1, r9
 80065a8:	4640      	mov	r0, r8
 80065aa:	47d0      	blx	sl
 80065ac:	3001      	adds	r0, #1
 80065ae:	d0ab      	beq.n	8006508 <_printf_i+0x164>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	079b      	lsls	r3, r3, #30
 80065b4:	d413      	bmi.n	80065de <_printf_i+0x23a>
 80065b6:	68e0      	ldr	r0, [r4, #12]
 80065b8:	9b03      	ldr	r3, [sp, #12]
 80065ba:	4298      	cmp	r0, r3
 80065bc:	bfb8      	it	lt
 80065be:	4618      	movlt	r0, r3
 80065c0:	e7a4      	b.n	800650c <_printf_i+0x168>
 80065c2:	2301      	movs	r3, #1
 80065c4:	4632      	mov	r2, r6
 80065c6:	4649      	mov	r1, r9
 80065c8:	4640      	mov	r0, r8
 80065ca:	47d0      	blx	sl
 80065cc:	3001      	adds	r0, #1
 80065ce:	d09b      	beq.n	8006508 <_printf_i+0x164>
 80065d0:	3501      	adds	r5, #1
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	9903      	ldr	r1, [sp, #12]
 80065d6:	1a5b      	subs	r3, r3, r1
 80065d8:	42ab      	cmp	r3, r5
 80065da:	dcf2      	bgt.n	80065c2 <_printf_i+0x21e>
 80065dc:	e7eb      	b.n	80065b6 <_printf_i+0x212>
 80065de:	2500      	movs	r5, #0
 80065e0:	f104 0619 	add.w	r6, r4, #25
 80065e4:	e7f5      	b.n	80065d2 <_printf_i+0x22e>
 80065e6:	bf00      	nop
 80065e8:	08006b15 	.word	0x08006b15
 80065ec:	08006b26 	.word	0x08006b26

080065f0 <_sbrk_r>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	4d06      	ldr	r5, [pc, #24]	; (800660c <_sbrk_r+0x1c>)
 80065f4:	2300      	movs	r3, #0
 80065f6:	4604      	mov	r4, r0
 80065f8:	4608      	mov	r0, r1
 80065fa:	602b      	str	r3, [r5, #0]
 80065fc:	f7fa ffac 	bl	8001558 <_sbrk>
 8006600:	1c43      	adds	r3, r0, #1
 8006602:	d102      	bne.n	800660a <_sbrk_r+0x1a>
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	b103      	cbz	r3, 800660a <_sbrk_r+0x1a>
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	bd38      	pop	{r3, r4, r5, pc}
 800660c:	20000458 	.word	0x20000458

08006610 <__sread>:
 8006610:	b510      	push	{r4, lr}
 8006612:	460c      	mov	r4, r1
 8006614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006618:	f000 f8ee 	bl	80067f8 <_read_r>
 800661c:	2800      	cmp	r0, #0
 800661e:	bfab      	itete	ge
 8006620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006622:	89a3      	ldrhlt	r3, [r4, #12]
 8006624:	181b      	addge	r3, r3, r0
 8006626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800662a:	bfac      	ite	ge
 800662c:	6563      	strge	r3, [r4, #84]	; 0x54
 800662e:	81a3      	strhlt	r3, [r4, #12]
 8006630:	bd10      	pop	{r4, pc}

08006632 <__swrite>:
 8006632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006636:	461f      	mov	r7, r3
 8006638:	898b      	ldrh	r3, [r1, #12]
 800663a:	05db      	lsls	r3, r3, #23
 800663c:	4605      	mov	r5, r0
 800663e:	460c      	mov	r4, r1
 8006640:	4616      	mov	r6, r2
 8006642:	d505      	bpl.n	8006650 <__swrite+0x1e>
 8006644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006648:	2302      	movs	r3, #2
 800664a:	2200      	movs	r2, #0
 800664c:	f000 f868 	bl	8006720 <_lseek_r>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800665a:	81a3      	strh	r3, [r4, #12]
 800665c:	4632      	mov	r2, r6
 800665e:	463b      	mov	r3, r7
 8006660:	4628      	mov	r0, r5
 8006662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006666:	f000 b817 	b.w	8006698 <_write_r>

0800666a <__sseek>:
 800666a:	b510      	push	{r4, lr}
 800666c:	460c      	mov	r4, r1
 800666e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006672:	f000 f855 	bl	8006720 <_lseek_r>
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	bf15      	itete	ne
 800667c:	6560      	strne	r0, [r4, #84]	; 0x54
 800667e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006686:	81a3      	strheq	r3, [r4, #12]
 8006688:	bf18      	it	ne
 800668a:	81a3      	strhne	r3, [r4, #12]
 800668c:	bd10      	pop	{r4, pc}

0800668e <__sclose>:
 800668e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006692:	f000 b813 	b.w	80066bc <_close_r>
	...

08006698 <_write_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4d07      	ldr	r5, [pc, #28]	; (80066b8 <_write_r+0x20>)
 800669c:	4604      	mov	r4, r0
 800669e:	4608      	mov	r0, r1
 80066a0:	4611      	mov	r1, r2
 80066a2:	2200      	movs	r2, #0
 80066a4:	602a      	str	r2, [r5, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f7fa ff05 	bl	80014b6 <_write>
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d102      	bne.n	80066b6 <_write_r+0x1e>
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	b103      	cbz	r3, 80066b6 <_write_r+0x1e>
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	bd38      	pop	{r3, r4, r5, pc}
 80066b8:	20000458 	.word	0x20000458

080066bc <_close_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4d06      	ldr	r5, [pc, #24]	; (80066d8 <_close_r+0x1c>)
 80066c0:	2300      	movs	r3, #0
 80066c2:	4604      	mov	r4, r0
 80066c4:	4608      	mov	r0, r1
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	f7fa ff11 	bl	80014ee <_close>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_close_r+0x1a>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_close_r+0x1a>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	20000458 	.word	0x20000458

080066dc <_fstat_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d07      	ldr	r5, [pc, #28]	; (80066fc <_fstat_r+0x20>)
 80066e0:	2300      	movs	r3, #0
 80066e2:	4604      	mov	r4, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	4611      	mov	r1, r2
 80066e8:	602b      	str	r3, [r5, #0]
 80066ea:	f7fa ff0c 	bl	8001506 <_fstat>
 80066ee:	1c43      	adds	r3, r0, #1
 80066f0:	d102      	bne.n	80066f8 <_fstat_r+0x1c>
 80066f2:	682b      	ldr	r3, [r5, #0]
 80066f4:	b103      	cbz	r3, 80066f8 <_fstat_r+0x1c>
 80066f6:	6023      	str	r3, [r4, #0]
 80066f8:	bd38      	pop	{r3, r4, r5, pc}
 80066fa:	bf00      	nop
 80066fc:	20000458 	.word	0x20000458

08006700 <_isatty_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d06      	ldr	r5, [pc, #24]	; (800671c <_isatty_r+0x1c>)
 8006704:	2300      	movs	r3, #0
 8006706:	4604      	mov	r4, r0
 8006708:	4608      	mov	r0, r1
 800670a:	602b      	str	r3, [r5, #0]
 800670c:	f7fa ff0b 	bl	8001526 <_isatty>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_isatty_r+0x1a>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_isatty_r+0x1a>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20000458 	.word	0x20000458

08006720 <_lseek_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4d07      	ldr	r5, [pc, #28]	; (8006740 <_lseek_r+0x20>)
 8006724:	4604      	mov	r4, r0
 8006726:	4608      	mov	r0, r1
 8006728:	4611      	mov	r1, r2
 800672a:	2200      	movs	r2, #0
 800672c:	602a      	str	r2, [r5, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	f7fa ff04 	bl	800153c <_lseek>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d102      	bne.n	800673e <_lseek_r+0x1e>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	b103      	cbz	r3, 800673e <_lseek_r+0x1e>
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	20000458 	.word	0x20000458

08006744 <memcpy>:
 8006744:	440a      	add	r2, r1
 8006746:	4291      	cmp	r1, r2
 8006748:	f100 33ff 	add.w	r3, r0, #4294967295
 800674c:	d100      	bne.n	8006750 <memcpy+0xc>
 800674e:	4770      	bx	lr
 8006750:	b510      	push	{r4, lr}
 8006752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800675a:	4291      	cmp	r1, r2
 800675c:	d1f9      	bne.n	8006752 <memcpy+0xe>
 800675e:	bd10      	pop	{r4, pc}

08006760 <memmove>:
 8006760:	4288      	cmp	r0, r1
 8006762:	b510      	push	{r4, lr}
 8006764:	eb01 0402 	add.w	r4, r1, r2
 8006768:	d902      	bls.n	8006770 <memmove+0x10>
 800676a:	4284      	cmp	r4, r0
 800676c:	4623      	mov	r3, r4
 800676e:	d807      	bhi.n	8006780 <memmove+0x20>
 8006770:	1e43      	subs	r3, r0, #1
 8006772:	42a1      	cmp	r1, r4
 8006774:	d008      	beq.n	8006788 <memmove+0x28>
 8006776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800677a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800677e:	e7f8      	b.n	8006772 <memmove+0x12>
 8006780:	4402      	add	r2, r0
 8006782:	4601      	mov	r1, r0
 8006784:	428a      	cmp	r2, r1
 8006786:	d100      	bne.n	800678a <memmove+0x2a>
 8006788:	bd10      	pop	{r4, pc}
 800678a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800678e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006792:	e7f7      	b.n	8006784 <memmove+0x24>

08006794 <__malloc_lock>:
 8006794:	4801      	ldr	r0, [pc, #4]	; (800679c <__malloc_lock+0x8>)
 8006796:	f7ff b9d1 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 800679a:	bf00      	nop
 800679c:	20000450 	.word	0x20000450

080067a0 <__malloc_unlock>:
 80067a0:	4801      	ldr	r0, [pc, #4]	; (80067a8 <__malloc_unlock+0x8>)
 80067a2:	f7ff b9cc 	b.w	8005b3e <__retarget_lock_release_recursive>
 80067a6:	bf00      	nop
 80067a8:	20000450 	.word	0x20000450

080067ac <_realloc_r>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	4607      	mov	r7, r0
 80067b0:	4614      	mov	r4, r2
 80067b2:	460e      	mov	r6, r1
 80067b4:	b921      	cbnz	r1, 80067c0 <_realloc_r+0x14>
 80067b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067ba:	4611      	mov	r1, r2
 80067bc:	f7ff ba74 	b.w	8005ca8 <_malloc_r>
 80067c0:	b922      	cbnz	r2, 80067cc <_realloc_r+0x20>
 80067c2:	f7ff fa21 	bl	8005c08 <_free_r>
 80067c6:	4625      	mov	r5, r4
 80067c8:	4628      	mov	r0, r5
 80067ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067cc:	f000 f826 	bl	800681c <_malloc_usable_size_r>
 80067d0:	42a0      	cmp	r0, r4
 80067d2:	d20f      	bcs.n	80067f4 <_realloc_r+0x48>
 80067d4:	4621      	mov	r1, r4
 80067d6:	4638      	mov	r0, r7
 80067d8:	f7ff fa66 	bl	8005ca8 <_malloc_r>
 80067dc:	4605      	mov	r5, r0
 80067de:	2800      	cmp	r0, #0
 80067e0:	d0f2      	beq.n	80067c8 <_realloc_r+0x1c>
 80067e2:	4631      	mov	r1, r6
 80067e4:	4622      	mov	r2, r4
 80067e6:	f7ff ffad 	bl	8006744 <memcpy>
 80067ea:	4631      	mov	r1, r6
 80067ec:	4638      	mov	r0, r7
 80067ee:	f7ff fa0b 	bl	8005c08 <_free_r>
 80067f2:	e7e9      	b.n	80067c8 <_realloc_r+0x1c>
 80067f4:	4635      	mov	r5, r6
 80067f6:	e7e7      	b.n	80067c8 <_realloc_r+0x1c>

080067f8 <_read_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d07      	ldr	r5, [pc, #28]	; (8006818 <_read_r+0x20>)
 80067fc:	4604      	mov	r4, r0
 80067fe:	4608      	mov	r0, r1
 8006800:	4611      	mov	r1, r2
 8006802:	2200      	movs	r2, #0
 8006804:	602a      	str	r2, [r5, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	f7fa fe38 	bl	800147c <_read>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d102      	bne.n	8006816 <_read_r+0x1e>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	b103      	cbz	r3, 8006816 <_read_r+0x1e>
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	20000458 	.word	0x20000458

0800681c <_malloc_usable_size_r>:
 800681c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006820:	1f18      	subs	r0, r3, #4
 8006822:	2b00      	cmp	r3, #0
 8006824:	bfbc      	itt	lt
 8006826:	580b      	ldrlt	r3, [r1, r0]
 8006828:	18c0      	addlt	r0, r0, r3
 800682a:	4770      	bx	lr

0800682c <trunc>:
 800682c:	ec51 0b10 	vmov	r0, r1, d0
 8006830:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006834:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006838:	2b13      	cmp	r3, #19
 800683a:	b5d0      	push	{r4, r6, r7, lr}
 800683c:	460c      	mov	r4, r1
 800683e:	dc10      	bgt.n	8006862 <trunc+0x36>
 8006840:	2b00      	cmp	r3, #0
 8006842:	bfa5      	ittet	ge
 8006844:	4a11      	ldrge	r2, [pc, #68]	; (800688c <trunc+0x60>)
 8006846:	fa42 f303 	asrge.w	r3, r2, r3
 800684a:	2100      	movlt	r1, #0
 800684c:	2100      	movge	r1, #0
 800684e:	bfb9      	ittee	lt
 8006850:	2000      	movlt	r0, #0
 8006852:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8006856:	2000      	movge	r0, #0
 8006858:	ea24 0103 	bicge.w	r1, r4, r3
 800685c:	ec41 0b10 	vmov	d0, r0, r1
 8006860:	bdd0      	pop	{r4, r6, r7, pc}
 8006862:	2b33      	cmp	r3, #51	; 0x33
 8006864:	dd08      	ble.n	8006878 <trunc+0x4c>
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686a:	d1f7      	bne.n	800685c <trunc+0x30>
 800686c:	ee10 2a10 	vmov	r2, s0
 8006870:	460b      	mov	r3, r1
 8006872:	f7f9 fd03 	bl	800027c <__adddf3>
 8006876:	e7f1      	b.n	800685c <trunc+0x30>
 8006878:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800687c:	f04f 33ff 	mov.w	r3, #4294967295
 8006880:	fa23 f202 	lsr.w	r2, r3, r2
 8006884:	ea20 0602 	bic.w	r6, r0, r2
 8006888:	4630      	mov	r0, r6
 800688a:	e7e7      	b.n	800685c <trunc+0x30>
 800688c:	000fffff 	.word	0x000fffff

08006890 <_init>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr

0800689c <_fini>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	bf00      	nop
 80068a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a2:	bc08      	pop	{r3}
 80068a4:	469e      	mov	lr, r3
 80068a6:	4770      	bx	lr
