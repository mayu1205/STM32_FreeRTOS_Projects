
assg6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003230  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ac  080034ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034ac  080034ac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034ac  080034ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b0  080034b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  08003524  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003524  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de0e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c59  00000000  00000000  0002deae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0002fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00030710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002730c  00000000  00000000  00031240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c678  00000000  00000000  0005854c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f042a  00000000  00000000  00064bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154fee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e4  00000000  00000000  00155044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033a0 	.word	0x080033a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080033a0 	.word	0x080033a0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fd75 	bl	8000cba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f908 	bl	80003e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f868 	bl	80002ac <MX_TIM2_Init>
  MX_TIM3_Init();
 80001dc:	f000 f8b4 	bl	8000348 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001e0:	4806      	ldr	r0, [pc, #24]	; (80001fc <main+0x34>)
 80001e2:	f001 ff8b 	bl	80020fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80001e6:	4806      	ldr	r0, [pc, #24]	; (8000200 <main+0x38>)
 80001e8:	f001 ff88 	bl	80020fc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("main function\n");
 80001ec:	4805      	ldr	r0, [pc, #20]	; (8000204 <main+0x3c>)
 80001ee:	f002 fc7f 	bl	8002af0 <puts>
	  HAL_Delay(100);
 80001f2:	2064      	movs	r0, #100	; 0x64
 80001f4:	f000 fdd6 	bl	8000da4 <HAL_Delay>
	  printf("main function\n");
 80001f8:	e7f8      	b.n	80001ec <main+0x24>
 80001fa:	bf00      	nop
 80001fc:	200000e4 	.word	0x200000e4
 8000200:	20000098 	.word	0x20000098
 8000204:	080033b8 	.word	0x080033b8

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b096      	sub	sp, #88	; 0x58
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0314 	add.w	r3, r7, #20
 8000212:	2244      	movs	r2, #68	; 0x44
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fbf4 	bl	8002a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800022a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800022e:	f001 f8f1 	bl	8001414 <HAL_PWREx_ControlVoltageScaling>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000238:	f000 fb42 	bl	80008c0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800023c:	2310      	movs	r3, #16
 800023e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000240:	2301      	movs	r3, #1
 8000242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000248:	2360      	movs	r3, #96	; 0x60
 800024a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024c:	2302      	movs	r3, #2
 800024e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000250:	2301      	movs	r3, #1
 8000252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000254:	2301      	movs	r3, #1
 8000256:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000258:	2328      	movs	r3, #40	; 0x28
 800025a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800025c:	2307      	movs	r3, #7
 800025e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000260:	2302      	movs	r3, #2
 8000262:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000264:	2302      	movs	r3, #2
 8000266:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	4618      	mov	r0, r3
 800026e:	f001 f927 	bl	80014c0 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000278:	f000 fb22 	bl	80008c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2303      	movs	r3, #3
 8000282:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000290:	463b      	mov	r3, r7
 8000292:	2104      	movs	r1, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f001 fced 	bl	8001c74 <HAL_RCC_ClockConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002a0:	f000 fb0e 	bl	80008c0 <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3758      	adds	r7, #88	; 0x58
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ca:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <MX_TIM2_Init+0x98>)
 80002cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 80002d2:	4b1c      	ldr	r3, [pc, #112]	; (8000344 <MX_TIM2_Init+0x98>)
 80002d4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80002d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002da:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <MX_TIM2_Init+0x98>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80002e0:	4b18      	ldr	r3, [pc, #96]	; (8000344 <MX_TIM2_Init+0x98>)
 80002e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e8:	4b16      	ldr	r3, [pc, #88]	; (8000344 <MX_TIM2_Init+0x98>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_TIM2_Init+0x98>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002f4:	4813      	ldr	r0, [pc, #76]	; (8000344 <MX_TIM2_Init+0x98>)
 80002f6:	f001 fea9 	bl	800204c <HAL_TIM_Base_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000300:	f000 fade 	bl	80008c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000308:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	4619      	mov	r1, r3
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <MX_TIM2_Init+0x98>)
 8000312:	f002 f882 	bl	800241a <HAL_TIM_ConfigClockSource>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800031c:	f000 fad0 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4619      	mov	r1, r3
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_TIM2_Init+0x98>)
 800032e:	f002 fa99 	bl	8002864 <HAL_TIMEx_MasterConfigSynchronization>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000338:	f000 fac2 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 800033c:	bf00      	nop
 800033e:	3720      	adds	r7, #32
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	200000e4 	.word	0x200000e4

08000348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b088      	sub	sp, #32
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034e:	f107 0310 	add.w	r3, r7, #16
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000366:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <MX_TIM3_Init+0x98>)
 8000368:	4a1e      	ldr	r2, [pc, #120]	; (80003e4 <MX_TIM3_Init+0x9c>)
 800036a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 800036c:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <MX_TIM3_Init+0x98>)
 800036e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000372:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000374:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <MX_TIM3_Init+0x98>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <MX_TIM3_Init+0x98>)
 800037c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000380:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <MX_TIM3_Init+0x98>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_TIM3_Init+0x98>)
 800038a:	2200      	movs	r2, #0
 800038c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800038e:	4814      	ldr	r0, [pc, #80]	; (80003e0 <MX_TIM3_Init+0x98>)
 8000390:	f001 fe5c 	bl	800204c <HAL_TIM_Base_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800039a:	f000 fa91 	bl	80008c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	4619      	mov	r1, r3
 80003aa:	480d      	ldr	r0, [pc, #52]	; (80003e0 <MX_TIM3_Init+0x98>)
 80003ac:	f002 f835 	bl	800241a <HAL_TIM_ConfigClockSource>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80003b6:	f000 fa83 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	4619      	mov	r1, r3
 80003c6:	4806      	ldr	r0, [pc, #24]	; (80003e0 <MX_TIM3_Init+0x98>)
 80003c8:	f002 fa4c 	bl	8002864 <HAL_TIMEx_MasterConfigSynchronization>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80003d2:	f000 fa75 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000098 	.word	0x20000098
 80003e4:	40000400 	.word	0x40000400

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	; 0x28
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003fe:	4bbc      	ldr	r3, [pc, #752]	; (80006f0 <MX_GPIO_Init+0x308>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	4abb      	ldr	r2, [pc, #748]	; (80006f0 <MX_GPIO_Init+0x308>)
 8000404:	f043 0310 	orr.w	r3, r3, #16
 8000408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040a:	4bb9      	ldr	r3, [pc, #740]	; (80006f0 <MX_GPIO_Init+0x308>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	f003 0310 	and.w	r3, r3, #16
 8000412:	613b      	str	r3, [r7, #16]
 8000414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000416:	4bb6      	ldr	r3, [pc, #728]	; (80006f0 <MX_GPIO_Init+0x308>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	4ab5      	ldr	r2, [pc, #724]	; (80006f0 <MX_GPIO_Init+0x308>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000422:	4bb3      	ldr	r3, [pc, #716]	; (80006f0 <MX_GPIO_Init+0x308>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	f003 0304 	and.w	r3, r3, #4
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4bb0      	ldr	r3, [pc, #704]	; (80006f0 <MX_GPIO_Init+0x308>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	4aaf      	ldr	r2, [pc, #700]	; (80006f0 <MX_GPIO_Init+0x308>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043a:	4bad      	ldr	r3, [pc, #692]	; (80006f0 <MX_GPIO_Init+0x308>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4baa      	ldr	r3, [pc, #680]	; (80006f0 <MX_GPIO_Init+0x308>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4aa9      	ldr	r2, [pc, #676]	; (80006f0 <MX_GPIO_Init+0x308>)
 800044c:	f043 0302 	orr.w	r3, r3, #2
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4ba7      	ldr	r3, [pc, #668]	; (80006f0 <MX_GPIO_Init+0x308>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045e:	4ba4      	ldr	r3, [pc, #656]	; (80006f0 <MX_GPIO_Init+0x308>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4aa3      	ldr	r2, [pc, #652]	; (80006f0 <MX_GPIO_Init+0x308>)
 8000464:	f043 0308 	orr.w	r3, r3, #8
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4ba1      	ldr	r3, [pc, #644]	; (80006f0 <MX_GPIO_Init+0x308>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0308 	and.w	r3, r3, #8
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 718a 	mov.w	r1, #276	; 0x114
 800047c:	489d      	ldr	r0, [pc, #628]	; (80006f4 <MX_GPIO_Init+0x30c>)
 800047e:	f000 ff71 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|my_led1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f248 1124 	movw	r1, #33060	; 0x8124
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f000 ff6a 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, external_led_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|my_led2_Pin
 8000490:	2200      	movs	r2, #0
 8000492:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000496:	4898      	ldr	r0, [pc, #608]	; (80006f8 <MX_GPIO_Init+0x310>)
 8000498:	f000 ff64 	bl	8001364 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	f241 0181 	movw	r1, #4225	; 0x1081
 80004a2:	4896      	ldr	r0, [pc, #600]	; (80006fc <MX_GPIO_Init+0x314>)
 80004a4:	f000 ff5e 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ae:	4893      	ldr	r0, [pc, #588]	; (80006fc <MX_GPIO_Init+0x314>)
 80004b0:	f000 ff58 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80004ba:	4891      	ldr	r0, [pc, #580]	; (8000700 <MX_GPIO_Init+0x318>)
 80004bc:	f000 ff52 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80004c0:	2201      	movs	r2, #1
 80004c2:	2120      	movs	r1, #32
 80004c4:	488c      	ldr	r0, [pc, #560]	; (80006f8 <MX_GPIO_Init+0x310>)
 80004c6:	f000 ff4d 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2101      	movs	r1, #1
 80004ce:	4889      	ldr	r0, [pc, #548]	; (80006f4 <MX_GPIO_Init+0x30c>)
 80004d0:	f000 ff48 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80004d4:	f240 1315 	movw	r3, #277	; 0x115
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	2301      	movs	r3, #1
 80004dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4619      	mov	r1, r3
 80004ec:	4881      	ldr	r0, [pc, #516]	; (80006f4 <MX_GPIO_Init+0x30c>)
 80004ee:	f000 fd8f 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80004f2:	236a      	movs	r3, #106	; 0x6a
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	487b      	ldr	r0, [pc, #492]	; (80006f4 <MX_GPIO_Init+0x30c>)
 8000508:	f000 fd82 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : my_button1_Pin */
  GPIO_InitStruct.Pin = my_button1_Pin;
 800050c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000512:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(my_button1_GPIO_Port, &GPIO_InitStruct);
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4619      	mov	r1, r3
 8000522:	4877      	ldr	r0, [pc, #476]	; (8000700 <MX_GPIO_Init+0x318>)
 8000524:	f000 fd74 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000528:	233f      	movs	r3, #63	; 0x3f
 800052a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800052c:	230b      	movs	r3, #11
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	4871      	ldr	r0, [pc, #452]	; (8000700 <MX_GPIO_Init+0x318>)
 800053c:	f000 fd68 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000540:	2303      	movs	r3, #3
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000544:	2302      	movs	r3, #2
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800054c:	2303      	movs	r3, #3
 800054e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000550:	2308      	movs	r3, #8
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4619      	mov	r1, r3
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f000 fd57 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin my_led1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|my_led1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000562:	f248 1324 	movw	r3, #33060	; 0x8124
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f000 fd47 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000582:	2310      	movs	r3, #16
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000586:	230b      	movs	r3, #11
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000598:	f000 fd3a 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800059c:	23c0      	movs	r3, #192	; 0xc0
 800059e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005ac:	2305      	movs	r3, #5
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f000 fd29 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80005be:	2301      	movs	r3, #1
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	4849      	ldr	r0, [pc, #292]	; (80006f8 <MX_GPIO_Init+0x310>)
 80005d4:	f000 fd1c 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80005d8:	2302      	movs	r3, #2
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005dc:	230b      	movs	r3, #11
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	4843      	ldr	r0, [pc, #268]	; (80006f8 <MX_GPIO_Init+0x310>)
 80005ec:	f000 fd10 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : external_led_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin my_led2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = external_led_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|my_led2_Pin
 80005f0:	f24f 0334 	movw	r3, #61492	; 0xf034
 80005f4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2300      	movs	r3, #0
 8000600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	483b      	ldr	r0, [pc, #236]	; (80006f8 <MX_GPIO_Init+0x310>)
 800060a:	f000 fd01 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800060e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000620:	2306      	movs	r3, #6
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	4832      	ldr	r0, [pc, #200]	; (80006f4 <MX_GPIO_Init+0x30c>)
 800062c:	f000 fcf0 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000630:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000634:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000642:	230a      	movs	r3, #10
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4829      	ldr	r0, [pc, #164]	; (80006f4 <MX_GPIO_Init+0x30c>)
 800064e:	f000 fcdf 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000652:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000658:	2312      	movs	r3, #18
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000664:	2304      	movs	r3, #4
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4822      	ldr	r0, [pc, #136]	; (80006f8 <MX_GPIO_Init+0x310>)
 8000670:	f000 fcce 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000674:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067a:	2302      	movs	r3, #2
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000686:	2307      	movs	r3, #7
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	481a      	ldr	r0, [pc, #104]	; (80006fc <MX_GPIO_Init+0x314>)
 8000692:	f000 fcbd 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000696:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800069a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4813      	ldr	r0, [pc, #76]	; (80006fc <MX_GPIO_Init+0x314>)
 80006ae:	f000 fcaf 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80006b2:	f243 0381 	movw	r3, #12417	; 0x3081
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	480c      	ldr	r0, [pc, #48]	; (80006fc <MX_GPIO_Init+0x314>)
 80006cc:	f000 fca0 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80006d0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_GPIO_Init+0x318>)
 80006ea:	f000 fc91 	bl	8001010 <HAL_GPIO_Init>
 80006ee:	e009      	b.n	8000704 <MX_GPIO_Init+0x31c>
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48001000 	.word	0x48001000
 80006f8:	48000400 	.word	0x48000400
 80006fc:	48000c00 	.word	0x48000c00
 8000700:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000704:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4844      	ldr	r0, [pc, #272]	; (800082c <MX_GPIO_Init+0x444>)
 800071c:	f000 fc78 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f000 fc6a 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800073c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800074e:	230a      	movs	r3, #10
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f000 fc58 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000760:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000772:	2306      	movs	r3, #6
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	482b      	ldr	r0, [pc, #172]	; (800082c <MX_GPIO_Init+0x444>)
 800077e:	f000 fc47 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000782:	2302      	movs	r3, #2
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000792:	2305      	movs	r3, #5
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4824      	ldr	r0, [pc, #144]	; (8000830 <MX_GPIO_Init+0x448>)
 800079e:	f000 fc37 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80007a2:	2378      	movs	r3, #120	; 0x78
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b2:	2307      	movs	r3, #7
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	481c      	ldr	r0, [pc, #112]	; (8000830 <MX_GPIO_Init+0x448>)
 80007be:	f000 fc27 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_LINK_UART1_TX_Pin ST_LINK_UART1_RX_Pin */
  GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80007c2:	23c0      	movs	r3, #192	; 0xc0
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007d2:	2307      	movs	r3, #7
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4815      	ldr	r0, [pc, #84]	; (8000834 <MX_GPIO_Init+0x44c>)
 80007de:	f000 fc17 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80007e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e8:	2312      	movs	r3, #18
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f4:	2304      	movs	r3, #4
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_GPIO_Init+0x44c>)
 8000800:	f000 fc06 	bl	8001010 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2017      	movs	r0, #23
 800080a:	f000 fbca 	bl	8000fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800080e:	2017      	movs	r0, #23
 8000810:	f000 fbe3 	bl	8000fda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2028      	movs	r0, #40	; 0x28
 800081a:	f000 fbc2 	bl	8000fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800081e:	2028      	movs	r0, #40	; 0x28
 8000820:	f000 fbdb 	bl	8000fda <HAL_NVIC_EnableIRQ>

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	48000800 	.word	0x48000800
 8000830:	48000c00 	.word	0x48000c00
 8000834:	48000400 	.word	0x48000400

08000838 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == my_button1_Pin){
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000848:	d107      	bne.n	800085a <HAL_GPIO_EXTI_Callback+0x22>
		HAL_GPIO_TogglePin(external_led_GPIO_Port, external_led_Pin);
 800084a:	2104      	movs	r1, #4
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <HAL_GPIO_EXTI_Callback+0x2c>)
 800084e:	f000 fda1 	bl	8001394 <HAL_GPIO_TogglePin>
		printf("Button pressed event!!\n");
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <HAL_GPIO_EXTI_Callback+0x30>)
 8000854:	f002 f94c 	bl	8002af0 <puts>
	}
	else{
		__NOP();
	}
}
 8000858:	e000      	b.n	800085c <HAL_GPIO_EXTI_Callback+0x24>
		__NOP();
 800085a:	bf00      	nop
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	48000400 	.word	0x48000400
 8000868:	080033c8 	.word	0x080033c8

0800086c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d107      	bne.n	800088c <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_GPIO_TogglePin(my_led2_GPIO_Port, my_led2_Pin);
 800087c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000882:	f000 fd87 	bl	8001394 <HAL_GPIO_TogglePin>
		printf("Timer 2 interrupt!!\n");
 8000886:	480b      	ldr	r0, [pc, #44]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000888:	f002 f932 	bl	8002af0 <puts>
	}
	if(htim == &htim3){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d107      	bne.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x38>
		HAL_GPIO_TogglePin(my_led1_GPIO_Port, my_led1_Pin);
 8000894:	2120      	movs	r1, #32
 8000896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089a:	f000 fd7b 	bl	8001394 <HAL_GPIO_TogglePin>
		printf("Timer 3 interrupt!!\n");
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80008a0:	f002 f926 	bl	8002af0 <puts>
	}
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000e4 	.word	0x200000e4
 80008b0:	48000400 	.word	0x48000400
 80008b4:	080033e0 	.word	0x080033e0
 80008b8:	20000098 	.word	0x20000098
 80008bc:	080033f4 	.word	0x080033f4

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_MspInit+0x44>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_MspInit+0x44>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6613      	str	r3, [r2, #96]	; 0x60
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x44>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x44>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6593      	str	r3, [r2, #88]	; 0x58
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000934:	d131      	bne.n	800099a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000936:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <HAL_TIM_Base_MspInit+0xc0>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	4a26      	ldr	r2, [pc, #152]	; (80009d4 <HAL_TIM_Base_MspInit+0xc0>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6593      	str	r3, [r2, #88]	; 0x58
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <HAL_TIM_Base_MspInit+0xc0>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <HAL_TIM_Base_MspInit+0xc0>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a20      	ldr	r2, [pc, #128]	; (80009d4 <HAL_TIM_Base_MspInit+0xc0>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <HAL_TIM_Base_MspInit+0xc0>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000966:	2308      	movs	r3, #8
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000976:	2301      	movs	r3, #1
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000984:	f000 fb44 	bl	8001010 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	201c      	movs	r0, #28
 800098e:	f000 fb08 	bl	8000fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000992:	201c      	movs	r0, #28
 8000994:	f000 fb21 	bl	8000fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000998:	e018      	b.n	80009cc <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM3)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_TIM_Base_MspInit+0xc4>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d113      	bne.n	80009cc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_TIM_Base_MspInit+0xc0>)
 80009a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a8:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <HAL_TIM_Base_MspInit+0xc0>)
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	6593      	str	r3, [r2, #88]	; 0x58
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_TIM_Base_MspInit+0xc0>)
 80009b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	201d      	movs	r0, #29
 80009c2:	f000 faee 	bl	8000fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009c6:	201d      	movs	r0, #29
 80009c8:	f000 fb07 	bl	8000fda <HAL_NVIC_EnableIRQ>
}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40000400 	.word	0x40000400

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a28:	f000 f99c 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000a34:	2020      	movs	r0, #32
 8000a36:	f000 fcc7 	bl	80013c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000a3a:	2040      	movs	r0, #64	; 0x40
 8000a3c:	f000 fcc4 	bl	80013c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a40:	2080      	movs	r0, #128	; 0x80
 8000a42:	f000 fcc1 	bl	80013c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000a46:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a4a:	f000 fcbd 	bl	80013c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <TIM2_IRQHandler+0x10>)
 8000a5a:	f001 fbbf 	bl	80021dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000e4 	.word	0x200000e4

08000a68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TIM3_IRQHandler+0x10>)
 8000a6e:	f001 fbb5 	bl	80021dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000098 	.word	0x20000098

08000a7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a84:	f000 fca0 	bl	80013c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000a88:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a8c:	f000 fc9c 	bl	80013c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a94:	f000 fc98 	bl	80013c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000a98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a9c:	f000 fc94 	bl	80013c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000aa0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000aa4:	f000 fc90 	bl	80013c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <ITM_SendChar+0x48>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <ITM_SendChar+0x48>)
 8000abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ac0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <ITM_SendChar+0x4c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <ITM_SendChar+0x4c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000ace:	bf00      	nop
 8000ad0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f8      	beq.n	8000ad0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000ade:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	6013      	str	r3, [r2, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000edfc 	.word	0xe000edfc
 8000af8:	e0000e00 	.word	0xe0000e00

08000afc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00a      	b.n	8000b24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b0e:	f3af 8000 	nop.w
 8000b12:	4601      	mov	r1, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf0      	blt.n	8000b0e <_read+0x12>
	}

return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e009      	b.n	8000b5c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	60ba      	str	r2, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffab 	bl	8000aac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf1      	blt.n	8000b48 <_write+0x12>
	}
	return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b96:	605a      	str	r2, [r3, #4]
	return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f001 fed2 	bl	80029b0 <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20018000 	.word	0x20018000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	2000008c 	.word	0x2000008c
 8000c40:	20000148 	.word	0x20000148

08000c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c6c:	f7ff ffea 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <LoopForever+0xe>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <LoopForever+0x16>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c96:	f001 fe91 	bl	80029bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9a:	f7ff fa95 	bl	80001c8 <main>

08000c9e <LoopForever>:

LoopForever:
    b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cac:	080034b4 	.word	0x080034b4
  ldr r2, =_sbss
 8000cb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cb4:	20000144 	.word	0x20000144

08000cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_2_IRQHandler>

08000cba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f961 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 f80e 	bl	8000cec <HAL_InitTick>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	e001      	b.n	8000ce0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cdc:	f7ff fdf6 	bl	80008cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_InitTick+0x6c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d023      	beq.n	8000d48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_InitTick+0x70>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_InitTick+0x6c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f96d 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10f      	bne.n	8000d42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d809      	bhi.n	8000d3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 f937 	bl	8000fa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_InitTick+0x74>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e007      	b.n	8000d4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e004      	b.n	8000d4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e001      	b.n	8000d4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000130 	.word	0x20000130

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000130 	.word	0x20000130

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <__NVIC_EnableIRQ+0x38>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f58:	d301      	bcc.n	8000f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00f      	b.n	8000f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <SysTick_Config+0x40>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f66:	210f      	movs	r1, #15
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f7ff ff8e 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SysTick_Config+0x40>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SysTick_Config+0x40>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff29 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb4:	f7ff ff3e 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000fb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	6978      	ldr	r0, [r7, #20]
 8000fc0:	f7ff ff8e 	bl	8000ee0 <NVIC_EncodePriority>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff5d 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff31 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffa2 	bl	8000f48 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	e17f      	b.n	8001320 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8171 	beq.w	800131a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b01      	cmp	r3, #1
 8001042:	d005      	beq.n	8001050 <HAL_GPIO_Init+0x40>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d130      	bne.n	80010b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001086:	2201      	movs	r2, #1
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	f003 0201 	and.w	r2, r3, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d118      	bne.n	80010f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	6939      	ldr	r1, [r7, #16]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80ac 	beq.w	800131a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	4b5f      	ldr	r3, [pc, #380]	; (8001340 <HAL_GPIO_Init+0x330>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	4a5e      	ldr	r2, [pc, #376]	; (8001340 <HAL_GPIO_Init+0x330>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6613      	str	r3, [r2, #96]	; 0x60
 80011ce:	4b5c      	ldr	r3, [pc, #368]	; (8001340 <HAL_GPIO_Init+0x330>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011da:	4a5a      	ldr	r2, [pc, #360]	; (8001344 <HAL_GPIO_Init+0x334>)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001204:	d025      	beq.n	8001252 <HAL_GPIO_Init+0x242>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4f      	ldr	r2, [pc, #316]	; (8001348 <HAL_GPIO_Init+0x338>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01f      	beq.n	800124e <HAL_GPIO_Init+0x23e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4e      	ldr	r2, [pc, #312]	; (800134c <HAL_GPIO_Init+0x33c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x23a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4d      	ldr	r2, [pc, #308]	; (8001350 <HAL_GPIO_Init+0x340>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x236>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <HAL_GPIO_Init+0x344>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x232>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4b      	ldr	r2, [pc, #300]	; (8001358 <HAL_GPIO_Init+0x348>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x22e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4a      	ldr	r2, [pc, #296]	; (800135c <HAL_GPIO_Init+0x34c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x22a>
 8001236:	2306      	movs	r3, #6
 8001238:	e00c      	b.n	8001254 <HAL_GPIO_Init+0x244>
 800123a:	2307      	movs	r3, #7
 800123c:	e00a      	b.n	8001254 <HAL_GPIO_Init+0x244>
 800123e:	2305      	movs	r3, #5
 8001240:	e008      	b.n	8001254 <HAL_GPIO_Init+0x244>
 8001242:	2304      	movs	r3, #4
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x244>
 8001246:	2303      	movs	r3, #3
 8001248:	e004      	b.n	8001254 <HAL_GPIO_Init+0x244>
 800124a:	2302      	movs	r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x244>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x244>
 8001252:	2300      	movs	r3, #0
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	f002 0203 	and.w	r2, r2, #3
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4093      	lsls	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001264:	4937      	ldr	r1, [pc, #220]	; (8001344 <HAL_GPIO_Init+0x334>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_GPIO_Init+0x350>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001296:	4a32      	ldr	r2, [pc, #200]	; (8001360 <HAL_GPIO_Init+0x350>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800129c:	4b30      	ldr	r3, [pc, #192]	; (8001360 <HAL_GPIO_Init+0x350>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012c0:	4a27      	ldr	r2, [pc, #156]	; (8001360 <HAL_GPIO_Init+0x350>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <HAL_GPIO_Init+0x350>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012ea:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_GPIO_Init+0x350>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_GPIO_Init+0x350>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_GPIO_Init+0x350>)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa22 f303 	lsr.w	r3, r2, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	f47f ae78 	bne.w	8001020 <HAL_GPIO_Init+0x10>
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	371c      	adds	r7, #28
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	48000400 	.word	0x48000400
 800134c:	48000800 	.word	0x48000800
 8001350:	48000c00 	.word	0x48000c00
 8001354:	48001000 	.word	0x48001000
 8001358:	48001400 	.word	0x48001400
 800135c:	48001800 	.word	0x48001800
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001380:	e002      	b.n	8001388 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4013      	ands	r3, r2
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43d9      	mvns	r1, r3
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	400b      	ands	r3, r1
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	4013      	ands	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fa26 	bl	8000838 <HAL_GPIO_EXTI_Callback>
  }
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40010400 	.word	0x40010400

080013f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_PWREx_GetVoltageRange+0x18>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000

08001414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001422:	d130      	bne.n	8001486 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800142c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001430:	d038      	beq.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001440:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2232      	movs	r2, #50	; 0x32
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0c9b      	lsrs	r3, r3, #18
 8001454:	3301      	adds	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001458:	e002      	b.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3b01      	subs	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146c:	d102      	bne.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x60>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f2      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001480:	d110      	bne.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e00f      	b.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800148e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001492:	d007      	beq.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800149c:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40007000 	.word	0x40007000
 80014b8:	20000000 	.word	0x20000000
 80014bc:	431bde83 	.word	0x431bde83

080014c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e3c6      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d2:	4ba1      	ldr	r3, [pc, #644]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014dc:	4b9e      	ldr	r3, [pc, #632]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80e4 	beq.w	80016bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_RCC_OscConfig+0x4a>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	f040 808b 	bne.w	8001618 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b01      	cmp	r3, #1
 8001506:	f040 8087 	bne.w	8001618 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800150a:	4b93      	ldr	r3, [pc, #588]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x62>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e39e      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	4b8c      	ldr	r3, [pc, #560]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <HAL_RCC_OscConfig+0x7c>
 8001532:	4b89      	ldr	r3, [pc, #548]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800153a:	e005      	b.n	8001548 <HAL_RCC_OscConfig+0x88>
 800153c:	4b86      	ldr	r3, [pc, #536]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 800153e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001548:	4293      	cmp	r3, r2
 800154a:	d223      	bcs.n	8001594 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fd1b 	bl	8001f8c <RCC_SetFlashLatencyFromMSIRange>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e37f      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001560:	4b7d      	ldr	r3, [pc, #500]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a7c      	ldr	r2, [pc, #496]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b7a      	ldr	r3, [pc, #488]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4977      	ldr	r1, [pc, #476]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157e:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	4972      	ldr	r1, [pc, #456]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
 8001592:	e025      	b.n	80015e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001594:	4b70      	ldr	r3, [pc, #448]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a6f      	ldr	r2, [pc, #444]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b6d      	ldr	r3, [pc, #436]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	496a      	ldr	r1, [pc, #424]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b2:	4b69      	ldr	r3, [pc, #420]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	4965      	ldr	r1, [pc, #404]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fcdb 	bl	8001f8c <RCC_SetFlashLatencyFromMSIRange>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e33f      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015e0:	f000 fc48 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b5c      	ldr	r3, [pc, #368]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	495a      	ldr	r1, [pc, #360]	; (800175c <HAL_RCC_OscConfig+0x29c>)
 80015f2:	5ccb      	ldrb	r3, [r1, r3]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
 80015fc:	4a58      	ldr	r2, [pc, #352]	; (8001760 <HAL_RCC_OscConfig+0x2a0>)
 80015fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001600:	4b58      	ldr	r3, [pc, #352]	; (8001764 <HAL_RCC_OscConfig+0x2a4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fb71 	bl	8000cec <HAL_InitTick>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d052      	beq.n	80016ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	e323      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d032      	beq.n	8001686 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001620:	4b4d      	ldr	r3, [pc, #308]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a4c      	ldr	r2, [pc, #304]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800162c:	f7ff fbae 	bl	8000d8c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001634:	f7ff fbaa 	bl	8000d8c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e30c      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a40      	ldr	r2, [pc, #256]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	493b      	ldr	r1, [pc, #236]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001670:	4b39      	ldr	r3, [pc, #228]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	4936      	ldr	r1, [pc, #216]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e01a      	b.n	80016bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a33      	ldr	r2, [pc, #204]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001692:	f7ff fb7b 	bl	8000d8c <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169a:	f7ff fb77 	bl	8000d8c <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e2d9      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x1da>
 80016b8:	e000      	b.n	80016bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d074      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x21a>
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d10e      	bne.n	80016f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d10b      	bne.n	80016f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d064      	beq.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d160      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e2b6      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x24a>
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a15      	ldr	r2, [pc, #84]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e01d      	b.n	8001746 <HAL_RCC_OscConfig+0x286>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x26e>
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 800171a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e00b      	b.n	8001746 <HAL_RCC_OscConfig+0x286>
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a06      	ldr	r2, [pc, #24]	; (8001758 <HAL_RCC_OscConfig+0x298>)
 8001740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001744:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d01c      	beq.n	8001788 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fb1d 	bl	8000d8c <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001754:	e011      	b.n	800177a <HAL_RCC_OscConfig+0x2ba>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	08003408 	.word	0x08003408
 8001760:	20000000 	.word	0x20000000
 8001764:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fb10 	bl	8000d8c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e272      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177a:	4baf      	ldr	r3, [pc, #700]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x2a8>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fb00 	bl	8000d8c <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fafc 	bl	8000d8c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e25e      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a2:	4ba5      	ldr	r3, [pc, #660]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x2d0>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d060      	beq.n	8001880 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_OscConfig+0x310>
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d116      	bne.n	80017fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d0:	4b99      	ldr	r3, [pc, #612]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_OscConfig+0x328>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e23b      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b93      	ldr	r3, [pc, #588]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	4990      	ldr	r1, [pc, #576]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fc:	e040      	b.n	8001880 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d023      	beq.n	800184e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001806:	4b8c      	ldr	r3, [pc, #560]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a8b      	ldr	r2, [pc, #556]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff fabb 	bl	8000d8c <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181a:	f7ff fab7 	bl	8000d8c <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e219      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182c:	4b82      	ldr	r3, [pc, #520]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4b7f      	ldr	r3, [pc, #508]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	497c      	ldr	r1, [pc, #496]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
 800184c:	e018      	b.n	8001880 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184e:	4b7a      	ldr	r3, [pc, #488]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a79      	ldr	r2, [pc, #484]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 8001854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fa97 	bl	8000d8c <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001862:	f7ff fa93 	bl	8000d8c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1f5      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001874:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d03c      	beq.n	8001906 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01c      	beq.n	80018ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001894:	4b68      	ldr	r3, [pc, #416]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 8001896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189a:	4a67      	ldr	r2, [pc, #412]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff fa72 	bl	8000d8c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ac:	f7ff fa6e 	bl	8000d8c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1d0      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018be:	4b5e      	ldr	r3, [pc, #376]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80018c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0ef      	beq.n	80018ac <HAL_RCC_OscConfig+0x3ec>
 80018cc:	e01b      	b.n	8001906 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80018d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d4:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff fa55 	bl	8000d8c <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e6:	f7ff fa51 	bl	8000d8c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1b3      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f8:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80018fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ef      	bne.n	80018e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80a6 	beq.w	8001a60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001918:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10d      	bne.n	8001940 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001924:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 800192a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192e:	6593      	str	r3, [r2, #88]	; 0x58
 8001930:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193c:	2301      	movs	r3, #1
 800193e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001940:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <HAL_RCC_OscConfig+0x57c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d118      	bne.n	800197e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800194c:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <HAL_RCC_OscConfig+0x57c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a3a      	ldr	r2, [pc, #232]	; (8001a3c <HAL_RCC_OscConfig+0x57c>)
 8001952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001956:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001958:	f7ff fa18 	bl	8000d8c <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001960:	f7ff fa14 	bl	8000d8c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e176      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_RCC_OscConfig+0x57c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <HAL_RCC_OscConfig+0x4d8>
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	4a2a      	ldr	r2, [pc, #168]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001996:	e024      	b.n	80019e2 <HAL_RCC_OscConfig+0x522>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b05      	cmp	r3, #5
 800199e:	d110      	bne.n	80019c2 <HAL_RCC_OscConfig+0x502>
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b6:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c0:	e00f      	b.n	80019e2 <HAL_RCC_OscConfig+0x522>
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80019c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80019ca:	f023 0301 	bic.w	r3, r3, #1
 80019ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d8:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 80019da:	f023 0304 	bic.w	r3, r3, #4
 80019de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d016      	beq.n	8001a18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff f9cf 	bl	8000d8c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff f9cb 	bl	8000d8c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e12b      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x578>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0ed      	beq.n	80019f2 <HAL_RCC_OscConfig+0x532>
 8001a16:	e01a      	b.n	8001a4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff f9b8 	bl	8000d8c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a1e:	e00f      	b.n	8001a40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff f9b4 	bl	8000d8c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d906      	bls.n	8001a40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e114      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a40:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1e8      	bne.n	8001a20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a4e:	7ffb      	ldrb	r3, [r7, #31]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a54:	4b84      	ldr	r3, [pc, #528]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	4a83      	ldr	r2, [pc, #524]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80fa 	beq.w	8001c5e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	f040 80d0 	bne.w	8001c14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a74:	4b7c      	ldr	r3, [pc, #496]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 0203 	and.w	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d130      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	3b01      	subs	r3, #1
 8001a94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d127      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d11f      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ab4:	2a07      	cmp	r2, #7
 8001ab6:	bf14      	ite	ne
 8001ab8:	2201      	movne	r2, #1
 8001aba:	2200      	moveq	r2, #0
 8001abc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d113      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d06e      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d069      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001af0:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001afc:	4b5a      	ldr	r3, [pc, #360]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0a9      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a55      	ldr	r2, [pc, #340]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b18:	f7ff f938 	bl	8000d8c <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f934 	bl	8000d8c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e096      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b32:	4b4d      	ldr	r3, [pc, #308]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCC_OscConfig+0x7ac>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b4e:	3a01      	subs	r2, #1
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b58:	0212      	lsls	r2, r2, #8
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b60:	0852      	lsrs	r2, r2, #1
 8001b62:	3a01      	subs	r2, #1
 8001b64:	0552      	lsls	r2, r2, #21
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b6c:	0852      	lsrs	r2, r2, #1
 8001b6e:	3a01      	subs	r2, #1
 8001b70:	0652      	lsls	r2, r2, #25
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b78:	0912      	lsrs	r2, r2, #4
 8001b7a:	0452      	lsls	r2, r2, #17
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	493a      	ldr	r1, [pc, #232]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a37      	ldr	r2, [pc, #220]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b90:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b9c:	f7ff f8f6 	bl	8000d8c <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f8f2 	bl	8000d8c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e054      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc2:	e04c      	b.n	8001c5e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e04b      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d144      	bne.n	8001c5e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bec:	f7ff f8ce 	bl	8000d8c <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f8ca 	bl	8000d8c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e02c      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x734>
 8001c12:	e024      	b.n	8001c5e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d01f      	beq.n	8001c5a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f8b1 	bl	8000d8c <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7ff f8ad 	bl	8000d8c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e00f      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	4905      	ldr	r1, [pc, #20]	; (8001c68 <HAL_RCC_OscConfig+0x7a8>)
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <HAL_RCC_OscConfig+0x7b0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	60cb      	str	r3, [r1, #12]
 8001c58:	e001      	b.n	8001c5e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	f99d808c 	.word	0xf99d808c
 8001c70:	feeefffc 	.word	0xfeeefffc

08001c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0e7      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c88:	4b75      	ldr	r3, [pc, #468]	; (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d910      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b72      	ldr	r3, [pc, #456]	; (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 0207 	bic.w	r2, r3, #7
 8001c9e:	4970      	ldr	r1, [pc, #448]	; (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b6e      	ldr	r3, [pc, #440]	; (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0cf      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d908      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd4:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4960      	ldr	r1, [pc, #384]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d04c      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	4b5a      	ldr	r3, [pc, #360]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d121      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0a6      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d12:	4b54      	ldr	r3, [pc, #336]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d115      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e09a      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d2a:	4b4e      	ldr	r3, [pc, #312]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e08e      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e086      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4a:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f023 0203 	bic.w	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4943      	ldr	r1, [pc, #268]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d5c:	f7ff f816 	bl	8000d8c <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7ff f812 	bl	8000d8c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e06e      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 020c 	and.w	r2, r3, #12
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d1eb      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d010      	beq.n	8001dba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d208      	bcs.n	8001dba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	492b      	ldr	r1, [pc, #172]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d210      	bcs.n	8001dea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 0207 	bic.w	r2, r3, #7
 8001dd0:	4923      	ldr	r1, [pc, #140]	; (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e036      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df6:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4918      	ldr	r1, [pc, #96]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4910      	ldr	r1, [pc, #64]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e28:	f000 f824 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	490b      	ldr	r1, [pc, #44]	; (8001e68 <HAL_RCC_ClockConfig+0x1f4>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_RCC_ClockConfig+0x1f8>)
 8001e46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1fc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe ff4d 	bl	8000cec <HAL_InitTick>
 8001e52:	4603      	mov	r3, r0
 8001e54:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e56:	7afb      	ldrb	r3, [r7, #11]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40022000 	.word	0x40022000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08003408 	.word	0x08003408
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e82:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d121      	bne.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d11e      	bne.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ea8:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eb4:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e005      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ed0:	4a2b      	ldr	r2, [pc, #172]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10d      	bne.n	8001efc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d102      	bne.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	e004      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001efa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d134      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d003      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0xac>
 8001f18:	e005      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f1c:	617b      	str	r3, [r7, #20]
      break;
 8001f1e:	e005      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f22:	617b      	str	r3, [r7, #20]
      break;
 8001f24:	e002      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	617b      	str	r3, [r7, #20]
      break;
 8001f2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	3301      	adds	r3, #1
 8001f38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	fb02 f203 	mul.w	r2, r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	0e5b      	lsrs	r3, r3, #25
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08003418 	.word	0x08003418
 8001f84:	00f42400 	.word	0x00f42400
 8001f88:	007a1200 	.word	0x007a1200

08001f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fa4:	f7ff fa28 	bl	80013f8 <HAL_PWREx_GetVoltageRange>
 8001fa8:	6178      	str	r0, [r7, #20]
 8001faa:	e014      	b.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b25      	ldr	r3, [pc, #148]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	4a24      	ldr	r2, [pc, #144]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fc4:	f7ff fa18 	bl	80013f8 <HAL_PWREx_GetVoltageRange>
 8001fc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fdc:	d10b      	bne.n	8001ff6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d919      	bls.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2ba0      	cmp	r3, #160	; 0xa0
 8001fe8:	d902      	bls.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fea:	2302      	movs	r3, #2
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	e013      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	e010      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b80      	cmp	r3, #128	; 0x80
 8001ffa:	d902      	bls.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	e00a      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b80      	cmp	r3, #128	; 0x80
 8002006:	d102      	bne.n	800200e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002008:	2302      	movs	r3, #2
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e004      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b70      	cmp	r3, #112	; 0x70
 8002012:	d101      	bne.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002014:	2301      	movs	r3, #1
 8002016:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 0207 	bic.w	r2, r3, #7
 8002020:	4909      	ldr	r1, [pc, #36]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	40022000 	.word	0x40022000

0800204c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e049      	b.n	80020f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fc4e 	bl	8000914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3304      	adds	r3, #4
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f000 fab6 	bl	80025fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d001      	beq.n	8002114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e04f      	b.n	80021b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a23      	ldr	r2, [pc, #140]	; (80021c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01d      	beq.n	8002172 <HAL_TIM_Base_Start_IT+0x76>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213e:	d018      	beq.n	8002172 <HAL_TIM_Base_Start_IT+0x76>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1f      	ldr	r2, [pc, #124]	; (80021c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <HAL_TIM_Base_Start_IT+0x76>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00e      	beq.n	8002172 <HAL_TIM_Base_Start_IT+0x76>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_TIM_Base_Start_IT+0xd0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d009      	beq.n	8002172 <HAL_TIM_Base_Start_IT+0x76>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d004      	beq.n	8002172 <HAL_TIM_Base_Start_IT+0x76>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a19      	ldr	r2, [pc, #100]	; (80021d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d115      	bne.n	800219e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800217a:	4013      	ands	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b06      	cmp	r3, #6
 8002182:	d015      	beq.n	80021b0 <HAL_TIM_Base_Start_IT+0xb4>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218a:	d011      	beq.n	80021b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219c:	e008      	b.n	80021b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e000      	b.n	80021b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40000800 	.word	0x40000800
 80021cc:	40000c00 	.word	0x40000c00
 80021d0:	40013400 	.word	0x40013400
 80021d4:	40014000 	.word	0x40014000
 80021d8:	00010007 	.word	0x00010007

080021dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d11b      	bne.n	8002238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0202 	mvn.w	r2, #2
 8002208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f9ce 	bl	80025c0 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f9c0 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f9d1 	bl	80025d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b04      	cmp	r3, #4
 8002244:	d122      	bne.n	800228c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b04      	cmp	r3, #4
 8002252:	d11b      	bne.n	800228c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0204 	mvn.w	r2, #4
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9a4 	bl	80025c0 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f996 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f9a7 	bl	80025d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b08      	cmp	r3, #8
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0208 	mvn.w	r2, #8
 80022b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2204      	movs	r2, #4
 80022b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f97a 	bl	80025c0 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f96c 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f97d 	bl	80025d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0210 	mvn.w	r2, #16
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2208      	movs	r2, #8
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f950 	bl	80025c0 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f942 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f953 	bl	80025d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10e      	bne.n	8002360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0201 	mvn.w	r2, #1
 8002358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fa86 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	2b80      	cmp	r3, #128	; 0x80
 800236c:	d10e      	bne.n	800238c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d107      	bne.n	800238c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fafe 	bl	8002988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239a:	d10e      	bne.n	80023ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b80      	cmp	r3, #128	; 0x80
 80023a8:	d107      	bne.n	80023ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 faf1 	bl	800299c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d10e      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	d107      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f901 	bl	80025e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d10e      	bne.n	8002412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d107      	bne.n	8002412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f06f 0220 	mvn.w	r2, #32
 800240a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fab1 	bl	8002974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_TIM_ConfigClockSource+0x1c>
 8002432:	2302      	movs	r3, #2
 8002434:	e0b6      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x18a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002458:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002460:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002472:	d03e      	beq.n	80024f2 <HAL_TIM_ConfigClockSource+0xd8>
 8002474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002478:	f200 8087 	bhi.w	800258a <HAL_TIM_ConfigClockSource+0x170>
 800247c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002480:	f000 8086 	beq.w	8002590 <HAL_TIM_ConfigClockSource+0x176>
 8002484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002488:	d87f      	bhi.n	800258a <HAL_TIM_ConfigClockSource+0x170>
 800248a:	2b70      	cmp	r3, #112	; 0x70
 800248c:	d01a      	beq.n	80024c4 <HAL_TIM_ConfigClockSource+0xaa>
 800248e:	2b70      	cmp	r3, #112	; 0x70
 8002490:	d87b      	bhi.n	800258a <HAL_TIM_ConfigClockSource+0x170>
 8002492:	2b60      	cmp	r3, #96	; 0x60
 8002494:	d050      	beq.n	8002538 <HAL_TIM_ConfigClockSource+0x11e>
 8002496:	2b60      	cmp	r3, #96	; 0x60
 8002498:	d877      	bhi.n	800258a <HAL_TIM_ConfigClockSource+0x170>
 800249a:	2b50      	cmp	r3, #80	; 0x50
 800249c:	d03c      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0xfe>
 800249e:	2b50      	cmp	r3, #80	; 0x50
 80024a0:	d873      	bhi.n	800258a <HAL_TIM_ConfigClockSource+0x170>
 80024a2:	2b40      	cmp	r3, #64	; 0x40
 80024a4:	d058      	beq.n	8002558 <HAL_TIM_ConfigClockSource+0x13e>
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d86f      	bhi.n	800258a <HAL_TIM_ConfigClockSource+0x170>
 80024aa:	2b30      	cmp	r3, #48	; 0x30
 80024ac:	d064      	beq.n	8002578 <HAL_TIM_ConfigClockSource+0x15e>
 80024ae:	2b30      	cmp	r3, #48	; 0x30
 80024b0:	d86b      	bhi.n	800258a <HAL_TIM_ConfigClockSource+0x170>
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d060      	beq.n	8002578 <HAL_TIM_ConfigClockSource+0x15e>
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d867      	bhi.n	800258a <HAL_TIM_ConfigClockSource+0x170>
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d05c      	beq.n	8002578 <HAL_TIM_ConfigClockSource+0x15e>
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d05a      	beq.n	8002578 <HAL_TIM_ConfigClockSource+0x15e>
 80024c2:	e062      	b.n	800258a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f000 f9a6 	bl	8002824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	609a      	str	r2, [r3, #8]
      break;
 80024f0:	e04f      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6899      	ldr	r1, [r3, #8]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f000 f98f 	bl	8002824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002514:	609a      	str	r2, [r3, #8]
      break;
 8002516:	e03c      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	461a      	mov	r2, r3
 8002526:	f000 f903 	bl	8002730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2150      	movs	r1, #80	; 0x50
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f95c 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 8002536:	e02c      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	461a      	mov	r2, r3
 8002546:	f000 f922 	bl	800278e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2160      	movs	r1, #96	; 0x60
 8002550:	4618      	mov	r0, r3
 8002552:	f000 f94c 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 8002556:	e01c      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	461a      	mov	r2, r3
 8002566:	f000 f8e3 	bl	8002730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2140      	movs	r1, #64	; 0x40
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f93c 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 8002576:	e00c      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f000 f933 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 8002588:	e003      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
      break;
 800258e:	e000      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002590:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a40      	ldr	r2, [pc, #256]	; (8002710 <TIM_Base_SetConfig+0x114>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <TIM_Base_SetConfig+0x40>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261a:	d00f      	beq.n	800263c <TIM_Base_SetConfig+0x40>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a3d      	ldr	r2, [pc, #244]	; (8002714 <TIM_Base_SetConfig+0x118>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00b      	beq.n	800263c <TIM_Base_SetConfig+0x40>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a3c      	ldr	r2, [pc, #240]	; (8002718 <TIM_Base_SetConfig+0x11c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d007      	beq.n	800263c <TIM_Base_SetConfig+0x40>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a3b      	ldr	r2, [pc, #236]	; (800271c <TIM_Base_SetConfig+0x120>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d003      	beq.n	800263c <TIM_Base_SetConfig+0x40>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a3a      	ldr	r2, [pc, #232]	; (8002720 <TIM_Base_SetConfig+0x124>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d108      	bne.n	800264e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a2f      	ldr	r2, [pc, #188]	; (8002710 <TIM_Base_SetConfig+0x114>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01f      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265c:	d01b      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a2c      	ldr	r2, [pc, #176]	; (8002714 <TIM_Base_SetConfig+0x118>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d017      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a2b      	ldr	r2, [pc, #172]	; (8002718 <TIM_Base_SetConfig+0x11c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a2a      	ldr	r2, [pc, #168]	; (800271c <TIM_Base_SetConfig+0x120>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00f      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a29      	ldr	r2, [pc, #164]	; (8002720 <TIM_Base_SetConfig+0x124>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00b      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a28      	ldr	r2, [pc, #160]	; (8002724 <TIM_Base_SetConfig+0x128>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a27      	ldr	r2, [pc, #156]	; (8002728 <TIM_Base_SetConfig+0x12c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a26      	ldr	r2, [pc, #152]	; (800272c <TIM_Base_SetConfig+0x130>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d108      	bne.n	80026a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a10      	ldr	r2, [pc, #64]	; (8002710 <TIM_Base_SetConfig+0x114>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00f      	beq.n	80026f4 <TIM_Base_SetConfig+0xf8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <TIM_Base_SetConfig+0x124>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d00b      	beq.n	80026f4 <TIM_Base_SetConfig+0xf8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a11      	ldr	r2, [pc, #68]	; (8002724 <TIM_Base_SetConfig+0x128>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d007      	beq.n	80026f4 <TIM_Base_SetConfig+0xf8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <TIM_Base_SetConfig+0x12c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d003      	beq.n	80026f4 <TIM_Base_SetConfig+0xf8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a0f      	ldr	r2, [pc, #60]	; (800272c <TIM_Base_SetConfig+0x130>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d103      	bne.n	80026fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	615a      	str	r2, [r3, #20]
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40000400 	.word	0x40000400
 8002718:	40000800 	.word	0x40000800
 800271c:	40000c00 	.word	0x40000c00
 8002720:	40013400 	.word	0x40013400
 8002724:	40014000 	.word	0x40014000
 8002728:	40014400 	.word	0x40014400
 800272c:	40014800 	.word	0x40014800

08002730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f023 0201 	bic.w	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800275a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f023 030a 	bic.w	r3, r3, #10
 800276c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	621a      	str	r2, [r3, #32]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800278e:	b480      	push	{r7}
 8002790:	b087      	sub	sp, #28
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0210 	bic.w	r2, r3, #16
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	031b      	lsls	r3, r3, #12
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	621a      	str	r2, [r3, #32]
}
 80027e2:	bf00      	nop
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	f043 0307 	orr.w	r3, r3, #7
 8002810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800283e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	021a      	lsls	r2, r3, #8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	431a      	orrs	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4313      	orrs	r3, r2
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002878:	2302      	movs	r3, #2
 800287a:	e068      	b.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a2e      	ldr	r2, [pc, #184]	; (800295c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d004      	beq.n	80028b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a2d      	ldr	r2, [pc, #180]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d108      	bne.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1e      	ldr	r2, [pc, #120]	; (800295c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01d      	beq.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ee:	d018      	beq.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00e      	beq.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a18      	ldr	r2, [pc, #96]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d004      	beq.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10c      	bne.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	4313      	orrs	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40013400 	.word	0x40013400
 8002964:	40000400 	.word	0x40000400
 8002968:	40000800 	.word	0x40000800
 800296c:	40000c00 	.word	0x40000c00
 8002970:	40014000 	.word	0x40014000

08002974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <__errno>:
 80029b0:	4b01      	ldr	r3, [pc, #4]	; (80029b8 <__errno+0x8>)
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	2000000c 	.word	0x2000000c

080029bc <__libc_init_array>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	4d0d      	ldr	r5, [pc, #52]	; (80029f4 <__libc_init_array+0x38>)
 80029c0:	4c0d      	ldr	r4, [pc, #52]	; (80029f8 <__libc_init_array+0x3c>)
 80029c2:	1b64      	subs	r4, r4, r5
 80029c4:	10a4      	asrs	r4, r4, #2
 80029c6:	2600      	movs	r6, #0
 80029c8:	42a6      	cmp	r6, r4
 80029ca:	d109      	bne.n	80029e0 <__libc_init_array+0x24>
 80029cc:	4d0b      	ldr	r5, [pc, #44]	; (80029fc <__libc_init_array+0x40>)
 80029ce:	4c0c      	ldr	r4, [pc, #48]	; (8002a00 <__libc_init_array+0x44>)
 80029d0:	f000 fce6 	bl	80033a0 <_init>
 80029d4:	1b64      	subs	r4, r4, r5
 80029d6:	10a4      	asrs	r4, r4, #2
 80029d8:	2600      	movs	r6, #0
 80029da:	42a6      	cmp	r6, r4
 80029dc:	d105      	bne.n	80029ea <__libc_init_array+0x2e>
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e4:	4798      	blx	r3
 80029e6:	3601      	adds	r6, #1
 80029e8:	e7ee      	b.n	80029c8 <__libc_init_array+0xc>
 80029ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ee:	4798      	blx	r3
 80029f0:	3601      	adds	r6, #1
 80029f2:	e7f2      	b.n	80029da <__libc_init_array+0x1e>
 80029f4:	080034ac 	.word	0x080034ac
 80029f8:	080034ac 	.word	0x080034ac
 80029fc:	080034ac 	.word	0x080034ac
 8002a00:	080034b0 	.word	0x080034b0

08002a04 <memset>:
 8002a04:	4402      	add	r2, r0
 8002a06:	4603      	mov	r3, r0
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <memset+0xa>
 8002a0c:	4770      	bx	lr
 8002a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a12:	e7f9      	b.n	8002a08 <memset+0x4>

08002a14 <_puts_r>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	460e      	mov	r6, r1
 8002a18:	4605      	mov	r5, r0
 8002a1a:	b118      	cbz	r0, 8002a24 <_puts_r+0x10>
 8002a1c:	6983      	ldr	r3, [r0, #24]
 8002a1e:	b90b      	cbnz	r3, 8002a24 <_puts_r+0x10>
 8002a20:	f000 fa48 	bl	8002eb4 <__sinit>
 8002a24:	69ab      	ldr	r3, [r5, #24]
 8002a26:	68ac      	ldr	r4, [r5, #8]
 8002a28:	b913      	cbnz	r3, 8002a30 <_puts_r+0x1c>
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	f000 fa42 	bl	8002eb4 <__sinit>
 8002a30:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <_puts_r+0xd0>)
 8002a32:	429c      	cmp	r4, r3
 8002a34:	d120      	bne.n	8002a78 <_puts_r+0x64>
 8002a36:	686c      	ldr	r4, [r5, #4]
 8002a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a3a:	07db      	lsls	r3, r3, #31
 8002a3c:	d405      	bmi.n	8002a4a <_puts_r+0x36>
 8002a3e:	89a3      	ldrh	r3, [r4, #12]
 8002a40:	0598      	lsls	r0, r3, #22
 8002a42:	d402      	bmi.n	8002a4a <_puts_r+0x36>
 8002a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a46:	f000 fad3 	bl	8002ff0 <__retarget_lock_acquire_recursive>
 8002a4a:	89a3      	ldrh	r3, [r4, #12]
 8002a4c:	0719      	lsls	r1, r3, #28
 8002a4e:	d51d      	bpl.n	8002a8c <_puts_r+0x78>
 8002a50:	6923      	ldr	r3, [r4, #16]
 8002a52:	b1db      	cbz	r3, 8002a8c <_puts_r+0x78>
 8002a54:	3e01      	subs	r6, #1
 8002a56:	68a3      	ldr	r3, [r4, #8]
 8002a58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	60a3      	str	r3, [r4, #8]
 8002a60:	bb39      	cbnz	r1, 8002ab2 <_puts_r+0x9e>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	da38      	bge.n	8002ad8 <_puts_r+0xc4>
 8002a66:	4622      	mov	r2, r4
 8002a68:	210a      	movs	r1, #10
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	f000 f848 	bl	8002b00 <__swbuf_r>
 8002a70:	3001      	adds	r0, #1
 8002a72:	d011      	beq.n	8002a98 <_puts_r+0x84>
 8002a74:	250a      	movs	r5, #10
 8002a76:	e011      	b.n	8002a9c <_puts_r+0x88>
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <_puts_r+0xd4>)
 8002a7a:	429c      	cmp	r4, r3
 8002a7c:	d101      	bne.n	8002a82 <_puts_r+0x6e>
 8002a7e:	68ac      	ldr	r4, [r5, #8]
 8002a80:	e7da      	b.n	8002a38 <_puts_r+0x24>
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <_puts_r+0xd8>)
 8002a84:	429c      	cmp	r4, r3
 8002a86:	bf08      	it	eq
 8002a88:	68ec      	ldreq	r4, [r5, #12]
 8002a8a:	e7d5      	b.n	8002a38 <_puts_r+0x24>
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f000 f888 	bl	8002ba4 <__swsetup_r>
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d0dd      	beq.n	8002a54 <_puts_r+0x40>
 8002a98:	f04f 35ff 	mov.w	r5, #4294967295
 8002a9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a9e:	07da      	lsls	r2, r3, #31
 8002aa0:	d405      	bmi.n	8002aae <_puts_r+0x9a>
 8002aa2:	89a3      	ldrh	r3, [r4, #12]
 8002aa4:	059b      	lsls	r3, r3, #22
 8002aa6:	d402      	bmi.n	8002aae <_puts_r+0x9a>
 8002aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aaa:	f000 faa2 	bl	8002ff2 <__retarget_lock_release_recursive>
 8002aae:	4628      	mov	r0, r5
 8002ab0:	bd70      	pop	{r4, r5, r6, pc}
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da04      	bge.n	8002ac0 <_puts_r+0xac>
 8002ab6:	69a2      	ldr	r2, [r4, #24]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dc06      	bgt.n	8002aca <_puts_r+0xb6>
 8002abc:	290a      	cmp	r1, #10
 8002abe:	d004      	beq.n	8002aca <_puts_r+0xb6>
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	6022      	str	r2, [r4, #0]
 8002ac6:	7019      	strb	r1, [r3, #0]
 8002ac8:	e7c5      	b.n	8002a56 <_puts_r+0x42>
 8002aca:	4622      	mov	r2, r4
 8002acc:	4628      	mov	r0, r5
 8002ace:	f000 f817 	bl	8002b00 <__swbuf_r>
 8002ad2:	3001      	adds	r0, #1
 8002ad4:	d1bf      	bne.n	8002a56 <_puts_r+0x42>
 8002ad6:	e7df      	b.n	8002a98 <_puts_r+0x84>
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	250a      	movs	r5, #10
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	6022      	str	r2, [r4, #0]
 8002ae0:	701d      	strb	r5, [r3, #0]
 8002ae2:	e7db      	b.n	8002a9c <_puts_r+0x88>
 8002ae4:	0800346c 	.word	0x0800346c
 8002ae8:	0800348c 	.word	0x0800348c
 8002aec:	0800344c 	.word	0x0800344c

08002af0 <puts>:
 8002af0:	4b02      	ldr	r3, [pc, #8]	; (8002afc <puts+0xc>)
 8002af2:	4601      	mov	r1, r0
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	f7ff bf8d 	b.w	8002a14 <_puts_r>
 8002afa:	bf00      	nop
 8002afc:	2000000c 	.word	0x2000000c

08002b00 <__swbuf_r>:
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	460e      	mov	r6, r1
 8002b04:	4614      	mov	r4, r2
 8002b06:	4605      	mov	r5, r0
 8002b08:	b118      	cbz	r0, 8002b12 <__swbuf_r+0x12>
 8002b0a:	6983      	ldr	r3, [r0, #24]
 8002b0c:	b90b      	cbnz	r3, 8002b12 <__swbuf_r+0x12>
 8002b0e:	f000 f9d1 	bl	8002eb4 <__sinit>
 8002b12:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <__swbuf_r+0x98>)
 8002b14:	429c      	cmp	r4, r3
 8002b16:	d12b      	bne.n	8002b70 <__swbuf_r+0x70>
 8002b18:	686c      	ldr	r4, [r5, #4]
 8002b1a:	69a3      	ldr	r3, [r4, #24]
 8002b1c:	60a3      	str	r3, [r4, #8]
 8002b1e:	89a3      	ldrh	r3, [r4, #12]
 8002b20:	071a      	lsls	r2, r3, #28
 8002b22:	d52f      	bpl.n	8002b84 <__swbuf_r+0x84>
 8002b24:	6923      	ldr	r3, [r4, #16]
 8002b26:	b36b      	cbz	r3, 8002b84 <__swbuf_r+0x84>
 8002b28:	6923      	ldr	r3, [r4, #16]
 8002b2a:	6820      	ldr	r0, [r4, #0]
 8002b2c:	1ac0      	subs	r0, r0, r3
 8002b2e:	6963      	ldr	r3, [r4, #20]
 8002b30:	b2f6      	uxtb	r6, r6
 8002b32:	4283      	cmp	r3, r0
 8002b34:	4637      	mov	r7, r6
 8002b36:	dc04      	bgt.n	8002b42 <__swbuf_r+0x42>
 8002b38:	4621      	mov	r1, r4
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f000 f926 	bl	8002d8c <_fflush_r>
 8002b40:	bb30      	cbnz	r0, 8002b90 <__swbuf_r+0x90>
 8002b42:	68a3      	ldr	r3, [r4, #8]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60a3      	str	r3, [r4, #8]
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	6022      	str	r2, [r4, #0]
 8002b4e:	701e      	strb	r6, [r3, #0]
 8002b50:	6963      	ldr	r3, [r4, #20]
 8002b52:	3001      	adds	r0, #1
 8002b54:	4283      	cmp	r3, r0
 8002b56:	d004      	beq.n	8002b62 <__swbuf_r+0x62>
 8002b58:	89a3      	ldrh	r3, [r4, #12]
 8002b5a:	07db      	lsls	r3, r3, #31
 8002b5c:	d506      	bpl.n	8002b6c <__swbuf_r+0x6c>
 8002b5e:	2e0a      	cmp	r6, #10
 8002b60:	d104      	bne.n	8002b6c <__swbuf_r+0x6c>
 8002b62:	4621      	mov	r1, r4
 8002b64:	4628      	mov	r0, r5
 8002b66:	f000 f911 	bl	8002d8c <_fflush_r>
 8002b6a:	b988      	cbnz	r0, 8002b90 <__swbuf_r+0x90>
 8002b6c:	4638      	mov	r0, r7
 8002b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <__swbuf_r+0x9c>)
 8002b72:	429c      	cmp	r4, r3
 8002b74:	d101      	bne.n	8002b7a <__swbuf_r+0x7a>
 8002b76:	68ac      	ldr	r4, [r5, #8]
 8002b78:	e7cf      	b.n	8002b1a <__swbuf_r+0x1a>
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <__swbuf_r+0xa0>)
 8002b7c:	429c      	cmp	r4, r3
 8002b7e:	bf08      	it	eq
 8002b80:	68ec      	ldreq	r4, [r5, #12]
 8002b82:	e7ca      	b.n	8002b1a <__swbuf_r+0x1a>
 8002b84:	4621      	mov	r1, r4
 8002b86:	4628      	mov	r0, r5
 8002b88:	f000 f80c 	bl	8002ba4 <__swsetup_r>
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d0cb      	beq.n	8002b28 <__swbuf_r+0x28>
 8002b90:	f04f 37ff 	mov.w	r7, #4294967295
 8002b94:	e7ea      	b.n	8002b6c <__swbuf_r+0x6c>
 8002b96:	bf00      	nop
 8002b98:	0800346c 	.word	0x0800346c
 8002b9c:	0800348c 	.word	0x0800348c
 8002ba0:	0800344c 	.word	0x0800344c

08002ba4 <__swsetup_r>:
 8002ba4:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <__swsetup_r+0xcc>)
 8002ba6:	b570      	push	{r4, r5, r6, lr}
 8002ba8:	681d      	ldr	r5, [r3, #0]
 8002baa:	4606      	mov	r6, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	b125      	cbz	r5, 8002bba <__swsetup_r+0x16>
 8002bb0:	69ab      	ldr	r3, [r5, #24]
 8002bb2:	b913      	cbnz	r3, 8002bba <__swsetup_r+0x16>
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f000 f97d 	bl	8002eb4 <__sinit>
 8002bba:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <__swsetup_r+0xd0>)
 8002bbc:	429c      	cmp	r4, r3
 8002bbe:	d10f      	bne.n	8002be0 <__swsetup_r+0x3c>
 8002bc0:	686c      	ldr	r4, [r5, #4]
 8002bc2:	89a3      	ldrh	r3, [r4, #12]
 8002bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bc8:	0719      	lsls	r1, r3, #28
 8002bca:	d42c      	bmi.n	8002c26 <__swsetup_r+0x82>
 8002bcc:	06dd      	lsls	r5, r3, #27
 8002bce:	d411      	bmi.n	8002bf4 <__swsetup_r+0x50>
 8002bd0:	2309      	movs	r3, #9
 8002bd2:	6033      	str	r3, [r6, #0]
 8002bd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002bd8:	81a3      	strh	r3, [r4, #12]
 8002bda:	f04f 30ff 	mov.w	r0, #4294967295
 8002bde:	e03e      	b.n	8002c5e <__swsetup_r+0xba>
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <__swsetup_r+0xd4>)
 8002be2:	429c      	cmp	r4, r3
 8002be4:	d101      	bne.n	8002bea <__swsetup_r+0x46>
 8002be6:	68ac      	ldr	r4, [r5, #8]
 8002be8:	e7eb      	b.n	8002bc2 <__swsetup_r+0x1e>
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <__swsetup_r+0xd8>)
 8002bec:	429c      	cmp	r4, r3
 8002bee:	bf08      	it	eq
 8002bf0:	68ec      	ldreq	r4, [r5, #12]
 8002bf2:	e7e6      	b.n	8002bc2 <__swsetup_r+0x1e>
 8002bf4:	0758      	lsls	r0, r3, #29
 8002bf6:	d512      	bpl.n	8002c1e <__swsetup_r+0x7a>
 8002bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bfa:	b141      	cbz	r1, 8002c0e <__swsetup_r+0x6a>
 8002bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c00:	4299      	cmp	r1, r3
 8002c02:	d002      	beq.n	8002c0a <__swsetup_r+0x66>
 8002c04:	4630      	mov	r0, r6
 8002c06:	f000 fa59 	bl	80030bc <_free_r>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8002c0e:	89a3      	ldrh	r3, [r4, #12]
 8002c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c14:	81a3      	strh	r3, [r4, #12]
 8002c16:	2300      	movs	r3, #0
 8002c18:	6063      	str	r3, [r4, #4]
 8002c1a:	6923      	ldr	r3, [r4, #16]
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	89a3      	ldrh	r3, [r4, #12]
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	81a3      	strh	r3, [r4, #12]
 8002c26:	6923      	ldr	r3, [r4, #16]
 8002c28:	b94b      	cbnz	r3, 8002c3e <__swsetup_r+0x9a>
 8002c2a:	89a3      	ldrh	r3, [r4, #12]
 8002c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c34:	d003      	beq.n	8002c3e <__swsetup_r+0x9a>
 8002c36:	4621      	mov	r1, r4
 8002c38:	4630      	mov	r0, r6
 8002c3a:	f000 f9ff 	bl	800303c <__smakebuf_r>
 8002c3e:	89a0      	ldrh	r0, [r4, #12]
 8002c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c44:	f010 0301 	ands.w	r3, r0, #1
 8002c48:	d00a      	beq.n	8002c60 <__swsetup_r+0xbc>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60a3      	str	r3, [r4, #8]
 8002c4e:	6963      	ldr	r3, [r4, #20]
 8002c50:	425b      	negs	r3, r3
 8002c52:	61a3      	str	r3, [r4, #24]
 8002c54:	6923      	ldr	r3, [r4, #16]
 8002c56:	b943      	cbnz	r3, 8002c6a <__swsetup_r+0xc6>
 8002c58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c5c:	d1ba      	bne.n	8002bd4 <__swsetup_r+0x30>
 8002c5e:	bd70      	pop	{r4, r5, r6, pc}
 8002c60:	0781      	lsls	r1, r0, #30
 8002c62:	bf58      	it	pl
 8002c64:	6963      	ldrpl	r3, [r4, #20]
 8002c66:	60a3      	str	r3, [r4, #8]
 8002c68:	e7f4      	b.n	8002c54 <__swsetup_r+0xb0>
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	e7f7      	b.n	8002c5e <__swsetup_r+0xba>
 8002c6e:	bf00      	nop
 8002c70:	2000000c 	.word	0x2000000c
 8002c74:	0800346c 	.word	0x0800346c
 8002c78:	0800348c 	.word	0x0800348c
 8002c7c:	0800344c 	.word	0x0800344c

08002c80 <__sflush_r>:
 8002c80:	898a      	ldrh	r2, [r1, #12]
 8002c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c86:	4605      	mov	r5, r0
 8002c88:	0710      	lsls	r0, r2, #28
 8002c8a:	460c      	mov	r4, r1
 8002c8c:	d458      	bmi.n	8002d40 <__sflush_r+0xc0>
 8002c8e:	684b      	ldr	r3, [r1, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	dc05      	bgt.n	8002ca0 <__sflush_r+0x20>
 8002c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	dc02      	bgt.n	8002ca0 <__sflush_r+0x20>
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ca2:	2e00      	cmp	r6, #0
 8002ca4:	d0f9      	beq.n	8002c9a <__sflush_r+0x1a>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cac:	682f      	ldr	r7, [r5, #0]
 8002cae:	602b      	str	r3, [r5, #0]
 8002cb0:	d032      	beq.n	8002d18 <__sflush_r+0x98>
 8002cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	075a      	lsls	r2, r3, #29
 8002cb8:	d505      	bpl.n	8002cc6 <__sflush_r+0x46>
 8002cba:	6863      	ldr	r3, [r4, #4]
 8002cbc:	1ac0      	subs	r0, r0, r3
 8002cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cc0:	b10b      	cbz	r3, 8002cc6 <__sflush_r+0x46>
 8002cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cc4:	1ac0      	subs	r0, r0, r3
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ccc:	6a21      	ldr	r1, [r4, #32]
 8002cce:	4628      	mov	r0, r5
 8002cd0:	47b0      	blx	r6
 8002cd2:	1c43      	adds	r3, r0, #1
 8002cd4:	89a3      	ldrh	r3, [r4, #12]
 8002cd6:	d106      	bne.n	8002ce6 <__sflush_r+0x66>
 8002cd8:	6829      	ldr	r1, [r5, #0]
 8002cda:	291d      	cmp	r1, #29
 8002cdc:	d82c      	bhi.n	8002d38 <__sflush_r+0xb8>
 8002cde:	4a2a      	ldr	r2, [pc, #168]	; (8002d88 <__sflush_r+0x108>)
 8002ce0:	40ca      	lsrs	r2, r1
 8002ce2:	07d6      	lsls	r6, r2, #31
 8002ce4:	d528      	bpl.n	8002d38 <__sflush_r+0xb8>
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	6062      	str	r2, [r4, #4]
 8002cea:	04d9      	lsls	r1, r3, #19
 8002cec:	6922      	ldr	r2, [r4, #16]
 8002cee:	6022      	str	r2, [r4, #0]
 8002cf0:	d504      	bpl.n	8002cfc <__sflush_r+0x7c>
 8002cf2:	1c42      	adds	r2, r0, #1
 8002cf4:	d101      	bne.n	8002cfa <__sflush_r+0x7a>
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	b903      	cbnz	r3, 8002cfc <__sflush_r+0x7c>
 8002cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8002cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cfe:	602f      	str	r7, [r5, #0]
 8002d00:	2900      	cmp	r1, #0
 8002d02:	d0ca      	beq.n	8002c9a <__sflush_r+0x1a>
 8002d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d08:	4299      	cmp	r1, r3
 8002d0a:	d002      	beq.n	8002d12 <__sflush_r+0x92>
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f000 f9d5 	bl	80030bc <_free_r>
 8002d12:	2000      	movs	r0, #0
 8002d14:	6360      	str	r0, [r4, #52]	; 0x34
 8002d16:	e7c1      	b.n	8002c9c <__sflush_r+0x1c>
 8002d18:	6a21      	ldr	r1, [r4, #32]
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	47b0      	blx	r6
 8002d20:	1c41      	adds	r1, r0, #1
 8002d22:	d1c7      	bne.n	8002cb4 <__sflush_r+0x34>
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0c4      	beq.n	8002cb4 <__sflush_r+0x34>
 8002d2a:	2b1d      	cmp	r3, #29
 8002d2c:	d001      	beq.n	8002d32 <__sflush_r+0xb2>
 8002d2e:	2b16      	cmp	r3, #22
 8002d30:	d101      	bne.n	8002d36 <__sflush_r+0xb6>
 8002d32:	602f      	str	r7, [r5, #0]
 8002d34:	e7b1      	b.n	8002c9a <__sflush_r+0x1a>
 8002d36:	89a3      	ldrh	r3, [r4, #12]
 8002d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d3c:	81a3      	strh	r3, [r4, #12]
 8002d3e:	e7ad      	b.n	8002c9c <__sflush_r+0x1c>
 8002d40:	690f      	ldr	r7, [r1, #16]
 8002d42:	2f00      	cmp	r7, #0
 8002d44:	d0a9      	beq.n	8002c9a <__sflush_r+0x1a>
 8002d46:	0793      	lsls	r3, r2, #30
 8002d48:	680e      	ldr	r6, [r1, #0]
 8002d4a:	bf08      	it	eq
 8002d4c:	694b      	ldreq	r3, [r1, #20]
 8002d4e:	600f      	str	r7, [r1, #0]
 8002d50:	bf18      	it	ne
 8002d52:	2300      	movne	r3, #0
 8002d54:	eba6 0807 	sub.w	r8, r6, r7
 8002d58:	608b      	str	r3, [r1, #8]
 8002d5a:	f1b8 0f00 	cmp.w	r8, #0
 8002d5e:	dd9c      	ble.n	8002c9a <__sflush_r+0x1a>
 8002d60:	6a21      	ldr	r1, [r4, #32]
 8002d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d64:	4643      	mov	r3, r8
 8002d66:	463a      	mov	r2, r7
 8002d68:	4628      	mov	r0, r5
 8002d6a:	47b0      	blx	r6
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	dc06      	bgt.n	8002d7e <__sflush_r+0xfe>
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d76:	81a3      	strh	r3, [r4, #12]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	e78e      	b.n	8002c9c <__sflush_r+0x1c>
 8002d7e:	4407      	add	r7, r0
 8002d80:	eba8 0800 	sub.w	r8, r8, r0
 8002d84:	e7e9      	b.n	8002d5a <__sflush_r+0xda>
 8002d86:	bf00      	nop
 8002d88:	20400001 	.word	0x20400001

08002d8c <_fflush_r>:
 8002d8c:	b538      	push	{r3, r4, r5, lr}
 8002d8e:	690b      	ldr	r3, [r1, #16]
 8002d90:	4605      	mov	r5, r0
 8002d92:	460c      	mov	r4, r1
 8002d94:	b913      	cbnz	r3, 8002d9c <_fflush_r+0x10>
 8002d96:	2500      	movs	r5, #0
 8002d98:	4628      	mov	r0, r5
 8002d9a:	bd38      	pop	{r3, r4, r5, pc}
 8002d9c:	b118      	cbz	r0, 8002da6 <_fflush_r+0x1a>
 8002d9e:	6983      	ldr	r3, [r0, #24]
 8002da0:	b90b      	cbnz	r3, 8002da6 <_fflush_r+0x1a>
 8002da2:	f000 f887 	bl	8002eb4 <__sinit>
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <_fflush_r+0x6c>)
 8002da8:	429c      	cmp	r4, r3
 8002daa:	d11b      	bne.n	8002de4 <_fflush_r+0x58>
 8002dac:	686c      	ldr	r4, [r5, #4]
 8002dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0ef      	beq.n	8002d96 <_fflush_r+0xa>
 8002db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002db8:	07d0      	lsls	r0, r2, #31
 8002dba:	d404      	bmi.n	8002dc6 <_fflush_r+0x3a>
 8002dbc:	0599      	lsls	r1, r3, #22
 8002dbe:	d402      	bmi.n	8002dc6 <_fflush_r+0x3a>
 8002dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dc2:	f000 f915 	bl	8002ff0 <__retarget_lock_acquire_recursive>
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	4621      	mov	r1, r4
 8002dca:	f7ff ff59 	bl	8002c80 <__sflush_r>
 8002dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dd0:	07da      	lsls	r2, r3, #31
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	d4e0      	bmi.n	8002d98 <_fflush_r+0xc>
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	059b      	lsls	r3, r3, #22
 8002dda:	d4dd      	bmi.n	8002d98 <_fflush_r+0xc>
 8002ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dde:	f000 f908 	bl	8002ff2 <__retarget_lock_release_recursive>
 8002de2:	e7d9      	b.n	8002d98 <_fflush_r+0xc>
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <_fflush_r+0x70>)
 8002de6:	429c      	cmp	r4, r3
 8002de8:	d101      	bne.n	8002dee <_fflush_r+0x62>
 8002dea:	68ac      	ldr	r4, [r5, #8]
 8002dec:	e7df      	b.n	8002dae <_fflush_r+0x22>
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <_fflush_r+0x74>)
 8002df0:	429c      	cmp	r4, r3
 8002df2:	bf08      	it	eq
 8002df4:	68ec      	ldreq	r4, [r5, #12]
 8002df6:	e7da      	b.n	8002dae <_fflush_r+0x22>
 8002df8:	0800346c 	.word	0x0800346c
 8002dfc:	0800348c 	.word	0x0800348c
 8002e00:	0800344c 	.word	0x0800344c

08002e04 <std>:
 8002e04:	2300      	movs	r3, #0
 8002e06:	b510      	push	{r4, lr}
 8002e08:	4604      	mov	r4, r0
 8002e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8002e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e12:	6083      	str	r3, [r0, #8]
 8002e14:	8181      	strh	r1, [r0, #12]
 8002e16:	6643      	str	r3, [r0, #100]	; 0x64
 8002e18:	81c2      	strh	r2, [r0, #14]
 8002e1a:	6183      	str	r3, [r0, #24]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	2208      	movs	r2, #8
 8002e20:	305c      	adds	r0, #92	; 0x5c
 8002e22:	f7ff fdef 	bl	8002a04 <memset>
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <std+0x38>)
 8002e28:	6263      	str	r3, [r4, #36]	; 0x24
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <std+0x3c>)
 8002e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <std+0x40>)
 8002e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <std+0x44>)
 8002e34:	6224      	str	r4, [r4, #32]
 8002e36:	6323      	str	r3, [r4, #48]	; 0x30
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	bf00      	nop
 8002e3c:	08003231 	.word	0x08003231
 8002e40:	08003253 	.word	0x08003253
 8002e44:	0800328b 	.word	0x0800328b
 8002e48:	080032af 	.word	0x080032af

08002e4c <_cleanup_r>:
 8002e4c:	4901      	ldr	r1, [pc, #4]	; (8002e54 <_cleanup_r+0x8>)
 8002e4e:	f000 b8af 	b.w	8002fb0 <_fwalk_reent>
 8002e52:	bf00      	nop
 8002e54:	08002d8d 	.word	0x08002d8d

08002e58 <__sfmoreglue>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	1e4a      	subs	r2, r1, #1
 8002e5c:	2568      	movs	r5, #104	; 0x68
 8002e5e:	4355      	muls	r5, r2
 8002e60:	460e      	mov	r6, r1
 8002e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e66:	f000 f979 	bl	800315c <_malloc_r>
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	b140      	cbz	r0, 8002e80 <__sfmoreglue+0x28>
 8002e6e:	2100      	movs	r1, #0
 8002e70:	e9c0 1600 	strd	r1, r6, [r0]
 8002e74:	300c      	adds	r0, #12
 8002e76:	60a0      	str	r0, [r4, #8]
 8002e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e7c:	f7ff fdc2 	bl	8002a04 <memset>
 8002e80:	4620      	mov	r0, r4
 8002e82:	bd70      	pop	{r4, r5, r6, pc}

08002e84 <__sfp_lock_acquire>:
 8002e84:	4801      	ldr	r0, [pc, #4]	; (8002e8c <__sfp_lock_acquire+0x8>)
 8002e86:	f000 b8b3 	b.w	8002ff0 <__retarget_lock_acquire_recursive>
 8002e8a:	bf00      	nop
 8002e8c:	2000013c 	.word	0x2000013c

08002e90 <__sfp_lock_release>:
 8002e90:	4801      	ldr	r0, [pc, #4]	; (8002e98 <__sfp_lock_release+0x8>)
 8002e92:	f000 b8ae 	b.w	8002ff2 <__retarget_lock_release_recursive>
 8002e96:	bf00      	nop
 8002e98:	2000013c 	.word	0x2000013c

08002e9c <__sinit_lock_acquire>:
 8002e9c:	4801      	ldr	r0, [pc, #4]	; (8002ea4 <__sinit_lock_acquire+0x8>)
 8002e9e:	f000 b8a7 	b.w	8002ff0 <__retarget_lock_acquire_recursive>
 8002ea2:	bf00      	nop
 8002ea4:	20000137 	.word	0x20000137

08002ea8 <__sinit_lock_release>:
 8002ea8:	4801      	ldr	r0, [pc, #4]	; (8002eb0 <__sinit_lock_release+0x8>)
 8002eaa:	f000 b8a2 	b.w	8002ff2 <__retarget_lock_release_recursive>
 8002eae:	bf00      	nop
 8002eb0:	20000137 	.word	0x20000137

08002eb4 <__sinit>:
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	f7ff fff0 	bl	8002e9c <__sinit_lock_acquire>
 8002ebc:	69a3      	ldr	r3, [r4, #24]
 8002ebe:	b11b      	cbz	r3, 8002ec8 <__sinit+0x14>
 8002ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ec4:	f7ff bff0 	b.w	8002ea8 <__sinit_lock_release>
 8002ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <__sinit+0x68>)
 8002ed0:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <__sinit+0x6c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8002ed6:	42a3      	cmp	r3, r4
 8002ed8:	bf04      	itt	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	61a3      	streq	r3, [r4, #24]
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f000 f820 	bl	8002f24 <__sfp>
 8002ee4:	6060      	str	r0, [r4, #4]
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f000 f81c 	bl	8002f24 <__sfp>
 8002eec:	60a0      	str	r0, [r4, #8]
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f000 f818 	bl	8002f24 <__sfp>
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60e0      	str	r0, [r4, #12]
 8002ef8:	2104      	movs	r1, #4
 8002efa:	6860      	ldr	r0, [r4, #4]
 8002efc:	f7ff ff82 	bl	8002e04 <std>
 8002f00:	68a0      	ldr	r0, [r4, #8]
 8002f02:	2201      	movs	r2, #1
 8002f04:	2109      	movs	r1, #9
 8002f06:	f7ff ff7d 	bl	8002e04 <std>
 8002f0a:	68e0      	ldr	r0, [r4, #12]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	2112      	movs	r1, #18
 8002f10:	f7ff ff78 	bl	8002e04 <std>
 8002f14:	2301      	movs	r3, #1
 8002f16:	61a3      	str	r3, [r4, #24]
 8002f18:	e7d2      	b.n	8002ec0 <__sinit+0xc>
 8002f1a:	bf00      	nop
 8002f1c:	08003448 	.word	0x08003448
 8002f20:	08002e4d 	.word	0x08002e4d

08002f24 <__sfp>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	4607      	mov	r7, r0
 8002f28:	f7ff ffac 	bl	8002e84 <__sfp_lock_acquire>
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <__sfp+0x84>)
 8002f2e:	681e      	ldr	r6, [r3, #0]
 8002f30:	69b3      	ldr	r3, [r6, #24]
 8002f32:	b913      	cbnz	r3, 8002f3a <__sfp+0x16>
 8002f34:	4630      	mov	r0, r6
 8002f36:	f7ff ffbd 	bl	8002eb4 <__sinit>
 8002f3a:	3648      	adds	r6, #72	; 0x48
 8002f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	d503      	bpl.n	8002f4c <__sfp+0x28>
 8002f44:	6833      	ldr	r3, [r6, #0]
 8002f46:	b30b      	cbz	r3, 8002f8c <__sfp+0x68>
 8002f48:	6836      	ldr	r6, [r6, #0]
 8002f4a:	e7f7      	b.n	8002f3c <__sfp+0x18>
 8002f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f50:	b9d5      	cbnz	r5, 8002f88 <__sfp+0x64>
 8002f52:	4b16      	ldr	r3, [pc, #88]	; (8002fac <__sfp+0x88>)
 8002f54:	60e3      	str	r3, [r4, #12]
 8002f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f5a:	6665      	str	r5, [r4, #100]	; 0x64
 8002f5c:	f000 f847 	bl	8002fee <__retarget_lock_init_recursive>
 8002f60:	f7ff ff96 	bl	8002e90 <__sfp_lock_release>
 8002f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f6c:	6025      	str	r5, [r4, #0]
 8002f6e:	61a5      	str	r5, [r4, #24]
 8002f70:	2208      	movs	r2, #8
 8002f72:	4629      	mov	r1, r5
 8002f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f78:	f7ff fd44 	bl	8002a04 <memset>
 8002f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f84:	4620      	mov	r0, r4
 8002f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f88:	3468      	adds	r4, #104	; 0x68
 8002f8a:	e7d9      	b.n	8002f40 <__sfp+0x1c>
 8002f8c:	2104      	movs	r1, #4
 8002f8e:	4638      	mov	r0, r7
 8002f90:	f7ff ff62 	bl	8002e58 <__sfmoreglue>
 8002f94:	4604      	mov	r4, r0
 8002f96:	6030      	str	r0, [r6, #0]
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	d1d5      	bne.n	8002f48 <__sfp+0x24>
 8002f9c:	f7ff ff78 	bl	8002e90 <__sfp_lock_release>
 8002fa0:	230c      	movs	r3, #12
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	e7ee      	b.n	8002f84 <__sfp+0x60>
 8002fa6:	bf00      	nop
 8002fa8:	08003448 	.word	0x08003448
 8002fac:	ffff0001 	.word	0xffff0001

08002fb0 <_fwalk_reent>:
 8002fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fb4:	4606      	mov	r6, r0
 8002fb6:	4688      	mov	r8, r1
 8002fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002fbc:	2700      	movs	r7, #0
 8002fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8002fc6:	d505      	bpl.n	8002fd4 <_fwalk_reent+0x24>
 8002fc8:	6824      	ldr	r4, [r4, #0]
 8002fca:	2c00      	cmp	r4, #0
 8002fcc:	d1f7      	bne.n	8002fbe <_fwalk_reent+0xe>
 8002fce:	4638      	mov	r0, r7
 8002fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fd4:	89ab      	ldrh	r3, [r5, #12]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d907      	bls.n	8002fea <_fwalk_reent+0x3a>
 8002fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	d003      	beq.n	8002fea <_fwalk_reent+0x3a>
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	47c0      	blx	r8
 8002fe8:	4307      	orrs	r7, r0
 8002fea:	3568      	adds	r5, #104	; 0x68
 8002fec:	e7e9      	b.n	8002fc2 <_fwalk_reent+0x12>

08002fee <__retarget_lock_init_recursive>:
 8002fee:	4770      	bx	lr

08002ff0 <__retarget_lock_acquire_recursive>:
 8002ff0:	4770      	bx	lr

08002ff2 <__retarget_lock_release_recursive>:
 8002ff2:	4770      	bx	lr

08002ff4 <__swhatbuf_r>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	460e      	mov	r6, r1
 8002ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	b096      	sub	sp, #88	; 0x58
 8003000:	4614      	mov	r4, r2
 8003002:	461d      	mov	r5, r3
 8003004:	da07      	bge.n	8003016 <__swhatbuf_r+0x22>
 8003006:	2300      	movs	r3, #0
 8003008:	602b      	str	r3, [r5, #0]
 800300a:	89b3      	ldrh	r3, [r6, #12]
 800300c:	061a      	lsls	r2, r3, #24
 800300e:	d410      	bmi.n	8003032 <__swhatbuf_r+0x3e>
 8003010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003014:	e00e      	b.n	8003034 <__swhatbuf_r+0x40>
 8003016:	466a      	mov	r2, sp
 8003018:	f000 f970 	bl	80032fc <_fstat_r>
 800301c:	2800      	cmp	r0, #0
 800301e:	dbf2      	blt.n	8003006 <__swhatbuf_r+0x12>
 8003020:	9a01      	ldr	r2, [sp, #4]
 8003022:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003026:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800302a:	425a      	negs	r2, r3
 800302c:	415a      	adcs	r2, r3
 800302e:	602a      	str	r2, [r5, #0]
 8003030:	e7ee      	b.n	8003010 <__swhatbuf_r+0x1c>
 8003032:	2340      	movs	r3, #64	; 0x40
 8003034:	2000      	movs	r0, #0
 8003036:	6023      	str	r3, [r4, #0]
 8003038:	b016      	add	sp, #88	; 0x58
 800303a:	bd70      	pop	{r4, r5, r6, pc}

0800303c <__smakebuf_r>:
 800303c:	898b      	ldrh	r3, [r1, #12]
 800303e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003040:	079d      	lsls	r5, r3, #30
 8003042:	4606      	mov	r6, r0
 8003044:	460c      	mov	r4, r1
 8003046:	d507      	bpl.n	8003058 <__smakebuf_r+0x1c>
 8003048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800304c:	6023      	str	r3, [r4, #0]
 800304e:	6123      	str	r3, [r4, #16]
 8003050:	2301      	movs	r3, #1
 8003052:	6163      	str	r3, [r4, #20]
 8003054:	b002      	add	sp, #8
 8003056:	bd70      	pop	{r4, r5, r6, pc}
 8003058:	ab01      	add	r3, sp, #4
 800305a:	466a      	mov	r2, sp
 800305c:	f7ff ffca 	bl	8002ff4 <__swhatbuf_r>
 8003060:	9900      	ldr	r1, [sp, #0]
 8003062:	4605      	mov	r5, r0
 8003064:	4630      	mov	r0, r6
 8003066:	f000 f879 	bl	800315c <_malloc_r>
 800306a:	b948      	cbnz	r0, 8003080 <__smakebuf_r+0x44>
 800306c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003070:	059a      	lsls	r2, r3, #22
 8003072:	d4ef      	bmi.n	8003054 <__smakebuf_r+0x18>
 8003074:	f023 0303 	bic.w	r3, r3, #3
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	81a3      	strh	r3, [r4, #12]
 800307e:	e7e3      	b.n	8003048 <__smakebuf_r+0xc>
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <__smakebuf_r+0x7c>)
 8003082:	62b3      	str	r3, [r6, #40]	; 0x28
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	6020      	str	r0, [r4, #0]
 8003088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308c:	81a3      	strh	r3, [r4, #12]
 800308e:	9b00      	ldr	r3, [sp, #0]
 8003090:	6163      	str	r3, [r4, #20]
 8003092:	9b01      	ldr	r3, [sp, #4]
 8003094:	6120      	str	r0, [r4, #16]
 8003096:	b15b      	cbz	r3, 80030b0 <__smakebuf_r+0x74>
 8003098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800309c:	4630      	mov	r0, r6
 800309e:	f000 f93f 	bl	8003320 <_isatty_r>
 80030a2:	b128      	cbz	r0, 80030b0 <__smakebuf_r+0x74>
 80030a4:	89a3      	ldrh	r3, [r4, #12]
 80030a6:	f023 0303 	bic.w	r3, r3, #3
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	81a3      	strh	r3, [r4, #12]
 80030b0:	89a0      	ldrh	r0, [r4, #12]
 80030b2:	4305      	orrs	r5, r0
 80030b4:	81a5      	strh	r5, [r4, #12]
 80030b6:	e7cd      	b.n	8003054 <__smakebuf_r+0x18>
 80030b8:	08002e4d 	.word	0x08002e4d

080030bc <_free_r>:
 80030bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030be:	2900      	cmp	r1, #0
 80030c0:	d048      	beq.n	8003154 <_free_r+0x98>
 80030c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030c6:	9001      	str	r0, [sp, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f1a1 0404 	sub.w	r4, r1, #4
 80030ce:	bfb8      	it	lt
 80030d0:	18e4      	addlt	r4, r4, r3
 80030d2:	f000 f947 	bl	8003364 <__malloc_lock>
 80030d6:	4a20      	ldr	r2, [pc, #128]	; (8003158 <_free_r+0x9c>)
 80030d8:	9801      	ldr	r0, [sp, #4]
 80030da:	6813      	ldr	r3, [r2, #0]
 80030dc:	4615      	mov	r5, r2
 80030de:	b933      	cbnz	r3, 80030ee <_free_r+0x32>
 80030e0:	6063      	str	r3, [r4, #4]
 80030e2:	6014      	str	r4, [r2, #0]
 80030e4:	b003      	add	sp, #12
 80030e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030ea:	f000 b941 	b.w	8003370 <__malloc_unlock>
 80030ee:	42a3      	cmp	r3, r4
 80030f0:	d90b      	bls.n	800310a <_free_r+0x4e>
 80030f2:	6821      	ldr	r1, [r4, #0]
 80030f4:	1862      	adds	r2, r4, r1
 80030f6:	4293      	cmp	r3, r2
 80030f8:	bf04      	itt	eq
 80030fa:	681a      	ldreq	r2, [r3, #0]
 80030fc:	685b      	ldreq	r3, [r3, #4]
 80030fe:	6063      	str	r3, [r4, #4]
 8003100:	bf04      	itt	eq
 8003102:	1852      	addeq	r2, r2, r1
 8003104:	6022      	streq	r2, [r4, #0]
 8003106:	602c      	str	r4, [r5, #0]
 8003108:	e7ec      	b.n	80030e4 <_free_r+0x28>
 800310a:	461a      	mov	r2, r3
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	b10b      	cbz	r3, 8003114 <_free_r+0x58>
 8003110:	42a3      	cmp	r3, r4
 8003112:	d9fa      	bls.n	800310a <_free_r+0x4e>
 8003114:	6811      	ldr	r1, [r2, #0]
 8003116:	1855      	adds	r5, r2, r1
 8003118:	42a5      	cmp	r5, r4
 800311a:	d10b      	bne.n	8003134 <_free_r+0x78>
 800311c:	6824      	ldr	r4, [r4, #0]
 800311e:	4421      	add	r1, r4
 8003120:	1854      	adds	r4, r2, r1
 8003122:	42a3      	cmp	r3, r4
 8003124:	6011      	str	r1, [r2, #0]
 8003126:	d1dd      	bne.n	80030e4 <_free_r+0x28>
 8003128:	681c      	ldr	r4, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	6053      	str	r3, [r2, #4]
 800312e:	4421      	add	r1, r4
 8003130:	6011      	str	r1, [r2, #0]
 8003132:	e7d7      	b.n	80030e4 <_free_r+0x28>
 8003134:	d902      	bls.n	800313c <_free_r+0x80>
 8003136:	230c      	movs	r3, #12
 8003138:	6003      	str	r3, [r0, #0]
 800313a:	e7d3      	b.n	80030e4 <_free_r+0x28>
 800313c:	6825      	ldr	r5, [r4, #0]
 800313e:	1961      	adds	r1, r4, r5
 8003140:	428b      	cmp	r3, r1
 8003142:	bf04      	itt	eq
 8003144:	6819      	ldreq	r1, [r3, #0]
 8003146:	685b      	ldreq	r3, [r3, #4]
 8003148:	6063      	str	r3, [r4, #4]
 800314a:	bf04      	itt	eq
 800314c:	1949      	addeq	r1, r1, r5
 800314e:	6021      	streq	r1, [r4, #0]
 8003150:	6054      	str	r4, [r2, #4]
 8003152:	e7c7      	b.n	80030e4 <_free_r+0x28>
 8003154:	b003      	add	sp, #12
 8003156:	bd30      	pop	{r4, r5, pc}
 8003158:	20000090 	.word	0x20000090

0800315c <_malloc_r>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	1ccd      	adds	r5, r1, #3
 8003160:	f025 0503 	bic.w	r5, r5, #3
 8003164:	3508      	adds	r5, #8
 8003166:	2d0c      	cmp	r5, #12
 8003168:	bf38      	it	cc
 800316a:	250c      	movcc	r5, #12
 800316c:	2d00      	cmp	r5, #0
 800316e:	4606      	mov	r6, r0
 8003170:	db01      	blt.n	8003176 <_malloc_r+0x1a>
 8003172:	42a9      	cmp	r1, r5
 8003174:	d903      	bls.n	800317e <_malloc_r+0x22>
 8003176:	230c      	movs	r3, #12
 8003178:	6033      	str	r3, [r6, #0]
 800317a:	2000      	movs	r0, #0
 800317c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800317e:	f000 f8f1 	bl	8003364 <__malloc_lock>
 8003182:	4921      	ldr	r1, [pc, #132]	; (8003208 <_malloc_r+0xac>)
 8003184:	680a      	ldr	r2, [r1, #0]
 8003186:	4614      	mov	r4, r2
 8003188:	b99c      	cbnz	r4, 80031b2 <_malloc_r+0x56>
 800318a:	4f20      	ldr	r7, [pc, #128]	; (800320c <_malloc_r+0xb0>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b923      	cbnz	r3, 800319a <_malloc_r+0x3e>
 8003190:	4621      	mov	r1, r4
 8003192:	4630      	mov	r0, r6
 8003194:	f000 f83c 	bl	8003210 <_sbrk_r>
 8003198:	6038      	str	r0, [r7, #0]
 800319a:	4629      	mov	r1, r5
 800319c:	4630      	mov	r0, r6
 800319e:	f000 f837 	bl	8003210 <_sbrk_r>
 80031a2:	1c43      	adds	r3, r0, #1
 80031a4:	d123      	bne.n	80031ee <_malloc_r+0x92>
 80031a6:	230c      	movs	r3, #12
 80031a8:	6033      	str	r3, [r6, #0]
 80031aa:	4630      	mov	r0, r6
 80031ac:	f000 f8e0 	bl	8003370 <__malloc_unlock>
 80031b0:	e7e3      	b.n	800317a <_malloc_r+0x1e>
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	1b5b      	subs	r3, r3, r5
 80031b6:	d417      	bmi.n	80031e8 <_malloc_r+0x8c>
 80031b8:	2b0b      	cmp	r3, #11
 80031ba:	d903      	bls.n	80031c4 <_malloc_r+0x68>
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	441c      	add	r4, r3
 80031c0:	6025      	str	r5, [r4, #0]
 80031c2:	e004      	b.n	80031ce <_malloc_r+0x72>
 80031c4:	6863      	ldr	r3, [r4, #4]
 80031c6:	42a2      	cmp	r2, r4
 80031c8:	bf0c      	ite	eq
 80031ca:	600b      	streq	r3, [r1, #0]
 80031cc:	6053      	strne	r3, [r2, #4]
 80031ce:	4630      	mov	r0, r6
 80031d0:	f000 f8ce 	bl	8003370 <__malloc_unlock>
 80031d4:	f104 000b 	add.w	r0, r4, #11
 80031d8:	1d23      	adds	r3, r4, #4
 80031da:	f020 0007 	bic.w	r0, r0, #7
 80031de:	1ac2      	subs	r2, r0, r3
 80031e0:	d0cc      	beq.n	800317c <_malloc_r+0x20>
 80031e2:	1a1b      	subs	r3, r3, r0
 80031e4:	50a3      	str	r3, [r4, r2]
 80031e6:	e7c9      	b.n	800317c <_malloc_r+0x20>
 80031e8:	4622      	mov	r2, r4
 80031ea:	6864      	ldr	r4, [r4, #4]
 80031ec:	e7cc      	b.n	8003188 <_malloc_r+0x2c>
 80031ee:	1cc4      	adds	r4, r0, #3
 80031f0:	f024 0403 	bic.w	r4, r4, #3
 80031f4:	42a0      	cmp	r0, r4
 80031f6:	d0e3      	beq.n	80031c0 <_malloc_r+0x64>
 80031f8:	1a21      	subs	r1, r4, r0
 80031fa:	4630      	mov	r0, r6
 80031fc:	f000 f808 	bl	8003210 <_sbrk_r>
 8003200:	3001      	adds	r0, #1
 8003202:	d1dd      	bne.n	80031c0 <_malloc_r+0x64>
 8003204:	e7cf      	b.n	80031a6 <_malloc_r+0x4a>
 8003206:	bf00      	nop
 8003208:	20000090 	.word	0x20000090
 800320c:	20000094 	.word	0x20000094

08003210 <_sbrk_r>:
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	4d06      	ldr	r5, [pc, #24]	; (800322c <_sbrk_r+0x1c>)
 8003214:	2300      	movs	r3, #0
 8003216:	4604      	mov	r4, r0
 8003218:	4608      	mov	r0, r1
 800321a:	602b      	str	r3, [r5, #0]
 800321c:	f7fd fcdc 	bl	8000bd8 <_sbrk>
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d102      	bne.n	800322a <_sbrk_r+0x1a>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	b103      	cbz	r3, 800322a <_sbrk_r+0x1a>
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	bd38      	pop	{r3, r4, r5, pc}
 800322c:	20000140 	.word	0x20000140

08003230 <__sread>:
 8003230:	b510      	push	{r4, lr}
 8003232:	460c      	mov	r4, r1
 8003234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003238:	f000 f8a0 	bl	800337c <_read_r>
 800323c:	2800      	cmp	r0, #0
 800323e:	bfab      	itete	ge
 8003240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003242:	89a3      	ldrhlt	r3, [r4, #12]
 8003244:	181b      	addge	r3, r3, r0
 8003246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800324a:	bfac      	ite	ge
 800324c:	6563      	strge	r3, [r4, #84]	; 0x54
 800324e:	81a3      	strhlt	r3, [r4, #12]
 8003250:	bd10      	pop	{r4, pc}

08003252 <__swrite>:
 8003252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003256:	461f      	mov	r7, r3
 8003258:	898b      	ldrh	r3, [r1, #12]
 800325a:	05db      	lsls	r3, r3, #23
 800325c:	4605      	mov	r5, r0
 800325e:	460c      	mov	r4, r1
 8003260:	4616      	mov	r6, r2
 8003262:	d505      	bpl.n	8003270 <__swrite+0x1e>
 8003264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003268:	2302      	movs	r3, #2
 800326a:	2200      	movs	r2, #0
 800326c:	f000 f868 	bl	8003340 <_lseek_r>
 8003270:	89a3      	ldrh	r3, [r4, #12]
 8003272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800327a:	81a3      	strh	r3, [r4, #12]
 800327c:	4632      	mov	r2, r6
 800327e:	463b      	mov	r3, r7
 8003280:	4628      	mov	r0, r5
 8003282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003286:	f000 b817 	b.w	80032b8 <_write_r>

0800328a <__sseek>:
 800328a:	b510      	push	{r4, lr}
 800328c:	460c      	mov	r4, r1
 800328e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003292:	f000 f855 	bl	8003340 <_lseek_r>
 8003296:	1c43      	adds	r3, r0, #1
 8003298:	89a3      	ldrh	r3, [r4, #12]
 800329a:	bf15      	itete	ne
 800329c:	6560      	strne	r0, [r4, #84]	; 0x54
 800329e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032a6:	81a3      	strheq	r3, [r4, #12]
 80032a8:	bf18      	it	ne
 80032aa:	81a3      	strhne	r3, [r4, #12]
 80032ac:	bd10      	pop	{r4, pc}

080032ae <__sclose>:
 80032ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b2:	f000 b813 	b.w	80032dc <_close_r>
	...

080032b8 <_write_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4d07      	ldr	r5, [pc, #28]	; (80032d8 <_write_r+0x20>)
 80032bc:	4604      	mov	r4, r0
 80032be:	4608      	mov	r0, r1
 80032c0:	4611      	mov	r1, r2
 80032c2:	2200      	movs	r2, #0
 80032c4:	602a      	str	r2, [r5, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f7fd fc35 	bl	8000b36 <_write>
 80032cc:	1c43      	adds	r3, r0, #1
 80032ce:	d102      	bne.n	80032d6 <_write_r+0x1e>
 80032d0:	682b      	ldr	r3, [r5, #0]
 80032d2:	b103      	cbz	r3, 80032d6 <_write_r+0x1e>
 80032d4:	6023      	str	r3, [r4, #0]
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
 80032d8:	20000140 	.word	0x20000140

080032dc <_close_r>:
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	4d06      	ldr	r5, [pc, #24]	; (80032f8 <_close_r+0x1c>)
 80032e0:	2300      	movs	r3, #0
 80032e2:	4604      	mov	r4, r0
 80032e4:	4608      	mov	r0, r1
 80032e6:	602b      	str	r3, [r5, #0]
 80032e8:	f7fd fc41 	bl	8000b6e <_close>
 80032ec:	1c43      	adds	r3, r0, #1
 80032ee:	d102      	bne.n	80032f6 <_close_r+0x1a>
 80032f0:	682b      	ldr	r3, [r5, #0]
 80032f2:	b103      	cbz	r3, 80032f6 <_close_r+0x1a>
 80032f4:	6023      	str	r3, [r4, #0]
 80032f6:	bd38      	pop	{r3, r4, r5, pc}
 80032f8:	20000140 	.word	0x20000140

080032fc <_fstat_r>:
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	4d07      	ldr	r5, [pc, #28]	; (800331c <_fstat_r+0x20>)
 8003300:	2300      	movs	r3, #0
 8003302:	4604      	mov	r4, r0
 8003304:	4608      	mov	r0, r1
 8003306:	4611      	mov	r1, r2
 8003308:	602b      	str	r3, [r5, #0]
 800330a:	f7fd fc3c 	bl	8000b86 <_fstat>
 800330e:	1c43      	adds	r3, r0, #1
 8003310:	d102      	bne.n	8003318 <_fstat_r+0x1c>
 8003312:	682b      	ldr	r3, [r5, #0]
 8003314:	b103      	cbz	r3, 8003318 <_fstat_r+0x1c>
 8003316:	6023      	str	r3, [r4, #0]
 8003318:	bd38      	pop	{r3, r4, r5, pc}
 800331a:	bf00      	nop
 800331c:	20000140 	.word	0x20000140

08003320 <_isatty_r>:
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4d06      	ldr	r5, [pc, #24]	; (800333c <_isatty_r+0x1c>)
 8003324:	2300      	movs	r3, #0
 8003326:	4604      	mov	r4, r0
 8003328:	4608      	mov	r0, r1
 800332a:	602b      	str	r3, [r5, #0]
 800332c:	f7fd fc3b 	bl	8000ba6 <_isatty>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d102      	bne.n	800333a <_isatty_r+0x1a>
 8003334:	682b      	ldr	r3, [r5, #0]
 8003336:	b103      	cbz	r3, 800333a <_isatty_r+0x1a>
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	bd38      	pop	{r3, r4, r5, pc}
 800333c:	20000140 	.word	0x20000140

08003340 <_lseek_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4d07      	ldr	r5, [pc, #28]	; (8003360 <_lseek_r+0x20>)
 8003344:	4604      	mov	r4, r0
 8003346:	4608      	mov	r0, r1
 8003348:	4611      	mov	r1, r2
 800334a:	2200      	movs	r2, #0
 800334c:	602a      	str	r2, [r5, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	f7fd fc34 	bl	8000bbc <_lseek>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d102      	bne.n	800335e <_lseek_r+0x1e>
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	b103      	cbz	r3, 800335e <_lseek_r+0x1e>
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	bd38      	pop	{r3, r4, r5, pc}
 8003360:	20000140 	.word	0x20000140

08003364 <__malloc_lock>:
 8003364:	4801      	ldr	r0, [pc, #4]	; (800336c <__malloc_lock+0x8>)
 8003366:	f7ff be43 	b.w	8002ff0 <__retarget_lock_acquire_recursive>
 800336a:	bf00      	nop
 800336c:	20000138 	.word	0x20000138

08003370 <__malloc_unlock>:
 8003370:	4801      	ldr	r0, [pc, #4]	; (8003378 <__malloc_unlock+0x8>)
 8003372:	f7ff be3e 	b.w	8002ff2 <__retarget_lock_release_recursive>
 8003376:	bf00      	nop
 8003378:	20000138 	.word	0x20000138

0800337c <_read_r>:
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	4d07      	ldr	r5, [pc, #28]	; (800339c <_read_r+0x20>)
 8003380:	4604      	mov	r4, r0
 8003382:	4608      	mov	r0, r1
 8003384:	4611      	mov	r1, r2
 8003386:	2200      	movs	r2, #0
 8003388:	602a      	str	r2, [r5, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f7fd fbb6 	bl	8000afc <_read>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_read_r+0x1e>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_read_r+0x1e>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000140 	.word	0x20000140

080033a0 <_init>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr

080033ac <_fini>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr
