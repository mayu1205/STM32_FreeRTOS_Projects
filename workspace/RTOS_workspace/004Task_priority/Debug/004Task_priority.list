
004Task_priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f0  080034f0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080034f0  080034f0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034f0  080034f0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f4  080034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080034f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db8  20000014  0800350c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dcc  0800350c  00021dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d07f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a6  00000000  00000000  0002d0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002f368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002fd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018acb  00000000  00000000  000306c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b54d  00000000  00000000  0004918b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099366  00000000  00000000  000546d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eda3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000228c  00000000  00000000  000eda94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003448 	.word	0x08003448

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003448 	.word	0x08003448

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f98d 	bl	8000544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f831 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f877 	bl	8000320 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1function,"Task-1",100,NULL,1,&task1_handle);
 8000232:	4913      	ldr	r1, [pc, #76]	; (8000280 <main+0x60>)
 8000234:	4813      	ldr	r0, [pc, #76]	; (8000284 <main+0x64>)
 8000236:	2308      	movs	r3, #8
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	9301      	str	r3, [sp, #4]
 800023c:	2301      	movs	r3, #1
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2300      	movs	r3, #0
 8000242:	2264      	movs	r2, #100	; 0x64
 8000244:	f001 fc7d 	bl	8001b42 <xTaskCreate>
 8000248:	0003      	movs	r3, r0
 800024a:	60fb      	str	r3, [r7, #12]

  configASSERT(status == pdPASS);
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d001      	beq.n	8000256 <main+0x36>
 8000252:	b672      	cpsid	i
 8000254:	e7fe      	b.n	8000254 <main+0x34>

  status = xTaskCreate(task2function,"Task-2",100,NULL,1,&task2_handle);
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <main+0x68>)
 8000258:	480c      	ldr	r0, [pc, #48]	; (800028c <main+0x6c>)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	9301      	str	r3, [sp, #4]
 800025e:	2301      	movs	r3, #1
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	2264      	movs	r2, #100	; 0x64
 8000266:	f001 fc6c 	bl	8001b42 <xTaskCreate>
 800026a:	0003      	movs	r3, r0
 800026c:	60fb      	str	r3, [r7, #12]

  configASSERT(status == pdPASS);
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d001      	beq.n	8000278 <main+0x58>
 8000274:	b672      	cpsid	i
 8000276:	e7fe      	b.n	8000276 <main+0x56>

  vTaskStartScheduler();
 8000278:	f001 fde6 	bl	8001e48 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027c:	e7fe      	b.n	800027c <main+0x5c>
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	08003460 	.word	0x08003460
 8000284:	08000415 	.word	0x08000415
 8000288:	08003468 	.word	0x08003468
 800028c:	08000449 	.word	0x08000449

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b093      	sub	sp, #76	; 0x4c
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	2410      	movs	r4, #16
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2338      	movs	r3, #56	; 0x38
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f003 f8c8 	bl	8003436 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	003b      	movs	r3, r7
 80002a8:	0018      	movs	r0, r3
 80002aa:	2310      	movs	r3, #16
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f003 f8c1 	bl	8003436 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fc03 	bl	8000ac4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	2202      	movs	r2, #2
 80002c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	2280      	movs	r2, #128	; 0x80
 80002c8:	0052      	lsls	r2, r2, #1
 80002ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2200      	movs	r2, #0
 80002d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2240      	movs	r2, #64	; 0x40
 80002d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 fc2f 	bl	8000b44 <HAL_RCC_OscConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002ea:	f000 f8c7 	bl	800047c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	003b      	movs	r3, r7
 80002f0:	2207      	movs	r2, #7
 80002f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f4:	003b      	movs	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	003b      	movs	r3, r7
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	003b      	movs	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000306:	003b      	movs	r3, r7
 8000308:	2100      	movs	r1, #0
 800030a:	0018      	movs	r0, r3
 800030c:	f000 ff34 	bl	8001178 <HAL_RCC_ClockConfig>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000314:	f000 f8b2 	bl	800047c <Error_Handler>
  }
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b013      	add	sp, #76	; 0x4c
 800031e:	bd90      	pop	{r4, r7, pc}

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b089      	sub	sp, #36	; 0x24
 8000324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	240c      	movs	r4, #12
 8000328:	193b      	adds	r3, r7, r4
 800032a:	0018      	movs	r0, r3
 800032c:	2314      	movs	r3, #20
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f003 f880 	bl	8003436 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000336:	4b36      	ldr	r3, [pc, #216]	; (8000410 <MX_GPIO_Init+0xf0>)
 8000338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800033a:	4b35      	ldr	r3, [pc, #212]	; (8000410 <MX_GPIO_Init+0xf0>)
 800033c:	2104      	movs	r1, #4
 800033e:	430a      	orrs	r2, r1
 8000340:	635a      	str	r2, [r3, #52]	; 0x34
 8000342:	4b33      	ldr	r3, [pc, #204]	; (8000410 <MX_GPIO_Init+0xf0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	2204      	movs	r2, #4
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800034e:	4b30      	ldr	r3, [pc, #192]	; (8000410 <MX_GPIO_Init+0xf0>)
 8000350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000352:	4b2f      	ldr	r3, [pc, #188]	; (8000410 <MX_GPIO_Init+0xf0>)
 8000354:	2120      	movs	r1, #32
 8000356:	430a      	orrs	r2, r1
 8000358:	635a      	str	r2, [r3, #52]	; 0x34
 800035a:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <MX_GPIO_Init+0xf0>)
 800035c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035e:	2220      	movs	r2, #32
 8000360:	4013      	ands	r3, r2
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <MX_GPIO_Init+0xf0>)
 8000368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800036a:	4b29      	ldr	r3, [pc, #164]	; (8000410 <MX_GPIO_Init+0xf0>)
 800036c:	2101      	movs	r1, #1
 800036e:	430a      	orrs	r2, r1
 8000370:	635a      	str	r2, [r3, #52]	; 0x34
 8000372:	4b27      	ldr	r3, [pc, #156]	; (8000410 <MX_GPIO_Init+0xf0>)
 8000374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000376:	2201      	movs	r2, #1
 8000378:	4013      	ands	r3, r2
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|Ex_LED_Pin, GPIO_PIN_RESET);
 800037e:	23a0      	movs	r3, #160	; 0xa0
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2200      	movs	r2, #0
 8000384:	2160      	movs	r1, #96	; 0x60
 8000386:	0018      	movs	r0, r3
 8000388:	f000 fb7e 	bl	8000a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800038c:	193b      	adds	r3, r7, r4
 800038e:	220c      	movs	r2, #12
 8000390:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000392:	193b      	adds	r3, r7, r4
 8000394:	2202      	movs	r2, #2
 8000396:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	193b      	adds	r3, r7, r4
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	193b      	adds	r3, r7, r4
 80003a0:	2200      	movs	r2, #0
 80003a2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	2201      	movs	r2, #1
 80003a8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003aa:	193a      	adds	r2, r7, r4
 80003ac:	23a0      	movs	r3, #160	; 0xa0
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 fa04 	bl	80007c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	2220      	movs	r2, #32
 80003bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	2201      	movs	r2, #1
 80003c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ca:	193b      	adds	r3, r7, r4
 80003cc:	2202      	movs	r2, #2
 80003ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80003d0:	193a      	adds	r2, r7, r4
 80003d2:	23a0      	movs	r3, #160	; 0xa0
 80003d4:	05db      	lsls	r3, r3, #23
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 f9f1 	bl	80007c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ex_LED_Pin */
  GPIO_InitStruct.Pin = Ex_LED_Pin;
 80003de:	0021      	movs	r1, r4
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2240      	movs	r2, #64	; 0x40
 80003e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2201      	movs	r2, #1
 80003ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Ex_LED_GPIO_Port, &GPIO_InitStruct);
 80003f8:	187a      	adds	r2, r7, r1
 80003fa:	23a0      	movs	r3, #160	; 0xa0
 80003fc:	05db      	lsls	r3, r3, #23
 80003fe:	0011      	movs	r1, r2
 8000400:	0018      	movs	r0, r3
 8000402:	f000 f9dd 	bl	80007c0 <HAL_GPIO_Init>

}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b009      	add	sp, #36	; 0x24
 800040c:	bd90      	pop	{r4, r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	40021000 	.word	0x40021000

08000414 <task1function>:

/* USER CODE BEGIN 4 */

 void task1function(void *parameters)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);

		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800041c:	23a0      	movs	r3, #160	; 0xa0
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	2201      	movs	r2, #1
 8000422:	2120      	movs	r1, #32
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fb2f 	bl	8000a88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Ex_LED_GPIO_Port, Ex_LED_Pin, 0);
 800042a:	23a0      	movs	r3, #160	; 0xa0
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	2200      	movs	r2, #0
 8000430:	2140      	movs	r1, #64	; 0x40
 8000432:	0018      	movs	r0, r3
 8000434:	f000 fb28 	bl	8000a88 <HAL_GPIO_WritePin>
		//HAL_Delay(1000);
		vTaskDelay(pdMS_TO_TICKS(3000));
 8000438:	4b02      	ldr	r3, [pc, #8]	; (8000444 <task1function+0x30>)
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fcde 	bl	8001dfc <vTaskDelay>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000440:	e7ec      	b.n	800041c <task1function+0x8>
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	00000bb8 	.word	0x00000bb8

08000448 <task2function>:
	}
}
 void task2function(void *parameters)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//HAL_GPIO_TogglePin(Ex_LED_GPIO_Port,Ex_LED_Pin);// i am using the external led on pin d12
		HAL_GPIO_WritePin(Ex_LED_GPIO_Port, Ex_LED_Pin, 1);
 8000450:	23a0      	movs	r3, #160	; 0xa0
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	; 0x40
 8000458:	0018      	movs	r0, r3
 800045a:	f000 fb15 	bl	8000a88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800045e:	23a0      	movs	r3, #160	; 0xa0
 8000460:	05db      	lsls	r3, r3, #23
 8000462:	2200      	movs	r2, #0
 8000464:	2120      	movs	r1, #32
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fb0e 	bl	8000a88 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(6000));
 800046c:	4b02      	ldr	r3, [pc, #8]	; (8000478 <task2function+0x30>)
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fcc4 	bl	8001dfc <vTaskDelay>
		HAL_GPIO_WritePin(Ex_LED_GPIO_Port, Ex_LED_Pin, 1);
 8000474:	e7ec      	b.n	8000450 <task2function+0x8>
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	00001770 	.word	0x00001770

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000484:	e7fe      	b.n	8000484 <Error_Handler+0x8>
	...

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_MspInit+0x4c>)
 8000490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000492:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <HAL_MspInit+0x4c>)
 8000494:	2101      	movs	r1, #1
 8000496:	430a      	orrs	r2, r1
 8000498:	641a      	str	r2, [r3, #64]	; 0x40
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <HAL_MspInit+0x4c>)
 800049c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800049e:	2201      	movs	r2, #1
 80004a0:	4013      	ands	r3, r2
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <HAL_MspInit+0x4c>)
 80004a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <HAL_MspInit+0x4c>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	0549      	lsls	r1, r1, #21
 80004b0:	430a      	orrs	r2, r1
 80004b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80004b4:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <HAL_MspInit+0x4c>)
 80004b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	055b      	lsls	r3, r3, #21
 80004bc:	4013      	ands	r3, r2
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80004c2:	23c0      	movs	r3, #192	; 0xc0
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 f8b0 	bl	800062c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */
  //vInitPrioGroupValue();
  /* USER CODE END MspInit 1 */
}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40021000 	.word	0x40021000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <NMI_Handler+0x4>

080004de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <HardFault_Handler+0x4>

080004e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f4:	f7ff fff6 	bl	80004e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <LoopForever+0x6>)
  ldr r1, =_edata
 80004fa:	490d      	ldr	r1, [pc, #52]	; (8000530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <LoopForever+0xe>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000510:	4c0a      	ldr	r4, [pc, #40]	; (800053c <LoopForever+0x16>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051e:	f002 ff5d 	bl	80033dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000522:	f7ff fe7d 	bl	8000220 <main>

08000526 <LoopForever>:

LoopForever:
  b LoopForever
 8000526:	e7fe      	b.n	8000526 <LoopForever>
  ldr   r0, =_estack
 8000528:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000534:	080034f8 	.word	0x080034f8
  ldr r2, =_sbss
 8000538:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800053c:	20001dcc 	.word	0x20001dcc

08000540 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC1_COMP_IRQHandler>
	...

08000544 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800054a:	1dfb      	adds	r3, r7, #7
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <HAL_Init+0x3c>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_Init+0x3c>)
 8000556:	2180      	movs	r1, #128	; 0x80
 8000558:	0049      	lsls	r1, r1, #1
 800055a:	430a      	orrs	r2, r1
 800055c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800055e:	2000      	movs	r0, #0
 8000560:	f000 f810 	bl	8000584 <HAL_InitTick>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d003      	beq.n	8000570 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	2201      	movs	r2, #1
 800056c:	701a      	strb	r2, [r3, #0]
 800056e:	e001      	b.n	8000574 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000570:	f7ff ff8a 	bl	8000488 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000574:	1dfb      	adds	r3, r7, #7
 8000576:	781b      	ldrb	r3, [r3, #0]
}
 8000578:	0018      	movs	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40022000 	.word	0x40022000

08000584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800058c:	230f      	movs	r3, #15
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <HAL_InitTick+0x88>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d02b      	beq.n	80005f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <HAL_InitTick+0x8c>)
 800059e:	681c      	ldr	r4, [r3, #0]
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <HAL_InitTick+0x88>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	0019      	movs	r1, r3
 80005a6:	23fa      	movs	r3, #250	; 0xfa
 80005a8:	0098      	lsls	r0, r3, #2
 80005aa:	f7ff fdad 	bl	8000108 <__udivsi3>
 80005ae:	0003      	movs	r3, r0
 80005b0:	0019      	movs	r1, r3
 80005b2:	0020      	movs	r0, r4
 80005b4:	f7ff fda8 	bl	8000108 <__udivsi3>
 80005b8:	0003      	movs	r3, r0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 f8f3 	bl	80007a6 <HAL_SYSTICK_Config>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d112      	bne.n	80005ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	d80a      	bhi.n	80005e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	2200      	movs	r2, #0
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f8d2 	bl	800077c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <HAL_InitTick+0x90>)
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	e00d      	b.n	80005fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80005e0:	230f      	movs	r3, #15
 80005e2:	18fb      	adds	r3, r7, r3
 80005e4:	2201      	movs	r2, #1
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e008      	b.n	80005fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005ea:	230f      	movs	r3, #15
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	e003      	b.n	80005fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005f4:	230f      	movs	r3, #15
 80005f6:	18fb      	adds	r3, r7, r3
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80005fc:	230f      	movs	r3, #15
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	781b      	ldrb	r3, [r3, #0]
}
 8000602:	0018      	movs	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	b005      	add	sp, #20
 8000608:	bd90      	pop	{r4, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000008 	.word	0x20000008
 8000610:	20000000 	.word	0x20000000
 8000614:	20000004 	.word	0x20000004

08000618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <HAL_GetTick+0x10>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	0018      	movs	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	20001d88 	.word	0x20001d88

0800062c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a06      	ldr	r2, [pc, #24]	; (8000654 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800063a:	4013      	ands	r3, r2
 800063c:	0019      	movs	r1, r3
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	430a      	orrs	r2, r1
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	40010000 	.word	0x40010000
 8000654:	fffff9ff 	.word	0xfffff9ff

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	0002      	movs	r2, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b7f      	cmp	r3, #127	; 0x7f
 800066c:	d828      	bhi.n	80006c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800066e:	4a2f      	ldr	r2, [pc, #188]	; (800072c <__NVIC_SetPriority+0xd4>)
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b25b      	sxtb	r3, r3
 8000676:	089b      	lsrs	r3, r3, #2
 8000678:	33c0      	adds	r3, #192	; 0xc0
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	589b      	ldr	r3, [r3, r2]
 800067e:	1dfa      	adds	r2, r7, #7
 8000680:	7812      	ldrb	r2, [r2, #0]
 8000682:	0011      	movs	r1, r2
 8000684:	2203      	movs	r2, #3
 8000686:	400a      	ands	r2, r1
 8000688:	00d2      	lsls	r2, r2, #3
 800068a:	21ff      	movs	r1, #255	; 0xff
 800068c:	4091      	lsls	r1, r2
 800068e:	000a      	movs	r2, r1
 8000690:	43d2      	mvns	r2, r2
 8000692:	401a      	ands	r2, r3
 8000694:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	019b      	lsls	r3, r3, #6
 800069a:	22ff      	movs	r2, #255	; 0xff
 800069c:	401a      	ands	r2, r3
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	0018      	movs	r0, r3
 80006a4:	2303      	movs	r3, #3
 80006a6:	4003      	ands	r3, r0
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ac:	481f      	ldr	r0, [pc, #124]	; (800072c <__NVIC_SetPriority+0xd4>)
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	089b      	lsrs	r3, r3, #2
 80006b6:	430a      	orrs	r2, r1
 80006b8:	33c0      	adds	r3, #192	; 0xc0
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006be:	e031      	b.n	8000724 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <__NVIC_SetPriority+0xd8>)
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	0019      	movs	r1, r3
 80006c8:	230f      	movs	r3, #15
 80006ca:	400b      	ands	r3, r1
 80006cc:	3b08      	subs	r3, #8
 80006ce:	089b      	lsrs	r3, r3, #2
 80006d0:	3306      	adds	r3, #6
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	18d3      	adds	r3, r2, r3
 80006d6:	3304      	adds	r3, #4
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	1dfa      	adds	r2, r7, #7
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	0011      	movs	r1, r2
 80006e0:	2203      	movs	r2, #3
 80006e2:	400a      	ands	r2, r1
 80006e4:	00d2      	lsls	r2, r2, #3
 80006e6:	21ff      	movs	r1, #255	; 0xff
 80006e8:	4091      	lsls	r1, r2
 80006ea:	000a      	movs	r2, r1
 80006ec:	43d2      	mvns	r2, r2
 80006ee:	401a      	ands	r2, r3
 80006f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	019b      	lsls	r3, r3, #6
 80006f6:	22ff      	movs	r2, #255	; 0xff
 80006f8:	401a      	ands	r2, r3
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	0018      	movs	r0, r3
 8000700:	2303      	movs	r3, #3
 8000702:	4003      	ands	r3, r0
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <__NVIC_SetPriority+0xd8>)
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	001c      	movs	r4, r3
 8000710:	230f      	movs	r3, #15
 8000712:	4023      	ands	r3, r4
 8000714:	3b08      	subs	r3, #8
 8000716:	089b      	lsrs	r3, r3, #2
 8000718:	430a      	orrs	r2, r1
 800071a:	3306      	adds	r3, #6
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	18c3      	adds	r3, r0, r3
 8000720:	3304      	adds	r3, #4
 8000722:	601a      	str	r2, [r3, #0]
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b003      	add	sp, #12
 800072a:	bd90      	pop	{r4, r7, pc}
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	045b      	lsls	r3, r3, #17
 8000744:	429a      	cmp	r2, r3
 8000746:	d301      	bcc.n	800074c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000748:	2301      	movs	r3, #1
 800074a:	e010      	b.n	800076e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <SysTick_Config+0x44>)
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	3a01      	subs	r2, #1
 8000752:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000754:	2301      	movs	r3, #1
 8000756:	425b      	negs	r3, r3
 8000758:	2103      	movs	r1, #3
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff ff7c 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <SysTick_Config+0x44>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SysTick_Config+0x44>)
 8000768:	2207      	movs	r2, #7
 800076a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076c:	2300      	movs	r3, #0
}
 800076e:	0018      	movs	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	b002      	add	sp, #8
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	e000e010 	.word	0xe000e010

0800077c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	210f      	movs	r1, #15
 8000788:	187b      	adds	r3, r7, r1
 800078a:	1c02      	adds	r2, r0, #0
 800078c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	187b      	adds	r3, r7, r1
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b25b      	sxtb	r3, r3
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b004      	add	sp, #16
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff ffbf 	bl	8000734 <SysTick_Config>
 80007b6:	0003      	movs	r3, r0
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b002      	add	sp, #8
 80007be:	bd80      	pop	{r7, pc}

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ce:	e147      	b.n	8000a60 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2101      	movs	r1, #1
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	4091      	lsls	r1, r2
 80007da:	000a      	movs	r2, r1
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d100      	bne.n	80007e8 <HAL_GPIO_Init+0x28>
 80007e6:	e138      	b.n	8000a5a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2203      	movs	r2, #3
 80007ee:	4013      	ands	r3, r2
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d005      	beq.n	8000800 <HAL_GPIO_Init+0x40>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	2203      	movs	r2, #3
 80007fa:	4013      	ands	r3, r2
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d130      	bne.n	8000862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	2203      	movs	r2, #3
 800080c:	409a      	lsls	r2, r3
 800080e:	0013      	movs	r3, r2
 8000810:	43da      	mvns	r2, r3
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	409a      	lsls	r2, r3
 8000822:	0013      	movs	r3, r2
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	4313      	orrs	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000836:	2201      	movs	r2, #1
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	409a      	lsls	r2, r3
 800083c:	0013      	movs	r3, r2
 800083e:	43da      	mvns	r2, r3
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	4013      	ands	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	091b      	lsrs	r3, r3, #4
 800084c:	2201      	movs	r2, #1
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
 8000854:	0013      	movs	r3, r2
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4313      	orrs	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2203      	movs	r2, #3
 8000868:	4013      	ands	r3, r2
 800086a:	2b03      	cmp	r3, #3
 800086c:	d017      	beq.n	800089e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	2203      	movs	r2, #3
 800087a:	409a      	lsls	r2, r3
 800087c:	0013      	movs	r3, r2
 800087e:	43da      	mvns	r2, r3
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	409a      	lsls	r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	2203      	movs	r2, #3
 80008a4:	4013      	ands	r3, r2
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d123      	bne.n	80008f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	08da      	lsrs	r2, r3, #3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3208      	adds	r2, #8
 80008b2:	0092      	lsls	r2, r2, #2
 80008b4:	58d3      	ldr	r3, [r2, r3]
 80008b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	2207      	movs	r2, #7
 80008bc:	4013      	ands	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	220f      	movs	r2, #15
 80008c2:	409a      	lsls	r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	43da      	mvns	r2, r3
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	4013      	ands	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	691a      	ldr	r2, [r3, #16]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	2107      	movs	r1, #7
 80008d6:	400b      	ands	r3, r1
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	409a      	lsls	r2, r3
 80008dc:	0013      	movs	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	08da      	lsrs	r2, r3, #3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3208      	adds	r2, #8
 80008ec:	0092      	lsls	r2, r2, #2
 80008ee:	6939      	ldr	r1, [r7, #16]
 80008f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2203      	movs	r2, #3
 80008fe:	409a      	lsls	r2, r3
 8000900:	0013      	movs	r3, r2
 8000902:	43da      	mvns	r2, r3
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2203      	movs	r2, #3
 8000910:	401a      	ands	r2, r3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	409a      	lsls	r2, r3
 8000918:	0013      	movs	r3, r2
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4313      	orrs	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	23c0      	movs	r3, #192	; 0xc0
 800092c:	029b      	lsls	r3, r3, #10
 800092e:	4013      	ands	r3, r2
 8000930:	d100      	bne.n	8000934 <HAL_GPIO_Init+0x174>
 8000932:	e092      	b.n	8000a5a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000934:	4a50      	ldr	r2, [pc, #320]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	089b      	lsrs	r3, r3, #2
 800093a:	3318      	adds	r3, #24
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	589b      	ldr	r3, [r3, r2]
 8000940:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	2203      	movs	r2, #3
 8000946:	4013      	ands	r3, r2
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	220f      	movs	r2, #15
 800094c:	409a      	lsls	r2, r3
 800094e:	0013      	movs	r3, r2
 8000950:	43da      	mvns	r2, r3
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4013      	ands	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	23a0      	movs	r3, #160	; 0xa0
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	429a      	cmp	r2, r3
 8000960:	d013      	beq.n	800098a <HAL_GPIO_Init+0x1ca>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a45      	ldr	r2, [pc, #276]	; (8000a7c <HAL_GPIO_Init+0x2bc>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d00d      	beq.n	8000986 <HAL_GPIO_Init+0x1c6>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a44      	ldr	r2, [pc, #272]	; (8000a80 <HAL_GPIO_Init+0x2c0>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d007      	beq.n	8000982 <HAL_GPIO_Init+0x1c2>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a43      	ldr	r2, [pc, #268]	; (8000a84 <HAL_GPIO_Init+0x2c4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_GPIO_Init+0x1be>
 800097a:	2303      	movs	r3, #3
 800097c:	e006      	b.n	800098c <HAL_GPIO_Init+0x1cc>
 800097e:	2305      	movs	r3, #5
 8000980:	e004      	b.n	800098c <HAL_GPIO_Init+0x1cc>
 8000982:	2302      	movs	r3, #2
 8000984:	e002      	b.n	800098c <HAL_GPIO_Init+0x1cc>
 8000986:	2301      	movs	r3, #1
 8000988:	e000      	b.n	800098c <HAL_GPIO_Init+0x1cc>
 800098a:	2300      	movs	r3, #0
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	2103      	movs	r1, #3
 8000990:	400a      	ands	r2, r1
 8000992:	00d2      	lsls	r2, r2, #3
 8000994:	4093      	lsls	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800099c:	4936      	ldr	r1, [pc, #216]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	3318      	adds	r3, #24
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009aa:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	43da      	mvns	r2, r3
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	035b      	lsls	r3, r3, #13
 80009c2:	4013      	ands	r3, r2
 80009c4:	d003      	beq.n	80009ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80009d4:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	43da      	mvns	r2, r3
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	039b      	lsls	r3, r3, #14
 80009ec:	4013      	ands	r3, r2
 80009ee:	d003      	beq.n	80009f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80009fe:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 8000a00:	2384      	movs	r3, #132	; 0x84
 8000a02:	58d3      	ldr	r3, [r2, r3]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	43da      	mvns	r2, r3
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	029b      	lsls	r3, r3, #10
 8000a18:	4013      	ands	r3, r2
 8000a1a:	d003      	beq.n	8000a24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a24:	4914      	ldr	r1, [pc, #80]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 8000a26:	2284      	movs	r2, #132	; 0x84
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	58d3      	ldr	r3, [r2, r3]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	43da      	mvns	r2, r3
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	025b      	lsls	r3, r3, #9
 8000a46:	4013      	ands	r3, r2
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a52:	4909      	ldr	r1, [pc, #36]	; (8000a78 <HAL_GPIO_Init+0x2b8>)
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	40da      	lsrs	r2, r3
 8000a68:	1e13      	subs	r3, r2, #0
 8000a6a:	d000      	beq.n	8000a6e <HAL_GPIO_Init+0x2ae>
 8000a6c:	e6b0      	b.n	80007d0 <HAL_GPIO_Init+0x10>
  }
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b006      	add	sp, #24
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021800 	.word	0x40021800
 8000a7c:	50000400 	.word	0x50000400
 8000a80:	50000800 	.word	0x50000800
 8000a84:	50000c00 	.word	0x50000c00

08000a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	0008      	movs	r0, r1
 8000a92:	0011      	movs	r1, r2
 8000a94:	1cbb      	adds	r3, r7, #2
 8000a96:	1c02      	adds	r2, r0, #0
 8000a98:	801a      	strh	r2, [r3, #0]
 8000a9a:	1c7b      	adds	r3, r7, #1
 8000a9c:	1c0a      	adds	r2, r1, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aa0:	1c7b      	adds	r3, r7, #1
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d004      	beq.n	8000ab2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aa8:	1cbb      	adds	r3, r7, #2
 8000aaa:	881a      	ldrh	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ab0:	e003      	b.n	8000aba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ab2:	1cbb      	adds	r3, r7, #2
 8000ab4:	881a      	ldrh	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	430a      	orrs	r2, r1
 8000adc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d11f      	bne.n	8000b28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	0013      	movs	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	189b      	adds	r3, r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4912      	ldr	r1, [pc, #72]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff fb06 	bl	8000108 <__udivsi3>
 8000afc:	0003      	movs	r3, r0
 8000afe:	3301      	adds	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b02:	e008      	b.n	8000b16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	e001      	b.n	8000b16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000b12:	2303      	movs	r3, #3
 8000b14:	e009      	b.n	8000b2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b18:	695a      	ldr	r2, [r3, #20]
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	401a      	ands	r2, r3
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d0ed      	beq.n	8000b04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b004      	add	sp, #16
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	40007000 	.word	0x40007000
 8000b38:	fffff9ff 	.word	0xfffff9ff
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	000f4240 	.word	0x000f4240

08000b44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e2fe      	b.n	8001154 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	d100      	bne.n	8000b62 <HAL_RCC_OscConfig+0x1e>
 8000b60:	e07c      	b.n	8000c5c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b62:	4bc3      	ldr	r3, [pc, #780]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2238      	movs	r2, #56	; 0x38
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b6c:	4bc0      	ldr	r3, [pc, #768]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	2203      	movs	r2, #3
 8000b72:	4013      	ands	r3, r2
 8000b74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	2b10      	cmp	r3, #16
 8000b7a:	d102      	bne.n	8000b82 <HAL_RCC_OscConfig+0x3e>
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d002      	beq.n	8000b88 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	d10b      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b88:	4bb9      	ldr	r3, [pc, #740]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	029b      	lsls	r3, r3, #10
 8000b90:	4013      	ands	r3, r2
 8000b92:	d062      	beq.n	8000c5a <HAL_RCC_OscConfig+0x116>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d15e      	bne.n	8000c5a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e2d9      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	025b      	lsls	r3, r3, #9
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d107      	bne.n	8000bbc <HAL_RCC_OscConfig+0x78>
 8000bac:	4bb0      	ldr	r3, [pc, #704]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4baf      	ldr	r3, [pc, #700]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	0249      	lsls	r1, r1, #9
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	e020      	b.n	8000bfe <HAL_RCC_OscConfig+0xba>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	23a0      	movs	r3, #160	; 0xa0
 8000bc2:	02db      	lsls	r3, r3, #11
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d10e      	bne.n	8000be6 <HAL_RCC_OscConfig+0xa2>
 8000bc8:	4ba9      	ldr	r3, [pc, #676]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4ba8      	ldr	r3, [pc, #672]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	02c9      	lsls	r1, r1, #11
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	4ba6      	ldr	r3, [pc, #664]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4ba5      	ldr	r3, [pc, #660]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	0249      	lsls	r1, r1, #9
 8000be0:	430a      	orrs	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	e00b      	b.n	8000bfe <HAL_RCC_OscConfig+0xba>
 8000be6:	4ba2      	ldr	r3, [pc, #648]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	4ba1      	ldr	r3, [pc, #644]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000bec:	49a1      	ldr	r1, [pc, #644]	; (8000e74 <HAL_RCC_OscConfig+0x330>)
 8000bee:	400a      	ands	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	4b9f      	ldr	r3, [pc, #636]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b9e      	ldr	r3, [pc, #632]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000bf8:	499f      	ldr	r1, [pc, #636]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d014      	beq.n	8000c30 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c06:	f7ff fd07 	bl	8000618 <HAL_GetTick>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fd02 	bl	8000618 <HAL_GetTick>
 8000c14:	0002      	movs	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	; 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e298      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c22:	4b93      	ldr	r3, [pc, #588]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	029b      	lsls	r3, r3, #10
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	d0f0      	beq.n	8000c10 <HAL_RCC_OscConfig+0xcc>
 8000c2e:	e015      	b.n	8000c5c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c30:	f7ff fcf2 	bl	8000618 <HAL_GetTick>
 8000c34:	0003      	movs	r3, r0
 8000c36:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c38:	e008      	b.n	8000c4c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c3a:	f7ff fced 	bl	8000618 <HAL_GetTick>
 8000c3e:	0002      	movs	r2, r0
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	2b64      	cmp	r3, #100	; 0x64
 8000c46:	d901      	bls.n	8000c4c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	e283      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c4c:	4b88      	ldr	r3, [pc, #544]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	029b      	lsls	r3, r3, #10
 8000c54:	4013      	ands	r3, r2
 8000c56:	d1f0      	bne.n	8000c3a <HAL_RCC_OscConfig+0xf6>
 8000c58:	e000      	b.n	8000c5c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2202      	movs	r2, #2
 8000c62:	4013      	ands	r3, r2
 8000c64:	d100      	bne.n	8000c68 <HAL_RCC_OscConfig+0x124>
 8000c66:	e099      	b.n	8000d9c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c68:	4b81      	ldr	r3, [pc, #516]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	2238      	movs	r2, #56	; 0x38
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c72:	4b7f      	ldr	r3, [pc, #508]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	2203      	movs	r2, #3
 8000c78:	4013      	ands	r3, r2
 8000c7a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2b10      	cmp	r3, #16
 8000c80:	d102      	bne.n	8000c88 <HAL_RCC_OscConfig+0x144>
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d002      	beq.n	8000c8e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d135      	bne.n	8000cfa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c8e:	4b78      	ldr	r3, [pc, #480]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4013      	ands	r3, r2
 8000c98:	d005      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x162>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e256      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca6:	4b72      	ldr	r3, [pc, #456]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4a74      	ldr	r2, [pc, #464]	; (8000e7c <HAL_RCC_OscConfig+0x338>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	0019      	movs	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	021a      	lsls	r2, r3, #8
 8000cb6:	4b6e      	ldr	r3, [pc, #440]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d112      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000cc2:	4b6b      	ldr	r3, [pc, #428]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a6e      	ldr	r2, [pc, #440]	; (8000e80 <HAL_RCC_OscConfig+0x33c>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	0019      	movs	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	4b67      	ldr	r3, [pc, #412]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000cd6:	4b66      	ldr	r3, [pc, #408]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	0adb      	lsrs	r3, r3, #11
 8000cdc:	2207      	movs	r2, #7
 8000cde:	4013      	ands	r3, r2
 8000ce0:	4a68      	ldr	r2, [pc, #416]	; (8000e84 <HAL_RCC_OscConfig+0x340>)
 8000ce2:	40da      	lsrs	r2, r3
 8000ce4:	4b68      	ldr	r3, [pc, #416]	; (8000e88 <HAL_RCC_OscConfig+0x344>)
 8000ce6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ce8:	4b68      	ldr	r3, [pc, #416]	; (8000e8c <HAL_RCC_OscConfig+0x348>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff fc49 	bl	8000584 <HAL_InitTick>
 8000cf2:	1e03      	subs	r3, r0, #0
 8000cf4:	d051      	beq.n	8000d9a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e22c      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d030      	beq.n	8000d64 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d02:	4b5b      	ldr	r3, [pc, #364]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a5e      	ldr	r2, [pc, #376]	; (8000e80 <HAL_RCC_OscConfig+0x33c>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	4b57      	ldr	r3, [pc, #348]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000d12:	430a      	orrs	r2, r1
 8000d14:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000d16:	4b56      	ldr	r3, [pc, #344]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b55      	ldr	r3, [pc, #340]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	0049      	lsls	r1, r1, #1
 8000d20:	430a      	orrs	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d24:	f7ff fc78 	bl	8000618 <HAL_GetTick>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d2c:	e008      	b.n	8000d40 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d2e:	f7ff fc73 	bl	8000618 <HAL_GetTick>
 8000d32:	0002      	movs	r2, r0
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e209      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d40:	4b4b      	ldr	r3, [pc, #300]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d0f0      	beq.n	8000d2e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4c:	4b48      	ldr	r3, [pc, #288]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	4a4a      	ldr	r2, [pc, #296]	; (8000e7c <HAL_RCC_OscConfig+0x338>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	0019      	movs	r1, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	021a      	lsls	r2, r3, #8
 8000d5c:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	e01b      	b.n	8000d9c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000d64:	4b42      	ldr	r3, [pc, #264]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000d6a:	4949      	ldr	r1, [pc, #292]	; (8000e90 <HAL_RCC_OscConfig+0x34c>)
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d70:	f7ff fc52 	bl	8000618 <HAL_GetTick>
 8000d74:	0003      	movs	r3, r0
 8000d76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d78:	e008      	b.n	8000d8c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d7a:	f7ff fc4d 	bl	8000618 <HAL_GetTick>
 8000d7e:	0002      	movs	r2, r0
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d901      	bls.n	8000d8c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e1e3      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d8c:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	4013      	ands	r3, r2
 8000d96:	d1f0      	bne.n	8000d7a <HAL_RCC_OscConfig+0x236>
 8000d98:	e000      	b.n	8000d9c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d9a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2208      	movs	r2, #8
 8000da2:	4013      	ands	r3, r2
 8000da4:	d047      	beq.n	8000e36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	2238      	movs	r2, #56	; 0x38
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b18      	cmp	r3, #24
 8000db0:	d10a      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db6:	2202      	movs	r2, #2
 8000db8:	4013      	ands	r3, r2
 8000dba:	d03c      	beq.n	8000e36 <HAL_RCC_OscConfig+0x2f2>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d138      	bne.n	8000e36 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e1c5      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d019      	beq.n	8000e04 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000dd0:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000dd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fc1c 	bl	8000618 <HAL_GetTick>
 8000de0:	0003      	movs	r3, r0
 8000de2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000de4:	e008      	b.n	8000df8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de6:	f7ff fc17 	bl	8000618 <HAL_GetTick>
 8000dea:	0002      	movs	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e1ad      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	4013      	ands	r3, r2
 8000e00:	d0f1      	beq.n	8000de6 <HAL_RCC_OscConfig+0x2a2>
 8000e02:	e018      	b.n	8000e36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000e06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e10:	f7ff fc02 	bl	8000618 <HAL_GetTick>
 8000e14:	0003      	movs	r3, r0
 8000e16:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e18:	e008      	b.n	8000e2c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e1a:	f7ff fbfd 	bl	8000618 <HAL_GetTick>
 8000e1e:	0002      	movs	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d901      	bls.n	8000e2c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e193      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e30:	2202      	movs	r2, #2
 8000e32:	4013      	ands	r3, r2
 8000e34:	d1f1      	bne.n	8000e1a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d100      	bne.n	8000e42 <HAL_RCC_OscConfig+0x2fe>
 8000e40:	e0c6      	b.n	8000fd0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e42:	231f      	movs	r3, #31
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2238      	movs	r2, #56	; 0x38
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b20      	cmp	r3, #32
 8000e54:	d11e      	bne.n	8000e94 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_RCC_OscConfig+0x32c>)
 8000e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d100      	bne.n	8000e62 <HAL_RCC_OscConfig+0x31e>
 8000e60:	e0b6      	b.n	8000fd0 <HAL_RCC_OscConfig+0x48c>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d000      	beq.n	8000e6c <HAL_RCC_OscConfig+0x328>
 8000e6a:	e0b1      	b.n	8000fd0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e171      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
 8000e70:	40021000 	.word	0x40021000
 8000e74:	fffeffff 	.word	0xfffeffff
 8000e78:	fffbffff 	.word	0xfffbffff
 8000e7c:	ffff80ff 	.word	0xffff80ff
 8000e80:	ffffc7ff 	.word	0xffffc7ff
 8000e84:	00f42400 	.word	0x00f42400
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000004 	.word	0x20000004
 8000e90:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000e94:	4bb1      	ldr	r3, [pc, #708]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	055b      	lsls	r3, r3, #21
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d101      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x360>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <HAL_RCC_OscConfig+0x362>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d011      	beq.n	8000ece <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4bac      	ldr	r3, [pc, #688]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eae:	4bab      	ldr	r3, [pc, #684]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0549      	lsls	r1, r1, #21
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000eb8:	4ba8      	ldr	r3, [pc, #672]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	055b      	lsls	r3, r3, #21
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000ec6:	231f      	movs	r3, #31
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ece:	4ba4      	ldr	r3, [pc, #656]	; (8001160 <HAL_RCC_OscConfig+0x61c>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d11a      	bne.n	8000f10 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000eda:	4ba1      	ldr	r3, [pc, #644]	; (8001160 <HAL_RCC_OscConfig+0x61c>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4ba0      	ldr	r3, [pc, #640]	; (8001160 <HAL_RCC_OscConfig+0x61c>)
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	0049      	lsls	r1, r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fb96 	bl	8000618 <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef2:	f7ff fb91 	bl	8000618 <HAL_GetTick>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e127      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f04:	4b96      	ldr	r3, [pc, #600]	; (8001160 <HAL_RCC_OscConfig+0x61c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d106      	bne.n	8000f26 <HAL_RCC_OscConfig+0x3e2>
 8000f18:	4b90      	ldr	r3, [pc, #576]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000f1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f1c:	4b8f      	ldr	r3, [pc, #572]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000f1e:	2101      	movs	r1, #1
 8000f20:	430a      	orrs	r2, r1
 8000f22:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f24:	e01c      	b.n	8000f60 <HAL_RCC_OscConfig+0x41c>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b05      	cmp	r3, #5
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x404>
 8000f2e:	4b8b      	ldr	r3, [pc, #556]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000f30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f32:	4b8a      	ldr	r3, [pc, #552]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000f34:	2104      	movs	r1, #4
 8000f36:	430a      	orrs	r2, r1
 8000f38:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f3a:	4b88      	ldr	r3, [pc, #544]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000f3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f3e:	4b87      	ldr	r3, [pc, #540]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000f40:	2101      	movs	r1, #1
 8000f42:	430a      	orrs	r2, r1
 8000f44:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f46:	e00b      	b.n	8000f60 <HAL_RCC_OscConfig+0x41c>
 8000f48:	4b84      	ldr	r3, [pc, #528]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000f4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f4c:	4b83      	ldr	r3, [pc, #524]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	438a      	bics	r2, r1
 8000f52:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f54:	4b81      	ldr	r3, [pc, #516]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000f56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f58:	4b80      	ldr	r3, [pc, #512]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	438a      	bics	r2, r1
 8000f5e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d014      	beq.n	8000f92 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f68:	f7ff fb56 	bl	8000618 <HAL_GetTick>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f70:	e009      	b.n	8000f86 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f72:	f7ff fb51 	bl	8000618 <HAL_GetTick>
 8000f76:	0002      	movs	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	4a79      	ldr	r2, [pc, #484]	; (8001164 <HAL_RCC_OscConfig+0x620>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e0e6      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f86:	4b75      	ldr	r3, [pc, #468]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d0f0      	beq.n	8000f72 <HAL_RCC_OscConfig+0x42e>
 8000f90:	e013      	b.n	8000fba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f92:	f7ff fb41 	bl	8000618 <HAL_GetTick>
 8000f96:	0003      	movs	r3, r0
 8000f98:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f9a:	e009      	b.n	8000fb0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fb3c 	bl	8000618 <HAL_GetTick>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	4a6f      	ldr	r2, [pc, #444]	; (8001164 <HAL_RCC_OscConfig+0x620>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e0d1      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fb0:	4b6a      	ldr	r3, [pc, #424]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000fba:	231f      	movs	r3, #31
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d105      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000fc4:	4b65      	ldr	r3, [pc, #404]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc8:	4b64      	ldr	r3, [pc, #400]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000fca:	4967      	ldr	r1, [pc, #412]	; (8001168 <HAL_RCC_OscConfig+0x624>)
 8000fcc:	400a      	ands	r2, r1
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d100      	bne.n	8000fda <HAL_RCC_OscConfig+0x496>
 8000fd8:	e0bb      	b.n	8001152 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fda:	4b60      	ldr	r3, [pc, #384]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2238      	movs	r2, #56	; 0x38
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b10      	cmp	r3, #16
 8000fe4:	d100      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x4a4>
 8000fe6:	e07b      	b.n	80010e0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d156      	bne.n	800109e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff0:	4b5a      	ldr	r3, [pc, #360]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b59      	ldr	r3, [pc, #356]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8000ff6:	495d      	ldr	r1, [pc, #372]	; (800116c <HAL_RCC_OscConfig+0x628>)
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fb0c 	bl	8000618 <HAL_GetTick>
 8001000:	0003      	movs	r3, r0
 8001002:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001006:	f7ff fb07 	bl	8000618 <HAL_GetTick>
 800100a:	0002      	movs	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e09d      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001018:	4b50      	ldr	r3, [pc, #320]	; (800115c <HAL_RCC_OscConfig+0x618>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	049b      	lsls	r3, r3, #18
 8001020:	4013      	ands	r3, r2
 8001022:	d1f0      	bne.n	8001006 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001024:	4b4d      	ldr	r3, [pc, #308]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4a51      	ldr	r2, [pc, #324]	; (8001170 <HAL_RCC_OscConfig+0x62c>)
 800102a:	4013      	ands	r3, r2
 800102c:	0019      	movs	r1, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a1a      	ldr	r2, [r3, #32]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	431a      	orrs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001050:	431a      	orrs	r2, r3
 8001052:	4b42      	ldr	r3, [pc, #264]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8001054:	430a      	orrs	r2, r1
 8001056:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001058:	4b40      	ldr	r3, [pc, #256]	; (800115c <HAL_RCC_OscConfig+0x618>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b3f      	ldr	r3, [pc, #252]	; (800115c <HAL_RCC_OscConfig+0x618>)
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	0449      	lsls	r1, r1, #17
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001066:	4b3d      	ldr	r3, [pc, #244]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <HAL_RCC_OscConfig+0x618>)
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	0549      	lsls	r1, r1, #21
 8001070:	430a      	orrs	r2, r1
 8001072:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff fad0 	bl	8000618 <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff facb 	bl	8000618 <HAL_GetTick>
 8001082:	0002      	movs	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e061      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001090:	4b32      	ldr	r3, [pc, #200]	; (800115c <HAL_RCC_OscConfig+0x618>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	049b      	lsls	r3, r3, #18
 8001098:	4013      	ands	r3, r2
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x53a>
 800109c:	e059      	b.n	8001152 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <HAL_RCC_OscConfig+0x618>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <HAL_RCC_OscConfig+0x618>)
 80010a4:	4931      	ldr	r1, [pc, #196]	; (800116c <HAL_RCC_OscConfig+0x628>)
 80010a6:	400a      	ands	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010aa:	f7ff fab5 	bl	8000618 <HAL_GetTick>
 80010ae:	0003      	movs	r3, r0
 80010b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b4:	f7ff fab0 	bl	8000618 <HAL_GetTick>
 80010b8:	0002      	movs	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e046      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_RCC_OscConfig+0x618>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	049b      	lsls	r3, r3, #18
 80010ce:	4013      	ands	r3, r2
 80010d0:	d1f0      	bne.n	80010b4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_RCC_OscConfig+0x618>)
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_RCC_OscConfig+0x618>)
 80010d8:	4926      	ldr	r1, [pc, #152]	; (8001174 <HAL_RCC_OscConfig+0x630>)
 80010da:	400a      	ands	r2, r1
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	e038      	b.n	8001152 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e033      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_RCC_OscConfig+0x618>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2203      	movs	r2, #3
 80010f6:	401a      	ands	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d126      	bne.n	800114e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2270      	movs	r2, #112	; 0x70
 8001104:	401a      	ands	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110a:	429a      	cmp	r2, r3
 800110c:	d11f      	bne.n	800114e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	23fe      	movs	r3, #254	; 0xfe
 8001112:	01db      	lsls	r3, r3, #7
 8001114:	401a      	ands	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800111c:	429a      	cmp	r2, r3
 800111e:	d116      	bne.n	800114e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	23f8      	movs	r3, #248	; 0xf8
 8001124:	039b      	lsls	r3, r3, #14
 8001126:	401a      	ands	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800112c:	429a      	cmp	r2, r3
 800112e:	d10e      	bne.n	800114e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	23e0      	movs	r3, #224	; 0xe0
 8001134:	051b      	lsls	r3, r3, #20
 8001136:	401a      	ands	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800113c:	429a      	cmp	r2, r3
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	0f5b      	lsrs	r3, r3, #29
 8001144:	075a      	lsls	r2, r3, #29
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800114a:	429a      	cmp	r2, r3
 800114c:	d001      	beq.n	8001152 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b008      	add	sp, #32
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	40007000 	.word	0x40007000
 8001164:	00001388 	.word	0x00001388
 8001168:	efffffff 	.word	0xefffffff
 800116c:	feffffff 	.word	0xfeffffff
 8001170:	11c1808c 	.word	0x11c1808c
 8001174:	eefefffc 	.word	0xeefefffc

08001178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0e9      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800118c:	4b76      	ldr	r3, [pc, #472]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2207      	movs	r2, #7
 8001192:	4013      	ands	r3, r2
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d91e      	bls.n	80011d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	4b73      	ldr	r3, [pc, #460]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2207      	movs	r2, #7
 80011a0:	4393      	bics	r3, r2
 80011a2:	0019      	movs	r1, r3
 80011a4:	4b70      	ldr	r3, [pc, #448]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80011ac:	f7ff fa34 	bl	8000618 <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011b4:	e009      	b.n	80011ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b6:	f7ff fa2f 	bl	8000618 <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	4a6a      	ldr	r2, [pc, #424]	; (800136c <HAL_RCC_ClockConfig+0x1f4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e0ca      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011ca:	4b67      	ldr	r3, [pc, #412]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2207      	movs	r2, #7
 80011d0:	4013      	ands	r3, r2
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d1ee      	bne.n	80011b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2202      	movs	r2, #2
 80011de:	4013      	ands	r3, r2
 80011e0:	d015      	beq.n	800120e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2204      	movs	r2, #4
 80011e8:	4013      	ands	r3, r2
 80011ea:	d006      	beq.n	80011fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011ec:	4b60      	ldr	r3, [pc, #384]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 80011f2:	21e0      	movs	r1, #224	; 0xe0
 80011f4:	01c9      	lsls	r1, r1, #7
 80011f6:	430a      	orrs	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fa:	4b5d      	ldr	r3, [pc, #372]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	4a5d      	ldr	r2, [pc, #372]	; (8001374 <HAL_RCC_ClockConfig+0x1fc>)
 8001200:	4013      	ands	r3, r2
 8001202:	0019      	movs	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 800120a:	430a      	orrs	r2, r1
 800120c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2201      	movs	r2, #1
 8001214:	4013      	ands	r3, r2
 8001216:	d057      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d107      	bne.n	8001230 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001220:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	029b      	lsls	r3, r3, #10
 8001228:	4013      	ands	r3, r2
 800122a:	d12b      	bne.n	8001284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e097      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d107      	bne.n	8001248 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001238:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	049b      	lsls	r3, r3, #18
 8001240:	4013      	ands	r3, r2
 8001242:	d11f      	bne.n	8001284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e08b      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d107      	bne.n	8001260 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4013      	ands	r3, r2
 800125a:	d113      	bne.n	8001284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e07f      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d106      	bne.n	8001276 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001268:	4b41      	ldr	r3, [pc, #260]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 800126a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126c:	2202      	movs	r2, #2
 800126e:	4013      	ands	r3, r2
 8001270:	d108      	bne.n	8001284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e074      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d101      	bne.n	8001284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e06d      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001284:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2207      	movs	r2, #7
 800128a:	4393      	bics	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001294:	430a      	orrs	r2, r1
 8001296:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001298:	f7ff f9be 	bl	8000618 <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a0:	e009      	b.n	80012b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a2:	f7ff f9b9 	bl	8000618 <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a2f      	ldr	r2, [pc, #188]	; (800136c <HAL_RCC_ClockConfig+0x1f4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e054      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2238      	movs	r2, #56	; 0x38
 80012bc:	401a      	ands	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d1ec      	bne.n	80012a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2207      	movs	r2, #7
 80012ce:	4013      	ands	r3, r2
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d21e      	bcs.n	8001314 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2207      	movs	r2, #7
 80012dc:	4393      	bics	r3, r2
 80012de:	0019      	movs	r1, r3
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012e8:	f7ff f996 	bl	8000618 <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012f0:	e009      	b.n	8001306 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f2:	f7ff f991 	bl	8000618 <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	4a1b      	ldr	r2, [pc, #108]	; (800136c <HAL_RCC_ClockConfig+0x1f4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e02c      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2207      	movs	r2, #7
 800130c:	4013      	ands	r3, r2
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d1ee      	bne.n	80012f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2204      	movs	r2, #4
 800131a:	4013      	ands	r3, r2
 800131c:	d009      	beq.n	8001332 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	4a15      	ldr	r2, [pc, #84]	; (8001378 <HAL_RCC_ClockConfig+0x200>)
 8001324:	4013      	ands	r3, r2
 8001326:	0019      	movs	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 800132e:	430a      	orrs	r2, r1
 8001330:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001332:	f000 f829 	bl	8001388 <HAL_RCC_GetSysClockFreq>
 8001336:	0001      	movs	r1, r0
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	220f      	movs	r2, #15
 8001340:	401a      	ands	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_RCC_ClockConfig+0x204>)
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	58d3      	ldr	r3, [r2, r3]
 8001348:	221f      	movs	r2, #31
 800134a:	4013      	ands	r3, r2
 800134c:	000a      	movs	r2, r1
 800134e:	40da      	lsrs	r2, r3
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_ClockConfig+0x208>)
 8001352:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_ClockConfig+0x20c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff f913 	bl	8000584 <HAL_InitTick>
 800135e:	0003      	movs	r3, r0
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40022000 	.word	0x40022000
 800136c:	00001388 	.word	0x00001388
 8001370:	40021000 	.word	0x40021000
 8001374:	fffff0ff 	.word	0xfffff0ff
 8001378:	ffff8fff 	.word	0xffff8fff
 800137c:	08003488 	.word	0x08003488
 8001380:	20000000 	.word	0x20000000
 8001384:	20000004 	.word	0x20000004

08001388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800138e:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2238      	movs	r2, #56	; 0x38
 8001394:	4013      	ands	r3, r2
 8001396:	d10f      	bne.n	80013b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001398:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	0adb      	lsrs	r3, r3, #11
 800139e:	2207      	movs	r2, #7
 80013a0:	4013      	ands	r3, r2
 80013a2:	2201      	movs	r2, #1
 80013a4:	409a      	lsls	r2, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	4835      	ldr	r0, [pc, #212]	; (8001484 <HAL_RCC_GetSysClockFreq+0xfc>)
 80013ae:	f7fe feab 	bl	8000108 <__udivsi3>
 80013b2:	0003      	movs	r3, r0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	e05d      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013b8:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2238      	movs	r2, #56	; 0x38
 80013be:	4013      	ands	r3, r2
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d102      	bne.n	80013ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_RCC_GetSysClockFreq+0x100>)
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	e054      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2238      	movs	r2, #56	; 0x38
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d138      	bne.n	8001448 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2203      	movs	r2, #3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	2207      	movs	r2, #7
 80013e8:	4013      	ands	r3, r2
 80013ea:	3301      	adds	r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d10d      	bne.n	8001410 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	4824      	ldr	r0, [pc, #144]	; (8001488 <HAL_RCC_GetSysClockFreq+0x100>)
 80013f8:	f7fe fe86 	bl	8000108 <__udivsi3>
 80013fc:	0003      	movs	r3, r0
 80013fe:	0019      	movs	r1, r3
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	227f      	movs	r2, #127	; 0x7f
 8001408:	4013      	ands	r3, r2
 800140a:	434b      	muls	r3, r1
 800140c:	617b      	str	r3, [r7, #20]
        break;
 800140e:	e00d      	b.n	800142c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	481c      	ldr	r0, [pc, #112]	; (8001484 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001414:	f7fe fe78 	bl	8000108 <__udivsi3>
 8001418:	0003      	movs	r3, r0
 800141a:	0019      	movs	r1, r3
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	227f      	movs	r2, #127	; 0x7f
 8001424:	4013      	ands	r3, r2
 8001426:	434b      	muls	r3, r1
 8001428:	617b      	str	r3, [r7, #20]
        break;
 800142a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0f5b      	lsrs	r3, r3, #29
 8001432:	2207      	movs	r2, #7
 8001434:	4013      	ands	r3, r2
 8001436:	3301      	adds	r3, #1
 8001438:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	6978      	ldr	r0, [r7, #20]
 800143e:	f7fe fe63 	bl	8000108 <__udivsi3>
 8001442:	0003      	movs	r3, r0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	e015      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2238      	movs	r2, #56	; 0x38
 800144e:	4013      	ands	r3, r2
 8001450:	2b20      	cmp	r3, #32
 8001452:	d103      	bne.n	800145c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2238      	movs	r2, #56	; 0x38
 8001462:	4013      	ands	r3, r2
 8001464:	2b18      	cmp	r3, #24
 8001466:	d103      	bne.n	8001470 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001468:	23fa      	movs	r3, #250	; 0xfa
 800146a:	01db      	lsls	r3, r3, #7
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	e001      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001474:	693b      	ldr	r3, [r7, #16]
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b006      	add	sp, #24
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	40021000 	.word	0x40021000
 8001484:	00f42400 	.word	0x00f42400
 8001488:	007a1200 	.word	0x007a1200

0800148c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3308      	adds	r3, #8
 8001498:	001a      	movs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4252      	negs	r2, r2
 80014a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3308      	adds	r3, #8
 80014aa:	001a      	movs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3308      	adds	r3, #8
 80014b4:	001a      	movs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}

080014de <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3301      	adds	r3, #1
 80014f2:	d103      	bne.n	80014fc <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e00c      	b.n	8001516 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3308      	adds	r3, #8
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e002      	b.n	800150a <vListInsert+0x2c>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	429a      	cmp	r2, r3
 8001514:	d2f6      	bcs.n	8001504 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	601a      	str	r2, [r3, #0]
}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b004      	add	sp, #16
 8001548:	bd80      	pop	{r7, pc}

0800154a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6892      	ldr	r2, [r2, #8]
 8001560:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6852      	ldr	r2, [r2, #4]
 800156a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	d103      	bne.n	800157e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b004      	add	sp, #16
 8001598:	bd80      	pop	{r7, pc}

0800159a <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800159a:	b5b0      	push	{r4, r5, r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80015a4:	2301      	movs	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <xQueueGenericReset+0x1c>
 80015b2:	b672      	cpsid	i
 80015b4:	e7fe      	b.n	80015b4 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d100      	bne.n	80015be <xQueueGenericReset+0x24>
 80015bc:	e06a      	b.n	8001694 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d066      	beq.n	8001694 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ce:	2400      	movs	r4, #0
 80015d0:	0c15      	lsrs	r5, r2, #16
 80015d2:	0c19      	lsrs	r1, r3, #16
 80015d4:	b2a8      	uxth	r0, r5
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d104      	bne.n	80015e4 <xQueueGenericReset+0x4a>
 80015da:	b288      	uxth	r0, r1
 80015dc:	2800      	cmp	r0, #0
 80015de:	d013      	beq.n	8001608 <xQueueGenericReset+0x6e>
 80015e0:	1c10      	adds	r0, r2, #0
 80015e2:	e004      	b.n	80015ee <xQueueGenericReset+0x54>
 80015e4:	b289      	uxth	r1, r1
 80015e6:	2900      	cmp	r1, #0
 80015e8:	d10d      	bne.n	8001606 <xQueueGenericReset+0x6c>
 80015ea:	1c29      	adds	r1, r5, #0
 80015ec:	1c18      	adds	r0, r3, #0
 80015ee:	b292      	uxth	r2, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	435a      	muls	r2, r3
 80015f4:	b283      	uxth	r3, r0
 80015f6:	b289      	uxth	r1, r1
 80015f8:	434b      	muls	r3, r1
 80015fa:	0c12      	lsrs	r2, r2, #16
 80015fc:	189b      	adds	r3, r3, r2
 80015fe:	141b      	asrs	r3, r3, #16
 8001600:	b29b      	uxth	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d000      	beq.n	8001608 <xQueueGenericReset+0x6e>
 8001606:	2401      	movs	r4, #1
 8001608:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 800160a:	d143      	bne.n	8001694 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 800160c:	f001 fca8 	bl	8002f60 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	434b      	muls	r3, r1
 800161e:	18d2      	adds	r2, r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2200      	movs	r2, #0
 8001628:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163a:	1e59      	subs	r1, r3, #1
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	434b      	muls	r3, r1
 8001642:	18d2      	adds	r2, r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2244      	movs	r2, #68	; 0x44
 800164c:	21ff      	movs	r1, #255	; 0xff
 800164e:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2245      	movs	r2, #69	; 0x45
 8001654:	21ff      	movs	r1, #255	; 0xff
 8001656:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d013      	beq.n	800168e <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3310      	adds	r3, #16
 800166a:	0018      	movs	r0, r3
 800166c:	f000 fee8 	bl	8002440 <xTaskRemoveFromEventList>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d00c      	beq.n	800168e <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001674:	f001 fc64 	bl	8002f40 <vPortYield>
 8001678:	e009      	b.n	800168e <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3310      	adds	r3, #16
 800167e:	0018      	movs	r0, r3
 8001680:	f7ff ff04 	bl	800148c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	3324      	adds	r3, #36	; 0x24
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff feff 	bl	800148c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800168e:	f001 fc79 	bl	8002f84 <vPortExitCritical>
 8001692:	e001      	b.n	8001698 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <xQueueGenericReset+0x108>
 800169e:	b672      	cpsid	i
 80016a0:	e7fe      	b.n	80016a0 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	0018      	movs	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b004      	add	sp, #16
 80016aa:	bdb0      	pop	{r4, r5, r7, pc}

080016ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	b08b      	sub	sp, #44	; 0x2c
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d047      	beq.n	8001754 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80016c4:	2000      	movs	r0, #0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	0c19      	lsrs	r1, r3, #16
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1c1e      	adds	r6, r3, #0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	0c1b      	lsrs	r3, r3, #16
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	1c15      	adds	r5, r2, #0
 80016d6:	b28a      	uxth	r2, r1
 80016d8:	2a00      	cmp	r2, #0
 80016da:	d105      	bne.n	80016e8 <xQueueGenericCreate+0x3c>
 80016dc:	b29a      	uxth	r2, r3
 80016de:	2a00      	cmp	r2, #0
 80016e0:	d013      	beq.n	800170a <xQueueGenericCreate+0x5e>
 80016e2:	1c19      	adds	r1, r3, #0
 80016e4:	1c34      	adds	r4, r6, #0
 80016e6:	e003      	b.n	80016f0 <xQueueGenericCreate+0x44>
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10c      	bne.n	8001708 <xQueueGenericCreate+0x5c>
 80016ee:	1c2c      	adds	r4, r5, #0
 80016f0:	b2b3      	uxth	r3, r6
 80016f2:	b2aa      	uxth	r2, r5
 80016f4:	435a      	muls	r2, r3
 80016f6:	b2a3      	uxth	r3, r4
 80016f8:	b289      	uxth	r1, r1
 80016fa:	434b      	muls	r3, r1
 80016fc:	0c12      	lsrs	r2, r2, #16
 80016fe:	189b      	adds	r3, r3, r2
 8001700:	141b      	asrs	r3, r3, #16
 8001702:	b29b      	uxth	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d000      	beq.n	800170a <xQueueGenericCreate+0x5e>
 8001708:	2001      	movs	r0, #1
 800170a:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800170c:	d122      	bne.n	8001754 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001714:	3351      	adds	r3, #81	; 0x51
 8001716:	d81d      	bhi.n	8001754 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	4353      	muls	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	3350      	adds	r3, #80	; 0x50
 8001724:	0018      	movs	r0, r3
 8001726:	f001 fcb3 	bl	8003090 <pvPortMalloc>
 800172a:	0003      	movs	r3, r0
 800172c:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d014      	beq.n	800175e <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3350      	adds	r3, #80	; 0x50
 800173c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	781c      	ldrb	r4, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	0023      	movs	r3, r4
 800174e:	f000 f80b 	bl	8001768 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001752:	e004      	b.n	800175e <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <xQueueGenericCreate+0xb2>
 800175a:	b672      	cpsid	i
 800175c:	e7fe      	b.n	800175c <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800175e:	69fb      	ldr	r3, [r7, #28]
    }
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	b009      	add	sp, #36	; 0x24
 8001766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001768 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	001a      	movs	r2, r3
 8001776:	1cfb      	adds	r3, r7, #3
 8001778:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d103      	bne.n	8001788 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e002      	b.n	800178e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2101      	movs	r1, #1
 800179e:	0018      	movs	r0, r3
 80017a0:	f7ff fefb 	bl	800159a <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1cfa      	adds	r2, r7, #3
 80017a8:	214c      	movs	r1, #76	; 0x4c
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b004      	add	sp, #16
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b08a      	sub	sp, #40	; 0x28
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <xQueueReceive+0x1e>
 80017d0:	b672      	cpsid	i
 80017d2:	e7fe      	b.n	80017d2 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <xQueueReceive+0x2c>
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <xQueueReceive+0x30>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <xQueueReceive+0x32>
 80017e6:	2300      	movs	r3, #0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <xQueueReceive+0x3a>
 80017ec:	b672      	cpsid	i
 80017ee:	e7fe      	b.n	80017ee <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80017f0:	f001 f810 	bl	8002814 <xTaskGetSchedulerState>
 80017f4:	1e03      	subs	r3, r0, #0
 80017f6:	d102      	bne.n	80017fe <xQueueReceive+0x48>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <xQueueReceive+0x4c>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <xQueueReceive+0x4e>
 8001802:	2300      	movs	r3, #0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <xQueueReceive+0x56>
 8001808:	b672      	cpsid	i
 800180a:	e7fe      	b.n	800180a <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800180c:	f001 fba8 	bl	8002f60 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01a      	beq.n	8001852 <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	0011      	movs	r1, r2
 8001822:	0018      	movs	r0, r3
 8001824:	f000 f87c 	bl	8001920 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	1e5a      	subs	r2, r3, #1
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	3310      	adds	r3, #16
 800183c:	0018      	movs	r0, r3
 800183e:	f000 fdff 	bl	8002440 <xTaskRemoveFromEventList>
 8001842:	1e03      	subs	r3, r0, #0
 8001844:	d001      	beq.n	800184a <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001846:	f001 fb7b 	bl	8002f40 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800184a:	f001 fb9b 	bl	8002f84 <vPortExitCritical>
                return pdPASS;
 800184e:	2301      	movs	r3, #1
 8001850:	e062      	b.n	8001918 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001858:	f001 fb94 	bl	8002f84 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800185c:	2300      	movs	r3, #0
 800185e:	e05b      	b.n	8001918 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001866:	2314      	movs	r3, #20
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	0018      	movs	r0, r3
 800186c:	f000 feb2 	bl	80025d4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001870:	2301      	movs	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001874:	f001 fb86 	bl	8002f84 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001878:	f000 fb26 	bl	8001ec8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800187c:	f001 fb70 	bl	8002f60 <vPortEnterCritical>
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	2244      	movs	r2, #68	; 0x44
 8001884:	5c9b      	ldrb	r3, [r3, r2]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	3301      	adds	r3, #1
 800188a:	d103      	bne.n	8001894 <xQueueReceive+0xde>
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	2244      	movs	r2, #68	; 0x44
 8001890:	2100      	movs	r1, #0
 8001892:	5499      	strb	r1, [r3, r2]
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	2245      	movs	r2, #69	; 0x45
 8001898:	5c9b      	ldrb	r3, [r3, r2]
 800189a:	b25b      	sxtb	r3, r3
 800189c:	3301      	adds	r3, #1
 800189e:	d103      	bne.n	80018a8 <xQueueReceive+0xf2>
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	2245      	movs	r2, #69	; 0x45
 80018a4:	2100      	movs	r1, #0
 80018a6:	5499      	strb	r1, [r3, r2]
 80018a8:	f001 fb6c 	bl	8002f84 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80018ac:	1d3a      	adds	r2, r7, #4
 80018ae:	2314      	movs	r3, #20
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f000 fea1 	bl	80025fc <xTaskCheckForTimeOut>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d11e      	bne.n	80018fc <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 f8b1 	bl	8001a28 <prvIsQueueEmpty>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d011      	beq.n	80018ee <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	3324      	adds	r3, #36	; 0x24
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	0011      	movs	r1, r2
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 fd58 	bl	8002388 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 f846 	bl	800196c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80018e0:	f000 fafe 	bl	8001ee0 <xTaskResumeAll>
 80018e4:	1e03      	subs	r3, r0, #0
 80018e6:	d191      	bne.n	800180c <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 80018e8:	f001 fb2a 	bl	8002f40 <vPortYield>
 80018ec:	e78e      	b.n	800180c <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	0018      	movs	r0, r3
 80018f2:	f000 f83b 	bl	800196c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80018f6:	f000 faf3 	bl	8001ee0 <xTaskResumeAll>
 80018fa:	e787      	b.n	800180c <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	0018      	movs	r0, r3
 8001900:	f000 f834 	bl	800196c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001904:	f000 faec 	bl	8001ee0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	0018      	movs	r0, r3
 800190c:	f000 f88c 	bl	8001a28 <prvIsQueueEmpty>
 8001910:	1e03      	subs	r3, r0, #0
 8001912:	d100      	bne.n	8001916 <xQueueReceive+0x160>
 8001914:	e77a      	b.n	800180c <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001916:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b00a      	add	sp, #40	; 0x28
 800191e:	bd80      	pop	{r7, pc}

08001920 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d018      	beq.n	8001964 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	18d2      	adds	r2, r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	429a      	cmp	r2, r3
 800194a:	d303      	bcc.n	8001954 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68d9      	ldr	r1, [r3, #12]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	0018      	movs	r0, r3
 8001960:	f001 fd60 	bl	8003424 <memcpy>
    }
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b002      	add	sp, #8
 800196a:	bd80      	pop	{r7, pc}

0800196c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001974:	f001 faf4 	bl	8002f60 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001978:	230f      	movs	r3, #15
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	2145      	movs	r1, #69	; 0x45
 8001980:	5c52      	ldrb	r2, [r2, r1]
 8001982:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001984:	e013      	b.n	80019ae <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	2b00      	cmp	r3, #0
 800198c:	d016      	beq.n	80019bc <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3324      	adds	r3, #36	; 0x24
 8001992:	0018      	movs	r0, r3
 8001994:	f000 fd54 	bl	8002440 <xTaskRemoveFromEventList>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d001      	beq.n	80019a0 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800199c:	f000 fe82 	bl	80026a4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80019a0:	210f      	movs	r1, #15
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80019ae:	230f      	movs	r3, #15
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	dce5      	bgt.n	8001986 <prvUnlockQueue+0x1a>
 80019ba:	e000      	b.n	80019be <prvUnlockQueue+0x52>
                    break;
 80019bc:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2245      	movs	r2, #69	; 0x45
 80019c2:	21ff      	movs	r1, #255	; 0xff
 80019c4:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80019c6:	f001 fadd 	bl	8002f84 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80019ca:	f001 fac9 	bl	8002f60 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80019ce:	230e      	movs	r3, #14
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	2144      	movs	r1, #68	; 0x44
 80019d6:	5c52      	ldrb	r2, [r2, r1]
 80019d8:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80019da:	e013      	b.n	8001a04 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d016      	beq.n	8001a12 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3310      	adds	r3, #16
 80019e8:	0018      	movs	r0, r3
 80019ea:	f000 fd29 	bl	8002440 <xTaskRemoveFromEventList>
 80019ee:	1e03      	subs	r3, r0, #0
 80019f0:	d001      	beq.n	80019f6 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 80019f2:	f000 fe57 	bl	80026a4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80019f6:	210e      	movs	r1, #14
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a04:	230e      	movs	r3, #14
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dce5      	bgt.n	80019dc <prvUnlockQueue+0x70>
 8001a10:	e000      	b.n	8001a14 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8001a12:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2244      	movs	r2, #68	; 0x44
 8001a18:	21ff      	movs	r1, #255	; 0xff
 8001a1a:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001a1c:	f001 fab2 	bl	8002f84 <vPortExitCritical>
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b004      	add	sp, #16
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001a30:	f001 fa96 	bl	8002f60 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e001      	b.n	8001a46 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001a46:	f001 fa9d 	bl	8002f84 <vPortExitCritical>

    return xReturn;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b004      	add	sp, #16
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <vQueueAddToRegistry+0x18>
 8001a68:	b672      	cpsid	i
 8001a6a:	e7fe      	b.n	8001a6a <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d025      	beq.n	8001abe <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	e01f      	b.n	8001ab8 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001a78:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <vQueueAddToRegistry+0x84>)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	18d3      	adds	r3, r2, r3
 8001a80:	3304      	adds	r3, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d105      	bne.n	8001a96 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	00da      	lsls	r2, r3, #3
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <vQueueAddToRegistry+0x84>)
 8001a90:	18d3      	adds	r3, r2, r3
 8001a92:	60bb      	str	r3, [r7, #8]
                    break;
 8001a94:	e013      	b.n	8001abe <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10a      	bne.n	8001ab2 <vQueueAddToRegistry+0x5e>
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <vQueueAddToRegistry+0x84>)
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	00d2      	lsls	r2, r2, #3
 8001aa2:	58d3      	ldr	r3, [r2, r3]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d104      	bne.n	8001ab2 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	00da      	lsls	r2, r3, #3
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <vQueueAddToRegistry+0x84>)
 8001aae:	18d3      	adds	r3, r2, r3
 8001ab0:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b07      	cmp	r3, #7
 8001abc:	d9dc      	bls.n	8001a78 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b004      	add	sp, #16
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20001d8c 	.word	0x20001d8c

08001adc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001aec:	f001 fa38 	bl	8002f60 <vPortEnterCritical>
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2244      	movs	r2, #68	; 0x44
 8001af4:	5c9b      	ldrb	r3, [r3, r2]
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	d103      	bne.n	8001b04 <vQueueWaitForMessageRestricted+0x28>
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2244      	movs	r2, #68	; 0x44
 8001b00:	2100      	movs	r1, #0
 8001b02:	5499      	strb	r1, [r3, r2]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2245      	movs	r2, #69	; 0x45
 8001b08:	5c9b      	ldrb	r3, [r3, r2]
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	d103      	bne.n	8001b18 <vQueueWaitForMessageRestricted+0x3c>
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2245      	movs	r2, #69	; 0x45
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]
 8001b18:	f001 fa34 	bl	8002f84 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3324      	adds	r3, #36	; 0x24
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 fc49 	bl	80023c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7ff ff19 	bl	800196c <prvUnlockQueue>
    }
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b006      	add	sp, #24
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001b42:	b590      	push	{r4, r7, lr}
 8001b44:	b08d      	sub	sp, #52	; 0x34
 8001b46:	af04      	add	r7, sp, #16
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	1dbb      	adds	r3, r7, #6
 8001b50:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b52:	1dbb      	adds	r3, r7, #6
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f001 fa99 	bl	8003090 <pvPortMalloc>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d016      	beq.n	8001b96 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001b68:	2064      	movs	r0, #100	; 0x64
 8001b6a:	f001 fa91 	bl	8003090 <pvPortMalloc>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d009      	beq.n	8001b8c <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2264      	movs	r2, #100	; 0x64
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f001 fc59 	bl	8003436 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30
 8001b8a:	e006      	b.n	8001b9a <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f001 fb26 	bl	80031e0 <vPortFree>
 8001b94:	e001      	b.n	8001b9a <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d016      	beq.n	8001bce <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ba0:	1dbb      	adds	r3, r7, #6
 8001ba2:	881a      	ldrh	r2, [r3, #0]
 8001ba4:	683c      	ldr	r4, [r7, #0]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	2300      	movs	r3, #0
 8001bac:	9303      	str	r3, [sp, #12]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	9302      	str	r3, [sp, #8]
 8001bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	0023      	movs	r3, r4
 8001bbc:	f000 f810 	bl	8001be0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 f88c 	bl	8001ce0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	e002      	b.n	8001bd4 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	425b      	negs	r3, r3
 8001bd2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
    }
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b009      	add	sp, #36	; 0x24
 8001bdc:	bd90      	pop	{r4, r7, pc}
	...

08001be0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	21a5      	movs	r1, #165	; 0xa5
 8001bfa:	f001 fc1c 	bl	8003436 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <prvInitialiseNewTask+0xfc>)
 8001c06:	468c      	mov	ip, r1
 8001c08:	4463      	add	r3, ip
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	18d3      	adds	r3, r2, r3
 8001c0e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2207      	movs	r2, #7
 8001c14:	4393      	bics	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d001      	beq.n	8001c24 <prvInitialiseNewTask+0x44>
 8001c20:	b672      	cpsid	i
 8001c22:	e7fe      	b.n	8001c22 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01f      	beq.n	8001c6a <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e013      	b.n	8001c58 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	18d3      	adds	r3, r2, r3
 8001c36:	7818      	ldrb	r0, [r3, #0]
 8001c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c3a:	2134      	movs	r1, #52	; 0x34
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	18d3      	adds	r3, r2, r3
 8001c40:	185b      	adds	r3, r3, r1
 8001c42:	1c02      	adds	r2, r0, #0
 8001c44:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	18d3      	adds	r3, r2, r3
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d006      	beq.n	8001c60 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	d9e8      	bls.n	8001c30 <prvInitialiseNewTask+0x50>
 8001c5e:	e000      	b.n	8001c62 <prvInitialiseNewTask+0x82>
            {
                break;
 8001c60:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	2243      	movs	r2, #67	; 0x43
 8001c66:	2100      	movs	r1, #0
 8001c68:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2b37      	cmp	r3, #55	; 0x37
 8001c6e:	d901      	bls.n	8001c74 <prvInitialiseNewTask+0x94>
 8001c70:	b672      	cpsid	i
 8001c72:	e7fe      	b.n	8001c72 <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	2b37      	cmp	r3, #55	; 0x37
 8001c78:	d901      	bls.n	8001c7e <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001c7a:	2337      	movs	r3, #55	; 0x37
 8001c7c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	6a3a      	ldr	r2, [r7, #32]
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c86:	6a3a      	ldr	r2, [r7, #32]
 8001c88:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff fc1a 	bl	80014c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c96:	3318      	adds	r3, #24
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff fc15 	bl	80014c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	2238      	movs	r2, #56	; 0x38
 8001ca8:	1ad2      	subs	r2, r2, r3
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	68f9      	ldr	r1, [r7, #12]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f001 f8b6 	bl	8002e2c <pxPortInitialiseStack>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b006      	add	sp, #24
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	3fffffff 	.word	0x3fffffff

08001ce0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001ce8:	f001 f93a 	bl	8002f60 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001cec:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <prvAddNewTaskToReadyList+0x104>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <prvAddNewTaskToReadyList+0x104>)
 8001cf4:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <prvAddNewTaskToReadyList+0x108>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <prvAddNewTaskToReadyList+0x108>)
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d04:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <prvAddNewTaskToReadyList+0x104>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d110      	bne.n	8001d2e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001d0c:	f000 fce4 	bl	80026d8 <prvInitialiseTaskLists>
 8001d10:	e00d      	b.n	8001d2e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001d12:	4b36      	ldr	r3, [pc, #216]	; (8001dec <prvAddNewTaskToReadyList+0x10c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <prvAddNewTaskToReadyList+0x108>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d802      	bhi.n	8001d2e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <prvAddNewTaskToReadyList+0x108>)
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <prvAddNewTaskToReadyList+0x110>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <prvAddNewTaskToReadyList+0x110>)
 8001d36:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <prvAddNewTaskToReadyList+0x110>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <prvAddNewTaskToReadyList+0x114>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d903      	bls.n	8001d54 <prvAddNewTaskToReadyList+0x74>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <prvAddNewTaskToReadyList+0x114>)
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d58:	4927      	ldr	r1, [pc, #156]	; (8001df8 <prvAddNewTaskToReadyList+0x118>)
 8001d5a:	0013      	movs	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	189b      	adds	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	18cb      	adds	r3, r1, r3
 8001d64:	3304      	adds	r3, #4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	3204      	adds	r2, #4
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	1d1a      	adds	r2, r3, #4
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8e:	0013      	movs	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	189b      	adds	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <prvAddNewTaskToReadyList+0x118>)
 8001d98:	189a      	adds	r2, r3, r2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	615a      	str	r2, [r3, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da2:	4915      	ldr	r1, [pc, #84]	; (8001df8 <prvAddNewTaskToReadyList+0x118>)
 8001da4:	0013      	movs	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	189b      	adds	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	585b      	ldr	r3, [r3, r1]
 8001dae:	1c58      	adds	r0, r3, #1
 8001db0:	4911      	ldr	r1, [pc, #68]	; (8001df8 <prvAddNewTaskToReadyList+0x118>)
 8001db2:	0013      	movs	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	189b      	adds	r3, r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001dbc:	f001 f8e2 	bl	8002f84 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <prvAddNewTaskToReadyList+0x10c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <prvAddNewTaskToReadyList+0x108>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d201      	bcs.n	8001dda <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001dd6:	f001 f8b3 	bl	8002f40 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b004      	add	sp, #16
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	20000504 	.word	0x20000504
 8001de8:	20000030 	.word	0x20000030
 8001dec:	20000510 	.word	0x20000510
 8001df0:	20000520 	.word	0x20000520
 8001df4:	2000050c 	.word	0x2000050c
 8001df8:	20000034 	.word	0x20000034

08001dfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <vTaskDelay+0x48>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <vTaskDelay+0x1e>
 8001e16:	b672      	cpsid	i
 8001e18:	e7fe      	b.n	8001e18 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8001e1a:	f000 f855 	bl	8001ec8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2100      	movs	r1, #0
 8001e22:	0018      	movs	r0, r3
 8001e24:	f000 fd12 	bl	800284c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001e28:	f000 f85a 	bl	8001ee0 <xTaskResumeAll>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8001e36:	f001 f883 	bl	8002f40 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	2000052c 	.word	0x2000052c

08001e48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001e4e:	4917      	ldr	r1, [pc, #92]	; (8001eac <vTaskStartScheduler+0x64>)
 8001e50:	4817      	ldr	r0, [pc, #92]	; (8001eb0 <vTaskStartScheduler+0x68>)
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <vTaskStartScheduler+0x6c>)
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	2300      	movs	r3, #0
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2280      	movs	r2, #128	; 0x80
 8001e5e:	f7ff fe70 	bl	8001b42 <xTaskCreate>
 8001e62:	0003      	movs	r3, r0
 8001e64:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d103      	bne.n	8001e74 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8001e6c:	f000 fd5c 	bl	8002928 <xTimerCreateTimerTask>
 8001e70:	0003      	movs	r3, r0
 8001e72:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d10d      	bne.n	8001e96 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8001e7a:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <vTaskStartScheduler+0x70>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4252      	negs	r2, r2
 8001e82:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <vTaskStartScheduler+0x74>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <vTaskStartScheduler+0x78>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001e90:	f001 f832 	bl	8002ef8 <xPortStartScheduler>
 8001e94:	e004      	b.n	8001ea0 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <vTaskStartScheduler+0x58>
 8001e9c:	b672      	cpsid	i
 8001e9e:	e7fe      	b.n	8001e9e <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <vTaskStartScheduler+0x7c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	46c0      	nop			; (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	08003470 	.word	0x08003470
 8001eb0:	080026b9 	.word	0x080026b9
 8001eb4:	20000528 	.word	0x20000528
 8001eb8:	20000524 	.word	0x20000524
 8001ebc:	20000510 	.word	0x20000510
 8001ec0:	20000508 	.word	0x20000508
 8001ec4:	2000000c 	.word	0x2000000c

08001ec8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <vTaskSuspendAll+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	4b02      	ldr	r3, [pc, #8]	; (8001edc <vTaskSuspendAll+0x14>)
 8001ed4:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2000052c 	.word	0x2000052c

08001ee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001eee:	4b68      	ldr	r3, [pc, #416]	; (8002090 <xTaskResumeAll+0x1b0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <xTaskResumeAll+0x1a>
 8001ef6:	b672      	cpsid	i
 8001ef8:	e7fe      	b.n	8001ef8 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001efa:	f001 f831 	bl	8002f60 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001efe:	4b64      	ldr	r3, [pc, #400]	; (8002090 <xTaskResumeAll+0x1b0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	1e5a      	subs	r2, r3, #1
 8001f04:	4b62      	ldr	r3, [pc, #392]	; (8002090 <xTaskResumeAll+0x1b0>)
 8001f06:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f08:	4b61      	ldr	r3, [pc, #388]	; (8002090 <xTaskResumeAll+0x1b0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d000      	beq.n	8001f12 <xTaskResumeAll+0x32>
 8001f10:	e0b7      	b.n	8002082 <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f12:	4b60      	ldr	r3, [pc, #384]	; (8002094 <xTaskResumeAll+0x1b4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d100      	bne.n	8001f1c <xTaskResumeAll+0x3c>
 8001f1a:	e0b2      	b.n	8002082 <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f1c:	e089      	b.n	8002032 <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f1e:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <xTaskResumeAll+0x1b8>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	6a12      	ldr	r2, [r2, #32]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	69d2      	ldr	r2, [r2, #28]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3318      	adds	r3, #24
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d103      	bne.n	8001f54 <xTaskResumeAll+0x74>
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2200      	movs	r2, #0
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	1e5a      	subs	r2, r3, #1
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	68d2      	ldr	r2, [r2, #12]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	6892      	ldr	r2, [r2, #8]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3304      	adds	r3, #4
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d103      	bne.n	8001f92 <xTaskResumeAll+0xb2>
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2200      	movs	r2, #0
 8001f96:	615a      	str	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	1e5a      	subs	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	; (800209c <xTaskResumeAll+0x1bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d903      	bls.n	8001fb6 <xTaskResumeAll+0xd6>
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <xTaskResumeAll+0x1bc>)
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fba:	4939      	ldr	r1, [pc, #228]	; (80020a0 <xTaskResumeAll+0x1c0>)
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	189b      	adds	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	18cb      	adds	r3, r1, r3
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	3204      	adds	r2, #4
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	1d1a      	adds	r2, r3, #4
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	189b      	adds	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <xTaskResumeAll+0x1c0>)
 8001ffa:	189a      	adds	r2, r3, r2
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	615a      	str	r2, [r3, #20]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002004:	4926      	ldr	r1, [pc, #152]	; (80020a0 <xTaskResumeAll+0x1c0>)
 8002006:	0013      	movs	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	189b      	adds	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	585b      	ldr	r3, [r3, r1]
 8002010:	1c58      	adds	r0, r3, #1
 8002012:	4923      	ldr	r1, [pc, #140]	; (80020a0 <xTaskResumeAll+0x1c0>)
 8002014:	0013      	movs	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	189b      	adds	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <xTaskResumeAll+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	429a      	cmp	r2, r3
 800202a:	d302      	bcc.n	8002032 <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <xTaskResumeAll+0x1c8>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002032:	4b19      	ldr	r3, [pc, #100]	; (8002098 <xTaskResumeAll+0x1b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d000      	beq.n	800203c <xTaskResumeAll+0x15c>
 800203a:	e770      	b.n	8001f1e <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002042:	f000 fbcd 	bl	80027e0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <xTaskResumeAll+0x1cc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00f      	beq.n	8002072 <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002052:	f000 f83b 	bl	80020cc <xTaskIncrementTick>
 8002056:	1e03      	subs	r3, r0, #0
 8002058:	d002      	beq.n	8002060 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <xTaskResumeAll+0x1c8>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3b01      	subs	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f2      	bne.n	8002052 <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <xTaskResumeAll+0x1cc>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <xTaskResumeAll+0x1c8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800207a:	2301      	movs	r3, #1
 800207c:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800207e:	f000 ff5f 	bl	8002f40 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002082:	f000 ff7f 	bl	8002f84 <vPortExitCritical>

    return xAlreadyYielded;
 8002086:	693b      	ldr	r3, [r7, #16]
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b006      	add	sp, #24
 800208e:	bd80      	pop	{r7, pc}
 8002090:	2000052c 	.word	0x2000052c
 8002094:	20000504 	.word	0x20000504
 8002098:	200004c4 	.word	0x200004c4
 800209c:	2000050c 	.word	0x2000050c
 80020a0:	20000034 	.word	0x20000034
 80020a4:	20000030 	.word	0x20000030
 80020a8:	20000518 	.word	0x20000518
 80020ac:	20000514 	.word	0x20000514

080020b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <xTaskGetTickCount+0x18>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80020bc:	687b      	ldr	r3, [r7, #4]
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	20000508 	.word	0x20000508

080020cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020d6:	4b78      	ldr	r3, [pc, #480]	; (80022b8 <xTaskIncrementTick+0x1ec>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d000      	beq.n	80020e0 <xTaskIncrementTick+0x14>
 80020de:	e0e0      	b.n	80022a2 <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80020e0:	4b76      	ldr	r3, [pc, #472]	; (80022bc <xTaskIncrementTick+0x1f0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80020e8:	4b74      	ldr	r3, [pc, #464]	; (80022bc <xTaskIncrementTick+0x1f0>)
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d117      	bne.n	8002124 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 80020f4:	4b72      	ldr	r3, [pc, #456]	; (80022c0 <xTaskIncrementTick+0x1f4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <xTaskIncrementTick+0x36>
 80020fe:	b672      	cpsid	i
 8002100:	e7fe      	b.n	8002100 <xTaskIncrementTick+0x34>
 8002102:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <xTaskIncrementTick+0x1f4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	4b6e      	ldr	r3, [pc, #440]	; (80022c4 <xTaskIncrementTick+0x1f8>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b6c      	ldr	r3, [pc, #432]	; (80022c0 <xTaskIncrementTick+0x1f4>)
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	4b6c      	ldr	r3, [pc, #432]	; (80022c4 <xTaskIncrementTick+0x1f8>)
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	4b6c      	ldr	r3, [pc, #432]	; (80022c8 <xTaskIncrementTick+0x1fc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <xTaskIncrementTick+0x1fc>)
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	f000 fb5e 	bl	80027e0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002124:	4b69      	ldr	r3, [pc, #420]	; (80022cc <xTaskIncrementTick+0x200>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	429a      	cmp	r2, r3
 800212c:	d200      	bcs.n	8002130 <xTaskIncrementTick+0x64>
 800212e:	e0a4      	b.n	800227a <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002130:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <xTaskIncrementTick+0x1f4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d104      	bne.n	8002144 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800213a:	4b64      	ldr	r3, [pc, #400]	; (80022cc <xTaskIncrementTick+0x200>)
 800213c:	2201      	movs	r2, #1
 800213e:	4252      	negs	r2, r2
 8002140:	601a      	str	r2, [r3, #0]
                    break;
 8002142:	e09a      	b.n	800227a <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <xTaskIncrementTick+0x1f4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d203      	bcs.n	8002164 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800215c:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <xTaskIncrementTick+0x200>)
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002162:	e08a      	b.n	800227a <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	68d2      	ldr	r2, [r2, #12]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	6892      	ldr	r2, [r2, #8]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	3304      	adds	r3, #4
 8002186:	429a      	cmp	r2, r3
 8002188:	d103      	bne.n	8002192 <xTaskIncrementTick+0xc6>
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d01e      	beq.n	80021e8 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	6a12      	ldr	r2, [r2, #32]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	69d2      	ldr	r2, [r2, #28]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	3318      	adds	r3, #24
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d103      	bne.n	80021d8 <xTaskIncrementTick+0x10c>
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2200      	movs	r2, #0
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	1e5a      	subs	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <xTaskIncrementTick+0x204>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d903      	bls.n	80021fc <xTaskIncrementTick+0x130>
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f8:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <xTaskIncrementTick+0x204>)
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002200:	4934      	ldr	r1, [pc, #208]	; (80022d4 <xTaskIncrementTick+0x208>)
 8002202:	0013      	movs	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	189b      	adds	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	18cb      	adds	r3, r1, r3
 800220c:	3304      	adds	r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	3204      	adds	r2, #4
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1d1a      	adds	r2, r3, #4
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002236:	0013      	movs	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	189b      	adds	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4a25      	ldr	r2, [pc, #148]	; (80022d4 <xTaskIncrementTick+0x208>)
 8002240:	189a      	adds	r2, r3, r2
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	615a      	str	r2, [r3, #20]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224a:	4922      	ldr	r1, [pc, #136]	; (80022d4 <xTaskIncrementTick+0x208>)
 800224c:	0013      	movs	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	189b      	adds	r3, r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	585b      	ldr	r3, [r3, r1]
 8002256:	1c58      	adds	r0, r3, #1
 8002258:	491e      	ldr	r1, [pc, #120]	; (80022d4 <xTaskIncrementTick+0x208>)
 800225a:	0013      	movs	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	189b      	adds	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <xTaskIncrementTick+0x20c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	429a      	cmp	r2, r3
 8002270:	d800      	bhi.n	8002274 <xTaskIncrementTick+0x1a8>
 8002272:	e75d      	b.n	8002130 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 8002274:	2301      	movs	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002278:	e75a      	b.n	8002130 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <xTaskIncrementTick+0x20c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002280:	4914      	ldr	r1, [pc, #80]	; (80022d4 <xTaskIncrementTick+0x208>)
 8002282:	0013      	movs	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	189b      	adds	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	585b      	ldr	r3, [r3, r1]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d901      	bls.n	8002294 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8002290:	2301      	movs	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <xTaskIncrementTick+0x210>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800229c:	2301      	movs	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	e004      	b.n	80022ac <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <xTaskIncrementTick+0x214>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <xTaskIncrementTick+0x214>)
 80022aa:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80022ac:	69fb      	ldr	r3, [r7, #28]
}
 80022ae:	0018      	movs	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b008      	add	sp, #32
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	2000052c 	.word	0x2000052c
 80022bc:	20000508 	.word	0x20000508
 80022c0:	200004bc 	.word	0x200004bc
 80022c4:	200004c0 	.word	0x200004c0
 80022c8:	2000051c 	.word	0x2000051c
 80022cc:	20000524 	.word	0x20000524
 80022d0:	2000050c 	.word	0x2000050c
 80022d4:	20000034 	.word	0x20000034
 80022d8:	20000030 	.word	0x20000030
 80022dc:	20000518 	.word	0x20000518
 80022e0:	20000514 	.word	0x20000514

080022e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <vTaskSwitchContext+0x90>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <vTaskSwitchContext+0x94>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80022f8:	e037      	b.n	800236a <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <vTaskSwitchContext+0x94>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <vTaskSwitchContext+0x98>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	e007      	b.n	8002318 <vTaskSwitchContext+0x34>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <vTaskSwitchContext+0x2e>
 800230e:	b672      	cpsid	i
 8002310:	e7fe      	b.n	8002310 <vTaskSwitchContext+0x2c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3b01      	subs	r3, #1
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	4919      	ldr	r1, [pc, #100]	; (8002380 <vTaskSwitchContext+0x9c>)
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	0013      	movs	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	189b      	adds	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	585b      	ldr	r3, [r3, r1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0ee      	beq.n	8002308 <vTaskSwitchContext+0x24>
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	0013      	movs	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	189b      	adds	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <vTaskSwitchContext+0x9c>)
 8002336:	189b      	adds	r3, r3, r2
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	3308      	adds	r3, #8
 800234c:	429a      	cmp	r2, r3
 800234e:	d104      	bne.n	800235a <vTaskSwitchContext+0x76>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <vTaskSwitchContext+0xa0>)
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <vTaskSwitchContext+0x98>)
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	601a      	str	r2, [r3, #0]
}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	b002      	add	sp, #8
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	2000052c 	.word	0x2000052c
 8002378:	20000518 	.word	0x20000518
 800237c:	2000050c 	.word	0x2000050c
 8002380:	20000034 	.word	0x20000034
 8002384:	20000030 	.word	0x20000030

08002388 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <vTaskPlaceOnEventList+0x14>
 8002398:	b672      	cpsid	i
 800239a:	e7fe      	b.n	800239a <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <vTaskPlaceOnEventList+0x38>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3318      	adds	r3, #24
 80023a2:	001a      	movs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	0011      	movs	r1, r2
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7ff f898 	bl	80014de <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 fa4a 	bl	800284c <prvAddCurrentTaskToDelayedList>
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000030 	.word	0x20000030

080023c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <vTaskPlaceOnEventListRestricted+0x16>
 80023d6:	b672      	cpsid	i
 80023d8:	e7fe      	b.n	80023d8 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <vTaskPlaceOnEventListRestricted+0x78>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	61da      	str	r2, [r3, #28]
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <vTaskPlaceOnEventListRestricted+0x78>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	6892      	ldr	r2, [r2, #8]
 80023f0:	621a      	str	r2, [r3, #32]
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <vTaskPlaceOnEventListRestricted+0x78>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	3218      	adds	r2, #24
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <vTaskPlaceOnEventListRestricted+0x78>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3318      	adds	r3, #24
 8002404:	001a      	movs	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <vTaskPlaceOnEventListRestricted+0x78>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 8002422:	2301      	movs	r3, #1
 8002424:	425b      	negs	r3, r3
 8002426:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	0011      	movs	r1, r2
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fa0c 	bl	800284c <prvAddCurrentTaskToDelayedList>
    }
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b006      	add	sp, #24
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000030 	.word	0x20000030

08002440 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <xTaskRemoveFromEventList+0x1a>
 8002456:	b672      	cpsid	i
 8002458:	e7fe      	b.n	8002458 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	6a12      	ldr	r2, [r2, #32]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	69d2      	ldr	r2, [r2, #28]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	3318      	adds	r3, #24
 800247c:	429a      	cmp	r2, r3
 800247e:	d103      	bne.n	8002488 <xTaskRemoveFromEventList+0x48>
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2200      	movs	r2, #0
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	1e5a      	subs	r2, r3, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002498:	4b48      	ldr	r3, [pc, #288]	; (80025bc <xTaskRemoveFromEventList+0x17c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d15d      	bne.n	800255c <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	68d2      	ldr	r2, [r2, #12]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	6892      	ldr	r2, [r2, #8]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	3304      	adds	r3, #4
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d103      	bne.n	80024ce <xTaskRemoveFromEventList+0x8e>
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2200      	movs	r2, #0
 80024d2:	615a      	str	r2, [r3, #20]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	1e5a      	subs	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <xTaskRemoveFromEventList+0x180>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d903      	bls.n	80024f2 <xTaskRemoveFromEventList+0xb2>
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ee:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <xTaskRemoveFromEventList+0x180>)
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f6:	4933      	ldr	r1, [pc, #204]	; (80025c4 <xTaskRemoveFromEventList+0x184>)
 80024f8:	0013      	movs	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	189b      	adds	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	18cb      	adds	r3, r1, r3
 8002502:	3304      	adds	r3, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	3204      	adds	r2, #4
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	1d1a      	adds	r2, r3, #4
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252c:	0013      	movs	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	189b      	adds	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4a23      	ldr	r2, [pc, #140]	; (80025c4 <xTaskRemoveFromEventList+0x184>)
 8002536:	189a      	adds	r2, r3, r2
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002540:	4920      	ldr	r1, [pc, #128]	; (80025c4 <xTaskRemoveFromEventList+0x184>)
 8002542:	0013      	movs	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	189b      	adds	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	585b      	ldr	r3, [r3, r1]
 800254c:	1c58      	adds	r0, r3, #1
 800254e:	491d      	ldr	r1, [pc, #116]	; (80025c4 <xTaskRemoveFromEventList+0x184>)
 8002550:	0013      	movs	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	189b      	adds	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	5058      	str	r0, [r3, r1]
 800255a:	e01b      	b.n	8002594 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <xTaskRemoveFromEventList+0x188>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	61da      	str	r2, [r3, #28]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	621a      	str	r2, [r3, #32]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	3218      	adds	r2, #24
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	3318      	adds	r3, #24
 800257e:	001a      	movs	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <xTaskRemoveFromEventList+0x188>)
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <xTaskRemoveFromEventList+0x188>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <xTaskRemoveFromEventList+0x188>)
 8002592:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <xTaskRemoveFromEventList+0x18c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	429a      	cmp	r2, r3
 80025a0:	d905      	bls.n	80025ae <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80025a2:	2301      	movs	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <xTaskRemoveFromEventList+0x190>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e001      	b.n	80025b2 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80025b2:	69fb      	ldr	r3, [r7, #28]
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b008      	add	sp, #32
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	2000052c 	.word	0x2000052c
 80025c0:	2000050c 	.word	0x2000050c
 80025c4:	20000034 	.word	0x20000034
 80025c8:	200004c4 	.word	0x200004c4
 80025cc:	20000030 	.word	0x20000030
 80025d0:	20000518 	.word	0x20000518

080025d4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <vTaskInternalSetTimeOutState+0x20>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <vTaskInternalSetTimeOutState+0x24>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	605a      	str	r2, [r3, #4]
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000051c 	.word	0x2000051c
 80025f8:	20000508 	.word	0x20000508

080025fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <xTaskCheckForTimeOut+0x14>
 800260c:	b672      	cpsid	i
 800260e:	e7fe      	b.n	800260e <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <xTaskCheckForTimeOut+0x1e>
 8002616:	b672      	cpsid	i
 8002618:	e7fe      	b.n	8002618 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 800261a:	f000 fca1 	bl	8002f60 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800261e:	4b1f      	ldr	r3, [pc, #124]	; (800269c <xTaskCheckForTimeOut+0xa0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3301      	adds	r3, #1
 8002634:	d102      	bne.n	800263c <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e027      	b.n	800268c <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <xTaskCheckForTimeOut+0xa4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d00a      	beq.n	800265e <xTaskCheckForTimeOut+0x62>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	429a      	cmp	r2, r3
 8002650:	d305      	bcc.n	800265e <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002652:	2301      	movs	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e016      	b.n	800268c <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	d20c      	bcs.n	8002682 <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1ad2      	subs	r2, r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	0018      	movs	r0, r3
 8002678:	f7ff ffac 	bl	80025d4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e004      	b.n	800268c <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002688:	2301      	movs	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800268c:	f000 fc7a 	bl	8002f84 <vPortExitCritical>

    return xReturn;
 8002690:	697b      	ldr	r3, [r7, #20]
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b006      	add	sp, #24
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	20000508 	.word	0x20000508
 80026a0:	2000051c 	.word	0x2000051c

080026a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80026a8:	4b02      	ldr	r3, [pc, #8]	; (80026b4 <vTaskMissedYield+0x10>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000518 	.word	0x20000518

080026b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80026c0:	f000 f84e 	bl	8002760 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <prvIdleTask+0x1c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d9f9      	bls.n	80026c0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80026cc:	f000 fc38 	bl	8002f40 <vPortYield>
        prvCheckTasksWaitingTermination();
 80026d0:	e7f6      	b.n	80026c0 <prvIdleTask+0x8>
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	20000034 	.word	0x20000034

080026d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	e00c      	b.n	80026fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	0013      	movs	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4a14      	ldr	r2, [pc, #80]	; (8002740 <prvInitialiseTaskLists+0x68>)
 80026f0:	189b      	adds	r3, r3, r2
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7fe feca 	bl	800148c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3301      	adds	r3, #1
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b37      	cmp	r3, #55	; 0x37
 8002702:	d9ef      	bls.n	80026e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <prvInitialiseTaskLists+0x6c>)
 8002706:	0018      	movs	r0, r3
 8002708:	f7fe fec0 	bl	800148c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <prvInitialiseTaskLists+0x70>)
 800270e:	0018      	movs	r0, r3
 8002710:	f7fe febc 	bl	800148c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <prvInitialiseTaskLists+0x74>)
 8002716:	0018      	movs	r0, r3
 8002718:	f7fe feb8 	bl	800148c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <prvInitialiseTaskLists+0x78>)
 800271e:	0018      	movs	r0, r3
 8002720:	f7fe feb4 	bl	800148c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <prvInitialiseTaskLists+0x7c>)
 8002726:	0018      	movs	r0, r3
 8002728:	f7fe feb0 	bl	800148c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <prvInitialiseTaskLists+0x80>)
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <prvInitialiseTaskLists+0x6c>)
 8002730:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <prvInitialiseTaskLists+0x84>)
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <prvInitialiseTaskLists+0x70>)
 8002736:	601a      	str	r2, [r3, #0]
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000034 	.word	0x20000034
 8002744:	20000494 	.word	0x20000494
 8002748:	200004a8 	.word	0x200004a8
 800274c:	200004c4 	.word	0x200004c4
 8002750:	200004d8 	.word	0x200004d8
 8002754:	200004f0 	.word	0x200004f0
 8002758:	200004bc 	.word	0x200004bc
 800275c:	200004c0 	.word	0x200004c0

08002760 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002766:	e01a      	b.n	800279e <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8002768:	f000 fbfa 	bl	8002f60 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <prvCheckTasksWaitingTermination+0x50>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	0018      	movs	r0, r3
 800277a:	f7fe fee6 	bl	800154a <uxListRemove>
                --uxCurrentNumberOfTasks;
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <prvCheckTasksWaitingTermination+0x54>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	1e5a      	subs	r2, r3, #1
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <prvCheckTasksWaitingTermination+0x54>)
 8002786:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <prvCheckTasksWaitingTermination+0x58>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <prvCheckTasksWaitingTermination+0x58>)
 8002790:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8002792:	f000 fbf7 	bl	8002f84 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	f000 f80f 	bl	80027bc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <prvCheckTasksWaitingTermination+0x58>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e0      	bne.n	8002768 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	200004d8 	.word	0x200004d8
 80027b4:	20000504 	.word	0x20000504
 80027b8:	200004ec 	.word	0x200004ec

080027bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 fd09 	bl	80031e0 <vPortFree>
            vPortFree( pxTCB );
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 fd05 	bl	80031e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b002      	add	sp, #8
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <prvResetNextTaskUnblockTime+0x2c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d104      	bne.n	80027f8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <prvResetNextTaskUnblockTime+0x30>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	4252      	negs	r2, r2
 80027f4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80027f6:	e005      	b.n	8002804 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <prvResetNextTaskUnblockTime+0x2c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <prvResetNextTaskUnblockTime+0x30>)
 8002802:	601a      	str	r2, [r3, #0]
}
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	200004bc 	.word	0x200004bc
 8002810:	20000524 	.word	0x20000524

08002814 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <xTaskGetSchedulerState+0x30>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002822:	2301      	movs	r3, #1
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	e008      	b.n	800283a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <xTaskGetSchedulerState+0x34>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002830:	2302      	movs	r3, #2
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	e001      	b.n	800283a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800283a:	687b      	ldr	r3, [r7, #4]
    }
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000510 	.word	0x20000510
 8002848:	2000052c 	.word	0x2000052c

0800284c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002856:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800285c:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3304      	adds	r3, #4
 8002862:	0018      	movs	r0, r3
 8002864:	f7fe fe71 	bl	800154a <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3301      	adds	r3, #1
 800286c:	d124      	bne.n	80028b8 <prvAddCurrentTaskToDelayedList+0x6c>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d021      	beq.n	80028b8 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002874:	4b28      	ldr	r3, [pc, #160]	; (8002918 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	6892      	ldr	r2, [r2, #8]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	3204      	adds	r2, #4
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1d1a      	adds	r2, r3, #4
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <prvAddCurrentTaskToDelayedList+0xcc>)
 80028a8:	615a      	str	r2, [r3, #20]
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <prvAddCurrentTaskToDelayedList+0xcc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <prvAddCurrentTaskToDelayedList+0xcc>)
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80028b6:	e026      	b.n	8002906 <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	18d3      	adds	r3, r2, r3
 80028be:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d209      	bcs.n	80028e4 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028d0:	4b12      	ldr	r3, [pc, #72]	; (800291c <prvAddCurrentTaskToDelayedList+0xd0>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3304      	adds	r3, #4
 80028da:	0019      	movs	r1, r3
 80028dc:	0010      	movs	r0, r2
 80028de:	f7fe fdfe 	bl	80014de <vListInsert>
}
 80028e2:	e010      	b.n	8002906 <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028e4:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <prvAddCurrentTaskToDelayedList+0xd4>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3304      	adds	r3, #4
 80028ee:	0019      	movs	r1, r3
 80028f0:	0010      	movs	r0, r2
 80028f2:	f7fe fdf4 	bl	80014de <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <prvAddCurrentTaskToDelayedList+0xd8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d202      	bcs.n	8002906 <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	601a      	str	r2, [r3, #0]
}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b006      	add	sp, #24
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	20000508 	.word	0x20000508
 8002914:	20000030 	.word	0x20000030
 8002918:	200004f0 	.word	0x200004f0
 800291c:	200004c0 	.word	0x200004c0
 8002920:	200004bc 	.word	0x200004bc
 8002924:	20000524 	.word	0x20000524

08002928 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002932:	f000 fa41 	bl	8002db8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <xTimerCreateTimerTask+0x44>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <xTimerCreateTimerTask+0x30>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	005a      	lsls	r2, r3, #1
 8002942:	490b      	ldr	r1, [pc, #44]	; (8002970 <xTimerCreateTimerTask+0x48>)
 8002944:	480b      	ldr	r0, [pc, #44]	; (8002974 <xTimerCreateTimerTask+0x4c>)
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <xTimerCreateTimerTask+0x50>)
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	2302      	movs	r3, #2
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2300      	movs	r3, #0
 8002950:	f7ff f8f7 	bl	8001b42 <xTaskCreate>
 8002954:	0003      	movs	r3, r0
 8002956:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <xTimerCreateTimerTask+0x3a>
 800295e:	b672      	cpsid	i
 8002960:	e7fe      	b.n	8002960 <xTimerCreateTimerTask+0x38>
        return xReturn;
 8002962:	687b      	ldr	r3, [r7, #4]
    }
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000560 	.word	0x20000560
 8002970:	08003478 	.word	0x08003478
 8002974:	08002a25 	.word	0x08002a25
 8002978:	20000564 	.word	0x20000564

0800297c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002988:	e009      	b.n	800299e <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	18d3      	adds	r3, r2, r3
 8002992:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	0010      	movs	r0, r2
 800299c:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	18d1      	adds	r1, r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f8d8 	bl	8002b60 <prvInsertTimerInActiveList>
 80029b0:	1e03      	subs	r3, r0, #0
 80029b2:	d1ea      	bne.n	800298a <prvReloadTimer+0xe>
        }
    }
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b004      	add	sp, #16
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <prvProcessExpiredTimer+0x60>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3304      	adds	r3, #4
 80029d8:	0018      	movs	r0, r3
 80029da:	f7fe fdb6 	bl	800154a <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2228      	movs	r2, #40	; 0x28
 80029e2:	5c9b      	ldrb	r3, [r3, r2]
 80029e4:	001a      	movs	r2, r3
 80029e6:	2304      	movs	r3, #4
 80029e8:	4013      	ands	r3, r2
 80029ea:	d006      	beq.n	80029fa <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	0018      	movs	r0, r3
 80029f4:	f7ff ffc2 	bl	800297c <prvReloadTimer>
 80029f8:	e008      	b.n	8002a0c <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2228      	movs	r2, #40	; 0x28
 80029fe:	5c9b      	ldrb	r3, [r3, r2]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4393      	bics	r3, r2
 8002a04:	b2d9      	uxtb	r1, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2228      	movs	r2, #40	; 0x28
 8002a0a:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	0010      	movs	r0, r2
 8002a14:	4798      	blx	r3
    }
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b004      	add	sp, #16
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	20000558 	.word	0x20000558

08002a24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 f853 	bl	8002adc <prvGetNextExpireTime>
 8002a36:	0003      	movs	r3, r0
 8002a38:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0011      	movs	r1, r2
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 f803 	bl	8002a4c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002a46:	f000 f8cd 	bl	8002be4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a4a:	e7ef      	b.n	8002a2c <prvTimerTask+0x8>

08002a4c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002a56:	f7ff fa37 	bl	8001ec8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 f85e 	bl	8002b20 <prvSampleTimeNow>
 8002a64:	0003      	movs	r3, r0
 8002a66:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d12b      	bne.n	8002ac6 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10c      	bne.n	8002a8e <prvProcessTimerOrBlockTask+0x42>
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d808      	bhi.n	8002a8e <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8002a7c:	f7ff fa30 	bl	8001ee0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	0011      	movs	r1, r2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f7ff ff9a 	bl	80029c0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002a8c:	e01d      	b.n	8002aca <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <prvProcessTimerOrBlockTask+0x88>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <prvProcessTimerOrBlockTask+0x56>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <prvProcessTimerOrBlockTask+0x58>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <prvProcessTimerOrBlockTask+0x8c>)
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	f7ff f812 	bl	8001adc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002ab8:	f7ff fa12 	bl	8001ee0 <xTaskResumeAll>
 8002abc:	1e03      	subs	r3, r0, #0
 8002abe:	d104      	bne.n	8002aca <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8002ac0:	f000 fa3e 	bl	8002f40 <vPortYield>
    }
 8002ac4:	e001      	b.n	8002aca <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8002ac6:	f7ff fa0b 	bl	8001ee0 <xTaskResumeAll>
    }
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b004      	add	sp, #16
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	2000055c 	.word	0x2000055c
 8002ad8:	20000560 	.word	0x20000560

08002adc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <prvGetNextExpireTime+0x40>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <prvGetNextExpireTime+0x16>
 8002aee:	2201      	movs	r2, #1
 8002af0:	e000      	b.n	8002af4 <prvGetNextExpireTime+0x18>
 8002af2:	2200      	movs	r2, #0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <prvGetNextExpireTime+0x40>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	e001      	b.n	8002b10 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002b10:	68fb      	ldr	r3, [r7, #12]
    }
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b004      	add	sp, #16
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	20000558 	.word	0x20000558

08002b20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002b28:	f7ff fac2 	bl	80020b0 <xTaskGetTickCount>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <prvSampleTimeNow+0x3c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d205      	bcs.n	8002b46 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8002b3a:	f000 f915 	bl	8002d68 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e002      	b.n	8002b4c <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <prvSampleTimeNow+0x3c>)
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8002b52:	68fb      	ldr	r3, [r7, #12]
    }
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000568 	.word	0x20000568

08002b60 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d812      	bhi.n	8002bac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	1ad2      	subs	r2, r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d302      	bcc.n	8002b9a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002b94:	2301      	movs	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	e01b      	b.n	8002bd2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <prvInsertTimerInActiveList+0x7c>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	0010      	movs	r0, r2
 8002ba6:	f7fe fc9a 	bl	80014de <vListInsert>
 8002baa:	e012      	b.n	8002bd2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d206      	bcs.n	8002bc2 <prvInsertTimerInActiveList+0x62>
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d302      	bcc.n	8002bc2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e007      	b.n	8002bd2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <prvInsertTimerInActiveList+0x80>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	0019      	movs	r1, r3
 8002bcc:	0010      	movs	r0, r2
 8002bce:	f7fe fc86 	bl	80014de <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002bd2:	697b      	ldr	r3, [r7, #20]
    }
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b006      	add	sp, #24
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	2000055c 	.word	0x2000055c
 8002be0:	20000558 	.word	0x20000558

08002be4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002bea:	e0a9      	b.n	8002d40 <prvProcessReceivedCommands+0x15c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da0f      	bge.n	8002c14 <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <prvProcessReceivedCommands+0x20>
 8002c00:	b672      	cpsid	i
 8002c02:	e7fe      	b.n	8002c02 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	6858      	ldr	r0, [r3, #4]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	0019      	movs	r1, r3
 8002c12:	4790      	blx	r2
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	da00      	bge.n	8002c1e <prvProcessReceivedCommands+0x3a>
 8002c1c:	e08f      	b.n	8002d3e <prvProcessReceivedCommands+0x15a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d004      	beq.n	8002c36 <prvProcessReceivedCommands+0x52>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7fe fc8a 	bl	800154a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c36:	003b      	movs	r3, r7
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7ff ff71 	bl	8002b20 <prvSampleTimeNow>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	617b      	str	r3, [r7, #20]

                switch( xMessage.xMessageID )
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	d900      	bls.n	8002c4c <prvProcessReceivedCommands+0x68>
 8002c4a:	e079      	b.n	8002d40 <prvProcessReceivedCommands+0x15c>
 8002c4c:	009a      	lsls	r2, r3, #2
 8002c4e:	4b44      	ldr	r3, [pc, #272]	; (8002d60 <prvProcessReceivedCommands+0x17c>)
 8002c50:	18d3      	adds	r3, r2, r3
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2228      	movs	r2, #40	; 0x28
 8002c5a:	5c9b      	ldrb	r3, [r3, r2]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	b2d9      	uxtb	r1, r3
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2228      	movs	r2, #40	; 0x28
 8002c66:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	18d1      	adds	r1, r2, r3
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	69b8      	ldr	r0, [r7, #24]
 8002c7a:	f7ff ff71 	bl	8002b60 <prvInsertTimerInActiveList>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d05e      	beq.n	8002d40 <prvProcessReceivedCommands+0x15c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2228      	movs	r2, #40	; 0x28
 8002c86:	5c9b      	ldrb	r3, [r3, r2]
 8002c88:	001a      	movs	r2, r3
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d00a      	beq.n	8002ca6 <prvProcessReceivedCommands+0xc2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	18d1      	adds	r1, r2, r3
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f7ff fe6c 	bl	800297c <prvReloadTimer>
 8002ca4:	e008      	b.n	8002cb8 <prvProcessReceivedCommands+0xd4>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2228      	movs	r2, #40	; 0x28
 8002caa:	5c9b      	ldrb	r3, [r3, r2]
 8002cac:	2201      	movs	r2, #1
 8002cae:	4393      	bics	r3, r2
 8002cb0:	b2d9      	uxtb	r1, r3
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2228      	movs	r2, #40	; 0x28
 8002cb6:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	0010      	movs	r0, r2
 8002cc0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002cc2:	e03d      	b.n	8002d40 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2228      	movs	r2, #40	; 0x28
 8002cc8:	5c9b      	ldrb	r3, [r3, r2]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4393      	bics	r3, r2
 8002cce:	b2d9      	uxtb	r1, r3
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2228      	movs	r2, #40	; 0x28
 8002cd4:	5499      	strb	r1, [r3, r2]
                        break;
 8002cd6:	e033      	b.n	8002d40 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2228      	movs	r2, #40	; 0x28
 8002cdc:	5c9b      	ldrb	r3, [r3, r2]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2228      	movs	r2, #40	; 0x28
 8002ce8:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <prvProcessReceivedCommands+0x11a>
 8002cfa:	b672      	cpsid	i
 8002cfc:	e7fe      	b.n	8002cfc <prvProcessReceivedCommands+0x118>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	18d1      	adds	r1, r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	69b8      	ldr	r0, [r7, #24]
 8002d0c:	f7ff ff28 	bl	8002b60 <prvInsertTimerInActiveList>
                        break;
 8002d10:	e016      	b.n	8002d40 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2228      	movs	r2, #40	; 0x28
 8002d16:	5c9b      	ldrb	r3, [r3, r2]
 8002d18:	001a      	movs	r2, r3
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d104      	bne.n	8002d2a <prvProcessReceivedCommands+0x146>
                            {
                                vPortFree( pxTimer );
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f000 fa5c 	bl	80031e0 <vPortFree>
 8002d28:	e00a      	b.n	8002d40 <prvProcessReceivedCommands+0x15c>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2228      	movs	r2, #40	; 0x28
 8002d2e:	5c9b      	ldrb	r3, [r3, r2]
 8002d30:	2201      	movs	r2, #1
 8002d32:	4393      	bics	r3, r2
 8002d34:	b2d9      	uxtb	r1, r3
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2228      	movs	r2, #40	; 0x28
 8002d3a:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002d3c:	e000      	b.n	8002d40 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002d3e:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <prvProcessReceivedCommands+0x180>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	1d39      	adds	r1, r7, #4
 8002d46:	2200      	movs	r2, #0
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7fe fd34 	bl	80017b6 <xQueueReceive>
 8002d4e:	1e03      	subs	r3, r0, #0
 8002d50:	d000      	beq.n	8002d54 <prvProcessReceivedCommands+0x170>
 8002d52:	e74b      	b.n	8002bec <prvProcessReceivedCommands+0x8>
        }
    }
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b008      	add	sp, #32
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	080034c8 	.word	0x080034c8
 8002d64:	20000560 	.word	0x20000560

08002d68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d6e:	e00b      	b.n	8002d88 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <prvSwitchTimerLists+0x48>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	425a      	negs	r2, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	0011      	movs	r1, r2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7ff fe1c 	bl	80029c0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <prvSwitchTimerLists+0x48>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ee      	bne.n	8002d70 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <prvSwitchTimerLists+0x48>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <prvSwitchTimerLists+0x4c>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <prvSwitchTimerLists+0x48>)
 8002d9e:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <prvSwitchTimerLists+0x4c>)
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	601a      	str	r2, [r3, #0]
    }
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b002      	add	sp, #8
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	20000558 	.word	0x20000558
 8002db4:	2000055c 	.word	0x2000055c

08002db8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002dbc:	f000 f8d0 	bl	8002f60 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002dc0:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <prvCheckForValidListAndQueue+0x5c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d120      	bne.n	8002e0a <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <prvCheckForValidListAndQueue+0x60>)
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7fe fb5e 	bl	800148c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <prvCheckForValidListAndQueue+0x64>)
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f7fe fb5a 	bl	800148c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <prvCheckForValidListAndQueue+0x68>)
 8002dda:	4a0f      	ldr	r2, [pc, #60]	; (8002e18 <prvCheckForValidListAndQueue+0x60>)
 8002ddc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <prvCheckForValidListAndQueue+0x6c>)
 8002de0:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <prvCheckForValidListAndQueue+0x64>)
 8002de2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002de4:	2200      	movs	r2, #0
 8002de6:	2110      	movs	r1, #16
 8002de8:	200a      	movs	r0, #10
 8002dea:	f7fe fc5f 	bl	80016ac <xQueueGenericCreate>
 8002dee:	0002      	movs	r2, r0
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <prvCheckForValidListAndQueue+0x5c>)
 8002df2:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002df4:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <prvCheckForValidListAndQueue+0x5c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <prvCheckForValidListAndQueue+0x5c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <prvCheckForValidListAndQueue+0x70>)
 8002e02:	0011      	movs	r1, r2
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7fe fe25 	bl	8001a54 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e0a:	f000 f8bb 	bl	8002f84 <vPortExitCritical>
    }
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000560 	.word	0x20000560
 8002e18:	20000530 	.word	0x20000530
 8002e1c:	20000544 	.word	0x20000544
 8002e20:	20000558 	.word	0x20000558
 8002e24:	2000055c 	.word	0x2000055c
 8002e28:	08003480 	.word	0x08003480

08002e2c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	0452      	lsls	r2, r2, #17
 8002e44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3b04      	subs	r3, #4
 8002e4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3b04      	subs	r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8002e58:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <pxPortInitialiseStack+0x50>)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3b14      	subs	r3, #20
 8002e62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3b20      	subs	r3, #32
 8002e6e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002e70:	68fb      	ldr	r3, [r7, #12]
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b004      	add	sp, #16
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	08002e81 	.word	0x08002e81

08002e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <prvTaskExitError+0x2c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	d001      	beq.n	8002e96 <prvTaskExitError+0x16>
 8002e92:	b672      	cpsid	i
 8002e94:	e7fe      	b.n	8002e94 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8002e96:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0fc      	beq.n	8002e9a <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	20000010 	.word	0x20000010

08002eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	0000      	movs	r0, r0
 8002ebc:	0000      	movs	r0, r0
	...

08002ec0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <pxCurrentTCBConst2>)
 8002ec2:	6813      	ldr	r3, [r2, #0]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	3020      	adds	r0, #32
 8002ec8:	f380 8809 	msr	PSP, r0
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f380 8814 	msr	CONTROL, r0
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002ed8:	46ae      	mov	lr, r5
 8002eda:	bc08      	pop	{r3}
 8002edc:	bc04      	pop	{r2}
 8002ede:	b662      	cpsie	i
 8002ee0:	4718      	bx	r3
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46c0      	nop			; (mov r8, r8)

08002ef0 <pxCurrentTCBConst2>:
 8002ef0:	20000030 	.word	0x20000030
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46c0      	nop			; (mov r8, r8)

08002ef8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <xPortStartScheduler+0x40>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <xPortStartScheduler+0x40>)
 8002f02:	21ff      	movs	r1, #255	; 0xff
 8002f04:	0409      	lsls	r1, r1, #16
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <xPortStartScheduler+0x40>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <xPortStartScheduler+0x40>)
 8002f10:	21ff      	movs	r1, #255	; 0xff
 8002f12:	0609      	lsls	r1, r1, #24
 8002f14:	430a      	orrs	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002f18:	f000 f898 	bl	800304c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002f1c:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <xPortStartScheduler+0x44>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8002f22:	f7ff ffcd 	bl	8002ec0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f26:	f7ff f9dd 	bl	80022e4 <vTaskSwitchContext>
    prvTaskExitError();
 8002f2a:	f7ff ffa9 	bl	8002e80 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	e000ed20 	.word	0xe000ed20
 8002f3c:	20000010 	.word	0x20000010

08002f40 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <vPortYield+0x1c>)
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	0552      	lsls	r2, r2, #21
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8002f4c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002f50:	f3bf 8f6f 	isb	sy
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	e000ed04 	.word	0xe000ed04

08002f60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002f64:	b672      	cpsid	i
    uxCriticalNesting++;
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <vPortEnterCritical+0x20>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <vPortEnterCritical+0x20>)
 8002f6e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002f70:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002f74:	f3bf 8f6f 	isb	sy
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	20000010 	.word	0x20000010

08002f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <vPortExitCritical+0x2c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <vPortExitCritical+0x10>
 8002f90:	b672      	cpsid	i
 8002f92:	e7fe      	b.n	8002f92 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <vPortExitCritical+0x2c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <vPortExitCritical+0x2c>)
 8002f9c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8002f9e:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <vPortExitCritical+0x2c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d100      	bne.n	8002fa8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8002fa6:	b662      	cpsie	i
    }
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	20000010 	.word	0x20000010

08002fb4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002fb4:	f3ef 8010 	mrs	r0, PRIMASK
 8002fb8:	b672      	cpsid	i
 8002fba:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	0018      	movs	r0, r3

08002fc0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002fc0:	f380 8810 	msr	PRIMASK, r0
 8002fc4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
	...

08002fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002fd0:	f3ef 8009 	mrs	r0, PSP
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <pxCurrentTCBConst>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	3820      	subs	r0, #32
 8002fda:	6010      	str	r0, [r2, #0]
 8002fdc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002fde:	4644      	mov	r4, r8
 8002fe0:	464d      	mov	r5, r9
 8002fe2:	4656      	mov	r6, sl
 8002fe4:	465f      	mov	r7, fp
 8002fe6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002fe8:	b508      	push	{r3, lr}
 8002fea:	b672      	cpsid	i
 8002fec:	f7ff f97a 	bl	80022e4 <vTaskSwitchContext>
 8002ff0:	b662      	cpsie	i
 8002ff2:	bc0c      	pop	{r2, r3}
 8002ff4:	6811      	ldr	r1, [r2, #0]
 8002ff6:	6808      	ldr	r0, [r1, #0]
 8002ff8:	3010      	adds	r0, #16
 8002ffa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002ffc:	46a0      	mov	r8, r4
 8002ffe:	46a9      	mov	r9, r5
 8003000:	46b2      	mov	sl, r6
 8003002:	46bb      	mov	fp, r7
 8003004:	f380 8809 	msr	PSP, r0
 8003008:	3820      	subs	r0, #32
 800300a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800300c:	4718      	bx	r3
 800300e:	46c0      	nop			; (mov r8, r8)

08003010 <pxCurrentTCBConst>:
 8003010:	20000030 	.word	0x20000030
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46c0      	nop			; (mov r8, r8)

08003018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800301e:	f7ff ffc9 	bl	8002fb4 <ulSetInterruptMaskFromISR>
 8003022:	0003      	movs	r3, r0
 8003024:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003026:	f7ff f851 	bl	80020cc <xTaskIncrementTick>
 800302a:	1e03      	subs	r3, r0, #0
 800302c:	d003      	beq.n	8003036 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <SysTick_Handler+0x30>)
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	0552      	lsls	r2, r2, #21
 8003034:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff ffc1 	bl	8002fc0 <vClearInterruptMaskFromISR>
}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b002      	add	sp, #8
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <vPortSetupTimerInterrupt+0x34>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <vPortSetupTimerInterrupt+0x38>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <vPortSetupTimerInterrupt+0x3c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	22fa      	movs	r2, #250	; 0xfa
 8003062:	0091      	lsls	r1, r2, #2
 8003064:	0018      	movs	r0, r3
 8003066:	f7fd f84f 	bl	8000108 <__udivsi3>
 800306a:	0003      	movs	r3, r0
 800306c:	001a      	movs	r2, r3
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <vPortSetupTimerInterrupt+0x40>)
 8003070:	3a01      	subs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003074:	4b02      	ldr	r3, [pc, #8]	; (8003080 <vPortSetupTimerInterrupt+0x34>)
 8003076:	2207      	movs	r2, #7
 8003078:	601a      	str	r2, [r3, #0]
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	e000e010 	.word	0xe000e010
 8003084:	e000e018 	.word	0xe000e018
 8003088:	20000000 	.word	0x20000000
 800308c:	e000e014 	.word	0xe000e014

08003090 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800309c:	f7fe ff14 	bl	8001ec8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80030a0:	4b4a      	ldr	r3, [pc, #296]	; (80031cc <pvPortMalloc+0x13c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80030a8:	f000 f8e6 	bl	8003278 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d012      	beq.n	80030d8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80030b2:	2208      	movs	r2, #8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2107      	movs	r1, #7
 80030b8:	400b      	ands	r3, r1
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	3308      	adds	r3, #8
 80030be:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d804      	bhi.n	80030d4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	18d3      	adds	r3, r2, r3
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	e001      	b.n	80030d8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db68      	blt.n	80031b0 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d065      	beq.n	80031b0 <pvPortMalloc+0x120>
 80030e4:	4b3a      	ldr	r3, [pc, #232]	; (80031d0 <pvPortMalloc+0x140>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d860      	bhi.n	80031b0 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80030ee:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <pvPortMalloc+0x144>)
 80030f0:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80030f2:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <pvPortMalloc+0x144>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030f8:	e004      	b.n	8003104 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	d903      	bls.n	8003116 <pvPortMalloc+0x86>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f1      	bne.n	80030fa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003116:	4b2d      	ldr	r3, [pc, #180]	; (80031cc <pvPortMalloc+0x13c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	429a      	cmp	r2, r3
 800311e:	d047      	beq.n	80031b0 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2208      	movs	r2, #8
 8003126:	189b      	adds	r3, r3, r2
 8003128:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	1ad2      	subs	r2, r2, r3
 800313a:	2308      	movs	r3, #8
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	429a      	cmp	r2, r3
 8003140:	d916      	bls.n	8003170 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	18d3      	adds	r3, r2, r3
 8003148:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2207      	movs	r2, #7
 800314e:	4013      	ands	r3, r2
 8003150:	d001      	beq.n	8003156 <pvPortMalloc+0xc6>
 8003152:	b672      	cpsid	i
 8003154:	e7fe      	b.n	8003154 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	1ad2      	subs	r2, r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	0018      	movs	r0, r3
 800316c:	f000 f8de 	bl	800332c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <pvPortMalloc+0x140>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	1ad2      	subs	r2, r2, r3
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <pvPortMalloc+0x140>)
 800317c:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <pvPortMalloc+0x140>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <pvPortMalloc+0x148>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d203      	bcs.n	8003192 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <pvPortMalloc+0x140>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <pvPortMalloc+0x148>)
 8003190:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	0612      	lsls	r2, r2, #24
 800319a:	431a      	orrs	r2, r3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <pvPortMalloc+0x14c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <pvPortMalloc+0x14c>)
 80031ae:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80031b0:	f7fe fe96 	bl	8001ee0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2207      	movs	r2, #7
 80031b8:	4013      	ands	r3, r2
 80031ba:	d001      	beq.n	80031c0 <pvPortMalloc+0x130>
 80031bc:	b672      	cpsid	i
 80031be:	e7fe      	b.n	80031be <pvPortMalloc+0x12e>
    return pvReturn;
 80031c0:	697b      	ldr	r3, [r7, #20]
}
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b008      	add	sp, #32
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	20001d74 	.word	0x20001d74
 80031d0:	20001d78 	.word	0x20001d78
 80031d4:	20001d6c 	.word	0x20001d6c
 80031d8:	20001d7c 	.word	0x20001d7c
 80031dc:	20001d80 	.word	0x20001d80

080031e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d039      	beq.n	8003266 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80031f2:	2308      	movs	r3, #8
 80031f4:	425b      	negs	r3, r3
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	18d3      	adds	r3, r2, r3
 80031fa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	db01      	blt.n	800320c <vPortFree+0x2c>
 8003208:	b672      	cpsid	i
 800320a:	e7fe      	b.n	800320a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <vPortFree+0x38>
 8003214:	b672      	cpsid	i
 8003216:	e7fe      	b.n	8003216 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	0fdb      	lsrs	r3, r3, #31
 800321e:	1c1a      	adds	r2, r3, #0
 8003220:	2301      	movs	r3, #1
 8003222:	4013      	ands	r3, r2
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01d      	beq.n	8003266 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d119      	bne.n	8003266 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	085a      	lsrs	r2, r3, #1
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800323e:	f7fe fe43 	bl	8001ec8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <vPortFree+0x90>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	18d2      	adds	r2, r2, r3
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <vPortFree+0x90>)
 800324e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	0018      	movs	r0, r3
 8003254:	f000 f86a 	bl	800332c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <vPortFree+0x94>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <vPortFree+0x94>)
 8003260:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8003262:	f7fe fe3d 	bl	8001ee0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	46bd      	mov	sp, r7
 800326a:	b004      	add	sp, #16
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	20001d78 	.word	0x20001d78
 8003274:	20001d84 	.word	0x20001d84

08003278 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800327e:	23c0      	movs	r3, #192	; 0xc0
 8003280:	015b      	lsls	r3, r3, #5
 8003282:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003284:	4b24      	ldr	r3, [pc, #144]	; (8003318 <prvHeapInit+0xa0>)
 8003286:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2207      	movs	r2, #7
 800328c:	4013      	ands	r3, r2
 800328e:	d00c      	beq.n	80032aa <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3307      	adds	r3, #7
 8003294:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2207      	movs	r2, #7
 800329a:	4393      	bics	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad2      	subs	r2, r2, r3
 80032a4:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <prvHeapInit+0xa0>)
 80032a6:	18d3      	adds	r3, r2, r3
 80032a8:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <prvHeapInit+0xa4>)
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <prvHeapInit+0xa4>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	18d3      	adds	r3, r2, r3
 80032c0:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80032c2:	2208      	movs	r2, #8
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2207      	movs	r2, #7
 80032ce:	4393      	bics	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <prvHeapInit+0xa8>)
 80032d6:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <prvHeapInit+0xa8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2200      	movs	r2, #0
 80032de:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <prvHeapInit+0xa8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	1ad2      	subs	r2, r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <prvHeapInit+0xa8>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <prvHeapInit+0xac>)
 8003304:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <prvHeapInit+0xb0>)
 800330c:	601a      	str	r2, [r3, #0]
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b004      	add	sp, #16
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	2000056c 	.word	0x2000056c
 800331c:	20001d6c 	.word	0x20001d6c
 8003320:	20001d74 	.word	0x20001d74
 8003324:	20001d7c 	.word	0x20001d7c
 8003328:	20001d78 	.word	0x20001d78

0800332c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003334:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <prvInsertBlockIntoFreeList+0xa8>)
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e002      	b.n	8003340 <prvInsertBlockIntoFreeList+0x14>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d8f7      	bhi.n	800333a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	18d3      	adds	r3, r2, r3
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d108      	bne.n	800336e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	18d2      	adds	r2, r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	18d2      	adds	r2, r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d118      	bne.n	80033b4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <prvInsertBlockIntoFreeList+0xac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d00d      	beq.n	80033aa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	18d2      	adds	r2, r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e008      	b.n	80033bc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <prvInsertBlockIntoFreeList+0xac>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e003      	b.n	80033bc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d002      	beq.n	80033ca <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	20001d6c 	.word	0x20001d6c
 80033d8:	20001d74 	.word	0x20001d74

080033dc <__libc_init_array>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	2600      	movs	r6, #0
 80033e0:	4d0c      	ldr	r5, [pc, #48]	; (8003414 <__libc_init_array+0x38>)
 80033e2:	4c0d      	ldr	r4, [pc, #52]	; (8003418 <__libc_init_array+0x3c>)
 80033e4:	1b64      	subs	r4, r4, r5
 80033e6:	10a4      	asrs	r4, r4, #2
 80033e8:	42a6      	cmp	r6, r4
 80033ea:	d109      	bne.n	8003400 <__libc_init_array+0x24>
 80033ec:	2600      	movs	r6, #0
 80033ee:	f000 f82b 	bl	8003448 <_init>
 80033f2:	4d0a      	ldr	r5, [pc, #40]	; (800341c <__libc_init_array+0x40>)
 80033f4:	4c0a      	ldr	r4, [pc, #40]	; (8003420 <__libc_init_array+0x44>)
 80033f6:	1b64      	subs	r4, r4, r5
 80033f8:	10a4      	asrs	r4, r4, #2
 80033fa:	42a6      	cmp	r6, r4
 80033fc:	d105      	bne.n	800340a <__libc_init_array+0x2e>
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
 8003400:	00b3      	lsls	r3, r6, #2
 8003402:	58eb      	ldr	r3, [r5, r3]
 8003404:	4798      	blx	r3
 8003406:	3601      	adds	r6, #1
 8003408:	e7ee      	b.n	80033e8 <__libc_init_array+0xc>
 800340a:	00b3      	lsls	r3, r6, #2
 800340c:	58eb      	ldr	r3, [r5, r3]
 800340e:	4798      	blx	r3
 8003410:	3601      	adds	r6, #1
 8003412:	e7f2      	b.n	80033fa <__libc_init_array+0x1e>
 8003414:	080034f0 	.word	0x080034f0
 8003418:	080034f0 	.word	0x080034f0
 800341c:	080034f0 	.word	0x080034f0
 8003420:	080034f4 	.word	0x080034f4

08003424 <memcpy>:
 8003424:	2300      	movs	r3, #0
 8003426:	b510      	push	{r4, lr}
 8003428:	429a      	cmp	r2, r3
 800342a:	d100      	bne.n	800342e <memcpy+0xa>
 800342c:	bd10      	pop	{r4, pc}
 800342e:	5ccc      	ldrb	r4, [r1, r3]
 8003430:	54c4      	strb	r4, [r0, r3]
 8003432:	3301      	adds	r3, #1
 8003434:	e7f8      	b.n	8003428 <memcpy+0x4>

08003436 <memset>:
 8003436:	0003      	movs	r3, r0
 8003438:	1882      	adds	r2, r0, r2
 800343a:	4293      	cmp	r3, r2
 800343c:	d100      	bne.n	8003440 <memset+0xa>
 800343e:	4770      	bx	lr
 8003440:	7019      	strb	r1, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	e7f9      	b.n	800343a <memset+0x4>
	...

08003448 <_init>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344e:	bc08      	pop	{r3}
 8003450:	469e      	mov	lr, r3
 8003452:	4770      	bx	lr

08003454 <_fini>:
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345a:	bc08      	pop	{r3}
 800345c:	469e      	mov	lr, r3
 800345e:	4770      	bx	lr
